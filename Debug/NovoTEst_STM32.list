
NovoTEst_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08012898  08012898  00013898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012ed0  08012ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012ed8  08012ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012edc  08012edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08012ee0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d28  240001e8  080130c8  000141e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004f10  080130c8  00014f10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000272ef  00000000  00000000  00014216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d9b  00000000  00000000  0003b505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f70  00000000  00000000  000402a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018a6  00000000  00000000  00042210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1d6  00000000  00000000  00043ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028a6f  00000000  00000000  00080c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178fd4  00000000  00000000  000a96fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002226cf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b94  00000000  00000000  00222714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0022c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801287c 	.word	0x0801287c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0801287c 	.word	0x0801287c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e015      	b.n	8000aec <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fc5d 	bl	8000380 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	4798      	blx	r3
 8000ad4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e005      	b.n	8000aec <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f00e ff7e 	bl	800f9e6 <memcpy>

    return copy;
 8000aea:	68bb      	ldr	r3, [r7, #8]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2028      	movs	r0, #40	@ 0x28
 8000b02:	4798      	blx	r3
 8000b04:	60f8      	str	r0, [r7, #12]
    if (node)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000b0c:	2228      	movs	r2, #40	@ 0x28
 8000b0e:	2100      	movs	r1, #0
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f00e fec7 	bl	800f8a4 <memset>
    }

    return node;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000b2c:	e03d      	b.n	8000baa <cJSON_Delete+0x8a>
    {
        next = item->next;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <cJSON_Delete+0x32>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffe7 	bl	8000b20 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10c      	bne.n	8000b78 <cJSON_Delete+0x58>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d008      	beq.n	8000b78 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6912      	ldr	r2, [r2, #16]
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4798      	blx	r3
            item->valuestring = NULL;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10c      	bne.n	8000b9e <cJSON_Delete+0x7e>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d008      	beq.n	8000b9e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6a12      	ldr	r2, [r2, #32]
 8000b94:	4610      	mov	r0, r2
 8000b96:	4798      	blx	r3
            item->string = NULL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	4798      	blx	r3
        item = next;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1be      	bne.n	8000b2e <cJSON_Delete+0xe>
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000000 	.word	0x24000000

08000bc0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000bc4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <ensure+0x20>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <ensure+0x24>
    {
        return NULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e083      	b.n	8000cfc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <ensure+0x3c>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d301      	bcc.n	8000c0c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e077      	b.n	8000cfc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da01      	bge.n	8000c16 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e072      	b.n	8000cfc <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d805      	bhi.n	8000c38 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	e061      	b.n	8000cfc <ensure+0x12c>
    }

    if (p->noalloc) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ensure+0x74>
        return NULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e05b      	b.n	8000cfc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c4a:	d308      	bcc.n	8000c5e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db03      	blt.n	8000c5a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8000c52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e004      	b.n	8000c64 <ensure+0x94>
        }
        else
        {
            return NULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e04e      	b.n	8000cfc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	4610      	mov	r0, r2
 8000c78:	4798      	blx	r3
 8000c7a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d132      	bne.n	8000ce8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4798      	blx	r3
            p->length = 0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]

            return NULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e02e      	b.n	8000cfc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	4798      	blx	r3
 8000ca6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10d      	bne.n	8000cca <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4798      	blx	r3
            p->length = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

            return NULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e018      	b.n	8000cfc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f00e fe85 	bl	800f9e6 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4798      	blx	r3
    }
    p->length = newsize;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4413      	add	r3, r2
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d013      	beq.n	8000d3e <update_offset+0x3a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00f      	beq.n	8000d3e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689c      	ldr	r4, [r3, #8]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fb26 	bl	8000380 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	18e2      	adds	r2, r4, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	e000      	b.n	8000d40 <update_offset+0x3c>
        return;
 8000d3e:	bf00      	nop
}
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d52:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8000d56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d5a:	eeb0 6bc7 	vabs.f64	d6, d7
 8000d5e:	ed97 7b00 	vldr	d7, [r7]
 8000d62:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dd04      	ble.n	8000d7a <compare_double+0x32>
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d78:	e003      	b.n	8000d82 <compare_double+0x3a>
 8000d7a:	ed97 7b00 	vldr	d7, [r7]
 8000d7e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d82:	ed87 7b04 	vstr	d7, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8000d86:	ed97 6b02 	vldr	d6, [r7, #8]
 8000d8a:	ed97 7b00 	vldr	d7, [r7]
 8000d8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d92:	eeb0 6bc7 	vabs.f64	d6, d7
 8000d96:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d9a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000dc0 <compare_double+0x78>
 8000d9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000da2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	3cb00000 	.word	0x3cb00000

08000dc8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	@ 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ddc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8000dfc:	f7ff fee0 	bl	8000bc0 <get_decimal_point>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <print_number+0x54>
    {
        return false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e0a2      	b.n	8000f62 <print_number+0x19a>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8000e1c:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000e20:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e24:	eeb4 6b47 	vcmp.f64	d6, d7
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	d612      	bvs.n	8000e54 <print_number+0x8c>
 8000e2e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e32:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e36:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8000f70 <print_number+0x1a8>
 8000e3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	bfd4      	ite	le
 8000e44:	2301      	movle	r3, #1
 8000e46:	2300      	movgt	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f083 0301 	eor.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d007      	beq.n	8000e64 <print_number+0x9c>
    {
        length = sprintf((char*)number_buffer, "null");
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4947      	ldr	r1, [pc, #284]	@ (8000f78 <print_number+0x1b0>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00e fbfa 	bl	800f654 <siprintf>
 8000e60:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e62:	e03c      	b.n	8000ede <print_number+0x116>
    }
    else if(d == (double)item->valueint)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e70:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000e74:	eeb4 6b47 	vcmp.f64	d6, d7
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d109      	bne.n	8000e92 <print_number+0xca>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	493d      	ldr	r1, [pc, #244]	@ (8000f7c <print_number+0x1b4>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00e fbe3 	bl	800f654 <siprintf>
 8000e8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e90:	e025      	b.n	8000ede <print_number+0x116>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8000e92:	f107 0014 	add.w	r0, r7, #20
 8000e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e9a:	4939      	ldr	r1, [pc, #228]	@ (8000f80 <print_number+0x1b8>)
 8000e9c:	f00e fbda 	bl	800f654 <siprintf>
 8000ea0:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <print_number+0x1bc>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00e fbf3 	bl	800f698 <siscanf>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10a      	bne.n	8000ece <print_number+0x106>
 8000eb8:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ebc:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec4:	f7ff ff40 	bl	8000d48 <compare_double>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <print_number+0x116>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8000ece:	f107 0014 	add.w	r0, r7, #20
 8000ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ed6:	492c      	ldr	r1, [pc, #176]	@ (8000f88 <print_number+0x1c0>)
 8000ed8:	f00e fbbc 	bl	800f654 <siprintf>
 8000edc:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db02      	blt.n	8000eea <print_number+0x122>
 8000ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee6:	2b19      	cmp	r3, #25
 8000ee8:	dd01      	ble.n	8000eee <print_number+0x126>
    {
        return false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e039      	b.n	8000f62 <print_number+0x19a>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8000eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f7ff fe6b 	bl	8000bd0 <ensure>
 8000efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8000efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <print_number+0x13e>
    {
        return false;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e02d      	b.n	8000f62 <print_number+0x19a>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f0a:	e01a      	b.n	8000f42 <print_number+0x17a>
    {
        if (number_buffer[i] == decimal_point)
 8000f0c:	f107 0214 	add.w	r2, r7, #20
 8000f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d105      	bne.n	8000f2a <print_number+0x162>
        {
            output_pointer[i] = '.';
 8000f1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f22:	4413      	add	r3, r2
 8000f24:	222e      	movs	r2, #46	@ 0x2e
 8000f26:	701a      	strb	r2, [r3, #0]
            continue;
 8000f28:	e008      	b.n	8000f3c <print_number+0x174>
        }

        output_pointer[i] = number_buffer[i];
 8000f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f2e:	4413      	add	r3, r2
 8000f30:	f107 0114 	add.w	r1, r7, #20
 8000f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f36:	440a      	add	r2, r1
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f3e:	3301      	adds	r3, #1
 8000f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3e0      	bcc.n	8000f0c <print_number+0x144>
    }
    output_pointer[i] = '\0';
 8000f4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f4e:	4413      	add	r3, r2
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f5a:	441a      	add	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	609a      	str	r2, [r3, #8]

    return true;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3748      	adds	r7, #72	@ 0x48
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	ffffffff 	.word	0xffffffff
 8000f74:	7fefffff 	.word	0x7fefffff
 8000f78:	080128a4 	.word	0x080128a4
 8000f7c:	080128ac 	.word	0x080128ac
 8000f80:	080128b0 	.word	0x080128b0
 8000f84:	080128b8 	.word	0x080128b8
 8000f88:	080128bc 	.word	0x080128bc

08000f8c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <print_string_ptr+0x28>
    {
        return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e110      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d111      	bne.n	8000fde <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8000fba:	2103      	movs	r1, #3
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff fe07 	bl	8000bd0 <ensure>
 8000fc2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <print_string_ptr+0x42>
        {
            return false;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e103      	b.n	80011d6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4a83      	ldr	r2, [pc, #524]	@ (80011e0 <print_string_ptr+0x254>)
 8000fd2:	8811      	ldrh	r1, [r2, #0]
 8000fd4:	7892      	ldrb	r2, [r2, #2]
 8000fd6:	8019      	strh	r1, [r3, #0]
 8000fd8:	709a      	strb	r2, [r3, #2]

        return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0fb      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e024      	b.n	800102e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b22      	cmp	r3, #34	@ 0x22
 8000fea:	dc0f      	bgt.n	800100c <print_string_ptr+0x80>
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	db13      	blt.n	8001018 <print_string_ptr+0x8c>
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80011e4 <print_string_ptr+0x258>)
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <print_string_ptr+0x84>
 800100a:	e005      	b.n	8001018 <print_string_ptr+0x8c>
 800100c:	2b5c      	cmp	r3, #92	@ 0x5c
 800100e:	d103      	bne.n	8001018 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
                break;
 8001016:	e007      	b.n	8001028 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b1f      	cmp	r3, #31
 800101e:	d802      	bhi.n	8001026 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3305      	adds	r3, #5
 8001024:	617b      	str	r3, [r7, #20]
                }
                break;
 8001026:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3301      	adds	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1d6      	bne.n	8000fe4 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	461a      	mov	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3303      	adds	r3, #3
 8001048:	4619      	mov	r1, r3
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f7ff fdc0 	bl	8000bd0 <ensure>
 8001050:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <print_string_ptr+0xd0>
    {
        return false;
 8001058:	2300      	movs	r3, #0
 800105a:	e0bc      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d117      	bne.n	8001092 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2222      	movs	r2, #34	@ 0x22
 8001066:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f00e fcb8 	bl	800f9e6 <memcpy>
        output[output_length + 1] = '\"';
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	2222      	movs	r2, #34	@ 0x22
 8001080:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

        return true;
 800108e:	2301      	movs	r3, #1
 8001090:	e0a1      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2222      	movs	r2, #34	@ 0x22
 8001096:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	3301      	adds	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e086      	b.n	80011b2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	d90c      	bls.n	80010c6 <print_string_ptr+0x13a>
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b22      	cmp	r3, #34	@ 0x22
 80010b2:	d008      	beq.n	80010c6 <print_string_ptr+0x13a>
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80010ba:	d004      	beq.n	80010c6 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e06f      	b.n	80011a6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	61ba      	str	r2, [r7, #24]
 80010cc:	225c      	movs	r2, #92	@ 0x5c
 80010ce:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b22      	cmp	r3, #34	@ 0x22
 80010d6:	dc3d      	bgt.n	8001154 <print_string_ptr+0x1c8>
 80010d8:	2b08      	cmp	r3, #8
 80010da:	db59      	blt.n	8001190 <print_string_ptr+0x204>
 80010dc:	3b08      	subs	r3, #8
 80010de:	2b1a      	cmp	r3, #26
 80010e0:	d856      	bhi.n	8001190 <print_string_ptr+0x204>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <print_string_ptr+0x15c>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001169 	.word	0x08001169
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001179 	.word	0x08001179
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001171 	.word	0x08001171
 80010fc:	08001181 	.word	0x08001181
 8001100:	08001191 	.word	0x08001191
 8001104:	08001191 	.word	0x08001191
 8001108:	08001191 	.word	0x08001191
 800110c:	08001191 	.word	0x08001191
 8001110:	08001191 	.word	0x08001191
 8001114:	08001191 	.word	0x08001191
 8001118:	08001191 	.word	0x08001191
 800111c:	08001191 	.word	0x08001191
 8001120:	08001191 	.word	0x08001191
 8001124:	08001191 	.word	0x08001191
 8001128:	08001191 	.word	0x08001191
 800112c:	08001191 	.word	0x08001191
 8001130:	08001191 	.word	0x08001191
 8001134:	08001191 	.word	0x08001191
 8001138:	08001191 	.word	0x08001191
 800113c:	08001191 	.word	0x08001191
 8001140:	08001191 	.word	0x08001191
 8001144:	08001191 	.word	0x08001191
 8001148:	08001191 	.word	0x08001191
 800114c:	08001191 	.word	0x08001191
 8001150:	08001161 	.word	0x08001161
 8001154:	2b5c      	cmp	r3, #92	@ 0x5c
 8001156:	d11b      	bne.n	8001190 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	225c      	movs	r2, #92	@ 0x5c
 800115c:	701a      	strb	r2, [r3, #0]
                    break;
 800115e:	e022      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2222      	movs	r2, #34	@ 0x22
 8001164:	701a      	strb	r2, [r3, #0]
                    break;
 8001166:	e01e      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2262      	movs	r2, #98	@ 0x62
 800116c:	701a      	strb	r2, [r3, #0]
                    break;
 800116e:	e01a      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2266      	movs	r2, #102	@ 0x66
 8001174:	701a      	strb	r2, [r3, #0]
                    break;
 8001176:	e016      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	226e      	movs	r2, #110	@ 0x6e
 800117c:	701a      	strb	r2, [r3, #0]
                    break;
 800117e:	e012      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2272      	movs	r2, #114	@ 0x72
 8001184:	701a      	strb	r2, [r3, #0]
                    break;
 8001186:	e00e      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2274      	movs	r2, #116	@ 0x74
 800118c:	701a      	strb	r2, [r3, #0]
                    break;
 800118e:	e00a      	b.n	80011a6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4914      	ldr	r1, [pc, #80]	@ (80011e8 <print_string_ptr+0x25c>)
 8001198:	69b8      	ldr	r0, [r7, #24]
 800119a:	f00e fa5b 	bl	800f654 <siprintf>
                    output_pointer += 4;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3304      	adds	r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
                    break;
 80011a4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f af74 	bne.w	80010a4 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	2222      	movs	r2, #34	@ 0x22
 80011c6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3302      	adds	r3, #2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4413      	add	r3, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

    return true;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	080128c4 	.word	0x080128c4
 80011e4:	04000037 	.word	0x04000037
 80011e8:	080128c8 	.word	0x080128c8

080011ec <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fec5 	bl	8000f8c <print_string_ptr>
 8001202:	4603      	mov	r3, r0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	@ 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2224      	movs	r2, #36	@ 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00e fb3d 	bl	800f8a4 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a3b      	ldr	r2, [pc, #236]	@ (800131c <print+0x110>)
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	4610      	mov	r0, r2
 8001234:	4798      	blx	r3
 8001236:	4603      	mov	r3, r0
 8001238:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <print+0x110>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	ca07      	ldmia	r2, {r0, r1, r2}
 800124c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d042      	beq.n	80012dc <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f86f 	bl	8001340 <print_value>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03b      	beq.n	80012e0 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fd49 	bl	8000d04 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	3201      	adds	r2, #1
 8001284:	4611      	mov	r1, r2
 8001286:	4798      	blx	r3
 8001288:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800128a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800128c:	2b00      	cmp	r3, #0
 800128e:	d029      	beq.n	80012e4 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e020      	b.n	80012d8 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	3201      	adds	r2, #1
 800129e:	4610      	mov	r0, r2
 80012a0:	4798      	blx	r3
 80012a2:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 80012a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01e      	beq.n	80012e8 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	bf28      	it	cs
 80012b6:	4613      	movcs	r3, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012bc:	f00e fb93 	bl	800f9e6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012c4:	4413      	add	r3, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4610      	mov	r0, r2
 80012d2:	4798      	blx	r3
        buffer->buffer = NULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80012d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012da:	e01a      	b.n	8001312 <print+0x106>
        goto fail;
 80012dc:	bf00      	nop
 80012de:	e004      	b.n	80012ea <print+0xde>
        goto fail;
 80012e0:	bf00      	nop
 80012e2:	e002      	b.n	80012ea <print+0xde>
            goto fail;
 80012e4:	bf00      	nop
 80012e6:	e000      	b.n	80012ea <print+0xde>
            goto fail;
 80012e8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4610      	mov	r0, r2
 80012f8:	4798      	blx	r3
        buffer->buffer = NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <print+0x104>
    {
        hooks->deallocate(printed);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800130a:	4798      	blx	r3
        printed = NULL;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3738      	adds	r7, #56	@ 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	080129c8 	.word	0x080129c8

08001320 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <cJSON_Print+0x1c>)
 800132a:	2101      	movs	r1, #1
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff6d 	bl	800120c <print>
 8001332:	4603      	mov	r3, r0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24000000 	.word	0x24000000

08001340 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <print_value+0x1a>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <print_value+0x1e>
    {
        return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e0c9      	b.n	80014f2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b80      	cmp	r3, #128	@ 0x80
 8001366:	f000 808e 	beq.w	8001486 <print_value+0x146>
 800136a:	2b80      	cmp	r3, #128	@ 0x80
 800136c:	f300 80c0 	bgt.w	80014f0 <print_value+0x1b0>
 8001370:	2b20      	cmp	r3, #32
 8001372:	dc49      	bgt.n	8001408 <print_value+0xc8>
 8001374:	2b00      	cmp	r3, #0
 8001376:	f340 80bb 	ble.w	80014f0 <print_value+0x1b0>
 800137a:	3b01      	subs	r3, #1
 800137c:	2b1f      	cmp	r3, #31
 800137e:	f200 80b7 	bhi.w	80014f0 <print_value+0x1b0>
 8001382:	a201      	add	r2, pc, #4	@ (adr r2, 8001388 <print_value+0x48>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001433 	.word	0x08001433
 800138c:	08001457 	.word	0x08001457
 8001390:	080014f1 	.word	0x080014f1
 8001394:	0800140f 	.word	0x0800140f
 8001398:	080014f1 	.word	0x080014f1
 800139c:	080014f1 	.word	0x080014f1
 80013a0:	080014f1 	.word	0x080014f1
 80013a4:	0800147b 	.word	0x0800147b
 80013a8:	080014f1 	.word	0x080014f1
 80013ac:	080014f1 	.word	0x080014f1
 80013b0:	080014f1 	.word	0x080014f1
 80013b4:	080014f1 	.word	0x080014f1
 80013b8:	080014f1 	.word	0x080014f1
 80013bc:	080014f1 	.word	0x080014f1
 80013c0:	080014f1 	.word	0x080014f1
 80013c4:	080014cd 	.word	0x080014cd
 80013c8:	080014f1 	.word	0x080014f1
 80013cc:	080014f1 	.word	0x080014f1
 80013d0:	080014f1 	.word	0x080014f1
 80013d4:	080014f1 	.word	0x080014f1
 80013d8:	080014f1 	.word	0x080014f1
 80013dc:	080014f1 	.word	0x080014f1
 80013e0:	080014f1 	.word	0x080014f1
 80013e4:	080014f1 	.word	0x080014f1
 80013e8:	080014f1 	.word	0x080014f1
 80013ec:	080014f1 	.word	0x080014f1
 80013f0:	080014f1 	.word	0x080014f1
 80013f4:	080014f1 	.word	0x080014f1
 80013f8:	080014f1 	.word	0x080014f1
 80013fc:	080014f1 	.word	0x080014f1
 8001400:	080014f1 	.word	0x080014f1
 8001404:	080014d9 	.word	0x080014d9
 8001408:	2b40      	cmp	r3, #64	@ 0x40
 800140a:	d06b      	beq.n	80014e4 <print_value+0x1a4>
 800140c:	e070      	b.n	80014f0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800140e:	2105      	movs	r1, #5
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f7ff fbdd 	bl	8000bd0 <ensure>
 8001416:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <print_value+0xe2>
            {
                return false;
 800141e:	2300      	movs	r3, #0
 8001420:	e067      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <print_value+0x1bc>)
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	6018      	str	r0, [r3, #0]
 800142a:	7912      	ldrb	r2, [r2, #4]
 800142c:	711a      	strb	r2, [r3, #4]
            return true;
 800142e:	2301      	movs	r3, #1
 8001430:	e05f      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001432:	2106      	movs	r1, #6
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f7ff fbcb 	bl	8000bd0 <ensure>
 800143a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <print_value+0x106>
            {
                return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e055      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <print_value+0x1c0>)
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	6018      	str	r0, [r3, #0]
 800144e:	8892      	ldrh	r2, [r2, #4]
 8001450:	809a      	strh	r2, [r3, #4]
            return true;
 8001452:	2301      	movs	r3, #1
 8001454:	e04d      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8001456:	2105      	movs	r1, #5
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff fbb9 	bl	8000bd0 <ensure>
 800145e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <print_value+0x12a>
            {
                return false;
 8001466:	2300      	movs	r3, #0
 8001468:	e043      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <print_value+0x1c4>)
 800146e:	6810      	ldr	r0, [r2, #0]
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	7912      	ldrb	r2, [r2, #4]
 8001474:	711a      	strb	r2, [r3, #4]
            return true;
 8001476:	2301      	movs	r3, #1
 8001478:	e03b      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fca3 	bl	8000dc8 <print_number>
 8001482:	4603      	mov	r3, r0
 8001484:	e035      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <print_value+0x156>
            {
                return false;
 8001492:	2300      	movs	r3, #0
 8001494:	e02d      	b.n	80014f2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff70 	bl	8000380 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	3301      	adds	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f7ff fb91 	bl	8000bd0 <ensure>
 80014ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <print_value+0x17a>
            {
                return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e01b      	b.n	80014f2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4619      	mov	r1, r3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f00e fa8f 	bl	800f9e6 <memcpy>
            return true;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e012      	b.n	80014f2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fe8c 	bl	80011ec <print_string>
 80014d4:	4603      	mov	r3, r0
 80014d6:	e00c      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f814 	bl	8001508 <print_array>
 80014e0:	4603      	mov	r3, r0
 80014e2:	e006      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f894 	bl	8001614 <print_object>
 80014ec:	4603      	mov	r3, r0
 80014ee:	e000      	b.n	80014f2 <print_value+0x1b2>

        default:
            return false;
 80014f0:	2300      	movs	r3, #0
    }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	080128a4 	.word	0x080128a4
 8001500:	080128d4 	.word	0x080128d4
 8001504:	080128dc 	.word	0x080128dc

08001508 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <print_array+0x22>
    {
        return false;
 8001526:	2300      	movs	r3, #0
 8001528:	e070      	b.n	800160c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800152a:	2101      	movs	r1, #1
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff fb4f 	bl	8000bd0 <ensure>
 8001532:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <print_array+0x36>
    {
        return false;
 800153a:	2300      	movs	r3, #0
 800153c:	e066      	b.n	800160c <print_array+0x104>
    }

    *output_pointer = '[';
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	225b      	movs	r2, #91	@ 0x5b
 8001542:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001558:	e03d      	b.n	80015d6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	6938      	ldr	r0, [r7, #16]
 800155e:	f7ff feef 	bl	8001340 <print_value>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <print_array+0x64>
        {
            return false;
 8001568:	2300      	movs	r3, #0
 800156a:	e04f      	b.n	800160c <print_array+0x104>
        }
        update_offset(output_buffer);
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7ff fbc9 	bl	8000d04 <update_offset>
        if (current_element->next)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d02a      	beq.n	80015d0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <print_array+0x7e>
 8001582:	2302      	movs	r3, #2
 8001584:	e000      	b.n	8001588 <print_array+0x80>
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	4619      	mov	r1, r3
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f7ff fb1d 	bl	8000bd0 <ensure>
 8001596:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <print_array+0x9a>
            {
                return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e034      	b.n	800160c <print_array+0x104>
            }
            *output_pointer++ = ',';
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	617a      	str	r2, [r7, #20]
 80015a8:	222c      	movs	r2, #44	@ 0x2c
 80015aa:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	617a      	str	r2, [r7, #20]
 80015ba:	2220      	movs	r2, #32
 80015bc:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	441a      	add	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1be      	bne.n	800155a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80015dc:	2102      	movs	r1, #2
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff faf6 	bl	8000bd0 <ensure>
 80015e4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <print_array+0xe8>
    {
        return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e00d      	b.n	800160c <print_array+0x104>
    }
    *output_pointer++ = ']';
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	617a      	str	r2, [r7, #20]
 80015f6:	225d      	movs	r2, #93	@ 0x5d
 80015f8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	60da      	str	r2, [r3, #12]

    return true;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <print_object+0x22>
    {
        return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e108      	b.n	8001848 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <print_object+0x2e>
 800163e:	2302      	movs	r3, #2
 8001640:	e000      	b.n	8001644 <print_object+0x30>
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	4619      	mov	r1, r3
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f7ff fabf 	bl	8000bd0 <ensure>
 8001652:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <print_object+0x4a>
    {
        return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e0f4      	b.n	8001848 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	61fa      	str	r2, [r7, #28]
 8001664:	227b      	movs	r2, #123	@ 0x7b
 8001666:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	61fa      	str	r2, [r7, #28]
 8001680:	220a      	movs	r2, #10
 8001682:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	441a      	add	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001690:	e0a0      	b.n	80017d4 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d022      	beq.n	80016e0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4619      	mov	r1, r3
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7ff fa95 	bl	8000bd0 <ensure>
 80016a6:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <print_object+0x9e>
            {
                return false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e0ca      	b.n	8001848 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e007      	b.n	80016c8 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	61fa      	str	r2, [r7, #28]
 80016be:	2209      	movs	r2, #9
 80016c0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3f2      	bcc.n	80016b8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	441a      	add	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc50 	bl	8000f8c <print_string_ptr>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <print_object+0xe2>
        {
            return false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e0a8      	b.n	8001848 <print_object+0x234>
        }
        update_offset(output_buffer);
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f7ff fb04 	bl	8000d04 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <print_object+0xf4>
 8001704:	2302      	movs	r3, #2
 8001706:	e000      	b.n	800170a <print_object+0xf6>
 8001708:	2301      	movs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f7ff fa5e 	bl	8000bd0 <ensure>
 8001714:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <print_object+0x10c>
        {
            return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e093      	b.n	8001848 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	223a      	movs	r2, #58	@ 0x3a
 8001728:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	61fa      	str	r2, [r7, #28]
 8001738:	2209      	movs	r2, #9
 800173a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	441a      	add	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	69b8      	ldr	r0, [r7, #24]
 800174c:	f7ff fdf8 	bl	8001340 <print_value>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <print_object+0x146>
        {
            return false;
 8001756:	2300      	movs	r3, #0
 8001758:	e076      	b.n	8001848 <print_object+0x234>
        }
        update_offset(output_buffer);
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f7ff fad2 	bl	8000d04 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <print_object+0x158>
 8001768:	2201      	movs	r2, #1
 800176a:	e000      	b.n	800176e <print_object+0x15a>
 800176c:	2200      	movs	r2, #0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <print_object+0x166>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <print_object+0x168>
 800177a:	2300      	movs	r3, #0
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	4619      	mov	r1, r3
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f7ff fa22 	bl	8000bd0 <ensure>
 800178c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <print_object+0x184>
        {
            return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e057      	b.n	8001848 <print_object+0x234>
        }
        if (current_item->next)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <print_object+0x196>
        {
            *output_pointer++ = ',';
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	61fa      	str	r2, [r7, #28]
 80017a6:	222c      	movs	r2, #44	@ 0x2c
 80017a8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	61fa      	str	r2, [r7, #28]
 80017b8:	220a      	movs	r2, #10
 80017ba:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	441a      	add	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f af5b 	bne.w	8001692 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <print_object+0x1d8>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	e000      	b.n	80017ee <print_object+0x1da>
 80017ec:	2302      	movs	r3, #2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff f9ed 	bl	8000bd0 <ensure>
 80017f6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <print_object+0x1ee>
    {
        return false;
 80017fe:	2300      	movs	r3, #0
 8001800:	e022      	b.n	8001848 <print_object+0x234>
    }
    if (output_buffer->format)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d010      	beq.n	800182c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e007      	b.n	8001820 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	2209      	movs	r2, #9
 8001818:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	3301      	adds	r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	3b01      	subs	r3, #1
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3f1      	bcc.n	8001810 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	61fa      	str	r2, [r7, #28]
 8001832:	227d      	movs	r2, #125	@ 0x7d
 8001834:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	60da      	str	r2, [r3, #12]

    return true;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <add_item_to_array+0x22>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <add_item_to_array+0x22>
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d101      	bne.n	8001898 <add_item_to_array+0x26>
    {
        return false;
 8001894:	2300      	movs	r3, #0
 8001896:	e01e      	b.n	80018d6 <add_item_to_array+0x64>
    }

    child = array->child;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	609a      	str	r2, [r3, #8]
        item->prev = item;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e00d      	b.n	80018d4 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ffc2 	bl	8001850 <suffix_object>
            array->child->prev = item;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <add_item_to_object+0x30>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <add_item_to_object+0x30>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <add_item_to_object+0x30>
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d101      	bne.n	8001928 <add_item_to_object+0x34>
    {
        return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e036      	b.n	8001996 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ffd5 	bl	80018de <cast_away_const>
 8001934:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e00e      	b.n	8001960 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f7ff f8ad 	bl	8000aa4 <cJSON_strdup>
 800194a:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <add_item_to_object+0x62>
        {
            return false;
 8001952:	2300      	movs	r3, #0
 8001954:	e01f      	b.n	8001996 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800195e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <add_item_to_object+0x8c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a12      	ldr	r2, [r2, #32]
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
    }

    item->string = new_key;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff6f 	bl	8001872 <add_item_to_array>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 80019ae:	ed97 0b00 	vldr	d0, [r7]
 80019b2:	f000 f819 	bl	80019e8 <cJSON_CreateNumber>
 80019b6:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <cJSON_AddNumberToObject+0x44>)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ff96 	bl	80018f4 <add_item_to_object>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	e003      	b.n	80019da <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff f8a4 	bl	8000b20 <cJSON_Delete>
    return NULL;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24000000 	.word	0x24000000

080019e8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80019f2:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <cJSON_CreateNumber+0x90>)
 80019f4:	f7ff f87e 	bl	8000af4 <cJSON_New_Item>
 80019f8:	60f8      	str	r0, [r7, #12]
    if(item)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d02b      	beq.n	8001a58 <cJSON_CreateNumber+0x70>
    {
        item->type = cJSON_Number;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2208      	movs	r2, #8
 8001a04:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001a10:	ed97 7b00 	vldr	d7, [r7]
 8001a14:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001a68 <cJSON_CreateNumber+0x80>
 8001a18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	db04      	blt.n	8001a2c <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	e015      	b.n	8001a58 <cJSON_CreateNumber+0x70>
        }
        else if (num <= (double)INT_MIN)
 8001a2c:	ed97 7b00 	vldr	d7, [r7]
 8001a30:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001a70 <cJSON_CreateNumber+0x88>
 8001a34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d804      	bhi.n	8001a48 <cJSON_CreateNumber+0x60>
        {
            item->valueint = INT_MIN;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	e007      	b.n	8001a58 <cJSON_CreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 8001a48:	ed97 7b00 	vldr	d7, [r7]
 8001a4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a50:	ee17 2a90 	vmov	r2, s15
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	ffc00000 	.word	0xffc00000
 8001a6c:	41dfffff 	.word	0x41dfffff
 8001a70:	00000000 	.word	0x00000000
 8001a74:	c1e00000 	.word	0xc1e00000
 8001a78:	24000000 	.word	0x24000000

08001a7c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <cJSON_CreateObject+0x24>)
 8001a84:	f7ff f836 	bl	8000af4 <cJSON_New_Item>
 8001a88:	6078      	str	r0, [r7, #4]
    if (item)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24000000 	.word	0x24000000

08001aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	200b      	movs	r0, #11
 8001ace:	f001 f89b 	bl	8002c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ad2:	200b      	movs	r0, #11
 8001ad4:	f001 f8b2 	bl	8002c3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	200c      	movs	r0, #12
 8001ade:	f001 f893 	bl	8002c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ae2:	200c      	movs	r0, #12
 8001ae4:	f001 f8aa 	bl	8002c3c <HAL_NVIC_EnableIRQ>

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400

08001af4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorDataQueue */
  sensorDataQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &sensorDataQueue_attributes);
 8001af8:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <MX_FREERTOS_Init+0x48>)
 8001afa:	2102      	movs	r1, #2
 8001afc:	200a      	movs	r0, #10
 8001afe:	f009 f972 	bl	800ade6 <osMessageQueueNew>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <MX_FREERTOS_Init+0x4c>)
 8001b06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b08:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <MX_FREERTOS_Init+0x50>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <MX_FREERTOS_Init+0x54>)
 8001b0e:	f009 f8bd 	bl	800ac8c <osThreadNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <MX_FREERTOS_Init+0x58>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <MX_FREERTOS_Init+0x5c>)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_FREERTOS_Init+0x60>)
 8001b1e:	f009 f8b5 	bl	800ac8c <osThreadNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <MX_FREERTOS_Init+0x64>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 8001b28:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <MX_FREERTOS_Init+0x68>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <MX_FREERTOS_Init+0x6c>)
 8001b2e:	f009 f8ad 	bl	800ac8c <osThreadNew>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <MX_FREERTOS_Init+0x70>)
 8001b36:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	08012a38 	.word	0x08012a38
 8001b40:	24000210 	.word	0x24000210
 8001b44:	080129cc 	.word	0x080129cc
 8001b48:	08001b69 	.word	0x08001b69
 8001b4c:	24000204 	.word	0x24000204
 8001b50:	080129f0 	.word	0x080129f0
 8001b54:	08001b79 	.word	0x08001b79
 8001b58:	24000208 	.word	0x24000208
 8001b5c:	08012a14 	.word	0x08012a14
 8001b60:	08001b89 	.word	0x08001b89
 8001b64:	2400020c 	.word	0x2400020c

08001b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f009 f91d 	bl	800adb0 <osDelay>
 8001b76:	e7fb      	b.n	8001b70 <StartDefaultTask+0x8>

08001b78 <StartProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProducerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f009 f915 	bl	800adb0 <osDelay>
 8001b86:	e7fb      	b.n	8001b80 <StartProducerTask+0x8>

08001b88 <StartConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  // Loop infinito da tarefa
  for(;;)
  {
    // 1. Esperar para receber um item da fila (a tarefa dorme aqui, economizando CPU)
    status = osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever);
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <StartConsumerTask+0xf8>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f107 010c 	add.w	r1, r7, #12
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f009 f995 	bl	800aecc <osMessageQueueGet>
 8001ba2:	6238      	str	r0, [r7, #32]

    if (status == osOK)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f2      	bne.n	8001b90 <StartConsumerTask+0x8>
    {
      // Pisca o LED azul (LD3) para indicar que está a processar e a enviar
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001baa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bae:	4835      	ldr	r0, [pc, #212]	@ (8001c84 <StartConsumerTask+0xfc>)
 8001bb0:	f003 fcb9 	bl	8005526 <HAL_GPIO_TogglePin>

      // 2. Calcular a percentagem (lógica de apresentação)
      float percentage = ((received_data.current_ma - MIN_CURRENT_MA) / (MAX_CURRENT_MA - MIN_CURRENT_MA)) * 100.0f;
 8001bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001bbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bc0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001c88 <StartConsumerTask+0x100>
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      if (percentage < 0.0f) percentage = 0.0f;
 8001bd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d502      	bpl.n	8001be8 <StartConsumerTask+0x60>
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
      if (percentage > 100.0f) percentage = 100.0f;
 8001be8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bec:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001c88 <StartConsumerTask+0x100>
 8001bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	dd01      	ble.n	8001bfe <StartConsumerTask+0x76>
 8001bfa:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <StartConsumerTask+0x104>)
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24

      // 3. Criar o objeto JSON
      cJSON *root = cJSON_CreateObject();
 8001bfe:	f7ff ff3d 	bl	8001a7c <cJSON_CreateObject>
 8001c02:	61f8      	str	r0, [r7, #28]
      if (root != NULL)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0c2      	beq.n	8001b90 <StartConsumerTask+0x8>
      {
        cJSON_AddNumberToObject(root, "raw_adc", received_data.raw_adc);
 8001c0a:	89bb      	ldrh	r3, [r7, #12]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c14:	eeb0 0b47 	vmov.f64	d0, d7
 8001c18:	491d      	ldr	r1, [pc, #116]	@ (8001c90 <StartConsumerTask+0x108>)
 8001c1a:	69f8      	ldr	r0, [r7, #28]
 8001c1c:	f7ff fec0 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "voltage_mV", received_data.voltage_mv);
 8001c20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c28:	eeb0 0b47 	vmov.f64	d0, d7
 8001c2c:	4919      	ldr	r1, [pc, #100]	@ (8001c94 <StartConsumerTask+0x10c>)
 8001c2e:	69f8      	ldr	r0, [r7, #28]
 8001c30:	f7ff feb6 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "current_mA", received_data.current_ma);
 8001c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c40:	4915      	ldr	r1, [pc, #84]	@ (8001c98 <StartConsumerTask+0x110>)
 8001c42:	69f8      	ldr	r0, [r7, #28]
 8001c44:	f7ff feac 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "percentage", percentage);
 8001c48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c50:	eeb0 0b47 	vmov.f64	d0, d7
 8001c54:	4911      	ldr	r1, [pc, #68]	@ (8001c9c <StartConsumerTask+0x114>)
 8001c56:	69f8      	ldr	r0, [r7, #28]
 8001c58:	f7ff fea2 	bl	80019a0 <cJSON_AddNumberToObject>

        // 4. Converter o objeto JSON para uma string
        char *json_string = cJSON_Print(root);
 8001c5c:	69f8      	ldr	r0, [r7, #28]
 8001c5e:	f7ff fb5f 	bl	8001320 <cJSON_Print>
 8001c62:	61b8      	str	r0, [r7, #24]
        if (json_string != NULL)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <StartConsumerTask+0xf0>
        {
          // 5. Enviar a string JSON pela UART3 usando printf
          printf("%s\r\n", json_string);
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <StartConsumerTask+0x118>)
 8001c6e:	f00d fc81 	bl	800f574 <iprintf>

          // 6. LIBERAR A MEMÓRIA ALOCADA! (Muito importante)
          free(json_string);
 8001c72:	69b8      	ldr	r0, [r7, #24]
 8001c74:	f00b fed8 	bl	800da28 <free>
        }

        // 7. Liberar a memória do objeto JSON
        cJSON_Delete(root);
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f7fe ff51 	bl	8000b20 <cJSON_Delete>
    status = osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever);
 8001c7e:	e787      	b.n	8001b90 <StartConsumerTask+0x8>
 8001c80:	24000210 	.word	0x24000210
 8001c84:	58020400 	.word	0x58020400
 8001c88:	42c80000 	.word	0x42c80000
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	08012920 	.word	0x08012920
 8001c94:	08012928 	.word	0x08012928
 8001c98:	08012934 	.word	0x08012934
 8001c9c:	08012940 	.word	0x08012940
 8001ca0:	0801294c 	.word	0x0801294c

08001ca4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cba:	4b56      	ldr	r3, [pc, #344]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc0:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cca:	4b52      	ldr	r3, [pc, #328]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cde:	4a4d      	ldr	r2, [pc, #308]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfc:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d06:	4b43      	ldr	r3, [pc, #268]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d14:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d32:	4b38      	ldr	r3, [pc, #224]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d38:	4a36      	ldr	r2, [pc, #216]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d42:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <MX_GPIO_Init+0x170>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2110      	movs	r1, #16
 8001d54:	4830      	ldr	r0, [pc, #192]	@ (8001e18 <MX_GPIO_Init+0x174>)
 8001d56:	f003 fbcd 	bl	80054f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001d60:	482e      	ldr	r0, [pc, #184]	@ (8001e1c <MX_GPIO_Init+0x178>)
 8001d62:	f003 fbc7 	bl	80054f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d6c:	482c      	ldr	r0, [pc, #176]	@ (8001e20 <MX_GPIO_Init+0x17c>)
 8001d6e:	f003 fbc1 	bl	80054f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2102      	movs	r1, #2
 8001d76:	482b      	ldr	r0, [pc, #172]	@ (8001e24 <MX_GPIO_Init+0x180>)
 8001d78:	f003 fbbc 	bl	80054f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4825      	ldr	r0, [pc, #148]	@ (8001e28 <MX_GPIO_Init+0x184>)
 8001d94:	f003 f9fe 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	481a      	ldr	r0, [pc, #104]	@ (8001e18 <MX_GPIO_Init+0x174>)
 8001db0:	f003 f9f0 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001db4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4813      	ldr	r0, [pc, #76]	@ (8001e1c <MX_GPIO_Init+0x178>)
 8001dce:	f003 f9e1 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8001dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <MX_GPIO_Init+0x17c>)
 8001dec:	f003 f9d2 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001df0:	2302      	movs	r3, #2
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <MX_GPIO_Init+0x180>)
 8001e08:	f003 f9c4 	bl	8005194 <HAL_GPIO_Init>

}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	@ 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	58024400 	.word	0x58024400
 8001e18:	58020000 	.word	0x58020000
 8001e1c:	58020400 	.word	0x58020400
 8001e20:	58020c00 	.word	0x58020c00
 8001e24:	58021000 	.word	0x58021000
 8001e28:	58021400 	.word	0x58021400

08001e2c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e34:	1d39      	adds	r1, r7, #4
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <__io_putchar+0x20>)
 8001e3e:	f007 f92d 	bl	800909c <HAL_UART_Transmit>
  return ch;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	240002ec 	.word	0x240002ec

08001e50 <AD7091R_Init>:

void AD7091R_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4816      	ldr	r0, [pc, #88]	@ (8001eb4 <AD7091R_Init+0x64>)
 8001e5c:	f003 fb4a 	bl	80054f4 <HAL_GPIO_WritePin>
    uint16_t reset_cmd_tx = AD7091R_CMD_RESET;
 8001e60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e64:	80fb      	strh	r3, [r7, #6]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&reset_cmd_tx, 2, HAL_MAX_DELAY);
 8001e66:	1db9      	adds	r1, r7, #6
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4812      	ldr	r0, [pc, #72]	@ (8001eb8 <AD7091R_Init+0x68>)
 8001e70:	f006 fb26 	bl	80084c0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	2110      	movs	r1, #16
 8001e78:	480e      	ldr	r0, [pc, #56]	@ (8001eb4 <AD7091R_Init+0x64>)
 8001e7a:	f003 fb3b 	bl	80054f4 <HAL_GPIO_WritePin>
    HAL_Delay(100); // HAL_Delay é aceitável aqui, pois é antes do RTOS iniciar
 8001e7e:	2064      	movs	r0, #100	@ 0x64
 8001e80:	f000 fdda 	bl	8002a38 <HAL_Delay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2110      	movs	r1, #16
 8001e88:	480a      	ldr	r0, [pc, #40]	@ (8001eb4 <AD7091R_Init+0x64>)
 8001e8a:	f003 fb33 	bl	80054f4 <HAL_GPIO_WritePin>
    uint16_t normal_cmd_tx = AD7091R_CMD_NORMAL;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	80bb      	strh	r3, [r7, #4]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY);
 8001e92:	1d39      	adds	r1, r7, #4
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <AD7091R_Init+0x68>)
 8001e9c:	f006 fb10 	bl	80084c0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4803      	ldr	r0, [pc, #12]	@ (8001eb4 <AD7091R_Init+0x64>)
 8001ea6:	f003 fb25 	bl	80054f4 <HAL_GPIO_WritePin>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	58020000 	.word	0x58020000
 8001eb8:	24000214 	.word	0x24000214

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001ec0:	f000 f89c 	bl	8001ffc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec4:	f000 fd5c 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec8:	f000 f81c 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ecc:	f7ff feea 	bl	8001ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ed0:	f7ff fde8 	bl	8001aa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001ed4:	f000 fc06 	bl	80026e4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001ed8:	f000 f8d4 	bl	8002084 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Inicializando ADC AD7091R...\r\n");
 8001edc:	4807      	ldr	r0, [pc, #28]	@ (8001efc <main+0x40>)
 8001ede:	f00d fbb1 	bl	800f644 <puts>
  AD7091R_Init();
 8001ee2:	f7ff ffb5 	bl	8001e50 <AD7091R_Init>
  printf("Sistema pronto.\r\n");
 8001ee6:	4806      	ldr	r0, [pc, #24]	@ (8001f00 <main+0x44>)
 8001ee8:	f00d fbac 	bl	800f644 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001eec:	f008 fe84 	bl	800abf8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ef0:	f7ff fe00 	bl	8001af4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ef4:	f008 fea4 	bl	800ac40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <main+0x3c>
 8001efc:	08012970 	.word	0x08012970
 8001f00:	08012990 	.word	0x08012990

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b09c      	sub	sp, #112	@ 0x70
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0e:	224c      	movs	r2, #76	@ 0x4c
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00d fcc6 	bl	800f8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f00d fcc0 	bl	800f8a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f24:	2002      	movs	r0, #2
 8001f26:	f003 fb19 	bl	800555c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <SystemClock_Config+0xf0>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	4a30      	ldr	r2, [pc, #192]	@ (8001ff4 <SystemClock_Config+0xf0>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <SystemClock_Config+0xf0>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <SystemClock_Config+0xf4>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff8 <SystemClock_Config+0xf4>)
 8001f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <SystemClock_Config+0xf4>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f60:	bf00      	nop
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <SystemClock_Config+0xf4>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f6e:	d1f8      	bne.n	8001f62 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f78:	2340      	movs	r3, #64	@ 0x40
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f84:	2304      	movs	r3, #4
 8001f86:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f88:	230a      	movs	r3, #10
 8001f8a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f90:	2302      	movs	r3, #2
 8001f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f98:	230c      	movs	r3, #12
 8001f9a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fb11 	bl	80055d0 <HAL_RCC_OscConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001fb4:	f000 f860 	bl	8002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb8:	233f      	movs	r3, #63	@ 0x3f
 8001fba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fcc:	2340      	movs	r3, #64	@ 0x40
 8001fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 ff51 	bl	8005e84 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001fe8:	f000 f846 	bl	8002078 <Error_Handler>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3770      	adds	r7, #112	@ 0x70
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	58000400 	.word	0x58000400
 8001ff8:	58024800 	.word	0x58024800

08001ffc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800200e:	f000 fe23 	bl	8002c58 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002012:	2301      	movs	r3, #1
 8002014:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002016:	2300      	movs	r3, #0
 8002018:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800201e:	231f      	movs	r3, #31
 8002020:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002022:	2387      	movs	r3, #135	@ 0x87
 8002024:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002026:	2300      	movs	r3, #0
 8002028:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800202a:	2300      	movs	r3, #0
 800202c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800202e:	2301      	movs	r3, #1
 8002030:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002032:	2301      	movs	r3, #1
 8002034:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800203e:	463b      	mov	r3, r7
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fe41 	bl	8002cc8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002046:	2004      	movs	r0, #4
 8002048:	f000 fe1e 	bl	8002c88 <HAL_MPU_Enable>

}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002066:	f000 fcc7 	bl	80029f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40001400 	.word	0x40001400

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <Error_Handler+0x8>

08002084 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <MX_SPI1_Init+0xa4>)
 800208a:	4a28      	ldr	r2, [pc, #160]	@ (800212c <MX_SPI1_Init+0xa8>)
 800208c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800208e:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <MX_SPI1_Init+0xa4>)
 8002090:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <MX_SPI1_Init+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <MX_SPI1_Init+0xa4>)
 800209e:	220f      	movs	r2, #15
 80020a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a2:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ca:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020e4:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <MX_SPI1_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <MX_SPI1_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <MX_SPI1_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800210e:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <MX_SPI1_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <MX_SPI1_Init+0xa4>)
 8002116:	f006 f8af 	bl	8008278 <HAL_SPI_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002120:	f7ff ffaa 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	24000214 	.word	0x24000214
 800212c:	40013000 	.word	0x40013000

08002130 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0bc      	sub	sp, #240	@ 0xf0
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	22c0      	movs	r2, #192	@ 0xc0
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f00d fba7 	bl	800f8a4 <memset>
  if(spiHandle->Instance==SPI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_SPI_MspInit+0x10c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d168      	bne.n	8002232 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002160:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800216c:	2300      	movs	r3, #0
 800216e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4618      	mov	r0, r3
 8002176:	f004 fa53 	bl	8006620 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002180:	f7ff ff7a 	bl	8002078 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002184:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 8002186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800218a:	4a2d      	ldr	r2, [pc, #180]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002190:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002194:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 8002196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800219a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a8:	4a25      	ldr	r2, [pc, #148]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b2:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_SPI_MspInit+0x110>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021de:	2360      	movs	r3, #96	@ 0x60
 80021e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f6:	2305      	movs	r3, #5
 80021f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002200:	4619      	mov	r1, r3
 8002202:	4810      	ldr	r0, [pc, #64]	@ (8002244 <HAL_SPI_MspInit+0x114>)
 8002204:	f002 ffc6 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002208:	2320      	movs	r3, #32
 800220a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002220:	2305      	movs	r3, #5
 8002222:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800222a:	4619      	mov	r1, r3
 800222c:	4806      	ldr	r0, [pc, #24]	@ (8002248 <HAL_SPI_MspInit+0x118>)
 800222e:	f002 ffb1 	bl	8005194 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002232:	bf00      	nop
 8002234:	37f0      	adds	r7, #240	@ 0xf0
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40013000 	.word	0x40013000
 8002240:	58024400 	.word	0x58024400
 8002244:	58020000 	.word	0x58020000
 8002248:	58020400 	.word	0x58020400

0800224c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_MspInit+0x38>)
 8002254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_MspInit+0x38>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_MspInit+0x38>)
 8002264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	210f      	movs	r1, #15
 8002274:	f06f 0001 	mvn.w	r0, #1
 8002278:	f000 fcc6 	bl	8002c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	58024400 	.word	0x58024400

08002288 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b090      	sub	sp, #64	@ 0x40
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d827      	bhi.n	80022e6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002296:	2200      	movs	r2, #0
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	2037      	movs	r0, #55	@ 0x37
 800229c:	f000 fcb4 	bl	8002c08 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022a0:	2037      	movs	r0, #55	@ 0x37
 80022a2:	f000 fccb 	bl	8002c3c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80022a6:	4a29      	ldr	r2, [pc, #164]	@ (800234c <HAL_InitTick+0xc4>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80022ac:	4b28      	ldr	r3, [pc, #160]	@ (8002350 <HAL_InitTick+0xc8>)
 80022ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022b2:	4a27      	ldr	r2, [pc, #156]	@ (8002350 <HAL_InitTick+0xc8>)
 80022b4:	f043 0320 	orr.w	r3, r3, #32
 80022b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022bc:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <HAL_InitTick+0xc8>)
 80022be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022ca:	f107 0210 	add.w	r2, r7, #16
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 f961 	bl	800659c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <HAL_InitTick+0x6a>
 80022e4:	e001      	b.n	80022ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02b      	b.n	8002342 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ea:	f004 f92b 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 80022ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80022f0:	e004      	b.n	80022fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022f2:	f004 f927 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 80022f6:	4603      	mov	r3, r0
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fe:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_InitTick+0xcc>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0c9b      	lsrs	r3, r3, #18
 8002306:	3b01      	subs	r3, #1
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <HAL_InitTick+0xd0>)
 800230c:	4a13      	ldr	r2, [pc, #76]	@ (800235c <HAL_InitTick+0xd4>)
 800230e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_InitTick+0xd0>)
 8002312:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002316:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002318:	4a0f      	ldr	r2, [pc, #60]	@ (8002358 <HAL_InitTick+0xd0>)
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_InitTick+0xd0>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_InitTick+0xd0>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800232a:	480b      	ldr	r0, [pc, #44]	@ (8002358 <HAL_InitTick+0xd0>)
 800232c:	f006 fb9f 	bl	8008a6e <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002336:	4808      	ldr	r0, [pc, #32]	@ (8002358 <HAL_InitTick+0xd0>)
 8002338:	f006 fbfa 	bl	8008b30 <HAL_TIM_Base_Start_IT>
 800233c:	4603      	mov	r3, r0
 800233e:	e000      	b.n	8002342 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	3740      	adds	r7, #64	@ 0x40
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000014 	.word	0x24000014
 8002350:	58024400 	.word	0x58024400
 8002354:	431bde83 	.word	0x431bde83
 8002358:	2400029c 	.word	0x2400029c
 800235c:	40001400 	.word	0x40001400

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <NMI_Handler+0x4>

08002368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <MemManage_Handler+0x4>

08002378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <UsageFault_Handler+0x4>

08002388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <DMA1_Stream0_IRQHandler+0x10>)
 800239e:	f001 fd93 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	24000380 	.word	0x24000380

080023ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <DMA1_Stream1_IRQHandler+0x10>)
 80023b2:	f001 fd89 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	240003f8 	.word	0x240003f8

080023c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <USART3_IRQHandler+0x10>)
 80023c6:	f006 fef7 	bl	80091b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	240002ec 	.word	0x240002ec

080023d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <TIM7_IRQHandler+0x10>)
 80023da:	f006 fc21 	bl	8008c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2400029c 	.word	0x2400029c

080023e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_kill>:

int _kill(int pid, int sig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002402:	f00d fac3 	bl	800f98c <__errno>
 8002406:	4603      	mov	r3, r0
 8002408:	2216      	movs	r2, #22
 800240a:	601a      	str	r2, [r3, #0]
  return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_exit>:

void _exit (int status)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe7 	bl	80023f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <_exit+0x12>

0800242e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e00a      	b.n	8002456 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002440:	f3af 8000 	nop.w
 8002444:	4601      	mov	r1, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbf0      	blt.n	8002440 <_read+0x12>
  }

  return len;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e009      	b.n	800248e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	60ba      	str	r2, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fcd2 	bl	8001e2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	dbf1      	blt.n	800247a <_write+0x12>
  }
  return len;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_close>:

int _close(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c8:	605a      	str	r2, [r3, #4]
  return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_isatty>:

int _isatty(int file)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f00d fa28 	bl	800f98c <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	@ (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24080000 	.word	0x24080000
 8002568:	00000400 	.word	0x00000400
 800256c:	240002e8 	.word	0x240002e8
 8002570:	24004f10 	.word	0x24004f10

08002574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002578:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <SystemInit+0x114>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	4a42      	ldr	r2, [pc, #264]	@ (8002688 <SystemInit+0x114>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002588:	4b40      	ldr	r3, [pc, #256]	@ (800268c <SystemInit+0x118>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2b06      	cmp	r3, #6
 8002592:	d807      	bhi.n	80025a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002594:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <SystemInit+0x118>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 030f 	bic.w	r3, r3, #15
 800259c:	4a3b      	ldr	r2, [pc, #236]	@ (800268c <SystemInit+0x118>)
 800259e:	f043 0307 	orr.w	r3, r3, #7
 80025a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <SystemInit+0x11c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a39      	ldr	r2, [pc, #228]	@ (8002690 <SystemInit+0x11c>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b0:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <SystemInit+0x11c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <SystemInit+0x11c>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4935      	ldr	r1, [pc, #212]	@ (8002690 <SystemInit+0x11c>)
 80025bc:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <SystemInit+0x120>)
 80025be:	4013      	ands	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c2:	4b32      	ldr	r3, [pc, #200]	@ (800268c <SystemInit+0x118>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ce:	4b2f      	ldr	r3, [pc, #188]	@ (800268c <SystemInit+0x118>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <SystemInit+0x118>)
 80025d8:	f043 0307 	orr.w	r3, r3, #7
 80025dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025de:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <SystemInit+0x11c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <SystemInit+0x11c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025ea:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <SystemInit+0x11c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025f0:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <SystemInit+0x11c>)
 80025f2:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <SystemInit+0x124>)
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f6:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <SystemInit+0x11c>)
 80025f8:	4a28      	ldr	r2, [pc, #160]	@ (800269c <SystemInit+0x128>)
 80025fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <SystemInit+0x11c>)
 80025fe:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <SystemInit+0x12c>)
 8002600:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002602:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <SystemInit+0x11c>)
 8002604:	2200      	movs	r2, #0
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002608:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <SystemInit+0x11c>)
 800260a:	4a25      	ldr	r2, [pc, #148]	@ (80026a0 <SystemInit+0x12c>)
 800260c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <SystemInit+0x11c>)
 8002610:	2200      	movs	r2, #0
 8002612:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002614:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <SystemInit+0x11c>)
 8002616:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <SystemInit+0x12c>)
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800261a:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <SystemInit+0x11c>)
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <SystemInit+0x11c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <SystemInit+0x11c>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <SystemInit+0x11c>)
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002632:	4b1c      	ldr	r3, [pc, #112]	@ (80026a4 <SystemInit+0x130>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <SystemInit+0x134>)
 8002638:	4013      	ands	r3, r2
 800263a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800263e:	d202      	bcs.n	8002646 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <SystemInit+0x138>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <SystemInit+0x11c>)
 8002648:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d113      	bne.n	800267c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002654:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <SystemInit+0x11c>)
 8002656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800265a:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <SystemInit+0x11c>)
 800265c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002660:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <SystemInit+0x13c>)
 8002666:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800266a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800266c:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <SystemInit+0x11c>)
 800266e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002672:	4a07      	ldr	r2, [pc, #28]	@ (8002690 <SystemInit+0x11c>)
 8002674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002678:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	52002000 	.word	0x52002000
 8002690:	58024400 	.word	0x58024400
 8002694:	eaf6ed7f 	.word	0xeaf6ed7f
 8002698:	02020200 	.word	0x02020200
 800269c:	01ff0000 	.word	0x01ff0000
 80026a0:	01010280 	.word	0x01010280
 80026a4:	5c001000 	.word	0x5c001000
 80026a8:	ffff0000 	.word	0xffff0000
 80026ac:	51008108 	.word	0x51008108
 80026b0:	52004000 	.word	0x52004000

080026b4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <ExitRun0Mode+0x2c>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <ExitRun0Mode+0x2c>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80026c4:	bf00      	nop
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <ExitRun0Mode+0x2c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f9      	beq.n	80026c6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	58024800 	.word	0x58024800

080026e4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 80026ea:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <MX_USART3_UART_Init+0x94>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026ee:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 80026f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271a:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800272c:	4811      	ldr	r0, [pc, #68]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 800272e:	f006 fc65 	bl	8008ffc <HAL_UART_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002738:	f7ff fc9e 	bl	8002078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273c:	2100      	movs	r1, #0
 800273e:	480d      	ldr	r0, [pc, #52]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002740:	f008 f94c 	bl	800a9dc <HAL_UARTEx_SetTxFifoThreshold>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800274a:	f7ff fc95 	bl	8002078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274e:	2100      	movs	r1, #0
 8002750:	4808      	ldr	r0, [pc, #32]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002752:	f008 f981 	bl	800aa58 <HAL_UARTEx_SetRxFifoThreshold>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800275c:	f7ff fc8c 	bl	8002078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	@ (8002774 <MX_USART3_UART_Init+0x90>)
 8002762:	f008 f902 	bl	800a96a <HAL_UARTEx_DisableFifoMode>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800276c:	f7ff fc84 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	240002ec 	.word	0x240002ec
 8002778:	40004800 	.word	0x40004800

0800277c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0ba      	sub	sp, #232	@ 0xe8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	22c0      	movs	r2, #192	@ 0xc0
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f00d f881 	bl	800f8a4 <memset>
  if(uartHandle->Instance==USART3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a59      	ldr	r2, [pc, #356]	@ (800290c <HAL_UART_MspInit+0x190>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f040 80aa 	bne.w	8002902 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027ae:	f04f 0202 	mov.w	r2, #2
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 ff2b 	bl	8006620 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80027d0:	f7ff fc52 	bl	8002078 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002910 <HAL_UART_MspInit+0x194>)
 80027d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027da:	4a4d      	ldr	r2, [pc, #308]	@ (8002910 <HAL_UART_MspInit+0x194>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <HAL_UART_MspInit+0x194>)
 80027e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <HAL_UART_MspInit+0x194>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f8:	4a45      	ldr	r2, [pc, #276]	@ (8002910 <HAL_UART_MspInit+0x194>)
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002802:	4b43      	ldr	r3, [pc, #268]	@ (8002910 <HAL_UART_MspInit+0x194>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002810:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002814:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800282a:	2307      	movs	r3, #7
 800282c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002830:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002834:	4619      	mov	r1, r3
 8002836:	4837      	ldr	r0, [pc, #220]	@ (8002914 <HAL_UART_MspInit+0x198>)
 8002838:	f002 fcac 	bl	8005194 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800283c:	4b36      	ldr	r3, [pc, #216]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 800283e:	4a37      	ldr	r2, [pc, #220]	@ (800291c <HAL_UART_MspInit+0x1a0>)
 8002840:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002842:	4b35      	ldr	r3, [pc, #212]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002844:	222d      	movs	r2, #45	@ 0x2d
 8002846:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002848:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284e:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002854:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800285a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285c:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002862:	4b2d      	ldr	r3, [pc, #180]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002868:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800286e:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002874:	4b28      	ldr	r3, [pc, #160]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800287a:	4827      	ldr	r0, [pc, #156]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 800287c:	f000 fa64 	bl	8002d48 <HAL_DMA_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002886:	f7ff fbf7 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 800288e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002892:	4a21      	ldr	r2, [pc, #132]	@ (8002918 <HAL_UART_MspInit+0x19c>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002898:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 800289a:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <HAL_UART_MspInit+0x1a8>)
 800289c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028a0:	222e      	movs	r2, #46	@ 0x2e
 80028a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b8:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80028c4:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d0:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80028d6:	4812      	ldr	r0, [pc, #72]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028d8:	f000 fa36 	bl	8002d48 <HAL_DMA_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80028e2:	f7ff fbc9 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028ea:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <HAL_UART_MspInit+0x1a4>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2105      	movs	r1, #5
 80028f6:	2027      	movs	r0, #39	@ 0x27
 80028f8:	f000 f986 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028fc:	2027      	movs	r0, #39	@ 0x27
 80028fe:	f000 f99d 	bl	8002c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002902:	bf00      	nop
 8002904:	37e8      	adds	r7, #232	@ 0xe8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40004800 	.word	0x40004800
 8002910:	58024400 	.word	0x58024400
 8002914:	58020c00 	.word	0x58020c00
 8002918:	24000380 	.word	0x24000380
 800291c:	40020010 	.word	0x40020010
 8002920:	240003f8 	.word	0x240003f8
 8002924:	40020028 	.word	0x40020028

08002928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002928:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002964 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800292c:	f7ff fec2 	bl	80026b4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002930:	f7ff fe20 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002936:	490d      	ldr	r1, [pc, #52]	@ (800296c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800294c:	4c0a      	ldr	r4, [pc, #40]	@ (8002978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295a:	f00d f81d 	bl	800f998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7ff faad 	bl	8001ebc <main>
  bx  lr
 8002962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002964:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002968:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800296c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002970:	08012ee0 	.word	0x08012ee0
  ldr r2, =_sbss
 8002974:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002978:	24004f10 	.word	0x24004f10

0800297c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC3_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002986:	2003      	movs	r0, #3
 8002988:	f000 f933 	bl	8002bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800298c:	f003 fc30 	bl	80061f0 <HAL_RCC_GetSysClockFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <HAL_Init+0x68>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	4913      	ldr	r1, [pc, #76]	@ (80029ec <HAL_Init+0x6c>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029aa:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <HAL_Init+0x68>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	4a0e      	ldr	r2, [pc, #56]	@ (80029ec <HAL_Init+0x6c>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	4a0b      	ldr	r2, [pc, #44]	@ (80029f0 <HAL_Init+0x70>)
 80029c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029c4:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <HAL_Init+0x74>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ca:	200f      	movs	r0, #15
 80029cc:	f7ff fc5c 	bl	8002288 <HAL_InitTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e002      	b.n	80029e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029da:	f7ff fc37 	bl	800224c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	58024400 	.word	0x58024400
 80029ec:	08012a50 	.word	0x08012a50
 80029f0:	24000010 	.word	0x24000010
 80029f4:	2400000c 	.word	0x2400000c

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	24000018 	.word	0x24000018
 8002a1c:	24000470 	.word	0x24000470

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	24000470 	.word	0x24000470

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	24000018 	.word	0x24000018

08002a80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_GetREVID+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0c1b      	lsrs	r3, r3, #16
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	5c001000 	.word	0x5c001000

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00
 8002adc:	05fa0000 	.word	0x05fa0000

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	@ (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff4c 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c16:	f7ff ff63 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f7ff ffb3 	bl	8002b8c <NVIC_EncodePriority>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff82 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff56 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c5c:	f3bf 8f5f 	dmb	sy
}
 8002c60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <HAL_MPU_Disable+0x28>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	4a06      	ldr	r2, [pc, #24]	@ (8002c80 <HAL_MPU_Disable+0x28>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_MPU_Disable+0x2c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00
 8002c84:	e000ed90 	.word	0xe000ed90

08002c88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c90:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <HAL_MPU_Enable+0x38>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_MPU_Enable+0x3c>)
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <HAL_MPU_Enable+0x3c>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002ca6:	f3bf 8f4f 	dsb	sy
}
 8002caa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cac:	f3bf 8f6f 	isb	sy
}
 8002cb0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed90 	.word	0xe000ed90
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	785a      	ldrb	r2, [r3, #1]
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_MPU_ConfigRegion+0x7c>)
 8002cd6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_MPU_ConfigRegion+0x7c>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <HAL_MPU_ConfigRegion+0x7c>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002ce4:	4a17      	ldr	r2, [pc, #92]	@ (8002d44 <HAL_MPU_ConfigRegion+0x7c>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7b1b      	ldrb	r3, [r3, #12]
 8002cf0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7adb      	ldrb	r3, [r3, #11]
 8002cf6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7a9b      	ldrb	r3, [r3, #10]
 8002cfe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7b5b      	ldrb	r3, [r3, #13]
 8002d06:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7b9b      	ldrb	r3, [r3, #14]
 8002d0e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7bdb      	ldrb	r3, [r3, #15]
 8002d16:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7a5b      	ldrb	r3, [r3, #9]
 8002d1e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7a1b      	ldrb	r3, [r3, #8]
 8002d26:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d28:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d32:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d34:	6113      	str	r3, [r2, #16]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed90 	.word	0xe000ed90

08002d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff fe66 	bl	8002a20 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e316      	b.n	800338e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a66      	ldr	r2, [pc, #408]	@ (8002f00 <HAL_DMA_Init+0x1b8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d04a      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a65      	ldr	r2, [pc, #404]	@ (8002f04 <HAL_DMA_Init+0x1bc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d045      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a63      	ldr	r2, [pc, #396]	@ (8002f08 <HAL_DMA_Init+0x1c0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d040      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a62      	ldr	r2, [pc, #392]	@ (8002f0c <HAL_DMA_Init+0x1c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d03b      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a60      	ldr	r2, [pc, #384]	@ (8002f10 <HAL_DMA_Init+0x1c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d036      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5f      	ldr	r2, [pc, #380]	@ (8002f14 <HAL_DMA_Init+0x1cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d031      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f18 <HAL_DMA_Init+0x1d0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02c      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5c      	ldr	r2, [pc, #368]	@ (8002f1c <HAL_DMA_Init+0x1d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d027      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f20 <HAL_DMA_Init+0x1d8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d022      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a59      	ldr	r2, [pc, #356]	@ (8002f24 <HAL_DMA_Init+0x1dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d01d      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	@ (8002f28 <HAL_DMA_Init+0x1e0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d018      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a56      	ldr	r2, [pc, #344]	@ (8002f2c <HAL_DMA_Init+0x1e4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a54      	ldr	r2, [pc, #336]	@ (8002f30 <HAL_DMA_Init+0x1e8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00e      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a53      	ldr	r2, [pc, #332]	@ (8002f34 <HAL_DMA_Init+0x1ec>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a51      	ldr	r2, [pc, #324]	@ (8002f38 <HAL_DMA_Init+0x1f0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a50      	ldr	r2, [pc, #320]	@ (8002f3c <HAL_DMA_Init+0x1f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_DMA_Init+0xbc>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_DMA_Init+0xbe>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 813b 	beq.w	8003082 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a37      	ldr	r2, [pc, #220]	@ (8002f00 <HAL_DMA_Init+0x1b8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d04a      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a36      	ldr	r2, [pc, #216]	@ (8002f04 <HAL_DMA_Init+0x1bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d045      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a34      	ldr	r2, [pc, #208]	@ (8002f08 <HAL_DMA_Init+0x1c0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d040      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a33      	ldr	r2, [pc, #204]	@ (8002f0c <HAL_DMA_Init+0x1c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d03b      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a31      	ldr	r2, [pc, #196]	@ (8002f10 <HAL_DMA_Init+0x1c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d036      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a30      	ldr	r2, [pc, #192]	@ (8002f14 <HAL_DMA_Init+0x1cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d031      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f18 <HAL_DMA_Init+0x1d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02c      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2d      	ldr	r2, [pc, #180]	@ (8002f1c <HAL_DMA_Init+0x1d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d027      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <HAL_DMA_Init+0x1d8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f24 <HAL_DMA_Init+0x1dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a28      	ldr	r2, [pc, #160]	@ (8002f28 <HAL_DMA_Init+0x1e0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a27      	ldr	r2, [pc, #156]	@ (8002f2c <HAL_DMA_Init+0x1e4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a25      	ldr	r2, [pc, #148]	@ (8002f30 <HAL_DMA_Init+0x1e8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a24      	ldr	r2, [pc, #144]	@ (8002f34 <HAL_DMA_Init+0x1ec>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <HAL_DMA_Init+0x1f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_DMA_Init+0x1f4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_Init+0x186>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <HAL_DMA_Init+0x196>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ede:	e02f      	b.n	8002f40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee0:	f7ff fd9e 	bl	8002a20 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d928      	bls.n	8002f40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e246      	b.n	800338e <HAL_DMA_Init+0x646>
 8002f00:	40020010 	.word	0x40020010
 8002f04:	40020028 	.word	0x40020028
 8002f08:	40020040 	.word	0x40020040
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	40020070 	.word	0x40020070
 8002f14:	40020088 	.word	0x40020088
 8002f18:	400200a0 	.word	0x400200a0
 8002f1c:	400200b8 	.word	0x400200b8
 8002f20:	40020410 	.word	0x40020410
 8002f24:	40020428 	.word	0x40020428
 8002f28:	40020440 	.word	0x40020440
 8002f2c:	40020458 	.word	0x40020458
 8002f30:	40020470 	.word	0x40020470
 8002f34:	40020488 	.word	0x40020488
 8002f38:	400204a0 	.word	0x400204a0
 8002f3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1c8      	bne.n	8002ee0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4b83      	ldr	r3, [pc, #524]	@ (8003168 <HAL_DMA_Init+0x420>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fa4:	4b71      	ldr	r3, [pc, #452]	@ (800316c <HAL_DMA_Init+0x424>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b71      	ldr	r3, [pc, #452]	@ (8003170 <HAL_DMA_Init+0x428>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d328      	bcc.n	8003004 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b28      	cmp	r3, #40	@ 0x28
 8002fb8:	d903      	bls.n	8002fc2 <HAL_DMA_Init+0x27a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fc0:	d917      	bls.n	8002ff2 <HAL_DMA_Init+0x2aa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fc8:	d903      	bls.n	8002fd2 <HAL_DMA_Init+0x28a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b42      	cmp	r3, #66	@ 0x42
 8002fd0:	d90f      	bls.n	8002ff2 <HAL_DMA_Init+0x2aa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b46      	cmp	r3, #70	@ 0x46
 8002fd8:	d903      	bls.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b48      	cmp	r3, #72	@ 0x48
 8002fe0:	d907      	bls.n	8002ff2 <HAL_DMA_Init+0x2aa>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b4e      	cmp	r3, #78	@ 0x4e
 8002fe8:	d905      	bls.n	8002ff6 <HAL_DMA_Init+0x2ae>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b52      	cmp	r3, #82	@ 0x52
 8002ff0:	d801      	bhi.n	8002ff6 <HAL_DMA_Init+0x2ae>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_DMA_Init+0x2b0>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003002:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	2b04      	cmp	r3, #4
 800302c:	d117      	bne.n	800305e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00e      	beq.n	800305e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f001 ff1d 	bl	8004e80 <DMA_CheckFifoParam>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2240      	movs	r2, #64	@ 0x40
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e197      	b.n	800338e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f001 fe58 	bl	8004d1c <DMA_CalcBaseAndBitshift>
 800306c:	4603      	mov	r3, r0
 800306e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	223f      	movs	r2, #63	@ 0x3f
 800307a:	409a      	lsls	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e0cd      	b.n	800321e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3b      	ldr	r2, [pc, #236]	@ (8003174 <HAL_DMA_Init+0x42c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a39      	ldr	r2, [pc, #228]	@ (8003178 <HAL_DMA_Init+0x430>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a38      	ldr	r2, [pc, #224]	@ (800317c <HAL_DMA_Init+0x434>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a36      	ldr	r2, [pc, #216]	@ (8003180 <HAL_DMA_Init+0x438>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a35      	ldr	r2, [pc, #212]	@ (8003184 <HAL_DMA_Init+0x43c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a33      	ldr	r2, [pc, #204]	@ (8003188 <HAL_DMA_Init+0x440>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a32      	ldr	r2, [pc, #200]	@ (800318c <HAL_DMA_Init+0x444>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a30      	ldr	r2, [pc, #192]	@ (8003190 <HAL_DMA_Init+0x448>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_Init+0x38e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_Init+0x390>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8097 	beq.w	800320c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a24      	ldr	r2, [pc, #144]	@ (8003174 <HAL_DMA_Init+0x42c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d021      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <HAL_DMA_Init+0x430>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01c      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <HAL_DMA_Init+0x434>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d017      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	@ (8003180 <HAL_DMA_Init+0x438>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d012      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1e      	ldr	r2, [pc, #120]	@ (8003184 <HAL_DMA_Init+0x43c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00d      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <HAL_DMA_Init+0x440>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d008      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_DMA_Init+0x444>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <HAL_DMA_Init+0x448>)
 800312a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <HAL_DMA_Init+0x44c>)
 8003148:	4013      	ands	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b40      	cmp	r3, #64	@ 0x40
 8003152:	d021      	beq.n	8003198 <HAL_DMA_Init+0x450>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d102      	bne.n	8003162 <HAL_DMA_Init+0x41a>
 800315c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003160:	e01b      	b.n	800319a <HAL_DMA_Init+0x452>
 8003162:	2300      	movs	r3, #0
 8003164:	e019      	b.n	800319a <HAL_DMA_Init+0x452>
 8003166:	bf00      	nop
 8003168:	fe10803f 	.word	0xfe10803f
 800316c:	5c001000 	.word	0x5c001000
 8003170:	ffff0000 	.word	0xffff0000
 8003174:	58025408 	.word	0x58025408
 8003178:	5802541c 	.word	0x5802541c
 800317c:	58025430 	.word	0x58025430
 8003180:	58025444 	.word	0x58025444
 8003184:	58025458 	.word	0x58025458
 8003188:	5802546c 	.word	0x5802546c
 800318c:	58025480 	.word	0x58025480
 8003190:	58025494 	.word	0x58025494
 8003194:	fffe000f 	.word	0xfffe000f
 8003198:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b6e      	ldr	r3, [pc, #440]	@ (8003398 <HAL_DMA_Init+0x650>)
 80031e0:	4413      	add	r3, r2
 80031e2:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_DMA_Init+0x654>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f001 fd93 	bl	8004d1c <DMA_CalcBaseAndBitshift>
 80031f6:	4603      	mov	r3, r0
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e008      	b.n	800321e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2240      	movs	r2, #64	@ 0x40
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0b7      	b.n	800338e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5f      	ldr	r2, [pc, #380]	@ (80033a0 <HAL_DMA_Init+0x658>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d072      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5d      	ldr	r2, [pc, #372]	@ (80033a4 <HAL_DMA_Init+0x65c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d06d      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5c      	ldr	r2, [pc, #368]	@ (80033a8 <HAL_DMA_Init+0x660>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d068      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5a      	ldr	r2, [pc, #360]	@ (80033ac <HAL_DMA_Init+0x664>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d063      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a59      	ldr	r2, [pc, #356]	@ (80033b0 <HAL_DMA_Init+0x668>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d05e      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a57      	ldr	r2, [pc, #348]	@ (80033b4 <HAL_DMA_Init+0x66c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d059      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a56      	ldr	r2, [pc, #344]	@ (80033b8 <HAL_DMA_Init+0x670>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d054      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a54      	ldr	r2, [pc, #336]	@ (80033bc <HAL_DMA_Init+0x674>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04f      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a53      	ldr	r2, [pc, #332]	@ (80033c0 <HAL_DMA_Init+0x678>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a51      	ldr	r2, [pc, #324]	@ (80033c4 <HAL_DMA_Init+0x67c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a50      	ldr	r2, [pc, #320]	@ (80033c8 <HAL_DMA_Init+0x680>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4e      	ldr	r2, [pc, #312]	@ (80033cc <HAL_DMA_Init+0x684>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4d      	ldr	r2, [pc, #308]	@ (80033d0 <HAL_DMA_Init+0x688>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	@ (80033d4 <HAL_DMA_Init+0x68c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4a      	ldr	r2, [pc, #296]	@ (80033d8 <HAL_DMA_Init+0x690>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a48      	ldr	r2, [pc, #288]	@ (80033dc <HAL_DMA_Init+0x694>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a47      	ldr	r2, [pc, #284]	@ (80033e0 <HAL_DMA_Init+0x698>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a45      	ldr	r2, [pc, #276]	@ (80033e4 <HAL_DMA_Init+0x69c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a44      	ldr	r2, [pc, #272]	@ (80033e8 <HAL_DMA_Init+0x6a0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a42      	ldr	r2, [pc, #264]	@ (80033ec <HAL_DMA_Init+0x6a4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a41      	ldr	r2, [pc, #260]	@ (80033f0 <HAL_DMA_Init+0x6a8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3f      	ldr	r2, [pc, #252]	@ (80033f4 <HAL_DMA_Init+0x6ac>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_DMA_Init+0x6b0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3c      	ldr	r2, [pc, #240]	@ (80033fc <HAL_DMA_Init+0x6b4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Init+0x5ca>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_DMA_Init+0x5cc>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f001 fe2d 	bl	8004f78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d102      	bne.n	800332c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003340:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_DMA_Init+0x624>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b08      	cmp	r3, #8
 8003350:	d80c      	bhi.n	800336c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 feaa 	bl	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	e008      	b.n	800337e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	a7fdabf8 	.word	0xa7fdabf8
 800339c:	cccccccd 	.word	0xcccccccd
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8
 80033e0:	58025408 	.word	0x58025408
 80033e4:	5802541c 	.word	0x5802541c
 80033e8:	58025430 	.word	0x58025430
 80033ec:	58025444 	.word	0x58025444
 80033f0:	58025458 	.word	0x58025458
 80033f4:	5802546c 	.word	0x5802546c
 80033f8:	58025480 	.word	0x58025480
 80033fc:	58025494 	.word	0x58025494

08003400 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff fb0a 	bl	8002a20 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e2dc      	b.n	80039d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d008      	beq.n	8003436 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2280      	movs	r2, #128	@ 0x80
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e2cd      	b.n	80039d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a76      	ldr	r2, [pc, #472]	@ (8003614 <HAL_DMA_Abort+0x214>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d04a      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a74      	ldr	r2, [pc, #464]	@ (8003618 <HAL_DMA_Abort+0x218>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d045      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a73      	ldr	r2, [pc, #460]	@ (800361c <HAL_DMA_Abort+0x21c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d040      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a71      	ldr	r2, [pc, #452]	@ (8003620 <HAL_DMA_Abort+0x220>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d03b      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a70      	ldr	r2, [pc, #448]	@ (8003624 <HAL_DMA_Abort+0x224>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d036      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_DMA_Abort+0x228>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6d      	ldr	r2, [pc, #436]	@ (800362c <HAL_DMA_Abort+0x22c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d02c      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6b      	ldr	r2, [pc, #428]	@ (8003630 <HAL_DMA_Abort+0x230>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d027      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6a      	ldr	r2, [pc, #424]	@ (8003634 <HAL_DMA_Abort+0x234>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a68      	ldr	r2, [pc, #416]	@ (8003638 <HAL_DMA_Abort+0x238>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01d      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a67      	ldr	r2, [pc, #412]	@ (800363c <HAL_DMA_Abort+0x23c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a65      	ldr	r2, [pc, #404]	@ (8003640 <HAL_DMA_Abort+0x240>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a64      	ldr	r2, [pc, #400]	@ (8003644 <HAL_DMA_Abort+0x244>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a62      	ldr	r2, [pc, #392]	@ (8003648 <HAL_DMA_Abort+0x248>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a61      	ldr	r2, [pc, #388]	@ (800364c <HAL_DMA_Abort+0x24c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_DMA_Abort+0xd6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003650 <HAL_DMA_Abort+0x250>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_DMA_Abort+0xda>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Abort+0xdc>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 021e 	bic.w	r2, r2, #30
 80034ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e00a      	b.n	800351e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 020e 	bic.w	r2, r2, #14
 8003516:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3c      	ldr	r2, [pc, #240]	@ (8003614 <HAL_DMA_Abort+0x214>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d072      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a3a      	ldr	r2, [pc, #232]	@ (8003618 <HAL_DMA_Abort+0x218>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d06d      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a39      	ldr	r2, [pc, #228]	@ (800361c <HAL_DMA_Abort+0x21c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d068      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a37      	ldr	r2, [pc, #220]	@ (8003620 <HAL_DMA_Abort+0x220>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d063      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a36      	ldr	r2, [pc, #216]	@ (8003624 <HAL_DMA_Abort+0x224>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d05e      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	@ (8003628 <HAL_DMA_Abort+0x228>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d059      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a33      	ldr	r2, [pc, #204]	@ (800362c <HAL_DMA_Abort+0x22c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d054      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a31      	ldr	r2, [pc, #196]	@ (8003630 <HAL_DMA_Abort+0x230>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d04f      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a30      	ldr	r2, [pc, #192]	@ (8003634 <HAL_DMA_Abort+0x234>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04a      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <HAL_DMA_Abort+0x238>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d045      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2d      	ldr	r2, [pc, #180]	@ (800363c <HAL_DMA_Abort+0x23c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d040      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2b      	ldr	r2, [pc, #172]	@ (8003640 <HAL_DMA_Abort+0x240>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03b      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2a      	ldr	r2, [pc, #168]	@ (8003644 <HAL_DMA_Abort+0x244>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d036      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a28      	ldr	r2, [pc, #160]	@ (8003648 <HAL_DMA_Abort+0x248>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d031      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a27      	ldr	r2, [pc, #156]	@ (800364c <HAL_DMA_Abort+0x24c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d02c      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a25      	ldr	r2, [pc, #148]	@ (8003650 <HAL_DMA_Abort+0x250>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a24      	ldr	r2, [pc, #144]	@ (8003654 <HAL_DMA_Abort+0x254>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a22      	ldr	r2, [pc, #136]	@ (8003658 <HAL_DMA_Abort+0x258>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a21      	ldr	r2, [pc, #132]	@ (800365c <HAL_DMA_Abort+0x25c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_DMA_Abort+0x260>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <HAL_DMA_Abort+0x264>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <HAL_DMA_Abort+0x268>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <HAL_DMA_Abort+0x26c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_DMA_Abort+0x20e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_DMA_Abort+0x270>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d132      	bne.n	8003674 <HAL_DMA_Abort+0x274>
 800360e:	2301      	movs	r3, #1
 8003610:	e031      	b.n	8003676 <HAL_DMA_Abort+0x276>
 8003612:	bf00      	nop
 8003614:	40020010 	.word	0x40020010
 8003618:	40020028 	.word	0x40020028
 800361c:	40020040 	.word	0x40020040
 8003620:	40020058 	.word	0x40020058
 8003624:	40020070 	.word	0x40020070
 8003628:	40020088 	.word	0x40020088
 800362c:	400200a0 	.word	0x400200a0
 8003630:	400200b8 	.word	0x400200b8
 8003634:	40020410 	.word	0x40020410
 8003638:	40020428 	.word	0x40020428
 800363c:	40020440 	.word	0x40020440
 8003640:	40020458 	.word	0x40020458
 8003644:	40020470 	.word	0x40020470
 8003648:	40020488 	.word	0x40020488
 800364c:	400204a0 	.word	0x400204a0
 8003650:	400204b8 	.word	0x400204b8
 8003654:	58025408 	.word	0x58025408
 8003658:	5802541c 	.word	0x5802541c
 800365c:	58025430 	.word	0x58025430
 8003660:	58025444 	.word	0x58025444
 8003664:	58025458 	.word	0x58025458
 8003668:	5802546c 	.word	0x5802546c
 800366c:	58025480 	.word	0x58025480
 8003670:	58025494 	.word	0x58025494
 8003674:	2300      	movs	r3, #0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003688:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6d      	ldr	r2, [pc, #436]	@ (8003844 <HAL_DMA_Abort+0x444>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d04a      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6b      	ldr	r2, [pc, #428]	@ (8003848 <HAL_DMA_Abort+0x448>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d045      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6a      	ldr	r2, [pc, #424]	@ (800384c <HAL_DMA_Abort+0x44c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d040      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a68      	ldr	r2, [pc, #416]	@ (8003850 <HAL_DMA_Abort+0x450>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d03b      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a67      	ldr	r2, [pc, #412]	@ (8003854 <HAL_DMA_Abort+0x454>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d036      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a65      	ldr	r2, [pc, #404]	@ (8003858 <HAL_DMA_Abort+0x458>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d031      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a64      	ldr	r2, [pc, #400]	@ (800385c <HAL_DMA_Abort+0x45c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d02c      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a62      	ldr	r2, [pc, #392]	@ (8003860 <HAL_DMA_Abort+0x460>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d027      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a61      	ldr	r2, [pc, #388]	@ (8003864 <HAL_DMA_Abort+0x464>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003868 <HAL_DMA_Abort+0x468>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01d      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5e      	ldr	r2, [pc, #376]	@ (800386c <HAL_DMA_Abort+0x46c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d018      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003870 <HAL_DMA_Abort+0x470>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5b      	ldr	r2, [pc, #364]	@ (8003874 <HAL_DMA_Abort+0x474>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a59      	ldr	r2, [pc, #356]	@ (8003878 <HAL_DMA_Abort+0x478>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a58      	ldr	r2, [pc, #352]	@ (800387c <HAL_DMA_Abort+0x47c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_DMA_Abort+0x32a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_DMA_Abort+0x480>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <HAL_DMA_Abort+0x33c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e007      	b.n	800374c <HAL_DMA_Abort+0x34c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800374c:	e013      	b.n	8003776 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800374e:	f7ff f967 	bl	8002a20 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b05      	cmp	r3, #5
 800375a:	d90c      	bls.n	8003776 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e12d      	b.n	80039d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e5      	bne.n	800374e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2f      	ldr	r2, [pc, #188]	@ (8003844 <HAL_DMA_Abort+0x444>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d04a      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2d      	ldr	r2, [pc, #180]	@ (8003848 <HAL_DMA_Abort+0x448>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d045      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2c      	ldr	r2, [pc, #176]	@ (800384c <HAL_DMA_Abort+0x44c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d040      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003850 <HAL_DMA_Abort+0x450>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d03b      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a29      	ldr	r2, [pc, #164]	@ (8003854 <HAL_DMA_Abort+0x454>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d036      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a27      	ldr	r2, [pc, #156]	@ (8003858 <HAL_DMA_Abort+0x458>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d031      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a26      	ldr	r2, [pc, #152]	@ (800385c <HAL_DMA_Abort+0x45c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d02c      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a24      	ldr	r2, [pc, #144]	@ (8003860 <HAL_DMA_Abort+0x460>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d027      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_DMA_Abort+0x464>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_DMA_Abort+0x468>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01d      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a20      	ldr	r2, [pc, #128]	@ (800386c <HAL_DMA_Abort+0x46c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d018      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <HAL_DMA_Abort+0x470>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_DMA_Abort+0x474>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <HAL_DMA_Abort+0x478>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1a      	ldr	r2, [pc, #104]	@ (800387c <HAL_DMA_Abort+0x47c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_Abort+0x422>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <HAL_DMA_Abort+0x480>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_DMA_Abort+0x426>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_DMA_Abort+0x428>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d02b      	beq.n	8003884 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	223f      	movs	r2, #63	@ 0x3f
 800383c:	409a      	lsls	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	e02a      	b.n	800389a <HAL_DMA_Abort+0x49a>
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003888:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2201      	movs	r2, #1
 8003894:	409a      	lsls	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4f      	ldr	r2, [pc, #316]	@ (80039dc <HAL_DMA_Abort+0x5dc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d072      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a4d      	ldr	r2, [pc, #308]	@ (80039e0 <HAL_DMA_Abort+0x5e0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d06d      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a4c      	ldr	r2, [pc, #304]	@ (80039e4 <HAL_DMA_Abort+0x5e4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d068      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a4a      	ldr	r2, [pc, #296]	@ (80039e8 <HAL_DMA_Abort+0x5e8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d063      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a49      	ldr	r2, [pc, #292]	@ (80039ec <HAL_DMA_Abort+0x5ec>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d05e      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a47      	ldr	r2, [pc, #284]	@ (80039f0 <HAL_DMA_Abort+0x5f0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d059      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a46      	ldr	r2, [pc, #280]	@ (80039f4 <HAL_DMA_Abort+0x5f4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d054      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a44      	ldr	r2, [pc, #272]	@ (80039f8 <HAL_DMA_Abort+0x5f8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04f      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a43      	ldr	r2, [pc, #268]	@ (80039fc <HAL_DMA_Abort+0x5fc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d04a      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a41      	ldr	r2, [pc, #260]	@ (8003a00 <HAL_DMA_Abort+0x600>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d045      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a40      	ldr	r2, [pc, #256]	@ (8003a04 <HAL_DMA_Abort+0x604>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d040      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a08 <HAL_DMA_Abort+0x608>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d03b      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3d      	ldr	r2, [pc, #244]	@ (8003a0c <HAL_DMA_Abort+0x60c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d036      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3b      	ldr	r2, [pc, #236]	@ (8003a10 <HAL_DMA_Abort+0x610>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d031      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a14 <HAL_DMA_Abort+0x614>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d02c      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a38      	ldr	r2, [pc, #224]	@ (8003a18 <HAL_DMA_Abort+0x618>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d027      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a37      	ldr	r2, [pc, #220]	@ (8003a1c <HAL_DMA_Abort+0x61c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a35      	ldr	r2, [pc, #212]	@ (8003a20 <HAL_DMA_Abort+0x620>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01d      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a34      	ldr	r2, [pc, #208]	@ (8003a24 <HAL_DMA_Abort+0x624>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a32      	ldr	r2, [pc, #200]	@ (8003a28 <HAL_DMA_Abort+0x628>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a31      	ldr	r2, [pc, #196]	@ (8003a2c <HAL_DMA_Abort+0x62c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2f      	ldr	r2, [pc, #188]	@ (8003a30 <HAL_DMA_Abort+0x630>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a34 <HAL_DMA_Abort+0x634>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_DMA_Abort+0x58a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2c      	ldr	r2, [pc, #176]	@ (8003a38 <HAL_DMA_Abort+0x638>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_DMA_Abort+0x58e>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_DMA_Abort+0x590>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800399c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00c      	beq.n	80039c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40020010 	.word	0x40020010
 80039e0:	40020028 	.word	0x40020028
 80039e4:	40020040 	.word	0x40020040
 80039e8:	40020058 	.word	0x40020058
 80039ec:	40020070 	.word	0x40020070
 80039f0:	40020088 	.word	0x40020088
 80039f4:	400200a0 	.word	0x400200a0
 80039f8:	400200b8 	.word	0x400200b8
 80039fc:	40020410 	.word	0x40020410
 8003a00:	40020428 	.word	0x40020428
 8003a04:	40020440 	.word	0x40020440
 8003a08:	40020458 	.word	0x40020458
 8003a0c:	40020470 	.word	0x40020470
 8003a10:	40020488 	.word	0x40020488
 8003a14:	400204a0 	.word	0x400204a0
 8003a18:	400204b8 	.word	0x400204b8
 8003a1c:	58025408 	.word	0x58025408
 8003a20:	5802541c 	.word	0x5802541c
 8003a24:	58025430 	.word	0x58025430
 8003a28:	58025444 	.word	0x58025444
 8003a2c:	58025458 	.word	0x58025458
 8003a30:	5802546c 	.word	0x5802546c
 8003a34:	58025480 	.word	0x58025480
 8003a38:	58025494 	.word	0x58025494

08003a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e237      	b.n	8003ebe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2280      	movs	r2, #128	@ 0x80
 8003a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e22c      	b.n	8003ebe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5c      	ldr	r2, [pc, #368]	@ (8003bdc <HAL_DMA_Abort_IT+0x1a0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d04a      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5b      	ldr	r2, [pc, #364]	@ (8003be0 <HAL_DMA_Abort_IT+0x1a4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d045      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a59      	ldr	r2, [pc, #356]	@ (8003be4 <HAL_DMA_Abort_IT+0x1a8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d040      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a58      	ldr	r2, [pc, #352]	@ (8003be8 <HAL_DMA_Abort_IT+0x1ac>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d03b      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a56      	ldr	r2, [pc, #344]	@ (8003bec <HAL_DMA_Abort_IT+0x1b0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d036      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a55      	ldr	r2, [pc, #340]	@ (8003bf0 <HAL_DMA_Abort_IT+0x1b4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d031      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a53      	ldr	r2, [pc, #332]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1b8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02c      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1bc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d027      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a50      	ldr	r2, [pc, #320]	@ (8003bfc <HAL_DMA_Abort_IT+0x1c0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d022      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8003c00 <HAL_DMA_Abort_IT+0x1c4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d01d      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4d      	ldr	r2, [pc, #308]	@ (8003c04 <HAL_DMA_Abort_IT+0x1c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c08 <HAL_DMA_Abort_IT+0x1cc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8003c0c <HAL_DMA_Abort_IT+0x1d0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a49      	ldr	r2, [pc, #292]	@ (8003c10 <HAL_DMA_Abort_IT+0x1d4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a47      	ldr	r2, [pc, #284]	@ (8003c14 <HAL_DMA_Abort_IT+0x1d8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a46      	ldr	r2, [pc, #280]	@ (8003c18 <HAL_DMA_Abort_IT+0x1dc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Abort_IT+0xcc>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_DMA_Abort_IT+0xce>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8086 	beq.w	8003c1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2204      	movs	r2, #4
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bdc <HAL_DMA_Abort_IT+0x1a0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d04a      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2e      	ldr	r2, [pc, #184]	@ (8003be0 <HAL_DMA_Abort_IT+0x1a4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d045      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	@ (8003be4 <HAL_DMA_Abort_IT+0x1a8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d040      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_DMA_Abort_IT+0x1ac>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d03b      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a29      	ldr	r2, [pc, #164]	@ (8003bec <HAL_DMA_Abort_IT+0x1b0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d036      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a28      	ldr	r2, [pc, #160]	@ (8003bf0 <HAL_DMA_Abort_IT+0x1b4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d031      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a26      	ldr	r2, [pc, #152]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1b8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d02c      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1bc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d027      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a23      	ldr	r2, [pc, #140]	@ (8003bfc <HAL_DMA_Abort_IT+0x1c0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_DMA_Abort_IT+0x1c4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <HAL_DMA_Abort_IT+0x1c8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <HAL_DMA_Abort_IT+0x1cc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1d      	ldr	r2, [pc, #116]	@ (8003c0c <HAL_DMA_Abort_IT+0x1d0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c10 <HAL_DMA_Abort_IT+0x1d4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c14 <HAL_DMA_Abort_IT+0x1d8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x17c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <HAL_DMA_Abort_IT+0x1dc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d108      	bne.n	8003bca <HAL_DMA_Abort_IT+0x18e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e178      	b.n	8003ebc <HAL_DMA_Abort_IT+0x480>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e16f      	b.n	8003ebc <HAL_DMA_Abort_IT+0x480>
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 020e 	bic.w	r2, r2, #14
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6c      	ldr	r2, [pc, #432]	@ (8003de4 <HAL_DMA_Abort_IT+0x3a8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04a      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6b      	ldr	r2, [pc, #428]	@ (8003de8 <HAL_DMA_Abort_IT+0x3ac>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d045      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a69      	ldr	r2, [pc, #420]	@ (8003dec <HAL_DMA_Abort_IT+0x3b0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d040      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a68      	ldr	r2, [pc, #416]	@ (8003df0 <HAL_DMA_Abort_IT+0x3b4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d03b      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a66      	ldr	r2, [pc, #408]	@ (8003df4 <HAL_DMA_Abort_IT+0x3b8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d036      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a65      	ldr	r2, [pc, #404]	@ (8003df8 <HAL_DMA_Abort_IT+0x3bc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d031      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a63      	ldr	r2, [pc, #396]	@ (8003dfc <HAL_DMA_Abort_IT+0x3c0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02c      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a62      	ldr	r2, [pc, #392]	@ (8003e00 <HAL_DMA_Abort_IT+0x3c4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d027      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a60      	ldr	r2, [pc, #384]	@ (8003e04 <HAL_DMA_Abort_IT+0x3c8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e08 <HAL_DMA_Abort_IT+0x3cc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01d      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5d      	ldr	r2, [pc, #372]	@ (8003e0c <HAL_DMA_Abort_IT+0x3d0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d018      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e10 <HAL_DMA_Abort_IT+0x3d4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e14 <HAL_DMA_Abort_IT+0x3d8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a59      	ldr	r2, [pc, #356]	@ (8003e18 <HAL_DMA_Abort_IT+0x3dc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a57      	ldr	r2, [pc, #348]	@ (8003e1c <HAL_DMA_Abort_IT+0x3e0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x290>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a56      	ldr	r2, [pc, #344]	@ (8003e20 <HAL_DMA_Abort_IT+0x3e4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <HAL_DMA_Abort_IT+0x2a2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e007      	b.n	8003cee <HAL_DMA_Abort_IT+0x2b2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8003de4 <HAL_DMA_Abort_IT+0x3a8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d072      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003de8 <HAL_DMA_Abort_IT+0x3ac>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d06d      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a39      	ldr	r2, [pc, #228]	@ (8003dec <HAL_DMA_Abort_IT+0x3b0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d068      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a37      	ldr	r2, [pc, #220]	@ (8003df0 <HAL_DMA_Abort_IT+0x3b4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d063      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a36      	ldr	r2, [pc, #216]	@ (8003df4 <HAL_DMA_Abort_IT+0x3b8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d05e      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a34      	ldr	r2, [pc, #208]	@ (8003df8 <HAL_DMA_Abort_IT+0x3bc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d059      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a33      	ldr	r2, [pc, #204]	@ (8003dfc <HAL_DMA_Abort_IT+0x3c0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d054      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a31      	ldr	r2, [pc, #196]	@ (8003e00 <HAL_DMA_Abort_IT+0x3c4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04f      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <HAL_DMA_Abort_IT+0x3c8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04a      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e08 <HAL_DMA_Abort_IT+0x3cc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <HAL_DMA_Abort_IT+0x3d0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d040      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	@ (8003e10 <HAL_DMA_Abort_IT+0x3d4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d03b      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e14 <HAL_DMA_Abort_IT+0x3d8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d036      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a28      	ldr	r2, [pc, #160]	@ (8003e18 <HAL_DMA_Abort_IT+0x3dc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d031      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a27      	ldr	r2, [pc, #156]	@ (8003e1c <HAL_DMA_Abort_IT+0x3e0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d02c      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a25      	ldr	r2, [pc, #148]	@ (8003e20 <HAL_DMA_Abort_IT+0x3e4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d027      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a24      	ldr	r2, [pc, #144]	@ (8003e24 <HAL_DMA_Abort_IT+0x3e8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	@ (8003e28 <HAL_DMA_Abort_IT+0x3ec>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a21      	ldr	r2, [pc, #132]	@ (8003e2c <HAL_DMA_Abort_IT+0x3f0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e30 <HAL_DMA_Abort_IT+0x3f4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1e      	ldr	r2, [pc, #120]	@ (8003e34 <HAL_DMA_Abort_IT+0x3f8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <HAL_DMA_Abort_IT+0x3fc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1b      	ldr	r2, [pc, #108]	@ (8003e3c <HAL_DMA_Abort_IT+0x400>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_Abort_IT+0x3a2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	@ (8003e40 <HAL_DMA_Abort_IT+0x404>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d132      	bne.n	8003e44 <HAL_DMA_Abort_IT+0x408>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e031      	b.n	8003e46 <HAL_DMA_Abort_IT+0x40a>
 8003de2:	bf00      	nop
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
 8003e24:	58025408 	.word	0x58025408
 8003e28:	5802541c 	.word	0x5802541c
 8003e2c:	58025430 	.word	0x58025430
 8003e30:	58025444 	.word	0x58025444
 8003e34:	58025458 	.word	0x58025458
 8003e38:	5802546c 	.word	0x5802546c
 8003e3c:	58025480 	.word	0x58025480
 8003e40:	58025494 	.word	0x58025494
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d028      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2201      	movs	r2, #1
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	@ 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ed4:	4b67      	ldr	r3, [pc, #412]	@ (8004074 <HAL_DMA_IRQHandler+0x1ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a67      	ldr	r2, [pc, #412]	@ (8004078 <HAL_DMA_IRQHandler+0x1b0>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0a9b      	lsrs	r3, r3, #10
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5f      	ldr	r2, [pc, #380]	@ (800407c <HAL_DMA_IRQHandler+0x1b4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d04a      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5d      	ldr	r2, [pc, #372]	@ (8004080 <HAL_DMA_IRQHandler+0x1b8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d045      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5c      	ldr	r2, [pc, #368]	@ (8004084 <HAL_DMA_IRQHandler+0x1bc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d040      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004088 <HAL_DMA_IRQHandler+0x1c0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d03b      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a59      	ldr	r2, [pc, #356]	@ (800408c <HAL_DMA_IRQHandler+0x1c4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d036      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a57      	ldr	r2, [pc, #348]	@ (8004090 <HAL_DMA_IRQHandler+0x1c8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a56      	ldr	r2, [pc, #344]	@ (8004094 <HAL_DMA_IRQHandler+0x1cc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d02c      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a54      	ldr	r2, [pc, #336]	@ (8004098 <HAL_DMA_IRQHandler+0x1d0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d027      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a53      	ldr	r2, [pc, #332]	@ (800409c <HAL_DMA_IRQHandler+0x1d4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a51      	ldr	r2, [pc, #324]	@ (80040a0 <HAL_DMA_IRQHandler+0x1d8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a50      	ldr	r2, [pc, #320]	@ (80040a4 <HAL_DMA_IRQHandler+0x1dc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80040a8 <HAL_DMA_IRQHandler+0x1e0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4d      	ldr	r2, [pc, #308]	@ (80040ac <HAL_DMA_IRQHandler+0x1e4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	@ (80040b0 <HAL_DMA_IRQHandler+0x1e8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80040b4 <HAL_DMA_IRQHandler+0x1ec>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xd2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a48      	ldr	r2, [pc, #288]	@ (80040b8 <HAL_DMA_IRQHandler+0x1f0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_DMA_IRQHandler+0xd6>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_DMA_IRQHandler+0xd8>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 842b 	beq.w	80047fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2208      	movs	r2, #8
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80a2 	beq.w	8004100 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800407c <HAL_DMA_IRQHandler+0x1b4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d04a      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2d      	ldr	r2, [pc, #180]	@ (8004080 <HAL_DMA_IRQHandler+0x1b8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d045      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004084 <HAL_DMA_IRQHandler+0x1bc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d040      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2a      	ldr	r2, [pc, #168]	@ (8004088 <HAL_DMA_IRQHandler+0x1c0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d03b      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	@ (800408c <HAL_DMA_IRQHandler+0x1c4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d036      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	@ (8004090 <HAL_DMA_IRQHandler+0x1c8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d031      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	@ (8004094 <HAL_DMA_IRQHandler+0x1cc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d02c      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a24      	ldr	r2, [pc, #144]	@ (8004098 <HAL_DMA_IRQHandler+0x1d0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d027      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_DMA_IRQHandler+0x1d4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d022      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	@ (80040a0 <HAL_DMA_IRQHandler+0x1d8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d01d      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1f      	ldr	r2, [pc, #124]	@ (80040a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d018      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1e      	ldr	r2, [pc, #120]	@ (80040a8 <HAL_DMA_IRQHandler+0x1e0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1c      	ldr	r2, [pc, #112]	@ (80040ac <HAL_DMA_IRQHandler+0x1e4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00e      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1b      	ldr	r2, [pc, #108]	@ (80040b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <HAL_DMA_IRQHandler+0x1ec>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <HAL_DMA_IRQHandler+0x194>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a18      	ldr	r2, [pc, #96]	@ (80040b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d12f      	bne.n	80040bc <HAL_DMA_IRQHandler+0x1f4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e02e      	b.n	80040d0 <HAL_DMA_IRQHandler+0x208>
 8004072:	bf00      	nop
 8004074:	2400000c 	.word	0x2400000c
 8004078:	1b4e81b5 	.word	0x1b4e81b5
 800407c:	40020010 	.word	0x40020010
 8004080:	40020028 	.word	0x40020028
 8004084:	40020040 	.word	0x40020040
 8004088:	40020058 	.word	0x40020058
 800408c:	40020070 	.word	0x40020070
 8004090:	40020088 	.word	0x40020088
 8004094:	400200a0 	.word	0x400200a0
 8004098:	400200b8 	.word	0x400200b8
 800409c:	40020410 	.word	0x40020410
 80040a0:	40020428 	.word	0x40020428
 80040a4:	40020440 	.word	0x40020440
 80040a8:	40020458 	.word	0x40020458
 80040ac:	40020470 	.word	0x40020470
 80040b0:	40020488 	.word	0x40020488
 80040b4:	400204a0 	.word	0x400204a0
 80040b8:	400204b8 	.word	0x400204b8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf14      	ite	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	2300      	moveq	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0204 	bic.w	r2, r2, #4
 80040e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2208      	movs	r2, #8
 80040ee:	409a      	lsls	r2, r3
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d06e      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a69      	ldr	r2, [pc, #420]	@ (80042c0 <HAL_DMA_IRQHandler+0x3f8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d04a      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <HAL_DMA_IRQHandler+0x3fc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d045      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a66      	ldr	r2, [pc, #408]	@ (80042c8 <HAL_DMA_IRQHandler+0x400>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d040      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a64      	ldr	r2, [pc, #400]	@ (80042cc <HAL_DMA_IRQHandler+0x404>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d03b      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a63      	ldr	r2, [pc, #396]	@ (80042d0 <HAL_DMA_IRQHandler+0x408>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d036      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a61      	ldr	r2, [pc, #388]	@ (80042d4 <HAL_DMA_IRQHandler+0x40c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d031      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a60      	ldr	r2, [pc, #384]	@ (80042d8 <HAL_DMA_IRQHandler+0x410>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d02c      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5e      	ldr	r2, [pc, #376]	@ (80042dc <HAL_DMA_IRQHandler+0x414>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d027      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5d      	ldr	r2, [pc, #372]	@ (80042e0 <HAL_DMA_IRQHandler+0x418>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5b      	ldr	r2, [pc, #364]	@ (80042e4 <HAL_DMA_IRQHandler+0x41c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01d      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5a      	ldr	r2, [pc, #360]	@ (80042e8 <HAL_DMA_IRQHandler+0x420>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a58      	ldr	r2, [pc, #352]	@ (80042ec <HAL_DMA_IRQHandler+0x424>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a57      	ldr	r2, [pc, #348]	@ (80042f0 <HAL_DMA_IRQHandler+0x428>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a55      	ldr	r2, [pc, #340]	@ (80042f4 <HAL_DMA_IRQHandler+0x42c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a54      	ldr	r2, [pc, #336]	@ (80042f8 <HAL_DMA_IRQHandler+0x430>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x2ee>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a52      	ldr	r2, [pc, #328]	@ (80042fc <HAL_DMA_IRQHandler+0x434>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10a      	bne.n	80041cc <HAL_DMA_IRQHandler+0x304>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e003      	b.n	80041d4 <HAL_DMA_IRQHandler+0x30c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00d      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f043 0202 	orr.w	r2, r3, #2
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2204      	movs	r2, #4
 80041fe:	409a      	lsls	r2, r3
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 808f 	beq.w	8004328 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2c      	ldr	r2, [pc, #176]	@ (80042c0 <HAL_DMA_IRQHandler+0x3f8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d04a      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2a      	ldr	r2, [pc, #168]	@ (80042c4 <HAL_DMA_IRQHandler+0x3fc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d045      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a29      	ldr	r2, [pc, #164]	@ (80042c8 <HAL_DMA_IRQHandler+0x400>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d040      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a27      	ldr	r2, [pc, #156]	@ (80042cc <HAL_DMA_IRQHandler+0x404>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d03b      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a26      	ldr	r2, [pc, #152]	@ (80042d0 <HAL_DMA_IRQHandler+0x408>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d036      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a24      	ldr	r2, [pc, #144]	@ (80042d4 <HAL_DMA_IRQHandler+0x40c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d031      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a23      	ldr	r2, [pc, #140]	@ (80042d8 <HAL_DMA_IRQHandler+0x410>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d02c      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <HAL_DMA_IRQHandler+0x414>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d027      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a20      	ldr	r2, [pc, #128]	@ (80042e0 <HAL_DMA_IRQHandler+0x418>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1e      	ldr	r2, [pc, #120]	@ (80042e4 <HAL_DMA_IRQHandler+0x41c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <HAL_DMA_IRQHandler+0x420>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_DMA_IRQHandler+0x424>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <HAL_DMA_IRQHandler+0x428>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <HAL_DMA_IRQHandler+0x42c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <HAL_DMA_IRQHandler+0x430>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_IRQHandler+0x3e2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a15      	ldr	r2, [pc, #84]	@ (80042fc <HAL_DMA_IRQHandler+0x434>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d12a      	bne.n	8004300 <HAL_DMA_IRQHandler+0x438>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e023      	b.n	8004308 <HAL_DMA_IRQHandler+0x440>
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2300      	movs	r3, #0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2204      	movs	r2, #4
 8004316:	409a      	lsls	r2, r3
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	f043 0204 	orr.w	r2, r3, #4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2210      	movs	r2, #16
 8004332:	409a      	lsls	r2, r3
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a6 	beq.w	800448a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a85      	ldr	r2, [pc, #532]	@ (8004558 <HAL_DMA_IRQHandler+0x690>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d04a      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a83      	ldr	r2, [pc, #524]	@ (800455c <HAL_DMA_IRQHandler+0x694>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d045      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a82      	ldr	r2, [pc, #520]	@ (8004560 <HAL_DMA_IRQHandler+0x698>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d040      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a80      	ldr	r2, [pc, #512]	@ (8004564 <HAL_DMA_IRQHandler+0x69c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d03b      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7f      	ldr	r2, [pc, #508]	@ (8004568 <HAL_DMA_IRQHandler+0x6a0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d036      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7d      	ldr	r2, [pc, #500]	@ (800456c <HAL_DMA_IRQHandler+0x6a4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d031      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7c      	ldr	r2, [pc, #496]	@ (8004570 <HAL_DMA_IRQHandler+0x6a8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d02c      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a7a      	ldr	r2, [pc, #488]	@ (8004574 <HAL_DMA_IRQHandler+0x6ac>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d027      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a79      	ldr	r2, [pc, #484]	@ (8004578 <HAL_DMA_IRQHandler+0x6b0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d022      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a77      	ldr	r2, [pc, #476]	@ (800457c <HAL_DMA_IRQHandler+0x6b4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01d      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a76      	ldr	r2, [pc, #472]	@ (8004580 <HAL_DMA_IRQHandler+0x6b8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a74      	ldr	r2, [pc, #464]	@ (8004584 <HAL_DMA_IRQHandler+0x6bc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a73      	ldr	r2, [pc, #460]	@ (8004588 <HAL_DMA_IRQHandler+0x6c0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a71      	ldr	r2, [pc, #452]	@ (800458c <HAL_DMA_IRQHandler+0x6c4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a70      	ldr	r2, [pc, #448]	@ (8004590 <HAL_DMA_IRQHandler+0x6c8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_DMA_IRQHandler+0x516>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004594 <HAL_DMA_IRQHandler+0x6cc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10a      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x52c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e009      	b.n	8004408 <HAL_DMA_IRQHandler+0x540>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d03e      	beq.n	800448a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2210      	movs	r2, #16
 8004416:	409a      	lsls	r2, r3
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d018      	beq.n	800445c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d024      	beq.n	800448a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e01f      	b.n	800448a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01b      	beq.n	800448a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
 800445a:	e016      	b.n	800448a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0208 	bic.w	r2, r2, #8
 8004478:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2220      	movs	r2, #32
 8004494:	409a      	lsls	r2, r3
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8110 	beq.w	80046c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004558 <HAL_DMA_IRQHandler+0x690>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d04a      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2b      	ldr	r2, [pc, #172]	@ (800455c <HAL_DMA_IRQHandler+0x694>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d045      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a29      	ldr	r2, [pc, #164]	@ (8004560 <HAL_DMA_IRQHandler+0x698>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d040      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a28      	ldr	r2, [pc, #160]	@ (8004564 <HAL_DMA_IRQHandler+0x69c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d03b      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	@ (8004568 <HAL_DMA_IRQHandler+0x6a0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d036      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a25      	ldr	r2, [pc, #148]	@ (800456c <HAL_DMA_IRQHandler+0x6a4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d031      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a23      	ldr	r2, [pc, #140]	@ (8004570 <HAL_DMA_IRQHandler+0x6a8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02c      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a22      	ldr	r2, [pc, #136]	@ (8004574 <HAL_DMA_IRQHandler+0x6ac>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d027      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a20      	ldr	r2, [pc, #128]	@ (8004578 <HAL_DMA_IRQHandler+0x6b0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_DMA_IRQHandler+0x6b4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01d      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1d      	ldr	r2, [pc, #116]	@ (8004580 <HAL_DMA_IRQHandler+0x6b8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1c      	ldr	r2, [pc, #112]	@ (8004584 <HAL_DMA_IRQHandler+0x6bc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1a      	ldr	r2, [pc, #104]	@ (8004588 <HAL_DMA_IRQHandler+0x6c0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a19      	ldr	r2, [pc, #100]	@ (800458c <HAL_DMA_IRQHandler+0x6c4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a17      	ldr	r2, [pc, #92]	@ (8004590 <HAL_DMA_IRQHandler+0x6c8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_DMA_IRQHandler+0x678>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_DMA_IRQHandler+0x6cc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d12b      	bne.n	8004598 <HAL_DMA_IRQHandler+0x6d0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e02a      	b.n	80045ac <HAL_DMA_IRQHandler+0x6e4>
 8004556:	bf00      	nop
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8087 	beq.w	80046c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2220      	movs	r2, #32
 80045bc:	409a      	lsls	r2, r3
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d139      	bne.n	8004642 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0216 	bic.w	r2, r2, #22
 80045dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_DMA_IRQHandler+0x736>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0208 	bic.w	r2, r2, #8
 800460c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	223f      	movs	r2, #63	@ 0x3f
 8004618:	409a      	lsls	r2, r3
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 834a 	beq.w	8004ccc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
          }
          return;
 8004640:	e344      	b.n	8004ccc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	2b00      	cmp	r3, #0
 8004664:	d02c      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
 800466e:	e027      	b.n	80046c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d023      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
 8004680:	e01e      	b.n	80046c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0210 	bic.w	r2, r2, #16
 800469e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8306 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8088 	beq.w	80047e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7a      	ldr	r2, [pc, #488]	@ (80048d0 <HAL_DMA_IRQHandler+0xa08>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d04a      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a79      	ldr	r2, [pc, #484]	@ (80048d4 <HAL_DMA_IRQHandler+0xa0c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d045      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a77      	ldr	r2, [pc, #476]	@ (80048d8 <HAL_DMA_IRQHandler+0xa10>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d040      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a76      	ldr	r2, [pc, #472]	@ (80048dc <HAL_DMA_IRQHandler+0xa14>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d03b      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_DMA_IRQHandler+0xa18>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d036      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a73      	ldr	r2, [pc, #460]	@ (80048e4 <HAL_DMA_IRQHandler+0xa1c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d031      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a71      	ldr	r2, [pc, #452]	@ (80048e8 <HAL_DMA_IRQHandler+0xa20>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02c      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a70      	ldr	r2, [pc, #448]	@ (80048ec <HAL_DMA_IRQHandler+0xa24>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d027      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a6e      	ldr	r2, [pc, #440]	@ (80048f0 <HAL_DMA_IRQHandler+0xa28>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6d      	ldr	r2, [pc, #436]	@ (80048f4 <HAL_DMA_IRQHandler+0xa2c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d01d      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6b      	ldr	r2, [pc, #428]	@ (80048f8 <HAL_DMA_IRQHandler+0xa30>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6a      	ldr	r2, [pc, #424]	@ (80048fc <HAL_DMA_IRQHandler+0xa34>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	@ (8004900 <HAL_DMA_IRQHandler+0xa38>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a67      	ldr	r2, [pc, #412]	@ (8004904 <HAL_DMA_IRQHandler+0xa3c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a65      	ldr	r2, [pc, #404]	@ (8004908 <HAL_DMA_IRQHandler+0xa40>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_DMA_IRQHandler+0x8b8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a64      	ldr	r2, [pc, #400]	@ (800490c <HAL_DMA_IRQHandler+0xa44>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <HAL_DMA_IRQHandler+0x8ca>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e007      	b.n	80047a2 <HAL_DMA_IRQHandler+0x8da>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d307      	bcc.n	80047be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f2      	bne.n	80047a2 <HAL_DMA_IRQHandler+0x8da>
 80047bc:	e000      	b.n	80047c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80047d6:	e003      	b.n	80047e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8272 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
 80047fa:	e26c      	b.n	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a43      	ldr	r2, [pc, #268]	@ (8004910 <HAL_DMA_IRQHandler+0xa48>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d022      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a42      	ldr	r2, [pc, #264]	@ (8004914 <HAL_DMA_IRQHandler+0xa4c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01d      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a40      	ldr	r2, [pc, #256]	@ (8004918 <HAL_DMA_IRQHandler+0xa50>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a3f      	ldr	r2, [pc, #252]	@ (800491c <HAL_DMA_IRQHandler+0xa54>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3d      	ldr	r2, [pc, #244]	@ (8004920 <HAL_DMA_IRQHandler+0xa58>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a3c      	ldr	r2, [pc, #240]	@ (8004924 <HAL_DMA_IRQHandler+0xa5c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a3a      	ldr	r2, [pc, #232]	@ (8004928 <HAL_DMA_IRQHandler+0xa60>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_DMA_IRQHandler+0x984>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a39      	ldr	r2, [pc, #228]	@ (800492c <HAL_DMA_IRQHandler+0xa64>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_DMA_IRQHandler+0x988>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_DMA_IRQHandler+0x98a>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 823f 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2204      	movs	r2, #4
 800486a:	409a      	lsls	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80cd 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xb48>
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80c7 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2204      	movs	r2, #4
 800488c:	409a      	lsls	r2, r3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d049      	beq.n	8004930 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8210 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b8:	e20a      	b.n	8004cd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8206 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048cc:	e200      	b.n	8004cd0 <HAL_DMA_IRQHandler+0xe08>
 80048ce:	bf00      	nop
 80048d0:	40020010 	.word	0x40020010
 80048d4:	40020028 	.word	0x40020028
 80048d8:	40020040 	.word	0x40020040
 80048dc:	40020058 	.word	0x40020058
 80048e0:	40020070 	.word	0x40020070
 80048e4:	40020088 	.word	0x40020088
 80048e8:	400200a0 	.word	0x400200a0
 80048ec:	400200b8 	.word	0x400200b8
 80048f0:	40020410 	.word	0x40020410
 80048f4:	40020428 	.word	0x40020428
 80048f8:	40020440 	.word	0x40020440
 80048fc:	40020458 	.word	0x40020458
 8004900:	40020470 	.word	0x40020470
 8004904:	40020488 	.word	0x40020488
 8004908:	400204a0 	.word	0x400204a0
 800490c:	400204b8 	.word	0x400204b8
 8004910:	58025408 	.word	0x58025408
 8004914:	5802541c 	.word	0x5802541c
 8004918:	58025430 	.word	0x58025430
 800491c:	58025444 	.word	0x58025444
 8004920:	58025458 	.word	0x58025458
 8004924:	5802546c 	.word	0x5802546c
 8004928:	58025480 	.word	0x58025480
 800492c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d160      	bne.n	80049fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b3c <HAL_DMA_IRQHandler+0xc74>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d04a      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a7d      	ldr	r2, [pc, #500]	@ (8004b40 <HAL_DMA_IRQHandler+0xc78>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d045      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a7c      	ldr	r2, [pc, #496]	@ (8004b44 <HAL_DMA_IRQHandler+0xc7c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d040      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b48 <HAL_DMA_IRQHandler+0xc80>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d03b      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a79      	ldr	r2, [pc, #484]	@ (8004b4c <HAL_DMA_IRQHandler+0xc84>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d036      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a77      	ldr	r2, [pc, #476]	@ (8004b50 <HAL_DMA_IRQHandler+0xc88>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d031      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a76      	ldr	r2, [pc, #472]	@ (8004b54 <HAL_DMA_IRQHandler+0xc8c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d02c      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a74      	ldr	r2, [pc, #464]	@ (8004b58 <HAL_DMA_IRQHandler+0xc90>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d027      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a73      	ldr	r2, [pc, #460]	@ (8004b5c <HAL_DMA_IRQHandler+0xc94>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a71      	ldr	r2, [pc, #452]	@ (8004b60 <HAL_DMA_IRQHandler+0xc98>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01d      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a70      	ldr	r2, [pc, #448]	@ (8004b64 <HAL_DMA_IRQHandler+0xc9c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004b68 <HAL_DMA_IRQHandler+0xca0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6d      	ldr	r2, [pc, #436]	@ (8004b6c <HAL_DMA_IRQHandler+0xca4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004b70 <HAL_DMA_IRQHandler+0xca8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004b74 <HAL_DMA_IRQHandler+0xcac>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_DMA_IRQHandler+0xb12>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a68      	ldr	r2, [pc, #416]	@ (8004b78 <HAL_DMA_IRQHandler+0xcb0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <HAL_DMA_IRQHandler+0xb24>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0208 	bic.w	r2, r2, #8
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e007      	b.n	80049fc <HAL_DMA_IRQHandler+0xb34>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8165 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0e:	e15f      	b.n	8004cd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2202      	movs	r2, #2
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80c5 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0xce8>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80bf 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d018      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 813a 	beq.w	8004cd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a68:	e134      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8130 	beq.w	8004cd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a7c:	e12a      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f040 8089 	bne.w	8004b9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b3c <HAL_DMA_IRQHandler+0xc74>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d04a      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a29      	ldr	r2, [pc, #164]	@ (8004b40 <HAL_DMA_IRQHandler+0xc78>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d045      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a28      	ldr	r2, [pc, #160]	@ (8004b44 <HAL_DMA_IRQHandler+0xc7c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d040      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a26      	ldr	r2, [pc, #152]	@ (8004b48 <HAL_DMA_IRQHandler+0xc80>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d03b      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a25      	ldr	r2, [pc, #148]	@ (8004b4c <HAL_DMA_IRQHandler+0xc84>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d036      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	@ (8004b50 <HAL_DMA_IRQHandler+0xc88>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d031      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a22      	ldr	r2, [pc, #136]	@ (8004b54 <HAL_DMA_IRQHandler+0xc8c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d02c      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	@ (8004b58 <HAL_DMA_IRQHandler+0xc90>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d027      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <HAL_DMA_IRQHandler+0xc94>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <HAL_DMA_IRQHandler+0xc98>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_DMA_IRQHandler+0xc9c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b68 <HAL_DMA_IRQHandler+0xca0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <HAL_DMA_IRQHandler+0xca4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <HAL_DMA_IRQHandler+0xca8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <HAL_DMA_IRQHandler+0xcac>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xc62>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <HAL_DMA_IRQHandler+0xcb0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d128      	bne.n	8004b7c <HAL_DMA_IRQHandler+0xcb4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0214 	bic.w	r2, r2, #20
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e027      	b.n	8004b8c <HAL_DMA_IRQHandler+0xcc4>
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 020a 	bic.w	r2, r2, #10
 8004b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8097 	beq.w	8004cd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bae:	e091      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2208      	movs	r2, #8
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8088 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8082 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a41      	ldr	r2, [pc, #260]	@ (8004cdc <HAL_DMA_IRQHandler+0xe14>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d04a      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ce0 <HAL_DMA_IRQHandler+0xe18>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d045      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3e      	ldr	r2, [pc, #248]	@ (8004ce4 <HAL_DMA_IRQHandler+0xe1c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d040      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ce8 <HAL_DMA_IRQHandler+0xe20>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d03b      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8004cec <HAL_DMA_IRQHandler+0xe24>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d036      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a39      	ldr	r2, [pc, #228]	@ (8004cf0 <HAL_DMA_IRQHandler+0xe28>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a38      	ldr	r2, [pc, #224]	@ (8004cf4 <HAL_DMA_IRQHandler+0xe2c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d02c      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a36      	ldr	r2, [pc, #216]	@ (8004cf8 <HAL_DMA_IRQHandler+0xe30>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d027      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a35      	ldr	r2, [pc, #212]	@ (8004cfc <HAL_DMA_IRQHandler+0xe34>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a33      	ldr	r2, [pc, #204]	@ (8004d00 <HAL_DMA_IRQHandler+0xe38>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01d      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a32      	ldr	r2, [pc, #200]	@ (8004d04 <HAL_DMA_IRQHandler+0xe3c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a30      	ldr	r2, [pc, #192]	@ (8004d08 <HAL_DMA_IRQHandler+0xe40>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d0c <HAL_DMA_IRQHandler+0xe44>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	@ (8004d10 <HAL_DMA_IRQHandler+0xe48>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <HAL_DMA_IRQHandler+0xe4c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_DMA_IRQHandler+0xdaa>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d18 <HAL_DMA_IRQHandler+0xe50>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d108      	bne.n	8004c84 <HAL_DMA_IRQHandler+0xdbc>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 021c 	bic.w	r2, r2, #28
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e007      	b.n	8004c94 <HAL_DMA_IRQHandler+0xdcc>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 020e 	bic.w	r2, r2, #14
 8004c92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
 8004cca:	e004      	b.n	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cd6:	3728      	adds	r7, #40	@ 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40020010 	.word	0x40020010
 8004ce0:	40020028 	.word	0x40020028
 8004ce4:	40020040 	.word	0x40020040
 8004ce8:	40020058 	.word	0x40020058
 8004cec:	40020070 	.word	0x40020070
 8004cf0:	40020088 	.word	0x40020088
 8004cf4:	400200a0 	.word	0x400200a0
 8004cf8:	400200b8 	.word	0x400200b8
 8004cfc:	40020410 	.word	0x40020410
 8004d00:	40020428 	.word	0x40020428
 8004d04:	40020440 	.word	0x40020440
 8004d08:	40020458 	.word	0x40020458
 8004d0c:	40020470 	.word	0x40020470
 8004d10:	40020488 	.word	0x40020488
 8004d14:	400204a0 	.word	0x400204a0
 8004d18:	400204b8 	.word	0x400204b8

08004d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a42      	ldr	r2, [pc, #264]	@ (8004e34 <DMA_CalcBaseAndBitshift+0x118>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d04a      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a41      	ldr	r2, [pc, #260]	@ (8004e38 <DMA_CalcBaseAndBitshift+0x11c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d045      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e3c <DMA_CalcBaseAndBitshift+0x120>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d040      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3e      	ldr	r2, [pc, #248]	@ (8004e40 <DMA_CalcBaseAndBitshift+0x124>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d03b      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a3c      	ldr	r2, [pc, #240]	@ (8004e44 <DMA_CalcBaseAndBitshift+0x128>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d036      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e48 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d031      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a39      	ldr	r2, [pc, #228]	@ (8004e4c <DMA_CalcBaseAndBitshift+0x130>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d02c      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a38      	ldr	r2, [pc, #224]	@ (8004e50 <DMA_CalcBaseAndBitshift+0x134>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d027      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a36      	ldr	r2, [pc, #216]	@ (8004e54 <DMA_CalcBaseAndBitshift+0x138>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d022      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a35      	ldr	r2, [pc, #212]	@ (8004e58 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d01d      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a33      	ldr	r2, [pc, #204]	@ (8004e5c <DMA_CalcBaseAndBitshift+0x140>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a32      	ldr	r2, [pc, #200]	@ (8004e60 <DMA_CalcBaseAndBitshift+0x144>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a30      	ldr	r2, [pc, #192]	@ (8004e64 <DMA_CalcBaseAndBitshift+0x148>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2f      	ldr	r2, [pc, #188]	@ (8004e68 <DMA_CalcBaseAndBitshift+0x14c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <DMA_CalcBaseAndBitshift+0x150>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004e70 <DMA_CalcBaseAndBitshift+0x154>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <DMA_CalcBaseAndBitshift+0xac>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <DMA_CalcBaseAndBitshift+0xae>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d024      	beq.n	8004e18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	3b10      	subs	r3, #16
 8004dd6:	4a27      	ldr	r2, [pc, #156]	@ (8004e74 <DMA_CalcBaseAndBitshift+0x158>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	4a24      	ldr	r2, [pc, #144]	@ (8004e78 <DMA_CalcBaseAndBitshift+0x15c>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d908      	bls.n	8004e08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x160>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	1d1a      	adds	r2, r3, #4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e06:	e00d      	b.n	8004e24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x160>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e16:	e005      	b.n	8004e24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8
 8004e74:	aaaaaaab 	.word	0xaaaaaaab
 8004e78:	08012a60 	.word	0x08012a60
 8004e7c:	fffffc00 	.word	0xfffffc00

08004e80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d120      	bne.n	8004ed6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d858      	bhi.n	8004f4e <DMA_CheckFifoParam+0xce>
 8004e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea4 <DMA_CheckFifoParam+0x24>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ec7 	.word	0x08004ec7
 8004eac:	08004eb5 	.word	0x08004eb5
 8004eb0:	08004f4f 	.word	0x08004f4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d048      	beq.n	8004f52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec4:	e045      	b.n	8004f52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ece:	d142      	bne.n	8004f56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed4:	e03f      	b.n	8004f56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ede:	d123      	bne.n	8004f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d838      	bhi.n	8004f5a <DMA_CheckFifoParam+0xda>
 8004ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <DMA_CheckFifoParam+0x70>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f07 	.word	0x08004f07
 8004ef8:	08004f01 	.word	0x08004f01
 8004efc:	08004f19 	.word	0x08004f19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
        break;
 8004f04:	e030      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d025      	beq.n	8004f5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f16:	e022      	b.n	8004f5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f20:	d11f      	bne.n	8004f62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f26:	e01c      	b.n	8004f62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d902      	bls.n	8004f36 <DMA_CheckFifoParam+0xb6>
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d003      	beq.n	8004f3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f34:	e018      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
        break;
 8004f3a:	e015      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004f4c:	e00b      	b.n	8004f66 <DMA_CheckFifoParam+0xe6>
        break;
 8004f4e:	bf00      	nop
 8004f50:	e00a      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        break;
 8004f52:	bf00      	nop
 8004f54:	e008      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        break;
 8004f56:	bf00      	nop
 8004f58:	e006      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        break;
 8004f5a:	bf00      	nop
 8004f5c:	e004      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
        break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
    break;
 8004f66:	bf00      	nop
    }
  }

  return status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a38      	ldr	r2, [pc, #224]	@ (800506c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d022      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a36      	ldr	r2, [pc, #216]	@ (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01d      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a35      	ldr	r2, [pc, #212]	@ (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d018      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a33      	ldr	r2, [pc, #204]	@ (8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a32      	ldr	r2, [pc, #200]	@ (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00e      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a30      	ldr	r2, [pc, #192]	@ (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01a      	beq.n	8005016 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	3b08      	subs	r3, #8
 8004fe8:	4a28      	ldr	r2, [pc, #160]	@ (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4b26      	ldr	r3, [pc, #152]	@ (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a24      	ldr	r2, [pc, #144]	@ (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005004:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005014:	e024      	b.n	8005060 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	3b10      	subs	r3, #16
 800501e:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d806      	bhi.n	800503e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4a1b      	ldr	r2, [pc, #108]	@ (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d902      	bls.n	800503e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3308      	adds	r3, #8
 800503c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005050:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	2201      	movs	r2, #1
 800505a:	409a      	lsls	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	58025408 	.word	0x58025408
 8005070:	5802541c 	.word	0x5802541c
 8005074:	58025430 	.word	0x58025430
 8005078:	58025444 	.word	0x58025444
 800507c:	58025458 	.word	0x58025458
 8005080:	5802546c 	.word	0x5802546c
 8005084:	58025480 	.word	0x58025480
 8005088:	58025494 	.word	0x58025494
 800508c:	cccccccd 	.word	0xcccccccd
 8005090:	16009600 	.word	0x16009600
 8005094:	58025880 	.word	0x58025880
 8005098:	aaaaaaab 	.word	0xaaaaaaab
 800509c:	400204b8 	.word	0x400204b8
 80050a0:	4002040f 	.word	0x4002040f
 80050a4:	10008200 	.word	0x10008200
 80050a8:	40020880 	.word	0x40020880

080050ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d04a      	beq.n	8005158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d847      	bhi.n	8005158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a25      	ldr	r2, [pc, #148]	@ (8005164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a24      	ldr	r2, [pc, #144]	@ (8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a22      	ldr	r2, [pc, #136]	@ (800516c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a21      	ldr	r2, [pc, #132]	@ (8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4b17      	ldr	r3, [pc, #92]	@ (8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a15      	ldr	r2, [pc, #84]	@ (8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005134:	671a      	str	r2, [r3, #112]	@ 0x70
 8005136:	e009      	b.n	800514c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4b14      	ldr	r3, [pc, #80]	@ (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a11      	ldr	r2, [pc, #68]	@ (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800514a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b01      	subs	r3, #1
 8005150:	2201      	movs	r2, #1
 8005152:	409a      	lsls	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	58025408 	.word	0x58025408
 8005168:	5802541c 	.word	0x5802541c
 800516c:	58025430 	.word	0x58025430
 8005170:	58025444 	.word	0x58025444
 8005174:	58025458 	.word	0x58025458
 8005178:	5802546c 	.word	0x5802546c
 800517c:	58025480 	.word	0x58025480
 8005180:	58025494 	.word	0x58025494
 8005184:	1600963f 	.word	0x1600963f
 8005188:	58025940 	.word	0x58025940
 800518c:	1000823f 	.word	0x1000823f
 8005190:	40020940 	.word	0x40020940

08005194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051a2:	4b89      	ldr	r3, [pc, #548]	@ (80053c8 <HAL_GPIO_Init+0x234>)
 80051a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051a6:	e194      	b.n	80054d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	2101      	movs	r1, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8186 	beq.w	80054cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d005      	beq.n	80051d8 <HAL_GPIO_Init+0x44>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d130      	bne.n	800523a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800520e:	2201      	movs	r2, #1
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 0201 	and.w	r2, r3, #1
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d017      	beq.n	8005276 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	2203      	movs	r2, #3
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d123      	bne.n	80052ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	08da      	lsrs	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3208      	adds	r2, #8
 800528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	08da      	lsrs	r2, r3, #3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3208      	adds	r2, #8
 80052c4:	69b9      	ldr	r1, [r7, #24]
 80052c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	2203      	movs	r2, #3
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0203 	and.w	r2, r3, #3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80e0 	beq.w	80054cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530c:	4b2f      	ldr	r3, [pc, #188]	@ (80053cc <HAL_GPIO_Init+0x238>)
 800530e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005312:	4a2e      	ldr	r2, [pc, #184]	@ (80053cc <HAL_GPIO_Init+0x238>)
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800531c:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_GPIO_Init+0x238>)
 800531e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532a:	4a29      	ldr	r2, [pc, #164]	@ (80053d0 <HAL_GPIO_Init+0x23c>)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	3302      	adds	r3, #2
 8005332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	220f      	movs	r2, #15
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a20      	ldr	r2, [pc, #128]	@ (80053d4 <HAL_GPIO_Init+0x240>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d052      	beq.n	80053fc <HAL_GPIO_Init+0x268>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1f      	ldr	r2, [pc, #124]	@ (80053d8 <HAL_GPIO_Init+0x244>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d031      	beq.n	80053c2 <HAL_GPIO_Init+0x22e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1e      	ldr	r2, [pc, #120]	@ (80053dc <HAL_GPIO_Init+0x248>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02b      	beq.n	80053be <HAL_GPIO_Init+0x22a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_GPIO_Init+0x24c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d025      	beq.n	80053ba <HAL_GPIO_Init+0x226>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_GPIO_Init+0x250>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01f      	beq.n	80053b6 <HAL_GPIO_Init+0x222>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_GPIO_Init+0x254>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d019      	beq.n	80053b2 <HAL_GPIO_Init+0x21e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	@ (80053ec <HAL_GPIO_Init+0x258>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_GPIO_Init+0x21a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_GPIO_Init+0x25c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00d      	beq.n	80053aa <HAL_GPIO_Init+0x216>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_GPIO_Init+0x260>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <HAL_GPIO_Init+0x212>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <HAL_GPIO_Init+0x264>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d101      	bne.n	80053a2 <HAL_GPIO_Init+0x20e>
 800539e:	2309      	movs	r3, #9
 80053a0:	e02d      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053a2:	230a      	movs	r3, #10
 80053a4:	e02b      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053a6:	2308      	movs	r3, #8
 80053a8:	e029      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053aa:	2307      	movs	r3, #7
 80053ac:	e027      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053ae:	2306      	movs	r3, #6
 80053b0:	e025      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053b2:	2305      	movs	r3, #5
 80053b4:	e023      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053b6:	2304      	movs	r3, #4
 80053b8:	e021      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053ba:	2303      	movs	r3, #3
 80053bc:	e01f      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053be:	2302      	movs	r3, #2
 80053c0:	e01d      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01b      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053c6:	bf00      	nop
 80053c8:	58000080 	.word	0x58000080
 80053cc:	58024400 	.word	0x58024400
 80053d0:	58000400 	.word	0x58000400
 80053d4:	58020000 	.word	0x58020000
 80053d8:	58020400 	.word	0x58020400
 80053dc:	58020800 	.word	0x58020800
 80053e0:	58020c00 	.word	0x58020c00
 80053e4:	58021000 	.word	0x58021000
 80053e8:	58021400 	.word	0x58021400
 80053ec:	58021800 	.word	0x58021800
 80053f0:	58021c00 	.word	0x58021c00
 80053f4:	58022000 	.word	0x58022000
 80053f8:	58022400 	.word	0x58022400
 80053fc:	2300      	movs	r3, #0
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	f002 0203 	and.w	r2, r2, #3
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	4093      	lsls	r3, r2
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800540e:	4938      	ldr	r1, [pc, #224]	@ (80054f0 <HAL_GPIO_Init+0x35c>)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005442:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005470:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f ae63 	bne.w	80051a8 <HAL_GPIO_Init+0x14>
  }
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	3724      	adds	r7, #36	@ 0x24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	58000400 	.word	0x58000400

080054f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
 8005500:	4613      	mov	r3, r2
 8005502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005504:	787b      	ldrb	r3, [r7, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800550a:	887a      	ldrh	r2, [r7, #2]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005510:	e003      	b.n	800551a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005512:	887b      	ldrh	r3, [r7, #2]
 8005514:	041a      	lsls	r2, r3, #16
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	619a      	str	r2, [r3, #24]
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005538:	887a      	ldrh	r2, [r7, #2]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4013      	ands	r3, r2
 800553e:	041a      	lsls	r2, r3, #16
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	43d9      	mvns	r1, r3
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	400b      	ands	r3, r1
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	619a      	str	r2, [r3, #24]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005564:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b04      	cmp	r3, #4
 800556e:	d00a      	beq.n	8005586 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005570:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d001      	beq.n	8005582 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e01f      	b.n	80055c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e01d      	b.n	80055c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005586:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f023 0207 	bic.w	r2, r3, #7
 800558e:	490f      	ldr	r1, [pc, #60]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005596:	f7fd fa43 	bl	8002a20 <HAL_GetTick>
 800559a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800559c:	e009      	b.n	80055b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800559e:	f7fd fa3f 	bl	8002a20 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055ac:	d901      	bls.n	80055b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e007      	b.n	80055c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_PWREx_ConfigSupply+0x70>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055be:	d1ee      	bne.n	800559e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	58024800 	.word	0x58024800

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	@ 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f000 bc48 	b.w	8005e74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8088 	beq.w	8005702 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f2:	4b99      	ldr	r3, [pc, #612]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055fc:	4b96      	ldr	r3, [pc, #600]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005604:	2b10      	cmp	r3, #16
 8005606:	d007      	beq.n	8005618 <HAL_RCC_OscConfig+0x48>
 8005608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560a:	2b18      	cmp	r3, #24
 800560c:	d111      	bne.n	8005632 <HAL_RCC_OscConfig+0x62>
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d10c      	bne.n	8005632 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005618:	4b8f      	ldr	r3, [pc, #572]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d06d      	beq.n	8005700 <HAL_RCC_OscConfig+0x130>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d169      	bne.n	8005700 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f000 bc21 	b.w	8005e74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563a:	d106      	bne.n	800564a <HAL_RCC_OscConfig+0x7a>
 800563c:	4b86      	ldr	r3, [pc, #536]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a85      	ldr	r2, [pc, #532]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	e02e      	b.n	80056a8 <HAL_RCC_OscConfig+0xd8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10c      	bne.n	800566c <HAL_RCC_OscConfig+0x9c>
 8005652:	4b81      	ldr	r3, [pc, #516]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a80      	ldr	r2, [pc, #512]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	4b7e      	ldr	r3, [pc, #504]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7d      	ldr	r2, [pc, #500]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005664:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e01d      	b.n	80056a8 <HAL_RCC_OscConfig+0xd8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005674:	d10c      	bne.n	8005690 <HAL_RCC_OscConfig+0xc0>
 8005676:	4b78      	ldr	r3, [pc, #480]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a77      	ldr	r2, [pc, #476]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800567c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4b75      	ldr	r3, [pc, #468]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a74      	ldr	r2, [pc, #464]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e00b      	b.n	80056a8 <HAL_RCC_OscConfig+0xd8>
 8005690:	4b71      	ldr	r3, [pc, #452]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a70      	ldr	r2, [pc, #448]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b6e      	ldr	r3, [pc, #440]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80056a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d013      	beq.n	80056d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fd f9b6 	bl	8002a20 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b8:	f7fd f9b2 	bl	8002a20 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	@ 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e3d4      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056ca:	4b63      	ldr	r3, [pc, #396]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0xe8>
 80056d6:	e014      	b.n	8005702 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd f9a2 	bl	8002a20 <HAL_GetTick>
 80056dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fd f99e 	bl	8002a20 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	@ 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e3c0      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056f2:	4b59      	ldr	r3, [pc, #356]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x110>
 80056fe:	e000      	b.n	8005702 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 80ca 	beq.w	80058a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005710:	4b51      	ldr	r3, [pc, #324]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005718:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800571a:	4b4f      	ldr	r3, [pc, #316]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_RCC_OscConfig+0x166>
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	2b18      	cmp	r3, #24
 800572a:	d156      	bne.n	80057da <HAL_RCC_OscConfig+0x20a>
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d151      	bne.n	80057da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005736:	4b48      	ldr	r3, [pc, #288]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_RCC_OscConfig+0x17e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e392      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800574e:	4b42      	ldr	r3, [pc, #264]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 0219 	bic.w	r2, r3, #25
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	493f      	ldr	r1, [pc, #252]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fd f95e 	bl	8002a20 <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005768:	f7fd f95a 	bl	8002a20 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e37c      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800577a:	4b37      	ldr	r3, [pc, #220]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005786:	f7fd f97b 	bl	8002a80 <HAL_GetREVID>
 800578a:	4603      	mov	r3, r0
 800578c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005790:	4293      	cmp	r3, r2
 8005792:	d817      	bhi.n	80057c4 <HAL_RCC_OscConfig+0x1f4>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d108      	bne.n	80057ae <HAL_RCC_OscConfig+0x1de>
 800579c:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80057a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ac:	e07a      	b.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	031b      	lsls	r3, r3, #12
 80057bc:	4926      	ldr	r1, [pc, #152]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c2:	e06f      	b.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c4:	4b24      	ldr	r3, [pc, #144]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	061b      	lsls	r3, r3, #24
 80057d2:	4921      	ldr	r1, [pc, #132]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057d8:	e064      	b.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d047      	beq.n	8005872 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 0219 	bic.w	r2, r3, #25
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	491a      	ldr	r1, [pc, #104]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fd f914 	bl	8002a20 <HAL_GetTick>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fc:	f7fd f910 	bl	8002a20 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e332      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800580e:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581a:	f7fd f931 	bl	8002a80 <HAL_GetREVID>
 800581e:	4603      	mov	r3, r0
 8005820:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005824:	4293      	cmp	r3, r2
 8005826:	d819      	bhi.n	800585c <HAL_RCC_OscConfig+0x28c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b40      	cmp	r3, #64	@ 0x40
 800582e:	d108      	bne.n	8005842 <HAL_RCC_OscConfig+0x272>
 8005830:	4b09      	ldr	r3, [pc, #36]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005838:	4a07      	ldr	r2, [pc, #28]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	6053      	str	r3, [r2, #4]
 8005840:	e030      	b.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
 8005842:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	031b      	lsls	r3, r3, #12
 8005850:	4901      	ldr	r1, [pc, #4]	@ (8005858 <HAL_RCC_OscConfig+0x288>)
 8005852:	4313      	orrs	r3, r2
 8005854:	604b      	str	r3, [r1, #4]
 8005856:	e025      	b.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
 8005858:	58024400 	.word	0x58024400
 800585c:	4b9a      	ldr	r3, [pc, #616]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	061b      	lsls	r3, r3, #24
 800586a:	4997      	ldr	r1, [pc, #604]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800586c:	4313      	orrs	r3, r2
 800586e:	604b      	str	r3, [r1, #4]
 8005870:	e018      	b.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005872:	4b95      	ldr	r3, [pc, #596]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a94      	ldr	r2, [pc, #592]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587e:	f7fd f8cf 	bl	8002a20 <HAL_GetTick>
 8005882:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005886:	f7fd f8cb 	bl	8002a20 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e2ed      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005898:	4b8b      	ldr	r3, [pc, #556]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f0      	bne.n	8005886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80a9 	beq.w	8005a04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b2:	4b85      	ldr	r3, [pc, #532]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058bc:	4b82      	ldr	r3, [pc, #520]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d007      	beq.n	80058d8 <HAL_RCC_OscConfig+0x308>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b18      	cmp	r3, #24
 80058cc:	d13a      	bne.n	8005944 <HAL_RCC_OscConfig+0x374>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d135      	bne.n	8005944 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058d8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_OscConfig+0x320>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	2b80      	cmp	r3, #128	@ 0x80
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e2c1      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058f0:	f7fd f8c6 	bl	8002a80 <HAL_GetREVID>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d817      	bhi.n	800592e <HAL_RCC_OscConfig+0x35e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	2b20      	cmp	r3, #32
 8005904:	d108      	bne.n	8005918 <HAL_RCC_OscConfig+0x348>
 8005906:	4b70      	ldr	r3, [pc, #448]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800590e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005914:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005916:	e075      	b.n	8005a04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005918:	4b6b      	ldr	r3, [pc, #428]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	069b      	lsls	r3, r3, #26
 8005926:	4968      	ldr	r1, [pc, #416]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800592c:	e06a      	b.n	8005a04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800592e:	4b66      	ldr	r3, [pc, #408]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	061b      	lsls	r3, r3, #24
 800593c:	4962      	ldr	r1, [pc, #392]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800593e:	4313      	orrs	r3, r2
 8005940:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005942:	e05f      	b.n	8005a04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d042      	beq.n	80059d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800594c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a5d      	ldr	r2, [pc, #372]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fd f862 	bl	8002a20 <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005960:	f7fd f85e 	bl	8002a20 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e280      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005972:	4b55      	ldr	r3, [pc, #340]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800597e:	f7fd f87f 	bl	8002a80 <HAL_GetREVID>
 8005982:	4603      	mov	r3, r0
 8005984:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005988:	4293      	cmp	r3, r2
 800598a:	d817      	bhi.n	80059bc <HAL_RCC_OscConfig+0x3ec>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	2b20      	cmp	r3, #32
 8005992:	d108      	bne.n	80059a6 <HAL_RCC_OscConfig+0x3d6>
 8005994:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800599c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800599e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059a2:	6053      	str	r3, [r2, #4]
 80059a4:	e02e      	b.n	8005a04 <HAL_RCC_OscConfig+0x434>
 80059a6:	4b48      	ldr	r3, [pc, #288]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	069b      	lsls	r3, r3, #26
 80059b4:	4944      	ldr	r1, [pc, #272]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	604b      	str	r3, [r1, #4]
 80059ba:	e023      	b.n	8005a04 <HAL_RCC_OscConfig+0x434>
 80059bc:	4b42      	ldr	r3, [pc, #264]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	493f      	ldr	r1, [pc, #252]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60cb      	str	r3, [r1, #12]
 80059d0:	e018      	b.n	8005a04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059d2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059de:	f7fd f81f 	bl	8002a20 <HAL_GetTick>
 80059e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059e6:	f7fd f81b 	bl	8002a20 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e23d      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059f8:	4b33      	ldr	r3, [pc, #204]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d036      	beq.n	8005a7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a18:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fc fffc 	bl	8002a20 <HAL_GetTick>
 8005a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2c:	f7fc fff8 	bl	8002a20 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e21a      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a3e:	4b22      	ldr	r3, [pc, #136]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x45c>
 8005a4a:	e018      	b.n	8005a7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a58:	f7fc ffe2 	bl	8002a20 <HAL_GetTick>
 8005a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fc ffde 	bl	8002a20 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e200      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a72:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d039      	beq.n	8005afe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01c      	beq.n	8005acc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a9e:	f7fc ffbf 	bl	8002a20 <HAL_GetTick>
 8005aa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa6:	f7fc ffbb 	bl	8002a20 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1dd      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ab8:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x4d6>
 8005ac4:	e01b      	b.n	8005afe <HAL_RCC_OscConfig+0x52e>
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005acc:	4b9b      	ldr	r3, [pc, #620]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a9a      	ldr	r2, [pc, #616]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ad8:	f7fc ffa2 	bl	8002a20 <HAL_GetTick>
 8005adc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae0:	f7fc ff9e 	bl	8002a20 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e1c0      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005af2:	4b92      	ldr	r3, [pc, #584]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8081 	beq.w	8005c0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d40 <HAL_RCC_OscConfig+0x770>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a8b      	ldr	r2, [pc, #556]	@ (8005d40 <HAL_RCC_OscConfig+0x770>)
 8005b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b18:	f7fc ff82 	bl	8002a20 <HAL_GetTick>
 8005b1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b20:	f7fc ff7e 	bl	8002a20 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	@ 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e1a0      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b32:	4b83      	ldr	r3, [pc, #524]	@ (8005d40 <HAL_RCC_OscConfig+0x770>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d106      	bne.n	8005b54 <HAL_RCC_OscConfig+0x584>
 8005b46:	4b7d      	ldr	r3, [pc, #500]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b52:	e02d      	b.n	8005bb0 <HAL_RCC_OscConfig+0x5e0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10c      	bne.n	8005b76 <HAL_RCC_OscConfig+0x5a6>
 8005b5c:	4b77      	ldr	r3, [pc, #476]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b60:	4a76      	ldr	r2, [pc, #472]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b68:	4b74      	ldr	r3, [pc, #464]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6c:	4a73      	ldr	r2, [pc, #460]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b6e:	f023 0304 	bic.w	r3, r3, #4
 8005b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b74:	e01c      	b.n	8005bb0 <HAL_RCC_OscConfig+0x5e0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCC_OscConfig+0x5c8>
 8005b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b82:	4a6e      	ldr	r2, [pc, #440]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b84:	f043 0304 	orr.w	r3, r3, #4
 8005b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	4a6b      	ldr	r2, [pc, #428]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b96:	e00b      	b.n	8005bb0 <HAL_RCC_OscConfig+0x5e0>
 8005b98:	4b68      	ldr	r3, [pc, #416]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9c:	4a67      	ldr	r2, [pc, #412]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ba4:	4b65      	ldr	r3, [pc, #404]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba8:	4a64      	ldr	r2, [pc, #400]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005baa:	f023 0304 	bic.w	r3, r3, #4
 8005bae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d015      	beq.n	8005be4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb8:	f7fc ff32 	bl	8002a20 <HAL_GetTick>
 8005bbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bbe:	e00a      	b.n	8005bd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc0:	f7fc ff2e 	bl	8002a20 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e14e      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bd6:	4b59      	ldr	r3, [pc, #356]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0ee      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x5f0>
 8005be2:	e014      	b.n	8005c0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fc ff1c 	bl	8002a20 <HAL_GetTick>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bea:	e00a      	b.n	8005c02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bec:	f7fc ff18 	bl	8002a20 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e138      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c02:	4b4e      	ldr	r3, [pc, #312]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1ee      	bne.n	8005bec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 812d 	beq.w	8005e72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c18:	4b48      	ldr	r3, [pc, #288]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c20:	2b18      	cmp	r3, #24
 8005c22:	f000 80bd 	beq.w	8005da0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	f040 809e 	bne.w	8005d6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c30:	4b42      	ldr	r3, [pc, #264]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a41      	ldr	r2, [pc, #260]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fc fef0 	bl	8002a20 <HAL_GetTick>
 8005c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fc feec 	bl	8002a20 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e10e      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c56:	4b39      	ldr	r3, [pc, #228]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c62:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c66:	4b37      	ldr	r3, [pc, #220]	@ (8005d44 <HAL_RCC_OscConfig+0x774>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c72:	0112      	lsls	r2, r2, #4
 8005c74:	430a      	orrs	r2, r1
 8005c76:	4931      	ldr	r1, [pc, #196]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c80:	3b01      	subs	r3, #1
 8005c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	025b      	lsls	r3, r3, #9
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	3b01      	subs	r3, #1
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	061b      	lsls	r3, r3, #24
 8005ca8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cac:	4923      	ldr	r1, [pc, #140]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005cb2:	4b22      	ldr	r3, [pc, #136]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	4a21      	ldr	r2, [pc, #132]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc2:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <HAL_RCC_OscConfig+0x778>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cca:	00d2      	lsls	r2, r2, #3
 8005ccc:	491b      	ldr	r1, [pc, #108]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	f023 020c 	bic.w	r2, r3, #12
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	4917      	ldr	r1, [pc, #92]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ce4:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	f023 0202 	bic.w	r2, r3, #2
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf0:	4912      	ldr	r1, [pc, #72]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cf6:	4b11      	ldr	r3, [pc, #68]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	4a10      	ldr	r2, [pc, #64]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d02:	4b0e      	ldr	r3, [pc, #56]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d1a:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d26:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a04      	ldr	r2, [pc, #16]	@ (8005d3c <HAL_RCC_OscConfig+0x76c>)
 8005d2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fc fe75 	bl	8002a20 <HAL_GetTick>
 8005d36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d38:	e011      	b.n	8005d5e <HAL_RCC_OscConfig+0x78e>
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	58024800 	.word	0x58024800
 8005d44:	fffffc0c 	.word	0xfffffc0c
 8005d48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fc fe68 	bl	8002a20 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e08a      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d5e:	4b47      	ldr	r3, [pc, #284]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x77c>
 8005d6a:	e082      	b.n	8005e72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6c:	4b43      	ldr	r3, [pc, #268]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a42      	ldr	r2, [pc, #264]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fc fe52 	bl	8002a20 <HAL_GetTick>
 8005d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d80:	f7fc fe4e 	bl	8002a20 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e070      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d92:	4b3a      	ldr	r3, [pc, #232]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x7b0>
 8005d9e:	e068      	b.n	8005e72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005da0:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005da6:	4b35      	ldr	r3, [pc, #212]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d031      	beq.n	8005e18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f003 0203 	and.w	r2, r3, #3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d12a      	bne.n	8005e18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d122      	bne.n	8005e18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d11a      	bne.n	8005e18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	0a5b      	lsrs	r3, r3, #9
 8005de6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d111      	bne.n	8005e18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	0c1b      	lsrs	r3, r3, #16
 8005df8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d108      	bne.n	8005e18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0e1b      	lsrs	r3, r3, #24
 8005e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d001      	beq.n	8005e1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e02b      	b.n	8005e74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e1c:	4b17      	ldr	r3, [pc, #92]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e20:	08db      	lsrs	r3, r3, #3
 8005e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d01f      	beq.n	8005e72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e32:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	4a11      	ldr	r2, [pc, #68]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e3e:	f7fc fdef 	bl	8002a20 <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e44:	bf00      	nop
 8005e46:	f7fc fdeb 	bl	8002a20 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d0f9      	beq.n	8005e46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e52:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e56:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <HAL_RCC_OscConfig+0x8b0>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e5e:	00d2      	lsls	r2, r2, #3
 8005e60:	4906      	ldr	r1, [pc, #24]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005e66:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	4a04      	ldr	r2, [pc, #16]	@ (8005e7c <HAL_RCC_OscConfig+0x8ac>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3730      	adds	r7, #48	@ 0x30
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	ffff0007 	.word	0xffff0007

08005e84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e19c      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e98:	4b8a      	ldr	r3, [pc, #552]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d910      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea6:	4b87      	ldr	r3, [pc, #540]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f023 020f 	bic.w	r2, r3, #15
 8005eae:	4985      	ldr	r1, [pc, #532]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb6:	4b83      	ldr	r3, [pc, #524]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e184      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d010      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	4b7b      	ldr	r3, [pc, #492]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d908      	bls.n	8005ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ee4:	4b78      	ldr	r3, [pc, #480]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	4975      	ldr	r1, [pc, #468]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d010      	beq.n	8005f24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	4b70      	ldr	r3, [pc, #448]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d908      	bls.n	8005f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f12:	4b6d      	ldr	r3, [pc, #436]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	496a      	ldr	r1, [pc, #424]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d010      	beq.n	8005f52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	4b64      	ldr	r3, [pc, #400]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d908      	bls.n	8005f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f40:	4b61      	ldr	r3, [pc, #388]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	495e      	ldr	r1, [pc, #376]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d010      	beq.n	8005f80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	4b59      	ldr	r3, [pc, #356]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d908      	bls.n	8005f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f6e:	4b56      	ldr	r3, [pc, #344]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4953      	ldr	r1, [pc, #332]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d010      	beq.n	8005fae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4b4d      	ldr	r3, [pc, #308]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d908      	bls.n	8005fae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f023 020f 	bic.w	r2, r3, #15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4947      	ldr	r1, [pc, #284]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d055      	beq.n	8006066 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005fba:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4940      	ldr	r1, [pc, #256]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d107      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d121      	bne.n	8006024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0f6      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d107      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fec:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d115      	bne.n	8006024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0ea      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006004:	4b30      	ldr	r3, [pc, #192]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0de      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006014:	4b2c      	ldr	r3, [pc, #176]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0d6      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006024:	4b28      	ldr	r3, [pc, #160]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f023 0207 	bic.w	r2, r3, #7
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4925      	ldr	r1, [pc, #148]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006036:	f7fc fcf3 	bl	8002a20 <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603c:	e00a      	b.n	8006054 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800603e:	f7fc fcef 	bl	8002a20 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0be      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006054:	4b1c      	ldr	r3, [pc, #112]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	429a      	cmp	r2, r3
 8006064:	d1eb      	bne.n	800603e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d010      	beq.n	8006094 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	4b14      	ldr	r3, [pc, #80]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	429a      	cmp	r2, r3
 8006080:	d208      	bcs.n	8006094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006082:	4b11      	ldr	r3, [pc, #68]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f023 020f 	bic.w	r2, r3, #15
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	490e      	ldr	r1, [pc, #56]	@ (80060c8 <HAL_RCC_ClockConfig+0x244>)
 8006090:	4313      	orrs	r3, r2
 8006092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006094:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d214      	bcs.n	80060cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b08      	ldr	r3, [pc, #32]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 020f 	bic.w	r2, r3, #15
 80060aa:	4906      	ldr	r1, [pc, #24]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b04      	ldr	r3, [pc, #16]	@ (80060c4 <HAL_RCC_ClockConfig+0x240>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d005      	beq.n	80060cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e086      	b.n	80061d2 <HAL_RCC_ClockConfig+0x34e>
 80060c4:	52002000 	.word	0x52002000
 80060c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d010      	beq.n	80060fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	4b3f      	ldr	r3, [pc, #252]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d208      	bcs.n	80060fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060e8:	4b3c      	ldr	r3, [pc, #240]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	4939      	ldr	r1, [pc, #228]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d010      	beq.n	8006128 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	4b34      	ldr	r3, [pc, #208]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006112:	429a      	cmp	r2, r3
 8006114:	d208      	bcs.n	8006128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006116:	4b31      	ldr	r3, [pc, #196]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	492e      	ldr	r1, [pc, #184]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006124:	4313      	orrs	r3, r2
 8006126:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	2b00      	cmp	r3, #0
 8006132:	d010      	beq.n	8006156 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	4b28      	ldr	r3, [pc, #160]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006140:	429a      	cmp	r2, r3
 8006142:	d208      	bcs.n	8006156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006144:	4b25      	ldr	r3, [pc, #148]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	4922      	ldr	r1, [pc, #136]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006152:	4313      	orrs	r3, r2
 8006154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d010      	beq.n	8006184 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	4b1d      	ldr	r3, [pc, #116]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800616e:	429a      	cmp	r2, r3
 8006170:	d208      	bcs.n	8006184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006172:	4b1a      	ldr	r3, [pc, #104]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	4917      	ldr	r1, [pc, #92]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 8006180:	4313      	orrs	r3, r2
 8006182:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006184:	f000 f834 	bl	80061f0 <HAL_RCC_GetSysClockFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b14      	ldr	r3, [pc, #80]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	4912      	ldr	r1, [pc, #72]	@ (80061e0 <HAL_RCC_ClockConfig+0x35c>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061a2:	4b0e      	ldr	r3, [pc, #56]	@ (80061dc <HAL_RCC_ClockConfig+0x358>)
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	4a0d      	ldr	r2, [pc, #52]	@ (80061e0 <HAL_RCC_ClockConfig+0x35c>)
 80061ac:	5cd3      	ldrb	r3, [r2, r3]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	4a0a      	ldr	r2, [pc, #40]	@ (80061e4 <HAL_RCC_ClockConfig+0x360>)
 80061ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061bc:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <HAL_RCC_ClockConfig+0x364>)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80061c2:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <HAL_RCC_ClockConfig+0x368>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fc f85e 	bl	8002288 <HAL_InitTick>
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	58024400 	.word	0x58024400
 80061e0:	08012a50 	.word	0x08012a50
 80061e4:	24000010 	.word	0x24000010
 80061e8:	2400000c 	.word	0x2400000c
 80061ec:	24000014 	.word	0x24000014

080061f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	@ 0x24
 80061f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061f6:	4bb3      	ldr	r3, [pc, #716]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061fe:	2b18      	cmp	r3, #24
 8006200:	f200 8155 	bhi.w	80064ae <HAL_RCC_GetSysClockFreq+0x2be>
 8006204:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006271 	.word	0x08006271
 8006210:	080064af 	.word	0x080064af
 8006214:	080064af 	.word	0x080064af
 8006218:	080064af 	.word	0x080064af
 800621c:	080064af 	.word	0x080064af
 8006220:	080064af 	.word	0x080064af
 8006224:	080064af 	.word	0x080064af
 8006228:	080064af 	.word	0x080064af
 800622c:	08006297 	.word	0x08006297
 8006230:	080064af 	.word	0x080064af
 8006234:	080064af 	.word	0x080064af
 8006238:	080064af 	.word	0x080064af
 800623c:	080064af 	.word	0x080064af
 8006240:	080064af 	.word	0x080064af
 8006244:	080064af 	.word	0x080064af
 8006248:	080064af 	.word	0x080064af
 800624c:	0800629d 	.word	0x0800629d
 8006250:	080064af 	.word	0x080064af
 8006254:	080064af 	.word	0x080064af
 8006258:	080064af 	.word	0x080064af
 800625c:	080064af 	.word	0x080064af
 8006260:	080064af 	.word	0x080064af
 8006264:	080064af 	.word	0x080064af
 8006268:	080064af 	.word	0x080064af
 800626c:	080062a3 	.word	0x080062a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006270:	4b94      	ldr	r3, [pc, #592]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800627c:	4b91      	ldr	r3, [pc, #580]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	08db      	lsrs	r3, r3, #3
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	4a90      	ldr	r2, [pc, #576]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
 800628c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800628e:	e111      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006290:	4b8d      	ldr	r3, [pc, #564]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006292:	61bb      	str	r3, [r7, #24]
      break;
 8006294:	e10e      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006296:	4b8d      	ldr	r3, [pc, #564]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006298:	61bb      	str	r3, [r7, #24]
      break;
 800629a:	e10b      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800629c:	4b8c      	ldr	r3, [pc, #560]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800629e:	61bb      	str	r3, [r7, #24]
      break;
 80062a0:	e108      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062a2:	4b88      	ldr	r3, [pc, #544]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062ac:	4b85      	ldr	r3, [pc, #532]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062b8:	4b82      	ldr	r3, [pc, #520]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062c2:	4b80      	ldr	r3, [pc, #512]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 80e1 	beq.w	80064a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	f000 8083 	beq.w	80063f4 <HAL_RCC_GetSysClockFreq+0x204>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	f200 80a1 	bhi.w	8006438 <HAL_RCC_GetSysClockFreq+0x248>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_RCC_GetSysClockFreq+0x114>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d056      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006302:	e099      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006304:	4b6f      	ldr	r3, [pc, #444]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02d      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006310:	4b6c      	ldr	r3, [pc, #432]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	08db      	lsrs	r3, r3, #3
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	4a6b      	ldr	r2, [pc, #428]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
 8006320:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b62      	ldr	r3, [pc, #392]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a02 	vldr	s12, [r7, #8]
 800634e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80064d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800636a:	e087      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80064d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	4b51      	ldr	r3, [pc, #324]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006392:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80064d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063ae:	e065      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80064dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c2:	4b40      	ldr	r3, [pc, #256]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80064d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063f2:	e043      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80064e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006406:	4b2f      	ldr	r3, [pc, #188]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006416:	ed97 6a02 	vldr	s12, [r7, #8]
 800641a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80064d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800641e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006436:	e021      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80064dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644a:	4b1e      	ldr	r3, [pc, #120]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645a:	ed97 6a02 	vldr	s12, [r7, #8]
 800645e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80064d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800647a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800647c:	4b11      	ldr	r3, [pc, #68]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	0a5b      	lsrs	r3, r3, #9
 8006482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006486:	3301      	adds	r3, #1
 8006488:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006494:	edd7 6a07 	vldr	s13, [r7, #28]
 8006498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a0:	ee17 3a90 	vmov	r3, s15
 80064a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064a6:	e005      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61bb      	str	r3, [r7, #24]
      break;
 80064ac:	e002      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80064ae:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064b0:	61bb      	str	r3, [r7, #24]
      break;
 80064b2:	bf00      	nop
  }

  return sysclockfreq;
 80064b4:	69bb      	ldr	r3, [r7, #24]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3724      	adds	r7, #36	@ 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
 80064c8:	03d09000 	.word	0x03d09000
 80064cc:	003d0900 	.word	0x003d0900
 80064d0:	017d7840 	.word	0x017d7840
 80064d4:	46000000 	.word	0x46000000
 80064d8:	4c742400 	.word	0x4c742400
 80064dc:	4a742400 	.word	0x4a742400
 80064e0:	4bbebc20 	.word	0x4bbebc20

080064e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064ea:	f7ff fe81 	bl	80061f0 <HAL_RCC_GetSysClockFreq>
 80064ee:	4602      	mov	r2, r0
 80064f0:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <HAL_RCC_GetHCLKFreq+0x50>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	490f      	ldr	r1, [pc, #60]	@ (8006538 <HAL_RCC_GetHCLKFreq+0x54>)
 80064fc:	5ccb      	ldrb	r3, [r1, r3]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006508:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <HAL_RCC_GetHCLKFreq+0x50>)
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	4a09      	ldr	r2, [pc, #36]	@ (8006538 <HAL_RCC_GetHCLKFreq+0x54>)
 8006512:	5cd3      	ldrb	r3, [r2, r3]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	4a07      	ldr	r2, [pc, #28]	@ (800653c <HAL_RCC_GetHCLKFreq+0x58>)
 8006520:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006522:	4a07      	ldr	r2, [pc, #28]	@ (8006540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006528:	4b04      	ldr	r3, [pc, #16]	@ (800653c <HAL_RCC_GetHCLKFreq+0x58>)
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	58024400 	.word	0x58024400
 8006538:	08012a50 	.word	0x08012a50
 800653c:	24000010 	.word	0x24000010
 8006540:	2400000c 	.word	0x2400000c

08006544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006548:	f7ff ffcc 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 800654c:	4602      	mov	r2, r0
 800654e:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	4904      	ldr	r1, [pc, #16]	@ (800656c <HAL_RCC_GetPCLK1Freq+0x28>)
 800655a:	5ccb      	ldrb	r3, [r1, r3]
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	58024400 	.word	0x58024400
 800656c:	08012a50 	.word	0x08012a50

08006570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006574:	f7ff ffb6 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4904      	ldr	r1, [pc, #16]	@ (8006598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	58024400 	.word	0x58024400
 8006598:	08012a50 	.word	0x08012a50

0800659c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	223f      	movs	r2, #63	@ 0x3f
 80065aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0207 	and.w	r2, r3, #7
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80065b8:	4b17      	ldr	r3, [pc, #92]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80065c4:	4b14      	ldr	r3, [pc, #80]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f003 020f 	and.w	r2, r3, #15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80065d0:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80065dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80065e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80065f4:	4b08      	ldr	r3, [pc, #32]	@ (8006618 <HAL_RCC_GetClockConfig+0x7c>)
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006600:	4b06      	ldr	r3, [pc, #24]	@ (800661c <HAL_RCC_GetClockConfig+0x80>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	601a      	str	r2, [r3, #0]
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	58024400 	.word	0x58024400
 800661c:	52002000 	.word	0x52002000

08006620 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006624:	b0ca      	sub	sp, #296	@ 0x128
 8006626:	af00      	add	r7, sp, #0
 8006628:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800662c:	2300      	movs	r3, #0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006632:	2300      	movs	r3, #0
 8006634:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006644:	2500      	movs	r5, #0
 8006646:	ea54 0305 	orrs.w	r3, r4, r5
 800664a:	d049      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006652:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006656:	d02f      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006658:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800665c:	d828      	bhi.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800665e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006662:	d01a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006668:	d822      	bhi.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800666e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006672:	d007      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006674:	e01c      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006676:	4bb8      	ldr	r3, [pc, #736]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	4ab7      	ldr	r2, [pc, #732]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800667c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006682:	e01a      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	3308      	adds	r3, #8
 800668a:	2102      	movs	r1, #2
 800668c:	4618      	mov	r0, r3
 800668e:	f001 fc8f 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006698:	e00f      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	3328      	adds	r3, #40	@ 0x28
 80066a0:	2102      	movs	r1, #2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 fd36 	bl	8008114 <RCCEx_PLL3_Config>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80066ae:	e004      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066b6:	e000      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80066b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066c2:	4ba5      	ldr	r3, [pc, #660]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066d0:	4aa1      	ldr	r2, [pc, #644]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80066d6:	e003      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80066ec:	f04f 0900 	mov.w	r9, #0
 80066f0:	ea58 0309 	orrs.w	r3, r8, r9
 80066f4:	d047      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d82a      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006700:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	0800671d 	.word	0x0800671d
 800670c:	0800672b 	.word	0x0800672b
 8006710:	08006741 	.word	0x08006741
 8006714:	0800675f 	.word	0x0800675f
 8006718:	0800675f 	.word	0x0800675f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671c:	4b8e      	ldr	r3, [pc, #568]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	4a8d      	ldr	r2, [pc, #564]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006728:	e01a      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	3308      	adds	r3, #8
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fc3c 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800673e:	e00f      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006744:	3328      	adds	r3, #40	@ 0x28
 8006746:	2100      	movs	r1, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f001 fce3 	bl	8008114 <RCCEx_PLL3_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006754:	e004      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800675c:	e000      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800675e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006768:	4b7b      	ldr	r3, [pc, #492]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800676a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800676c:	f023 0107 	bic.w	r1, r3, #7
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	4a78      	ldr	r2, [pc, #480]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006778:	430b      	orrs	r3, r1
 800677a:	6513      	str	r3, [r2, #80]	@ 0x50
 800677c:	e003      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006792:	f04f 0b00 	mov.w	fp, #0
 8006796:	ea5a 030b 	orrs.w	r3, sl, fp
 800679a:	d04c      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a6:	d030      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80067a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ac:	d829      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b0:	d02d      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80067b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b4:	d825      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067b6:	2b80      	cmp	r3, #128	@ 0x80
 80067b8:	d018      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80067ba:	2b80      	cmp	r3, #128	@ 0x80
 80067bc:	d821      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80067c2:	2b40      	cmp	r3, #64	@ 0x40
 80067c4:	d007      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80067c6:	e01c      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c8:	4b63      	ldr	r3, [pc, #396]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	4a62      	ldr	r2, [pc, #392]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80067d4:	e01c      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	3308      	adds	r3, #8
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fbe6 	bl	8007fb0 <RCCEx_PLL2_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80067ea:	e011      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	3328      	adds	r3, #40	@ 0x28
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f001 fc8d 	bl	8008114 <RCCEx_PLL3_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006800:	e006      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006808:	e002      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800680e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006818:	4b4f      	ldr	r3, [pc, #316]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800681a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006826:	4a4c      	ldr	r2, [pc, #304]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006828:	430b      	orrs	r3, r1
 800682a:	6513      	str	r3, [r2, #80]	@ 0x50
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006842:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006846:	2300      	movs	r3, #0
 8006848:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800684c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006850:	460b      	mov	r3, r1
 8006852:	4313      	orrs	r3, r2
 8006854:	d053      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800685e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006862:	d035      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006864:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006868:	d82e      	bhi.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800686a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800686e:	d031      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006870:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006874:	d828      	bhi.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006876:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800687a:	d01a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800687c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006880:	d822      	bhi.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800688a:	d007      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800688c:	e01c      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688e:	4b32      	ldr	r3, [pc, #200]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	4a31      	ldr	r2, [pc, #196]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800689a:	e01c      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a0:	3308      	adds	r3, #8
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fb83 	bl	8007fb0 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068b0:	e011      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	3328      	adds	r3, #40	@ 0x28
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fc2a 	bl	8008114 <RCCEx_PLL3_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068c6:	e006      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80068d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068de:	4b1e      	ldr	r3, [pc, #120]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068f4:	e003      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800690a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800690e:	2300      	movs	r3, #0
 8006910:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006914:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006918:	460b      	mov	r3, r1
 800691a:	4313      	orrs	r3, r2
 800691c:	d056      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800692a:	d038      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800692c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006930:	d831      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006932:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006936:	d034      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006938:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800693c:	d82b      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800693e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006942:	d01d      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006944:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006948:	d825      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800694e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006954:	e01f      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800695c:	4ba2      	ldr	r3, [pc, #648]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	4aa1      	ldr	r2, [pc, #644]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006968:	e01c      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	3308      	adds	r3, #8
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fb1c 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800697e:	e011      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006984:	3328      	adds	r3, #40	@ 0x28
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fbc3 	bl	8008114 <RCCEx_PLL3_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800699c:	e002      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80069a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80069ac:	4b8e      	ldr	r3, [pc, #568]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80069b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069bc:	4a8a      	ldr	r2, [pc, #552]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80069d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069dc:	2300      	movs	r3, #0
 80069de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80069e6:	460b      	mov	r3, r1
 80069e8:	4313      	orrs	r3, r2
 80069ea:	d03a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f2:	2b30      	cmp	r3, #48	@ 0x30
 80069f4:	d01f      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80069f6:	2b30      	cmp	r3, #48	@ 0x30
 80069f8:	d819      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d00c      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d815      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d019      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d111      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a0a:	4b77      	ldr	r3, [pc, #476]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4a76      	ldr	r2, [pc, #472]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006a16:	e011      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	2102      	movs	r1, #2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fac5 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006a2c:	e006      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a34:	e002      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a44:	4b68      	ldr	r3, [pc, #416]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a52:	4a65      	ldr	r2, [pc, #404]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a54:	430b      	orrs	r3, r1
 8006a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a58:	e003      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006a6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	d051      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a8c:	d035      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a92:	d82e      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a98:	d031      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a9e:	d828      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa4:	d01a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aaa:	d822      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab4:	d007      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ab6:	e01c      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	4a4a      	ldr	r2, [pc, #296]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ac4:	e01c      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	3308      	adds	r3, #8
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 fa6e 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ada:	e011      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	3328      	adds	r3, #40	@ 0x28
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fb15 	bl	8008114 <RCCEx_PLL3_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006af0:	e006      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006af8:	e002      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006afa:	bf00      	nop
 8006afc:	e000      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b08:	4b37      	ldr	r3, [pc, #220]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b16:	4a34      	ldr	r2, [pc, #208]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b36:	2300      	movs	r3, #0
 8006b38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d056      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b50:	d033      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006b52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b56:	d82c      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b5c:	d02f      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006b5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b62:	d826      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b68:	d02b      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b6e:	d820      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b74:	d012      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b7a:	d81a      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d022      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b84:	d115      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 fa0e 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b9a:	e015      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba0:	3328      	adds	r3, #40	@ 0x28
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 fab5 	bl	8008114 <RCCEx_PLL3_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bb0:	e00a      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bb8:	e006      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e004      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006bd0:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bde:	4a02      	ldr	r2, [pc, #8]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006be6:	bf00      	nop
 8006be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d055      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c20:	d033      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c26:	d82c      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c2c:	d02f      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c32:	d826      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c38:	d02b      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006c3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c3e:	d820      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c44:	d012      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c4a:	d81a      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d022      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c54:	d115      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f9a6 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c6a:	e015      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	3328      	adds	r3, #40	@ 0x28
 8006c72:	2101      	movs	r1, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fa4d 	bl	8008114 <RCCEx_PLL3_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c80:	e00a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c88:	e006      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ca0:	4ba3      	ldr	r3, [pc, #652]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cb0:	4a9f      	ldr	r2, [pc, #636]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cb6:	e003      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d037      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cea:	d00e      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cf0:	d816      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cfa:	d111      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	4a8b      	ldr	r2, [pc, #556]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d08:	e00f      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0e:	3308      	adds	r3, #8
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f94c 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d1e:	e004      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d26:	e000      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d32:	4b7f      	ldr	r3, [pc, #508]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d40:	4a7b      	ldr	r2, [pc, #492]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d42:	430b      	orrs	r3, r1
 8006d44:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d46:	e003      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d60:	2300      	movs	r3, #0
 8006d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	d039      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d81c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006dbd 	.word	0x08006dbd
 8006d84:	08006d91 	.word	0x08006d91
 8006d88:	08006d9f 	.word	0x08006d9f
 8006d8c:	08006dbd 	.word	0x08006dbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d90:	4b67      	ldr	r3, [pc, #412]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d94:	4a66      	ldr	r2, [pc, #408]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d9c:	e00f      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	3308      	adds	r3, #8
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f902 	bl	8007fb0 <RCCEx_PLL2_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006db2:	e004      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dba:	e000      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dca:	f023 0103 	bic.w	r1, r3, #3
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd4:	4a56      	ldr	r2, [pc, #344]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dda:	e003      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f000 809f 	beq.w	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e06:	4b4b      	ldr	r3, [pc, #300]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e12:	f7fb fe05 	bl	8002a20 <HAL_GetTick>
 8006e16:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1c:	f7fb fe00 	bl	8002a20 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b64      	cmp	r3, #100	@ 0x64
 8006e2a:	d903      	bls.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e32:	e005      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e34:	4b3f      	ldr	r3, [pc, #252]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0ed      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d179      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e48:	4b39      	ldr	r3, [pc, #228]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e54:	4053      	eors	r3, r2
 8006e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d015      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e5e:	4b34      	ldr	r3, [pc, #208]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e6a:	4b31      	ldr	r3, [pc, #196]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6e:	4a30      	ldr	r2, [pc, #192]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e76:	4b2e      	ldr	r3, [pc, #184]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e82:	4a2b      	ldr	r2, [pc, #172]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e96:	d118      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fb fdc2 	bl	8002a20 <HAL_GetTick>
 8006e9c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ea0:	e00d      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea2:	f7fb fdbd 	bl	8002a20 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d903      	bls.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006ebc:	e005      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0eb      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d129      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ee2:	d10e      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006ee4:	4b12      	ldr	r3, [pc, #72]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ef4:	091a      	lsrs	r2, r3, #4
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	4a0d      	ldr	r2, [pc, #52]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6113      	str	r3, [r2, #16]
 8006f00:	e005      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006f02:	4b0b      	ldr	r3, [pc, #44]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	4a0a      	ldr	r2, [pc, #40]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f0c:	6113      	str	r3, [r2, #16]
 8006f0e:	4b08      	ldr	r3, [pc, #32]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f1e:	4a04      	ldr	r2, [pc, #16]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f24:	e00e      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006f2e:	e009      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006f30:	58024400 	.word	0x58024400
 8006f34:	58024800 	.word	0x58024800
 8006f38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f002 0301 	and.w	r3, r2, #1
 8006f50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f54:	2300      	movs	r3, #0
 8006f56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f000 8089 	beq.w	8007078 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f6c:	2b28      	cmp	r3, #40	@ 0x28
 8006f6e:	d86b      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006f70:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08007051 	.word	0x08007051
 8006f7c:	08007049 	.word	0x08007049
 8006f80:	08007049 	.word	0x08007049
 8006f84:	08007049 	.word	0x08007049
 8006f88:	08007049 	.word	0x08007049
 8006f8c:	08007049 	.word	0x08007049
 8006f90:	08007049 	.word	0x08007049
 8006f94:	08007049 	.word	0x08007049
 8006f98:	0800701d 	.word	0x0800701d
 8006f9c:	08007049 	.word	0x08007049
 8006fa0:	08007049 	.word	0x08007049
 8006fa4:	08007049 	.word	0x08007049
 8006fa8:	08007049 	.word	0x08007049
 8006fac:	08007049 	.word	0x08007049
 8006fb0:	08007049 	.word	0x08007049
 8006fb4:	08007049 	.word	0x08007049
 8006fb8:	08007033 	.word	0x08007033
 8006fbc:	08007049 	.word	0x08007049
 8006fc0:	08007049 	.word	0x08007049
 8006fc4:	08007049 	.word	0x08007049
 8006fc8:	08007049 	.word	0x08007049
 8006fcc:	08007049 	.word	0x08007049
 8006fd0:	08007049 	.word	0x08007049
 8006fd4:	08007049 	.word	0x08007049
 8006fd8:	08007051 	.word	0x08007051
 8006fdc:	08007049 	.word	0x08007049
 8006fe0:	08007049 	.word	0x08007049
 8006fe4:	08007049 	.word	0x08007049
 8006fe8:	08007049 	.word	0x08007049
 8006fec:	08007049 	.word	0x08007049
 8006ff0:	08007049 	.word	0x08007049
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08007051 	.word	0x08007051
 8006ffc:	08007049 	.word	0x08007049
 8007000:	08007049 	.word	0x08007049
 8007004:	08007049 	.word	0x08007049
 8007008:	08007049 	.word	0x08007049
 800700c:	08007049 	.word	0x08007049
 8007010:	08007049 	.word	0x08007049
 8007014:	08007049 	.word	0x08007049
 8007018:	08007051 	.word	0x08007051
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007020:	3308      	adds	r3, #8
 8007022:	2101      	movs	r1, #1
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ffc3 	bl	8007fb0 <RCCEx_PLL2_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007030:	e00f      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	3328      	adds	r3, #40	@ 0x28
 8007038:	2101      	movs	r1, #1
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f86a 	bl	8008114 <RCCEx_PLL3_Config>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007046:	e004      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800704e:	e000      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800705a:	4bbf      	ldr	r3, [pc, #764]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800705c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007068:	4abb      	ldr	r2, [pc, #748]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800706a:	430b      	orrs	r3, r1
 800706c:	6553      	str	r3, [r2, #84]	@ 0x54
 800706e:	e003      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f002 0302 	and.w	r3, r2, #2
 8007084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800708e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d041      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d824      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80070a2:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070f5 	.word	0x080070f5
 80070ac:	080070c1 	.word	0x080070c1
 80070b0:	080070d7 	.word	0x080070d7
 80070b4:	080070f5 	.word	0x080070f5
 80070b8:	080070f5 	.word	0x080070f5
 80070bc:	080070f5 	.word	0x080070f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c4:	3308      	adds	r3, #8
 80070c6:	2101      	movs	r1, #1
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ff71 	bl	8007fb0 <RCCEx_PLL2_Config>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80070d4:	e00f      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	3328      	adds	r3, #40	@ 0x28
 80070dc:	2101      	movs	r1, #1
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 f818 	bl	8008114 <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80070ea:	e004      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80070f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070fe:	4b96      	ldr	r3, [pc, #600]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007102:	f023 0107 	bic.w	r1, r3, #7
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800710c:	4a92      	ldr	r2, [pc, #584]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800710e:	430b      	orrs	r3, r1
 8007110:	6553      	str	r3, [r2, #84]	@ 0x54
 8007112:	e003      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f002 0304 	and.w	r3, r2, #4
 8007128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007132:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007136:	460b      	mov	r3, r1
 8007138:	4313      	orrs	r3, r2
 800713a:	d044      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007144:	2b05      	cmp	r3, #5
 8007146:	d825      	bhi.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007148:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	0800719d 	.word	0x0800719d
 8007154:	08007169 	.word	0x08007169
 8007158:	0800717f 	.word	0x0800717f
 800715c:	0800719d 	.word	0x0800719d
 8007160:	0800719d 	.word	0x0800719d
 8007164:	0800719d 	.word	0x0800719d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	3308      	adds	r3, #8
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff1d 	bl	8007fb0 <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007182:	3328      	adds	r3, #40	@ 0x28
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f000 ffc4 	bl	8008114 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007192:	e004      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	f023 0107 	bic.w	r1, r3, #7
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b6:	4a68      	ldr	r2, [pc, #416]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f002 0320 	and.w	r3, r2, #32
 80071d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071e0:	460b      	mov	r3, r1
 80071e2:	4313      	orrs	r3, r2
 80071e4:	d055      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071f2:	d033      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80071f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071f8:	d82c      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fe:	d02f      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007204:	d826      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007206:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800720a:	d02b      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800720c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007210:	d820      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007216:	d012      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800721c:	d81a      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d022      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007226:	d115      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722c:	3308      	adds	r3, #8
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f000 febd 	bl	8007fb0 <RCCEx_PLL2_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800723c:	e015      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800723e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007242:	3328      	adds	r3, #40	@ 0x28
 8007244:	2102      	movs	r1, #2
 8007246:	4618      	mov	r0, r3
 8007248:	f000 ff64 	bl	8008114 <RCCEx_PLL3_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007252:	e00a      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800725a:	e006      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800725c:	bf00      	nop
 800725e:	e004      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007272:	4b39      	ldr	r3, [pc, #228]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007276:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	4a35      	ldr	r2, [pc, #212]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007284:	430b      	orrs	r3, r1
 8007286:	6553      	str	r3, [r2, #84]	@ 0x54
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800728e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800729e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072a2:	2300      	movs	r3, #0
 80072a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4313      	orrs	r3, r2
 80072b0:	d058      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80072be:	d033      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80072c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80072c4:	d82c      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ca:	d02f      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80072cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d0:	d826      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072d6:	d02b      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80072d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072dc:	d820      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e2:	d012      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e8:	d81a      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d022      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f2:	d115      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	3308      	adds	r3, #8
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fe57 	bl	8007fb0 <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007308:	e015      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	3328      	adds	r3, #40	@ 0x28
 8007310:	2102      	movs	r1, #2
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fefe 	bl	8008114 <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800731e:	e00a      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007326:	e006      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10e      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800733e:	4b06      	ldr	r3, [pc, #24]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007342:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800734e:	4a02      	ldr	r2, [pc, #8]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007350:	430b      	orrs	r3, r1
 8007352:	6593      	str	r3, [r2, #88]	@ 0x58
 8007354:	e006      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007356:	bf00      	nop
 8007358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007374:	2300      	movs	r3, #0
 8007376:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800737a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800737e:	460b      	mov	r3, r1
 8007380:	4313      	orrs	r3, r2
 8007382:	d055      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800738c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007390:	d033      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007392:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007396:	d82c      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	d02f      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800739e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073a2:	d826      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80073a8:	d02b      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80073aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80073ae:	d820      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073b4:	d012      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80073b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073ba:	d81a      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d022      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80073c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c4:	d115      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	3308      	adds	r3, #8
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fdee 	bl	8007fb0 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80073da:	e015      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	3328      	adds	r3, #40	@ 0x28
 80073e2:	2102      	movs	r1, #2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fe95 	bl	8008114 <RCCEx_PLL3_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80073f0:	e00a      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f8:	e006      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073fa:	bf00      	nop
 80073fc:	e004      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073fe:	bf00      	nop
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007410:	4ba1      	ldr	r3, [pc, #644]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007414:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007420:	4a9d      	ldr	r2, [pc, #628]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007422:	430b      	orrs	r3, r1
 8007424:	6593      	str	r3, [r2, #88]	@ 0x58
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f002 0308 	and.w	r3, r2, #8
 800743c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007446:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d01e      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745c:	d10c      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	3328      	adds	r3, #40	@ 0x28
 8007464:	2102      	movs	r1, #2
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fe54 	bl	8008114 <RCCEx_PLL3_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007478:	4b87      	ldr	r3, [pc, #540]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800747a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007488:	4a83      	ldr	r2, [pc, #524]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800748a:	430b      	orrs	r3, r1
 800748c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f002 0310 	and.w	r3, r2, #16
 800749a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800749e:	2300      	movs	r3, #0
 80074a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d01e      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ba:	d10c      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	3328      	adds	r3, #40	@ 0x28
 80074c2:	2102      	movs	r1, #2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fe25 	bl	8008114 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074d6:	4b70      	ldr	r3, [pc, #448]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074e6:	4a6c      	ldr	r2, [pc, #432]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074e8:	430b      	orrs	r3, r1
 80074ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80074f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074fc:	2300      	movs	r3, #0
 80074fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007502:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007506:	460b      	mov	r3, r1
 8007508:	4313      	orrs	r3, r2
 800750a:	d03e      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800750c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007518:	d022      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800751a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751e:	d81b      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007528:	d00b      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800752a:	e015      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007530:	3308      	adds	r3, #8
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fd3b 	bl	8007fb0 <RCCEx_PLL2_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007540:	e00f      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	3328      	adds	r3, #40	@ 0x28
 8007548:	2102      	movs	r1, #2
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fde2 	bl	8008114 <RCCEx_PLL3_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007556:	e004      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800755e:	e000      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800756a:	4b4b      	ldr	r3, [pc, #300]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800757a:	4a47      	ldr	r2, [pc, #284]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800757c:	430b      	orrs	r3, r1
 800757e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007580:	e003      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007596:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007598:	2300      	movs	r3, #0
 800759a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800759c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075a0:	460b      	mov	r3, r1
 80075a2:	4313      	orrs	r3, r2
 80075a4:	d03b      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075b2:	d01f      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80075b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075b8:	d818      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80075ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075be:	d003      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80075c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c4:	d007      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80075c6:	e011      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c8:	4b33      	ldr	r3, [pc, #204]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	4a32      	ldr	r2, [pc, #200]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80075d4:	e00f      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075da:	3328      	adds	r3, #40	@ 0x28
 80075dc:	2101      	movs	r1, #1
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fd98 	bl	8008114 <RCCEx_PLL3_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80075ea:	e004      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80075f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075fe:	4b26      	ldr	r3, [pc, #152]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007602:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760e:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007610:	430b      	orrs	r3, r1
 8007612:	6553      	str	r3, [r2, #84]	@ 0x54
 8007614:	e003      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800762a:	673b      	str	r3, [r7, #112]	@ 0x70
 800762c:	2300      	movs	r3, #0
 800762e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007630:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007634:	460b      	mov	r3, r1
 8007636:	4313      	orrs	r3, r2
 8007638:	d034      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007648:	d007      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800764a:	e011      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764c:	4b12      	ldr	r3, [pc, #72]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	4a11      	ldr	r2, [pc, #68]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007658:	e00e      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	3308      	adds	r3, #8
 8007660:	2102      	movs	r1, #2
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fca4 	bl	8007fb0 <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10d      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007680:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007684:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768e:	4a02      	ldr	r2, [pc, #8]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007690:	430b      	orrs	r3, r1
 8007692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007694:	e006      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80076b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076b2:	2300      	movs	r3, #0
 80076b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d00c      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c4:	3328      	adds	r3, #40	@ 0x28
 80076c6:	2102      	movs	r1, #2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fd23 	bl	8008114 <RCCEx_PLL3_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80076e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80076e8:	2300      	movs	r3, #0
 80076ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80076ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80076f0:	460b      	mov	r3, r1
 80076f2:	4313      	orrs	r3, r2
 80076f4:	d038      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007702:	d018      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007708:	d811      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800770a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770e:	d014      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007714:	d80b      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d011      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800771a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800771e:	d106      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007720:	4bc3      	ldr	r3, [pc, #780]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	4ac2      	ldr	r2, [pc, #776]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800772a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800772c:	e008      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007734:	e004      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007736:	bf00      	nop
 8007738:	e002      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800773e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007748:	4bb9      	ldr	r3, [pc, #740]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800774a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007758:	4ab5      	ldr	r2, [pc, #724]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800775a:	430b      	orrs	r3, r1
 800775c:	6553      	str	r3, [r2, #84]	@ 0x54
 800775e:	e003      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007774:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007776:	2300      	movs	r3, #0
 8007778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800777a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800777e:	460b      	mov	r3, r1
 8007780:	4313      	orrs	r3, r2
 8007782:	d009      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007784:	4baa      	ldr	r3, [pc, #680]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007788:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007792:	4aa7      	ldr	r2, [pc, #668]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007794:	430b      	orrs	r3, r1
 8007796:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80077a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80077a6:	2300      	movs	r3, #0
 80077a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80077aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d00a      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80077b4:	4b9e      	ldr	r3, [pc, #632]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80077c4:	4a9a      	ldr	r2, [pc, #616]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077c6:	430b      	orrs	r3, r1
 80077c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80077d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077d8:	2300      	movs	r3, #0
 80077da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80077e0:	460b      	mov	r3, r1
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d009      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077e6:	4b92      	ldr	r3, [pc, #584]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077f4:	4a8e      	ldr	r2, [pc, #568]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077f6:	430b      	orrs	r3, r1
 80077f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007806:	643b      	str	r3, [r7, #64]	@ 0x40
 8007808:	2300      	movs	r3, #0
 800780a:	647b      	str	r3, [r7, #68]	@ 0x44
 800780c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007810:	460b      	mov	r3, r1
 8007812:	4313      	orrs	r3, r2
 8007814:	d00e      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007816:	4b86      	ldr	r3, [pc, #536]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	4a85      	ldr	r2, [pc, #532]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800781c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007820:	6113      	str	r3, [r2, #16]
 8007822:	4b83      	ldr	r3, [pc, #524]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007824:	6919      	ldr	r1, [r3, #16]
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800782e:	4a80      	ldr	r2, [pc, #512]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007830:	430b      	orrs	r3, r1
 8007832:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007840:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007842:	2300      	movs	r3, #0
 8007844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007846:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007850:	4b77      	ldr	r3, [pc, #476]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007854:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785e:	4a74      	ldr	r2, [pc, #464]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007860:	430b      	orrs	r3, r1
 8007862:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007870:	633b      	str	r3, [r7, #48]	@ 0x30
 8007872:	2300      	movs	r3, #0
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
 8007876:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d00a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007880:	4b6b      	ldr	r3, [pc, #428]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007884:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007890:	4a67      	ldr	r2, [pc, #412]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007892:	430b      	orrs	r3, r1
 8007894:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	2100      	movs	r1, #0
 80078a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d011      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	3308      	adds	r3, #8
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fb78 	bl	8007fb0 <RCCEx_PLL2_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	2100      	movs	r1, #0
 80078e0:	6239      	str	r1, [r7, #32]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80078ec:	460b      	mov	r3, r1
 80078ee:	4313      	orrs	r3, r2
 80078f0:	d011      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	3308      	adds	r3, #8
 80078f8:	2101      	movs	r1, #1
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fb58 	bl	8007fb0 <RCCEx_PLL2_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	2100      	movs	r1, #0
 8007920:	61b9      	str	r1, [r7, #24]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800792c:	460b      	mov	r3, r1
 800792e:	4313      	orrs	r3, r2
 8007930:	d011      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	3308      	adds	r3, #8
 8007938:	2102      	movs	r1, #2
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fb38 	bl	8007fb0 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	2100      	movs	r1, #0
 8007960:	6139      	str	r1, [r7, #16]
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d011      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	3328      	adds	r3, #40	@ 0x28
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fbca 	bl	8008114 <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	2100      	movs	r1, #0
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	f003 0310 	and.w	r3, r3, #16
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079ac:	460b      	mov	r3, r1
 80079ae:	4313      	orrs	r3, r2
 80079b0:	d011      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b6:	3328      	adds	r3, #40	@ 0x28
 80079b8:	2101      	movs	r1, #1
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fbaa 	bl	8008114 <RCCEx_PLL3_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	2100      	movs	r1, #0
 80079e0:	6039      	str	r1, [r7, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80079ec:	460b      	mov	r3, r1
 80079ee:	4313      	orrs	r3, r2
 80079f0:	d011      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f6:	3328      	adds	r3, #40	@ 0x28
 80079f8:	2102      	movs	r1, #2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fb8a 	bl	8008114 <RCCEx_PLL3_Config>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007a16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a30:	58024400 	.word	0x58024400

08007a34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a38:	f7fe fd54 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	091b      	lsrs	r3, r3, #4
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	4904      	ldr	r1, [pc, #16]	@ (8007a5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a4a:	5ccb      	ldrb	r3, [r1, r3]
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	08012a50 	.word	0x08012a50

08007a60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	@ 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a68:	4ba1      	ldr	r3, [pc, #644]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007a72:	4b9f      	ldr	r3, [pc, #636]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	0b1b      	lsrs	r3, r3, #12
 8007a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a7e:	4b9c      	ldr	r3, [pc, #624]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a82:	091b      	lsrs	r3, r3, #4
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007a8a:	4b99      	ldr	r3, [pc, #612]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8e:	08db      	lsrs	r3, r3, #3
 8007a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8111 	beq.w	8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	f000 8083 	beq.w	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	f200 80a1 	bhi.w	8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d056      	beq.n	8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007aca:	e099      	b.n	8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007acc:	4b88      	ldr	r3, [pc, #544]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d02d      	beq.n	8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ad8:	4b85      	ldr	r3, [pc, #532]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	08db      	lsrs	r3, r3, #3
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	4a84      	ldr	r2, [pc, #528]	@ (8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b7b      	ldr	r3, [pc, #492]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b32:	e087      	b.n	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b76:	e065      	b.n	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b59      	ldr	r3, [pc, #356]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bba:	e043      	b.n	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bce:	4b48      	ldr	r3, [pc, #288]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bfe:	e021      	b.n	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007c44:	4b2a      	ldr	r3, [pc, #168]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c48:	0a5b      	lsrs	r3, r3, #9
 8007c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c6a:	ee17 2a90 	vmov	r2, s15
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007c72:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c98:	ee17 2a90 	vmov	r2, s15
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ca0:	4b13      	ldr	r3, [pc, #76]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca4:	0e1b      	lsrs	r3, r3, #24
 8007ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc6:	ee17 2a90 	vmov	r2, s15
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cce:	e008      	b.n	8007ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	609a      	str	r2, [r3, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	3724      	adds	r7, #36	@ 0x24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	03d09000 	.word	0x03d09000
 8007cf8:	46000000 	.word	0x46000000
 8007cfc:	4c742400 	.word	0x4c742400
 8007d00:	4a742400 	.word	0x4a742400
 8007d04:	4bbebc20 	.word	0x4bbebc20

08007d08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b089      	sub	sp, #36	@ 0x24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d10:	4ba1      	ldr	r3, [pc, #644]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	0d1b      	lsrs	r3, r3, #20
 8007d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d26:	4b9c      	ldr	r3, [pc, #624]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2a:	0a1b      	lsrs	r3, r3, #8
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007d32:	4b99      	ldr	r3, [pc, #612]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d36:	08db      	lsrs	r3, r3, #3
 8007d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8111 	beq.w	8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	f000 8083 	beq.w	8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	f200 80a1 	bhi.w	8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d056      	beq.n	8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d72:	e099      	b.n	8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d74:	4b88      	ldr	r3, [pc, #544]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d02d      	beq.n	8007ddc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d80:	4b85      	ldr	r3, [pc, #532]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	08db      	lsrs	r3, r3, #3
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	4a84      	ldr	r2, [pc, #528]	@ (8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	ee07 3a90 	vmov	s15, r3
 8007d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007daa:	4b7b      	ldr	r3, [pc, #492]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007dda:	e087      	b.n	8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dee:	4b6a      	ldr	r3, [pc, #424]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e1e:	e065      	b.n	8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e32:	4b59      	ldr	r3, [pc, #356]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e62:	e043      	b.n	8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e76:	4b48      	ldr	r3, [pc, #288]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ea6:	e021      	b.n	8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eba:	4b37      	ldr	r3, [pc, #220]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ece:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007eec:	4b2a      	ldr	r3, [pc, #168]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	0a5b      	lsrs	r3, r3, #9
 8007ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f12:	ee17 2a90 	vmov	r2, s15
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f40:	ee17 2a90 	vmov	r2, s15
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f48:	4b13      	ldr	r3, [pc, #76]	@ (8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6e:	ee17 2a90 	vmov	r2, s15
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f76:	e008      	b.n	8007f8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	609a      	str	r2, [r3, #8]
}
 8007f8a:	bf00      	nop
 8007f8c:	3724      	adds	r7, #36	@ 0x24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	58024400 	.word	0x58024400
 8007f9c:	03d09000 	.word	0x03d09000
 8007fa0:	46000000 	.word	0x46000000
 8007fa4:	4c742400 	.word	0x4c742400
 8007fa8:	4a742400 	.word	0x4a742400
 8007fac:	4bbebc20 	.word	0x4bbebc20

08007fb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fbe:	4b53      	ldr	r3, [pc, #332]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d101      	bne.n	8007fce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e099      	b.n	8008102 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fce:	4b4f      	ldr	r3, [pc, #316]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fda:	f7fa fd21 	bl	8002a20 <HAL_GetTick>
 8007fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe0:	e008      	b.n	8007ff4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fe2:	f7fa fd1d 	bl	8002a20 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d901      	bls.n	8007ff4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e086      	b.n	8008102 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ff4:	4b45      	ldr	r3, [pc, #276]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f0      	bne.n	8007fe2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008000:	4b42      	ldr	r3, [pc, #264]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008004:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	031b      	lsls	r3, r3, #12
 800800e:	493f      	ldr	r1, [pc, #252]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008010:	4313      	orrs	r3, r2
 8008012:	628b      	str	r3, [r1, #40]	@ 0x28
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	3b01      	subs	r3, #1
 800801a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	3b01      	subs	r3, #1
 8008024:	025b      	lsls	r3, r3, #9
 8008026:	b29b      	uxth	r3, r3
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	3b01      	subs	r3, #1
 8008030:	041b      	lsls	r3, r3, #16
 8008032:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	3b01      	subs	r3, #1
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008044:	4931      	ldr	r1, [pc, #196]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008046:	4313      	orrs	r3, r2
 8008048:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800804a:	4b30      	ldr	r3, [pc, #192]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	492d      	ldr	r1, [pc, #180]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008058:	4313      	orrs	r3, r2
 800805a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800805c:	4b2b      	ldr	r3, [pc, #172]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 800805e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008060:	f023 0220 	bic.w	r2, r3, #32
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	4928      	ldr	r1, [pc, #160]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 800806a:	4313      	orrs	r3, r2
 800806c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800806e:	4b27      	ldr	r3, [pc, #156]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008072:	4a26      	ldr	r2, [pc, #152]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008074:	f023 0310 	bic.w	r3, r3, #16
 8008078:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800807a:	4b24      	ldr	r3, [pc, #144]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 800807c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800807e:	4b24      	ldr	r3, [pc, #144]	@ (8008110 <RCCEx_PLL2_Config+0x160>)
 8008080:	4013      	ands	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	69d2      	ldr	r2, [r2, #28]
 8008086:	00d2      	lsls	r2, r2, #3
 8008088:	4920      	ldr	r1, [pc, #128]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 800808a:	4313      	orrs	r3, r2
 800808c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800808e:	4b1f      	ldr	r3, [pc, #124]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	4a1e      	ldr	r2, [pc, #120]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 8008094:	f043 0310 	orr.w	r3, r3, #16
 8008098:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080a0:	4b1a      	ldr	r3, [pc, #104]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	4a19      	ldr	r2, [pc, #100]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080ac:	e00f      	b.n	80080ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d106      	bne.n	80080c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080b4:	4b15      	ldr	r3, [pc, #84]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	4a14      	ldr	r2, [pc, #80]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080c0:	e005      	b.n	80080ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080c2:	4b12      	ldr	r3, [pc, #72]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	4a11      	ldr	r2, [pc, #68]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080ce:	4b0f      	ldr	r3, [pc, #60]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a0e      	ldr	r2, [pc, #56]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080da:	f7fa fca1 	bl	8002a20 <HAL_GetTick>
 80080de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e0:	e008      	b.n	80080f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080e2:	f7fa fc9d 	bl	8002a20 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080f4:	4b05      	ldr	r3, [pc, #20]	@ (800810c <RCCEx_PLL2_Config+0x15c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0f0      	beq.n	80080e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400
 8008110:	ffff0007 	.word	0xffff0007

08008114 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008122:	4b53      	ldr	r3, [pc, #332]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b03      	cmp	r3, #3
 800812c:	d101      	bne.n	8008132 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e099      	b.n	8008266 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008132:	4b4f      	ldr	r3, [pc, #316]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a4e      	ldr	r2, [pc, #312]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800813c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813e:	f7fa fc6f 	bl	8002a20 <HAL_GetTick>
 8008142:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008144:	e008      	b.n	8008158 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008146:	f7fa fc6b 	bl	8002a20 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e086      	b.n	8008266 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008158:	4b45      	ldr	r3, [pc, #276]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1f0      	bne.n	8008146 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008164:	4b42      	ldr	r3, [pc, #264]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	051b      	lsls	r3, r3, #20
 8008172:	493f      	ldr	r1, [pc, #252]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	628b      	str	r3, [r1, #40]	@ 0x28
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	3b01      	subs	r3, #1
 800817e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	3b01      	subs	r3, #1
 8008188:	025b      	lsls	r3, r3, #9
 800818a:	b29b      	uxth	r3, r3
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	3b01      	subs	r3, #1
 8008194:	041b      	lsls	r3, r3, #16
 8008196:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	061b      	lsls	r3, r3, #24
 80081a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081a8:	4931      	ldr	r1, [pc, #196]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081ae:	4b30      	ldr	r3, [pc, #192]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	492d      	ldr	r1, [pc, #180]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	4928      	ldr	r1, [pc, #160]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081d2:	4b27      	ldr	r3, [pc, #156]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a26      	ldr	r2, [pc, #152]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081de:	4b24      	ldr	r3, [pc, #144]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081e2:	4b24      	ldr	r3, [pc, #144]	@ (8008274 <RCCEx_PLL3_Config+0x160>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	69d2      	ldr	r2, [r2, #28]
 80081ea:	00d2      	lsls	r2, r2, #3
 80081ec:	4920      	ldr	r1, [pc, #128]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008204:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 800820a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008210:	e00f      	b.n	8008232 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d106      	bne.n	8008226 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	4a14      	ldr	r2, [pc, #80]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 800821e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008224:	e005      	b.n	8008232 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008226:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822a:	4a11      	ldr	r2, [pc, #68]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 800822c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008230:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008232:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a0e      	ldr	r2, [pc, #56]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 8008238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800823c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800823e:	f7fa fbef 	bl	8002a20 <HAL_GetTick>
 8008242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008244:	e008      	b.n	8008258 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008246:	f7fa fbeb 	bl	8002a20 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e006      	b.n	8008266 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <RCCEx_PLL3_Config+0x15c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0f0      	beq.n	8008246 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	58024400 	.word	0x58024400
 8008274:	ffff0007 	.word	0xffff0007

08008278 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e10f      	b.n	80084aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a87      	ldr	r2, [pc, #540]	@ (80084b4 <HAL_SPI_Init+0x23c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <HAL_SPI_Init+0x42>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a86      	ldr	r2, [pc, #536]	@ (80084b8 <HAL_SPI_Init+0x240>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00a      	beq.n	80082ba <HAL_SPI_Init+0x42>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a84      	ldr	r2, [pc, #528]	@ (80084bc <HAL_SPI_Init+0x244>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d005      	beq.n	80082ba <HAL_SPI_Init+0x42>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d901      	bls.n	80082ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e0f7      	b.n	80084aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fbbc 	bl	8008a38 <SPI_GetPacketSize>
 80082c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a7b      	ldr	r2, [pc, #492]	@ (80084b4 <HAL_SPI_Init+0x23c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00c      	beq.n	80082e6 <HAL_SPI_Init+0x6e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a79      	ldr	r2, [pc, #484]	@ (80084b8 <HAL_SPI_Init+0x240>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d007      	beq.n	80082e6 <HAL_SPI_Init+0x6e>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a78      	ldr	r2, [pc, #480]	@ (80084bc <HAL_SPI_Init+0x244>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d002      	beq.n	80082e6 <HAL_SPI_Init+0x6e>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d811      	bhi.n	800830a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082ea:	4a72      	ldr	r2, [pc, #456]	@ (80084b4 <HAL_SPI_Init+0x23c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a70      	ldr	r2, [pc, #448]	@ (80084b8 <HAL_SPI_Init+0x240>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_SPI_Init+0x8c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a6f      	ldr	r2, [pc, #444]	@ (80084bc <HAL_SPI_Init+0x244>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d104      	bne.n	800830e <HAL_SPI_Init+0x96>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b10      	cmp	r3, #16
 8008308:	d901      	bls.n	800830e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e0cd      	b.n	80084aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7f9 ff04 	bl	8002130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0201 	bic.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800834a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008354:	d119      	bne.n	800838a <HAL_SPI_Init+0x112>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800835e:	d103      	bne.n	8008368 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10c      	bne.n	800838a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008378:	d107      	bne.n	800838a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008388:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <HAL_SPI_Init+0x13e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b06      	cmp	r3, #6
 800839c:	d90b      	bls.n	80083b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	e007      	b.n	80083c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69da      	ldr	r2, [r3, #28]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ce:	431a      	orrs	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d8:	ea42 0103 	orr.w	r1, r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008426:	ea42 0103 	orr.w	r1, r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d113      	bne.n	8008466 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008450:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008464:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0201 	bic.w	r2, r2, #1
 8008474:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40013000 	.word	0x40013000
 80084b8:	40003800 	.word	0x40003800
 80084bc:	40003c00 	.word	0x40003c00

080084c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3320      	adds	r3, #32
 80084d6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084d8:	f7fa faa2 	bl	8002a20 <HAL_GetTick>
 80084dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d001      	beq.n	80084ee <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80084ea:	2302      	movs	r3, #2
 80084ec:	e1d1      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <HAL_SPI_Transmit+0x3a>
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e1c9      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_SPI_Transmit+0x4c>
 8008508:	2302      	movs	r3, #2
 800850a:	e1c2      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2203      	movs	r2, #3
 8008518:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	88fa      	ldrh	r2, [r7, #6]
 800852e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008564:	d108      	bne.n	8008578 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	e009      	b.n	800858c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800858a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	4b96      	ldr	r3, [pc, #600]	@ (80087ec <HAL_SPI_Transmit+0x32c>)
 8008594:	4013      	ands	r3, r2
 8008596:	88f9      	ldrh	r1, [r7, #6]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	430b      	orrs	r3, r1
 800859e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0201 	orr.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085b8:	d107      	bne.n	80085ca <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d947      	bls.n	8008662 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085d2:	e03f      	b.n	8008654 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d114      	bne.n	800860c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6812      	ldr	r2, [r2, #0]
 80085ec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800860a:	e023      	b.n	8008654 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800860c:	f7fa fa08 	bl	8002a20 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d803      	bhi.n	8008624 <HAL_SPI_Transmit+0x164>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008622:	d102      	bne.n	800862a <HAL_SPI_Transmit+0x16a>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d114      	bne.n	8008654 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f936 	bl	800889c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008636:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e11e      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1b9      	bne.n	80085d4 <HAL_SPI_Transmit+0x114>
 8008660:	e0f1      	b.n	8008846 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	2b07      	cmp	r3, #7
 8008668:	f240 80e6 	bls.w	8008838 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800866c:	e05d      	b.n	800872a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b02      	cmp	r3, #2
 800867a:	d132      	bne.n	80086e2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d918      	bls.n	80086ba <HAL_SPI_Transmit+0x1fa>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d014      	beq.n	80086ba <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b02      	subs	r3, #2
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086b8:	e037      	b.n	800872a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086be:	881a      	ldrh	r2, [r3, #0]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c8:	1c9a      	adds	r2, r3, #2
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086e0:	e023      	b.n	800872a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086e2:	f7fa f99d 	bl	8002a20 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d803      	bhi.n	80086fa <HAL_SPI_Transmit+0x23a>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d102      	bne.n	8008700 <HAL_SPI_Transmit+0x240>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d114      	bne.n	800872a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f8cb 	bl	800889c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800870c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e0b3      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d19b      	bne.n	800866e <HAL_SPI_Transmit+0x1ae>
 8008736:	e086      	b.n	8008846 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d154      	bne.n	80087f0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b03      	cmp	r3, #3
 8008750:	d918      	bls.n	8008784 <HAL_SPI_Transmit+0x2c4>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008756:	2b40      	cmp	r3, #64	@ 0x40
 8008758:	d914      	bls.n	8008784 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800876a:	1d1a      	adds	r2, r3, #4
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b04      	subs	r3, #4
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008782:	e059      	b.n	8008838 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b01      	cmp	r3, #1
 800878e:	d917      	bls.n	80087c0 <HAL_SPI_Transmit+0x300>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d013      	beq.n	80087c0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800879c:	881a      	ldrh	r2, [r3, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a6:	1c9a      	adds	r2, r3, #2
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b02      	subs	r3, #2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087be:	e03b      	b.n	8008838 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3320      	adds	r3, #32
 80087ca:	7812      	ldrb	r2, [r2, #0]
 80087cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087ea:	e025      	b.n	8008838 <HAL_SPI_Transmit+0x378>
 80087ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f0:	f7fa f916 	bl	8002a20 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d803      	bhi.n	8008808 <HAL_SPI_Transmit+0x348>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d102      	bne.n	800880e <HAL_SPI_Transmit+0x34e>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d114      	bne.n	8008838 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f844 	bl	800889c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800881a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e02c      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f af79 	bne.w	8008738 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2200      	movs	r2, #0
 800884e:	2108      	movs	r1, #8
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f8c3 	bl	80089dc <SPI_WaitOnFlagUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008862:	f043 0220 	orr.w	r2, r3, #32
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f815 	bl	800889c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008890:	2300      	movs	r3, #0
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop

0800889c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0208 	orr.w	r2, r2, #8
 80088ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0210 	orr.w	r2, r2, #16
 80088ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6919      	ldr	r1, [r3, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b3c      	ldr	r3, [pc, #240]	@ (80089d8 <SPI_CloseTransfer+0x13c>)
 80088e8:	400b      	ands	r3, r1
 80088ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80088fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b04      	cmp	r3, #4
 8008906:	d014      	beq.n	8008932 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00f      	beq.n	8008932 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008918:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0220 	orr.w	r2, r2, #32
 8008930:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b03      	cmp	r3, #3
 800893c:	d014      	beq.n	8008968 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00f      	beq.n	8008968 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800894e:	f043 0204 	orr.w	r2, r3, #4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008966:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00f      	beq.n	8008992 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008978:	f043 0201 	orr.w	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699a      	ldr	r2, [r3, #24]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008990:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00f      	beq.n	80089bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089a2:	f043 0208 	orr.w	r2, r3, #8
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	fffffc90 	.word	0xfffffc90

080089dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	4613      	mov	r3, r2
 80089ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80089ec:	e010      	b.n	8008a10 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ee:	f7fa f817 	bl	8002a20 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d803      	bhi.n	8008a06 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d102      	bne.n	8008a0c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e00f      	b.n	8008a30 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695a      	ldr	r2, [r3, #20]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	461a      	mov	r2, r3
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d0df      	beq.n	80089ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a44:	095b      	lsrs	r3, r3, #5
 8008a46:	3301      	adds	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	3307      	adds	r3, #7
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e049      	b.n	8008b14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d106      	bne.n	8008a9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f841 	bl	8008b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f000 f9e7 	bl	8008e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d001      	beq.n	8008b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e054      	b.n	8008bf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a26      	ldr	r2, [pc, #152]	@ (8008c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d022      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b72:	d01d      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a22      	ldr	r2, [pc, #136]	@ (8008c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d018      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a21      	ldr	r2, [pc, #132]	@ (8008c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d013      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8008c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00e      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1e      	ldr	r2, [pc, #120]	@ (8008c10 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d009      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c14 <HAL_TIM_Base_Start_IT+0xe4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d004      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a1b      	ldr	r2, [pc, #108]	@ (8008c18 <HAL_TIM_Base_Start_IT+0xe8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d115      	bne.n	8008bdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	4b19      	ldr	r3, [pc, #100]	@ (8008c1c <HAL_TIM_Base_Start_IT+0xec>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2b06      	cmp	r3, #6
 8008bc0:	d015      	beq.n	8008bee <HAL_TIM_Base_Start_IT+0xbe>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc8:	d011      	beq.n	8008bee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f042 0201 	orr.w	r2, r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bda:	e008      	b.n	8008bee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0201 	orr.w	r2, r2, #1
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e000      	b.n	8008bf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40010400 	.word	0x40010400
 8008c14:	40001800 	.word	0x40001800
 8008c18:	40014000 	.word	0x40014000
 8008c1c:	00010007 	.word	0x00010007

08008c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d020      	beq.n	8008c84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01b      	beq.n	8008c84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0202 	mvn.w	r2, #2
 8008c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f8e9 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008c70:	e005      	b.n	8008c7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f8db 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f8ec 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d020      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01b      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0204 	mvn.w	r2, #4
 8008ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f8c3 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008cbc:	e005      	b.n	8008cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f8b5 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f8c6 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f003 0308 	and.w	r3, r3, #8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d020      	beq.n	8008d1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01b      	beq.n	8008d1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0208 	mvn.w	r2, #8
 8008cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f89d 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008d08:	e005      	b.n	8008d16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f88f 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f8a0 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f003 0310 	and.w	r3, r3, #16
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d020      	beq.n	8008d68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01b      	beq.n	8008d68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0210 	mvn.w	r2, #16
 8008d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f877 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008d54:	e005      	b.n	8008d62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f869 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f87a 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00c      	beq.n	8008d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f06f 0201 	mvn.w	r2, #1
 8008d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7f9 f964 	bl	8002054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00c      	beq.n	8008dba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d007      	beq.n	8008dba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f90d 	bl	8008fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00c      	beq.n	8008dde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f905 	bl	8008fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00c      	beq.n	8008e02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f834 	bl	8008e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00c      	beq.n	8008e26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f06f 0220 	mvn.w	r2, #32
 8008e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8cd 	bl	8008fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
	...

08008e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a43      	ldr	r2, [pc, #268]	@ (8008fa0 <TIM_Base_SetConfig+0x120>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9e:	d00f      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a40      	ldr	r2, [pc, #256]	@ (8008fa4 <TIM_Base_SetConfig+0x124>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00b      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8008fa8 <TIM_Base_SetConfig+0x128>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a3e      	ldr	r2, [pc, #248]	@ (8008fac <TIM_Base_SetConfig+0x12c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a3d      	ldr	r2, [pc, #244]	@ (8008fb0 <TIM_Base_SetConfig+0x130>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d108      	bne.n	8008ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a32      	ldr	r2, [pc, #200]	@ (8008fa0 <TIM_Base_SetConfig+0x120>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d01f      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee0:	d01b      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8008fa4 <TIM_Base_SetConfig+0x124>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d017      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a2e      	ldr	r2, [pc, #184]	@ (8008fa8 <TIM_Base_SetConfig+0x128>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8008fac <TIM_Base_SetConfig+0x12c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00f      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a2c      	ldr	r2, [pc, #176]	@ (8008fb0 <TIM_Base_SetConfig+0x130>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d00b      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d007      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d003      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a29      	ldr	r2, [pc, #164]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d108      	bne.n	8008f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a14      	ldr	r2, [pc, #80]	@ (8008fa0 <TIM_Base_SetConfig+0x120>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00f      	beq.n	8008f72 <TIM_Base_SetConfig+0xf2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a16      	ldr	r2, [pc, #88]	@ (8008fb0 <TIM_Base_SetConfig+0x130>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00b      	beq.n	8008f72 <TIM_Base_SetConfig+0xf2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a15      	ldr	r2, [pc, #84]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_Base_SetConfig+0xf2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a14      	ldr	r2, [pc, #80]	@ (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_Base_SetConfig+0xf2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a13      	ldr	r2, [pc, #76]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d103      	bne.n	8008f7a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f043 0204 	orr.w	r2, r3, #4
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	601a      	str	r2, [r3, #0]
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40010000 	.word	0x40010000
 8008fa4:	40000400 	.word	0x40000400
 8008fa8:	40000800 	.word	0x40000800
 8008fac:	40000c00 	.word	0x40000c00
 8008fb0:	40010400 	.word	0x40010400
 8008fb4:	40014000 	.word	0x40014000
 8008fb8:	40014400 	.word	0x40014400
 8008fbc:	40014800 	.word	0x40014800

08008fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e042      	b.n	8009094 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7f9 fbab 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2224      	movs	r2, #36	@ 0x24
 800902a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0201 	bic.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fa14 	bl	800a474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fca9 	bl	80099a4 <UART_SetConfig>
 8009052:	4603      	mov	r3, r0
 8009054:	2b01      	cmp	r3, #1
 8009056:	d101      	bne.n	800905c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e01b      	b.n	8009094 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800906a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800907a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 fa93 	bl	800a5b8 <UART_CheckIdleState>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08a      	sub	sp, #40	@ 0x28
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	d17b      	bne.n	80091ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <HAL_UART_Transmit+0x26>
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e074      	b.n	80091b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2221      	movs	r2, #33	@ 0x21
 80090d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090d6:	f7f9 fca3 	bl	8002a20 <HAL_GetTick>
 80090da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	88fa      	ldrh	r2, [r7, #6]
 80090e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	88fa      	ldrh	r2, [r7, #6]
 80090e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090f4:	d108      	bne.n	8009108 <HAL_UART_Transmit+0x6c>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d104      	bne.n	8009108 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	e003      	b.n	8009110 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009110:	e030      	b.n	8009174 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2200      	movs	r2, #0
 800911a:	2180      	movs	r1, #128	@ 0x80
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f001 faf5 	bl	800a70c <UART_WaitOnFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2220      	movs	r2, #32
 800912c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e03d      	b.n	80091b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009148:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	3302      	adds	r3, #2
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	e007      	b.n	8009162 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	781a      	ldrb	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	3301      	adds	r3, #1
 8009160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1c8      	bne.n	8009112 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2200      	movs	r2, #0
 8009188:	2140      	movs	r1, #64	@ 0x40
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f001 fabe 	bl	800a70c <UART_WaitOnFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e006      	b.n	80091b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e000      	b.n	80091b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80091ae:	2302      	movs	r3, #2
  }
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3720      	adds	r7, #32
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b0ba      	sub	sp, #232	@ 0xe8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091e6:	4013      	ands	r3, r2
 80091e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d11b      	bne.n	800922c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d015      	beq.n	800922c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d105      	bne.n	8009218 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800920c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d009      	beq.n	800922c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8393 	beq.w	8009948 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
      }
      return;
 800922a:	e38d      	b.n	8009948 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800922c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8123 	beq.w	800947c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800923a:	4b8d      	ldr	r3, [pc, #564]	@ (8009470 <HAL_UART_IRQHandler+0x2b8>)
 800923c:	4013      	ands	r3, r2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009246:	4b8b      	ldr	r3, [pc, #556]	@ (8009474 <HAL_UART_IRQHandler+0x2bc>)
 8009248:	4013      	ands	r3, r2
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 8116 	beq.w	800947c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d011      	beq.n	8009280 <HAL_UART_IRQHandler+0xc8>
 800925c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2201      	movs	r2, #1
 800926e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009276:	f043 0201 	orr.w	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d011      	beq.n	80092b0 <HAL_UART_IRQHandler+0xf8>
 800928c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2202      	movs	r2, #2
 800929e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a6:	f043 0204 	orr.w	r2, r3, #4
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d011      	beq.n	80092e0 <HAL_UART_IRQHandler+0x128>
 80092bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2204      	movs	r2, #4
 80092ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d6:	f043 0202 	orr.w	r2, r3, #2
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f003 0308 	and.w	r3, r3, #8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d017      	beq.n	800931c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d105      	bne.n	8009304 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009470 <HAL_UART_IRQHandler+0x2b8>)
 80092fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2208      	movs	r2, #8
 800930a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009312:	f043 0208 	orr.w	r2, r3, #8
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800931c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009324:	2b00      	cmp	r3, #0
 8009326:	d012      	beq.n	800934e <HAL_UART_IRQHandler+0x196>
 8009328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800932c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800933c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009344:	f043 0220 	orr.w	r2, r3, #32
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 82f9 	beq.w	800994c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d013      	beq.n	800938e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d105      	bne.n	800937e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a2:	2b40      	cmp	r3, #64	@ 0x40
 80093a4:	d005      	beq.n	80093b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d054      	beq.n	800945c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fa18 	bl	800a7e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c2:	2b40      	cmp	r3, #64	@ 0x40
 80093c4:	d146      	bne.n	8009454 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800940a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1d9      	bne.n	80093c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009422:	4a15      	ldr	r2, [pc, #84]	@ (8009478 <HAL_UART_IRQHandler+0x2c0>)
 8009424:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800942c:	4618      	mov	r0, r3
 800942e:	f7fa fb05 	bl	8003a3c <HAL_DMA_Abort_IT>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d019      	beq.n	800946c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800943e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009446:	4610      	mov	r0, r2
 8009448:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944a:	e00f      	b.n	800946c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa93 	bl	8009978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009452:	e00b      	b.n	800946c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fa8f 	bl	8009978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945a:	e007      	b.n	800946c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa8b 	bl	8009978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800946a:	e26f      	b.n	800994c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800946c:	bf00      	nop
    return;
 800946e:	e26d      	b.n	800994c <HAL_UART_IRQHandler+0x794>
 8009470:	10000001 	.word	0x10000001
 8009474:	04000120 	.word	0x04000120
 8009478:	0800a8b5 	.word	0x0800a8b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009480:	2b01      	cmp	r3, #1
 8009482:	f040 8203 	bne.w	800988c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948a:	f003 0310 	and.w	r3, r3, #16
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 81fc 	beq.w	800988c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f003 0310 	and.w	r3, r3, #16
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 81f5 	beq.w	800988c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2210      	movs	r2, #16
 80094a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b4:	2b40      	cmp	r3, #64	@ 0x40
 80094b6:	f040 816d 	bne.w	8009794 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4aa4      	ldr	r2, [pc, #656]	@ (8009754 <HAL_UART_IRQHandler+0x59c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d068      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4aa1      	ldr	r2, [pc, #644]	@ (8009758 <HAL_UART_IRQHandler+0x5a0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d061      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a9f      	ldr	r2, [pc, #636]	@ (800975c <HAL_UART_IRQHandler+0x5a4>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d05a      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a9c      	ldr	r2, [pc, #624]	@ (8009760 <HAL_UART_IRQHandler+0x5a8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d053      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a9a      	ldr	r2, [pc, #616]	@ (8009764 <HAL_UART_IRQHandler+0x5ac>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d04c      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a97      	ldr	r2, [pc, #604]	@ (8009768 <HAL_UART_IRQHandler+0x5b0>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d045      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a95      	ldr	r2, [pc, #596]	@ (800976c <HAL_UART_IRQHandler+0x5b4>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d03e      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a92      	ldr	r2, [pc, #584]	@ (8009770 <HAL_UART_IRQHandler+0x5b8>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d037      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a90      	ldr	r2, [pc, #576]	@ (8009774 <HAL_UART_IRQHandler+0x5bc>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d030      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a8d      	ldr	r2, [pc, #564]	@ (8009778 <HAL_UART_IRQHandler+0x5c0>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d029      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a8b      	ldr	r2, [pc, #556]	@ (800977c <HAL_UART_IRQHandler+0x5c4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d022      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a88      	ldr	r2, [pc, #544]	@ (8009780 <HAL_UART_IRQHandler+0x5c8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d01b      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a86      	ldr	r2, [pc, #536]	@ (8009784 <HAL_UART_IRQHandler+0x5cc>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d014      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a83      	ldr	r2, [pc, #524]	@ (8009788 <HAL_UART_IRQHandler+0x5d0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00d      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a81      	ldr	r2, [pc, #516]	@ (800978c <HAL_UART_IRQHandler+0x5d4>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d006      	beq.n	800959a <HAL_UART_IRQHandler+0x3e2>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a7e      	ldr	r2, [pc, #504]	@ (8009790 <HAL_UART_IRQHandler+0x5d8>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d106      	bne.n	80095a8 <HAL_UART_IRQHandler+0x3f0>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	e005      	b.n	80095b4 <HAL_UART_IRQHandler+0x3fc>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80ad 	beq.w	800971c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095cc:	429a      	cmp	r2, r3
 80095ce:	f080 80a5 	bcs.w	800971c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095e8:	f000 8087 	beq.w	80096fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009600:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800961a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009622:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800962e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1da      	bne.n	80095ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3308      	adds	r3, #8
 8009656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800965a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800965e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009662:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800966c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e1      	bne.n	8009636 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009698:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800969c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e3      	bne.n	8009672 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c8:	f023 0310 	bic.w	r3, r3, #16
 80096cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e4      	bne.n	80096b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f9 fe83 	bl	8003400 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800970c:	b29b      	uxth	r3, r3
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	b29b      	uxth	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f939 	bl	800998c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800971a:	e119      	b.n	8009950 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009726:	429a      	cmp	r2, r3
 8009728:	f040 8112 	bne.w	8009950 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009738:	f040 810a 	bne.w	8009950 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f91e 	bl	800998c <HAL_UARTEx_RxEventCallback>
      return;
 8009750:	e0fe      	b.n	8009950 <HAL_UART_IRQHandler+0x798>
 8009752:	bf00      	nop
 8009754:	40020010 	.word	0x40020010
 8009758:	40020028 	.word	0x40020028
 800975c:	40020040 	.word	0x40020040
 8009760:	40020058 	.word	0x40020058
 8009764:	40020070 	.word	0x40020070
 8009768:	40020088 	.word	0x40020088
 800976c:	400200a0 	.word	0x400200a0
 8009770:	400200b8 	.word	0x400200b8
 8009774:	40020410 	.word	0x40020410
 8009778:	40020428 	.word	0x40020428
 800977c:	40020440 	.word	0x40020440
 8009780:	40020458 	.word	0x40020458
 8009784:	40020470 	.word	0x40020470
 8009788:	40020488 	.word	0x40020488
 800978c:	400204a0 	.word	0x400204a0
 8009790:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 80cf 	beq.w	8009954 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80097b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 80ca 	beq.w	8009954 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e4      	bne.n	80097c0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3308      	adds	r3, #8
 80097fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	623b      	str	r3, [r7, #32]
   return(result);
 8009806:	6a3a      	ldr	r2, [r7, #32]
 8009808:	4b55      	ldr	r3, [pc, #340]	@ (8009960 <HAL_UART_IRQHandler+0x7a8>)
 800980a:	4013      	ands	r3, r2
 800980c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3308      	adds	r3, #8
 8009816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800981a:	633a      	str	r2, [r7, #48]	@ 0x30
 800981c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e3      	bne.n	80097f6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2220      	movs	r2, #32
 8009832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f023 0310 	bic.w	r3, r3, #16
 8009856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	69b9      	ldr	r1, [r7, #24]
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	617b      	str	r3, [r7, #20]
   return(result);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e4      	bne.n	8009842 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800987e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f881 	bl	800998c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800988a:	e063      	b.n	8009954 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800988c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00e      	beq.n	80098b6 <HAL_UART_IRQHandler+0x6fe>
 8009898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f001 f83d 	bl	800a92e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098b4:	e051      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d014      	beq.n	80098ec <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d008      	beq.n	80098ec <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03a      	beq.n	8009958 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4798      	blx	r3
    }
    return;
 80098ea:	e035      	b.n	8009958 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d009      	beq.n	800990c <HAL_UART_IRQHandler+0x754>
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 ffe7 	bl	800a8d8 <UART_EndTransmit_IT>
    return;
 800990a:	e026      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_UART_IRQHandler+0x774>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800991c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 f816 	bl	800a956 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800992a:	e016      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d010      	beq.n	800995a <HAL_UART_IRQHandler+0x7a2>
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993c:	2b00      	cmp	r3, #0
 800993e:	da0c      	bge.n	800995a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fffe 	bl	800a942 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009946:	e008      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009948:	bf00      	nop
 800994a:	e006      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
    return;
 800994c:	bf00      	nop
 800994e:	e004      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009950:	bf00      	nop
 8009952:	e002      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009954:	bf00      	nop
 8009956:	e000      	b.n	800995a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009958:	bf00      	nop
  }
}
 800995a:	37e8      	adds	r7, #232	@ 0xe8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	effffffe 	.word	0xeffffffe

08009964 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099a8:	b092      	sub	sp, #72	@ 0x48
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	431a      	orrs	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4bbe      	ldr	r3, [pc, #760]	@ (8009ccc <UART_SetConfig+0x328>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099dc:	430b      	orrs	r3, r1
 80099de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4ab3      	ldr	r2, [pc, #716]	@ (8009cd0 <UART_SetConfig+0x32c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d004      	beq.n	8009a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	4baf      	ldr	r3, [pc, #700]	@ (8009cd4 <UART_SetConfig+0x330>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2a:	f023 010f 	bic.w	r1, r3, #15
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4aa6      	ldr	r2, [pc, #664]	@ (8009cd8 <UART_SetConfig+0x334>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d177      	bne.n	8009b34 <UART_SetConfig+0x190>
 8009a44:	4ba5      	ldr	r3, [pc, #660]	@ (8009cdc <UART_SetConfig+0x338>)
 8009a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a4c:	2b28      	cmp	r3, #40	@ 0x28
 8009a4e:	d86d      	bhi.n	8009b2c <UART_SetConfig+0x188>
 8009a50:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <UART_SetConfig+0xb4>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009afd 	.word	0x08009afd
 8009a5c:	08009b2d 	.word	0x08009b2d
 8009a60:	08009b2d 	.word	0x08009b2d
 8009a64:	08009b2d 	.word	0x08009b2d
 8009a68:	08009b2d 	.word	0x08009b2d
 8009a6c:	08009b2d 	.word	0x08009b2d
 8009a70:	08009b2d 	.word	0x08009b2d
 8009a74:	08009b2d 	.word	0x08009b2d
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009b2d 	.word	0x08009b2d
 8009a80:	08009b2d 	.word	0x08009b2d
 8009a84:	08009b2d 	.word	0x08009b2d
 8009a88:	08009b2d 	.word	0x08009b2d
 8009a8c:	08009b2d 	.word	0x08009b2d
 8009a90:	08009b2d 	.word	0x08009b2d
 8009a94:	08009b2d 	.word	0x08009b2d
 8009a98:	08009b0d 	.word	0x08009b0d
 8009a9c:	08009b2d 	.word	0x08009b2d
 8009aa0:	08009b2d 	.word	0x08009b2d
 8009aa4:	08009b2d 	.word	0x08009b2d
 8009aa8:	08009b2d 	.word	0x08009b2d
 8009aac:	08009b2d 	.word	0x08009b2d
 8009ab0:	08009b2d 	.word	0x08009b2d
 8009ab4:	08009b2d 	.word	0x08009b2d
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b2d 	.word	0x08009b2d
 8009ac0:	08009b2d 	.word	0x08009b2d
 8009ac4:	08009b2d 	.word	0x08009b2d
 8009ac8:	08009b2d 	.word	0x08009b2d
 8009acc:	08009b2d 	.word	0x08009b2d
 8009ad0:	08009b2d 	.word	0x08009b2d
 8009ad4:	08009b2d 	.word	0x08009b2d
 8009ad8:	08009b1d 	.word	0x08009b1d
 8009adc:	08009b2d 	.word	0x08009b2d
 8009ae0:	08009b2d 	.word	0x08009b2d
 8009ae4:	08009b2d 	.word	0x08009b2d
 8009ae8:	08009b2d 	.word	0x08009b2d
 8009aec:	08009b2d 	.word	0x08009b2d
 8009af0:	08009b2d 	.word	0x08009b2d
 8009af4:	08009b2d 	.word	0x08009b2d
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e222      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b04:	2304      	movs	r3, #4
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e21e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e21a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b14:	2310      	movs	r3, #16
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e216      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e212      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b24:	2340      	movs	r3, #64	@ 0x40
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e20e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b2c:	2380      	movs	r3, #128	@ 0x80
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e20a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a69      	ldr	r2, [pc, #420]	@ (8009ce0 <UART_SetConfig+0x33c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d130      	bne.n	8009ba0 <UART_SetConfig+0x1fc>
 8009b3e:	4b67      	ldr	r3, [pc, #412]	@ (8009cdc <UART_SetConfig+0x338>)
 8009b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	d826      	bhi.n	8009b98 <UART_SetConfig+0x1f4>
 8009b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <UART_SetConfig+0x1ac>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b71 	.word	0x08009b71
 8009b58:	08009b79 	.word	0x08009b79
 8009b5c:	08009b81 	.word	0x08009b81
 8009b60:	08009b89 	.word	0x08009b89
 8009b64:	08009b91 	.word	0x08009b91
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e1ec      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b70:	2304      	movs	r3, #4
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e1e8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e1e4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b80:	2310      	movs	r3, #16
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e1e0      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b88:	2320      	movs	r3, #32
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e1dc      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b90:	2340      	movs	r3, #64	@ 0x40
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e1d8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b98:	2380      	movs	r3, #128	@ 0x80
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e1d4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8009ce4 <UART_SetConfig+0x340>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d130      	bne.n	8009c0c <UART_SetConfig+0x268>
 8009baa:	4b4c      	ldr	r3, [pc, #304]	@ (8009cdc <UART_SetConfig+0x338>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d826      	bhi.n	8009c04 <UART_SetConfig+0x260>
 8009bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bbc <UART_SetConfig+0x218>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bd5 	.word	0x08009bd5
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	08009be5 	.word	0x08009be5
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bfd 	.word	0x08009bfd
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e1b6      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bdc:	2304      	movs	r3, #4
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e1b2      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009be4:	2308      	movs	r3, #8
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e1ae      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e1aa      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e1a6      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bfc:	2340      	movs	r3, #64	@ 0x40
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e1a2      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c04:	2380      	movs	r3, #128	@ 0x80
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e19e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a35      	ldr	r2, [pc, #212]	@ (8009ce8 <UART_SetConfig+0x344>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d130      	bne.n	8009c78 <UART_SetConfig+0x2d4>
 8009c16:	4b31      	ldr	r3, [pc, #196]	@ (8009cdc <UART_SetConfig+0x338>)
 8009c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d826      	bhi.n	8009c70 <UART_SetConfig+0x2cc>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <UART_SetConfig+0x284>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c41 	.word	0x08009c41
 8009c2c:	08009c49 	.word	0x08009c49
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c46:	e180      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4e:	e17c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c50:	2308      	movs	r3, #8
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c56:	e178      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5e:	e174      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c60:	2320      	movs	r3, #32
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c66:	e170      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c68:	2340      	movs	r3, #64	@ 0x40
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6e:	e16c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c70:	2380      	movs	r3, #128	@ 0x80
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c76:	e168      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009cec <UART_SetConfig+0x348>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d142      	bne.n	8009d08 <UART_SetConfig+0x364>
 8009c82:	4b16      	ldr	r3, [pc, #88]	@ (8009cdc <UART_SetConfig+0x338>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d838      	bhi.n	8009d00 <UART_SetConfig+0x35c>
 8009c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <UART_SetConfig+0x2f0>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cad 	.word	0x08009cad
 8009c98:	08009cb5 	.word	0x08009cb5
 8009c9c:	08009cbd 	.word	0x08009cbd
 8009ca0:	08009cc5 	.word	0x08009cc5
 8009ca4:	08009cf1 	.word	0x08009cf1
 8009ca8:	08009cf9 	.word	0x08009cf9
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb2:	e14a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cba:	e146      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc2:	e142      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cca:	e13e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ccc:	cfff69f3 	.word	0xcfff69f3
 8009cd0:	58000c00 	.word	0x58000c00
 8009cd4:	11fff4ff 	.word	0x11fff4ff
 8009cd8:	40011000 	.word	0x40011000
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	40004400 	.word	0x40004400
 8009ce4:	40004800 	.word	0x40004800
 8009ce8:	40004c00 	.word	0x40004c00
 8009cec:	40005000 	.word	0x40005000
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e128      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cf8:	2340      	movs	r3, #64	@ 0x40
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e124      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009d00:	2380      	movs	r3, #128	@ 0x80
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e120      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4acb      	ldr	r2, [pc, #812]	@ (800a03c <UART_SetConfig+0x698>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d176      	bne.n	8009e00 <UART_SetConfig+0x45c>
 8009d12:	4bcb      	ldr	r3, [pc, #812]	@ (800a040 <UART_SetConfig+0x69c>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d1a:	2b28      	cmp	r3, #40	@ 0x28
 8009d1c:	d86c      	bhi.n	8009df8 <UART_SetConfig+0x454>
 8009d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <UART_SetConfig+0x380>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009dc9 	.word	0x08009dc9
 8009d28:	08009df9 	.word	0x08009df9
 8009d2c:	08009df9 	.word	0x08009df9
 8009d30:	08009df9 	.word	0x08009df9
 8009d34:	08009df9 	.word	0x08009df9
 8009d38:	08009df9 	.word	0x08009df9
 8009d3c:	08009df9 	.word	0x08009df9
 8009d40:	08009df9 	.word	0x08009df9
 8009d44:	08009dd1 	.word	0x08009dd1
 8009d48:	08009df9 	.word	0x08009df9
 8009d4c:	08009df9 	.word	0x08009df9
 8009d50:	08009df9 	.word	0x08009df9
 8009d54:	08009df9 	.word	0x08009df9
 8009d58:	08009df9 	.word	0x08009df9
 8009d5c:	08009df9 	.word	0x08009df9
 8009d60:	08009df9 	.word	0x08009df9
 8009d64:	08009dd9 	.word	0x08009dd9
 8009d68:	08009df9 	.word	0x08009df9
 8009d6c:	08009df9 	.word	0x08009df9
 8009d70:	08009df9 	.word	0x08009df9
 8009d74:	08009df9 	.word	0x08009df9
 8009d78:	08009df9 	.word	0x08009df9
 8009d7c:	08009df9 	.word	0x08009df9
 8009d80:	08009df9 	.word	0x08009df9
 8009d84:	08009de1 	.word	0x08009de1
 8009d88:	08009df9 	.word	0x08009df9
 8009d8c:	08009df9 	.word	0x08009df9
 8009d90:	08009df9 	.word	0x08009df9
 8009d94:	08009df9 	.word	0x08009df9
 8009d98:	08009df9 	.word	0x08009df9
 8009d9c:	08009df9 	.word	0x08009df9
 8009da0:	08009df9 	.word	0x08009df9
 8009da4:	08009de9 	.word	0x08009de9
 8009da8:	08009df9 	.word	0x08009df9
 8009dac:	08009df9 	.word	0x08009df9
 8009db0:	08009df9 	.word	0x08009df9
 8009db4:	08009df9 	.word	0x08009df9
 8009db8:	08009df9 	.word	0x08009df9
 8009dbc:	08009df9 	.word	0x08009df9
 8009dc0:	08009df9 	.word	0x08009df9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e0bc      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e0b8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e0b4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e0b0      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e0ac      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009df0:	2340      	movs	r3, #64	@ 0x40
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e0a8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009df8:	2380      	movs	r3, #128	@ 0x80
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e0a4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a8f      	ldr	r2, [pc, #572]	@ (800a044 <UART_SetConfig+0x6a0>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d130      	bne.n	8009e6c <UART_SetConfig+0x4c8>
 8009e0a:	4b8d      	ldr	r3, [pc, #564]	@ (800a040 <UART_SetConfig+0x69c>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d826      	bhi.n	8009e64 <UART_SetConfig+0x4c0>
 8009e16:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <UART_SetConfig+0x478>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e086      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e082      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e44:	2308      	movs	r3, #8
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e07e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e07a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e54:	2320      	movs	r3, #32
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e076      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e5c:	2340      	movs	r3, #64	@ 0x40
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e072      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e64:	2380      	movs	r3, #128	@ 0x80
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e06e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a75      	ldr	r2, [pc, #468]	@ (800a048 <UART_SetConfig+0x6a4>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d130      	bne.n	8009ed8 <UART_SetConfig+0x534>
 8009e76:	4b72      	ldr	r3, [pc, #456]	@ (800a040 <UART_SetConfig+0x69c>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d826      	bhi.n	8009ed0 <UART_SetConfig+0x52c>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <UART_SetConfig+0x4e4>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009ea9 	.word	0x08009ea9
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e050      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e04c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e048      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e044      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e040      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ec8:	2340      	movs	r3, #64	@ 0x40
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e03c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e038      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a5b      	ldr	r2, [pc, #364]	@ (800a04c <UART_SetConfig+0x6a8>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d130      	bne.n	8009f44 <UART_SetConfig+0x5a0>
 8009ee2:	4b57      	ldr	r3, [pc, #348]	@ (800a040 <UART_SetConfig+0x69c>)
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d826      	bhi.n	8009f3c <UART_SetConfig+0x598>
 8009eee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <UART_SetConfig+0x550>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f15 	.word	0x08009f15
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	08009f2d 	.word	0x08009f2d
 8009f08:	08009f35 	.word	0x08009f35
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e01a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e016      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e012      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e00e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f32:	e00a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f34:	2340      	movs	r3, #64	@ 0x40
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3a:	e006      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f3c:	2380      	movs	r3, #128	@ 0x80
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f42:	e002      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f44:	2380      	movs	r3, #128	@ 0x80
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800a04c <UART_SetConfig+0x6a8>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	f040 80f8 	bne.w	800a146 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	dc46      	bgt.n	8009fec <UART_SetConfig+0x648>
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	f2c0 8082 	blt.w	800a068 <UART_SetConfig+0x6c4>
 8009f64:	3b02      	subs	r3, #2
 8009f66:	2b1e      	cmp	r3, #30
 8009f68:	d87e      	bhi.n	800a068 <UART_SetConfig+0x6c4>
 8009f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f70 <UART_SetConfig+0x5cc>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009ff3 	.word	0x08009ff3
 8009f74:	0800a069 	.word	0x0800a069
 8009f78:	08009ffb 	.word	0x08009ffb
 8009f7c:	0800a069 	.word	0x0800a069
 8009f80:	0800a069 	.word	0x0800a069
 8009f84:	0800a069 	.word	0x0800a069
 8009f88:	0800a00b 	.word	0x0800a00b
 8009f8c:	0800a069 	.word	0x0800a069
 8009f90:	0800a069 	.word	0x0800a069
 8009f94:	0800a069 	.word	0x0800a069
 8009f98:	0800a069 	.word	0x0800a069
 8009f9c:	0800a069 	.word	0x0800a069
 8009fa0:	0800a069 	.word	0x0800a069
 8009fa4:	0800a069 	.word	0x0800a069
 8009fa8:	0800a01b 	.word	0x0800a01b
 8009fac:	0800a069 	.word	0x0800a069
 8009fb0:	0800a069 	.word	0x0800a069
 8009fb4:	0800a069 	.word	0x0800a069
 8009fb8:	0800a069 	.word	0x0800a069
 8009fbc:	0800a069 	.word	0x0800a069
 8009fc0:	0800a069 	.word	0x0800a069
 8009fc4:	0800a069 	.word	0x0800a069
 8009fc8:	0800a069 	.word	0x0800a069
 8009fcc:	0800a069 	.word	0x0800a069
 8009fd0:	0800a069 	.word	0x0800a069
 8009fd4:	0800a069 	.word	0x0800a069
 8009fd8:	0800a069 	.word	0x0800a069
 8009fdc:	0800a069 	.word	0x0800a069
 8009fe0:	0800a069 	.word	0x0800a069
 8009fe4:	0800a069 	.word	0x0800a069
 8009fe8:	0800a05b 	.word	0x0800a05b
 8009fec:	2b40      	cmp	r3, #64	@ 0x40
 8009fee:	d037      	beq.n	800a060 <UART_SetConfig+0x6bc>
 8009ff0:	e03a      	b.n	800a068 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ff2:	f7fd fd1f 	bl	8007a34 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ff8:	e03c      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fd fd2e 	bl	8007a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	e034      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a00a:	f107 0318 	add.w	r3, r7, #24
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd fe7a 	bl	8007d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a018:	e02c      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a01a:	4b09      	ldr	r3, [pc, #36]	@ (800a040 <UART_SetConfig+0x69c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d016      	beq.n	800a054 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a026:	4b06      	ldr	r3, [pc, #24]	@ (800a040 <UART_SetConfig+0x69c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	08db      	lsrs	r3, r3, #3
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	4a07      	ldr	r2, [pc, #28]	@ (800a050 <UART_SetConfig+0x6ac>)
 800a032:	fa22 f303 	lsr.w	r3, r2, r3
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a038:	e01c      	b.n	800a074 <UART_SetConfig+0x6d0>
 800a03a:	bf00      	nop
 800a03c:	40011400 	.word	0x40011400
 800a040:	58024400 	.word	0x58024400
 800a044:	40007800 	.word	0x40007800
 800a048:	40007c00 	.word	0x40007c00
 800a04c:	58000c00 	.word	0x58000c00
 800a050:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a054:	4b9d      	ldr	r3, [pc, #628]	@ (800a2cc <UART_SetConfig+0x928>)
 800a056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a058:	e00c      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a05a:	4b9d      	ldr	r3, [pc, #628]	@ (800a2d0 <UART_SetConfig+0x92c>)
 800a05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a05e:	e009      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a066:	e005      	b.n	800a074 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a072:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 81de 	beq.w	800a438 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a080:	4a94      	ldr	r2, [pc, #592]	@ (800a2d4 <UART_SetConfig+0x930>)
 800a082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a086:	461a      	mov	r2, r3
 800a088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a08e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	4613      	mov	r3, r2
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4413      	add	r3, r2
 800a09a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d305      	bcc.n	800a0ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d903      	bls.n	800a0b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0b2:	e1c1      	b.n	800a438 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	60bb      	str	r3, [r7, #8]
 800a0ba:	60fa      	str	r2, [r7, #12]
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c0:	4a84      	ldr	r2, [pc, #528]	@ (800a2d4 <UART_SetConfig+0x930>)
 800a0c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	607a      	str	r2, [r7, #4]
 800a0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0d6:	f7f6 fb17 	bl	8000708 <__aeabi_uldivmod>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	020b      	lsls	r3, r1, #8
 800a0ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0f0:	0202      	lsls	r2, r0, #8
 800a0f2:	6979      	ldr	r1, [r7, #20]
 800a0f4:	6849      	ldr	r1, [r1, #4]
 800a0f6:	0849      	lsrs	r1, r1, #1
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	eb12 0804 	adds.w	r8, r2, r4
 800a102:	eb43 0905 	adc.w	r9, r3, r5
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	469a      	mov	sl, r3
 800a10e:	4693      	mov	fp, r2
 800a110:	4652      	mov	r2, sl
 800a112:	465b      	mov	r3, fp
 800a114:	4640      	mov	r0, r8
 800a116:	4649      	mov	r1, r9
 800a118:	f7f6 faf6 	bl	8000708 <__aeabi_uldivmod>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4613      	mov	r3, r2
 800a122:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a12a:	d308      	bcc.n	800a13e <UART_SetConfig+0x79a>
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a132:	d204      	bcs.n	800a13e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a13a:	60da      	str	r2, [r3, #12]
 800a13c:	e17c      	b.n	800a438 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a144:	e178      	b.n	800a438 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a14e:	f040 80c5 	bne.w	800a2dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a152:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a156:	2b20      	cmp	r3, #32
 800a158:	dc48      	bgt.n	800a1ec <UART_SetConfig+0x848>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	db7b      	blt.n	800a256 <UART_SetConfig+0x8b2>
 800a15e:	2b20      	cmp	r3, #32
 800a160:	d879      	bhi.n	800a256 <UART_SetConfig+0x8b2>
 800a162:	a201      	add	r2, pc, #4	@ (adr r2, 800a168 <UART_SetConfig+0x7c4>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a1fb 	.word	0x0800a1fb
 800a170:	0800a257 	.word	0x0800a257
 800a174:	0800a257 	.word	0x0800a257
 800a178:	0800a203 	.word	0x0800a203
 800a17c:	0800a257 	.word	0x0800a257
 800a180:	0800a257 	.word	0x0800a257
 800a184:	0800a257 	.word	0x0800a257
 800a188:	0800a213 	.word	0x0800a213
 800a18c:	0800a257 	.word	0x0800a257
 800a190:	0800a257 	.word	0x0800a257
 800a194:	0800a257 	.word	0x0800a257
 800a198:	0800a257 	.word	0x0800a257
 800a19c:	0800a257 	.word	0x0800a257
 800a1a0:	0800a257 	.word	0x0800a257
 800a1a4:	0800a257 	.word	0x0800a257
 800a1a8:	0800a223 	.word	0x0800a223
 800a1ac:	0800a257 	.word	0x0800a257
 800a1b0:	0800a257 	.word	0x0800a257
 800a1b4:	0800a257 	.word	0x0800a257
 800a1b8:	0800a257 	.word	0x0800a257
 800a1bc:	0800a257 	.word	0x0800a257
 800a1c0:	0800a257 	.word	0x0800a257
 800a1c4:	0800a257 	.word	0x0800a257
 800a1c8:	0800a257 	.word	0x0800a257
 800a1cc:	0800a257 	.word	0x0800a257
 800a1d0:	0800a257 	.word	0x0800a257
 800a1d4:	0800a257 	.word	0x0800a257
 800a1d8:	0800a257 	.word	0x0800a257
 800a1dc:	0800a257 	.word	0x0800a257
 800a1e0:	0800a257 	.word	0x0800a257
 800a1e4:	0800a257 	.word	0x0800a257
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	2b40      	cmp	r3, #64	@ 0x40
 800a1ee:	d02e      	beq.n	800a24e <UART_SetConfig+0x8aa>
 800a1f0:	e031      	b.n	800a256 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f2:	f7fc f9a7 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 800a1f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a1f8:	e033      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1fa:	f7fc f9b9 	bl	8006570 <HAL_RCC_GetPCLK2Freq>
 800a1fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a200:	e02f      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f7fd fc2a 	bl	8007a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a210:	e027      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	4618      	mov	r0, r3
 800a218:	f7fd fd76 	bl	8007d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a220:	e01f      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a222:	4b2d      	ldr	r3, [pc, #180]	@ (800a2d8 <UART_SetConfig+0x934>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a22e:	4b2a      	ldr	r3, [pc, #168]	@ (800a2d8 <UART_SetConfig+0x934>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	4a24      	ldr	r2, [pc, #144]	@ (800a2cc <UART_SetConfig+0x928>)
 800a23a:	fa22 f303 	lsr.w	r3, r2, r3
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a240:	e00f      	b.n	800a262 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a242:	4b22      	ldr	r3, [pc, #136]	@ (800a2cc <UART_SetConfig+0x928>)
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a246:	e00c      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a248:	4b21      	ldr	r3, [pc, #132]	@ (800a2d0 <UART_SetConfig+0x92c>)
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a24c:	e009      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a254:	e005      	b.n	800a262 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80e7 	beq.w	800a438 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26e:	4a19      	ldr	r2, [pc, #100]	@ (800a2d4 <UART_SetConfig+0x930>)
 800a270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a274:	461a      	mov	r2, r3
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	005a      	lsls	r2, r3, #1
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d916      	bls.n	800a2c4 <UART_SetConfig+0x920>
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a29c:	d212      	bcs.n	800a2c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f023 030f 	bic.w	r3, r3, #15
 800a2a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	e0b9      	b.n	800a438 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a2ca:	e0b5      	b.n	800a438 <UART_SetConfig+0xa94>
 800a2cc:	03d09000 	.word	0x03d09000
 800a2d0:	003d0900 	.word	0x003d0900
 800a2d4:	08012a68 	.word	0x08012a68
 800a2d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	dc49      	bgt.n	800a378 <UART_SetConfig+0x9d4>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	db7c      	blt.n	800a3e2 <UART_SetConfig+0xa3e>
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d87a      	bhi.n	800a3e2 <UART_SetConfig+0xa3e>
 800a2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <UART_SetConfig+0x950>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a387 	.word	0x0800a387
 800a2fc:	0800a3e3 	.word	0x0800a3e3
 800a300:	0800a3e3 	.word	0x0800a3e3
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a3e3 	.word	0x0800a3e3
 800a30c:	0800a3e3 	.word	0x0800a3e3
 800a310:	0800a3e3 	.word	0x0800a3e3
 800a314:	0800a39f 	.word	0x0800a39f
 800a318:	0800a3e3 	.word	0x0800a3e3
 800a31c:	0800a3e3 	.word	0x0800a3e3
 800a320:	0800a3e3 	.word	0x0800a3e3
 800a324:	0800a3e3 	.word	0x0800a3e3
 800a328:	0800a3e3 	.word	0x0800a3e3
 800a32c:	0800a3e3 	.word	0x0800a3e3
 800a330:	0800a3e3 	.word	0x0800a3e3
 800a334:	0800a3af 	.word	0x0800a3af
 800a338:	0800a3e3 	.word	0x0800a3e3
 800a33c:	0800a3e3 	.word	0x0800a3e3
 800a340:	0800a3e3 	.word	0x0800a3e3
 800a344:	0800a3e3 	.word	0x0800a3e3
 800a348:	0800a3e3 	.word	0x0800a3e3
 800a34c:	0800a3e3 	.word	0x0800a3e3
 800a350:	0800a3e3 	.word	0x0800a3e3
 800a354:	0800a3e3 	.word	0x0800a3e3
 800a358:	0800a3e3 	.word	0x0800a3e3
 800a35c:	0800a3e3 	.word	0x0800a3e3
 800a360:	0800a3e3 	.word	0x0800a3e3
 800a364:	0800a3e3 	.word	0x0800a3e3
 800a368:	0800a3e3 	.word	0x0800a3e3
 800a36c:	0800a3e3 	.word	0x0800a3e3
 800a370:	0800a3e3 	.word	0x0800a3e3
 800a374:	0800a3d5 	.word	0x0800a3d5
 800a378:	2b40      	cmp	r3, #64	@ 0x40
 800a37a:	d02e      	beq.n	800a3da <UART_SetConfig+0xa36>
 800a37c:	e031      	b.n	800a3e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a37e:	f7fc f8e1 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 800a382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a384:	e033      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a386:	f7fc f8f3 	bl	8006570 <HAL_RCC_GetPCLK2Freq>
 800a38a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a38c:	e02f      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a38e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd fb64 	bl	8007a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a39c:	e027      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a39e:	f107 0318 	add.w	r3, r7, #24
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fd fcb0 	bl	8007d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ac:	e01f      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ae:	4b2d      	ldr	r3, [pc, #180]	@ (800a464 <UART_SetConfig+0xac0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a464 <UART_SetConfig+0xac0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	4a28      	ldr	r2, [pc, #160]	@ (800a468 <UART_SetConfig+0xac4>)
 800a3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3cc:	e00f      	b.n	800a3ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3ce:	4b26      	ldr	r3, [pc, #152]	@ (800a468 <UART_SetConfig+0xac4>)
 800a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d2:	e00c      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3d4:	4b25      	ldr	r3, [pc, #148]	@ (800a46c <UART_SetConfig+0xac8>)
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d8:	e009      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e0:	e005      	b.n	800a3ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a3ec:	bf00      	nop
    }

    if (pclk != 0U)
 800a3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d021      	beq.n	800a438 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a470 <UART_SetConfig+0xacc>)
 800a3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3fe:	461a      	mov	r2, r3
 800a400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a402:	fbb3 f2f2 	udiv	r2, r3, r2
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	441a      	add	r2, r3
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	fbb2 f3f3 	udiv	r3, r2, r3
 800a416:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	2b0f      	cmp	r3, #15
 800a41c:	d909      	bls.n	800a432 <UART_SetConfig+0xa8e>
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a424:	d205      	bcs.n	800a432 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	b29a      	uxth	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60da      	str	r2, [r3, #12]
 800a430:	e002      	b.n	800a438 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2201      	movs	r2, #1
 800a444:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2200      	movs	r2, #0
 800a452:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a454:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3748      	adds	r7, #72	@ 0x48
 800a45c:	46bd      	mov	sp, r7
 800a45e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a462:	bf00      	nop
 800a464:	58024400 	.word	0x58024400
 800a468:	03d09000 	.word	0x03d09000
 800a46c:	003d0900 	.word	0x003d0900
 800a470:	08012a68 	.word	0x08012a68

0800a474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00a      	beq.n	800a49e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e6:	f003 0304 	and.w	r3, r3, #4
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00a      	beq.n	800a526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01a      	beq.n	800a58a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a572:	d10a      	bne.n	800a58a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	605a      	str	r2, [r3, #4]
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b098      	sub	sp, #96	@ 0x60
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5c8:	f7f8 fa2a 	bl	8002a20 <HAL_GetTick>
 800a5cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0308 	and.w	r3, r3, #8
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	d12f      	bne.n	800a63c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f88e 	bl	800a70c <UART_WaitOnFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d022      	beq.n	800a63c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	e853 3f00 	ldrex	r3, [r3]
 800a602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a60a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a614:	647b      	str	r3, [r7, #68]	@ 0x44
 800a616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a61a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e6      	bne.n	800a5f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2220      	movs	r2, #32
 800a62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e063      	b.n	800a704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	2b04      	cmp	r3, #4
 800a648:	d149      	bne.n	800a6de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a64a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a652:	2200      	movs	r2, #0
 800a654:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f857 	bl	800a70c <UART_WaitOnFlagUntilTimeout>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d03c      	beq.n	800a6de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	e853 3f00 	ldrex	r3, [r3]
 800a670:	623b      	str	r3, [r7, #32]
   return(result);
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	461a      	mov	r2, r3
 800a680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a682:	633b      	str	r3, [r7, #48]	@ 0x30
 800a684:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a68a:	e841 2300 	strex	r3, r2, [r1]
 800a68e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1e6      	bne.n	800a664 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3308      	adds	r3, #8
 800a69c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	e853 3f00 	ldrex	r3, [r3]
 800a6a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 0301 	bic.w	r3, r3, #1
 800a6ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6b6:	61fa      	str	r2, [r7, #28]
 800a6b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	69b9      	ldr	r1, [r7, #24]
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e5      	bne.n	800a696 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e012      	b.n	800a704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3758      	adds	r7, #88	@ 0x58
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	4613      	mov	r3, r2
 800a71a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a71c:	e04f      	b.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d04b      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a726:	f7f8 f97b 	bl	8002a20 <HAL_GetTick>
 800a72a:	4602      	mov	r2, r0
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	429a      	cmp	r2, r3
 800a734:	d302      	bcc.n	800a73c <UART_WaitOnFlagUntilTimeout+0x30>
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e04e      	b.n	800a7de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d037      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb2>
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b80      	cmp	r3, #128	@ 0x80
 800a752:	d034      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb2>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b40      	cmp	r3, #64	@ 0x40
 800a758:	d031      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f003 0308 	and.w	r3, r3, #8
 800a764:	2b08      	cmp	r3, #8
 800a766:	d110      	bne.n	800a78a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2208      	movs	r2, #8
 800a76e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f839 	bl	800a7e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2208      	movs	r2, #8
 800a77a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e029      	b.n	800a7de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a798:	d111      	bne.n	800a7be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 f81f 	bl	800a7e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e00f      	b.n	800a7de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	bf0c      	ite	eq
 800a7ce:	2301      	moveq	r3, #1
 800a7d0:	2300      	movne	r3, #0
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d0a0      	beq.n	800a71e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
	...

0800a7e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b095      	sub	sp, #84	@ 0x54
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a80e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a810:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e6      	bne.n	800a7f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	e853 3f00 	ldrex	r3, [r3]
 800a830:	61fb      	str	r3, [r7, #28]
   return(result);
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b0 <UART_EndRxTransfer+0xc8>)
 800a836:	4013      	ands	r3, r2
 800a838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3308      	adds	r3, #8
 800a840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a84a:	e841 2300 	strex	r3, r2, [r1]
 800a84e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e5      	bne.n	800a822 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d118      	bne.n	800a890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f023 0310 	bic.w	r3, r3, #16
 800a872:	647b      	str	r3, [r7, #68]	@ 0x44
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	461a      	mov	r2, r3
 800a87a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a87c:	61bb      	str	r3, [r7, #24]
 800a87e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	6979      	ldr	r1, [r7, #20]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	613b      	str	r3, [r7, #16]
   return(result);
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e6      	bne.n	800a85e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2220      	movs	r2, #32
 800a894:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8a4:	bf00      	nop
 800a8a6:	3754      	adds	r7, #84	@ 0x54
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	effffffe 	.word	0xeffffffe

0800a8b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff f854 	bl	8009978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d0:	bf00      	nop
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8f4:	61fb      	str	r3, [r7, #28]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	61bb      	str	r3, [r7, #24]
 800a900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	6979      	ldr	r1, [r7, #20]
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	613b      	str	r3, [r7, #16]
   return(result);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e6      	bne.n	800a8e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff f81f 	bl	8009964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a926:	bf00      	nop
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a94a:	bf00      	nop
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d101      	bne.n	800a980 <HAL_UARTEx_DisableFifoMode+0x16>
 800a97c:	2302      	movs	r3, #2
 800a97e:	e027      	b.n	800a9d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2224      	movs	r2, #36	@ 0x24
 800a98c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 0201 	bic.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a9ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d101      	bne.n	800a9f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e02d      	b.n	800aa50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2224      	movs	r2, #36	@ 0x24
 800aa00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0201 	bic.w	r2, r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f84f 	bl	800aad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2220      	movs	r2, #32
 800aa42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e02d      	b.n	800aacc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2224      	movs	r2, #36	@ 0x24
 800aa7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 0201 	bic.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f811 	bl	800aad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d108      	bne.n	800aaf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aaf4:	e031      	b.n	800ab5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aaf6:	2310      	movs	r3, #16
 800aaf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aafa:	2310      	movs	r3, #16
 800aafc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	0e5b      	lsrs	r3, r3, #25
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	0f5b      	lsrs	r3, r3, #29
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	7b3a      	ldrb	r2, [r7, #12]
 800ab22:	4911      	ldr	r1, [pc, #68]	@ (800ab68 <UARTEx_SetNbDataToProcess+0x94>)
 800ab24:	5c8a      	ldrb	r2, [r1, r2]
 800ab26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab2a:	7b3a      	ldrb	r2, [r7, #12]
 800ab2c:	490f      	ldr	r1, [pc, #60]	@ (800ab6c <UARTEx_SetNbDataToProcess+0x98>)
 800ab2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	7b7a      	ldrb	r2, [r7, #13]
 800ab40:	4909      	ldr	r1, [pc, #36]	@ (800ab68 <UARTEx_SetNbDataToProcess+0x94>)
 800ab42:	5c8a      	ldrb	r2, [r1, r2]
 800ab44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab48:	7b7a      	ldrb	r2, [r7, #13]
 800ab4a:	4908      	ldr	r1, [pc, #32]	@ (800ab6c <UARTEx_SetNbDataToProcess+0x98>)
 800ab4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	08012a80 	.word	0x08012a80
 800ab6c:	08012a88 	.word	0x08012a88

0800ab70 <__NVIC_SetPriority>:
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	6039      	str	r1, [r7, #0]
 800ab7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ab7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	db0a      	blt.n	800ab9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	490c      	ldr	r1, [pc, #48]	@ (800abbc <__NVIC_SetPriority+0x4c>)
 800ab8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab8e:	0112      	lsls	r2, r2, #4
 800ab90:	b2d2      	uxtb	r2, r2
 800ab92:	440b      	add	r3, r1
 800ab94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ab98:	e00a      	b.n	800abb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	4908      	ldr	r1, [pc, #32]	@ (800abc0 <__NVIC_SetPriority+0x50>)
 800aba0:	88fb      	ldrh	r3, [r7, #6]
 800aba2:	f003 030f 	and.w	r3, r3, #15
 800aba6:	3b04      	subs	r3, #4
 800aba8:	0112      	lsls	r2, r2, #4
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	440b      	add	r3, r1
 800abae:	761a      	strb	r2, [r3, #24]
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	e000e100 	.word	0xe000e100
 800abc0:	e000ed00 	.word	0xe000ed00

0800abc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800abc8:	4b05      	ldr	r3, [pc, #20]	@ (800abe0 <SysTick_Handler+0x1c>)
 800abca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800abcc:	f001 fea6 	bl	800c91c <xTaskGetSchedulerState>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d001      	beq.n	800abda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800abd6:	f002 fc9f 	bl	800d518 <xPortSysTickHandler>
  }
}
 800abda:	bf00      	nop
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	e000e010 	.word	0xe000e010

0800abe4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800abe8:	2100      	movs	r1, #0
 800abea:	f06f 0004 	mvn.w	r0, #4
 800abee:	f7ff ffbf 	bl	800ab70 <__NVIC_SetPriority>
#endif
}
 800abf2:	bf00      	nop
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abfe:	f3ef 8305 	mrs	r3, IPSR
 800ac02:	603b      	str	r3, [r7, #0]
  return(result);
 800ac04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac0a:	f06f 0305 	mvn.w	r3, #5
 800ac0e:	607b      	str	r3, [r7, #4]
 800ac10:	e00c      	b.n	800ac2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac12:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <osKernelInitialize+0x44>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d105      	bne.n	800ac26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac1a:	4b08      	ldr	r3, [pc, #32]	@ (800ac3c <osKernelInitialize+0x44>)
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	607b      	str	r3, [r7, #4]
 800ac24:	e002      	b.n	800ac2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac26:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac2c:	687b      	ldr	r3, [r7, #4]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	24000474 	.word	0x24000474

0800ac40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac46:	f3ef 8305 	mrs	r3, IPSR
 800ac4a:	603b      	str	r3, [r7, #0]
  return(result);
 800ac4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ac52:	f06f 0305 	mvn.w	r3, #5
 800ac56:	607b      	str	r3, [r7, #4]
 800ac58:	e010      	b.n	800ac7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ac5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac88 <osKernelStart+0x48>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d109      	bne.n	800ac76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac62:	f7ff ffbf 	bl	800abe4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac66:	4b08      	ldr	r3, [pc, #32]	@ (800ac88 <osKernelStart+0x48>)
 800ac68:	2202      	movs	r2, #2
 800ac6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac6c:	f001 fa08 	bl	800c080 <vTaskStartScheduler>
      stat = osOK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	607b      	str	r3, [r7, #4]
 800ac74:	e002      	b.n	800ac7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac7c:	687b      	ldr	r3, [r7, #4]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	24000474 	.word	0x24000474

0800ac8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08e      	sub	sp, #56	@ 0x38
 800ac90:	af04      	add	r7, sp, #16
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac9c:	f3ef 8305 	mrs	r3, IPSR
 800aca0:	617b      	str	r3, [r7, #20]
  return(result);
 800aca2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d17e      	bne.n	800ada6 <osThreadNew+0x11a>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d07b      	beq.n	800ada6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800acae:	2380      	movs	r3, #128	@ 0x80
 800acb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800acb2:	2318      	movs	r3, #24
 800acb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d045      	beq.n	800ad52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <osThreadNew+0x48>
        name = attr->name;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d008      	beq.n	800acfa <osThreadNew+0x6e>
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b38      	cmp	r3, #56	@ 0x38
 800acec:	d805      	bhi.n	800acfa <osThreadNew+0x6e>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <osThreadNew+0x72>
        return (NULL);
 800acfa:	2300      	movs	r3, #0
 800acfc:	e054      	b.n	800ada8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	089b      	lsrs	r3, r3, #2
 800ad0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00e      	beq.n	800ad34 <osThreadNew+0xa8>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	2b5b      	cmp	r3, #91	@ 0x5b
 800ad1c:	d90a      	bls.n	800ad34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d006      	beq.n	800ad34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <osThreadNew+0xa8>
        mem = 1;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	e010      	b.n	800ad56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10c      	bne.n	800ad56 <osThreadNew+0xca>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d108      	bne.n	800ad56 <osThreadNew+0xca>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d104      	bne.n	800ad56 <osThreadNew+0xca>
          mem = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61bb      	str	r3, [r7, #24]
 800ad50:	e001      	b.n	800ad56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d110      	bne.n	800ad7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad64:	9202      	str	r2, [sp, #8]
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	6a3a      	ldr	r2, [r7, #32]
 800ad70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 ffa8 	bl	800bcc8 <xTaskCreateStatic>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	e013      	b.n	800ada6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d110      	bne.n	800ada6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	f107 0310 	add.w	r3, r7, #16
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fff6 	bl	800bd88 <xTaskCreate>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d001      	beq.n	800ada6 <osThreadNew+0x11a>
            hTask = NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ada6:	693b      	ldr	r3, [r7, #16]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3728      	adds	r7, #40	@ 0x28
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adb8:	f3ef 8305 	mrs	r3, IPSR
 800adbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800adbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <osDelay+0x1c>
    stat = osErrorISR;
 800adc4:	f06f 0305 	mvn.w	r3, #5
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	e007      	b.n	800addc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800adcc:	2300      	movs	r3, #0
 800adce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <osDelay+0x2c>
      vTaskDelay(ticks);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 f91c 	bl	800c014 <vTaskDelay>
    }
  }

  return (stat);
 800addc:	68fb      	ldr	r3, [r7, #12]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b08a      	sub	sp, #40	@ 0x28
 800adea:	af02      	add	r7, sp, #8
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf6:	f3ef 8305 	mrs	r3, IPSR
 800adfa:	613b      	str	r3, [r7, #16]
  return(result);
 800adfc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d15f      	bne.n	800aec2 <osMessageQueueNew+0xdc>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d05c      	beq.n	800aec2 <osMessageQueueNew+0xdc>
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d059      	beq.n	800aec2 <osMessageQueueNew+0xdc>
    mem = -1;
 800ae0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d029      	beq.n	800ae6e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d012      	beq.n	800ae48 <osMessageQueueNew+0x62>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	2b4f      	cmp	r3, #79	@ 0x4f
 800ae28:	d90e      	bls.n	800ae48 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	695a      	ldr	r2, [r3, #20]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	fb01 f303 	mul.w	r3, r1, r3
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d302      	bcc.n	800ae48 <osMessageQueueNew+0x62>
        mem = 1;
 800ae42:	2301      	movs	r3, #1
 800ae44:	61bb      	str	r3, [r7, #24]
 800ae46:	e014      	b.n	800ae72 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d110      	bne.n	800ae72 <osMessageQueueNew+0x8c>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10c      	bne.n	800ae72 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d108      	bne.n	800ae72 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d104      	bne.n	800ae72 <osMessageQueueNew+0x8c>
          mem = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	e001      	b.n	800ae72 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10b      	bne.n	800ae90 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	691a      	ldr	r2, [r3, #16]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	2100      	movs	r1, #0
 800ae82:	9100      	str	r1, [sp, #0]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 f9d0 	bl	800b22c <xQueueGenericCreateStatic>
 800ae8c:	61f8      	str	r0, [r7, #28]
 800ae8e:	e008      	b.n	800aea2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d105      	bne.n	800aea2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ae96:	2200      	movs	r2, #0
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 fa43 	bl	800b326 <xQueueGenericCreate>
 800aea0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00c      	beq.n	800aec2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e001      	b.n	800aeba <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800aeba:	6979      	ldr	r1, [r7, #20]
 800aebc:	69f8      	ldr	r0, [r7, #28]
 800aebe:	f000 fea5 	bl	800bc0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800aec2:	69fb      	ldr	r3, [r7, #28]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aede:	2300      	movs	r3, #0
 800aee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aee2:	f3ef 8305 	mrs	r3, IPSR
 800aee6:	617b      	str	r3, [r7, #20]
  return(result);
 800aee8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d028      	beq.n	800af40 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <osMessageQueueGet+0x34>
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <osMessageQueueGet+0x34>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800af00:	f06f 0303 	mvn.w	r3, #3
 800af04:	61fb      	str	r3, [r7, #28]
 800af06:	e037      	b.n	800af78 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800af08:	2300      	movs	r3, #0
 800af0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800af0c:	f107 0310 	add.w	r3, r7, #16
 800af10:	461a      	mov	r2, r3
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	69b8      	ldr	r0, [r7, #24]
 800af16:	f000 fce7 	bl	800b8e8 <xQueueReceiveFromISR>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d003      	beq.n	800af28 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800af20:	f06f 0302 	mvn.w	r3, #2
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	e027      	b.n	800af78 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d024      	beq.n	800af78 <osMessageQueueGet+0xac>
 800af2e:	4b15      	ldr	r3, [pc, #84]	@ (800af84 <osMessageQueueGet+0xb8>)
 800af30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	e01b      	b.n	800af78 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <osMessageQueueGet+0x80>
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d103      	bne.n	800af54 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800af4c:	f06f 0303 	mvn.w	r3, #3
 800af50:	61fb      	str	r3, [r7, #28]
 800af52:	e011      	b.n	800af78 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	68b9      	ldr	r1, [r7, #8]
 800af58:	69b8      	ldr	r0, [r7, #24]
 800af5a:	f000 fbe3 	bl	800b724 <xQueueReceive>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b01      	cmp	r3, #1
 800af62:	d009      	beq.n	800af78 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800af6a:	f06f 0301 	mvn.w	r3, #1
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	e002      	b.n	800af78 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800af72:	f06f 0302 	mvn.w	r3, #2
 800af76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800af78:	69fb      	ldr	r3, [r7, #28]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3720      	adds	r7, #32
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4a07      	ldr	r2, [pc, #28]	@ (800afb4 <vApplicationGetIdleTaskMemory+0x2c>)
 800af98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	4a06      	ldr	r2, [pc, #24]	@ (800afb8 <vApplicationGetIdleTaskMemory+0x30>)
 800af9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2280      	movs	r2, #128	@ 0x80
 800afa4:	601a      	str	r2, [r3, #0]
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	24000478 	.word	0x24000478
 800afb8:	240004d4 	.word	0x240004d4

0800afbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4a07      	ldr	r2, [pc, #28]	@ (800afe8 <vApplicationGetTimerTaskMemory+0x2c>)
 800afcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	4a06      	ldr	r2, [pc, #24]	@ (800afec <vApplicationGetTimerTaskMemory+0x30>)
 800afd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afda:	601a      	str	r2, [r3, #0]
}
 800afdc:	bf00      	nop
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	240006d4 	.word	0x240006d4
 800afec:	24000730 	.word	0x24000730

0800aff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f103 0208 	add.w	r2, r3, #8
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f103 0208 	add.w	r2, r3, #8
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f103 0208 	add.w	r2, r3, #8
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b04a:	b480      	push	{r7}
 800b04c:	b085      	sub	sp, #20
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	601a      	str	r2, [r3, #0]
}
 800b086:	bf00      	nop
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b092:	b480      	push	{r7}
 800b094:	b085      	sub	sp, #20
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a8:	d103      	bne.n	800b0b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e00c      	b.n	800b0cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	e002      	b.n	800b0c0 <vListInsert+0x2e>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d2f6      	bcs.n	800b0ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	601a      	str	r2, [r3, #0]
}
 800b0f8:	bf00      	nop
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6892      	ldr	r2, [r2, #8]
 800b11a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6852      	ldr	r2, [r2, #4]
 800b124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d103      	bne.n	800b138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	689a      	ldr	r2, [r3, #8]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	1e5a      	subs	r2, r3, #1
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	e7fd      	b.n	800b180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b184:	f002 f938 	bl	800d3f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b190:	68f9      	ldr	r1, [r7, #12]
 800b192:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b194:	fb01 f303 	mul.w	r3, r1, r3
 800b198:	441a      	add	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	68f9      	ldr	r1, [r7, #12]
 800b1b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1ba:	fb01 f303 	mul.w	r3, r1, r3
 800b1be:	441a      	add	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	22ff      	movs	r2, #255	@ 0xff
 800b1c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	22ff      	movs	r2, #255	@ 0xff
 800b1d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d114      	bne.n	800b204 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01a      	beq.n	800b218 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3310      	adds	r3, #16
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f001 f9d8 	bl	800c59c <xTaskRemoveFromEventList>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d012      	beq.n	800b218 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b228 <xQueueGenericReset+0xd0>)
 800b1f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	e009      	b.n	800b218 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3310      	adds	r3, #16
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff fef1 	bl	800aff0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3324      	adds	r3, #36	@ 0x24
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff feec 	bl	800aff0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b218:	f002 f920 	bl	800d45c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b21c:	2301      	movs	r3, #1
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08e      	sub	sp, #56	@ 0x38
 800b230:	af02      	add	r7, sp, #8
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10b      	bne.n	800b258 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10b      	bne.n	800b276 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	e7fd      	b.n	800b272 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <xQueueGenericCreateStatic+0x56>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <xQueueGenericCreateStatic+0x5a>
 800b282:	2301      	movs	r3, #1
 800b284:	e000      	b.n	800b288 <xQueueGenericCreateStatic+0x5c>
 800b286:	2300      	movs	r3, #0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10b      	bne.n	800b2a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	623b      	str	r3, [r7, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	bf00      	nop
 800b2a2:	e7fd      	b.n	800b2a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d102      	bne.n	800b2b0 <xQueueGenericCreateStatic+0x84>
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <xQueueGenericCreateStatic+0x88>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e000      	b.n	800b2b6 <xQueueGenericCreateStatic+0x8a>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10b      	bne.n	800b2d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	61fb      	str	r3, [r7, #28]
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2d2:	2350      	movs	r3, #80	@ 0x50
 800b2d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b50      	cmp	r3, #80	@ 0x50
 800b2da:	d00b      	beq.n	800b2f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	61bb      	str	r3, [r7, #24]
}
 800b2ee:	bf00      	nop
 800b2f0:	bf00      	nop
 800b2f2:	e7fd      	b.n	800b2f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00d      	beq.n	800b31c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b308:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	4613      	mov	r3, r2
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	68b9      	ldr	r1, [r7, #8]
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f840 	bl	800b39c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b31e:	4618      	mov	r0, r3
 800b320:	3730      	adds	r7, #48	@ 0x30
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b326:	b580      	push	{r7, lr}
 800b328:	b08a      	sub	sp, #40	@ 0x28
 800b32a:	af02      	add	r7, sp, #8
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	4613      	mov	r3, r2
 800b332:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	613b      	str	r3, [r7, #16]
}
 800b34c:	bf00      	nop
 800b34e:	bf00      	nop
 800b350:	e7fd      	b.n	800b34e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
 800b35a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	3350      	adds	r3, #80	@ 0x50
 800b360:	4618      	mov	r0, r3
 800b362:	f002 f96b 	bl	800d63c <pvPortMalloc>
 800b366:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d011      	beq.n	800b392 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	3350      	adds	r3, #80	@ 0x50
 800b376:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b380:	79fa      	ldrb	r2, [r7, #7]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	4613      	mov	r3, r2
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 f805 	bl	800b39c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b392:	69bb      	ldr	r3, [r7, #24]
	}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d103      	bne.n	800b3b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	69b8      	ldr	r0, [r7, #24]
 800b3ce:	f7ff fec3 	bl	800b158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3da:	bf00      	nop
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08e      	sub	sp, #56	@ 0x38
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10b      	bne.n	800b418 <xQueueGenericSend+0x34>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b412:	bf00      	nop
 800b414:	bf00      	nop
 800b416:	e7fd      	b.n	800b414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <xQueueGenericSend+0x42>
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <xQueueGenericSend+0x46>
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <xQueueGenericSend+0x48>
 800b42a:	2300      	movs	r3, #0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <xQueueGenericSend+0x64>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d103      	bne.n	800b456 <xQueueGenericSend+0x72>
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b452:	2b01      	cmp	r3, #1
 800b454:	d101      	bne.n	800b45a <xQueueGenericSend+0x76>
 800b456:	2301      	movs	r3, #1
 800b458:	e000      	b.n	800b45c <xQueueGenericSend+0x78>
 800b45a:	2300      	movs	r3, #0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10b      	bne.n	800b478 <xQueueGenericSend+0x94>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	623b      	str	r3, [r7, #32]
}
 800b472:	bf00      	nop
 800b474:	bf00      	nop
 800b476:	e7fd      	b.n	800b474 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b478:	f001 fa50 	bl	800c91c <xTaskGetSchedulerState>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <xQueueGenericSend+0xa4>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <xQueueGenericSend+0xa8>
 800b488:	2301      	movs	r3, #1
 800b48a:	e000      	b.n	800b48e <xQueueGenericSend+0xaa>
 800b48c:	2300      	movs	r3, #0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10b      	bne.n	800b4aa <xQueueGenericSend+0xc6>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	61fb      	str	r3, [r7, #28]
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
 800b4a8:	e7fd      	b.n	800b4a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4aa:	f001 ffa5 	bl	800d3f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d302      	bcc.n	800b4c0 <xQueueGenericSend+0xdc>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d129      	bne.n	800b514 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	68b9      	ldr	r1, [r7, #8]
 800b4c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4c6:	f000 fa91 	bl	800b9ec <prvCopyDataToQueue>
 800b4ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d010      	beq.n	800b4f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d6:	3324      	adds	r3, #36	@ 0x24
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f001 f85f 	bl	800c59c <xTaskRemoveFromEventList>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d013      	beq.n	800b50c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b4e4:	4b3f      	ldr	r3, [pc, #252]	@ (800b5e4 <xQueueGenericSend+0x200>)
 800b4e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ea:	601a      	str	r2, [r3, #0]
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	e00a      	b.n	800b50c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d007      	beq.n	800b50c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b4fc:	4b39      	ldr	r3, [pc, #228]	@ (800b5e4 <xQueueGenericSend+0x200>)
 800b4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b50c:	f001 ffa6 	bl	800d45c <vPortExitCritical>
				return pdPASS;
 800b510:	2301      	movs	r3, #1
 800b512:	e063      	b.n	800b5dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b51a:	f001 ff9f 	bl	800d45c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	e05c      	b.n	800b5dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b528:	f107 0314 	add.w	r3, r7, #20
 800b52c:	4618      	mov	r0, r3
 800b52e:	f001 f899 	bl	800c664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b532:	2301      	movs	r3, #1
 800b534:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b536:	f001 ff91 	bl	800d45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b53a:	f000 fe09 	bl	800c150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b53e:	f001 ff5b 	bl	800d3f8 <vPortEnterCritical>
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b548:	b25b      	sxtb	r3, r3
 800b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54e:	d103      	bne.n	800b558 <xQueueGenericSend+0x174>
 800b550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b55e:	b25b      	sxtb	r3, r3
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d103      	bne.n	800b56e <xQueueGenericSend+0x18a>
 800b566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b56e:	f001 ff75 	bl	800d45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b572:	1d3a      	adds	r2, r7, #4
 800b574:	f107 0314 	add.w	r3, r7, #20
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 f888 	bl	800c690 <xTaskCheckForTimeOut>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d124      	bne.n	800b5d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b588:	f000 fb28 	bl	800bbdc <prvIsQueueFull>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d018      	beq.n	800b5c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b594:	3310      	adds	r3, #16
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	4611      	mov	r1, r2
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 ffac 	bl	800c4f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5a2:	f000 fab3 	bl	800bb0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5a6:	f000 fde1 	bl	800c16c <xTaskResumeAll>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f af7c 	bne.w	800b4aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e4 <xQueueGenericSend+0x200>)
 800b5b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	e772      	b.n	800b4aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5c6:	f000 faa1 	bl	800bb0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5ca:	f000 fdcf 	bl	800c16c <xTaskResumeAll>
 800b5ce:	e76c      	b.n	800b4aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5d2:	f000 fa9b 	bl	800bb0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5d6:	f000 fdc9 	bl	800c16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3738      	adds	r7, #56	@ 0x38
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	e000ed04 	.word	0xe000ed04

0800b5e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b090      	sub	sp, #64	@ 0x40
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10b      	bne.n	800b618 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	e7fd      	b.n	800b614 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d103      	bne.n	800b626 <xQueueGenericSendFromISR+0x3e>
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <xQueueGenericSendFromISR+0x42>
 800b626:	2301      	movs	r3, #1
 800b628:	e000      	b.n	800b62c <xQueueGenericSendFromISR+0x44>
 800b62a:	2300      	movs	r3, #0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10b      	bne.n	800b648 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b642:	bf00      	nop
 800b644:	bf00      	nop
 800b646:	e7fd      	b.n	800b644 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d103      	bne.n	800b656 <xQueueGenericSendFromISR+0x6e>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b652:	2b01      	cmp	r3, #1
 800b654:	d101      	bne.n	800b65a <xQueueGenericSendFromISR+0x72>
 800b656:	2301      	movs	r3, #1
 800b658:	e000      	b.n	800b65c <xQueueGenericSendFromISR+0x74>
 800b65a:	2300      	movs	r3, #0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10b      	bne.n	800b678 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	623b      	str	r3, [r7, #32]
}
 800b672:	bf00      	nop
 800b674:	bf00      	nop
 800b676:	e7fd      	b.n	800b674 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b678:	f001 ff9e 	bl	800d5b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b67c:	f3ef 8211 	mrs	r2, BASEPRI
 800b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	61fa      	str	r2, [r7, #28]
 800b692:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b694:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b696:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d302      	bcc.n	800b6aa <xQueueGenericSendFromISR+0xc2>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d12f      	bne.n	800b70a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b6c0:	f000 f994 	bl	800b9ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d112      	bne.n	800b6f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d016      	beq.n	800b704 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d8:	3324      	adds	r3, #36	@ 0x24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 ff5e 	bl	800c59c <xTaskRemoveFromEventList>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00e      	beq.n	800b704 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	e007      	b.n	800b704 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b6f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	b25a      	sxtb	r2, r3
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b704:	2301      	movs	r3, #1
 800b706:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b708:	e001      	b.n	800b70e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b710:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b718:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3740      	adds	r7, #64	@ 0x40
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08c      	sub	sp, #48	@ 0x30
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b730:	2300      	movs	r3, #0
 800b732:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10b      	bne.n	800b756 <xQueueReceive+0x32>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	623b      	str	r3, [r7, #32]
}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	e7fd      	b.n	800b752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d103      	bne.n	800b764 <xQueueReceive+0x40>
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <xQueueReceive+0x44>
 800b764:	2301      	movs	r3, #1
 800b766:	e000      	b.n	800b76a <xQueueReceive+0x46>
 800b768:	2300      	movs	r3, #0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10b      	bne.n	800b786 <xQueueReceive+0x62>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	61fb      	str	r3, [r7, #28]
}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	e7fd      	b.n	800b782 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b786:	f001 f8c9 	bl	800c91c <xTaskGetSchedulerState>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d102      	bne.n	800b796 <xQueueReceive+0x72>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <xQueueReceive+0x76>
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <xQueueReceive+0x78>
 800b79a:	2300      	movs	r3, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10b      	bne.n	800b7b8 <xQueueReceive+0x94>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	61bb      	str	r3, [r7, #24]
}
 800b7b2:	bf00      	nop
 800b7b4:	bf00      	nop
 800b7b6:	e7fd      	b.n	800b7b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7b8:	f001 fe1e 	bl	800d3f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01f      	beq.n	800b808 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7cc:	f000 f978 	bl	800bac0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	1e5a      	subs	r2, r3, #1
 800b7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00f      	beq.n	800b800 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e2:	3310      	adds	r3, #16
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 fed9 	bl	800c59c <xTaskRemoveFromEventList>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7f0:	4b3c      	ldr	r3, [pc, #240]	@ (800b8e4 <xQueueReceive+0x1c0>)
 800b7f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b800:	f001 fe2c 	bl	800d45c <vPortExitCritical>
				return pdPASS;
 800b804:	2301      	movs	r3, #1
 800b806:	e069      	b.n	800b8dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b80e:	f001 fe25 	bl	800d45c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b812:	2300      	movs	r3, #0
 800b814:	e062      	b.n	800b8dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b81c:	f107 0310 	add.w	r3, r7, #16
 800b820:	4618      	mov	r0, r3
 800b822:	f000 ff1f 	bl	800c664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b826:	2301      	movs	r3, #1
 800b828:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b82a:	f001 fe17 	bl	800d45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b82e:	f000 fc8f 	bl	800c150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b832:	f001 fde1 	bl	800d3f8 <vPortEnterCritical>
 800b836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b83c:	b25b      	sxtb	r3, r3
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b842:	d103      	bne.n	800b84c <xQueueReceive+0x128>
 800b844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b84e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b852:	b25b      	sxtb	r3, r3
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d103      	bne.n	800b862 <xQueueReceive+0x13e>
 800b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b862:	f001 fdfb 	bl	800d45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b866:	1d3a      	adds	r2, r7, #4
 800b868:	f107 0310 	add.w	r3, r7, #16
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 ff0e 	bl	800c690 <xTaskCheckForTimeOut>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d123      	bne.n	800b8c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b87a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b87c:	f000 f998 	bl	800bbb0 <prvIsQueueEmpty>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d017      	beq.n	800b8b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b888:	3324      	adds	r3, #36	@ 0x24
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fe32 	bl	800c4f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b896:	f000 f939 	bl	800bb0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b89a:	f000 fc67 	bl	800c16c <xTaskResumeAll>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d189      	bne.n	800b7b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e4 <xQueueReceive+0x1c0>)
 800b8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	e780      	b.n	800b7b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8b8:	f000 f928 	bl	800bb0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8bc:	f000 fc56 	bl	800c16c <xTaskResumeAll>
 800b8c0:	e77a      	b.n	800b7b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b8c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8c4:	f000 f922 	bl	800bb0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8c8:	f000 fc50 	bl	800c16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8ce:	f000 f96f 	bl	800bbb0 <prvIsQueueEmpty>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f43f af6f 	beq.w	800b7b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3730      	adds	r7, #48	@ 0x30
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	e000ed04 	.word	0xe000ed04

0800b8e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08e      	sub	sp, #56	@ 0x38
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10b      	bne.n	800b916 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	623b      	str	r3, [r7, #32]
}
 800b910:	bf00      	nop
 800b912:	bf00      	nop
 800b914:	e7fd      	b.n	800b912 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d103      	bne.n	800b924 <xQueueReceiveFromISR+0x3c>
 800b91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <xQueueReceiveFromISR+0x40>
 800b924:	2301      	movs	r3, #1
 800b926:	e000      	b.n	800b92a <xQueueReceiveFromISR+0x42>
 800b928:	2300      	movs	r3, #0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10b      	bne.n	800b946 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	61fb      	str	r3, [r7, #28]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b946:	f001 fe37 	bl	800d5b8 <vPortValidateInterruptPriority>
	__asm volatile
 800b94a:	f3ef 8211 	mrs	r2, BASEPRI
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	61ba      	str	r2, [r7, #24]
 800b960:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b962:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b964:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b96a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d02f      	beq.n	800b9d2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b980:	f000 f89e 	bl	800bac0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b986:	1e5a      	subs	r2, r3, #1
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b98c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b994:	d112      	bne.n	800b9bc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d016      	beq.n	800b9cc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	3310      	adds	r3, #16
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fdfa 	bl	800c59c <xTaskRemoveFromEventList>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00e      	beq.n	800b9cc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	e007      	b.n	800b9cc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	b25a      	sxtb	r2, r3
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d0:	e001      	b.n	800b9d6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	f383 8811 	msr	BASEPRI, r3
}
 800b9e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3738      	adds	r7, #56	@ 0x38
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10d      	bne.n	800ba26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d14d      	bne.n	800baae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 ff9e 	bl	800c958 <xTaskPriorityDisinherit>
 800ba1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	609a      	str	r2, [r3, #8]
 800ba24:	e043      	b.n	800baae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d119      	bne.n	800ba60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6858      	ldr	r0, [r3, #4]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba34:	461a      	mov	r2, r3
 800ba36:	68b9      	ldr	r1, [r7, #8]
 800ba38:	f003 ffd5 	bl	800f9e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba44:	441a      	add	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d32b      	bcc.n	800baae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	605a      	str	r2, [r3, #4]
 800ba5e:	e026      	b.n	800baae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	68d8      	ldr	r0, [r3, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba68:	461a      	mov	r2, r3
 800ba6a:	68b9      	ldr	r1, [r7, #8]
 800ba6c:	f003 ffbb 	bl	800f9e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba78:	425b      	negs	r3, r3
 800ba7a:	441a      	add	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d207      	bcs.n	800ba9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	689a      	ldr	r2, [r3, #8]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba94:	425b      	negs	r3, r3
 800ba96:	441a      	add	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d105      	bne.n	800baae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	3b01      	subs	r3, #1
 800baac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bab6:	697b      	ldr	r3, [r7, #20]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d018      	beq.n	800bb04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68da      	ldr	r2, [r3, #12]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bada:	441a      	add	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68da      	ldr	r2, [r3, #12]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d303      	bcc.n	800baf4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68d9      	ldr	r1, [r3, #12]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bafc:	461a      	mov	r2, r3
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f003 ff71 	bl	800f9e6 <memcpy>
	}
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb14:	f001 fc70 	bl	800d3f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb20:	e011      	b.n	800bb46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d012      	beq.n	800bb50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3324      	adds	r3, #36	@ 0x24
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fd34 	bl	800c59c <xTaskRemoveFromEventList>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb3a:	f000 fe0d 	bl	800c758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dce9      	bgt.n	800bb22 <prvUnlockQueue+0x16>
 800bb4e:	e000      	b.n	800bb52 <prvUnlockQueue+0x46>
					break;
 800bb50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	22ff      	movs	r2, #255	@ 0xff
 800bb56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bb5a:	f001 fc7f 	bl	800d45c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb5e:	f001 fc4b 	bl	800d3f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb6a:	e011      	b.n	800bb90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d012      	beq.n	800bb9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3310      	adds	r3, #16
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fd0f 	bl	800c59c <xTaskRemoveFromEventList>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb84:	f000 fde8 	bl	800c758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dce9      	bgt.n	800bb6c <prvUnlockQueue+0x60>
 800bb98:	e000      	b.n	800bb9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	22ff      	movs	r2, #255	@ 0xff
 800bba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bba4:	f001 fc5a 	bl	800d45c <vPortExitCritical>
}
 800bba8:	bf00      	nop
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbb8:	f001 fc1e 	bl	800d3f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	e001      	b.n	800bbce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbce:	f001 fc45 	bl	800d45c <vPortExitCritical>

	return xReturn;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbe4:	f001 fc08 	bl	800d3f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d102      	bne.n	800bbfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	e001      	b.n	800bbfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbfe:	f001 fc2d 	bl	800d45c <vPortExitCritical>

	return xReturn;
 800bc02:	68fb      	ldr	r3, [r7, #12]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	e014      	b.n	800bc46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc1c:	4a0f      	ldr	r2, [pc, #60]	@ (800bc5c <vQueueAddToRegistry+0x50>)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10b      	bne.n	800bc40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc28:	490c      	ldr	r1, [pc, #48]	@ (800bc5c <vQueueAddToRegistry+0x50>)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc32:	4a0a      	ldr	r2, [pc, #40]	@ (800bc5c <vQueueAddToRegistry+0x50>)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	4413      	add	r3, r2
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc3e:	e006      	b.n	800bc4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3301      	adds	r3, #1
 800bc44:	60fb      	str	r3, [r7, #12]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b07      	cmp	r3, #7
 800bc4a:	d9e7      	bls.n	800bc1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	24000b30 	.word	0x24000b30

0800bc60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc70:	f001 fbc2 	bl	800d3f8 <vPortEnterCritical>
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc7a:	b25b      	sxtb	r3, r3
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d103      	bne.n	800bc8a <vQueueWaitForMessageRestricted+0x2a>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc90:	b25b      	sxtb	r3, r3
 800bc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc96:	d103      	bne.n	800bca0 <vQueueWaitForMessageRestricted+0x40>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bca0:	f001 fbdc 	bl	800d45c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	3324      	adds	r3, #36	@ 0x24
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 fc45 	bl	800c544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bcba:	6978      	ldr	r0, [r7, #20]
 800bcbc:	f7ff ff26 	bl	800bb0c <prvUnlockQueue>
	}
 800bcc0:	bf00      	nop
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	@ 0x38
 800bccc:	af04      	add	r7, sp, #16
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	623b      	str	r3, [r7, #32]
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	e7fd      	b.n	800bcf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10b      	bne.n	800bd12 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	61fb      	str	r3, [r7, #28]
}
 800bd0c:	bf00      	nop
 800bd0e:	bf00      	nop
 800bd10:	e7fd      	b.n	800bd0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd12:	235c      	movs	r3, #92	@ 0x5c
 800bd14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd1a:	d00b      	beq.n	800bd34 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	61bb      	str	r3, [r7, #24]
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	e7fd      	b.n	800bd30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01e      	beq.n	800bd7a <xTaskCreateStatic+0xb2>
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d01b      	beq.n	800bd7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd54:	2300      	movs	r3, #0
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	9302      	str	r3, [sp, #8]
 800bd5c:	f107 0314 	add.w	r3, r7, #20
 800bd60:	9301      	str	r3, [sp, #4]
 800bd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 f850 	bl	800be12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd74:	f000 f8de 	bl	800bf34 <prvAddNewTaskToReadyList>
 800bd78:	e001      	b.n	800bd7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd7e:	697b      	ldr	r3, [r7, #20]
	}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3728      	adds	r7, #40	@ 0x28
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08c      	sub	sp, #48	@ 0x30
 800bd8c:	af04      	add	r7, sp, #16
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	4613      	mov	r3, r2
 800bd96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f001 fc4d 	bl	800d63c <pvPortMalloc>
 800bda2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00e      	beq.n	800bdc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdaa:	205c      	movs	r0, #92	@ 0x5c
 800bdac:	f001 fc46 	bl	800d63c <pvPortMalloc>
 800bdb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d003      	beq.n	800bdc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	631a      	str	r2, [r3, #48]	@ 0x30
 800bdbe:	e005      	b.n	800bdcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdc0:	6978      	ldr	r0, [r7, #20]
 800bdc2:	f001 fd09 	bl	800d7d8 <vPortFree>
 800bdc6:	e001      	b.n	800bdcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d017      	beq.n	800be02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bdda:	88fa      	ldrh	r2, [r7, #6]
 800bddc:	2300      	movs	r3, #0
 800bdde:	9303      	str	r3, [sp, #12]
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	9302      	str	r3, [sp, #8]
 800bde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde6:	9301      	str	r3, [sp, #4]
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	68b9      	ldr	r1, [r7, #8]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 f80e 	bl	800be12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdf6:	69f8      	ldr	r0, [r7, #28]
 800bdf8:	f000 f89c 	bl	800bf34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	61bb      	str	r3, [r7, #24]
 800be00:	e002      	b.n	800be08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be02:	f04f 33ff 	mov.w	r3, #4294967295
 800be06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be08:	69bb      	ldr	r3, [r7, #24]
	}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3720      	adds	r7, #32
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b088      	sub	sp, #32
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be22:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	461a      	mov	r2, r3
 800be2a:	21a5      	movs	r1, #165	@ 0xa5
 800be2c:	f003 fd3a 	bl	800f8a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800be3a:	440b      	add	r3, r1
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	f023 0307 	bic.w	r3, r3, #7
 800be48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	f003 0307 	and.w	r3, r3, #7
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00b      	beq.n	800be6c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	617b      	str	r3, [r7, #20]
}
 800be66:	bf00      	nop
 800be68:	bf00      	nop
 800be6a:	e7fd      	b.n	800be68 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d01f      	beq.n	800beb2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be72:	2300      	movs	r3, #0
 800be74:	61fb      	str	r3, [r7, #28]
 800be76:	e012      	b.n	800be9e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	4413      	add	r3, r2
 800be7e:	7819      	ldrb	r1, [r3, #0]
 800be80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	4413      	add	r3, r2
 800be86:	3334      	adds	r3, #52	@ 0x34
 800be88:	460a      	mov	r2, r1
 800be8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	4413      	add	r3, r2
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d006      	beq.n	800bea6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	3301      	adds	r3, #1
 800be9c:	61fb      	str	r3, [r7, #28]
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	2b0f      	cmp	r3, #15
 800bea2:	d9e9      	bls.n	800be78 <prvInitialiseNewTask+0x66>
 800bea4:	e000      	b.n	800bea8 <prvInitialiseNewTask+0x96>
			{
				break;
 800bea6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800beb0:	e003      	b.n	800beba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bebc:	2b37      	cmp	r3, #55	@ 0x37
 800bebe:	d901      	bls.n	800bec4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bec0:	2337      	movs	r3, #55	@ 0x37
 800bec2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bec8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800beca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800becc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bece:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed2:	2200      	movs	r2, #0
 800bed4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed8:	3304      	adds	r3, #4
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff f8a8 	bl	800b030 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	3318      	adds	r3, #24
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff f8a3 	bl	800b030 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800beea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800befa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800befe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf02:	2200      	movs	r2, #0
 800bf04:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	68f9      	ldr	r1, [r7, #12]
 800bf12:	69b8      	ldr	r0, [r7, #24]
 800bf14:	f001 f93e 	bl	800d194 <pxPortInitialiseStack>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf2a:	bf00      	nop
 800bf2c:	3720      	adds	r7, #32
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf3c:	f001 fa5c 	bl	800d3f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf40:	4b2d      	ldr	r3, [pc, #180]	@ (800bff8 <prvAddNewTaskToReadyList+0xc4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	3301      	adds	r3, #1
 800bf46:	4a2c      	ldr	r2, [pc, #176]	@ (800bff8 <prvAddNewTaskToReadyList+0xc4>)
 800bf48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf4a:	4b2c      	ldr	r3, [pc, #176]	@ (800bffc <prvAddNewTaskToReadyList+0xc8>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf52:	4a2a      	ldr	r2, [pc, #168]	@ (800bffc <prvAddNewTaskToReadyList+0xc8>)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf58:	4b27      	ldr	r3, [pc, #156]	@ (800bff8 <prvAddNewTaskToReadyList+0xc4>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d110      	bne.n	800bf82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf60:	f000 fc1e 	bl	800c7a0 <prvInitialiseTaskLists>
 800bf64:	e00d      	b.n	800bf82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf66:	4b26      	ldr	r3, [pc, #152]	@ (800c000 <prvAddNewTaskToReadyList+0xcc>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf6e:	4b23      	ldr	r3, [pc, #140]	@ (800bffc <prvAddNewTaskToReadyList+0xc8>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d802      	bhi.n	800bf82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf7c:	4a1f      	ldr	r2, [pc, #124]	@ (800bffc <prvAddNewTaskToReadyList+0xc8>)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf82:	4b20      	ldr	r3, [pc, #128]	@ (800c004 <prvAddNewTaskToReadyList+0xd0>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3301      	adds	r3, #1
 800bf88:	4a1e      	ldr	r2, [pc, #120]	@ (800c004 <prvAddNewTaskToReadyList+0xd0>)
 800bf8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf8c:	4b1d      	ldr	r3, [pc, #116]	@ (800c004 <prvAddNewTaskToReadyList+0xd0>)
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf98:	4b1b      	ldr	r3, [pc, #108]	@ (800c008 <prvAddNewTaskToReadyList+0xd4>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d903      	bls.n	800bfa8 <prvAddNewTaskToReadyList+0x74>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa4:	4a18      	ldr	r2, [pc, #96]	@ (800c008 <prvAddNewTaskToReadyList+0xd4>)
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfac:	4613      	mov	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4a15      	ldr	r2, [pc, #84]	@ (800c00c <prvAddNewTaskToReadyList+0xd8>)
 800bfb6:	441a      	add	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	3304      	adds	r3, #4
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	f7ff f843 	bl	800b04a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfc4:	f001 fa4a 	bl	800d45c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	@ (800c000 <prvAddNewTaskToReadyList+0xcc>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00e      	beq.n	800bfee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bffc <prvAddNewTaskToReadyList+0xc8>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d207      	bcs.n	800bfee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bfde:	4b0c      	ldr	r3, [pc, #48]	@ (800c010 <prvAddNewTaskToReadyList+0xdc>)
 800bfe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	24001044 	.word	0x24001044
 800bffc:	24000b70 	.word	0x24000b70
 800c000:	24001050 	.word	0x24001050
 800c004:	24001060 	.word	0x24001060
 800c008:	2400104c 	.word	0x2400104c
 800c00c:	24000b74 	.word	0x24000b74
 800c010:	e000ed04 	.word	0xe000ed04

0800c014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d018      	beq.n	800c058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c026:	4b14      	ldr	r3, [pc, #80]	@ (800c078 <vTaskDelay+0x64>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00b      	beq.n	800c046 <vTaskDelay+0x32>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	60bb      	str	r3, [r7, #8]
}
 800c040:	bf00      	nop
 800c042:	bf00      	nop
 800c044:	e7fd      	b.n	800c042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c046:	f000 f883 	bl	800c150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c04a:	2100      	movs	r1, #0
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fcf3 	bl	800ca38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c052:	f000 f88b 	bl	800c16c <xTaskResumeAll>
 800c056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d107      	bne.n	800c06e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c05e:	4b07      	ldr	r3, [pc, #28]	@ (800c07c <vTaskDelay+0x68>)
 800c060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c06e:	bf00      	nop
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	2400106c 	.word	0x2400106c
 800c07c:	e000ed04 	.word	0xe000ed04

0800c080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08a      	sub	sp, #40	@ 0x28
 800c084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c08e:	463a      	mov	r2, r7
 800c090:	1d39      	adds	r1, r7, #4
 800c092:	f107 0308 	add.w	r3, r7, #8
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe ff76 	bl	800af88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	9202      	str	r2, [sp, #8]
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	460a      	mov	r2, r1
 800c0ae:	4922      	ldr	r1, [pc, #136]	@ (800c138 <vTaskStartScheduler+0xb8>)
 800c0b0:	4822      	ldr	r0, [pc, #136]	@ (800c13c <vTaskStartScheduler+0xbc>)
 800c0b2:	f7ff fe09 	bl	800bcc8 <xTaskCreateStatic>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	4a21      	ldr	r2, [pc, #132]	@ (800c140 <vTaskStartScheduler+0xc0>)
 800c0ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c0bc:	4b20      	ldr	r3, [pc, #128]	@ (800c140 <vTaskStartScheduler+0xc0>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	e001      	b.n	800c0ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d102      	bne.n	800c0da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0d4:	f000 fd04 	bl	800cae0 <xTimerCreateTimerTask>
 800c0d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d116      	bne.n	800c10e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	613b      	str	r3, [r7, #16]
}
 800c0f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0f4:	4b13      	ldr	r3, [pc, #76]	@ (800c144 <vTaskStartScheduler+0xc4>)
 800c0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0fc:	4b12      	ldr	r3, [pc, #72]	@ (800c148 <vTaskStartScheduler+0xc8>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c102:	4b12      	ldr	r3, [pc, #72]	@ (800c14c <vTaskStartScheduler+0xcc>)
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c108:	f001 f8d2 	bl	800d2b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c10c:	e00f      	b.n	800c12e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d10b      	bne.n	800c12e <vTaskStartScheduler+0xae>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60fb      	str	r3, [r7, #12]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <vTaskStartScheduler+0xaa>
}
 800c12e:	bf00      	nop
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	080129a4 	.word	0x080129a4
 800c13c:	0800c771 	.word	0x0800c771
 800c140:	24001068 	.word	0x24001068
 800c144:	24001064 	.word	0x24001064
 800c148:	24001050 	.word	0x24001050
 800c14c:	24001048 	.word	0x24001048

0800c150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c154:	4b04      	ldr	r3, [pc, #16]	@ (800c168 <vTaskSuspendAll+0x18>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	4a03      	ldr	r2, [pc, #12]	@ (800c168 <vTaskSuspendAll+0x18>)
 800c15c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c15e:	bf00      	nop
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	2400106c 	.word	0x2400106c

0800c16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c176:	2300      	movs	r3, #0
 800c178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c17a:	4b42      	ldr	r3, [pc, #264]	@ (800c284 <xTaskResumeAll+0x118>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <xTaskResumeAll+0x2e>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	603b      	str	r3, [r7, #0]
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop
 800c198:	e7fd      	b.n	800c196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c19a:	f001 f92d 	bl	800d3f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c19e:	4b39      	ldr	r3, [pc, #228]	@ (800c284 <xTaskResumeAll+0x118>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	4a37      	ldr	r2, [pc, #220]	@ (800c284 <xTaskResumeAll+0x118>)
 800c1a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1a8:	4b36      	ldr	r3, [pc, #216]	@ (800c284 <xTaskResumeAll+0x118>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d162      	bne.n	800c276 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c1b0:	4b35      	ldr	r3, [pc, #212]	@ (800c288 <xTaskResumeAll+0x11c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d05e      	beq.n	800c276 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1b8:	e02f      	b.n	800c21a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ba:	4b34      	ldr	r3, [pc, #208]	@ (800c28c <xTaskResumeAll+0x120>)
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3318      	adds	r3, #24
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fe ff9c 	bl	800b104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe ff97 	bl	800b104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1da:	4b2d      	ldr	r3, [pc, #180]	@ (800c290 <xTaskResumeAll+0x124>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d903      	bls.n	800c1ea <xTaskResumeAll+0x7e>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c290 <xTaskResumeAll+0x124>)
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4a27      	ldr	r2, [pc, #156]	@ (800c294 <xTaskResumeAll+0x128>)
 800c1f8:	441a      	add	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7fe ff22 	bl	800b04a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c20a:	4b23      	ldr	r3, [pc, #140]	@ (800c298 <xTaskResumeAll+0x12c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c210:	429a      	cmp	r2, r3
 800c212:	d302      	bcc.n	800c21a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c214:	4b21      	ldr	r3, [pc, #132]	@ (800c29c <xTaskResumeAll+0x130>)
 800c216:	2201      	movs	r2, #1
 800c218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c21a:	4b1c      	ldr	r3, [pc, #112]	@ (800c28c <xTaskResumeAll+0x120>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1cb      	bne.n	800c1ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c228:	f000 fb58 	bl	800c8dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c22c:	4b1c      	ldr	r3, [pc, #112]	@ (800c2a0 <xTaskResumeAll+0x134>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d010      	beq.n	800c25a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c238:	f000 f846 	bl	800c2c8 <xTaskIncrementTick>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d002      	beq.n	800c248 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c242:	4b16      	ldr	r3, [pc, #88]	@ (800c29c <xTaskResumeAll+0x130>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1f1      	bne.n	800c238 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c254:	4b12      	ldr	r3, [pc, #72]	@ (800c2a0 <xTaskResumeAll+0x134>)
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c25a:	4b10      	ldr	r3, [pc, #64]	@ (800c29c <xTaskResumeAll+0x130>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d009      	beq.n	800c276 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c262:	2301      	movs	r3, #1
 800c264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c266:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a4 <xTaskResumeAll+0x138>)
 800c268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c276:	f001 f8f1 	bl	800d45c <vPortExitCritical>

	return xAlreadyYielded;
 800c27a:	68bb      	ldr	r3, [r7, #8]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	2400106c 	.word	0x2400106c
 800c288:	24001044 	.word	0x24001044
 800c28c:	24001004 	.word	0x24001004
 800c290:	2400104c 	.word	0x2400104c
 800c294:	24000b74 	.word	0x24000b74
 800c298:	24000b70 	.word	0x24000b70
 800c29c:	24001058 	.word	0x24001058
 800c2a0:	24001054 	.word	0x24001054
 800c2a4:	e000ed04 	.word	0xe000ed04

0800c2a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c2ae:	4b05      	ldr	r3, [pc, #20]	@ (800c2c4 <xTaskGetTickCount+0x1c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c2b4:	687b      	ldr	r3, [r7, #4]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	24001048 	.word	0x24001048

0800c2c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2d2:	4b4f      	ldr	r3, [pc, #316]	@ (800c410 <xTaskIncrementTick+0x148>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f040 8090 	bne.w	800c3fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c2dc:	4b4d      	ldr	r3, [pc, #308]	@ (800c414 <xTaskIncrementTick+0x14c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c2e4:	4a4b      	ldr	r2, [pc, #300]	@ (800c414 <xTaskIncrementTick+0x14c>)
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d121      	bne.n	800c334 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c2f0:	4b49      	ldr	r3, [pc, #292]	@ (800c418 <xTaskIncrementTick+0x150>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00b      	beq.n	800c312 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	603b      	str	r3, [r7, #0]
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	e7fd      	b.n	800c30e <xTaskIncrementTick+0x46>
 800c312:	4b41      	ldr	r3, [pc, #260]	@ (800c418 <xTaskIncrementTick+0x150>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	4b40      	ldr	r3, [pc, #256]	@ (800c41c <xTaskIncrementTick+0x154>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a3e      	ldr	r2, [pc, #248]	@ (800c418 <xTaskIncrementTick+0x150>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	4a3e      	ldr	r2, [pc, #248]	@ (800c41c <xTaskIncrementTick+0x154>)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6013      	str	r3, [r2, #0]
 800c326:	4b3e      	ldr	r3, [pc, #248]	@ (800c420 <xTaskIncrementTick+0x158>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3301      	adds	r3, #1
 800c32c:	4a3c      	ldr	r2, [pc, #240]	@ (800c420 <xTaskIncrementTick+0x158>)
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	f000 fad4 	bl	800c8dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c334:	4b3b      	ldr	r3, [pc, #236]	@ (800c424 <xTaskIncrementTick+0x15c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d349      	bcc.n	800c3d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c33e:	4b36      	ldr	r3, [pc, #216]	@ (800c418 <xTaskIncrementTick+0x150>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d104      	bne.n	800c352 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c348:	4b36      	ldr	r3, [pc, #216]	@ (800c424 <xTaskIncrementTick+0x15c>)
 800c34a:	f04f 32ff 	mov.w	r2, #4294967295
 800c34e:	601a      	str	r2, [r3, #0]
					break;
 800c350:	e03f      	b.n	800c3d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c352:	4b31      	ldr	r3, [pc, #196]	@ (800c418 <xTaskIncrementTick+0x150>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	429a      	cmp	r2, r3
 800c368:	d203      	bcs.n	800c372 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c36a:	4a2e      	ldr	r2, [pc, #184]	@ (800c424 <xTaskIncrementTick+0x15c>)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c370:	e02f      	b.n	800c3d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	3304      	adds	r3, #4
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe fec4 	bl	800b104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c380:	2b00      	cmp	r3, #0
 800c382:	d004      	beq.n	800c38e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	3318      	adds	r3, #24
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe febb 	bl	800b104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c392:	4b25      	ldr	r3, [pc, #148]	@ (800c428 <xTaskIncrementTick+0x160>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	429a      	cmp	r2, r3
 800c398:	d903      	bls.n	800c3a2 <xTaskIncrementTick+0xda>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39e:	4a22      	ldr	r2, [pc, #136]	@ (800c428 <xTaskIncrementTick+0x160>)
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4a1f      	ldr	r2, [pc, #124]	@ (800c42c <xTaskIncrementTick+0x164>)
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f7fe fe46 	bl	800b04a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c430 <xTaskIncrementTick+0x168>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d3b8      	bcc.n	800c33e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3d0:	e7b5      	b.n	800c33e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c3d2:	4b17      	ldr	r3, [pc, #92]	@ (800c430 <xTaskIncrementTick+0x168>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d8:	4914      	ldr	r1, [pc, #80]	@ (800c42c <xTaskIncrementTick+0x164>)
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d901      	bls.n	800c3ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c3ee:	4b11      	ldr	r3, [pc, #68]	@ (800c434 <xTaskIncrementTick+0x16c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	e004      	b.n	800c406 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c438 <xTaskIncrementTick+0x170>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3301      	adds	r3, #1
 800c402:	4a0d      	ldr	r2, [pc, #52]	@ (800c438 <xTaskIncrementTick+0x170>)
 800c404:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c406:	697b      	ldr	r3, [r7, #20]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	2400106c 	.word	0x2400106c
 800c414:	24001048 	.word	0x24001048
 800c418:	24000ffc 	.word	0x24000ffc
 800c41c:	24001000 	.word	0x24001000
 800c420:	2400105c 	.word	0x2400105c
 800c424:	24001064 	.word	0x24001064
 800c428:	2400104c 	.word	0x2400104c
 800c42c:	24000b74 	.word	0x24000b74
 800c430:	24000b70 	.word	0x24000b70
 800c434:	24001058 	.word	0x24001058
 800c438:	24001054 	.word	0x24001054

0800c43c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c442:	4b28      	ldr	r3, [pc, #160]	@ (800c4e4 <vTaskSwitchContext+0xa8>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c44a:	4b27      	ldr	r3, [pc, #156]	@ (800c4e8 <vTaskSwitchContext+0xac>)
 800c44c:	2201      	movs	r2, #1
 800c44e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c450:	e042      	b.n	800c4d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c452:	4b25      	ldr	r3, [pc, #148]	@ (800c4e8 <vTaskSwitchContext+0xac>)
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c458:	4b24      	ldr	r3, [pc, #144]	@ (800c4ec <vTaskSwitchContext+0xb0>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	60fb      	str	r3, [r7, #12]
 800c45e:	e011      	b.n	800c484 <vTaskSwitchContext+0x48>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <vTaskSwitchContext+0x42>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	607b      	str	r3, [r7, #4]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <vTaskSwitchContext+0x3e>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b01      	subs	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	491a      	ldr	r1, [pc, #104]	@ (800c4f0 <vTaskSwitchContext+0xb4>)
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0e3      	beq.n	800c460 <vTaskSwitchContext+0x24>
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4a13      	ldr	r2, [pc, #76]	@ (800c4f0 <vTaskSwitchContext+0xb4>)
 800c4a4:	4413      	add	r3, r2
 800c4a6:	60bb      	str	r3, [r7, #8]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	605a      	str	r2, [r3, #4]
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	3308      	adds	r3, #8
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d104      	bne.n	800c4c8 <vTaskSwitchContext+0x8c>
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	605a      	str	r2, [r3, #4]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	4a09      	ldr	r2, [pc, #36]	@ (800c4f4 <vTaskSwitchContext+0xb8>)
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	4a06      	ldr	r2, [pc, #24]	@ (800c4ec <vTaskSwitchContext+0xb0>)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6013      	str	r3, [r2, #0]
}
 800c4d8:	bf00      	nop
 800c4da:	3714      	adds	r7, #20
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr
 800c4e4:	2400106c 	.word	0x2400106c
 800c4e8:	24001058 	.word	0x24001058
 800c4ec:	2400104c 	.word	0x2400104c
 800c4f0:	24000b74 	.word	0x24000b74
 800c4f4:	24000b70 	.word	0x24000b70

0800c4f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10b      	bne.n	800c520 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	60fb      	str	r3, [r7, #12]
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c520:	4b07      	ldr	r3, [pc, #28]	@ (800c540 <vTaskPlaceOnEventList+0x48>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3318      	adds	r3, #24
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7fe fdb2 	bl	800b092 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c52e:	2101      	movs	r1, #1
 800c530:	6838      	ldr	r0, [r7, #0]
 800c532:	f000 fa81 	bl	800ca38 <prvAddCurrentTaskToDelayedList>
}
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	24000b70 	.word	0x24000b70

0800c544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10b      	bne.n	800c56e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	617b      	str	r3, [r7, #20]
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	e7fd      	b.n	800c56a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c56e:	4b0a      	ldr	r3, [pc, #40]	@ (800c598 <vTaskPlaceOnEventListRestricted+0x54>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3318      	adds	r3, #24
 800c574:	4619      	mov	r1, r3
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7fe fd67 	bl	800b04a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c582:	f04f 33ff 	mov.w	r3, #4294967295
 800c586:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c588:	6879      	ldr	r1, [r7, #4]
 800c58a:	68b8      	ldr	r0, [r7, #8]
 800c58c:	f000 fa54 	bl	800ca38 <prvAddCurrentTaskToDelayedList>
	}
 800c590:	bf00      	nop
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	24000b70 	.word	0x24000b70

0800c59c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10b      	bne.n	800c5ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	60fb      	str	r3, [r7, #12]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	3318      	adds	r3, #24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fe fd98 	bl	800b104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c64c <xTaskRemoveFromEventList+0xb0>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d11d      	bne.n	800c618 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fd8f 	bl	800b104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ea:	4b19      	ldr	r3, [pc, #100]	@ (800c650 <xTaskRemoveFromEventList+0xb4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d903      	bls.n	800c5fa <xTaskRemoveFromEventList+0x5e>
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f6:	4a16      	ldr	r2, [pc, #88]	@ (800c650 <xTaskRemoveFromEventList+0xb4>)
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5fe:	4613      	mov	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4a13      	ldr	r2, [pc, #76]	@ (800c654 <xTaskRemoveFromEventList+0xb8>)
 800c608:	441a      	add	r2, r3
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	3304      	adds	r3, #4
 800c60e:	4619      	mov	r1, r3
 800c610:	4610      	mov	r0, r2
 800c612:	f7fe fd1a 	bl	800b04a <vListInsertEnd>
 800c616:	e005      	b.n	800c624 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	3318      	adds	r3, #24
 800c61c:	4619      	mov	r1, r3
 800c61e:	480e      	ldr	r0, [pc, #56]	@ (800c658 <xTaskRemoveFromEventList+0xbc>)
 800c620:	f7fe fd13 	bl	800b04a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c628:	4b0c      	ldr	r3, [pc, #48]	@ (800c65c <xTaskRemoveFromEventList+0xc0>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62e:	429a      	cmp	r2, r3
 800c630:	d905      	bls.n	800c63e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c632:	2301      	movs	r3, #1
 800c634:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c636:	4b0a      	ldr	r3, [pc, #40]	@ (800c660 <xTaskRemoveFromEventList+0xc4>)
 800c638:	2201      	movs	r2, #1
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	e001      	b.n	800c642 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c63e:	2300      	movs	r3, #0
 800c640:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c642:	697b      	ldr	r3, [r7, #20]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	2400106c 	.word	0x2400106c
 800c650:	2400104c 	.word	0x2400104c
 800c654:	24000b74 	.word	0x24000b74
 800c658:	24001004 	.word	0x24001004
 800c65c:	24000b70 	.word	0x24000b70
 800c660:	24001058 	.word	0x24001058

0800c664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c66c:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <vTaskInternalSetTimeOutState+0x24>)
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c674:	4b05      	ldr	r3, [pc, #20]	@ (800c68c <vTaskInternalSetTimeOutState+0x28>)
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	605a      	str	r2, [r3, #4]
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	2400105c 	.word	0x2400105c
 800c68c:	24001048 	.word	0x24001048

0800c690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b088      	sub	sp, #32
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10b      	bne.n	800c6b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	613b      	str	r3, [r7, #16]
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	e7fd      	b.n	800c6b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60fb      	str	r3, [r7, #12]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c6d6:	f000 fe8f 	bl	800d3f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c6da:	4b1d      	ldr	r3, [pc, #116]	@ (800c750 <xTaskCheckForTimeOut+0xc0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f2:	d102      	bne.n	800c6fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	61fb      	str	r3, [r7, #28]
 800c6f8:	e023      	b.n	800c742 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	4b15      	ldr	r3, [pc, #84]	@ (800c754 <xTaskCheckForTimeOut+0xc4>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	429a      	cmp	r2, r3
 800c704:	d007      	beq.n	800c716 <xTaskCheckForTimeOut+0x86>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	69ba      	ldr	r2, [r7, #24]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d302      	bcc.n	800c716 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c710:	2301      	movs	r3, #1
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	e015      	b.n	800c742 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d20b      	bcs.n	800c738 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	1ad2      	subs	r2, r2, r3
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff ff99 	bl	800c664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c732:	2300      	movs	r3, #0
 800c734:	61fb      	str	r3, [r7, #28]
 800c736:	e004      	b.n	800c742 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c73e:	2301      	movs	r3, #1
 800c740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c742:	f000 fe8b 	bl	800d45c <vPortExitCritical>

	return xReturn;
 800c746:	69fb      	ldr	r3, [r7, #28]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3720      	adds	r7, #32
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	24001048 	.word	0x24001048
 800c754:	2400105c 	.word	0x2400105c

0800c758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c758:	b480      	push	{r7}
 800c75a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c75c:	4b03      	ldr	r3, [pc, #12]	@ (800c76c <vTaskMissedYield+0x14>)
 800c75e:	2201      	movs	r2, #1
 800c760:	601a      	str	r2, [r3, #0]
}
 800c762:	bf00      	nop
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	24001058 	.word	0x24001058

0800c770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c778:	f000 f852 	bl	800c820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c77c:	4b06      	ldr	r3, [pc, #24]	@ (800c798 <prvIdleTask+0x28>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d9f9      	bls.n	800c778 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c784:	4b05      	ldr	r3, [pc, #20]	@ (800c79c <prvIdleTask+0x2c>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c794:	e7f0      	b.n	800c778 <prvIdleTask+0x8>
 800c796:	bf00      	nop
 800c798:	24000b74 	.word	0x24000b74
 800c79c:	e000ed04 	.word	0xe000ed04

0800c7a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	607b      	str	r3, [r7, #4]
 800c7aa:	e00c      	b.n	800c7c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4a12      	ldr	r2, [pc, #72]	@ (800c800 <prvInitialiseTaskLists+0x60>)
 800c7b8:	4413      	add	r3, r2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fc18 	bl	800aff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	607b      	str	r3, [r7, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b37      	cmp	r3, #55	@ 0x37
 800c7ca:	d9ef      	bls.n	800c7ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c7cc:	480d      	ldr	r0, [pc, #52]	@ (800c804 <prvInitialiseTaskLists+0x64>)
 800c7ce:	f7fe fc0f 	bl	800aff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c7d2:	480d      	ldr	r0, [pc, #52]	@ (800c808 <prvInitialiseTaskLists+0x68>)
 800c7d4:	f7fe fc0c 	bl	800aff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c7d8:	480c      	ldr	r0, [pc, #48]	@ (800c80c <prvInitialiseTaskLists+0x6c>)
 800c7da:	f7fe fc09 	bl	800aff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c7de:	480c      	ldr	r0, [pc, #48]	@ (800c810 <prvInitialiseTaskLists+0x70>)
 800c7e0:	f7fe fc06 	bl	800aff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c7e4:	480b      	ldr	r0, [pc, #44]	@ (800c814 <prvInitialiseTaskLists+0x74>)
 800c7e6:	f7fe fc03 	bl	800aff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c7ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c818 <prvInitialiseTaskLists+0x78>)
 800c7ec:	4a05      	ldr	r2, [pc, #20]	@ (800c804 <prvInitialiseTaskLists+0x64>)
 800c7ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c81c <prvInitialiseTaskLists+0x7c>)
 800c7f2:	4a05      	ldr	r2, [pc, #20]	@ (800c808 <prvInitialiseTaskLists+0x68>)
 800c7f4:	601a      	str	r2, [r3, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	24000b74 	.word	0x24000b74
 800c804:	24000fd4 	.word	0x24000fd4
 800c808:	24000fe8 	.word	0x24000fe8
 800c80c:	24001004 	.word	0x24001004
 800c810:	24001018 	.word	0x24001018
 800c814:	24001030 	.word	0x24001030
 800c818:	24000ffc 	.word	0x24000ffc
 800c81c:	24001000 	.word	0x24001000

0800c820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c826:	e019      	b.n	800c85c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c828:	f000 fde6 	bl	800d3f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c82c:	4b10      	ldr	r3, [pc, #64]	@ (800c870 <prvCheckTasksWaitingTermination+0x50>)
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3304      	adds	r3, #4
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fe fc63 	bl	800b104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c83e:	4b0d      	ldr	r3, [pc, #52]	@ (800c874 <prvCheckTasksWaitingTermination+0x54>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3b01      	subs	r3, #1
 800c844:	4a0b      	ldr	r2, [pc, #44]	@ (800c874 <prvCheckTasksWaitingTermination+0x54>)
 800c846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c848:	4b0b      	ldr	r3, [pc, #44]	@ (800c878 <prvCheckTasksWaitingTermination+0x58>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	4a0a      	ldr	r2, [pc, #40]	@ (800c878 <prvCheckTasksWaitingTermination+0x58>)
 800c850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c852:	f000 fe03 	bl	800d45c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f810 	bl	800c87c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c85c:	4b06      	ldr	r3, [pc, #24]	@ (800c878 <prvCheckTasksWaitingTermination+0x58>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1e1      	bne.n	800c828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	24001018 	.word	0x24001018
 800c874:	24001044 	.word	0x24001044
 800c878:	2400102c 	.word	0x2400102c

0800c87c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d108      	bne.n	800c8a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c892:	4618      	mov	r0, r3
 800c894:	f000 ffa0 	bl	800d7d8 <vPortFree>
				vPortFree( pxTCB );
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 ff9d 	bl	800d7d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c89e:	e019      	b.n	800c8d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d103      	bne.n	800c8b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 ff94 	bl	800d7d8 <vPortFree>
	}
 800c8b0:	e010      	b.n	800c8d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d00b      	beq.n	800c8d4 <prvDeleteTCB+0x58>
	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	60fb      	str	r3, [r7, #12]
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	e7fd      	b.n	800c8d0 <prvDeleteTCB+0x54>
	}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c914 <prvResetNextTaskUnblockTime+0x38>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d104      	bne.n	800c8f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c918 <prvResetNextTaskUnblockTime+0x3c>)
 800c8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c8f4:	e008      	b.n	800c908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f6:	4b07      	ldr	r3, [pc, #28]	@ (800c914 <prvResetNextTaskUnblockTime+0x38>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	4a04      	ldr	r2, [pc, #16]	@ (800c918 <prvResetNextTaskUnblockTime+0x3c>)
 800c906:	6013      	str	r3, [r2, #0]
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	24000ffc 	.word	0x24000ffc
 800c918:	24001064 	.word	0x24001064

0800c91c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c922:	4b0b      	ldr	r3, [pc, #44]	@ (800c950 <xTaskGetSchedulerState+0x34>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c92a:	2301      	movs	r3, #1
 800c92c:	607b      	str	r3, [r7, #4]
 800c92e:	e008      	b.n	800c942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c930:	4b08      	ldr	r3, [pc, #32]	@ (800c954 <xTaskGetSchedulerState+0x38>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c938:	2302      	movs	r3, #2
 800c93a:	607b      	str	r3, [r7, #4]
 800c93c:	e001      	b.n	800c942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c93e:	2300      	movs	r3, #0
 800c940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c942:	687b      	ldr	r3, [r7, #4]
	}
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	24001050 	.word	0x24001050
 800c954:	2400106c 	.word	0x2400106c

0800c958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c964:	2300      	movs	r3, #0
 800c966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d058      	beq.n	800ca20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c96e:	4b2f      	ldr	r3, [pc, #188]	@ (800ca2c <xTaskPriorityDisinherit+0xd4>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	429a      	cmp	r2, r3
 800c976:	d00b      	beq.n	800c990 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	60fb      	str	r3, [r7, #12]
}
 800c98a:	bf00      	nop
 800c98c:	bf00      	nop
 800c98e:	e7fd      	b.n	800c98c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10b      	bne.n	800c9b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	60bb      	str	r3, [r7, #8]
}
 800c9aa:	bf00      	nop
 800c9ac:	bf00      	nop
 800c9ae:	e7fd      	b.n	800c9ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9b4:	1e5a      	subs	r2, r3, #1
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d02c      	beq.n	800ca20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d128      	bne.n	800ca20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fb96 	bl	800b104 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800ca30 <xTaskPriorityDisinherit+0xd8>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d903      	bls.n	800ca00 <xTaskPriorityDisinherit+0xa8>
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fc:	4a0c      	ldr	r2, [pc, #48]	@ (800ca30 <xTaskPriorityDisinherit+0xd8>)
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca04:	4613      	mov	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	4a09      	ldr	r2, [pc, #36]	@ (800ca34 <xTaskPriorityDisinherit+0xdc>)
 800ca0e:	441a      	add	r2, r3
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	3304      	adds	r3, #4
 800ca14:	4619      	mov	r1, r3
 800ca16:	4610      	mov	r0, r2
 800ca18:	f7fe fb17 	bl	800b04a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca20:	697b      	ldr	r3, [r7, #20]
	}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	24000b70 	.word	0x24000b70
 800ca30:	2400104c 	.word	0x2400104c
 800ca34:	24000b74 	.word	0x24000b74

0800ca38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca42:	4b21      	ldr	r3, [pc, #132]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca48:	4b20      	ldr	r3, [pc, #128]	@ (800cacc <prvAddCurrentTaskToDelayedList+0x94>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fb58 	bl	800b104 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5a:	d10a      	bne.n	800ca72 <prvAddCurrentTaskToDelayedList+0x3a>
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d007      	beq.n	800ca72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca62:	4b1a      	ldr	r3, [pc, #104]	@ (800cacc <prvAddCurrentTaskToDelayedList+0x94>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	3304      	adds	r3, #4
 800ca68:	4619      	mov	r1, r3
 800ca6a:	4819      	ldr	r0, [pc, #100]	@ (800cad0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ca6c:	f7fe faed 	bl	800b04a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca70:	e026      	b.n	800cac0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4413      	add	r3, r2
 800ca78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca7a:	4b14      	ldr	r3, [pc, #80]	@ (800cacc <prvAddCurrentTaskToDelayedList+0x94>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d209      	bcs.n	800ca9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca8a:	4b12      	ldr	r3, [pc, #72]	@ (800cad4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cacc <prvAddCurrentTaskToDelayedList+0x94>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3304      	adds	r3, #4
 800ca94:	4619      	mov	r1, r3
 800ca96:	4610      	mov	r0, r2
 800ca98:	f7fe fafb 	bl	800b092 <vListInsert>
}
 800ca9c:	e010      	b.n	800cac0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cad8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	4b0a      	ldr	r3, [pc, #40]	@ (800cacc <prvAddCurrentTaskToDelayedList+0x94>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3304      	adds	r3, #4
 800caa8:	4619      	mov	r1, r3
 800caaa:	4610      	mov	r0, r2
 800caac:	f7fe faf1 	bl	800b092 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cab0:	4b0a      	ldr	r3, [pc, #40]	@ (800cadc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d202      	bcs.n	800cac0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800caba:	4a08      	ldr	r2, [pc, #32]	@ (800cadc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	6013      	str	r3, [r2, #0]
}
 800cac0:	bf00      	nop
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	24001048 	.word	0x24001048
 800cacc:	24000b70 	.word	0x24000b70
 800cad0:	24001030 	.word	0x24001030
 800cad4:	24001000 	.word	0x24001000
 800cad8:	24000ffc 	.word	0x24000ffc
 800cadc:	24001064 	.word	0x24001064

0800cae0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08a      	sub	sp, #40	@ 0x28
 800cae4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800caea:	f000 fb13 	bl	800d114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800caee:	4b1d      	ldr	r3, [pc, #116]	@ (800cb64 <xTimerCreateTimerTask+0x84>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d021      	beq.n	800cb3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cafe:	1d3a      	adds	r2, r7, #4
 800cb00:	f107 0108 	add.w	r1, r7, #8
 800cb04:	f107 030c 	add.w	r3, r7, #12
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fe fa57 	bl	800afbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb0e:	6879      	ldr	r1, [r7, #4]
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	9202      	str	r2, [sp, #8]
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	2302      	movs	r3, #2
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	460a      	mov	r2, r1
 800cb20:	4911      	ldr	r1, [pc, #68]	@ (800cb68 <xTimerCreateTimerTask+0x88>)
 800cb22:	4812      	ldr	r0, [pc, #72]	@ (800cb6c <xTimerCreateTimerTask+0x8c>)
 800cb24:	f7ff f8d0 	bl	800bcc8 <xTaskCreateStatic>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	4a11      	ldr	r2, [pc, #68]	@ (800cb70 <xTimerCreateTimerTask+0x90>)
 800cb2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb2e:	4b10      	ldr	r3, [pc, #64]	@ (800cb70 <xTimerCreateTimerTask+0x90>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb36:	2301      	movs	r3, #1
 800cb38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10b      	bne.n	800cb58 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	613b      	str	r3, [r7, #16]
}
 800cb52:	bf00      	nop
 800cb54:	bf00      	nop
 800cb56:	e7fd      	b.n	800cb54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb58:	697b      	ldr	r3, [r7, #20]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	240010a0 	.word	0x240010a0
 800cb68:	080129ac 	.word	0x080129ac
 800cb6c:	0800ccad 	.word	0x0800ccad
 800cb70:	240010a4 	.word	0x240010a4

0800cb74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	@ 0x28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10b      	bne.n	800cba4 <xTimerGenericCommand+0x30>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	623b      	str	r3, [r7, #32]
}
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cba4:	4b19      	ldr	r3, [pc, #100]	@ (800cc0c <xTimerGenericCommand+0x98>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d02a      	beq.n	800cc02 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	dc18      	bgt.n	800cbf0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cbbe:	f7ff fead 	bl	800c91c <xTaskGetSchedulerState>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d109      	bne.n	800cbdc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cbc8:	4b10      	ldr	r3, [pc, #64]	@ (800cc0c <xTimerGenericCommand+0x98>)
 800cbca:	6818      	ldr	r0, [r3, #0]
 800cbcc:	f107 0110 	add.w	r1, r7, #16
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbd4:	f7fe fc06 	bl	800b3e4 <xQueueGenericSend>
 800cbd8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbda:	e012      	b.n	800cc02 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cbdc:	4b0b      	ldr	r3, [pc, #44]	@ (800cc0c <xTimerGenericCommand+0x98>)
 800cbde:	6818      	ldr	r0, [r3, #0]
 800cbe0:	f107 0110 	add.w	r1, r7, #16
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f7fe fbfc 	bl	800b3e4 <xQueueGenericSend>
 800cbec:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbee:	e008      	b.n	800cc02 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbf0:	4b06      	ldr	r3, [pc, #24]	@ (800cc0c <xTimerGenericCommand+0x98>)
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	f107 0110 	add.w	r1, r7, #16
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	f7fe fcf4 	bl	800b5e8 <xQueueGenericSendFromISR>
 800cc00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3728      	adds	r7, #40	@ 0x28
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	240010a0 	.word	0x240010a0

0800cc10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1a:	4b23      	ldr	r3, [pc, #140]	@ (800cca8 <prvProcessExpiredTimer+0x98>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	3304      	adds	r3, #4
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe fa6b 	bl	800b104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d023      	beq.n	800cc84 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	699a      	ldr	r2, [r3, #24]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	18d1      	adds	r1, r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	6978      	ldr	r0, [r7, #20]
 800cc4a:	f000 f8d5 	bl	800cdf8 <prvInsertTimerInActiveList>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d020      	beq.n	800cc96 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc54:	2300      	movs	r3, #0
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	6978      	ldr	r0, [r7, #20]
 800cc60:	f7ff ff88 	bl	800cb74 <xTimerGenericCommand>
 800cc64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d114      	bne.n	800cc96 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	60fb      	str	r3, [r7, #12]
}
 800cc7e:	bf00      	nop
 800cc80:	bf00      	nop
 800cc82:	e7fd      	b.n	800cc80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc8a:	f023 0301 	bic.w	r3, r3, #1
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	6978      	ldr	r0, [r7, #20]
 800cc9c:	4798      	blx	r3
}
 800cc9e:	bf00      	nop
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	24001098 	.word	0x24001098

0800ccac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccb4:	f107 0308 	add.w	r3, r7, #8
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f000 f859 	bl	800cd70 <prvGetNextExpireTime>
 800ccbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 f805 	bl	800ccd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ccca:	f000 f8d7 	bl	800ce7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccce:	bf00      	nop
 800ccd0:	e7f0      	b.n	800ccb4 <prvTimerTask+0x8>
	...

0800ccd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ccde:	f7ff fa37 	bl	800c150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cce2:	f107 0308 	add.w	r3, r7, #8
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 f866 	bl	800cdb8 <prvSampleTimeNow>
 800ccec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d130      	bne.n	800cd56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <prvProcessTimerOrBlockTask+0x3c>
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d806      	bhi.n	800cd10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd02:	f7ff fa33 	bl	800c16c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ff81 	bl	800cc10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd0e:	e024      	b.n	800cd5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d008      	beq.n	800cd28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd16:	4b13      	ldr	r3, [pc, #76]	@ (800cd64 <prvProcessTimerOrBlockTask+0x90>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <prvProcessTimerOrBlockTask+0x50>
 800cd20:	2301      	movs	r3, #1
 800cd22:	e000      	b.n	800cd26 <prvProcessTimerOrBlockTask+0x52>
 800cd24:	2300      	movs	r3, #0
 800cd26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd28:	4b0f      	ldr	r3, [pc, #60]	@ (800cd68 <prvProcessTimerOrBlockTask+0x94>)
 800cd2a:	6818      	ldr	r0, [r3, #0]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	4619      	mov	r1, r3
 800cd36:	f7fe ff93 	bl	800bc60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd3a:	f7ff fa17 	bl	800c16c <xTaskResumeAll>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10a      	bne.n	800cd5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd44:	4b09      	ldr	r3, [pc, #36]	@ (800cd6c <prvProcessTimerOrBlockTask+0x98>)
 800cd46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd4a:	601a      	str	r2, [r3, #0]
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	f3bf 8f6f 	isb	sy
}
 800cd54:	e001      	b.n	800cd5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd56:	f7ff fa09 	bl	800c16c <xTaskResumeAll>
}
 800cd5a:	bf00      	nop
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	2400109c 	.word	0x2400109c
 800cd68:	240010a0 	.word	0x240010a0
 800cd6c:	e000ed04 	.word	0xe000ed04

0800cd70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd78:	4b0e      	ldr	r3, [pc, #56]	@ (800cdb4 <prvGetNextExpireTime+0x44>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <prvGetNextExpireTime+0x16>
 800cd82:	2201      	movs	r2, #1
 800cd84:	e000      	b.n	800cd88 <prvGetNextExpireTime+0x18>
 800cd86:	2200      	movs	r2, #0
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d105      	bne.n	800cda0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd94:	4b07      	ldr	r3, [pc, #28]	@ (800cdb4 <prvGetNextExpireTime+0x44>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	e001      	b.n	800cda4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cda0:	2300      	movs	r3, #0
 800cda2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cda4:	68fb      	ldr	r3, [r7, #12]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	24001098 	.word	0x24001098

0800cdb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cdc0:	f7ff fa72 	bl	800c2a8 <xTaskGetTickCount>
 800cdc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cdc6:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf4 <prvSampleTimeNow+0x3c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68fa      	ldr	r2, [r7, #12]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d205      	bcs.n	800cddc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cdd0:	f000 f93a 	bl	800d048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	e002      	b.n	800cde2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cde2:	4a04      	ldr	r2, [pc, #16]	@ (800cdf4 <prvSampleTimeNow+0x3c>)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cde8:	68fb      	ldr	r3, [r7, #12]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	240010a8 	.word	0x240010a8

0800cdf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b086      	sub	sp, #24
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
 800ce04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d812      	bhi.n	800ce44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	1ad2      	subs	r2, r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d302      	bcc.n	800ce32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	617b      	str	r3, [r7, #20]
 800ce30:	e01b      	b.n	800ce6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce32:	4b10      	ldr	r3, [pc, #64]	@ (800ce74 <prvInsertTimerInActiveList+0x7c>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3304      	adds	r3, #4
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f7fe f928 	bl	800b092 <vListInsert>
 800ce42:	e012      	b.n	800ce6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d206      	bcs.n	800ce5a <prvInsertTimerInActiveList+0x62>
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d302      	bcc.n	800ce5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce54:	2301      	movs	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
 800ce58:	e007      	b.n	800ce6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce5a:	4b07      	ldr	r3, [pc, #28]	@ (800ce78 <prvInsertTimerInActiveList+0x80>)
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3304      	adds	r3, #4
 800ce62:	4619      	mov	r1, r3
 800ce64:	4610      	mov	r0, r2
 800ce66:	f7fe f914 	bl	800b092 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce6a:	697b      	ldr	r3, [r7, #20]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	2400109c 	.word	0x2400109c
 800ce78:	24001098 	.word	0x24001098

0800ce7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08e      	sub	sp, #56	@ 0x38
 800ce80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce82:	e0ce      	b.n	800d022 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	da19      	bge.n	800cebe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce8a:	1d3b      	adds	r3, r7, #4
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10b      	bne.n	800ceae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	61fb      	str	r3, [r7, #28]
}
 800cea8:	bf00      	nop
 800ceaa:	bf00      	nop
 800ceac:	e7fd      	b.n	800ceaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ceae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb4:	6850      	ldr	r0, [r2, #4]
 800ceb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb8:	6892      	ldr	r2, [r2, #8]
 800ceba:	4611      	mov	r1, r2
 800cebc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f2c0 80ae 	blt.w	800d022 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d004      	beq.n	800cedc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ced2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced4:	3304      	adds	r3, #4
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe f914 	bl	800b104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cedc:	463b      	mov	r3, r7
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff ff6a 	bl	800cdb8 <prvSampleTimeNow>
 800cee4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b09      	cmp	r3, #9
 800ceea:	f200 8097 	bhi.w	800d01c <prvProcessReceivedCommands+0x1a0>
 800ceee:	a201      	add	r2, pc, #4	@ (adr r2, 800cef4 <prvProcessReceivedCommands+0x78>)
 800cef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef4:	0800cf1d 	.word	0x0800cf1d
 800cef8:	0800cf1d 	.word	0x0800cf1d
 800cefc:	0800cf1d 	.word	0x0800cf1d
 800cf00:	0800cf93 	.word	0x0800cf93
 800cf04:	0800cfa7 	.word	0x0800cfa7
 800cf08:	0800cff3 	.word	0x0800cff3
 800cf0c:	0800cf1d 	.word	0x0800cf1d
 800cf10:	0800cf1d 	.word	0x0800cf1d
 800cf14:	0800cf93 	.word	0x0800cf93
 800cf18:	0800cfa7 	.word	0x0800cfa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf22:	f043 0301 	orr.w	r3, r3, #1
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	18d1      	adds	r1, r2, r3
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf3c:	f7ff ff5c 	bl	800cdf8 <prvInsertTimerInActiveList>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d06c      	beq.n	800d020 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf54:	f003 0304 	and.w	r3, r3, #4
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d061      	beq.n	800d020 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf60:	699b      	ldr	r3, [r3, #24]
 800cf62:	441a      	add	r2, r3
 800cf64:	2300      	movs	r3, #0
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	2300      	movs	r3, #0
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf6e:	f7ff fe01 	bl	800cb74 <xTimerGenericCommand>
 800cf72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d152      	bne.n	800d020 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	61bb      	str	r3, [r7, #24]
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	e7fd      	b.n	800cf8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf98:	f023 0301 	bic.w	r3, r3, #1
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cfa4:	e03d      	b.n	800d022 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfac:	f043 0301 	orr.w	r3, r3, #1
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10b      	bne.n	800cfde <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	617b      	str	r3, [r7, #20]
}
 800cfd8:	bf00      	nop
 800cfda:	bf00      	nop
 800cfdc:	e7fd      	b.n	800cfda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe0:	699a      	ldr	r2, [r3, #24]
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	18d1      	adds	r1, r2, r3
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfec:	f7ff ff04 	bl	800cdf8 <prvInsertTimerInActiveList>
					break;
 800cff0:	e017      	b.n	800d022 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cff8:	f003 0302 	and.w	r3, r3, #2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d103      	bne.n	800d008 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d002:	f000 fbe9 	bl	800d7d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d006:	e00c      	b.n	800d022 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d00e:	f023 0301 	bic.w	r3, r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d016:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d01a:	e002      	b.n	800d022 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d01c:	bf00      	nop
 800d01e:	e000      	b.n	800d022 <prvProcessReceivedCommands+0x1a6>
					break;
 800d020:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d022:	4b08      	ldr	r3, [pc, #32]	@ (800d044 <prvProcessReceivedCommands+0x1c8>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	1d39      	adds	r1, r7, #4
 800d028:	2200      	movs	r2, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fb7a 	bl	800b724 <xQueueReceive>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	f47f af26 	bne.w	800ce84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d038:	bf00      	nop
 800d03a:	bf00      	nop
 800d03c:	3730      	adds	r7, #48	@ 0x30
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	240010a0 	.word	0x240010a0

0800d048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d04e:	e049      	b.n	800d0e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d050:	4b2e      	ldr	r3, [pc, #184]	@ (800d10c <prvSwitchTimerLists+0xc4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d05a:	4b2c      	ldr	r3, [pc, #176]	@ (800d10c <prvSwitchTimerLists+0xc4>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	3304      	adds	r3, #4
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe f84b 	bl	800b104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d07c:	f003 0304 	and.w	r3, r3, #4
 800d080:	2b00      	cmp	r3, #0
 800d082:	d02f      	beq.n	800d0e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	693a      	ldr	r2, [r7, #16]
 800d08a:	4413      	add	r3, r2
 800d08c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	429a      	cmp	r2, r3
 800d094:	d90e      	bls.n	800d0b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d10c <prvSwitchTimerLists+0xc4>)
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7fd fff0 	bl	800b092 <vListInsert>
 800d0b2:	e017      	b.n	800d0e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	2100      	movs	r1, #0
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f7ff fd58 	bl	800cb74 <xTimerGenericCommand>
 800d0c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10b      	bne.n	800d0e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	603b      	str	r3, [r7, #0]
}
 800d0de:	bf00      	nop
 800d0e0:	bf00      	nop
 800d0e2:	e7fd      	b.n	800d0e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0e4:	4b09      	ldr	r3, [pc, #36]	@ (800d10c <prvSwitchTimerLists+0xc4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d1b0      	bne.n	800d050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d0ee:	4b07      	ldr	r3, [pc, #28]	@ (800d10c <prvSwitchTimerLists+0xc4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d0f4:	4b06      	ldr	r3, [pc, #24]	@ (800d110 <prvSwitchTimerLists+0xc8>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a04      	ldr	r2, [pc, #16]	@ (800d10c <prvSwitchTimerLists+0xc4>)
 800d0fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d0fc:	4a04      	ldr	r2, [pc, #16]	@ (800d110 <prvSwitchTimerLists+0xc8>)
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	6013      	str	r3, [r2, #0]
}
 800d102:	bf00      	nop
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	24001098 	.word	0x24001098
 800d110:	2400109c 	.word	0x2400109c

0800d114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d11a:	f000 f96d 	bl	800d3f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d11e:	4b15      	ldr	r3, [pc, #84]	@ (800d174 <prvCheckForValidListAndQueue+0x60>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d120      	bne.n	800d168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d126:	4814      	ldr	r0, [pc, #80]	@ (800d178 <prvCheckForValidListAndQueue+0x64>)
 800d128:	f7fd ff62 	bl	800aff0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d12c:	4813      	ldr	r0, [pc, #76]	@ (800d17c <prvCheckForValidListAndQueue+0x68>)
 800d12e:	f7fd ff5f 	bl	800aff0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d132:	4b13      	ldr	r3, [pc, #76]	@ (800d180 <prvCheckForValidListAndQueue+0x6c>)
 800d134:	4a10      	ldr	r2, [pc, #64]	@ (800d178 <prvCheckForValidListAndQueue+0x64>)
 800d136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d138:	4b12      	ldr	r3, [pc, #72]	@ (800d184 <prvCheckForValidListAndQueue+0x70>)
 800d13a:	4a10      	ldr	r2, [pc, #64]	@ (800d17c <prvCheckForValidListAndQueue+0x68>)
 800d13c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d13e:	2300      	movs	r3, #0
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	4b11      	ldr	r3, [pc, #68]	@ (800d188 <prvCheckForValidListAndQueue+0x74>)
 800d144:	4a11      	ldr	r2, [pc, #68]	@ (800d18c <prvCheckForValidListAndQueue+0x78>)
 800d146:	2110      	movs	r1, #16
 800d148:	200a      	movs	r0, #10
 800d14a:	f7fe f86f 	bl	800b22c <xQueueGenericCreateStatic>
 800d14e:	4603      	mov	r3, r0
 800d150:	4a08      	ldr	r2, [pc, #32]	@ (800d174 <prvCheckForValidListAndQueue+0x60>)
 800d152:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d154:	4b07      	ldr	r3, [pc, #28]	@ (800d174 <prvCheckForValidListAndQueue+0x60>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d005      	beq.n	800d168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d15c:	4b05      	ldr	r3, [pc, #20]	@ (800d174 <prvCheckForValidListAndQueue+0x60>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	490b      	ldr	r1, [pc, #44]	@ (800d190 <prvCheckForValidListAndQueue+0x7c>)
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fd52 	bl	800bc0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d168:	f000 f978 	bl	800d45c <vPortExitCritical>
}
 800d16c:	bf00      	nop
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	240010a0 	.word	0x240010a0
 800d178:	24001070 	.word	0x24001070
 800d17c:	24001084 	.word	0x24001084
 800d180:	24001098 	.word	0x24001098
 800d184:	2400109c 	.word	0x2400109c
 800d188:	2400114c 	.word	0x2400114c
 800d18c:	240010ac 	.word	0x240010ac
 800d190:	080129b4 	.word	0x080129b4

0800d194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3b04      	subs	r3, #4
 800d1a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d1ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3b04      	subs	r3, #4
 800d1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f023 0201 	bic.w	r2, r3, #1
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3b04      	subs	r3, #4
 800d1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1c4:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f8 <pxPortInitialiseStack+0x64>)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3b14      	subs	r3, #20
 800d1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3b04      	subs	r3, #4
 800d1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f06f 0202 	mvn.w	r2, #2
 800d1e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3b20      	subs	r3, #32
 800d1e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	0800d1fd 	.word	0x0800d1fd

0800d1fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d206:	4b13      	ldr	r3, [pc, #76]	@ (800d254 <prvTaskExitError+0x58>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20e:	d00b      	beq.n	800d228 <prvTaskExitError+0x2c>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	60fb      	str	r3, [r7, #12]
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	e7fd      	b.n	800d224 <prvTaskExitError+0x28>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	60bb      	str	r3, [r7, #8]
}
 800d23a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d23c:	bf00      	nop
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0fc      	beq.n	800d23e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d244:	bf00      	nop
 800d246:	bf00      	nop
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	2400001c 	.word	0x2400001c
	...

0800d260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d260:	4b07      	ldr	r3, [pc, #28]	@ (800d280 <pxCurrentTCBConst2>)
 800d262:	6819      	ldr	r1, [r3, #0]
 800d264:	6808      	ldr	r0, [r1, #0]
 800d266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	f380 8809 	msr	PSP, r0
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f04f 0000 	mov.w	r0, #0
 800d276:	f380 8811 	msr	BASEPRI, r0
 800d27a:	4770      	bx	lr
 800d27c:	f3af 8000 	nop.w

0800d280 <pxCurrentTCBConst2>:
 800d280:	24000b70 	.word	0x24000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop

0800d288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d288:	4808      	ldr	r0, [pc, #32]	@ (800d2ac <prvPortStartFirstTask+0x24>)
 800d28a:	6800      	ldr	r0, [r0, #0]
 800d28c:	6800      	ldr	r0, [r0, #0]
 800d28e:	f380 8808 	msr	MSP, r0
 800d292:	f04f 0000 	mov.w	r0, #0
 800d296:	f380 8814 	msr	CONTROL, r0
 800d29a:	b662      	cpsie	i
 800d29c:	b661      	cpsie	f
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	df00      	svc	0
 800d2a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2aa:	bf00      	nop
 800d2ac:	e000ed08 	.word	0xe000ed08

0800d2b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d2b6:	4b47      	ldr	r3, [pc, #284]	@ (800d3d4 <xPortStartScheduler+0x124>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a47      	ldr	r2, [pc, #284]	@ (800d3d8 <xPortStartScheduler+0x128>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d10b      	bne.n	800d2d8 <xPortStartScheduler+0x28>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	60fb      	str	r3, [r7, #12]
}
 800d2d2:	bf00      	nop
 800d2d4:	bf00      	nop
 800d2d6:	e7fd      	b.n	800d2d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d2d8:	4b3e      	ldr	r3, [pc, #248]	@ (800d3d4 <xPortStartScheduler+0x124>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a3f      	ldr	r2, [pc, #252]	@ (800d3dc <xPortStartScheduler+0x12c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d10b      	bne.n	800d2fa <xPortStartScheduler+0x4a>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	613b      	str	r3, [r7, #16]
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop
 800d2f8:	e7fd      	b.n	800d2f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2fa:	4b39      	ldr	r3, [pc, #228]	@ (800d3e0 <xPortStartScheduler+0x130>)
 800d2fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	b2db      	uxtb	r3, r3
 800d304:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	22ff      	movs	r2, #255	@ 0xff
 800d30a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	b2db      	uxtb	r3, r3
 800d312:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	4b31      	ldr	r3, [pc, #196]	@ (800d3e4 <xPortStartScheduler+0x134>)
 800d320:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d322:	4b31      	ldr	r3, [pc, #196]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d324:	2207      	movs	r2, #7
 800d326:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d328:	e009      	b.n	800d33e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d32a:	4b2f      	ldr	r3, [pc, #188]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3b01      	subs	r3, #1
 800d330:	4a2d      	ldr	r2, [pc, #180]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d332:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d334:	78fb      	ldrb	r3, [r7, #3]
 800d336:	b2db      	uxtb	r3, r3
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d33e:	78fb      	ldrb	r3, [r7, #3]
 800d340:	b2db      	uxtb	r3, r3
 800d342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d346:	2b80      	cmp	r3, #128	@ 0x80
 800d348:	d0ef      	beq.n	800d32a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d34a:	4b27      	ldr	r3, [pc, #156]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f1c3 0307 	rsb	r3, r3, #7
 800d352:	2b04      	cmp	r3, #4
 800d354:	d00b      	beq.n	800d36e <xPortStartScheduler+0xbe>
	__asm volatile
 800d356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	60bb      	str	r3, [r7, #8]
}
 800d368:	bf00      	nop
 800d36a:	bf00      	nop
 800d36c:	e7fd      	b.n	800d36a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d36e:	4b1e      	ldr	r3, [pc, #120]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	4a1c      	ldr	r2, [pc, #112]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d378:	4b1b      	ldr	r3, [pc, #108]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d380:	4a19      	ldr	r2, [pc, #100]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	b2da      	uxtb	r2, r3
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d38c:	4b17      	ldr	r3, [pc, #92]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a16      	ldr	r2, [pc, #88]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d398:	4b14      	ldr	r3, [pc, #80]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a13      	ldr	r2, [pc, #76]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d39e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d3a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3a4:	f000 f8da 	bl	800d55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3a8:	4b11      	ldr	r3, [pc, #68]	@ (800d3f0 <xPortStartScheduler+0x140>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3ae:	f000 f8f9 	bl	800d5a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3b2:	4b10      	ldr	r3, [pc, #64]	@ (800d3f4 <xPortStartScheduler+0x144>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a0f      	ldr	r2, [pc, #60]	@ (800d3f4 <xPortStartScheduler+0x144>)
 800d3b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d3bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3be:	f7ff ff63 	bl	800d288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3c2:	f7ff f83b 	bl	800c43c <vTaskSwitchContext>
	prvTaskExitError();
 800d3c6:	f7ff ff19 	bl	800d1fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	e000ed00 	.word	0xe000ed00
 800d3d8:	410fc271 	.word	0x410fc271
 800d3dc:	410fc270 	.word	0x410fc270
 800d3e0:	e000e400 	.word	0xe000e400
 800d3e4:	2400119c 	.word	0x2400119c
 800d3e8:	240011a0 	.word	0x240011a0
 800d3ec:	e000ed20 	.word	0xe000ed20
 800d3f0:	2400001c 	.word	0x2400001c
 800d3f4:	e000ef34 	.word	0xe000ef34

0800d3f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	607b      	str	r3, [r7, #4]
}
 800d410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d412:	4b10      	ldr	r3, [pc, #64]	@ (800d454 <vPortEnterCritical+0x5c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3301      	adds	r3, #1
 800d418:	4a0e      	ldr	r2, [pc, #56]	@ (800d454 <vPortEnterCritical+0x5c>)
 800d41a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d41c:	4b0d      	ldr	r3, [pc, #52]	@ (800d454 <vPortEnterCritical+0x5c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d110      	bne.n	800d446 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d424:	4b0c      	ldr	r3, [pc, #48]	@ (800d458 <vPortEnterCritical+0x60>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00b      	beq.n	800d446 <vPortEnterCritical+0x4e>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	603b      	str	r3, [r7, #0]
}
 800d440:	bf00      	nop
 800d442:	bf00      	nop
 800d444:	e7fd      	b.n	800d442 <vPortEnterCritical+0x4a>
	}
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	2400001c 	.word	0x2400001c
 800d458:	e000ed04 	.word	0xe000ed04

0800d45c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d462:	4b12      	ldr	r3, [pc, #72]	@ (800d4ac <vPortExitCritical+0x50>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10b      	bne.n	800d482 <vPortExitCritical+0x26>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	607b      	str	r3, [r7, #4]
}
 800d47c:	bf00      	nop
 800d47e:	bf00      	nop
 800d480:	e7fd      	b.n	800d47e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d482:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ac <vPortExitCritical+0x50>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3b01      	subs	r3, #1
 800d488:	4a08      	ldr	r2, [pc, #32]	@ (800d4ac <vPortExitCritical+0x50>)
 800d48a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d48c:	4b07      	ldr	r3, [pc, #28]	@ (800d4ac <vPortExitCritical+0x50>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d105      	bne.n	800d4a0 <vPortExitCritical+0x44>
 800d494:	2300      	movs	r3, #0
 800d496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f383 8811 	msr	BASEPRI, r3
}
 800d49e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	2400001c 	.word	0x2400001c

0800d4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4b0:	f3ef 8009 	mrs	r0, PSP
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	4b15      	ldr	r3, [pc, #84]	@ (800d510 <pxCurrentTCBConst>)
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	f01e 0f10 	tst.w	lr, #16
 800d4c0:	bf08      	it	eq
 800d4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ca:	6010      	str	r0, [r2, #0]
 800d4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d4d4:	f380 8811 	msr	BASEPRI, r0
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f7fe ffac 	bl	800c43c <vTaskSwitchContext>
 800d4e4:	f04f 0000 	mov.w	r0, #0
 800d4e8:	f380 8811 	msr	BASEPRI, r0
 800d4ec:	bc09      	pop	{r0, r3}
 800d4ee:	6819      	ldr	r1, [r3, #0]
 800d4f0:	6808      	ldr	r0, [r1, #0]
 800d4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f6:	f01e 0f10 	tst.w	lr, #16
 800d4fa:	bf08      	it	eq
 800d4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d500:	f380 8809 	msr	PSP, r0
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w

0800d510 <pxCurrentTCBConst>:
 800d510:	24000b70 	.word	0x24000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop

0800d518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	607b      	str	r3, [r7, #4]
}
 800d530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d532:	f7fe fec9 	bl	800c2c8 <xTaskIncrementTick>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d53c:	4b06      	ldr	r3, [pc, #24]	@ (800d558 <xPortSysTickHandler+0x40>)
 800d53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	2300      	movs	r3, #0
 800d546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	f383 8811 	msr	BASEPRI, r3
}
 800d54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d55c:	b480      	push	{r7}
 800d55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d560:	4b0b      	ldr	r3, [pc, #44]	@ (800d590 <vPortSetupTimerInterrupt+0x34>)
 800d562:	2200      	movs	r2, #0
 800d564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d566:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <vPortSetupTimerInterrupt+0x38>)
 800d568:	2200      	movs	r2, #0
 800d56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d56c:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <vPortSetupTimerInterrupt+0x3c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a0a      	ldr	r2, [pc, #40]	@ (800d59c <vPortSetupTimerInterrupt+0x40>)
 800d572:	fba2 2303 	umull	r2, r3, r2, r3
 800d576:	099b      	lsrs	r3, r3, #6
 800d578:	4a09      	ldr	r2, [pc, #36]	@ (800d5a0 <vPortSetupTimerInterrupt+0x44>)
 800d57a:	3b01      	subs	r3, #1
 800d57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d57e:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <vPortSetupTimerInterrupt+0x34>)
 800d580:	2207      	movs	r2, #7
 800d582:	601a      	str	r2, [r3, #0]
}
 800d584:	bf00      	nop
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	e000e010 	.word	0xe000e010
 800d594:	e000e018 	.word	0xe000e018
 800d598:	2400000c 	.word	0x2400000c
 800d59c:	10624dd3 	.word	0x10624dd3
 800d5a0:	e000e014 	.word	0xe000e014

0800d5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5b4 <vPortEnableVFP+0x10>
 800d5a8:	6801      	ldr	r1, [r0, #0]
 800d5aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d5ae:	6001      	str	r1, [r0, #0]
 800d5b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5b2:	bf00      	nop
 800d5b4:	e000ed88 	.word	0xe000ed88

0800d5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5be:	f3ef 8305 	mrs	r3, IPSR
 800d5c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b0f      	cmp	r3, #15
 800d5c8:	d915      	bls.n	800d5f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5ca:	4a18      	ldr	r2, [pc, #96]	@ (800d62c <vPortValidateInterruptPriority+0x74>)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5d4:	4b16      	ldr	r3, [pc, #88]	@ (800d630 <vPortValidateInterruptPriority+0x78>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	7afa      	ldrb	r2, [r7, #11]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d20b      	bcs.n	800d5f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	607b      	str	r3, [r7, #4]
}
 800d5f0:	bf00      	nop
 800d5f2:	bf00      	nop
 800d5f4:	e7fd      	b.n	800d5f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d634 <vPortValidateInterruptPriority+0x7c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d638 <vPortValidateInterruptPriority+0x80>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d90b      	bls.n	800d61e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	603b      	str	r3, [r7, #0]
}
 800d618:	bf00      	nop
 800d61a:	bf00      	nop
 800d61c:	e7fd      	b.n	800d61a <vPortValidateInterruptPriority+0x62>
	}
 800d61e:	bf00      	nop
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	e000e3f0 	.word	0xe000e3f0
 800d630:	2400119c 	.word	0x2400119c
 800d634:	e000ed0c 	.word	0xe000ed0c
 800d638:	240011a0 	.word	0x240011a0

0800d63c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08a      	sub	sp, #40	@ 0x28
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d644:	2300      	movs	r3, #0
 800d646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d648:	f7fe fd82 	bl	800c150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d64c:	4b5c      	ldr	r3, [pc, #368]	@ (800d7c0 <pvPortMalloc+0x184>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d654:	f000 f924 	bl	800d8a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d658:	4b5a      	ldr	r3, [pc, #360]	@ (800d7c4 <pvPortMalloc+0x188>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	4013      	ands	r3, r2
 800d660:	2b00      	cmp	r3, #0
 800d662:	f040 8095 	bne.w	800d790 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01e      	beq.n	800d6aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d66c:	2208      	movs	r2, #8
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4413      	add	r3, r2
 800d672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d015      	beq.n	800d6aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f023 0307 	bic.w	r3, r3, #7
 800d684:	3308      	adds	r3, #8
 800d686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f003 0307 	and.w	r3, r3, #7
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00b      	beq.n	800d6aa <pvPortMalloc+0x6e>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	617b      	str	r3, [r7, #20]
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	e7fd      	b.n	800d6a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d06f      	beq.n	800d790 <pvPortMalloc+0x154>
 800d6b0:	4b45      	ldr	r3, [pc, #276]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d86a      	bhi.n	800d790 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6ba:	4b44      	ldr	r3, [pc, #272]	@ (800d7cc <pvPortMalloc+0x190>)
 800d6bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6be:	4b43      	ldr	r3, [pc, #268]	@ (800d7cc <pvPortMalloc+0x190>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6c4:	e004      	b.n	800d6d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d903      	bls.n	800d6e2 <pvPortMalloc+0xa6>
 800d6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1f1      	bne.n	800d6c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6e2:	4b37      	ldr	r3, [pc, #220]	@ (800d7c0 <pvPortMalloc+0x184>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d051      	beq.n	800d790 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2208      	movs	r2, #8
 800d6f2:	4413      	add	r3, r2
 800d6f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	1ad2      	subs	r2, r2, r3
 800d706:	2308      	movs	r3, #8
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d920      	bls.n	800d750 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4413      	add	r3, r2
 800d714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	f003 0307 	and.w	r3, r3, #7
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <pvPortMalloc+0xfc>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	613b      	str	r3, [r7, #16]
}
 800d732:	bf00      	nop
 800d734:	bf00      	nop
 800d736:	e7fd      	b.n	800d734 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	1ad2      	subs	r2, r2, r3
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d74a:	69b8      	ldr	r0, [r7, #24]
 800d74c:	f000 f90a 	bl	800d964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d750:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	4a1b      	ldr	r2, [pc, #108]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d75c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d75e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	4b1b      	ldr	r3, [pc, #108]	@ (800d7d0 <pvPortMalloc+0x194>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d203      	bcs.n	800d772 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d76a:	4b17      	ldr	r3, [pc, #92]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a18      	ldr	r2, [pc, #96]	@ (800d7d0 <pvPortMalloc+0x194>)
 800d770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	4b13      	ldr	r3, [pc, #76]	@ (800d7c4 <pvPortMalloc+0x188>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	431a      	orrs	r2, r3
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d786:	4b13      	ldr	r3, [pc, #76]	@ (800d7d4 <pvPortMalloc+0x198>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a11      	ldr	r2, [pc, #68]	@ (800d7d4 <pvPortMalloc+0x198>)
 800d78e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d790:	f7fe fcec 	bl	800c16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00b      	beq.n	800d7b6 <pvPortMalloc+0x17a>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	60fb      	str	r3, [r7, #12]
}
 800d7b0:	bf00      	nop
 800d7b2:	bf00      	nop
 800d7b4:	e7fd      	b.n	800d7b2 <pvPortMalloc+0x176>
	return pvReturn;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3728      	adds	r7, #40	@ 0x28
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	24004dac 	.word	0x24004dac
 800d7c4:	24004dc0 	.word	0x24004dc0
 800d7c8:	24004db0 	.word	0x24004db0
 800d7cc:	24004da4 	.word	0x24004da4
 800d7d0:	24004db4 	.word	0x24004db4
 800d7d4:	24004db8 	.word	0x24004db8

0800d7d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d04f      	beq.n	800d88a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7ea:	2308      	movs	r3, #8
 800d7ec:	425b      	negs	r3, r3
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	4b25      	ldr	r3, [pc, #148]	@ (800d894 <vPortFree+0xbc>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4013      	ands	r3, r2
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <vPortFree+0x46>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	60fb      	str	r3, [r7, #12]
}
 800d818:	bf00      	nop
 800d81a:	bf00      	nop
 800d81c:	e7fd      	b.n	800d81a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00b      	beq.n	800d83e <vPortFree+0x66>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	60bb      	str	r3, [r7, #8]
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	e7fd      	b.n	800d83a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	4b14      	ldr	r3, [pc, #80]	@ (800d894 <vPortFree+0xbc>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4013      	ands	r3, r2
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d01e      	beq.n	800d88a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d11a      	bne.n	800d88a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <vPortFree+0xbc>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	43db      	mvns	r3, r3
 800d85e:	401a      	ands	r2, r3
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d864:	f7fe fc74 	bl	800c150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	685a      	ldr	r2, [r3, #4]
 800d86c:	4b0a      	ldr	r3, [pc, #40]	@ (800d898 <vPortFree+0xc0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4413      	add	r3, r2
 800d872:	4a09      	ldr	r2, [pc, #36]	@ (800d898 <vPortFree+0xc0>)
 800d874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d876:	6938      	ldr	r0, [r7, #16]
 800d878:	f000 f874 	bl	800d964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d87c:	4b07      	ldr	r3, [pc, #28]	@ (800d89c <vPortFree+0xc4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	3301      	adds	r3, #1
 800d882:	4a06      	ldr	r2, [pc, #24]	@ (800d89c <vPortFree+0xc4>)
 800d884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d886:	f7fe fc71 	bl	800c16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d88a:	bf00      	nop
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	24004dc0 	.word	0x24004dc0
 800d898:	24004db0 	.word	0x24004db0
 800d89c:	24004dbc 	.word	0x24004dbc

0800d8a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d8aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8ac:	4b27      	ldr	r3, [pc, #156]	@ (800d94c <prvHeapInit+0xac>)
 800d8ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f003 0307 	and.w	r3, r3, #7
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00c      	beq.n	800d8d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	3307      	adds	r3, #7
 800d8be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f023 0307 	bic.w	r3, r3, #7
 800d8c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d94c <prvHeapInit+0xac>)
 800d8d0:	4413      	add	r3, r2
 800d8d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d950 <prvHeapInit+0xb0>)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8de:	4b1c      	ldr	r3, [pc, #112]	@ (800d950 <prvHeapInit+0xb0>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8ec:	2208      	movs	r2, #8
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	1a9b      	subs	r3, r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	4a15      	ldr	r2, [pc, #84]	@ (800d954 <prvHeapInit+0xb4>)
 800d900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d902:	4b14      	ldr	r3, [pc, #80]	@ (800d954 <prvHeapInit+0xb4>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2200      	movs	r2, #0
 800d908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d90a:	4b12      	ldr	r3, [pc, #72]	@ (800d954 <prvHeapInit+0xb4>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2200      	movs	r2, #0
 800d910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	1ad2      	subs	r2, r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d920:	4b0c      	ldr	r3, [pc, #48]	@ (800d954 <prvHeapInit+0xb4>)
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4a0a      	ldr	r2, [pc, #40]	@ (800d958 <prvHeapInit+0xb8>)
 800d92e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	4a09      	ldr	r2, [pc, #36]	@ (800d95c <prvHeapInit+0xbc>)
 800d936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d938:	4b09      	ldr	r3, [pc, #36]	@ (800d960 <prvHeapInit+0xc0>)
 800d93a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d93e:	601a      	str	r2, [r3, #0]
}
 800d940:	bf00      	nop
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	240011a4 	.word	0x240011a4
 800d950:	24004da4 	.word	0x24004da4
 800d954:	24004dac 	.word	0x24004dac
 800d958:	24004db4 	.word	0x24004db4
 800d95c:	24004db0 	.word	0x24004db0
 800d960:	24004dc0 	.word	0x24004dc0

0800d964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d96c:	4b28      	ldr	r3, [pc, #160]	@ (800da10 <prvInsertBlockIntoFreeList+0xac>)
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	e002      	b.n	800d978 <prvInsertBlockIntoFreeList+0x14>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d8f7      	bhi.n	800d972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	4413      	add	r3, r2
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	429a      	cmp	r2, r3
 800d992:	d108      	bne.n	800d9a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	441a      	add	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	441a      	add	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d118      	bne.n	800d9ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	4b15      	ldr	r3, [pc, #84]	@ (800da14 <prvInsertBlockIntoFreeList+0xb0>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d00d      	beq.n	800d9e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	441a      	add	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
 800d9e0:	e008      	b.n	800d9f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800da14 <prvInsertBlockIntoFreeList+0xb0>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e003      	b.n	800d9f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d002      	beq.n	800da02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da02:	bf00      	nop
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	24004da4 	.word	0x24004da4
 800da14:	24004dac 	.word	0x24004dac

0800da18 <malloc>:
 800da18:	4b02      	ldr	r3, [pc, #8]	@ (800da24 <malloc+0xc>)
 800da1a:	4601      	mov	r1, r0
 800da1c:	6818      	ldr	r0, [r3, #0]
 800da1e:	f000 b82d 	b.w	800da7c <_malloc_r>
 800da22:	bf00      	nop
 800da24:	24000198 	.word	0x24000198

0800da28 <free>:
 800da28:	4b02      	ldr	r3, [pc, #8]	@ (800da34 <free+0xc>)
 800da2a:	4601      	mov	r1, r0
 800da2c:	6818      	ldr	r0, [r3, #0]
 800da2e:	f002 bde1 	b.w	80105f4 <_free_r>
 800da32:	bf00      	nop
 800da34:	24000198 	.word	0x24000198

0800da38 <sbrk_aligned>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	4e0f      	ldr	r6, [pc, #60]	@ (800da78 <sbrk_aligned+0x40>)
 800da3c:	460c      	mov	r4, r1
 800da3e:	6831      	ldr	r1, [r6, #0]
 800da40:	4605      	mov	r5, r0
 800da42:	b911      	cbnz	r1, 800da4a <sbrk_aligned+0x12>
 800da44:	f001 ff80 	bl	800f948 <_sbrk_r>
 800da48:	6030      	str	r0, [r6, #0]
 800da4a:	4621      	mov	r1, r4
 800da4c:	4628      	mov	r0, r5
 800da4e:	f001 ff7b 	bl	800f948 <_sbrk_r>
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	d103      	bne.n	800da5e <sbrk_aligned+0x26>
 800da56:	f04f 34ff 	mov.w	r4, #4294967295
 800da5a:	4620      	mov	r0, r4
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	1cc4      	adds	r4, r0, #3
 800da60:	f024 0403 	bic.w	r4, r4, #3
 800da64:	42a0      	cmp	r0, r4
 800da66:	d0f8      	beq.n	800da5a <sbrk_aligned+0x22>
 800da68:	1a21      	subs	r1, r4, r0
 800da6a:	4628      	mov	r0, r5
 800da6c:	f001 ff6c 	bl	800f948 <_sbrk_r>
 800da70:	3001      	adds	r0, #1
 800da72:	d1f2      	bne.n	800da5a <sbrk_aligned+0x22>
 800da74:	e7ef      	b.n	800da56 <sbrk_aligned+0x1e>
 800da76:	bf00      	nop
 800da78:	24004dc4 	.word	0x24004dc4

0800da7c <_malloc_r>:
 800da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da80:	1ccd      	adds	r5, r1, #3
 800da82:	f025 0503 	bic.w	r5, r5, #3
 800da86:	3508      	adds	r5, #8
 800da88:	2d0c      	cmp	r5, #12
 800da8a:	bf38      	it	cc
 800da8c:	250c      	movcc	r5, #12
 800da8e:	2d00      	cmp	r5, #0
 800da90:	4606      	mov	r6, r0
 800da92:	db01      	blt.n	800da98 <_malloc_r+0x1c>
 800da94:	42a9      	cmp	r1, r5
 800da96:	d904      	bls.n	800daa2 <_malloc_r+0x26>
 800da98:	230c      	movs	r3, #12
 800da9a:	6033      	str	r3, [r6, #0]
 800da9c:	2000      	movs	r0, #0
 800da9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db78 <_malloc_r+0xfc>
 800daa6:	f000 f869 	bl	800db7c <__malloc_lock>
 800daaa:	f8d8 3000 	ldr.w	r3, [r8]
 800daae:	461c      	mov	r4, r3
 800dab0:	bb44      	cbnz	r4, 800db04 <_malloc_r+0x88>
 800dab2:	4629      	mov	r1, r5
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7ff ffbf 	bl	800da38 <sbrk_aligned>
 800daba:	1c43      	adds	r3, r0, #1
 800dabc:	4604      	mov	r4, r0
 800dabe:	d158      	bne.n	800db72 <_malloc_r+0xf6>
 800dac0:	f8d8 4000 	ldr.w	r4, [r8]
 800dac4:	4627      	mov	r7, r4
 800dac6:	2f00      	cmp	r7, #0
 800dac8:	d143      	bne.n	800db52 <_malloc_r+0xd6>
 800daca:	2c00      	cmp	r4, #0
 800dacc:	d04b      	beq.n	800db66 <_malloc_r+0xea>
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	4639      	mov	r1, r7
 800dad2:	4630      	mov	r0, r6
 800dad4:	eb04 0903 	add.w	r9, r4, r3
 800dad8:	f001 ff36 	bl	800f948 <_sbrk_r>
 800dadc:	4581      	cmp	r9, r0
 800dade:	d142      	bne.n	800db66 <_malloc_r+0xea>
 800dae0:	6821      	ldr	r1, [r4, #0]
 800dae2:	1a6d      	subs	r5, r5, r1
 800dae4:	4629      	mov	r1, r5
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ffa6 	bl	800da38 <sbrk_aligned>
 800daec:	3001      	adds	r0, #1
 800daee:	d03a      	beq.n	800db66 <_malloc_r+0xea>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	442b      	add	r3, r5
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	f8d8 3000 	ldr.w	r3, [r8]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	bb62      	cbnz	r2, 800db58 <_malloc_r+0xdc>
 800dafe:	f8c8 7000 	str.w	r7, [r8]
 800db02:	e00f      	b.n	800db24 <_malloc_r+0xa8>
 800db04:	6822      	ldr	r2, [r4, #0]
 800db06:	1b52      	subs	r2, r2, r5
 800db08:	d420      	bmi.n	800db4c <_malloc_r+0xd0>
 800db0a:	2a0b      	cmp	r2, #11
 800db0c:	d917      	bls.n	800db3e <_malloc_r+0xc2>
 800db0e:	1961      	adds	r1, r4, r5
 800db10:	42a3      	cmp	r3, r4
 800db12:	6025      	str	r5, [r4, #0]
 800db14:	bf18      	it	ne
 800db16:	6059      	strne	r1, [r3, #4]
 800db18:	6863      	ldr	r3, [r4, #4]
 800db1a:	bf08      	it	eq
 800db1c:	f8c8 1000 	streq.w	r1, [r8]
 800db20:	5162      	str	r2, [r4, r5]
 800db22:	604b      	str	r3, [r1, #4]
 800db24:	4630      	mov	r0, r6
 800db26:	f000 f82f 	bl	800db88 <__malloc_unlock>
 800db2a:	f104 000b 	add.w	r0, r4, #11
 800db2e:	1d23      	adds	r3, r4, #4
 800db30:	f020 0007 	bic.w	r0, r0, #7
 800db34:	1ac2      	subs	r2, r0, r3
 800db36:	bf1c      	itt	ne
 800db38:	1a1b      	subne	r3, r3, r0
 800db3a:	50a3      	strne	r3, [r4, r2]
 800db3c:	e7af      	b.n	800da9e <_malloc_r+0x22>
 800db3e:	6862      	ldr	r2, [r4, #4]
 800db40:	42a3      	cmp	r3, r4
 800db42:	bf0c      	ite	eq
 800db44:	f8c8 2000 	streq.w	r2, [r8]
 800db48:	605a      	strne	r2, [r3, #4]
 800db4a:	e7eb      	b.n	800db24 <_malloc_r+0xa8>
 800db4c:	4623      	mov	r3, r4
 800db4e:	6864      	ldr	r4, [r4, #4]
 800db50:	e7ae      	b.n	800dab0 <_malloc_r+0x34>
 800db52:	463c      	mov	r4, r7
 800db54:	687f      	ldr	r7, [r7, #4]
 800db56:	e7b6      	b.n	800dac6 <_malloc_r+0x4a>
 800db58:	461a      	mov	r2, r3
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	42a3      	cmp	r3, r4
 800db5e:	d1fb      	bne.n	800db58 <_malloc_r+0xdc>
 800db60:	2300      	movs	r3, #0
 800db62:	6053      	str	r3, [r2, #4]
 800db64:	e7de      	b.n	800db24 <_malloc_r+0xa8>
 800db66:	230c      	movs	r3, #12
 800db68:	6033      	str	r3, [r6, #0]
 800db6a:	4630      	mov	r0, r6
 800db6c:	f000 f80c 	bl	800db88 <__malloc_unlock>
 800db70:	e794      	b.n	800da9c <_malloc_r+0x20>
 800db72:	6005      	str	r5, [r0, #0]
 800db74:	e7d6      	b.n	800db24 <_malloc_r+0xa8>
 800db76:	bf00      	nop
 800db78:	24004dc8 	.word	0x24004dc8

0800db7c <__malloc_lock>:
 800db7c:	4801      	ldr	r0, [pc, #4]	@ (800db84 <__malloc_lock+0x8>)
 800db7e:	f001 bf30 	b.w	800f9e2 <__retarget_lock_acquire_recursive>
 800db82:	bf00      	nop
 800db84:	24004f0c 	.word	0x24004f0c

0800db88 <__malloc_unlock>:
 800db88:	4801      	ldr	r0, [pc, #4]	@ (800db90 <__malloc_unlock+0x8>)
 800db8a:	f001 bf2b 	b.w	800f9e4 <__retarget_lock_release_recursive>
 800db8e:	bf00      	nop
 800db90:	24004f0c 	.word	0x24004f0c

0800db94 <realloc>:
 800db94:	4b02      	ldr	r3, [pc, #8]	@ (800dba0 <realloc+0xc>)
 800db96:	460a      	mov	r2, r1
 800db98:	4601      	mov	r1, r0
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	f000 b802 	b.w	800dba4 <_realloc_r>
 800dba0:	24000198 	.word	0x24000198

0800dba4 <_realloc_r>:
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	4607      	mov	r7, r0
 800dbaa:	4614      	mov	r4, r2
 800dbac:	460d      	mov	r5, r1
 800dbae:	b921      	cbnz	r1, 800dbba <_realloc_r+0x16>
 800dbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	f7ff bf61 	b.w	800da7c <_malloc_r>
 800dbba:	b92a      	cbnz	r2, 800dbc8 <_realloc_r+0x24>
 800dbbc:	f002 fd1a 	bl	80105f4 <_free_r>
 800dbc0:	4625      	mov	r5, r4
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	f003 fd51 	bl	801166e <_malloc_usable_size_r>
 800dbcc:	4284      	cmp	r4, r0
 800dbce:	4606      	mov	r6, r0
 800dbd0:	d802      	bhi.n	800dbd8 <_realloc_r+0x34>
 800dbd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbd6:	d8f4      	bhi.n	800dbc2 <_realloc_r+0x1e>
 800dbd8:	4621      	mov	r1, r4
 800dbda:	4638      	mov	r0, r7
 800dbdc:	f7ff ff4e 	bl	800da7c <_malloc_r>
 800dbe0:	4680      	mov	r8, r0
 800dbe2:	b908      	cbnz	r0, 800dbe8 <_realloc_r+0x44>
 800dbe4:	4645      	mov	r5, r8
 800dbe6:	e7ec      	b.n	800dbc2 <_realloc_r+0x1e>
 800dbe8:	42b4      	cmp	r4, r6
 800dbea:	4622      	mov	r2, r4
 800dbec:	4629      	mov	r1, r5
 800dbee:	bf28      	it	cs
 800dbf0:	4632      	movcs	r2, r6
 800dbf2:	f001 fef8 	bl	800f9e6 <memcpy>
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f002 fcfb 	bl	80105f4 <_free_r>
 800dbfe:	e7f1      	b.n	800dbe4 <_realloc_r+0x40>

0800dc00 <sulp>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	4604      	mov	r4, r0
 800dc04:	460d      	mov	r5, r1
 800dc06:	4616      	mov	r6, r2
 800dc08:	ec45 4b10 	vmov	d0, r4, r5
 800dc0c:	f003 fbf4 	bl	80113f8 <__ulp>
 800dc10:	b17e      	cbz	r6, 800dc32 <sulp+0x32>
 800dc12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dc16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	dd09      	ble.n	800dc32 <sulp+0x32>
 800dc1e:	051b      	lsls	r3, r3, #20
 800dc20:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800dc24:	2000      	movs	r0, #0
 800dc26:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800dc2a:	ec41 0b17 	vmov	d7, r0, r1
 800dc2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dc32:	bd70      	pop	{r4, r5, r6, pc}
 800dc34:	0000      	movs	r0, r0
	...

0800dc38 <_strtod_l>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	ed2d 8b0a 	vpush	{d8-d12}
 800dc40:	b097      	sub	sp, #92	@ 0x5c
 800dc42:	4688      	mov	r8, r1
 800dc44:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc46:	2200      	movs	r2, #0
 800dc48:	9212      	str	r2, [sp, #72]	@ 0x48
 800dc4a:	9005      	str	r0, [sp, #20]
 800dc4c:	f04f 0a00 	mov.w	sl, #0
 800dc50:	f04f 0b00 	mov.w	fp, #0
 800dc54:	460a      	mov	r2, r1
 800dc56:	9211      	str	r2, [sp, #68]	@ 0x44
 800dc58:	7811      	ldrb	r1, [r2, #0]
 800dc5a:	292b      	cmp	r1, #43	@ 0x2b
 800dc5c:	d04c      	beq.n	800dcf8 <_strtod_l+0xc0>
 800dc5e:	d839      	bhi.n	800dcd4 <_strtod_l+0x9c>
 800dc60:	290d      	cmp	r1, #13
 800dc62:	d833      	bhi.n	800dccc <_strtod_l+0x94>
 800dc64:	2908      	cmp	r1, #8
 800dc66:	d833      	bhi.n	800dcd0 <_strtod_l+0x98>
 800dc68:	2900      	cmp	r1, #0
 800dc6a:	d03c      	beq.n	800dce6 <_strtod_l+0xae>
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	9208      	str	r2, [sp, #32]
 800dc70:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800dc72:	782a      	ldrb	r2, [r5, #0]
 800dc74:	2a30      	cmp	r2, #48	@ 0x30
 800dc76:	f040 80b7 	bne.w	800dde8 <_strtod_l+0x1b0>
 800dc7a:	786a      	ldrb	r2, [r5, #1]
 800dc7c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc80:	2a58      	cmp	r2, #88	@ 0x58
 800dc82:	d170      	bne.n	800dd66 <_strtod_l+0x12e>
 800dc84:	9302      	str	r3, [sp, #8]
 800dc86:	9b08      	ldr	r3, [sp, #32]
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	ab12      	add	r3, sp, #72	@ 0x48
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	4a90      	ldr	r2, [pc, #576]	@ (800ded0 <_strtod_l+0x298>)
 800dc90:	9805      	ldr	r0, [sp, #20]
 800dc92:	ab13      	add	r3, sp, #76	@ 0x4c
 800dc94:	a911      	add	r1, sp, #68	@ 0x44
 800dc96:	f002 fd5f 	bl	8010758 <__gethex>
 800dc9a:	f010 060f 	ands.w	r6, r0, #15
 800dc9e:	4604      	mov	r4, r0
 800dca0:	d005      	beq.n	800dcae <_strtod_l+0x76>
 800dca2:	2e06      	cmp	r6, #6
 800dca4:	d12a      	bne.n	800dcfc <_strtod_l+0xc4>
 800dca6:	3501      	adds	r5, #1
 800dca8:	2300      	movs	r3, #0
 800dcaa:	9511      	str	r5, [sp, #68]	@ 0x44
 800dcac:	9308      	str	r3, [sp, #32]
 800dcae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f040 8537 	bne.w	800e724 <_strtod_l+0xaec>
 800dcb6:	9b08      	ldr	r3, [sp, #32]
 800dcb8:	ec4b ab10 	vmov	d0, sl, fp
 800dcbc:	b1cb      	cbz	r3, 800dcf2 <_strtod_l+0xba>
 800dcbe:	eeb1 0b40 	vneg.f64	d0, d0
 800dcc2:	b017      	add	sp, #92	@ 0x5c
 800dcc4:	ecbd 8b0a 	vpop	{d8-d12}
 800dcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dccc:	2920      	cmp	r1, #32
 800dcce:	d1cd      	bne.n	800dc6c <_strtod_l+0x34>
 800dcd0:	3201      	adds	r2, #1
 800dcd2:	e7c0      	b.n	800dc56 <_strtod_l+0x1e>
 800dcd4:	292d      	cmp	r1, #45	@ 0x2d
 800dcd6:	d1c9      	bne.n	800dc6c <_strtod_l+0x34>
 800dcd8:	2101      	movs	r1, #1
 800dcda:	9108      	str	r1, [sp, #32]
 800dcdc:	1c51      	adds	r1, r2, #1
 800dcde:	9111      	str	r1, [sp, #68]	@ 0x44
 800dce0:	7852      	ldrb	r2, [r2, #1]
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	d1c4      	bne.n	800dc70 <_strtod_l+0x38>
 800dce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dce8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f040 8517 	bne.w	800e720 <_strtod_l+0xae8>
 800dcf2:	ec4b ab10 	vmov	d0, sl, fp
 800dcf6:	e7e4      	b.n	800dcc2 <_strtod_l+0x8a>
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	e7ee      	b.n	800dcda <_strtod_l+0xa2>
 800dcfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dcfe:	b13a      	cbz	r2, 800dd10 <_strtod_l+0xd8>
 800dd00:	2135      	movs	r1, #53	@ 0x35
 800dd02:	a814      	add	r0, sp, #80	@ 0x50
 800dd04:	f003 fc6f 	bl	80115e6 <__copybits>
 800dd08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dd0a:	9805      	ldr	r0, [sp, #20]
 800dd0c:	f003 f848 	bl	8010da0 <_Bfree>
 800dd10:	1e73      	subs	r3, r6, #1
 800dd12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd14:	2b04      	cmp	r3, #4
 800dd16:	d806      	bhi.n	800dd26 <_strtod_l+0xee>
 800dd18:	e8df f003 	tbb	[pc, r3]
 800dd1c:	201d0314 	.word	0x201d0314
 800dd20:	14          	.byte	0x14
 800dd21:	00          	.byte	0x00
 800dd22:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800dd26:	05e3      	lsls	r3, r4, #23
 800dd28:	bf48      	it	mi
 800dd2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dd2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd32:	0d1b      	lsrs	r3, r3, #20
 800dd34:	051b      	lsls	r3, r3, #20
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1b9      	bne.n	800dcae <_strtod_l+0x76>
 800dd3a:	f001 fe27 	bl	800f98c <__errno>
 800dd3e:	2322      	movs	r3, #34	@ 0x22
 800dd40:	6003      	str	r3, [r0, #0]
 800dd42:	e7b4      	b.n	800dcae <_strtod_l+0x76>
 800dd44:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800dd48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dd4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dd50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dd54:	e7e7      	b.n	800dd26 <_strtod_l+0xee>
 800dd56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ded8 <_strtod_l+0x2a0>
 800dd5a:	e7e4      	b.n	800dd26 <_strtod_l+0xee>
 800dd5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dd60:	f04f 3aff 	mov.w	sl, #4294967295
 800dd64:	e7df      	b.n	800dd26 <_strtod_l+0xee>
 800dd66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	9211      	str	r2, [sp, #68]	@ 0x44
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	2b30      	cmp	r3, #48	@ 0x30
 800dd70:	d0f9      	beq.n	800dd66 <_strtod_l+0x12e>
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d09b      	beq.n	800dcae <_strtod_l+0x76>
 800dd76:	2301      	movs	r3, #1
 800dd78:	9307      	str	r3, [sp, #28]
 800dd7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd7e:	2300      	movs	r3, #0
 800dd80:	9306      	str	r3, [sp, #24]
 800dd82:	4699      	mov	r9, r3
 800dd84:	461d      	mov	r5, r3
 800dd86:	220a      	movs	r2, #10
 800dd88:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800dd8a:	7804      	ldrb	r4, [r0, #0]
 800dd8c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800dd90:	b2d9      	uxtb	r1, r3
 800dd92:	2909      	cmp	r1, #9
 800dd94:	d92a      	bls.n	800ddec <_strtod_l+0x1b4>
 800dd96:	494f      	ldr	r1, [pc, #316]	@ (800ded4 <_strtod_l+0x29c>)
 800dd98:	2201      	movs	r2, #1
 800dd9a:	f001 fd8b 	bl	800f8b4 <strncmp>
 800dd9e:	b398      	cbz	r0, 800de08 <_strtod_l+0x1d0>
 800dda0:	2000      	movs	r0, #0
 800dda2:	4622      	mov	r2, r4
 800dda4:	462b      	mov	r3, r5
 800dda6:	4607      	mov	r7, r0
 800dda8:	4601      	mov	r1, r0
 800ddaa:	2a65      	cmp	r2, #101	@ 0x65
 800ddac:	d001      	beq.n	800ddb2 <_strtod_l+0x17a>
 800ddae:	2a45      	cmp	r2, #69	@ 0x45
 800ddb0:	d118      	bne.n	800dde4 <_strtod_l+0x1ac>
 800ddb2:	b91b      	cbnz	r3, 800ddbc <_strtod_l+0x184>
 800ddb4:	9b07      	ldr	r3, [sp, #28]
 800ddb6:	4303      	orrs	r3, r0
 800ddb8:	d095      	beq.n	800dce6 <_strtod_l+0xae>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800ddc0:	f108 0201 	add.w	r2, r8, #1
 800ddc4:	9211      	str	r2, [sp, #68]	@ 0x44
 800ddc6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ddca:	2a2b      	cmp	r2, #43	@ 0x2b
 800ddcc:	d074      	beq.n	800deb8 <_strtod_l+0x280>
 800ddce:	2a2d      	cmp	r2, #45	@ 0x2d
 800ddd0:	d07a      	beq.n	800dec8 <_strtod_l+0x290>
 800ddd2:	f04f 0e00 	mov.w	lr, #0
 800ddd6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800ddda:	2c09      	cmp	r4, #9
 800dddc:	f240 8082 	bls.w	800dee4 <_strtod_l+0x2ac>
 800dde0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dde4:	2400      	movs	r4, #0
 800dde6:	e09d      	b.n	800df24 <_strtod_l+0x2ec>
 800dde8:	2300      	movs	r3, #0
 800ddea:	e7c5      	b.n	800dd78 <_strtod_l+0x140>
 800ddec:	2d08      	cmp	r5, #8
 800ddee:	bfc8      	it	gt
 800ddf0:	9906      	ldrgt	r1, [sp, #24]
 800ddf2:	f100 0001 	add.w	r0, r0, #1
 800ddf6:	bfca      	itet	gt
 800ddf8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ddfc:	fb02 3909 	mlale	r9, r2, r9, r3
 800de00:	9306      	strgt	r3, [sp, #24]
 800de02:	3501      	adds	r5, #1
 800de04:	9011      	str	r0, [sp, #68]	@ 0x44
 800de06:	e7bf      	b.n	800dd88 <_strtod_l+0x150>
 800de08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	9211      	str	r2, [sp, #68]	@ 0x44
 800de0e:	785a      	ldrb	r2, [r3, #1]
 800de10:	b3bd      	cbz	r5, 800de82 <_strtod_l+0x24a>
 800de12:	4607      	mov	r7, r0
 800de14:	462b      	mov	r3, r5
 800de16:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800de1a:	2909      	cmp	r1, #9
 800de1c:	d912      	bls.n	800de44 <_strtod_l+0x20c>
 800de1e:	2101      	movs	r1, #1
 800de20:	e7c3      	b.n	800ddaa <_strtod_l+0x172>
 800de22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	9211      	str	r2, [sp, #68]	@ 0x44
 800de28:	785a      	ldrb	r2, [r3, #1]
 800de2a:	3001      	adds	r0, #1
 800de2c:	2a30      	cmp	r2, #48	@ 0x30
 800de2e:	d0f8      	beq.n	800de22 <_strtod_l+0x1ea>
 800de30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800de34:	2b08      	cmp	r3, #8
 800de36:	f200 847a 	bhi.w	800e72e <_strtod_l+0xaf6>
 800de3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800de3e:	4607      	mov	r7, r0
 800de40:	2000      	movs	r0, #0
 800de42:	4603      	mov	r3, r0
 800de44:	3a30      	subs	r2, #48	@ 0x30
 800de46:	f100 0101 	add.w	r1, r0, #1
 800de4a:	d014      	beq.n	800de76 <_strtod_l+0x23e>
 800de4c:	440f      	add	r7, r1
 800de4e:	469c      	mov	ip, r3
 800de50:	f04f 0e0a 	mov.w	lr, #10
 800de54:	f10c 0401 	add.w	r4, ip, #1
 800de58:	1ae6      	subs	r6, r4, r3
 800de5a:	42b1      	cmp	r1, r6
 800de5c:	dc13      	bgt.n	800de86 <_strtod_l+0x24e>
 800de5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800de62:	1819      	adds	r1, r3, r0
 800de64:	2908      	cmp	r1, #8
 800de66:	f103 0301 	add.w	r3, r3, #1
 800de6a:	4403      	add	r3, r0
 800de6c:	dc19      	bgt.n	800dea2 <_strtod_l+0x26a>
 800de6e:	210a      	movs	r1, #10
 800de70:	fb01 2909 	mla	r9, r1, r9, r2
 800de74:	2100      	movs	r1, #0
 800de76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800de78:	1c50      	adds	r0, r2, #1
 800de7a:	9011      	str	r0, [sp, #68]	@ 0x44
 800de7c:	7852      	ldrb	r2, [r2, #1]
 800de7e:	4608      	mov	r0, r1
 800de80:	e7c9      	b.n	800de16 <_strtod_l+0x1de>
 800de82:	4628      	mov	r0, r5
 800de84:	e7d2      	b.n	800de2c <_strtod_l+0x1f4>
 800de86:	f1bc 0f08 	cmp.w	ip, #8
 800de8a:	dc03      	bgt.n	800de94 <_strtod_l+0x25c>
 800de8c:	fb0e f909 	mul.w	r9, lr, r9
 800de90:	46a4      	mov	ip, r4
 800de92:	e7df      	b.n	800de54 <_strtod_l+0x21c>
 800de94:	2c10      	cmp	r4, #16
 800de96:	bfde      	ittt	le
 800de98:	9e06      	ldrle	r6, [sp, #24]
 800de9a:	fb0e f606 	mulle.w	r6, lr, r6
 800de9e:	9606      	strle	r6, [sp, #24]
 800dea0:	e7f6      	b.n	800de90 <_strtod_l+0x258>
 800dea2:	290f      	cmp	r1, #15
 800dea4:	bfdf      	itttt	le
 800dea6:	9806      	ldrle	r0, [sp, #24]
 800dea8:	210a      	movle	r1, #10
 800deaa:	fb01 2200 	mlale	r2, r1, r0, r2
 800deae:	9206      	strle	r2, [sp, #24]
 800deb0:	e7e0      	b.n	800de74 <_strtod_l+0x23c>
 800deb2:	2700      	movs	r7, #0
 800deb4:	2101      	movs	r1, #1
 800deb6:	e77d      	b.n	800ddb4 <_strtod_l+0x17c>
 800deb8:	f04f 0e00 	mov.w	lr, #0
 800debc:	f108 0202 	add.w	r2, r8, #2
 800dec0:	9211      	str	r2, [sp, #68]	@ 0x44
 800dec2:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dec6:	e786      	b.n	800ddd6 <_strtod_l+0x19e>
 800dec8:	f04f 0e01 	mov.w	lr, #1
 800decc:	e7f6      	b.n	800debc <_strtod_l+0x284>
 800dece:	bf00      	nop
 800ded0:	08012c94 	.word	0x08012c94
 800ded4:	08012a90 	.word	0x08012a90
 800ded8:	7ff00000 	.word	0x7ff00000
 800dedc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dede:	1c54      	adds	r4, r2, #1
 800dee0:	9411      	str	r4, [sp, #68]	@ 0x44
 800dee2:	7852      	ldrb	r2, [r2, #1]
 800dee4:	2a30      	cmp	r2, #48	@ 0x30
 800dee6:	d0f9      	beq.n	800dedc <_strtod_l+0x2a4>
 800dee8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800deec:	2c08      	cmp	r4, #8
 800deee:	f63f af79 	bhi.w	800dde4 <_strtod_l+0x1ac>
 800def2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800def6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800def8:	9209      	str	r2, [sp, #36]	@ 0x24
 800defa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800defc:	1c54      	adds	r4, r2, #1
 800defe:	9411      	str	r4, [sp, #68]	@ 0x44
 800df00:	7852      	ldrb	r2, [r2, #1]
 800df02:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800df06:	2e09      	cmp	r6, #9
 800df08:	d937      	bls.n	800df7a <_strtod_l+0x342>
 800df0a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800df0c:	1ba4      	subs	r4, r4, r6
 800df0e:	2c08      	cmp	r4, #8
 800df10:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800df14:	dc02      	bgt.n	800df1c <_strtod_l+0x2e4>
 800df16:	4564      	cmp	r4, ip
 800df18:	bfa8      	it	ge
 800df1a:	4664      	movge	r4, ip
 800df1c:	f1be 0f00 	cmp.w	lr, #0
 800df20:	d000      	beq.n	800df24 <_strtod_l+0x2ec>
 800df22:	4264      	negs	r4, r4
 800df24:	2b00      	cmp	r3, #0
 800df26:	d14d      	bne.n	800dfc4 <_strtod_l+0x38c>
 800df28:	9b07      	ldr	r3, [sp, #28]
 800df2a:	4318      	orrs	r0, r3
 800df2c:	f47f aebf 	bne.w	800dcae <_strtod_l+0x76>
 800df30:	2900      	cmp	r1, #0
 800df32:	f47f aed8 	bne.w	800dce6 <_strtod_l+0xae>
 800df36:	2a69      	cmp	r2, #105	@ 0x69
 800df38:	d027      	beq.n	800df8a <_strtod_l+0x352>
 800df3a:	dc24      	bgt.n	800df86 <_strtod_l+0x34e>
 800df3c:	2a49      	cmp	r2, #73	@ 0x49
 800df3e:	d024      	beq.n	800df8a <_strtod_l+0x352>
 800df40:	2a4e      	cmp	r2, #78	@ 0x4e
 800df42:	f47f aed0 	bne.w	800dce6 <_strtod_l+0xae>
 800df46:	4997      	ldr	r1, [pc, #604]	@ (800e1a4 <_strtod_l+0x56c>)
 800df48:	a811      	add	r0, sp, #68	@ 0x44
 800df4a:	f002 fe27 	bl	8010b9c <__match>
 800df4e:	2800      	cmp	r0, #0
 800df50:	f43f aec9 	beq.w	800dce6 <_strtod_l+0xae>
 800df54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	2b28      	cmp	r3, #40	@ 0x28
 800df5a:	d12d      	bne.n	800dfb8 <_strtod_l+0x380>
 800df5c:	4992      	ldr	r1, [pc, #584]	@ (800e1a8 <_strtod_l+0x570>)
 800df5e:	aa14      	add	r2, sp, #80	@ 0x50
 800df60:	a811      	add	r0, sp, #68	@ 0x44
 800df62:	f002 fe2f 	bl	8010bc4 <__hexnan>
 800df66:	2805      	cmp	r0, #5
 800df68:	d126      	bne.n	800dfb8 <_strtod_l+0x380>
 800df6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800df6c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800df70:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800df74:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800df78:	e699      	b.n	800dcae <_strtod_l+0x76>
 800df7a:	240a      	movs	r4, #10
 800df7c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800df80:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800df84:	e7b9      	b.n	800defa <_strtod_l+0x2c2>
 800df86:	2a6e      	cmp	r2, #110	@ 0x6e
 800df88:	e7db      	b.n	800df42 <_strtod_l+0x30a>
 800df8a:	4988      	ldr	r1, [pc, #544]	@ (800e1ac <_strtod_l+0x574>)
 800df8c:	a811      	add	r0, sp, #68	@ 0x44
 800df8e:	f002 fe05 	bl	8010b9c <__match>
 800df92:	2800      	cmp	r0, #0
 800df94:	f43f aea7 	beq.w	800dce6 <_strtod_l+0xae>
 800df98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df9a:	4985      	ldr	r1, [pc, #532]	@ (800e1b0 <_strtod_l+0x578>)
 800df9c:	3b01      	subs	r3, #1
 800df9e:	a811      	add	r0, sp, #68	@ 0x44
 800dfa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfa2:	f002 fdfb 	bl	8010b9c <__match>
 800dfa6:	b910      	cbnz	r0, 800dfae <_strtod_l+0x376>
 800dfa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfaa:	3301      	adds	r3, #1
 800dfac:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfae:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e1c4 <_strtod_l+0x58c>
 800dfb2:	f04f 0a00 	mov.w	sl, #0
 800dfb6:	e67a      	b.n	800dcae <_strtod_l+0x76>
 800dfb8:	487e      	ldr	r0, [pc, #504]	@ (800e1b4 <_strtod_l+0x57c>)
 800dfba:	f001 fd25 	bl	800fa08 <nan>
 800dfbe:	ec5b ab10 	vmov	sl, fp, d0
 800dfc2:	e674      	b.n	800dcae <_strtod_l+0x76>
 800dfc4:	ee07 9a90 	vmov	s15, r9
 800dfc8:	1be2      	subs	r2, r4, r7
 800dfca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	bf08      	it	eq
 800dfd2:	461d      	moveq	r5, r3
 800dfd4:	2b10      	cmp	r3, #16
 800dfd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfd8:	461a      	mov	r2, r3
 800dfda:	bfa8      	it	ge
 800dfdc:	2210      	movge	r2, #16
 800dfde:	2b09      	cmp	r3, #9
 800dfe0:	ec5b ab17 	vmov	sl, fp, d7
 800dfe4:	dc15      	bgt.n	800e012 <_strtod_l+0x3da>
 800dfe6:	1be1      	subs	r1, r4, r7
 800dfe8:	2900      	cmp	r1, #0
 800dfea:	f43f ae60 	beq.w	800dcae <_strtod_l+0x76>
 800dfee:	eba4 0107 	sub.w	r1, r4, r7
 800dff2:	dd72      	ble.n	800e0da <_strtod_l+0x4a2>
 800dff4:	2916      	cmp	r1, #22
 800dff6:	dc59      	bgt.n	800e0ac <_strtod_l+0x474>
 800dff8:	4b6f      	ldr	r3, [pc, #444]	@ (800e1b8 <_strtod_l+0x580>)
 800dffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e000:	ed93 7b00 	vldr	d7, [r3]
 800e004:	ec4b ab16 	vmov	d6, sl, fp
 800e008:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e00c:	ec5b ab17 	vmov	sl, fp, d7
 800e010:	e64d      	b.n	800dcae <_strtod_l+0x76>
 800e012:	4969      	ldr	r1, [pc, #420]	@ (800e1b8 <_strtod_l+0x580>)
 800e014:	eddd 6a06 	vldr	s13, [sp, #24]
 800e018:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e01c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e020:	2b0f      	cmp	r3, #15
 800e022:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e026:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e02a:	ec5b ab16 	vmov	sl, fp, d6
 800e02e:	ddda      	ble.n	800dfe6 <_strtod_l+0x3ae>
 800e030:	1a9a      	subs	r2, r3, r2
 800e032:	1be1      	subs	r1, r4, r7
 800e034:	440a      	add	r2, r1
 800e036:	2a00      	cmp	r2, #0
 800e038:	f340 8094 	ble.w	800e164 <_strtod_l+0x52c>
 800e03c:	f012 000f 	ands.w	r0, r2, #15
 800e040:	d00a      	beq.n	800e058 <_strtod_l+0x420>
 800e042:	495d      	ldr	r1, [pc, #372]	@ (800e1b8 <_strtod_l+0x580>)
 800e044:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e048:	ed91 7b00 	vldr	d7, [r1]
 800e04c:	ec4b ab16 	vmov	d6, sl, fp
 800e050:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e054:	ec5b ab17 	vmov	sl, fp, d7
 800e058:	f032 020f 	bics.w	r2, r2, #15
 800e05c:	d073      	beq.n	800e146 <_strtod_l+0x50e>
 800e05e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e062:	dd47      	ble.n	800e0f4 <_strtod_l+0x4bc>
 800e064:	2400      	movs	r4, #0
 800e066:	4625      	mov	r5, r4
 800e068:	9407      	str	r4, [sp, #28]
 800e06a:	4626      	mov	r6, r4
 800e06c:	9a05      	ldr	r2, [sp, #20]
 800e06e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e1c4 <_strtod_l+0x58c>
 800e072:	2322      	movs	r3, #34	@ 0x22
 800e074:	6013      	str	r3, [r2, #0]
 800e076:	f04f 0a00 	mov.w	sl, #0
 800e07a:	9b07      	ldr	r3, [sp, #28]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f43f ae16 	beq.w	800dcae <_strtod_l+0x76>
 800e082:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e084:	9805      	ldr	r0, [sp, #20]
 800e086:	f002 fe8b 	bl	8010da0 <_Bfree>
 800e08a:	9805      	ldr	r0, [sp, #20]
 800e08c:	4631      	mov	r1, r6
 800e08e:	f002 fe87 	bl	8010da0 <_Bfree>
 800e092:	9805      	ldr	r0, [sp, #20]
 800e094:	4629      	mov	r1, r5
 800e096:	f002 fe83 	bl	8010da0 <_Bfree>
 800e09a:	9907      	ldr	r1, [sp, #28]
 800e09c:	9805      	ldr	r0, [sp, #20]
 800e09e:	f002 fe7f 	bl	8010da0 <_Bfree>
 800e0a2:	9805      	ldr	r0, [sp, #20]
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	f002 fe7b 	bl	8010da0 <_Bfree>
 800e0aa:	e600      	b.n	800dcae <_strtod_l+0x76>
 800e0ac:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e0b0:	1be0      	subs	r0, r4, r7
 800e0b2:	4281      	cmp	r1, r0
 800e0b4:	dbbc      	blt.n	800e030 <_strtod_l+0x3f8>
 800e0b6:	4a40      	ldr	r2, [pc, #256]	@ (800e1b8 <_strtod_l+0x580>)
 800e0b8:	f1c3 030f 	rsb	r3, r3, #15
 800e0bc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e0c0:	ed91 7b00 	vldr	d7, [r1]
 800e0c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0c6:	ec4b ab16 	vmov	d6, sl, fp
 800e0ca:	1acb      	subs	r3, r1, r3
 800e0cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e0d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0d4:	ed92 6b00 	vldr	d6, [r2]
 800e0d8:	e796      	b.n	800e008 <_strtod_l+0x3d0>
 800e0da:	3116      	adds	r1, #22
 800e0dc:	dba8      	blt.n	800e030 <_strtod_l+0x3f8>
 800e0de:	4b36      	ldr	r3, [pc, #216]	@ (800e1b8 <_strtod_l+0x580>)
 800e0e0:	1b3c      	subs	r4, r7, r4
 800e0e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e0e6:	ed94 7b00 	vldr	d7, [r4]
 800e0ea:	ec4b ab16 	vmov	d6, sl, fp
 800e0ee:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e0f2:	e78b      	b.n	800e00c <_strtod_l+0x3d4>
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	ec4b ab17 	vmov	d7, sl, fp
 800e0fa:	4e30      	ldr	r6, [pc, #192]	@ (800e1bc <_strtod_l+0x584>)
 800e0fc:	1112      	asrs	r2, r2, #4
 800e0fe:	4601      	mov	r1, r0
 800e100:	2a01      	cmp	r2, #1
 800e102:	dc23      	bgt.n	800e14c <_strtod_l+0x514>
 800e104:	b108      	cbz	r0, 800e10a <_strtod_l+0x4d2>
 800e106:	ec5b ab17 	vmov	sl, fp, d7
 800e10a:	4a2c      	ldr	r2, [pc, #176]	@ (800e1bc <_strtod_l+0x584>)
 800e10c:	482c      	ldr	r0, [pc, #176]	@ (800e1c0 <_strtod_l+0x588>)
 800e10e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e112:	ed92 7b00 	vldr	d7, [r2]
 800e116:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e11a:	ec4b ab16 	vmov	d6, sl, fp
 800e11e:	4a29      	ldr	r2, [pc, #164]	@ (800e1c4 <_strtod_l+0x58c>)
 800e120:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e124:	ee17 1a90 	vmov	r1, s15
 800e128:	400a      	ands	r2, r1
 800e12a:	4282      	cmp	r2, r0
 800e12c:	ec5b ab17 	vmov	sl, fp, d7
 800e130:	d898      	bhi.n	800e064 <_strtod_l+0x42c>
 800e132:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e136:	4282      	cmp	r2, r0
 800e138:	bf86      	itte	hi
 800e13a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e1c8 <_strtod_l+0x590>
 800e13e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e142:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e146:	2200      	movs	r2, #0
 800e148:	9206      	str	r2, [sp, #24]
 800e14a:	e076      	b.n	800e23a <_strtod_l+0x602>
 800e14c:	f012 0f01 	tst.w	r2, #1
 800e150:	d004      	beq.n	800e15c <_strtod_l+0x524>
 800e152:	ed96 6b00 	vldr	d6, [r6]
 800e156:	2001      	movs	r0, #1
 800e158:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e15c:	3101      	adds	r1, #1
 800e15e:	1052      	asrs	r2, r2, #1
 800e160:	3608      	adds	r6, #8
 800e162:	e7cd      	b.n	800e100 <_strtod_l+0x4c8>
 800e164:	d0ef      	beq.n	800e146 <_strtod_l+0x50e>
 800e166:	4252      	negs	r2, r2
 800e168:	f012 000f 	ands.w	r0, r2, #15
 800e16c:	d00a      	beq.n	800e184 <_strtod_l+0x54c>
 800e16e:	4912      	ldr	r1, [pc, #72]	@ (800e1b8 <_strtod_l+0x580>)
 800e170:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e174:	ed91 7b00 	vldr	d7, [r1]
 800e178:	ec4b ab16 	vmov	d6, sl, fp
 800e17c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e180:	ec5b ab17 	vmov	sl, fp, d7
 800e184:	1112      	asrs	r2, r2, #4
 800e186:	d0de      	beq.n	800e146 <_strtod_l+0x50e>
 800e188:	2a1f      	cmp	r2, #31
 800e18a:	dd1f      	ble.n	800e1cc <_strtod_l+0x594>
 800e18c:	2400      	movs	r4, #0
 800e18e:	4625      	mov	r5, r4
 800e190:	9407      	str	r4, [sp, #28]
 800e192:	4626      	mov	r6, r4
 800e194:	9a05      	ldr	r2, [sp, #20]
 800e196:	2322      	movs	r3, #34	@ 0x22
 800e198:	f04f 0a00 	mov.w	sl, #0
 800e19c:	f04f 0b00 	mov.w	fp, #0
 800e1a0:	6013      	str	r3, [r2, #0]
 800e1a2:	e76a      	b.n	800e07a <_strtod_l+0x442>
 800e1a4:	08012a9f 	.word	0x08012a9f
 800e1a8:	08012c80 	.word	0x08012c80
 800e1ac:	08012a97 	.word	0x08012a97
 800e1b0:	08012ad4 	.word	0x08012ad4
 800e1b4:	08012c7e 	.word	0x08012c7e
 800e1b8:	08012e08 	.word	0x08012e08
 800e1bc:	08012de0 	.word	0x08012de0
 800e1c0:	7ca00000 	.word	0x7ca00000
 800e1c4:	7ff00000 	.word	0x7ff00000
 800e1c8:	7fefffff 	.word	0x7fefffff
 800e1cc:	f012 0110 	ands.w	r1, r2, #16
 800e1d0:	bf18      	it	ne
 800e1d2:	216a      	movne	r1, #106	@ 0x6a
 800e1d4:	9106      	str	r1, [sp, #24]
 800e1d6:	ec4b ab17 	vmov	d7, sl, fp
 800e1da:	49af      	ldr	r1, [pc, #700]	@ (800e498 <_strtod_l+0x860>)
 800e1dc:	2000      	movs	r0, #0
 800e1de:	07d6      	lsls	r6, r2, #31
 800e1e0:	d504      	bpl.n	800e1ec <_strtod_l+0x5b4>
 800e1e2:	ed91 6b00 	vldr	d6, [r1]
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1ec:	1052      	asrs	r2, r2, #1
 800e1ee:	f101 0108 	add.w	r1, r1, #8
 800e1f2:	d1f4      	bne.n	800e1de <_strtod_l+0x5a6>
 800e1f4:	b108      	cbz	r0, 800e1fa <_strtod_l+0x5c2>
 800e1f6:	ec5b ab17 	vmov	sl, fp, d7
 800e1fa:	9a06      	ldr	r2, [sp, #24]
 800e1fc:	b1b2      	cbz	r2, 800e22c <_strtod_l+0x5f4>
 800e1fe:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e202:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e206:	2a00      	cmp	r2, #0
 800e208:	4658      	mov	r0, fp
 800e20a:	dd0f      	ble.n	800e22c <_strtod_l+0x5f4>
 800e20c:	2a1f      	cmp	r2, #31
 800e20e:	dd55      	ble.n	800e2bc <_strtod_l+0x684>
 800e210:	2a34      	cmp	r2, #52	@ 0x34
 800e212:	bfde      	ittt	le
 800e214:	f04f 32ff 	movle.w	r2, #4294967295
 800e218:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e21c:	408a      	lslle	r2, r1
 800e21e:	f04f 0a00 	mov.w	sl, #0
 800e222:	bfcc      	ite	gt
 800e224:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e228:	ea02 0b00 	andle.w	fp, r2, r0
 800e22c:	ec4b ab17 	vmov	d7, sl, fp
 800e230:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e238:	d0a8      	beq.n	800e18c <_strtod_l+0x554>
 800e23a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e23c:	9805      	ldr	r0, [sp, #20]
 800e23e:	f8cd 9000 	str.w	r9, [sp]
 800e242:	462a      	mov	r2, r5
 800e244:	f002 fe14 	bl	8010e70 <__s2b>
 800e248:	9007      	str	r0, [sp, #28]
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f43f af0a 	beq.w	800e064 <_strtod_l+0x42c>
 800e250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e252:	1b3f      	subs	r7, r7, r4
 800e254:	2b00      	cmp	r3, #0
 800e256:	bfb4      	ite	lt
 800e258:	463b      	movlt	r3, r7
 800e25a:	2300      	movge	r3, #0
 800e25c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e260:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800e488 <_strtod_l+0x850>
 800e264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e268:	2400      	movs	r4, #0
 800e26a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e26c:	4625      	mov	r5, r4
 800e26e:	9b07      	ldr	r3, [sp, #28]
 800e270:	9805      	ldr	r0, [sp, #20]
 800e272:	6859      	ldr	r1, [r3, #4]
 800e274:	f002 fd54 	bl	8010d20 <_Balloc>
 800e278:	4606      	mov	r6, r0
 800e27a:	2800      	cmp	r0, #0
 800e27c:	f43f aef6 	beq.w	800e06c <_strtod_l+0x434>
 800e280:	9b07      	ldr	r3, [sp, #28]
 800e282:	691a      	ldr	r2, [r3, #16]
 800e284:	ec4b ab19 	vmov	d9, sl, fp
 800e288:	3202      	adds	r2, #2
 800e28a:	f103 010c 	add.w	r1, r3, #12
 800e28e:	0092      	lsls	r2, r2, #2
 800e290:	300c      	adds	r0, #12
 800e292:	f001 fba8 	bl	800f9e6 <memcpy>
 800e296:	eeb0 0b49 	vmov.f64	d0, d9
 800e29a:	9805      	ldr	r0, [sp, #20]
 800e29c:	aa14      	add	r2, sp, #80	@ 0x50
 800e29e:	a913      	add	r1, sp, #76	@ 0x4c
 800e2a0:	f003 f91a 	bl	80114d8 <__d2b>
 800e2a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f43f aee0 	beq.w	800e06c <_strtod_l+0x434>
 800e2ac:	9805      	ldr	r0, [sp, #20]
 800e2ae:	2101      	movs	r1, #1
 800e2b0:	f002 fe74 	bl	8010f9c <__i2b>
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	b940      	cbnz	r0, 800e2ca <_strtod_l+0x692>
 800e2b8:	2500      	movs	r5, #0
 800e2ba:	e6d7      	b.n	800e06c <_strtod_l+0x434>
 800e2bc:	f04f 31ff 	mov.w	r1, #4294967295
 800e2c0:	fa01 f202 	lsl.w	r2, r1, r2
 800e2c4:	ea02 0a0a 	and.w	sl, r2, sl
 800e2c8:	e7b0      	b.n	800e22c <_strtod_l+0x5f4>
 800e2ca:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e2cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e2ce:	2f00      	cmp	r7, #0
 800e2d0:	bfab      	itete	ge
 800e2d2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e2d4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e2d6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e2da:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e2de:	bfac      	ite	ge
 800e2e0:	eb07 0903 	addge.w	r9, r7, r3
 800e2e4:	eba3 0807 	sublt.w	r8, r3, r7
 800e2e8:	9b06      	ldr	r3, [sp, #24]
 800e2ea:	1aff      	subs	r7, r7, r3
 800e2ec:	4417      	add	r7, r2
 800e2ee:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e2f2:	4a6a      	ldr	r2, [pc, #424]	@ (800e49c <_strtod_l+0x864>)
 800e2f4:	3f01      	subs	r7, #1
 800e2f6:	4297      	cmp	r7, r2
 800e2f8:	da51      	bge.n	800e39e <_strtod_l+0x766>
 800e2fa:	1bd1      	subs	r1, r2, r7
 800e2fc:	291f      	cmp	r1, #31
 800e2fe:	eba3 0301 	sub.w	r3, r3, r1
 800e302:	f04f 0201 	mov.w	r2, #1
 800e306:	dc3e      	bgt.n	800e386 <_strtod_l+0x74e>
 800e308:	408a      	lsls	r2, r1
 800e30a:	920c      	str	r2, [sp, #48]	@ 0x30
 800e30c:	2200      	movs	r2, #0
 800e30e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e310:	eb09 0703 	add.w	r7, r9, r3
 800e314:	4498      	add	r8, r3
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	45b9      	cmp	r9, r7
 800e31a:	4498      	add	r8, r3
 800e31c:	464b      	mov	r3, r9
 800e31e:	bfa8      	it	ge
 800e320:	463b      	movge	r3, r7
 800e322:	4543      	cmp	r3, r8
 800e324:	bfa8      	it	ge
 800e326:	4643      	movge	r3, r8
 800e328:	2b00      	cmp	r3, #0
 800e32a:	bfc2      	ittt	gt
 800e32c:	1aff      	subgt	r7, r7, r3
 800e32e:	eba8 0803 	subgt.w	r8, r8, r3
 800e332:	eba9 0903 	subgt.w	r9, r9, r3
 800e336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dd16      	ble.n	800e36a <_strtod_l+0x732>
 800e33c:	4629      	mov	r1, r5
 800e33e:	9805      	ldr	r0, [sp, #20]
 800e340:	461a      	mov	r2, r3
 800e342:	f002 fee3 	bl	801110c <__pow5mult>
 800e346:	4605      	mov	r5, r0
 800e348:	2800      	cmp	r0, #0
 800e34a:	d0b5      	beq.n	800e2b8 <_strtod_l+0x680>
 800e34c:	4601      	mov	r1, r0
 800e34e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e350:	9805      	ldr	r0, [sp, #20]
 800e352:	f002 fe39 	bl	8010fc8 <__multiply>
 800e356:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e358:	2800      	cmp	r0, #0
 800e35a:	f43f ae87 	beq.w	800e06c <_strtod_l+0x434>
 800e35e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e360:	9805      	ldr	r0, [sp, #20]
 800e362:	f002 fd1d 	bl	8010da0 <_Bfree>
 800e366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e368:	9312      	str	r3, [sp, #72]	@ 0x48
 800e36a:	2f00      	cmp	r7, #0
 800e36c:	dc1b      	bgt.n	800e3a6 <_strtod_l+0x76e>
 800e36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e370:	2b00      	cmp	r3, #0
 800e372:	dd21      	ble.n	800e3b8 <_strtod_l+0x780>
 800e374:	4631      	mov	r1, r6
 800e376:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e378:	9805      	ldr	r0, [sp, #20]
 800e37a:	f002 fec7 	bl	801110c <__pow5mult>
 800e37e:	4606      	mov	r6, r0
 800e380:	b9d0      	cbnz	r0, 800e3b8 <_strtod_l+0x780>
 800e382:	2600      	movs	r6, #0
 800e384:	e672      	b.n	800e06c <_strtod_l+0x434>
 800e386:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e38a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e38e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e392:	37e2      	adds	r7, #226	@ 0xe2
 800e394:	fa02 f107 	lsl.w	r1, r2, r7
 800e398:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e39a:	920c      	str	r2, [sp, #48]	@ 0x30
 800e39c:	e7b8      	b.n	800e310 <_strtod_l+0x6d8>
 800e39e:	2200      	movs	r2, #0
 800e3a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	e7f9      	b.n	800e39a <_strtod_l+0x762>
 800e3a6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e3a8:	9805      	ldr	r0, [sp, #20]
 800e3aa:	463a      	mov	r2, r7
 800e3ac:	f002 ff08 	bl	80111c0 <__lshift>
 800e3b0:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d1db      	bne.n	800e36e <_strtod_l+0x736>
 800e3b6:	e659      	b.n	800e06c <_strtod_l+0x434>
 800e3b8:	f1b8 0f00 	cmp.w	r8, #0
 800e3bc:	dd07      	ble.n	800e3ce <_strtod_l+0x796>
 800e3be:	4631      	mov	r1, r6
 800e3c0:	9805      	ldr	r0, [sp, #20]
 800e3c2:	4642      	mov	r2, r8
 800e3c4:	f002 fefc 	bl	80111c0 <__lshift>
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d0d9      	beq.n	800e382 <_strtod_l+0x74a>
 800e3ce:	f1b9 0f00 	cmp.w	r9, #0
 800e3d2:	dd08      	ble.n	800e3e6 <_strtod_l+0x7ae>
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	9805      	ldr	r0, [sp, #20]
 800e3d8:	464a      	mov	r2, r9
 800e3da:	f002 fef1 	bl	80111c0 <__lshift>
 800e3de:	4605      	mov	r5, r0
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	f43f ae43 	beq.w	800e06c <_strtod_l+0x434>
 800e3e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e3e8:	9805      	ldr	r0, [sp, #20]
 800e3ea:	4632      	mov	r2, r6
 800e3ec:	f002 ff70 	bl	80112d0 <__mdiff>
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	f43f ae3a 	beq.w	800e06c <_strtod_l+0x434>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e3fe:	60c3      	str	r3, [r0, #12]
 800e400:	4629      	mov	r1, r5
 800e402:	f002 ff49 	bl	8011298 <__mcmp>
 800e406:	2800      	cmp	r0, #0
 800e408:	da4c      	bge.n	800e4a4 <_strtod_l+0x86c>
 800e40a:	ea58 080a 	orrs.w	r8, r8, sl
 800e40e:	d172      	bne.n	800e4f6 <_strtod_l+0x8be>
 800e410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e414:	2b00      	cmp	r3, #0
 800e416:	d16e      	bne.n	800e4f6 <_strtod_l+0x8be>
 800e418:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e41c:	0d1b      	lsrs	r3, r3, #20
 800e41e:	051b      	lsls	r3, r3, #20
 800e420:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e424:	d967      	bls.n	800e4f6 <_strtod_l+0x8be>
 800e426:	6963      	ldr	r3, [r4, #20]
 800e428:	b913      	cbnz	r3, 800e430 <_strtod_l+0x7f8>
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	dd62      	ble.n	800e4f6 <_strtod_l+0x8be>
 800e430:	4621      	mov	r1, r4
 800e432:	2201      	movs	r2, #1
 800e434:	9805      	ldr	r0, [sp, #20]
 800e436:	f002 fec3 	bl	80111c0 <__lshift>
 800e43a:	4629      	mov	r1, r5
 800e43c:	4604      	mov	r4, r0
 800e43e:	f002 ff2b 	bl	8011298 <__mcmp>
 800e442:	2800      	cmp	r0, #0
 800e444:	dd57      	ble.n	800e4f6 <_strtod_l+0x8be>
 800e446:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e44a:	9a06      	ldr	r2, [sp, #24]
 800e44c:	0d1b      	lsrs	r3, r3, #20
 800e44e:	051b      	lsls	r3, r3, #20
 800e450:	2a00      	cmp	r2, #0
 800e452:	d06e      	beq.n	800e532 <_strtod_l+0x8fa>
 800e454:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e458:	d86b      	bhi.n	800e532 <_strtod_l+0x8fa>
 800e45a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e45e:	f67f ae99 	bls.w	800e194 <_strtod_l+0x55c>
 800e462:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800e490 <_strtod_l+0x858>
 800e466:	ec4b ab16 	vmov	d6, sl, fp
 800e46a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a0 <_strtod_l+0x868>)
 800e46c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e470:	ee17 2a90 	vmov	r2, s15
 800e474:	4013      	ands	r3, r2
 800e476:	ec5b ab17 	vmov	sl, fp, d7
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f47f ae01 	bne.w	800e082 <_strtod_l+0x44a>
 800e480:	9a05      	ldr	r2, [sp, #20]
 800e482:	2322      	movs	r3, #34	@ 0x22
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	e5fc      	b.n	800e082 <_strtod_l+0x44a>
 800e488:	ffc00000 	.word	0xffc00000
 800e48c:	41dfffff 	.word	0x41dfffff
 800e490:	00000000 	.word	0x00000000
 800e494:	39500000 	.word	0x39500000
 800e498:	08012ca8 	.word	0x08012ca8
 800e49c:	fffffc02 	.word	0xfffffc02
 800e4a0:	7ff00000 	.word	0x7ff00000
 800e4a4:	46d9      	mov	r9, fp
 800e4a6:	d15d      	bne.n	800e564 <_strtod_l+0x92c>
 800e4a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4ac:	f1b8 0f00 	cmp.w	r8, #0
 800e4b0:	d02a      	beq.n	800e508 <_strtod_l+0x8d0>
 800e4b2:	4aa9      	ldr	r2, [pc, #676]	@ (800e758 <_strtod_l+0xb20>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d12a      	bne.n	800e50e <_strtod_l+0x8d6>
 800e4b8:	9b06      	ldr	r3, [sp, #24]
 800e4ba:	4652      	mov	r2, sl
 800e4bc:	b1fb      	cbz	r3, 800e4fe <_strtod_l+0x8c6>
 800e4be:	4ba7      	ldr	r3, [pc, #668]	@ (800e75c <_strtod_l+0xb24>)
 800e4c0:	ea0b 0303 	and.w	r3, fp, r3
 800e4c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e4c8:	f04f 31ff 	mov.w	r1, #4294967295
 800e4cc:	d81a      	bhi.n	800e504 <_strtod_l+0x8cc>
 800e4ce:	0d1b      	lsrs	r3, r3, #20
 800e4d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d118      	bne.n	800e50e <_strtod_l+0x8d6>
 800e4dc:	4ba0      	ldr	r3, [pc, #640]	@ (800e760 <_strtod_l+0xb28>)
 800e4de:	4599      	cmp	r9, r3
 800e4e0:	d102      	bne.n	800e4e8 <_strtod_l+0x8b0>
 800e4e2:	3201      	adds	r2, #1
 800e4e4:	f43f adc2 	beq.w	800e06c <_strtod_l+0x434>
 800e4e8:	4b9c      	ldr	r3, [pc, #624]	@ (800e75c <_strtod_l+0xb24>)
 800e4ea:	ea09 0303 	and.w	r3, r9, r3
 800e4ee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e4f2:	f04f 0a00 	mov.w	sl, #0
 800e4f6:	9b06      	ldr	r3, [sp, #24]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1b2      	bne.n	800e462 <_strtod_l+0x82a>
 800e4fc:	e5c1      	b.n	800e082 <_strtod_l+0x44a>
 800e4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e502:	e7e9      	b.n	800e4d8 <_strtod_l+0x8a0>
 800e504:	460b      	mov	r3, r1
 800e506:	e7e7      	b.n	800e4d8 <_strtod_l+0x8a0>
 800e508:	ea53 030a 	orrs.w	r3, r3, sl
 800e50c:	d09b      	beq.n	800e446 <_strtod_l+0x80e>
 800e50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e510:	b1c3      	cbz	r3, 800e544 <_strtod_l+0x90c>
 800e512:	ea13 0f09 	tst.w	r3, r9
 800e516:	d0ee      	beq.n	800e4f6 <_strtod_l+0x8be>
 800e518:	9a06      	ldr	r2, [sp, #24]
 800e51a:	4650      	mov	r0, sl
 800e51c:	4659      	mov	r1, fp
 800e51e:	f1b8 0f00 	cmp.w	r8, #0
 800e522:	d013      	beq.n	800e54c <_strtod_l+0x914>
 800e524:	f7ff fb6c 	bl	800dc00 <sulp>
 800e528:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e52c:	ec5b ab17 	vmov	sl, fp, d7
 800e530:	e7e1      	b.n	800e4f6 <_strtod_l+0x8be>
 800e532:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e536:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e53a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e53e:	f04f 3aff 	mov.w	sl, #4294967295
 800e542:	e7d8      	b.n	800e4f6 <_strtod_l+0x8be>
 800e544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e546:	ea13 0f0a 	tst.w	r3, sl
 800e54a:	e7e4      	b.n	800e516 <_strtod_l+0x8de>
 800e54c:	f7ff fb58 	bl	800dc00 <sulp>
 800e550:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e554:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55c:	ec5b ab10 	vmov	sl, fp, d0
 800e560:	d1c9      	bne.n	800e4f6 <_strtod_l+0x8be>
 800e562:	e617      	b.n	800e194 <_strtod_l+0x55c>
 800e564:	4629      	mov	r1, r5
 800e566:	4620      	mov	r0, r4
 800e568:	f003 f80e 	bl	8011588 <__ratio>
 800e56c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e570:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e578:	d85d      	bhi.n	800e636 <_strtod_l+0x9fe>
 800e57a:	f1b8 0f00 	cmp.w	r8, #0
 800e57e:	d164      	bne.n	800e64a <_strtod_l+0xa12>
 800e580:	f1ba 0f00 	cmp.w	sl, #0
 800e584:	d14b      	bne.n	800e61e <_strtod_l+0x9e6>
 800e586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e58a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d160      	bne.n	800e654 <_strtod_l+0xa1c>
 800e592:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e596:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59e:	d401      	bmi.n	800e5a4 <_strtod_l+0x96c>
 800e5a0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e5a4:	eeb1 ab48 	vneg.f64	d10, d8
 800e5a8:	486c      	ldr	r0, [pc, #432]	@ (800e75c <_strtod_l+0xb24>)
 800e5aa:	496e      	ldr	r1, [pc, #440]	@ (800e764 <_strtod_l+0xb2c>)
 800e5ac:	ea09 0700 	and.w	r7, r9, r0
 800e5b0:	428f      	cmp	r7, r1
 800e5b2:	ec53 2b1a 	vmov	r2, r3, d10
 800e5b6:	d17d      	bne.n	800e6b4 <_strtod_l+0xa7c>
 800e5b8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e5bc:	ec4b ab1c 	vmov	d12, sl, fp
 800e5c0:	eeb0 0b4c 	vmov.f64	d0, d12
 800e5c4:	f002 ff18 	bl	80113f8 <__ulp>
 800e5c8:	4864      	ldr	r0, [pc, #400]	@ (800e75c <_strtod_l+0xb24>)
 800e5ca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e5ce:	ee1c 3a90 	vmov	r3, s25
 800e5d2:	4a65      	ldr	r2, [pc, #404]	@ (800e768 <_strtod_l+0xb30>)
 800e5d4:	ea03 0100 	and.w	r1, r3, r0
 800e5d8:	4291      	cmp	r1, r2
 800e5da:	ec5b ab1c 	vmov	sl, fp, d12
 800e5de:	d93c      	bls.n	800e65a <_strtod_l+0xa22>
 800e5e0:	ee19 2a90 	vmov	r2, s19
 800e5e4:	4b5e      	ldr	r3, [pc, #376]	@ (800e760 <_strtod_l+0xb28>)
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d104      	bne.n	800e5f4 <_strtod_l+0x9bc>
 800e5ea:	ee19 3a10 	vmov	r3, s18
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	f43f ad3c 	beq.w	800e06c <_strtod_l+0x434>
 800e5f4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800e760 <_strtod_l+0xb28>
 800e5f8:	f04f 3aff 	mov.w	sl, #4294967295
 800e5fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e5fe:	9805      	ldr	r0, [sp, #20]
 800e600:	f002 fbce 	bl	8010da0 <_Bfree>
 800e604:	9805      	ldr	r0, [sp, #20]
 800e606:	4631      	mov	r1, r6
 800e608:	f002 fbca 	bl	8010da0 <_Bfree>
 800e60c:	9805      	ldr	r0, [sp, #20]
 800e60e:	4629      	mov	r1, r5
 800e610:	f002 fbc6 	bl	8010da0 <_Bfree>
 800e614:	9805      	ldr	r0, [sp, #20]
 800e616:	4621      	mov	r1, r4
 800e618:	f002 fbc2 	bl	8010da0 <_Bfree>
 800e61c:	e627      	b.n	800e26e <_strtod_l+0x636>
 800e61e:	f1ba 0f01 	cmp.w	sl, #1
 800e622:	d103      	bne.n	800e62c <_strtod_l+0x9f4>
 800e624:	f1bb 0f00 	cmp.w	fp, #0
 800e628:	f43f adb4 	beq.w	800e194 <_strtod_l+0x55c>
 800e62c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e630:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e634:	e7b8      	b.n	800e5a8 <_strtod_l+0x970>
 800e636:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e63a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e63e:	f1b8 0f00 	cmp.w	r8, #0
 800e642:	d0af      	beq.n	800e5a4 <_strtod_l+0x96c>
 800e644:	eeb0 ab48 	vmov.f64	d10, d8
 800e648:	e7ae      	b.n	800e5a8 <_strtod_l+0x970>
 800e64a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e64e:	eeb0 8b4a 	vmov.f64	d8, d10
 800e652:	e7a9      	b.n	800e5a8 <_strtod_l+0x970>
 800e654:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e658:	e7a6      	b.n	800e5a8 <_strtod_l+0x970>
 800e65a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e65e:	9b06      	ldr	r3, [sp, #24]
 800e660:	46d9      	mov	r9, fp
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1ca      	bne.n	800e5fc <_strtod_l+0x9c4>
 800e666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e66a:	0d1b      	lsrs	r3, r3, #20
 800e66c:	051b      	lsls	r3, r3, #20
 800e66e:	429f      	cmp	r7, r3
 800e670:	d1c4      	bne.n	800e5fc <_strtod_l+0x9c4>
 800e672:	ec51 0b18 	vmov	r0, r1, d8
 800e676:	f7f2 f85f 	bl	8000738 <__aeabi_d2lz>
 800e67a:	f7f2 f817 	bl	80006ac <__aeabi_l2d>
 800e67e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e682:	ec41 0b17 	vmov	d7, r0, r1
 800e686:	ea49 090a 	orr.w	r9, r9, sl
 800e68a:	ea59 0908 	orrs.w	r9, r9, r8
 800e68e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e692:	d03c      	beq.n	800e70e <_strtod_l+0xad6>
 800e694:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e740 <_strtod_l+0xb08>
 800e698:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	f53f acef 	bmi.w	800e082 <_strtod_l+0x44a>
 800e6a4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800e748 <_strtod_l+0xb10>
 800e6a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b0:	dda4      	ble.n	800e5fc <_strtod_l+0x9c4>
 800e6b2:	e4e6      	b.n	800e082 <_strtod_l+0x44a>
 800e6b4:	9906      	ldr	r1, [sp, #24]
 800e6b6:	b1e1      	cbz	r1, 800e6f2 <_strtod_l+0xaba>
 800e6b8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e6bc:	d819      	bhi.n	800e6f2 <_strtod_l+0xaba>
 800e6be:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c6:	d811      	bhi.n	800e6ec <_strtod_l+0xab4>
 800e6c8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e6cc:	ee18 3a10 	vmov	r3, s16
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	bf38      	it	cc
 800e6d4:	2301      	movcc	r3, #1
 800e6d6:	ee08 3a10 	vmov	s16, r3
 800e6da:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e6de:	f1b8 0f00 	cmp.w	r8, #0
 800e6e2:	d111      	bne.n	800e708 <_strtod_l+0xad0>
 800e6e4:	eeb1 7b48 	vneg.f64	d7, d8
 800e6e8:	ec53 2b17 	vmov	r2, r3, d7
 800e6ec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e6f0:	1bcb      	subs	r3, r1, r7
 800e6f2:	eeb0 0b49 	vmov.f64	d0, d9
 800e6f6:	ec43 2b1a 	vmov	d10, r2, r3
 800e6fa:	f002 fe7d 	bl	80113f8 <__ulp>
 800e6fe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e702:	ec5b ab19 	vmov	sl, fp, d9
 800e706:	e7aa      	b.n	800e65e <_strtod_l+0xa26>
 800e708:	eeb0 7b48 	vmov.f64	d7, d8
 800e70c:	e7ec      	b.n	800e6e8 <_strtod_l+0xab0>
 800e70e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e750 <_strtod_l+0xb18>
 800e712:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71a:	f57f af6f 	bpl.w	800e5fc <_strtod_l+0x9c4>
 800e71e:	e4b0      	b.n	800e082 <_strtod_l+0x44a>
 800e720:	2300      	movs	r3, #0
 800e722:	9308      	str	r3, [sp, #32]
 800e724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e726:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	f7ff bac4 	b.w	800dcb6 <_strtod_l+0x7e>
 800e72e:	2a65      	cmp	r2, #101	@ 0x65
 800e730:	f43f abbf 	beq.w	800deb2 <_strtod_l+0x27a>
 800e734:	2a45      	cmp	r2, #69	@ 0x45
 800e736:	f43f abbc 	beq.w	800deb2 <_strtod_l+0x27a>
 800e73a:	2101      	movs	r1, #1
 800e73c:	f7ff bbf4 	b.w	800df28 <_strtod_l+0x2f0>
 800e740:	94a03595 	.word	0x94a03595
 800e744:	3fdfffff 	.word	0x3fdfffff
 800e748:	35afe535 	.word	0x35afe535
 800e74c:	3fe00000 	.word	0x3fe00000
 800e750:	94a03595 	.word	0x94a03595
 800e754:	3fcfffff 	.word	0x3fcfffff
 800e758:	000fffff 	.word	0x000fffff
 800e75c:	7ff00000 	.word	0x7ff00000
 800e760:	7fefffff 	.word	0x7fefffff
 800e764:	7fe00000 	.word	0x7fe00000
 800e768:	7c9fffff 	.word	0x7c9fffff

0800e76c <_strtod_r>:
 800e76c:	4b01      	ldr	r3, [pc, #4]	@ (800e774 <_strtod_r+0x8>)
 800e76e:	f7ff ba63 	b.w	800dc38 <_strtod_l>
 800e772:	bf00      	nop
 800e774:	2400002c 	.word	0x2400002c

0800e778 <__cvt>:
 800e778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77a:	ed2d 8b02 	vpush	{d8}
 800e77e:	eeb0 8b40 	vmov.f64	d8, d0
 800e782:	b085      	sub	sp, #20
 800e784:	4617      	mov	r7, r2
 800e786:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e788:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e78a:	ee18 2a90 	vmov	r2, s17
 800e78e:	f025 0520 	bic.w	r5, r5, #32
 800e792:	2a00      	cmp	r2, #0
 800e794:	bfb6      	itet	lt
 800e796:	222d      	movlt	r2, #45	@ 0x2d
 800e798:	2200      	movge	r2, #0
 800e79a:	eeb1 8b40 	vneglt.f64	d8, d0
 800e79e:	2d46      	cmp	r5, #70	@ 0x46
 800e7a0:	460c      	mov	r4, r1
 800e7a2:	701a      	strb	r2, [r3, #0]
 800e7a4:	d004      	beq.n	800e7b0 <__cvt+0x38>
 800e7a6:	2d45      	cmp	r5, #69	@ 0x45
 800e7a8:	d100      	bne.n	800e7ac <__cvt+0x34>
 800e7aa:	3401      	adds	r4, #1
 800e7ac:	2102      	movs	r1, #2
 800e7ae:	e000      	b.n	800e7b2 <__cvt+0x3a>
 800e7b0:	2103      	movs	r1, #3
 800e7b2:	ab03      	add	r3, sp, #12
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	ab02      	add	r3, sp, #8
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	4633      	mov	r3, r6
 800e7be:	eeb0 0b48 	vmov.f64	d0, d8
 800e7c2:	f001 f9b9 	bl	800fb38 <_dtoa_r>
 800e7c6:	2d47      	cmp	r5, #71	@ 0x47
 800e7c8:	d114      	bne.n	800e7f4 <__cvt+0x7c>
 800e7ca:	07fb      	lsls	r3, r7, #31
 800e7cc:	d50a      	bpl.n	800e7e4 <__cvt+0x6c>
 800e7ce:	1902      	adds	r2, r0, r4
 800e7d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d8:	bf08      	it	eq
 800e7da:	9203      	streq	r2, [sp, #12]
 800e7dc:	2130      	movs	r1, #48	@ 0x30
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d319      	bcc.n	800e818 <__cvt+0xa0>
 800e7e4:	9b03      	ldr	r3, [sp, #12]
 800e7e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7e8:	1a1b      	subs	r3, r3, r0
 800e7ea:	6013      	str	r3, [r2, #0]
 800e7ec:	b005      	add	sp, #20
 800e7ee:	ecbd 8b02 	vpop	{d8}
 800e7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7f4:	2d46      	cmp	r5, #70	@ 0x46
 800e7f6:	eb00 0204 	add.w	r2, r0, r4
 800e7fa:	d1e9      	bne.n	800e7d0 <__cvt+0x58>
 800e7fc:	7803      	ldrb	r3, [r0, #0]
 800e7fe:	2b30      	cmp	r3, #48	@ 0x30
 800e800:	d107      	bne.n	800e812 <__cvt+0x9a>
 800e802:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	bf1c      	itt	ne
 800e80c:	f1c4 0401 	rsbne	r4, r4, #1
 800e810:	6034      	strne	r4, [r6, #0]
 800e812:	6833      	ldr	r3, [r6, #0]
 800e814:	441a      	add	r2, r3
 800e816:	e7db      	b.n	800e7d0 <__cvt+0x58>
 800e818:	1c5c      	adds	r4, r3, #1
 800e81a:	9403      	str	r4, [sp, #12]
 800e81c:	7019      	strb	r1, [r3, #0]
 800e81e:	e7de      	b.n	800e7de <__cvt+0x66>

0800e820 <__exponent>:
 800e820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e822:	2900      	cmp	r1, #0
 800e824:	bfba      	itte	lt
 800e826:	4249      	neglt	r1, r1
 800e828:	232d      	movlt	r3, #45	@ 0x2d
 800e82a:	232b      	movge	r3, #43	@ 0x2b
 800e82c:	2909      	cmp	r1, #9
 800e82e:	7002      	strb	r2, [r0, #0]
 800e830:	7043      	strb	r3, [r0, #1]
 800e832:	dd29      	ble.n	800e888 <__exponent+0x68>
 800e834:	f10d 0307 	add.w	r3, sp, #7
 800e838:	461d      	mov	r5, r3
 800e83a:	270a      	movs	r7, #10
 800e83c:	461a      	mov	r2, r3
 800e83e:	fbb1 f6f7 	udiv	r6, r1, r7
 800e842:	fb07 1416 	mls	r4, r7, r6, r1
 800e846:	3430      	adds	r4, #48	@ 0x30
 800e848:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e84c:	460c      	mov	r4, r1
 800e84e:	2c63      	cmp	r4, #99	@ 0x63
 800e850:	f103 33ff 	add.w	r3, r3, #4294967295
 800e854:	4631      	mov	r1, r6
 800e856:	dcf1      	bgt.n	800e83c <__exponent+0x1c>
 800e858:	3130      	adds	r1, #48	@ 0x30
 800e85a:	1e94      	subs	r4, r2, #2
 800e85c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e860:	1c41      	adds	r1, r0, #1
 800e862:	4623      	mov	r3, r4
 800e864:	42ab      	cmp	r3, r5
 800e866:	d30a      	bcc.n	800e87e <__exponent+0x5e>
 800e868:	f10d 0309 	add.w	r3, sp, #9
 800e86c:	1a9b      	subs	r3, r3, r2
 800e86e:	42ac      	cmp	r4, r5
 800e870:	bf88      	it	hi
 800e872:	2300      	movhi	r3, #0
 800e874:	3302      	adds	r3, #2
 800e876:	4403      	add	r3, r0
 800e878:	1a18      	subs	r0, r3, r0
 800e87a:	b003      	add	sp, #12
 800e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e87e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e882:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e886:	e7ed      	b.n	800e864 <__exponent+0x44>
 800e888:	2330      	movs	r3, #48	@ 0x30
 800e88a:	3130      	adds	r1, #48	@ 0x30
 800e88c:	7083      	strb	r3, [r0, #2]
 800e88e:	70c1      	strb	r1, [r0, #3]
 800e890:	1d03      	adds	r3, r0, #4
 800e892:	e7f1      	b.n	800e878 <__exponent+0x58>
 800e894:	0000      	movs	r0, r0
	...

0800e898 <_printf_float>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	b08d      	sub	sp, #52	@ 0x34
 800e89e:	460c      	mov	r4, r1
 800e8a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e8a4:	4616      	mov	r6, r2
 800e8a6:	461f      	mov	r7, r3
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	f001 f815 	bl	800f8d8 <_localeconv_r>
 800e8ae:	f8d0 b000 	ldr.w	fp, [r0]
 800e8b2:	4658      	mov	r0, fp
 800e8b4:	f7f1 fd64 	bl	8000380 <strlen>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e8c4:	6822      	ldr	r2, [r4, #0]
 800e8c6:	9005      	str	r0, [sp, #20]
 800e8c8:	3307      	adds	r3, #7
 800e8ca:	f023 0307 	bic.w	r3, r3, #7
 800e8ce:	f103 0108 	add.w	r1, r3, #8
 800e8d2:	f8c8 1000 	str.w	r1, [r8]
 800e8d6:	ed93 0b00 	vldr	d0, [r3]
 800e8da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800eb38 <_printf_float+0x2a0>
 800e8de:	eeb0 7bc0 	vabs.f64	d7, d0
 800e8e2:	eeb4 7b46 	vcmp.f64	d7, d6
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e8ee:	dd24      	ble.n	800e93a <_printf_float+0xa2>
 800e8f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f8:	d502      	bpl.n	800e900 <_printf_float+0x68>
 800e8fa:	232d      	movs	r3, #45	@ 0x2d
 800e8fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e900:	498f      	ldr	r1, [pc, #572]	@ (800eb40 <_printf_float+0x2a8>)
 800e902:	4b90      	ldr	r3, [pc, #576]	@ (800eb44 <_printf_float+0x2ac>)
 800e904:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e908:	bf8c      	ite	hi
 800e90a:	4688      	movhi	r8, r1
 800e90c:	4698      	movls	r8, r3
 800e90e:	f022 0204 	bic.w	r2, r2, #4
 800e912:	2303      	movs	r3, #3
 800e914:	6123      	str	r3, [r4, #16]
 800e916:	6022      	str	r2, [r4, #0]
 800e918:	f04f 0a00 	mov.w	sl, #0
 800e91c:	9700      	str	r7, [sp, #0]
 800e91e:	4633      	mov	r3, r6
 800e920:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e922:	4621      	mov	r1, r4
 800e924:	4628      	mov	r0, r5
 800e926:	f000 f9d1 	bl	800eccc <_printf_common>
 800e92a:	3001      	adds	r0, #1
 800e92c:	f040 8089 	bne.w	800ea42 <_printf_float+0x1aa>
 800e930:	f04f 30ff 	mov.w	r0, #4294967295
 800e934:	b00d      	add	sp, #52	@ 0x34
 800e936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93a:	eeb4 0b40 	vcmp.f64	d0, d0
 800e93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e942:	d709      	bvc.n	800e958 <_printf_float+0xc0>
 800e944:	ee10 3a90 	vmov	r3, s1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bfbc      	itt	lt
 800e94c:	232d      	movlt	r3, #45	@ 0x2d
 800e94e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e952:	497d      	ldr	r1, [pc, #500]	@ (800eb48 <_printf_float+0x2b0>)
 800e954:	4b7d      	ldr	r3, [pc, #500]	@ (800eb4c <_printf_float+0x2b4>)
 800e956:	e7d5      	b.n	800e904 <_printf_float+0x6c>
 800e958:	6863      	ldr	r3, [r4, #4]
 800e95a:	1c59      	adds	r1, r3, #1
 800e95c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e960:	d139      	bne.n	800e9d6 <_printf_float+0x13e>
 800e962:	2306      	movs	r3, #6
 800e964:	6063      	str	r3, [r4, #4]
 800e966:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e96a:	2300      	movs	r3, #0
 800e96c:	6022      	str	r2, [r4, #0]
 800e96e:	9303      	str	r3, [sp, #12]
 800e970:	ab0a      	add	r3, sp, #40	@ 0x28
 800e972:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e976:	ab09      	add	r3, sp, #36	@ 0x24
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	6861      	ldr	r1, [r4, #4]
 800e97c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e980:	4628      	mov	r0, r5
 800e982:	f7ff fef9 	bl	800e778 <__cvt>
 800e986:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e98a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e98c:	4680      	mov	r8, r0
 800e98e:	d129      	bne.n	800e9e4 <_printf_float+0x14c>
 800e990:	1cc8      	adds	r0, r1, #3
 800e992:	db02      	blt.n	800e99a <_printf_float+0x102>
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	4299      	cmp	r1, r3
 800e998:	dd41      	ble.n	800ea1e <_printf_float+0x186>
 800e99a:	f1a9 0902 	sub.w	r9, r9, #2
 800e99e:	fa5f f989 	uxtb.w	r9, r9
 800e9a2:	3901      	subs	r1, #1
 800e9a4:	464a      	mov	r2, r9
 800e9a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9ac:	f7ff ff38 	bl	800e820 <__exponent>
 800e9b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9b2:	1813      	adds	r3, r2, r0
 800e9b4:	2a01      	cmp	r2, #1
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	6123      	str	r3, [r4, #16]
 800e9ba:	dc02      	bgt.n	800e9c2 <_printf_float+0x12a>
 800e9bc:	6822      	ldr	r2, [r4, #0]
 800e9be:	07d2      	lsls	r2, r2, #31
 800e9c0:	d501      	bpl.n	800e9c6 <_printf_float+0x12e>
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	6123      	str	r3, [r4, #16]
 800e9c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d0a6      	beq.n	800e91c <_printf_float+0x84>
 800e9ce:	232d      	movs	r3, #45	@ 0x2d
 800e9d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9d4:	e7a2      	b.n	800e91c <_printf_float+0x84>
 800e9d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e9da:	d1c4      	bne.n	800e966 <_printf_float+0xce>
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1c2      	bne.n	800e966 <_printf_float+0xce>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e7bf      	b.n	800e964 <_printf_float+0xcc>
 800e9e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e9e8:	d9db      	bls.n	800e9a2 <_printf_float+0x10a>
 800e9ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e9ee:	d118      	bne.n	800ea22 <_printf_float+0x18a>
 800e9f0:	2900      	cmp	r1, #0
 800e9f2:	6863      	ldr	r3, [r4, #4]
 800e9f4:	dd0b      	ble.n	800ea0e <_printf_float+0x176>
 800e9f6:	6121      	str	r1, [r4, #16]
 800e9f8:	b913      	cbnz	r3, 800ea00 <_printf_float+0x168>
 800e9fa:	6822      	ldr	r2, [r4, #0]
 800e9fc:	07d0      	lsls	r0, r2, #31
 800e9fe:	d502      	bpl.n	800ea06 <_printf_float+0x16e>
 800ea00:	3301      	adds	r3, #1
 800ea02:	440b      	add	r3, r1
 800ea04:	6123      	str	r3, [r4, #16]
 800ea06:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea08:	f04f 0a00 	mov.w	sl, #0
 800ea0c:	e7db      	b.n	800e9c6 <_printf_float+0x12e>
 800ea0e:	b913      	cbnz	r3, 800ea16 <_printf_float+0x17e>
 800ea10:	6822      	ldr	r2, [r4, #0]
 800ea12:	07d2      	lsls	r2, r2, #31
 800ea14:	d501      	bpl.n	800ea1a <_printf_float+0x182>
 800ea16:	3302      	adds	r3, #2
 800ea18:	e7f4      	b.n	800ea04 <_printf_float+0x16c>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e7f2      	b.n	800ea04 <_printf_float+0x16c>
 800ea1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ea22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea24:	4299      	cmp	r1, r3
 800ea26:	db05      	blt.n	800ea34 <_printf_float+0x19c>
 800ea28:	6823      	ldr	r3, [r4, #0]
 800ea2a:	6121      	str	r1, [r4, #16]
 800ea2c:	07d8      	lsls	r0, r3, #31
 800ea2e:	d5ea      	bpl.n	800ea06 <_printf_float+0x16e>
 800ea30:	1c4b      	adds	r3, r1, #1
 800ea32:	e7e7      	b.n	800ea04 <_printf_float+0x16c>
 800ea34:	2900      	cmp	r1, #0
 800ea36:	bfd4      	ite	le
 800ea38:	f1c1 0202 	rsble	r2, r1, #2
 800ea3c:	2201      	movgt	r2, #1
 800ea3e:	4413      	add	r3, r2
 800ea40:	e7e0      	b.n	800ea04 <_printf_float+0x16c>
 800ea42:	6823      	ldr	r3, [r4, #0]
 800ea44:	055a      	lsls	r2, r3, #21
 800ea46:	d407      	bmi.n	800ea58 <_printf_float+0x1c0>
 800ea48:	6923      	ldr	r3, [r4, #16]
 800ea4a:	4642      	mov	r2, r8
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4628      	mov	r0, r5
 800ea50:	47b8      	blx	r7
 800ea52:	3001      	adds	r0, #1
 800ea54:	d12a      	bne.n	800eaac <_printf_float+0x214>
 800ea56:	e76b      	b.n	800e930 <_printf_float+0x98>
 800ea58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ea5c:	f240 80e0 	bls.w	800ec20 <_printf_float+0x388>
 800ea60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ea64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6c:	d133      	bne.n	800ead6 <_printf_float+0x23e>
 800ea6e:	4a38      	ldr	r2, [pc, #224]	@ (800eb50 <_printf_float+0x2b8>)
 800ea70:	2301      	movs	r3, #1
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	f43f af59 	beq.w	800e930 <_printf_float+0x98>
 800ea7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea82:	4543      	cmp	r3, r8
 800ea84:	db02      	blt.n	800ea8c <_printf_float+0x1f4>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	07d8      	lsls	r0, r3, #31
 800ea8a:	d50f      	bpl.n	800eaac <_printf_float+0x214>
 800ea8c:	9b05      	ldr	r3, [sp, #20]
 800ea8e:	465a      	mov	r2, fp
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	f43f af4a 	beq.w	800e930 <_printf_float+0x98>
 800ea9c:	f04f 0900 	mov.w	r9, #0
 800eaa0:	f108 38ff 	add.w	r8, r8, #4294967295
 800eaa4:	f104 0a1a 	add.w	sl, r4, #26
 800eaa8:	45c8      	cmp	r8, r9
 800eaaa:	dc09      	bgt.n	800eac0 <_printf_float+0x228>
 800eaac:	6823      	ldr	r3, [r4, #0]
 800eaae:	079b      	lsls	r3, r3, #30
 800eab0:	f100 8107 	bmi.w	800ecc2 <_printf_float+0x42a>
 800eab4:	68e0      	ldr	r0, [r4, #12]
 800eab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eab8:	4298      	cmp	r0, r3
 800eaba:	bfb8      	it	lt
 800eabc:	4618      	movlt	r0, r3
 800eabe:	e739      	b.n	800e934 <_printf_float+0x9c>
 800eac0:	2301      	movs	r3, #1
 800eac2:	4652      	mov	r2, sl
 800eac4:	4631      	mov	r1, r6
 800eac6:	4628      	mov	r0, r5
 800eac8:	47b8      	blx	r7
 800eaca:	3001      	adds	r0, #1
 800eacc:	f43f af30 	beq.w	800e930 <_printf_float+0x98>
 800ead0:	f109 0901 	add.w	r9, r9, #1
 800ead4:	e7e8      	b.n	800eaa8 <_printf_float+0x210>
 800ead6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ead8:	2b00      	cmp	r3, #0
 800eada:	dc3b      	bgt.n	800eb54 <_printf_float+0x2bc>
 800eadc:	4a1c      	ldr	r2, [pc, #112]	@ (800eb50 <_printf_float+0x2b8>)
 800eade:	2301      	movs	r3, #1
 800eae0:	4631      	mov	r1, r6
 800eae2:	4628      	mov	r0, r5
 800eae4:	47b8      	blx	r7
 800eae6:	3001      	adds	r0, #1
 800eae8:	f43f af22 	beq.w	800e930 <_printf_float+0x98>
 800eaec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eaf0:	ea59 0303 	orrs.w	r3, r9, r3
 800eaf4:	d102      	bne.n	800eafc <_printf_float+0x264>
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	07d9      	lsls	r1, r3, #31
 800eafa:	d5d7      	bpl.n	800eaac <_printf_float+0x214>
 800eafc:	9b05      	ldr	r3, [sp, #20]
 800eafe:	465a      	mov	r2, fp
 800eb00:	4631      	mov	r1, r6
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b8      	blx	r7
 800eb06:	3001      	adds	r0, #1
 800eb08:	f43f af12 	beq.w	800e930 <_printf_float+0x98>
 800eb0c:	f04f 0a00 	mov.w	sl, #0
 800eb10:	f104 0b1a 	add.w	fp, r4, #26
 800eb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb16:	425b      	negs	r3, r3
 800eb18:	4553      	cmp	r3, sl
 800eb1a:	dc01      	bgt.n	800eb20 <_printf_float+0x288>
 800eb1c:	464b      	mov	r3, r9
 800eb1e:	e794      	b.n	800ea4a <_printf_float+0x1b2>
 800eb20:	2301      	movs	r3, #1
 800eb22:	465a      	mov	r2, fp
 800eb24:	4631      	mov	r1, r6
 800eb26:	4628      	mov	r0, r5
 800eb28:	47b8      	blx	r7
 800eb2a:	3001      	adds	r0, #1
 800eb2c:	f43f af00 	beq.w	800e930 <_printf_float+0x98>
 800eb30:	f10a 0a01 	add.w	sl, sl, #1
 800eb34:	e7ee      	b.n	800eb14 <_printf_float+0x27c>
 800eb36:	bf00      	nop
 800eb38:	ffffffff 	.word	0xffffffff
 800eb3c:	7fefffff 	.word	0x7fefffff
 800eb40:	08012a96 	.word	0x08012a96
 800eb44:	08012a92 	.word	0x08012a92
 800eb48:	08012a9e 	.word	0x08012a9e
 800eb4c:	08012a9a 	.word	0x08012a9a
 800eb50:	08012c3e 	.word	0x08012c3e
 800eb54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb5a:	4553      	cmp	r3, sl
 800eb5c:	bfa8      	it	ge
 800eb5e:	4653      	movge	r3, sl
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	4699      	mov	r9, r3
 800eb64:	dc37      	bgt.n	800ebd6 <_printf_float+0x33e>
 800eb66:	2300      	movs	r3, #0
 800eb68:	9307      	str	r3, [sp, #28]
 800eb6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb6e:	f104 021a 	add.w	r2, r4, #26
 800eb72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb74:	9907      	ldr	r1, [sp, #28]
 800eb76:	9306      	str	r3, [sp, #24]
 800eb78:	eba3 0309 	sub.w	r3, r3, r9
 800eb7c:	428b      	cmp	r3, r1
 800eb7e:	dc31      	bgt.n	800ebe4 <_printf_float+0x34c>
 800eb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb82:	459a      	cmp	sl, r3
 800eb84:	dc3b      	bgt.n	800ebfe <_printf_float+0x366>
 800eb86:	6823      	ldr	r3, [r4, #0]
 800eb88:	07da      	lsls	r2, r3, #31
 800eb8a:	d438      	bmi.n	800ebfe <_printf_float+0x366>
 800eb8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb8e:	ebaa 0903 	sub.w	r9, sl, r3
 800eb92:	9b06      	ldr	r3, [sp, #24]
 800eb94:	ebaa 0303 	sub.w	r3, sl, r3
 800eb98:	4599      	cmp	r9, r3
 800eb9a:	bfa8      	it	ge
 800eb9c:	4699      	movge	r9, r3
 800eb9e:	f1b9 0f00 	cmp.w	r9, #0
 800eba2:	dc34      	bgt.n	800ec0e <_printf_float+0x376>
 800eba4:	f04f 0800 	mov.w	r8, #0
 800eba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebac:	f104 0b1a 	add.w	fp, r4, #26
 800ebb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb2:	ebaa 0303 	sub.w	r3, sl, r3
 800ebb6:	eba3 0309 	sub.w	r3, r3, r9
 800ebba:	4543      	cmp	r3, r8
 800ebbc:	f77f af76 	ble.w	800eaac <_printf_float+0x214>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	465a      	mov	r2, fp
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	47b8      	blx	r7
 800ebca:	3001      	adds	r0, #1
 800ebcc:	f43f aeb0 	beq.w	800e930 <_printf_float+0x98>
 800ebd0:	f108 0801 	add.w	r8, r8, #1
 800ebd4:	e7ec      	b.n	800ebb0 <_printf_float+0x318>
 800ebd6:	4642      	mov	r2, r8
 800ebd8:	4631      	mov	r1, r6
 800ebda:	4628      	mov	r0, r5
 800ebdc:	47b8      	blx	r7
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d1c1      	bne.n	800eb66 <_printf_float+0x2ce>
 800ebe2:	e6a5      	b.n	800e930 <_printf_float+0x98>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4628      	mov	r0, r5
 800ebea:	9206      	str	r2, [sp, #24]
 800ebec:	47b8      	blx	r7
 800ebee:	3001      	adds	r0, #1
 800ebf0:	f43f ae9e 	beq.w	800e930 <_printf_float+0x98>
 800ebf4:	9b07      	ldr	r3, [sp, #28]
 800ebf6:	9a06      	ldr	r2, [sp, #24]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	9307      	str	r3, [sp, #28]
 800ebfc:	e7b9      	b.n	800eb72 <_printf_float+0x2da>
 800ebfe:	9b05      	ldr	r3, [sp, #20]
 800ec00:	465a      	mov	r2, fp
 800ec02:	4631      	mov	r1, r6
 800ec04:	4628      	mov	r0, r5
 800ec06:	47b8      	blx	r7
 800ec08:	3001      	adds	r0, #1
 800ec0a:	d1bf      	bne.n	800eb8c <_printf_float+0x2f4>
 800ec0c:	e690      	b.n	800e930 <_printf_float+0x98>
 800ec0e:	9a06      	ldr	r2, [sp, #24]
 800ec10:	464b      	mov	r3, r9
 800ec12:	4442      	add	r2, r8
 800ec14:	4631      	mov	r1, r6
 800ec16:	4628      	mov	r0, r5
 800ec18:	47b8      	blx	r7
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	d1c2      	bne.n	800eba4 <_printf_float+0x30c>
 800ec1e:	e687      	b.n	800e930 <_printf_float+0x98>
 800ec20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ec24:	f1b9 0f01 	cmp.w	r9, #1
 800ec28:	dc01      	bgt.n	800ec2e <_printf_float+0x396>
 800ec2a:	07db      	lsls	r3, r3, #31
 800ec2c:	d536      	bpl.n	800ec9c <_printf_float+0x404>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4642      	mov	r2, r8
 800ec32:	4631      	mov	r1, r6
 800ec34:	4628      	mov	r0, r5
 800ec36:	47b8      	blx	r7
 800ec38:	3001      	adds	r0, #1
 800ec3a:	f43f ae79 	beq.w	800e930 <_printf_float+0x98>
 800ec3e:	9b05      	ldr	r3, [sp, #20]
 800ec40:	465a      	mov	r2, fp
 800ec42:	4631      	mov	r1, r6
 800ec44:	4628      	mov	r0, r5
 800ec46:	47b8      	blx	r7
 800ec48:	3001      	adds	r0, #1
 800ec4a:	f43f ae71 	beq.w	800e930 <_printf_float+0x98>
 800ec4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ec52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec5e:	d018      	beq.n	800ec92 <_printf_float+0x3fa>
 800ec60:	464b      	mov	r3, r9
 800ec62:	f108 0201 	add.w	r2, r8, #1
 800ec66:	4631      	mov	r1, r6
 800ec68:	4628      	mov	r0, r5
 800ec6a:	47b8      	blx	r7
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d10c      	bne.n	800ec8a <_printf_float+0x3f2>
 800ec70:	e65e      	b.n	800e930 <_printf_float+0x98>
 800ec72:	2301      	movs	r3, #1
 800ec74:	465a      	mov	r2, fp
 800ec76:	4631      	mov	r1, r6
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b8      	blx	r7
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	f43f ae57 	beq.w	800e930 <_printf_float+0x98>
 800ec82:	f108 0801 	add.w	r8, r8, #1
 800ec86:	45c8      	cmp	r8, r9
 800ec88:	dbf3      	blt.n	800ec72 <_printf_float+0x3da>
 800ec8a:	4653      	mov	r3, sl
 800ec8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec90:	e6dc      	b.n	800ea4c <_printf_float+0x1b4>
 800ec92:	f04f 0800 	mov.w	r8, #0
 800ec96:	f104 0b1a 	add.w	fp, r4, #26
 800ec9a:	e7f4      	b.n	800ec86 <_printf_float+0x3ee>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4642      	mov	r2, r8
 800eca0:	e7e1      	b.n	800ec66 <_printf_float+0x3ce>
 800eca2:	2301      	movs	r3, #1
 800eca4:	464a      	mov	r2, r9
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b8      	blx	r7
 800ecac:	3001      	adds	r0, #1
 800ecae:	f43f ae3f 	beq.w	800e930 <_printf_float+0x98>
 800ecb2:	f108 0801 	add.w	r8, r8, #1
 800ecb6:	68e3      	ldr	r3, [r4, #12]
 800ecb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecba:	1a5b      	subs	r3, r3, r1
 800ecbc:	4543      	cmp	r3, r8
 800ecbe:	dcf0      	bgt.n	800eca2 <_printf_float+0x40a>
 800ecc0:	e6f8      	b.n	800eab4 <_printf_float+0x21c>
 800ecc2:	f04f 0800 	mov.w	r8, #0
 800ecc6:	f104 0919 	add.w	r9, r4, #25
 800ecca:	e7f4      	b.n	800ecb6 <_printf_float+0x41e>

0800eccc <_printf_common>:
 800eccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd0:	4616      	mov	r6, r2
 800ecd2:	4698      	mov	r8, r3
 800ecd4:	688a      	ldr	r2, [r1, #8]
 800ecd6:	690b      	ldr	r3, [r1, #16]
 800ecd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	bfb8      	it	lt
 800ece0:	4613      	movlt	r3, r2
 800ece2:	6033      	str	r3, [r6, #0]
 800ece4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ece8:	4607      	mov	r7, r0
 800ecea:	460c      	mov	r4, r1
 800ecec:	b10a      	cbz	r2, 800ecf2 <_printf_common+0x26>
 800ecee:	3301      	adds	r3, #1
 800ecf0:	6033      	str	r3, [r6, #0]
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	0699      	lsls	r1, r3, #26
 800ecf6:	bf42      	ittt	mi
 800ecf8:	6833      	ldrmi	r3, [r6, #0]
 800ecfa:	3302      	addmi	r3, #2
 800ecfc:	6033      	strmi	r3, [r6, #0]
 800ecfe:	6825      	ldr	r5, [r4, #0]
 800ed00:	f015 0506 	ands.w	r5, r5, #6
 800ed04:	d106      	bne.n	800ed14 <_printf_common+0x48>
 800ed06:	f104 0a19 	add.w	sl, r4, #25
 800ed0a:	68e3      	ldr	r3, [r4, #12]
 800ed0c:	6832      	ldr	r2, [r6, #0]
 800ed0e:	1a9b      	subs	r3, r3, r2
 800ed10:	42ab      	cmp	r3, r5
 800ed12:	dc26      	bgt.n	800ed62 <_printf_common+0x96>
 800ed14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed18:	6822      	ldr	r2, [r4, #0]
 800ed1a:	3b00      	subs	r3, #0
 800ed1c:	bf18      	it	ne
 800ed1e:	2301      	movne	r3, #1
 800ed20:	0692      	lsls	r2, r2, #26
 800ed22:	d42b      	bmi.n	800ed7c <_printf_common+0xb0>
 800ed24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed28:	4641      	mov	r1, r8
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	47c8      	blx	r9
 800ed2e:	3001      	adds	r0, #1
 800ed30:	d01e      	beq.n	800ed70 <_printf_common+0xa4>
 800ed32:	6823      	ldr	r3, [r4, #0]
 800ed34:	6922      	ldr	r2, [r4, #16]
 800ed36:	f003 0306 	and.w	r3, r3, #6
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	bf02      	ittt	eq
 800ed3e:	68e5      	ldreq	r5, [r4, #12]
 800ed40:	6833      	ldreq	r3, [r6, #0]
 800ed42:	1aed      	subeq	r5, r5, r3
 800ed44:	68a3      	ldr	r3, [r4, #8]
 800ed46:	bf0c      	ite	eq
 800ed48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed4c:	2500      	movne	r5, #0
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	bfc4      	itt	gt
 800ed52:	1a9b      	subgt	r3, r3, r2
 800ed54:	18ed      	addgt	r5, r5, r3
 800ed56:	2600      	movs	r6, #0
 800ed58:	341a      	adds	r4, #26
 800ed5a:	42b5      	cmp	r5, r6
 800ed5c:	d11a      	bne.n	800ed94 <_printf_common+0xc8>
 800ed5e:	2000      	movs	r0, #0
 800ed60:	e008      	b.n	800ed74 <_printf_common+0xa8>
 800ed62:	2301      	movs	r3, #1
 800ed64:	4652      	mov	r2, sl
 800ed66:	4641      	mov	r1, r8
 800ed68:	4638      	mov	r0, r7
 800ed6a:	47c8      	blx	r9
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	d103      	bne.n	800ed78 <_printf_common+0xac>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed78:	3501      	adds	r5, #1
 800ed7a:	e7c6      	b.n	800ed0a <_printf_common+0x3e>
 800ed7c:	18e1      	adds	r1, r4, r3
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	2030      	movs	r0, #48	@ 0x30
 800ed82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed86:	4422      	add	r2, r4
 800ed88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed90:	3302      	adds	r3, #2
 800ed92:	e7c7      	b.n	800ed24 <_printf_common+0x58>
 800ed94:	2301      	movs	r3, #1
 800ed96:	4622      	mov	r2, r4
 800ed98:	4641      	mov	r1, r8
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	47c8      	blx	r9
 800ed9e:	3001      	adds	r0, #1
 800eda0:	d0e6      	beq.n	800ed70 <_printf_common+0xa4>
 800eda2:	3601      	adds	r6, #1
 800eda4:	e7d9      	b.n	800ed5a <_printf_common+0x8e>
	...

0800eda8 <_printf_i>:
 800eda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edac:	7e0f      	ldrb	r7, [r1, #24]
 800edae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edb0:	2f78      	cmp	r7, #120	@ 0x78
 800edb2:	4691      	mov	r9, r2
 800edb4:	4680      	mov	r8, r0
 800edb6:	460c      	mov	r4, r1
 800edb8:	469a      	mov	sl, r3
 800edba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edbe:	d807      	bhi.n	800edd0 <_printf_i+0x28>
 800edc0:	2f62      	cmp	r7, #98	@ 0x62
 800edc2:	d80a      	bhi.n	800edda <_printf_i+0x32>
 800edc4:	2f00      	cmp	r7, #0
 800edc6:	f000 80d1 	beq.w	800ef6c <_printf_i+0x1c4>
 800edca:	2f58      	cmp	r7, #88	@ 0x58
 800edcc:	f000 80b8 	beq.w	800ef40 <_printf_i+0x198>
 800edd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800edd8:	e03a      	b.n	800ee50 <_printf_i+0xa8>
 800edda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edde:	2b15      	cmp	r3, #21
 800ede0:	d8f6      	bhi.n	800edd0 <_printf_i+0x28>
 800ede2:	a101      	add	r1, pc, #4	@ (adr r1, 800ede8 <_printf_i+0x40>)
 800ede4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ede8:	0800ee41 	.word	0x0800ee41
 800edec:	0800ee55 	.word	0x0800ee55
 800edf0:	0800edd1 	.word	0x0800edd1
 800edf4:	0800edd1 	.word	0x0800edd1
 800edf8:	0800edd1 	.word	0x0800edd1
 800edfc:	0800edd1 	.word	0x0800edd1
 800ee00:	0800ee55 	.word	0x0800ee55
 800ee04:	0800edd1 	.word	0x0800edd1
 800ee08:	0800edd1 	.word	0x0800edd1
 800ee0c:	0800edd1 	.word	0x0800edd1
 800ee10:	0800edd1 	.word	0x0800edd1
 800ee14:	0800ef53 	.word	0x0800ef53
 800ee18:	0800ee7f 	.word	0x0800ee7f
 800ee1c:	0800ef0d 	.word	0x0800ef0d
 800ee20:	0800edd1 	.word	0x0800edd1
 800ee24:	0800edd1 	.word	0x0800edd1
 800ee28:	0800ef75 	.word	0x0800ef75
 800ee2c:	0800edd1 	.word	0x0800edd1
 800ee30:	0800ee7f 	.word	0x0800ee7f
 800ee34:	0800edd1 	.word	0x0800edd1
 800ee38:	0800edd1 	.word	0x0800edd1
 800ee3c:	0800ef15 	.word	0x0800ef15
 800ee40:	6833      	ldr	r3, [r6, #0]
 800ee42:	1d1a      	adds	r2, r3, #4
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6032      	str	r2, [r6, #0]
 800ee48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee50:	2301      	movs	r3, #1
 800ee52:	e09c      	b.n	800ef8e <_printf_i+0x1e6>
 800ee54:	6833      	ldr	r3, [r6, #0]
 800ee56:	6820      	ldr	r0, [r4, #0]
 800ee58:	1d19      	adds	r1, r3, #4
 800ee5a:	6031      	str	r1, [r6, #0]
 800ee5c:	0606      	lsls	r6, r0, #24
 800ee5e:	d501      	bpl.n	800ee64 <_printf_i+0xbc>
 800ee60:	681d      	ldr	r5, [r3, #0]
 800ee62:	e003      	b.n	800ee6c <_printf_i+0xc4>
 800ee64:	0645      	lsls	r5, r0, #25
 800ee66:	d5fb      	bpl.n	800ee60 <_printf_i+0xb8>
 800ee68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee6c:	2d00      	cmp	r5, #0
 800ee6e:	da03      	bge.n	800ee78 <_printf_i+0xd0>
 800ee70:	232d      	movs	r3, #45	@ 0x2d
 800ee72:	426d      	negs	r5, r5
 800ee74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee78:	4858      	ldr	r0, [pc, #352]	@ (800efdc <_printf_i+0x234>)
 800ee7a:	230a      	movs	r3, #10
 800ee7c:	e011      	b.n	800eea2 <_printf_i+0xfa>
 800ee7e:	6821      	ldr	r1, [r4, #0]
 800ee80:	6833      	ldr	r3, [r6, #0]
 800ee82:	0608      	lsls	r0, r1, #24
 800ee84:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee88:	d402      	bmi.n	800ee90 <_printf_i+0xe8>
 800ee8a:	0649      	lsls	r1, r1, #25
 800ee8c:	bf48      	it	mi
 800ee8e:	b2ad      	uxthmi	r5, r5
 800ee90:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee92:	4852      	ldr	r0, [pc, #328]	@ (800efdc <_printf_i+0x234>)
 800ee94:	6033      	str	r3, [r6, #0]
 800ee96:	bf14      	ite	ne
 800ee98:	230a      	movne	r3, #10
 800ee9a:	2308      	moveq	r3, #8
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eea2:	6866      	ldr	r6, [r4, #4]
 800eea4:	60a6      	str	r6, [r4, #8]
 800eea6:	2e00      	cmp	r6, #0
 800eea8:	db05      	blt.n	800eeb6 <_printf_i+0x10e>
 800eeaa:	6821      	ldr	r1, [r4, #0]
 800eeac:	432e      	orrs	r6, r5
 800eeae:	f021 0104 	bic.w	r1, r1, #4
 800eeb2:	6021      	str	r1, [r4, #0]
 800eeb4:	d04b      	beq.n	800ef4e <_printf_i+0x1a6>
 800eeb6:	4616      	mov	r6, r2
 800eeb8:	fbb5 f1f3 	udiv	r1, r5, r3
 800eebc:	fb03 5711 	mls	r7, r3, r1, r5
 800eec0:	5dc7      	ldrb	r7, [r0, r7]
 800eec2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eec6:	462f      	mov	r7, r5
 800eec8:	42bb      	cmp	r3, r7
 800eeca:	460d      	mov	r5, r1
 800eecc:	d9f4      	bls.n	800eeb8 <_printf_i+0x110>
 800eece:	2b08      	cmp	r3, #8
 800eed0:	d10b      	bne.n	800eeea <_printf_i+0x142>
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	07df      	lsls	r7, r3, #31
 800eed6:	d508      	bpl.n	800eeea <_printf_i+0x142>
 800eed8:	6923      	ldr	r3, [r4, #16]
 800eeda:	6861      	ldr	r1, [r4, #4]
 800eedc:	4299      	cmp	r1, r3
 800eede:	bfde      	ittt	le
 800eee0:	2330      	movle	r3, #48	@ 0x30
 800eee2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eee6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eeea:	1b92      	subs	r2, r2, r6
 800eeec:	6122      	str	r2, [r4, #16]
 800eeee:	f8cd a000 	str.w	sl, [sp]
 800eef2:	464b      	mov	r3, r9
 800eef4:	aa03      	add	r2, sp, #12
 800eef6:	4621      	mov	r1, r4
 800eef8:	4640      	mov	r0, r8
 800eefa:	f7ff fee7 	bl	800eccc <_printf_common>
 800eefe:	3001      	adds	r0, #1
 800ef00:	d14a      	bne.n	800ef98 <_printf_i+0x1f0>
 800ef02:	f04f 30ff 	mov.w	r0, #4294967295
 800ef06:	b004      	add	sp, #16
 800ef08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef0c:	6823      	ldr	r3, [r4, #0]
 800ef0e:	f043 0320 	orr.w	r3, r3, #32
 800ef12:	6023      	str	r3, [r4, #0]
 800ef14:	4832      	ldr	r0, [pc, #200]	@ (800efe0 <_printf_i+0x238>)
 800ef16:	2778      	movs	r7, #120	@ 0x78
 800ef18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	6831      	ldr	r1, [r6, #0]
 800ef20:	061f      	lsls	r7, r3, #24
 800ef22:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef26:	d402      	bmi.n	800ef2e <_printf_i+0x186>
 800ef28:	065f      	lsls	r7, r3, #25
 800ef2a:	bf48      	it	mi
 800ef2c:	b2ad      	uxthmi	r5, r5
 800ef2e:	6031      	str	r1, [r6, #0]
 800ef30:	07d9      	lsls	r1, r3, #31
 800ef32:	bf44      	itt	mi
 800ef34:	f043 0320 	orrmi.w	r3, r3, #32
 800ef38:	6023      	strmi	r3, [r4, #0]
 800ef3a:	b11d      	cbz	r5, 800ef44 <_printf_i+0x19c>
 800ef3c:	2310      	movs	r3, #16
 800ef3e:	e7ad      	b.n	800ee9c <_printf_i+0xf4>
 800ef40:	4826      	ldr	r0, [pc, #152]	@ (800efdc <_printf_i+0x234>)
 800ef42:	e7e9      	b.n	800ef18 <_printf_i+0x170>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	f023 0320 	bic.w	r3, r3, #32
 800ef4a:	6023      	str	r3, [r4, #0]
 800ef4c:	e7f6      	b.n	800ef3c <_printf_i+0x194>
 800ef4e:	4616      	mov	r6, r2
 800ef50:	e7bd      	b.n	800eece <_printf_i+0x126>
 800ef52:	6833      	ldr	r3, [r6, #0]
 800ef54:	6825      	ldr	r5, [r4, #0]
 800ef56:	6961      	ldr	r1, [r4, #20]
 800ef58:	1d18      	adds	r0, r3, #4
 800ef5a:	6030      	str	r0, [r6, #0]
 800ef5c:	062e      	lsls	r6, r5, #24
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	d501      	bpl.n	800ef66 <_printf_i+0x1be>
 800ef62:	6019      	str	r1, [r3, #0]
 800ef64:	e002      	b.n	800ef6c <_printf_i+0x1c4>
 800ef66:	0668      	lsls	r0, r5, #25
 800ef68:	d5fb      	bpl.n	800ef62 <_printf_i+0x1ba>
 800ef6a:	8019      	strh	r1, [r3, #0]
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	6123      	str	r3, [r4, #16]
 800ef70:	4616      	mov	r6, r2
 800ef72:	e7bc      	b.n	800eeee <_printf_i+0x146>
 800ef74:	6833      	ldr	r3, [r6, #0]
 800ef76:	1d1a      	adds	r2, r3, #4
 800ef78:	6032      	str	r2, [r6, #0]
 800ef7a:	681e      	ldr	r6, [r3, #0]
 800ef7c:	6862      	ldr	r2, [r4, #4]
 800ef7e:	2100      	movs	r1, #0
 800ef80:	4630      	mov	r0, r6
 800ef82:	f7f1 f9ad 	bl	80002e0 <memchr>
 800ef86:	b108      	cbz	r0, 800ef8c <_printf_i+0x1e4>
 800ef88:	1b80      	subs	r0, r0, r6
 800ef8a:	6060      	str	r0, [r4, #4]
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	6123      	str	r3, [r4, #16]
 800ef90:	2300      	movs	r3, #0
 800ef92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef96:	e7aa      	b.n	800eeee <_printf_i+0x146>
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	4632      	mov	r2, r6
 800ef9c:	4649      	mov	r1, r9
 800ef9e:	4640      	mov	r0, r8
 800efa0:	47d0      	blx	sl
 800efa2:	3001      	adds	r0, #1
 800efa4:	d0ad      	beq.n	800ef02 <_printf_i+0x15a>
 800efa6:	6823      	ldr	r3, [r4, #0]
 800efa8:	079b      	lsls	r3, r3, #30
 800efaa:	d413      	bmi.n	800efd4 <_printf_i+0x22c>
 800efac:	68e0      	ldr	r0, [r4, #12]
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	4298      	cmp	r0, r3
 800efb2:	bfb8      	it	lt
 800efb4:	4618      	movlt	r0, r3
 800efb6:	e7a6      	b.n	800ef06 <_printf_i+0x15e>
 800efb8:	2301      	movs	r3, #1
 800efba:	4632      	mov	r2, r6
 800efbc:	4649      	mov	r1, r9
 800efbe:	4640      	mov	r0, r8
 800efc0:	47d0      	blx	sl
 800efc2:	3001      	adds	r0, #1
 800efc4:	d09d      	beq.n	800ef02 <_printf_i+0x15a>
 800efc6:	3501      	adds	r5, #1
 800efc8:	68e3      	ldr	r3, [r4, #12]
 800efca:	9903      	ldr	r1, [sp, #12]
 800efcc:	1a5b      	subs	r3, r3, r1
 800efce:	42ab      	cmp	r3, r5
 800efd0:	dcf2      	bgt.n	800efb8 <_printf_i+0x210>
 800efd2:	e7eb      	b.n	800efac <_printf_i+0x204>
 800efd4:	2500      	movs	r5, #0
 800efd6:	f104 0619 	add.w	r6, r4, #25
 800efda:	e7f5      	b.n	800efc8 <_printf_i+0x220>
 800efdc:	08012aa2 	.word	0x08012aa2
 800efe0:	08012ab3 	.word	0x08012ab3

0800efe4 <_scanf_float>:
 800efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	b087      	sub	sp, #28
 800efea:	4691      	mov	r9, r2
 800efec:	9303      	str	r3, [sp, #12]
 800efee:	688b      	ldr	r3, [r1, #8]
 800eff0:	1e5a      	subs	r2, r3, #1
 800eff2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800eff6:	bf81      	itttt	hi
 800eff8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800effc:	eb03 0b05 	addhi.w	fp, r3, r5
 800f000:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f004:	608b      	strhi	r3, [r1, #8]
 800f006:	680b      	ldr	r3, [r1, #0]
 800f008:	460a      	mov	r2, r1
 800f00a:	f04f 0500 	mov.w	r5, #0
 800f00e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f012:	f842 3b1c 	str.w	r3, [r2], #28
 800f016:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f01a:	4680      	mov	r8, r0
 800f01c:	460c      	mov	r4, r1
 800f01e:	bf98      	it	ls
 800f020:	f04f 0b00 	movls.w	fp, #0
 800f024:	9201      	str	r2, [sp, #4]
 800f026:	4616      	mov	r6, r2
 800f028:	46aa      	mov	sl, r5
 800f02a:	462f      	mov	r7, r5
 800f02c:	9502      	str	r5, [sp, #8]
 800f02e:	68a2      	ldr	r2, [r4, #8]
 800f030:	b15a      	cbz	r2, 800f04a <_scanf_float+0x66>
 800f032:	f8d9 3000 	ldr.w	r3, [r9]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	2b4e      	cmp	r3, #78	@ 0x4e
 800f03a:	d863      	bhi.n	800f104 <_scanf_float+0x120>
 800f03c:	2b40      	cmp	r3, #64	@ 0x40
 800f03e:	d83b      	bhi.n	800f0b8 <_scanf_float+0xd4>
 800f040:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f044:	b2c8      	uxtb	r0, r1
 800f046:	280e      	cmp	r0, #14
 800f048:	d939      	bls.n	800f0be <_scanf_float+0xda>
 800f04a:	b11f      	cbz	r7, 800f054 <_scanf_float+0x70>
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f058:	f1ba 0f01 	cmp.w	sl, #1
 800f05c:	f200 8114 	bhi.w	800f288 <_scanf_float+0x2a4>
 800f060:	9b01      	ldr	r3, [sp, #4]
 800f062:	429e      	cmp	r6, r3
 800f064:	f200 8105 	bhi.w	800f272 <_scanf_float+0x28e>
 800f068:	2001      	movs	r0, #1
 800f06a:	b007      	add	sp, #28
 800f06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f070:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f074:	2a0d      	cmp	r2, #13
 800f076:	d8e8      	bhi.n	800f04a <_scanf_float+0x66>
 800f078:	a101      	add	r1, pc, #4	@ (adr r1, 800f080 <_scanf_float+0x9c>)
 800f07a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f07e:	bf00      	nop
 800f080:	0800f1c9 	.word	0x0800f1c9
 800f084:	0800f04b 	.word	0x0800f04b
 800f088:	0800f04b 	.word	0x0800f04b
 800f08c:	0800f04b 	.word	0x0800f04b
 800f090:	0800f225 	.word	0x0800f225
 800f094:	0800f1ff 	.word	0x0800f1ff
 800f098:	0800f04b 	.word	0x0800f04b
 800f09c:	0800f04b 	.word	0x0800f04b
 800f0a0:	0800f1d7 	.word	0x0800f1d7
 800f0a4:	0800f04b 	.word	0x0800f04b
 800f0a8:	0800f04b 	.word	0x0800f04b
 800f0ac:	0800f04b 	.word	0x0800f04b
 800f0b0:	0800f04b 	.word	0x0800f04b
 800f0b4:	0800f193 	.word	0x0800f193
 800f0b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f0bc:	e7da      	b.n	800f074 <_scanf_float+0x90>
 800f0be:	290e      	cmp	r1, #14
 800f0c0:	d8c3      	bhi.n	800f04a <_scanf_float+0x66>
 800f0c2:	a001      	add	r0, pc, #4	@ (adr r0, 800f0c8 <_scanf_float+0xe4>)
 800f0c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f0c8:	0800f183 	.word	0x0800f183
 800f0cc:	0800f04b 	.word	0x0800f04b
 800f0d0:	0800f183 	.word	0x0800f183
 800f0d4:	0800f213 	.word	0x0800f213
 800f0d8:	0800f04b 	.word	0x0800f04b
 800f0dc:	0800f125 	.word	0x0800f125
 800f0e0:	0800f169 	.word	0x0800f169
 800f0e4:	0800f169 	.word	0x0800f169
 800f0e8:	0800f169 	.word	0x0800f169
 800f0ec:	0800f169 	.word	0x0800f169
 800f0f0:	0800f169 	.word	0x0800f169
 800f0f4:	0800f169 	.word	0x0800f169
 800f0f8:	0800f169 	.word	0x0800f169
 800f0fc:	0800f169 	.word	0x0800f169
 800f100:	0800f169 	.word	0x0800f169
 800f104:	2b6e      	cmp	r3, #110	@ 0x6e
 800f106:	d809      	bhi.n	800f11c <_scanf_float+0x138>
 800f108:	2b60      	cmp	r3, #96	@ 0x60
 800f10a:	d8b1      	bhi.n	800f070 <_scanf_float+0x8c>
 800f10c:	2b54      	cmp	r3, #84	@ 0x54
 800f10e:	d07b      	beq.n	800f208 <_scanf_float+0x224>
 800f110:	2b59      	cmp	r3, #89	@ 0x59
 800f112:	d19a      	bne.n	800f04a <_scanf_float+0x66>
 800f114:	2d07      	cmp	r5, #7
 800f116:	d198      	bne.n	800f04a <_scanf_float+0x66>
 800f118:	2508      	movs	r5, #8
 800f11a:	e02f      	b.n	800f17c <_scanf_float+0x198>
 800f11c:	2b74      	cmp	r3, #116	@ 0x74
 800f11e:	d073      	beq.n	800f208 <_scanf_float+0x224>
 800f120:	2b79      	cmp	r3, #121	@ 0x79
 800f122:	e7f6      	b.n	800f112 <_scanf_float+0x12e>
 800f124:	6821      	ldr	r1, [r4, #0]
 800f126:	05c8      	lsls	r0, r1, #23
 800f128:	d51e      	bpl.n	800f168 <_scanf_float+0x184>
 800f12a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f12e:	6021      	str	r1, [r4, #0]
 800f130:	3701      	adds	r7, #1
 800f132:	f1bb 0f00 	cmp.w	fp, #0
 800f136:	d003      	beq.n	800f140 <_scanf_float+0x15c>
 800f138:	3201      	adds	r2, #1
 800f13a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f13e:	60a2      	str	r2, [r4, #8]
 800f140:	68a3      	ldr	r3, [r4, #8]
 800f142:	3b01      	subs	r3, #1
 800f144:	60a3      	str	r3, [r4, #8]
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	3301      	adds	r3, #1
 800f14a:	6123      	str	r3, [r4, #16]
 800f14c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f150:	3b01      	subs	r3, #1
 800f152:	2b00      	cmp	r3, #0
 800f154:	f8c9 3004 	str.w	r3, [r9, #4]
 800f158:	f340 8082 	ble.w	800f260 <_scanf_float+0x27c>
 800f15c:	f8d9 3000 	ldr.w	r3, [r9]
 800f160:	3301      	adds	r3, #1
 800f162:	f8c9 3000 	str.w	r3, [r9]
 800f166:	e762      	b.n	800f02e <_scanf_float+0x4a>
 800f168:	eb1a 0105 	adds.w	r1, sl, r5
 800f16c:	f47f af6d 	bne.w	800f04a <_scanf_float+0x66>
 800f170:	6822      	ldr	r2, [r4, #0]
 800f172:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f176:	6022      	str	r2, [r4, #0]
 800f178:	460d      	mov	r5, r1
 800f17a:	468a      	mov	sl, r1
 800f17c:	f806 3b01 	strb.w	r3, [r6], #1
 800f180:	e7de      	b.n	800f140 <_scanf_float+0x15c>
 800f182:	6822      	ldr	r2, [r4, #0]
 800f184:	0610      	lsls	r0, r2, #24
 800f186:	f57f af60 	bpl.w	800f04a <_scanf_float+0x66>
 800f18a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f18e:	6022      	str	r2, [r4, #0]
 800f190:	e7f4      	b.n	800f17c <_scanf_float+0x198>
 800f192:	f1ba 0f00 	cmp.w	sl, #0
 800f196:	d10c      	bne.n	800f1b2 <_scanf_float+0x1ce>
 800f198:	b977      	cbnz	r7, 800f1b8 <_scanf_float+0x1d4>
 800f19a:	6822      	ldr	r2, [r4, #0]
 800f19c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1a4:	d108      	bne.n	800f1b8 <_scanf_float+0x1d4>
 800f1a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1aa:	6022      	str	r2, [r4, #0]
 800f1ac:	f04f 0a01 	mov.w	sl, #1
 800f1b0:	e7e4      	b.n	800f17c <_scanf_float+0x198>
 800f1b2:	f1ba 0f02 	cmp.w	sl, #2
 800f1b6:	d050      	beq.n	800f25a <_scanf_float+0x276>
 800f1b8:	2d01      	cmp	r5, #1
 800f1ba:	d002      	beq.n	800f1c2 <_scanf_float+0x1de>
 800f1bc:	2d04      	cmp	r5, #4
 800f1be:	f47f af44 	bne.w	800f04a <_scanf_float+0x66>
 800f1c2:	3501      	adds	r5, #1
 800f1c4:	b2ed      	uxtb	r5, r5
 800f1c6:	e7d9      	b.n	800f17c <_scanf_float+0x198>
 800f1c8:	f1ba 0f01 	cmp.w	sl, #1
 800f1cc:	f47f af3d 	bne.w	800f04a <_scanf_float+0x66>
 800f1d0:	f04f 0a02 	mov.w	sl, #2
 800f1d4:	e7d2      	b.n	800f17c <_scanf_float+0x198>
 800f1d6:	b975      	cbnz	r5, 800f1f6 <_scanf_float+0x212>
 800f1d8:	2f00      	cmp	r7, #0
 800f1da:	f47f af37 	bne.w	800f04c <_scanf_float+0x68>
 800f1de:	6822      	ldr	r2, [r4, #0]
 800f1e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1e8:	f040 80fc 	bne.w	800f3e4 <_scanf_float+0x400>
 800f1ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1f0:	6022      	str	r2, [r4, #0]
 800f1f2:	2501      	movs	r5, #1
 800f1f4:	e7c2      	b.n	800f17c <_scanf_float+0x198>
 800f1f6:	2d03      	cmp	r5, #3
 800f1f8:	d0e3      	beq.n	800f1c2 <_scanf_float+0x1de>
 800f1fa:	2d05      	cmp	r5, #5
 800f1fc:	e7df      	b.n	800f1be <_scanf_float+0x1da>
 800f1fe:	2d02      	cmp	r5, #2
 800f200:	f47f af23 	bne.w	800f04a <_scanf_float+0x66>
 800f204:	2503      	movs	r5, #3
 800f206:	e7b9      	b.n	800f17c <_scanf_float+0x198>
 800f208:	2d06      	cmp	r5, #6
 800f20a:	f47f af1e 	bne.w	800f04a <_scanf_float+0x66>
 800f20e:	2507      	movs	r5, #7
 800f210:	e7b4      	b.n	800f17c <_scanf_float+0x198>
 800f212:	6822      	ldr	r2, [r4, #0]
 800f214:	0591      	lsls	r1, r2, #22
 800f216:	f57f af18 	bpl.w	800f04a <_scanf_float+0x66>
 800f21a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f21e:	6022      	str	r2, [r4, #0]
 800f220:	9702      	str	r7, [sp, #8]
 800f222:	e7ab      	b.n	800f17c <_scanf_float+0x198>
 800f224:	6822      	ldr	r2, [r4, #0]
 800f226:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f22a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f22e:	d005      	beq.n	800f23c <_scanf_float+0x258>
 800f230:	0550      	lsls	r0, r2, #21
 800f232:	f57f af0a 	bpl.w	800f04a <_scanf_float+0x66>
 800f236:	2f00      	cmp	r7, #0
 800f238:	f000 80d4 	beq.w	800f3e4 <_scanf_float+0x400>
 800f23c:	0591      	lsls	r1, r2, #22
 800f23e:	bf58      	it	pl
 800f240:	9902      	ldrpl	r1, [sp, #8]
 800f242:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f246:	bf58      	it	pl
 800f248:	1a79      	subpl	r1, r7, r1
 800f24a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f24e:	bf58      	it	pl
 800f250:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f254:	6022      	str	r2, [r4, #0]
 800f256:	2700      	movs	r7, #0
 800f258:	e790      	b.n	800f17c <_scanf_float+0x198>
 800f25a:	f04f 0a03 	mov.w	sl, #3
 800f25e:	e78d      	b.n	800f17c <_scanf_float+0x198>
 800f260:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f264:	4649      	mov	r1, r9
 800f266:	4640      	mov	r0, r8
 800f268:	4798      	blx	r3
 800f26a:	2800      	cmp	r0, #0
 800f26c:	f43f aedf 	beq.w	800f02e <_scanf_float+0x4a>
 800f270:	e6eb      	b.n	800f04a <_scanf_float+0x66>
 800f272:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f276:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f27a:	464a      	mov	r2, r9
 800f27c:	4640      	mov	r0, r8
 800f27e:	4798      	blx	r3
 800f280:	6923      	ldr	r3, [r4, #16]
 800f282:	3b01      	subs	r3, #1
 800f284:	6123      	str	r3, [r4, #16]
 800f286:	e6eb      	b.n	800f060 <_scanf_float+0x7c>
 800f288:	1e6b      	subs	r3, r5, #1
 800f28a:	2b06      	cmp	r3, #6
 800f28c:	d824      	bhi.n	800f2d8 <_scanf_float+0x2f4>
 800f28e:	2d02      	cmp	r5, #2
 800f290:	d836      	bhi.n	800f300 <_scanf_float+0x31c>
 800f292:	9b01      	ldr	r3, [sp, #4]
 800f294:	429e      	cmp	r6, r3
 800f296:	f67f aee7 	bls.w	800f068 <_scanf_float+0x84>
 800f29a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f29e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2a2:	464a      	mov	r2, r9
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	4798      	blx	r3
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	6123      	str	r3, [r4, #16]
 800f2ae:	e7f0      	b.n	800f292 <_scanf_float+0x2ae>
 800f2b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f2b8:	464a      	mov	r2, r9
 800f2ba:	4640      	mov	r0, r8
 800f2bc:	4798      	blx	r3
 800f2be:	6923      	ldr	r3, [r4, #16]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	6123      	str	r3, [r4, #16]
 800f2c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2c8:	fa5f fa8a 	uxtb.w	sl, sl
 800f2cc:	f1ba 0f02 	cmp.w	sl, #2
 800f2d0:	d1ee      	bne.n	800f2b0 <_scanf_float+0x2cc>
 800f2d2:	3d03      	subs	r5, #3
 800f2d4:	b2ed      	uxtb	r5, r5
 800f2d6:	1b76      	subs	r6, r6, r5
 800f2d8:	6823      	ldr	r3, [r4, #0]
 800f2da:	05da      	lsls	r2, r3, #23
 800f2dc:	d530      	bpl.n	800f340 <_scanf_float+0x35c>
 800f2de:	055b      	lsls	r3, r3, #21
 800f2e0:	d511      	bpl.n	800f306 <_scanf_float+0x322>
 800f2e2:	9b01      	ldr	r3, [sp, #4]
 800f2e4:	429e      	cmp	r6, r3
 800f2e6:	f67f aebf 	bls.w	800f068 <_scanf_float+0x84>
 800f2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2f2:	464a      	mov	r2, r9
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	4798      	blx	r3
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	6123      	str	r3, [r4, #16]
 800f2fe:	e7f0      	b.n	800f2e2 <_scanf_float+0x2fe>
 800f300:	46aa      	mov	sl, r5
 800f302:	46b3      	mov	fp, r6
 800f304:	e7de      	b.n	800f2c4 <_scanf_float+0x2e0>
 800f306:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	2965      	cmp	r1, #101	@ 0x65
 800f30e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f312:	f106 35ff 	add.w	r5, r6, #4294967295
 800f316:	6123      	str	r3, [r4, #16]
 800f318:	d00c      	beq.n	800f334 <_scanf_float+0x350>
 800f31a:	2945      	cmp	r1, #69	@ 0x45
 800f31c:	d00a      	beq.n	800f334 <_scanf_float+0x350>
 800f31e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f322:	464a      	mov	r2, r9
 800f324:	4640      	mov	r0, r8
 800f326:	4798      	blx	r3
 800f328:	6923      	ldr	r3, [r4, #16]
 800f32a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f32e:	3b01      	subs	r3, #1
 800f330:	1eb5      	subs	r5, r6, #2
 800f332:	6123      	str	r3, [r4, #16]
 800f334:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f338:	464a      	mov	r2, r9
 800f33a:	4640      	mov	r0, r8
 800f33c:	4798      	blx	r3
 800f33e:	462e      	mov	r6, r5
 800f340:	6822      	ldr	r2, [r4, #0]
 800f342:	f012 0210 	ands.w	r2, r2, #16
 800f346:	d001      	beq.n	800f34c <_scanf_float+0x368>
 800f348:	2000      	movs	r0, #0
 800f34a:	e68e      	b.n	800f06a <_scanf_float+0x86>
 800f34c:	7032      	strb	r2, [r6, #0]
 800f34e:	6823      	ldr	r3, [r4, #0]
 800f350:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f358:	d123      	bne.n	800f3a2 <_scanf_float+0x3be>
 800f35a:	9b02      	ldr	r3, [sp, #8]
 800f35c:	429f      	cmp	r7, r3
 800f35e:	d00a      	beq.n	800f376 <_scanf_float+0x392>
 800f360:	1bda      	subs	r2, r3, r7
 800f362:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f366:	429e      	cmp	r6, r3
 800f368:	bf28      	it	cs
 800f36a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f36e:	491e      	ldr	r1, [pc, #120]	@ (800f3e8 <_scanf_float+0x404>)
 800f370:	4630      	mov	r0, r6
 800f372:	f000 f96f 	bl	800f654 <siprintf>
 800f376:	9901      	ldr	r1, [sp, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	4640      	mov	r0, r8
 800f37c:	f7ff f9f6 	bl	800e76c <_strtod_r>
 800f380:	9b03      	ldr	r3, [sp, #12]
 800f382:	6821      	ldr	r1, [r4, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f011 0f02 	tst.w	r1, #2
 800f38a:	f103 0204 	add.w	r2, r3, #4
 800f38e:	d015      	beq.n	800f3bc <_scanf_float+0x3d8>
 800f390:	9903      	ldr	r1, [sp, #12]
 800f392:	600a      	str	r2, [r1, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	ed83 0b00 	vstr	d0, [r3]
 800f39a:	68e3      	ldr	r3, [r4, #12]
 800f39c:	3301      	adds	r3, #1
 800f39e:	60e3      	str	r3, [r4, #12]
 800f3a0:	e7d2      	b.n	800f348 <_scanf_float+0x364>
 800f3a2:	9b04      	ldr	r3, [sp, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d0e6      	beq.n	800f376 <_scanf_float+0x392>
 800f3a8:	9905      	ldr	r1, [sp, #20]
 800f3aa:	230a      	movs	r3, #10
 800f3ac:	3101      	adds	r1, #1
 800f3ae:	4640      	mov	r0, r8
 800f3b0:	f002 f9e0 	bl	8011774 <_strtol_r>
 800f3b4:	9b04      	ldr	r3, [sp, #16]
 800f3b6:	9e05      	ldr	r6, [sp, #20]
 800f3b8:	1ac2      	subs	r2, r0, r3
 800f3ba:	e7d2      	b.n	800f362 <_scanf_float+0x37e>
 800f3bc:	f011 0f04 	tst.w	r1, #4
 800f3c0:	9903      	ldr	r1, [sp, #12]
 800f3c2:	600a      	str	r2, [r1, #0]
 800f3c4:	d1e6      	bne.n	800f394 <_scanf_float+0x3b0>
 800f3c6:	eeb4 0b40 	vcmp.f64	d0, d0
 800f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ce:	681d      	ldr	r5, [r3, #0]
 800f3d0:	d705      	bvc.n	800f3de <_scanf_float+0x3fa>
 800f3d2:	4806      	ldr	r0, [pc, #24]	@ (800f3ec <_scanf_float+0x408>)
 800f3d4:	f000 fb20 	bl	800fa18 <nanf>
 800f3d8:	ed85 0a00 	vstr	s0, [r5]
 800f3dc:	e7dd      	b.n	800f39a <_scanf_float+0x3b6>
 800f3de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f3e2:	e7f9      	b.n	800f3d8 <_scanf_float+0x3f4>
 800f3e4:	2700      	movs	r7, #0
 800f3e6:	e635      	b.n	800f054 <_scanf_float+0x70>
 800f3e8:	08012ac4 	.word	0x08012ac4
 800f3ec:	08012c7e 	.word	0x08012c7e

0800f3f0 <std>:
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	b510      	push	{r4, lr}
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	e9c0 3300 	strd	r3, r3, [r0]
 800f3fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3fe:	6083      	str	r3, [r0, #8]
 800f400:	8181      	strh	r1, [r0, #12]
 800f402:	6643      	str	r3, [r0, #100]	@ 0x64
 800f404:	81c2      	strh	r2, [r0, #14]
 800f406:	6183      	str	r3, [r0, #24]
 800f408:	4619      	mov	r1, r3
 800f40a:	2208      	movs	r2, #8
 800f40c:	305c      	adds	r0, #92	@ 0x5c
 800f40e:	f000 fa49 	bl	800f8a4 <memset>
 800f412:	4b0d      	ldr	r3, [pc, #52]	@ (800f448 <std+0x58>)
 800f414:	6263      	str	r3, [r4, #36]	@ 0x24
 800f416:	4b0d      	ldr	r3, [pc, #52]	@ (800f44c <std+0x5c>)
 800f418:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f41a:	4b0d      	ldr	r3, [pc, #52]	@ (800f450 <std+0x60>)
 800f41c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f41e:	4b0d      	ldr	r3, [pc, #52]	@ (800f454 <std+0x64>)
 800f420:	6323      	str	r3, [r4, #48]	@ 0x30
 800f422:	4b0d      	ldr	r3, [pc, #52]	@ (800f458 <std+0x68>)
 800f424:	6224      	str	r4, [r4, #32]
 800f426:	429c      	cmp	r4, r3
 800f428:	d006      	beq.n	800f438 <std+0x48>
 800f42a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f42e:	4294      	cmp	r4, r2
 800f430:	d002      	beq.n	800f438 <std+0x48>
 800f432:	33d0      	adds	r3, #208	@ 0xd0
 800f434:	429c      	cmp	r4, r3
 800f436:	d105      	bne.n	800f444 <std+0x54>
 800f438:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f440:	f000 bace 	b.w	800f9e0 <__retarget_lock_init_recursive>
 800f444:	bd10      	pop	{r4, pc}
 800f446:	bf00      	nop
 800f448:	0800f6f1 	.word	0x0800f6f1
 800f44c:	0800f717 	.word	0x0800f717
 800f450:	0800f74f 	.word	0x0800f74f
 800f454:	0800f773 	.word	0x0800f773
 800f458:	24004dcc 	.word	0x24004dcc

0800f45c <stdio_exit_handler>:
 800f45c:	4a02      	ldr	r2, [pc, #8]	@ (800f468 <stdio_exit_handler+0xc>)
 800f45e:	4903      	ldr	r1, [pc, #12]	@ (800f46c <stdio_exit_handler+0x10>)
 800f460:	4803      	ldr	r0, [pc, #12]	@ (800f470 <stdio_exit_handler+0x14>)
 800f462:	f000 b869 	b.w	800f538 <_fwalk_sglue>
 800f466:	bf00      	nop
 800f468:	24000020 	.word	0x24000020
 800f46c:	08012409 	.word	0x08012409
 800f470:	2400019c 	.word	0x2400019c

0800f474 <cleanup_stdio>:
 800f474:	6841      	ldr	r1, [r0, #4]
 800f476:	4b0c      	ldr	r3, [pc, #48]	@ (800f4a8 <cleanup_stdio+0x34>)
 800f478:	4299      	cmp	r1, r3
 800f47a:	b510      	push	{r4, lr}
 800f47c:	4604      	mov	r4, r0
 800f47e:	d001      	beq.n	800f484 <cleanup_stdio+0x10>
 800f480:	f002 ffc2 	bl	8012408 <_fflush_r>
 800f484:	68a1      	ldr	r1, [r4, #8]
 800f486:	4b09      	ldr	r3, [pc, #36]	@ (800f4ac <cleanup_stdio+0x38>)
 800f488:	4299      	cmp	r1, r3
 800f48a:	d002      	beq.n	800f492 <cleanup_stdio+0x1e>
 800f48c:	4620      	mov	r0, r4
 800f48e:	f002 ffbb 	bl	8012408 <_fflush_r>
 800f492:	68e1      	ldr	r1, [r4, #12]
 800f494:	4b06      	ldr	r3, [pc, #24]	@ (800f4b0 <cleanup_stdio+0x3c>)
 800f496:	4299      	cmp	r1, r3
 800f498:	d004      	beq.n	800f4a4 <cleanup_stdio+0x30>
 800f49a:	4620      	mov	r0, r4
 800f49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4a0:	f002 bfb2 	b.w	8012408 <_fflush_r>
 800f4a4:	bd10      	pop	{r4, pc}
 800f4a6:	bf00      	nop
 800f4a8:	24004dcc 	.word	0x24004dcc
 800f4ac:	24004e34 	.word	0x24004e34
 800f4b0:	24004e9c 	.word	0x24004e9c

0800f4b4 <global_stdio_init.part.0>:
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f4e4 <global_stdio_init.part.0+0x30>)
 800f4b8:	4c0b      	ldr	r4, [pc, #44]	@ (800f4e8 <global_stdio_init.part.0+0x34>)
 800f4ba:	4a0c      	ldr	r2, [pc, #48]	@ (800f4ec <global_stdio_init.part.0+0x38>)
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	4620      	mov	r0, r4
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2104      	movs	r1, #4
 800f4c4:	f7ff ff94 	bl	800f3f0 <std>
 800f4c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	2109      	movs	r1, #9
 800f4d0:	f7ff ff8e 	bl	800f3f0 <std>
 800f4d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f4d8:	2202      	movs	r2, #2
 800f4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4de:	2112      	movs	r1, #18
 800f4e0:	f7ff bf86 	b.w	800f3f0 <std>
 800f4e4:	24004f04 	.word	0x24004f04
 800f4e8:	24004dcc 	.word	0x24004dcc
 800f4ec:	0800f45d 	.word	0x0800f45d

0800f4f0 <__sfp_lock_acquire>:
 800f4f0:	4801      	ldr	r0, [pc, #4]	@ (800f4f8 <__sfp_lock_acquire+0x8>)
 800f4f2:	f000 ba76 	b.w	800f9e2 <__retarget_lock_acquire_recursive>
 800f4f6:	bf00      	nop
 800f4f8:	24004f0d 	.word	0x24004f0d

0800f4fc <__sfp_lock_release>:
 800f4fc:	4801      	ldr	r0, [pc, #4]	@ (800f504 <__sfp_lock_release+0x8>)
 800f4fe:	f000 ba71 	b.w	800f9e4 <__retarget_lock_release_recursive>
 800f502:	bf00      	nop
 800f504:	24004f0d 	.word	0x24004f0d

0800f508 <__sinit>:
 800f508:	b510      	push	{r4, lr}
 800f50a:	4604      	mov	r4, r0
 800f50c:	f7ff fff0 	bl	800f4f0 <__sfp_lock_acquire>
 800f510:	6a23      	ldr	r3, [r4, #32]
 800f512:	b11b      	cbz	r3, 800f51c <__sinit+0x14>
 800f514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f518:	f7ff bff0 	b.w	800f4fc <__sfp_lock_release>
 800f51c:	4b04      	ldr	r3, [pc, #16]	@ (800f530 <__sinit+0x28>)
 800f51e:	6223      	str	r3, [r4, #32]
 800f520:	4b04      	ldr	r3, [pc, #16]	@ (800f534 <__sinit+0x2c>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1f5      	bne.n	800f514 <__sinit+0xc>
 800f528:	f7ff ffc4 	bl	800f4b4 <global_stdio_init.part.0>
 800f52c:	e7f2      	b.n	800f514 <__sinit+0xc>
 800f52e:	bf00      	nop
 800f530:	0800f475 	.word	0x0800f475
 800f534:	24004f04 	.word	0x24004f04

0800f538 <_fwalk_sglue>:
 800f538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f53c:	4607      	mov	r7, r0
 800f53e:	4688      	mov	r8, r1
 800f540:	4614      	mov	r4, r2
 800f542:	2600      	movs	r6, #0
 800f544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f548:	f1b9 0901 	subs.w	r9, r9, #1
 800f54c:	d505      	bpl.n	800f55a <_fwalk_sglue+0x22>
 800f54e:	6824      	ldr	r4, [r4, #0]
 800f550:	2c00      	cmp	r4, #0
 800f552:	d1f7      	bne.n	800f544 <_fwalk_sglue+0xc>
 800f554:	4630      	mov	r0, r6
 800f556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f55a:	89ab      	ldrh	r3, [r5, #12]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d907      	bls.n	800f570 <_fwalk_sglue+0x38>
 800f560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f564:	3301      	adds	r3, #1
 800f566:	d003      	beq.n	800f570 <_fwalk_sglue+0x38>
 800f568:	4629      	mov	r1, r5
 800f56a:	4638      	mov	r0, r7
 800f56c:	47c0      	blx	r8
 800f56e:	4306      	orrs	r6, r0
 800f570:	3568      	adds	r5, #104	@ 0x68
 800f572:	e7e9      	b.n	800f548 <_fwalk_sglue+0x10>

0800f574 <iprintf>:
 800f574:	b40f      	push	{r0, r1, r2, r3}
 800f576:	b507      	push	{r0, r1, r2, lr}
 800f578:	4906      	ldr	r1, [pc, #24]	@ (800f594 <iprintf+0x20>)
 800f57a:	ab04      	add	r3, sp, #16
 800f57c:	6808      	ldr	r0, [r1, #0]
 800f57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f582:	6881      	ldr	r1, [r0, #8]
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	f002 fc55 	bl	8011e34 <_vfiprintf_r>
 800f58a:	b003      	add	sp, #12
 800f58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f590:	b004      	add	sp, #16
 800f592:	4770      	bx	lr
 800f594:	24000198 	.word	0x24000198

0800f598 <_puts_r>:
 800f598:	6a03      	ldr	r3, [r0, #32]
 800f59a:	b570      	push	{r4, r5, r6, lr}
 800f59c:	6884      	ldr	r4, [r0, #8]
 800f59e:	4605      	mov	r5, r0
 800f5a0:	460e      	mov	r6, r1
 800f5a2:	b90b      	cbnz	r3, 800f5a8 <_puts_r+0x10>
 800f5a4:	f7ff ffb0 	bl	800f508 <__sinit>
 800f5a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5aa:	07db      	lsls	r3, r3, #31
 800f5ac:	d405      	bmi.n	800f5ba <_puts_r+0x22>
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	0598      	lsls	r0, r3, #22
 800f5b2:	d402      	bmi.n	800f5ba <_puts_r+0x22>
 800f5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5b6:	f000 fa14 	bl	800f9e2 <__retarget_lock_acquire_recursive>
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	0719      	lsls	r1, r3, #28
 800f5be:	d502      	bpl.n	800f5c6 <_puts_r+0x2e>
 800f5c0:	6923      	ldr	r3, [r4, #16]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d135      	bne.n	800f632 <_puts_r+0x9a>
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f000 f915 	bl	800f7f8 <__swsetup_r>
 800f5ce:	b380      	cbz	r0, 800f632 <_puts_r+0x9a>
 800f5d0:	f04f 35ff 	mov.w	r5, #4294967295
 800f5d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5d6:	07da      	lsls	r2, r3, #31
 800f5d8:	d405      	bmi.n	800f5e6 <_puts_r+0x4e>
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	059b      	lsls	r3, r3, #22
 800f5de:	d402      	bmi.n	800f5e6 <_puts_r+0x4e>
 800f5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5e2:	f000 f9ff 	bl	800f9e4 <__retarget_lock_release_recursive>
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	da04      	bge.n	800f5f8 <_puts_r+0x60>
 800f5ee:	69a2      	ldr	r2, [r4, #24]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	dc17      	bgt.n	800f624 <_puts_r+0x8c>
 800f5f4:	290a      	cmp	r1, #10
 800f5f6:	d015      	beq.n	800f624 <_puts_r+0x8c>
 800f5f8:	6823      	ldr	r3, [r4, #0]
 800f5fa:	1c5a      	adds	r2, r3, #1
 800f5fc:	6022      	str	r2, [r4, #0]
 800f5fe:	7019      	strb	r1, [r3, #0]
 800f600:	68a3      	ldr	r3, [r4, #8]
 800f602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f606:	3b01      	subs	r3, #1
 800f608:	60a3      	str	r3, [r4, #8]
 800f60a:	2900      	cmp	r1, #0
 800f60c:	d1ed      	bne.n	800f5ea <_puts_r+0x52>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	da11      	bge.n	800f636 <_puts_r+0x9e>
 800f612:	4622      	mov	r2, r4
 800f614:	210a      	movs	r1, #10
 800f616:	4628      	mov	r0, r5
 800f618:	f000 f8af 	bl	800f77a <__swbuf_r>
 800f61c:	3001      	adds	r0, #1
 800f61e:	d0d7      	beq.n	800f5d0 <_puts_r+0x38>
 800f620:	250a      	movs	r5, #10
 800f622:	e7d7      	b.n	800f5d4 <_puts_r+0x3c>
 800f624:	4622      	mov	r2, r4
 800f626:	4628      	mov	r0, r5
 800f628:	f000 f8a7 	bl	800f77a <__swbuf_r>
 800f62c:	3001      	adds	r0, #1
 800f62e:	d1e7      	bne.n	800f600 <_puts_r+0x68>
 800f630:	e7ce      	b.n	800f5d0 <_puts_r+0x38>
 800f632:	3e01      	subs	r6, #1
 800f634:	e7e4      	b.n	800f600 <_puts_r+0x68>
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	1c5a      	adds	r2, r3, #1
 800f63a:	6022      	str	r2, [r4, #0]
 800f63c:	220a      	movs	r2, #10
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	e7ee      	b.n	800f620 <_puts_r+0x88>
	...

0800f644 <puts>:
 800f644:	4b02      	ldr	r3, [pc, #8]	@ (800f650 <puts+0xc>)
 800f646:	4601      	mov	r1, r0
 800f648:	6818      	ldr	r0, [r3, #0]
 800f64a:	f7ff bfa5 	b.w	800f598 <_puts_r>
 800f64e:	bf00      	nop
 800f650:	24000198 	.word	0x24000198

0800f654 <siprintf>:
 800f654:	b40e      	push	{r1, r2, r3}
 800f656:	b510      	push	{r4, lr}
 800f658:	b09d      	sub	sp, #116	@ 0x74
 800f65a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f65c:	9002      	str	r0, [sp, #8]
 800f65e:	9006      	str	r0, [sp, #24]
 800f660:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f664:	480a      	ldr	r0, [pc, #40]	@ (800f690 <siprintf+0x3c>)
 800f666:	9107      	str	r1, [sp, #28]
 800f668:	9104      	str	r1, [sp, #16]
 800f66a:	490a      	ldr	r1, [pc, #40]	@ (800f694 <siprintf+0x40>)
 800f66c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f670:	9105      	str	r1, [sp, #20]
 800f672:	2400      	movs	r4, #0
 800f674:	a902      	add	r1, sp, #8
 800f676:	6800      	ldr	r0, [r0, #0]
 800f678:	9301      	str	r3, [sp, #4]
 800f67a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f67c:	f002 f8e4 	bl	8011848 <_svfiprintf_r>
 800f680:	9b02      	ldr	r3, [sp, #8]
 800f682:	701c      	strb	r4, [r3, #0]
 800f684:	b01d      	add	sp, #116	@ 0x74
 800f686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f68a:	b003      	add	sp, #12
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	24000198 	.word	0x24000198
 800f694:	ffff0208 	.word	0xffff0208

0800f698 <siscanf>:
 800f698:	b40e      	push	{r1, r2, r3}
 800f69a:	b570      	push	{r4, r5, r6, lr}
 800f69c:	b09d      	sub	sp, #116	@ 0x74
 800f69e:	ac21      	add	r4, sp, #132	@ 0x84
 800f6a0:	2500      	movs	r5, #0
 800f6a2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f6a6:	f854 6b04 	ldr.w	r6, [r4], #4
 800f6aa:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f6ae:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f6b0:	9002      	str	r0, [sp, #8]
 800f6b2:	9006      	str	r0, [sp, #24]
 800f6b4:	f7f0 fe64 	bl	8000380 <strlen>
 800f6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f6e8 <siscanf+0x50>)
 800f6ba:	9003      	str	r0, [sp, #12]
 800f6bc:	9007      	str	r0, [sp, #28]
 800f6be:	480b      	ldr	r0, [pc, #44]	@ (800f6ec <siscanf+0x54>)
 800f6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f6c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f6ca:	4632      	mov	r2, r6
 800f6cc:	4623      	mov	r3, r4
 800f6ce:	a902      	add	r1, sp, #8
 800f6d0:	6800      	ldr	r0, [r0, #0]
 800f6d2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f6d4:	9514      	str	r5, [sp, #80]	@ 0x50
 800f6d6:	9401      	str	r4, [sp, #4]
 800f6d8:	f002 fa0c 	bl	8011af4 <__ssvfiscanf_r>
 800f6dc:	b01d      	add	sp, #116	@ 0x74
 800f6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6e2:	b003      	add	sp, #12
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	0800f713 	.word	0x0800f713
 800f6ec:	24000198 	.word	0x24000198

0800f6f0 <__sread>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f8:	f000 f914 	bl	800f924 <_read_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	bfab      	itete	ge
 800f700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f702:	89a3      	ldrhlt	r3, [r4, #12]
 800f704:	181b      	addge	r3, r3, r0
 800f706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f70a:	bfac      	ite	ge
 800f70c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f70e:	81a3      	strhlt	r3, [r4, #12]
 800f710:	bd10      	pop	{r4, pc}

0800f712 <__seofread>:
 800f712:	2000      	movs	r0, #0
 800f714:	4770      	bx	lr

0800f716 <__swrite>:
 800f716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71a:	461f      	mov	r7, r3
 800f71c:	898b      	ldrh	r3, [r1, #12]
 800f71e:	05db      	lsls	r3, r3, #23
 800f720:	4605      	mov	r5, r0
 800f722:	460c      	mov	r4, r1
 800f724:	4616      	mov	r6, r2
 800f726:	d505      	bpl.n	800f734 <__swrite+0x1e>
 800f728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72c:	2302      	movs	r3, #2
 800f72e:	2200      	movs	r2, #0
 800f730:	f000 f8e6 	bl	800f900 <_lseek_r>
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f73a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f73e:	81a3      	strh	r3, [r4, #12]
 800f740:	4632      	mov	r2, r6
 800f742:	463b      	mov	r3, r7
 800f744:	4628      	mov	r0, r5
 800f746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f74a:	f000 b90d 	b.w	800f968 <_write_r>

0800f74e <__sseek>:
 800f74e:	b510      	push	{r4, lr}
 800f750:	460c      	mov	r4, r1
 800f752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f756:	f000 f8d3 	bl	800f900 <_lseek_r>
 800f75a:	1c43      	adds	r3, r0, #1
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	bf15      	itete	ne
 800f760:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f76a:	81a3      	strheq	r3, [r4, #12]
 800f76c:	bf18      	it	ne
 800f76e:	81a3      	strhne	r3, [r4, #12]
 800f770:	bd10      	pop	{r4, pc}

0800f772 <__sclose>:
 800f772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f776:	f000 b8b3 	b.w	800f8e0 <_close_r>

0800f77a <__swbuf_r>:
 800f77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77c:	460e      	mov	r6, r1
 800f77e:	4614      	mov	r4, r2
 800f780:	4605      	mov	r5, r0
 800f782:	b118      	cbz	r0, 800f78c <__swbuf_r+0x12>
 800f784:	6a03      	ldr	r3, [r0, #32]
 800f786:	b90b      	cbnz	r3, 800f78c <__swbuf_r+0x12>
 800f788:	f7ff febe 	bl	800f508 <__sinit>
 800f78c:	69a3      	ldr	r3, [r4, #24]
 800f78e:	60a3      	str	r3, [r4, #8]
 800f790:	89a3      	ldrh	r3, [r4, #12]
 800f792:	071a      	lsls	r2, r3, #28
 800f794:	d501      	bpl.n	800f79a <__swbuf_r+0x20>
 800f796:	6923      	ldr	r3, [r4, #16]
 800f798:	b943      	cbnz	r3, 800f7ac <__swbuf_r+0x32>
 800f79a:	4621      	mov	r1, r4
 800f79c:	4628      	mov	r0, r5
 800f79e:	f000 f82b 	bl	800f7f8 <__swsetup_r>
 800f7a2:	b118      	cbz	r0, 800f7ac <__swbuf_r+0x32>
 800f7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	6922      	ldr	r2, [r4, #16]
 800f7b0:	1a98      	subs	r0, r3, r2
 800f7b2:	6963      	ldr	r3, [r4, #20]
 800f7b4:	b2f6      	uxtb	r6, r6
 800f7b6:	4283      	cmp	r3, r0
 800f7b8:	4637      	mov	r7, r6
 800f7ba:	dc05      	bgt.n	800f7c8 <__swbuf_r+0x4e>
 800f7bc:	4621      	mov	r1, r4
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f002 fe22 	bl	8012408 <_fflush_r>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d1ed      	bne.n	800f7a4 <__swbuf_r+0x2a>
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	60a3      	str	r3, [r4, #8]
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	1c5a      	adds	r2, r3, #1
 800f7d2:	6022      	str	r2, [r4, #0]
 800f7d4:	701e      	strb	r6, [r3, #0]
 800f7d6:	6962      	ldr	r2, [r4, #20]
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d004      	beq.n	800f7e8 <__swbuf_r+0x6e>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	07db      	lsls	r3, r3, #31
 800f7e2:	d5e1      	bpl.n	800f7a8 <__swbuf_r+0x2e>
 800f7e4:	2e0a      	cmp	r6, #10
 800f7e6:	d1df      	bne.n	800f7a8 <__swbuf_r+0x2e>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f002 fe0c 	bl	8012408 <_fflush_r>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d0d9      	beq.n	800f7a8 <__swbuf_r+0x2e>
 800f7f4:	e7d6      	b.n	800f7a4 <__swbuf_r+0x2a>
	...

0800f7f8 <__swsetup_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4b29      	ldr	r3, [pc, #164]	@ (800f8a0 <__swsetup_r+0xa8>)
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	6818      	ldr	r0, [r3, #0]
 800f800:	460c      	mov	r4, r1
 800f802:	b118      	cbz	r0, 800f80c <__swsetup_r+0x14>
 800f804:	6a03      	ldr	r3, [r0, #32]
 800f806:	b90b      	cbnz	r3, 800f80c <__swsetup_r+0x14>
 800f808:	f7ff fe7e 	bl	800f508 <__sinit>
 800f80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f810:	0719      	lsls	r1, r3, #28
 800f812:	d422      	bmi.n	800f85a <__swsetup_r+0x62>
 800f814:	06da      	lsls	r2, r3, #27
 800f816:	d407      	bmi.n	800f828 <__swsetup_r+0x30>
 800f818:	2209      	movs	r2, #9
 800f81a:	602a      	str	r2, [r5, #0]
 800f81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f820:	81a3      	strh	r3, [r4, #12]
 800f822:	f04f 30ff 	mov.w	r0, #4294967295
 800f826:	e033      	b.n	800f890 <__swsetup_r+0x98>
 800f828:	0758      	lsls	r0, r3, #29
 800f82a:	d512      	bpl.n	800f852 <__swsetup_r+0x5a>
 800f82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f82e:	b141      	cbz	r1, 800f842 <__swsetup_r+0x4a>
 800f830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f834:	4299      	cmp	r1, r3
 800f836:	d002      	beq.n	800f83e <__swsetup_r+0x46>
 800f838:	4628      	mov	r0, r5
 800f83a:	f000 fedb 	bl	80105f4 <_free_r>
 800f83e:	2300      	movs	r3, #0
 800f840:	6363      	str	r3, [r4, #52]	@ 0x34
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f848:	81a3      	strh	r3, [r4, #12]
 800f84a:	2300      	movs	r3, #0
 800f84c:	6063      	str	r3, [r4, #4]
 800f84e:	6923      	ldr	r3, [r4, #16]
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	89a3      	ldrh	r3, [r4, #12]
 800f854:	f043 0308 	orr.w	r3, r3, #8
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	b94b      	cbnz	r3, 800f872 <__swsetup_r+0x7a>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f868:	d003      	beq.n	800f872 <__swsetup_r+0x7a>
 800f86a:	4621      	mov	r1, r4
 800f86c:	4628      	mov	r0, r5
 800f86e:	f002 fe19 	bl	80124a4 <__smakebuf_r>
 800f872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f876:	f013 0201 	ands.w	r2, r3, #1
 800f87a:	d00a      	beq.n	800f892 <__swsetup_r+0x9a>
 800f87c:	2200      	movs	r2, #0
 800f87e:	60a2      	str	r2, [r4, #8]
 800f880:	6962      	ldr	r2, [r4, #20]
 800f882:	4252      	negs	r2, r2
 800f884:	61a2      	str	r2, [r4, #24]
 800f886:	6922      	ldr	r2, [r4, #16]
 800f888:	b942      	cbnz	r2, 800f89c <__swsetup_r+0xa4>
 800f88a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f88e:	d1c5      	bne.n	800f81c <__swsetup_r+0x24>
 800f890:	bd38      	pop	{r3, r4, r5, pc}
 800f892:	0799      	lsls	r1, r3, #30
 800f894:	bf58      	it	pl
 800f896:	6962      	ldrpl	r2, [r4, #20]
 800f898:	60a2      	str	r2, [r4, #8]
 800f89a:	e7f4      	b.n	800f886 <__swsetup_r+0x8e>
 800f89c:	2000      	movs	r0, #0
 800f89e:	e7f7      	b.n	800f890 <__swsetup_r+0x98>
 800f8a0:	24000198 	.word	0x24000198

0800f8a4 <memset>:
 800f8a4:	4402      	add	r2, r0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d100      	bne.n	800f8ae <memset+0xa>
 800f8ac:	4770      	bx	lr
 800f8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f8b2:	e7f9      	b.n	800f8a8 <memset+0x4>

0800f8b4 <strncmp>:
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	b16a      	cbz	r2, 800f8d4 <strncmp+0x20>
 800f8b8:	3901      	subs	r1, #1
 800f8ba:	1884      	adds	r4, r0, r2
 800f8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d103      	bne.n	800f8d0 <strncmp+0x1c>
 800f8c8:	42a0      	cmp	r0, r4
 800f8ca:	d001      	beq.n	800f8d0 <strncmp+0x1c>
 800f8cc:	2a00      	cmp	r2, #0
 800f8ce:	d1f5      	bne.n	800f8bc <strncmp+0x8>
 800f8d0:	1ad0      	subs	r0, r2, r3
 800f8d2:	bd10      	pop	{r4, pc}
 800f8d4:	4610      	mov	r0, r2
 800f8d6:	e7fc      	b.n	800f8d2 <strncmp+0x1e>

0800f8d8 <_localeconv_r>:
 800f8d8:	4800      	ldr	r0, [pc, #0]	@ (800f8dc <_localeconv_r+0x4>)
 800f8da:	4770      	bx	lr
 800f8dc:	2400011c 	.word	0x2400011c

0800f8e0 <_close_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4d06      	ldr	r5, [pc, #24]	@ (800f8fc <_close_r+0x1c>)
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	4608      	mov	r0, r1
 800f8ea:	602b      	str	r3, [r5, #0]
 800f8ec:	f7f2 fdd8 	bl	80024a0 <_close>
 800f8f0:	1c43      	adds	r3, r0, #1
 800f8f2:	d102      	bne.n	800f8fa <_close_r+0x1a>
 800f8f4:	682b      	ldr	r3, [r5, #0]
 800f8f6:	b103      	cbz	r3, 800f8fa <_close_r+0x1a>
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	24004f08 	.word	0x24004f08

0800f900 <_lseek_r>:
 800f900:	b538      	push	{r3, r4, r5, lr}
 800f902:	4d07      	ldr	r5, [pc, #28]	@ (800f920 <_lseek_r+0x20>)
 800f904:	4604      	mov	r4, r0
 800f906:	4608      	mov	r0, r1
 800f908:	4611      	mov	r1, r2
 800f90a:	2200      	movs	r2, #0
 800f90c:	602a      	str	r2, [r5, #0]
 800f90e:	461a      	mov	r2, r3
 800f910:	f7f2 fded 	bl	80024ee <_lseek>
 800f914:	1c43      	adds	r3, r0, #1
 800f916:	d102      	bne.n	800f91e <_lseek_r+0x1e>
 800f918:	682b      	ldr	r3, [r5, #0]
 800f91a:	b103      	cbz	r3, 800f91e <_lseek_r+0x1e>
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	bd38      	pop	{r3, r4, r5, pc}
 800f920:	24004f08 	.word	0x24004f08

0800f924 <_read_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d07      	ldr	r5, [pc, #28]	@ (800f944 <_read_r+0x20>)
 800f928:	4604      	mov	r4, r0
 800f92a:	4608      	mov	r0, r1
 800f92c:	4611      	mov	r1, r2
 800f92e:	2200      	movs	r2, #0
 800f930:	602a      	str	r2, [r5, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	f7f2 fd7b 	bl	800242e <_read>
 800f938:	1c43      	adds	r3, r0, #1
 800f93a:	d102      	bne.n	800f942 <_read_r+0x1e>
 800f93c:	682b      	ldr	r3, [r5, #0]
 800f93e:	b103      	cbz	r3, 800f942 <_read_r+0x1e>
 800f940:	6023      	str	r3, [r4, #0]
 800f942:	bd38      	pop	{r3, r4, r5, pc}
 800f944:	24004f08 	.word	0x24004f08

0800f948 <_sbrk_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	4d06      	ldr	r5, [pc, #24]	@ (800f964 <_sbrk_r+0x1c>)
 800f94c:	2300      	movs	r3, #0
 800f94e:	4604      	mov	r4, r0
 800f950:	4608      	mov	r0, r1
 800f952:	602b      	str	r3, [r5, #0]
 800f954:	f7f2 fdd8 	bl	8002508 <_sbrk>
 800f958:	1c43      	adds	r3, r0, #1
 800f95a:	d102      	bne.n	800f962 <_sbrk_r+0x1a>
 800f95c:	682b      	ldr	r3, [r5, #0]
 800f95e:	b103      	cbz	r3, 800f962 <_sbrk_r+0x1a>
 800f960:	6023      	str	r3, [r4, #0]
 800f962:	bd38      	pop	{r3, r4, r5, pc}
 800f964:	24004f08 	.word	0x24004f08

0800f968 <_write_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4d07      	ldr	r5, [pc, #28]	@ (800f988 <_write_r+0x20>)
 800f96c:	4604      	mov	r4, r0
 800f96e:	4608      	mov	r0, r1
 800f970:	4611      	mov	r1, r2
 800f972:	2200      	movs	r2, #0
 800f974:	602a      	str	r2, [r5, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	f7f2 fd76 	bl	8002468 <_write>
 800f97c:	1c43      	adds	r3, r0, #1
 800f97e:	d102      	bne.n	800f986 <_write_r+0x1e>
 800f980:	682b      	ldr	r3, [r5, #0]
 800f982:	b103      	cbz	r3, 800f986 <_write_r+0x1e>
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	bd38      	pop	{r3, r4, r5, pc}
 800f988:	24004f08 	.word	0x24004f08

0800f98c <__errno>:
 800f98c:	4b01      	ldr	r3, [pc, #4]	@ (800f994 <__errno+0x8>)
 800f98e:	6818      	ldr	r0, [r3, #0]
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	24000198 	.word	0x24000198

0800f998 <__libc_init_array>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	4d0d      	ldr	r5, [pc, #52]	@ (800f9d0 <__libc_init_array+0x38>)
 800f99c:	4c0d      	ldr	r4, [pc, #52]	@ (800f9d4 <__libc_init_array+0x3c>)
 800f99e:	1b64      	subs	r4, r4, r5
 800f9a0:	10a4      	asrs	r4, r4, #2
 800f9a2:	2600      	movs	r6, #0
 800f9a4:	42a6      	cmp	r6, r4
 800f9a6:	d109      	bne.n	800f9bc <__libc_init_array+0x24>
 800f9a8:	4d0b      	ldr	r5, [pc, #44]	@ (800f9d8 <__libc_init_array+0x40>)
 800f9aa:	4c0c      	ldr	r4, [pc, #48]	@ (800f9dc <__libc_init_array+0x44>)
 800f9ac:	f002 ff66 	bl	801287c <_init>
 800f9b0:	1b64      	subs	r4, r4, r5
 800f9b2:	10a4      	asrs	r4, r4, #2
 800f9b4:	2600      	movs	r6, #0
 800f9b6:	42a6      	cmp	r6, r4
 800f9b8:	d105      	bne.n	800f9c6 <__libc_init_array+0x2e>
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9c0:	4798      	blx	r3
 800f9c2:	3601      	adds	r6, #1
 800f9c4:	e7ee      	b.n	800f9a4 <__libc_init_array+0xc>
 800f9c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9ca:	4798      	blx	r3
 800f9cc:	3601      	adds	r6, #1
 800f9ce:	e7f2      	b.n	800f9b6 <__libc_init_array+0x1e>
 800f9d0:	08012ed8 	.word	0x08012ed8
 800f9d4:	08012ed8 	.word	0x08012ed8
 800f9d8:	08012ed8 	.word	0x08012ed8
 800f9dc:	08012edc 	.word	0x08012edc

0800f9e0 <__retarget_lock_init_recursive>:
 800f9e0:	4770      	bx	lr

0800f9e2 <__retarget_lock_acquire_recursive>:
 800f9e2:	4770      	bx	lr

0800f9e4 <__retarget_lock_release_recursive>:
 800f9e4:	4770      	bx	lr

0800f9e6 <memcpy>:
 800f9e6:	440a      	add	r2, r1
 800f9e8:	4291      	cmp	r1, r2
 800f9ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9ee:	d100      	bne.n	800f9f2 <memcpy+0xc>
 800f9f0:	4770      	bx	lr
 800f9f2:	b510      	push	{r4, lr}
 800f9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9fc:	4291      	cmp	r1, r2
 800f9fe:	d1f9      	bne.n	800f9f4 <memcpy+0xe>
 800fa00:	bd10      	pop	{r4, pc}
 800fa02:	0000      	movs	r0, r0
 800fa04:	0000      	movs	r0, r0
	...

0800fa08 <nan>:
 800fa08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa10 <nan+0x8>
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop
 800fa10:	00000000 	.word	0x00000000
 800fa14:	7ff80000 	.word	0x7ff80000

0800fa18 <nanf>:
 800fa18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fa20 <nanf+0x8>
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	7fc00000 	.word	0x7fc00000

0800fa24 <quorem>:
 800fa24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa28:	6903      	ldr	r3, [r0, #16]
 800fa2a:	690c      	ldr	r4, [r1, #16]
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	4607      	mov	r7, r0
 800fa30:	db7e      	blt.n	800fb30 <quorem+0x10c>
 800fa32:	3c01      	subs	r4, #1
 800fa34:	f101 0814 	add.w	r8, r1, #20
 800fa38:	00a3      	lsls	r3, r4, #2
 800fa3a:	f100 0514 	add.w	r5, r0, #20
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	429a      	cmp	r2, r3
 800fa52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa56:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa5a:	d32e      	bcc.n	800faba <quorem+0x96>
 800fa5c:	f04f 0a00 	mov.w	sl, #0
 800fa60:	46c4      	mov	ip, r8
 800fa62:	46ae      	mov	lr, r5
 800fa64:	46d3      	mov	fp, sl
 800fa66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa6a:	b298      	uxth	r0, r3
 800fa6c:	fb06 a000 	mla	r0, r6, r0, sl
 800fa70:	0c02      	lsrs	r2, r0, #16
 800fa72:	0c1b      	lsrs	r3, r3, #16
 800fa74:	fb06 2303 	mla	r3, r6, r3, r2
 800fa78:	f8de 2000 	ldr.w	r2, [lr]
 800fa7c:	b280      	uxth	r0, r0
 800fa7e:	b292      	uxth	r2, r2
 800fa80:	1a12      	subs	r2, r2, r0
 800fa82:	445a      	add	r2, fp
 800fa84:	f8de 0000 	ldr.w	r0, [lr]
 800fa88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa96:	b292      	uxth	r2, r2
 800fa98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa9c:	45e1      	cmp	r9, ip
 800fa9e:	f84e 2b04 	str.w	r2, [lr], #4
 800faa2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800faa6:	d2de      	bcs.n	800fa66 <quorem+0x42>
 800faa8:	9b00      	ldr	r3, [sp, #0]
 800faaa:	58eb      	ldr	r3, [r5, r3]
 800faac:	b92b      	cbnz	r3, 800faba <quorem+0x96>
 800faae:	9b01      	ldr	r3, [sp, #4]
 800fab0:	3b04      	subs	r3, #4
 800fab2:	429d      	cmp	r5, r3
 800fab4:	461a      	mov	r2, r3
 800fab6:	d32f      	bcc.n	800fb18 <quorem+0xf4>
 800fab8:	613c      	str	r4, [r7, #16]
 800faba:	4638      	mov	r0, r7
 800fabc:	f001 fbec 	bl	8011298 <__mcmp>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	db25      	blt.n	800fb10 <quorem+0xec>
 800fac4:	4629      	mov	r1, r5
 800fac6:	2000      	movs	r0, #0
 800fac8:	f858 2b04 	ldr.w	r2, [r8], #4
 800facc:	f8d1 c000 	ldr.w	ip, [r1]
 800fad0:	fa1f fe82 	uxth.w	lr, r2
 800fad4:	fa1f f38c 	uxth.w	r3, ip
 800fad8:	eba3 030e 	sub.w	r3, r3, lr
 800fadc:	4403      	add	r3, r0
 800fade:	0c12      	lsrs	r2, r2, #16
 800fae0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fae4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fae8:	b29b      	uxth	r3, r3
 800faea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faee:	45c1      	cmp	r9, r8
 800faf0:	f841 3b04 	str.w	r3, [r1], #4
 800faf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800faf8:	d2e6      	bcs.n	800fac8 <quorem+0xa4>
 800fafa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb02:	b922      	cbnz	r2, 800fb0e <quorem+0xea>
 800fb04:	3b04      	subs	r3, #4
 800fb06:	429d      	cmp	r5, r3
 800fb08:	461a      	mov	r2, r3
 800fb0a:	d30b      	bcc.n	800fb24 <quorem+0x100>
 800fb0c:	613c      	str	r4, [r7, #16]
 800fb0e:	3601      	adds	r6, #1
 800fb10:	4630      	mov	r0, r6
 800fb12:	b003      	add	sp, #12
 800fb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb18:	6812      	ldr	r2, [r2, #0]
 800fb1a:	3b04      	subs	r3, #4
 800fb1c:	2a00      	cmp	r2, #0
 800fb1e:	d1cb      	bne.n	800fab8 <quorem+0x94>
 800fb20:	3c01      	subs	r4, #1
 800fb22:	e7c6      	b.n	800fab2 <quorem+0x8e>
 800fb24:	6812      	ldr	r2, [r2, #0]
 800fb26:	3b04      	subs	r3, #4
 800fb28:	2a00      	cmp	r2, #0
 800fb2a:	d1ef      	bne.n	800fb0c <quorem+0xe8>
 800fb2c:	3c01      	subs	r4, #1
 800fb2e:	e7ea      	b.n	800fb06 <quorem+0xe2>
 800fb30:	2000      	movs	r0, #0
 800fb32:	e7ee      	b.n	800fb12 <quorem+0xee>
 800fb34:	0000      	movs	r0, r0
	...

0800fb38 <_dtoa_r>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	ed2d 8b02 	vpush	{d8}
 800fb40:	69c7      	ldr	r7, [r0, #28]
 800fb42:	b091      	sub	sp, #68	@ 0x44
 800fb44:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb48:	ec55 4b10 	vmov	r4, r5, d0
 800fb4c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fb4e:	9107      	str	r1, [sp, #28]
 800fb50:	4681      	mov	r9, r0
 800fb52:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb54:	930d      	str	r3, [sp, #52]	@ 0x34
 800fb56:	b97f      	cbnz	r7, 800fb78 <_dtoa_r+0x40>
 800fb58:	2010      	movs	r0, #16
 800fb5a:	f7fd ff5d 	bl	800da18 <malloc>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	f8c9 001c 	str.w	r0, [r9, #28]
 800fb64:	b920      	cbnz	r0, 800fb70 <_dtoa_r+0x38>
 800fb66:	4ba0      	ldr	r3, [pc, #640]	@ (800fde8 <_dtoa_r+0x2b0>)
 800fb68:	21ef      	movs	r1, #239	@ 0xef
 800fb6a:	48a0      	ldr	r0, [pc, #640]	@ (800fdec <_dtoa_r+0x2b4>)
 800fb6c:	f002 fd86 	bl	801267c <__assert_func>
 800fb70:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb74:	6007      	str	r7, [r0, #0]
 800fb76:	60c7      	str	r7, [r0, #12]
 800fb78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb7c:	6819      	ldr	r1, [r3, #0]
 800fb7e:	b159      	cbz	r1, 800fb98 <_dtoa_r+0x60>
 800fb80:	685a      	ldr	r2, [r3, #4]
 800fb82:	604a      	str	r2, [r1, #4]
 800fb84:	2301      	movs	r3, #1
 800fb86:	4093      	lsls	r3, r2
 800fb88:	608b      	str	r3, [r1, #8]
 800fb8a:	4648      	mov	r0, r9
 800fb8c:	f001 f908 	bl	8010da0 <_Bfree>
 800fb90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb94:	2200      	movs	r2, #0
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	1e2b      	subs	r3, r5, #0
 800fb9a:	bfbb      	ittet	lt
 800fb9c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fba0:	9303      	strlt	r3, [sp, #12]
 800fba2:	2300      	movge	r3, #0
 800fba4:	2201      	movlt	r2, #1
 800fba6:	bfac      	ite	ge
 800fba8:	6033      	strge	r3, [r6, #0]
 800fbaa:	6032      	strlt	r2, [r6, #0]
 800fbac:	4b90      	ldr	r3, [pc, #576]	@ (800fdf0 <_dtoa_r+0x2b8>)
 800fbae:	9e03      	ldr	r6, [sp, #12]
 800fbb0:	43b3      	bics	r3, r6
 800fbb2:	d110      	bne.n	800fbd6 <_dtoa_r+0x9e>
 800fbb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fbb6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fbba:	6013      	str	r3, [r2, #0]
 800fbbc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fbc0:	4323      	orrs	r3, r4
 800fbc2:	f000 84e6 	beq.w	8010592 <_dtoa_r+0xa5a>
 800fbc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fbc8:	4f8a      	ldr	r7, [pc, #552]	@ (800fdf4 <_dtoa_r+0x2bc>)
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 84e8 	beq.w	80105a0 <_dtoa_r+0xa68>
 800fbd0:	1cfb      	adds	r3, r7, #3
 800fbd2:	f000 bce3 	b.w	801059c <_dtoa_r+0xa64>
 800fbd6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fbda:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe2:	d10a      	bne.n	800fbfa <_dtoa_r+0xc2>
 800fbe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	6013      	str	r3, [r2, #0]
 800fbea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fbec:	b113      	cbz	r3, 800fbf4 <_dtoa_r+0xbc>
 800fbee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fbf0:	4b81      	ldr	r3, [pc, #516]	@ (800fdf8 <_dtoa_r+0x2c0>)
 800fbf2:	6013      	str	r3, [r2, #0]
 800fbf4:	4f81      	ldr	r7, [pc, #516]	@ (800fdfc <_dtoa_r+0x2c4>)
 800fbf6:	f000 bcd3 	b.w	80105a0 <_dtoa_r+0xa68>
 800fbfa:	aa0e      	add	r2, sp, #56	@ 0x38
 800fbfc:	a90f      	add	r1, sp, #60	@ 0x3c
 800fbfe:	4648      	mov	r0, r9
 800fc00:	eeb0 0b48 	vmov.f64	d0, d8
 800fc04:	f001 fc68 	bl	80114d8 <__d2b>
 800fc08:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fc0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc0e:	9001      	str	r0, [sp, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d045      	beq.n	800fca0 <_dtoa_r+0x168>
 800fc14:	eeb0 7b48 	vmov.f64	d7, d8
 800fc18:	ee18 1a90 	vmov	r1, s17
 800fc1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fc20:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fc24:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fc28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fc2c:	2500      	movs	r5, #0
 800fc2e:	ee07 1a90 	vmov	s15, r1
 800fc32:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fc36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fdd0 <_dtoa_r+0x298>
 800fc3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc3e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fdd8 <_dtoa_r+0x2a0>
 800fc42:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fc46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fde0 <_dtoa_r+0x2a8>
 800fc4a:	ee07 3a90 	vmov	s15, r3
 800fc4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fc52:	eeb0 7b46 	vmov.f64	d7, d6
 800fc56:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fc5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fc5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc66:	ee16 8a90 	vmov	r8, s13
 800fc6a:	d508      	bpl.n	800fc7e <_dtoa_r+0x146>
 800fc6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fc70:	eeb4 6b47 	vcmp.f64	d6, d7
 800fc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc78:	bf18      	it	ne
 800fc7a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fc7e:	f1b8 0f16 	cmp.w	r8, #22
 800fc82:	d82b      	bhi.n	800fcdc <_dtoa_r+0x1a4>
 800fc84:	495e      	ldr	r1, [pc, #376]	@ (800fe00 <_dtoa_r+0x2c8>)
 800fc86:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fc8a:	ed91 7b00 	vldr	d7, [r1]
 800fc8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc96:	d501      	bpl.n	800fc9c <_dtoa_r+0x164>
 800fc98:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	e01e      	b.n	800fcde <_dtoa_r+0x1a6>
 800fca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fca2:	4413      	add	r3, r2
 800fca4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fca8:	2920      	cmp	r1, #32
 800fcaa:	bfc1      	itttt	gt
 800fcac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fcb0:	408e      	lslgt	r6, r1
 800fcb2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fcb6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fcba:	bfd6      	itet	le
 800fcbc:	f1c1 0120 	rsble	r1, r1, #32
 800fcc0:	4331      	orrgt	r1, r6
 800fcc2:	fa04 f101 	lslle.w	r1, r4, r1
 800fcc6:	ee07 1a90 	vmov	s15, r1
 800fcca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	ee17 1a90 	vmov	r1, s15
 800fcd4:	2501      	movs	r5, #1
 800fcd6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fcda:	e7a8      	b.n	800fc2e <_dtoa_r+0xf6>
 800fcdc:	2101      	movs	r1, #1
 800fcde:	1ad2      	subs	r2, r2, r3
 800fce0:	1e53      	subs	r3, r2, #1
 800fce2:	9306      	str	r3, [sp, #24]
 800fce4:	bf45      	ittet	mi
 800fce6:	f1c2 0301 	rsbmi	r3, r2, #1
 800fcea:	9304      	strmi	r3, [sp, #16]
 800fcec:	2300      	movpl	r3, #0
 800fcee:	2300      	movmi	r3, #0
 800fcf0:	bf4c      	ite	mi
 800fcf2:	9306      	strmi	r3, [sp, #24]
 800fcf4:	9304      	strpl	r3, [sp, #16]
 800fcf6:	f1b8 0f00 	cmp.w	r8, #0
 800fcfa:	910c      	str	r1, [sp, #48]	@ 0x30
 800fcfc:	db18      	blt.n	800fd30 <_dtoa_r+0x1f8>
 800fcfe:	9b06      	ldr	r3, [sp, #24]
 800fd00:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fd04:	4443      	add	r3, r8
 800fd06:	9306      	str	r3, [sp, #24]
 800fd08:	2300      	movs	r3, #0
 800fd0a:	9a07      	ldr	r2, [sp, #28]
 800fd0c:	2a09      	cmp	r2, #9
 800fd0e:	d845      	bhi.n	800fd9c <_dtoa_r+0x264>
 800fd10:	2a05      	cmp	r2, #5
 800fd12:	bfc4      	itt	gt
 800fd14:	3a04      	subgt	r2, #4
 800fd16:	9207      	strgt	r2, [sp, #28]
 800fd18:	9a07      	ldr	r2, [sp, #28]
 800fd1a:	f1a2 0202 	sub.w	r2, r2, #2
 800fd1e:	bfcc      	ite	gt
 800fd20:	2400      	movgt	r4, #0
 800fd22:	2401      	movle	r4, #1
 800fd24:	2a03      	cmp	r2, #3
 800fd26:	d844      	bhi.n	800fdb2 <_dtoa_r+0x27a>
 800fd28:	e8df f002 	tbb	[pc, r2]
 800fd2c:	0b173634 	.word	0x0b173634
 800fd30:	9b04      	ldr	r3, [sp, #16]
 800fd32:	2200      	movs	r2, #0
 800fd34:	eba3 0308 	sub.w	r3, r3, r8
 800fd38:	9304      	str	r3, [sp, #16]
 800fd3a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd3c:	f1c8 0300 	rsb	r3, r8, #0
 800fd40:	e7e3      	b.n	800fd0a <_dtoa_r+0x1d2>
 800fd42:	2201      	movs	r2, #1
 800fd44:	9208      	str	r2, [sp, #32]
 800fd46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd48:	eb08 0b02 	add.w	fp, r8, r2
 800fd4c:	f10b 0a01 	add.w	sl, fp, #1
 800fd50:	4652      	mov	r2, sl
 800fd52:	2a01      	cmp	r2, #1
 800fd54:	bfb8      	it	lt
 800fd56:	2201      	movlt	r2, #1
 800fd58:	e006      	b.n	800fd68 <_dtoa_r+0x230>
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	9208      	str	r2, [sp, #32]
 800fd5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd60:	2a00      	cmp	r2, #0
 800fd62:	dd29      	ble.n	800fdb8 <_dtoa_r+0x280>
 800fd64:	4693      	mov	fp, r2
 800fd66:	4692      	mov	sl, r2
 800fd68:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	2004      	movs	r0, #4
 800fd70:	f100 0614 	add.w	r6, r0, #20
 800fd74:	4296      	cmp	r6, r2
 800fd76:	d926      	bls.n	800fdc6 <_dtoa_r+0x28e>
 800fd78:	6079      	str	r1, [r7, #4]
 800fd7a:	4648      	mov	r0, r9
 800fd7c:	9305      	str	r3, [sp, #20]
 800fd7e:	f000 ffcf 	bl	8010d20 <_Balloc>
 800fd82:	9b05      	ldr	r3, [sp, #20]
 800fd84:	4607      	mov	r7, r0
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d13e      	bne.n	800fe08 <_dtoa_r+0x2d0>
 800fd8a:	4b1e      	ldr	r3, [pc, #120]	@ (800fe04 <_dtoa_r+0x2cc>)
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fd92:	e6ea      	b.n	800fb6a <_dtoa_r+0x32>
 800fd94:	2200      	movs	r2, #0
 800fd96:	e7e1      	b.n	800fd5c <_dtoa_r+0x224>
 800fd98:	2200      	movs	r2, #0
 800fd9a:	e7d3      	b.n	800fd44 <_dtoa_r+0x20c>
 800fd9c:	2401      	movs	r4, #1
 800fd9e:	2200      	movs	r2, #0
 800fda0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fda4:	f04f 3bff 	mov.w	fp, #4294967295
 800fda8:	2100      	movs	r1, #0
 800fdaa:	46da      	mov	sl, fp
 800fdac:	2212      	movs	r2, #18
 800fdae:	9109      	str	r1, [sp, #36]	@ 0x24
 800fdb0:	e7da      	b.n	800fd68 <_dtoa_r+0x230>
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	9208      	str	r2, [sp, #32]
 800fdb6:	e7f5      	b.n	800fda4 <_dtoa_r+0x26c>
 800fdb8:	f04f 0b01 	mov.w	fp, #1
 800fdbc:	46da      	mov	sl, fp
 800fdbe:	465a      	mov	r2, fp
 800fdc0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fdc4:	e7d0      	b.n	800fd68 <_dtoa_r+0x230>
 800fdc6:	3101      	adds	r1, #1
 800fdc8:	0040      	lsls	r0, r0, #1
 800fdca:	e7d1      	b.n	800fd70 <_dtoa_r+0x238>
 800fdcc:	f3af 8000 	nop.w
 800fdd0:	636f4361 	.word	0x636f4361
 800fdd4:	3fd287a7 	.word	0x3fd287a7
 800fdd8:	8b60c8b3 	.word	0x8b60c8b3
 800fddc:	3fc68a28 	.word	0x3fc68a28
 800fde0:	509f79fb 	.word	0x509f79fb
 800fde4:	3fd34413 	.word	0x3fd34413
 800fde8:	08012ade 	.word	0x08012ade
 800fdec:	08012af5 	.word	0x08012af5
 800fdf0:	7ff00000 	.word	0x7ff00000
 800fdf4:	08012ada 	.word	0x08012ada
 800fdf8:	08012c3f 	.word	0x08012c3f
 800fdfc:	08012c3e 	.word	0x08012c3e
 800fe00:	08012e08 	.word	0x08012e08
 800fe04:	08012b4d 	.word	0x08012b4d
 800fe08:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fe0c:	f1ba 0f0e 	cmp.w	sl, #14
 800fe10:	6010      	str	r0, [r2, #0]
 800fe12:	d86e      	bhi.n	800fef2 <_dtoa_r+0x3ba>
 800fe14:	2c00      	cmp	r4, #0
 800fe16:	d06c      	beq.n	800fef2 <_dtoa_r+0x3ba>
 800fe18:	f1b8 0f00 	cmp.w	r8, #0
 800fe1c:	f340 80b4 	ble.w	800ff88 <_dtoa_r+0x450>
 800fe20:	4ac8      	ldr	r2, [pc, #800]	@ (8010144 <_dtoa_r+0x60c>)
 800fe22:	f008 010f 	and.w	r1, r8, #15
 800fe26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fe2a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fe2e:	ed92 7b00 	vldr	d7, [r2]
 800fe32:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fe36:	f000 809b 	beq.w	800ff70 <_dtoa_r+0x438>
 800fe3a:	4ac3      	ldr	r2, [pc, #780]	@ (8010148 <_dtoa_r+0x610>)
 800fe3c:	ed92 6b08 	vldr	d6, [r2, #32]
 800fe40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fe44:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fe48:	f001 010f 	and.w	r1, r1, #15
 800fe4c:	2203      	movs	r2, #3
 800fe4e:	48be      	ldr	r0, [pc, #760]	@ (8010148 <_dtoa_r+0x610>)
 800fe50:	2900      	cmp	r1, #0
 800fe52:	f040 808f 	bne.w	800ff74 <_dtoa_r+0x43c>
 800fe56:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fe5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fe5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fe64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe68:	2900      	cmp	r1, #0
 800fe6a:	f000 80b3 	beq.w	800ffd4 <_dtoa_r+0x49c>
 800fe6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fe72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fe76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7a:	f140 80ab 	bpl.w	800ffd4 <_dtoa_r+0x49c>
 800fe7e:	f1ba 0f00 	cmp.w	sl, #0
 800fe82:	f000 80a7 	beq.w	800ffd4 <_dtoa_r+0x49c>
 800fe86:	f1bb 0f00 	cmp.w	fp, #0
 800fe8a:	dd30      	ble.n	800feee <_dtoa_r+0x3b6>
 800fe8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fe90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe98:	f108 31ff 	add.w	r1, r8, #4294967295
 800fe9c:	9105      	str	r1, [sp, #20]
 800fe9e:	3201      	adds	r2, #1
 800fea0:	465c      	mov	r4, fp
 800fea2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fea6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800feaa:	ee07 2a90 	vmov	s15, r2
 800feae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800feb2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800feb6:	ee15 2a90 	vmov	r2, s11
 800feba:	ec51 0b15 	vmov	r0, r1, d5
 800febe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800fec2:	2c00      	cmp	r4, #0
 800fec4:	f040 808a 	bne.w	800ffdc <_dtoa_r+0x4a4>
 800fec8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fecc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fed0:	ec41 0b17 	vmov	d7, r0, r1
 800fed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fedc:	f300 826a 	bgt.w	80103b4 <_dtoa_r+0x87c>
 800fee0:	eeb1 7b47 	vneg.f64	d7, d7
 800fee4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feec:	d423      	bmi.n	800ff36 <_dtoa_r+0x3fe>
 800feee:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fef2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fef4:	2a00      	cmp	r2, #0
 800fef6:	f2c0 8129 	blt.w	801014c <_dtoa_r+0x614>
 800fefa:	f1b8 0f0e 	cmp.w	r8, #14
 800fefe:	f300 8125 	bgt.w	801014c <_dtoa_r+0x614>
 800ff02:	4b90      	ldr	r3, [pc, #576]	@ (8010144 <_dtoa_r+0x60c>)
 800ff04:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ff08:	ed93 6b00 	vldr	d6, [r3]
 800ff0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f280 80c8 	bge.w	80100a4 <_dtoa_r+0x56c>
 800ff14:	f1ba 0f00 	cmp.w	sl, #0
 800ff18:	f300 80c4 	bgt.w	80100a4 <_dtoa_r+0x56c>
 800ff1c:	d10b      	bne.n	800ff36 <_dtoa_r+0x3fe>
 800ff1e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff22:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff32:	f2c0 823c 	blt.w	80103ae <_dtoa_r+0x876>
 800ff36:	2400      	movs	r4, #0
 800ff38:	4625      	mov	r5, r4
 800ff3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff3c:	43db      	mvns	r3, r3
 800ff3e:	9305      	str	r3, [sp, #20]
 800ff40:	463e      	mov	r6, r7
 800ff42:	f04f 0800 	mov.w	r8, #0
 800ff46:	4621      	mov	r1, r4
 800ff48:	4648      	mov	r0, r9
 800ff4a:	f000 ff29 	bl	8010da0 <_Bfree>
 800ff4e:	2d00      	cmp	r5, #0
 800ff50:	f000 80a2 	beq.w	8010098 <_dtoa_r+0x560>
 800ff54:	f1b8 0f00 	cmp.w	r8, #0
 800ff58:	d005      	beq.n	800ff66 <_dtoa_r+0x42e>
 800ff5a:	45a8      	cmp	r8, r5
 800ff5c:	d003      	beq.n	800ff66 <_dtoa_r+0x42e>
 800ff5e:	4641      	mov	r1, r8
 800ff60:	4648      	mov	r0, r9
 800ff62:	f000 ff1d 	bl	8010da0 <_Bfree>
 800ff66:	4629      	mov	r1, r5
 800ff68:	4648      	mov	r0, r9
 800ff6a:	f000 ff19 	bl	8010da0 <_Bfree>
 800ff6e:	e093      	b.n	8010098 <_dtoa_r+0x560>
 800ff70:	2202      	movs	r2, #2
 800ff72:	e76c      	b.n	800fe4e <_dtoa_r+0x316>
 800ff74:	07cc      	lsls	r4, r1, #31
 800ff76:	d504      	bpl.n	800ff82 <_dtoa_r+0x44a>
 800ff78:	ed90 6b00 	vldr	d6, [r0]
 800ff7c:	3201      	adds	r2, #1
 800ff7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff82:	1049      	asrs	r1, r1, #1
 800ff84:	3008      	adds	r0, #8
 800ff86:	e763      	b.n	800fe50 <_dtoa_r+0x318>
 800ff88:	d022      	beq.n	800ffd0 <_dtoa_r+0x498>
 800ff8a:	f1c8 0100 	rsb	r1, r8, #0
 800ff8e:	4a6d      	ldr	r2, [pc, #436]	@ (8010144 <_dtoa_r+0x60c>)
 800ff90:	f001 000f 	and.w	r0, r1, #15
 800ff94:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ff98:	ed92 7b00 	vldr	d7, [r2]
 800ff9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ffa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffa4:	4868      	ldr	r0, [pc, #416]	@ (8010148 <_dtoa_r+0x610>)
 800ffa6:	1109      	asrs	r1, r1, #4
 800ffa8:	2400      	movs	r4, #0
 800ffaa:	2202      	movs	r2, #2
 800ffac:	b929      	cbnz	r1, 800ffba <_dtoa_r+0x482>
 800ffae:	2c00      	cmp	r4, #0
 800ffb0:	f43f af57 	beq.w	800fe62 <_dtoa_r+0x32a>
 800ffb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffb8:	e753      	b.n	800fe62 <_dtoa_r+0x32a>
 800ffba:	07ce      	lsls	r6, r1, #31
 800ffbc:	d505      	bpl.n	800ffca <_dtoa_r+0x492>
 800ffbe:	ed90 6b00 	vldr	d6, [r0]
 800ffc2:	3201      	adds	r2, #1
 800ffc4:	2401      	movs	r4, #1
 800ffc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ffca:	1049      	asrs	r1, r1, #1
 800ffcc:	3008      	adds	r0, #8
 800ffce:	e7ed      	b.n	800ffac <_dtoa_r+0x474>
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	e746      	b.n	800fe62 <_dtoa_r+0x32a>
 800ffd4:	f8cd 8014 	str.w	r8, [sp, #20]
 800ffd8:	4654      	mov	r4, sl
 800ffda:	e762      	b.n	800fea2 <_dtoa_r+0x36a>
 800ffdc:	4a59      	ldr	r2, [pc, #356]	@ (8010144 <_dtoa_r+0x60c>)
 800ffde:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ffe2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ffe6:	9a08      	ldr	r2, [sp, #32]
 800ffe8:	ec41 0b17 	vmov	d7, r0, r1
 800ffec:	443c      	add	r4, r7
 800ffee:	b34a      	cbz	r2, 8010044 <_dtoa_r+0x50c>
 800fff0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800fff4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800fff8:	463e      	mov	r6, r7
 800fffa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fffe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010002:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010006:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801000a:	ee14 2a90 	vmov	r2, s9
 801000e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010012:	3230      	adds	r2, #48	@ 0x30
 8010014:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010018:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801001c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010020:	f806 2b01 	strb.w	r2, [r6], #1
 8010024:	d438      	bmi.n	8010098 <_dtoa_r+0x560>
 8010026:	ee32 5b46 	vsub.f64	d5, d2, d6
 801002a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801002e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010032:	d46e      	bmi.n	8010112 <_dtoa_r+0x5da>
 8010034:	42a6      	cmp	r6, r4
 8010036:	f43f af5a 	beq.w	800feee <_dtoa_r+0x3b6>
 801003a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801003e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010042:	e7e0      	b.n	8010006 <_dtoa_r+0x4ce>
 8010044:	4621      	mov	r1, r4
 8010046:	463e      	mov	r6, r7
 8010048:	ee27 7b04 	vmul.f64	d7, d7, d4
 801004c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010050:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010054:	ee14 2a90 	vmov	r2, s9
 8010058:	3230      	adds	r2, #48	@ 0x30
 801005a:	f806 2b01 	strb.w	r2, [r6], #1
 801005e:	42a6      	cmp	r6, r4
 8010060:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010064:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010068:	d119      	bne.n	801009e <_dtoa_r+0x566>
 801006a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801006e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010072:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007a:	dc4a      	bgt.n	8010112 <_dtoa_r+0x5da>
 801007c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010080:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	f57f af31 	bpl.w	800feee <_dtoa_r+0x3b6>
 801008c:	460e      	mov	r6, r1
 801008e:	3901      	subs	r1, #1
 8010090:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010094:	2b30      	cmp	r3, #48	@ 0x30
 8010096:	d0f9      	beq.n	801008c <_dtoa_r+0x554>
 8010098:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801009c:	e027      	b.n	80100ee <_dtoa_r+0x5b6>
 801009e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80100a2:	e7d5      	b.n	8010050 <_dtoa_r+0x518>
 80100a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100a8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80100ac:	463e      	mov	r6, r7
 80100ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80100b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80100b6:	ee15 3a10 	vmov	r3, s10
 80100ba:	3330      	adds	r3, #48	@ 0x30
 80100bc:	f806 3b01 	strb.w	r3, [r6], #1
 80100c0:	1bf3      	subs	r3, r6, r7
 80100c2:	459a      	cmp	sl, r3
 80100c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80100c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80100cc:	d132      	bne.n	8010134 <_dtoa_r+0x5fc>
 80100ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80100d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80100d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100da:	dc18      	bgt.n	801010e <_dtoa_r+0x5d6>
 80100dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80100e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e4:	d103      	bne.n	80100ee <_dtoa_r+0x5b6>
 80100e6:	ee15 3a10 	vmov	r3, s10
 80100ea:	07db      	lsls	r3, r3, #31
 80100ec:	d40f      	bmi.n	801010e <_dtoa_r+0x5d6>
 80100ee:	9901      	ldr	r1, [sp, #4]
 80100f0:	4648      	mov	r0, r9
 80100f2:	f000 fe55 	bl	8010da0 <_Bfree>
 80100f6:	2300      	movs	r3, #0
 80100f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80100fa:	7033      	strb	r3, [r6, #0]
 80100fc:	f108 0301 	add.w	r3, r8, #1
 8010100:	6013      	str	r3, [r2, #0]
 8010102:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 824b 	beq.w	80105a0 <_dtoa_r+0xa68>
 801010a:	601e      	str	r6, [r3, #0]
 801010c:	e248      	b.n	80105a0 <_dtoa_r+0xa68>
 801010e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010112:	4633      	mov	r3, r6
 8010114:	461e      	mov	r6, r3
 8010116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801011a:	2a39      	cmp	r2, #57	@ 0x39
 801011c:	d106      	bne.n	801012c <_dtoa_r+0x5f4>
 801011e:	429f      	cmp	r7, r3
 8010120:	d1f8      	bne.n	8010114 <_dtoa_r+0x5dc>
 8010122:	9a05      	ldr	r2, [sp, #20]
 8010124:	3201      	adds	r2, #1
 8010126:	9205      	str	r2, [sp, #20]
 8010128:	2230      	movs	r2, #48	@ 0x30
 801012a:	703a      	strb	r2, [r7, #0]
 801012c:	781a      	ldrb	r2, [r3, #0]
 801012e:	3201      	adds	r2, #1
 8010130:	701a      	strb	r2, [r3, #0]
 8010132:	e7b1      	b.n	8010098 <_dtoa_r+0x560>
 8010134:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010138:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801013c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010140:	d1b5      	bne.n	80100ae <_dtoa_r+0x576>
 8010142:	e7d4      	b.n	80100ee <_dtoa_r+0x5b6>
 8010144:	08012e08 	.word	0x08012e08
 8010148:	08012de0 	.word	0x08012de0
 801014c:	9908      	ldr	r1, [sp, #32]
 801014e:	2900      	cmp	r1, #0
 8010150:	f000 80e9 	beq.w	8010326 <_dtoa_r+0x7ee>
 8010154:	9907      	ldr	r1, [sp, #28]
 8010156:	2901      	cmp	r1, #1
 8010158:	f300 80cb 	bgt.w	80102f2 <_dtoa_r+0x7ba>
 801015c:	2d00      	cmp	r5, #0
 801015e:	f000 80c4 	beq.w	80102ea <_dtoa_r+0x7b2>
 8010162:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010166:	9e04      	ldr	r6, [sp, #16]
 8010168:	461c      	mov	r4, r3
 801016a:	9305      	str	r3, [sp, #20]
 801016c:	9b04      	ldr	r3, [sp, #16]
 801016e:	4413      	add	r3, r2
 8010170:	9304      	str	r3, [sp, #16]
 8010172:	9b06      	ldr	r3, [sp, #24]
 8010174:	2101      	movs	r1, #1
 8010176:	4413      	add	r3, r2
 8010178:	4648      	mov	r0, r9
 801017a:	9306      	str	r3, [sp, #24]
 801017c:	f000 ff0e 	bl	8010f9c <__i2b>
 8010180:	9b05      	ldr	r3, [sp, #20]
 8010182:	4605      	mov	r5, r0
 8010184:	b166      	cbz	r6, 80101a0 <_dtoa_r+0x668>
 8010186:	9a06      	ldr	r2, [sp, #24]
 8010188:	2a00      	cmp	r2, #0
 801018a:	dd09      	ble.n	80101a0 <_dtoa_r+0x668>
 801018c:	42b2      	cmp	r2, r6
 801018e:	9904      	ldr	r1, [sp, #16]
 8010190:	bfa8      	it	ge
 8010192:	4632      	movge	r2, r6
 8010194:	1a89      	subs	r1, r1, r2
 8010196:	9104      	str	r1, [sp, #16]
 8010198:	9906      	ldr	r1, [sp, #24]
 801019a:	1ab6      	subs	r6, r6, r2
 801019c:	1a8a      	subs	r2, r1, r2
 801019e:	9206      	str	r2, [sp, #24]
 80101a0:	b30b      	cbz	r3, 80101e6 <_dtoa_r+0x6ae>
 80101a2:	9a08      	ldr	r2, [sp, #32]
 80101a4:	2a00      	cmp	r2, #0
 80101a6:	f000 80c5 	beq.w	8010334 <_dtoa_r+0x7fc>
 80101aa:	2c00      	cmp	r4, #0
 80101ac:	f000 80bf 	beq.w	801032e <_dtoa_r+0x7f6>
 80101b0:	4629      	mov	r1, r5
 80101b2:	4622      	mov	r2, r4
 80101b4:	4648      	mov	r0, r9
 80101b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101b8:	f000 ffa8 	bl	801110c <__pow5mult>
 80101bc:	9a01      	ldr	r2, [sp, #4]
 80101be:	4601      	mov	r1, r0
 80101c0:	4605      	mov	r5, r0
 80101c2:	4648      	mov	r0, r9
 80101c4:	f000 ff00 	bl	8010fc8 <__multiply>
 80101c8:	9901      	ldr	r1, [sp, #4]
 80101ca:	9005      	str	r0, [sp, #20]
 80101cc:	4648      	mov	r0, r9
 80101ce:	f000 fde7 	bl	8010da0 <_Bfree>
 80101d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101d4:	1b1b      	subs	r3, r3, r4
 80101d6:	f000 80b0 	beq.w	801033a <_dtoa_r+0x802>
 80101da:	9905      	ldr	r1, [sp, #20]
 80101dc:	461a      	mov	r2, r3
 80101de:	4648      	mov	r0, r9
 80101e0:	f000 ff94 	bl	801110c <__pow5mult>
 80101e4:	9001      	str	r0, [sp, #4]
 80101e6:	2101      	movs	r1, #1
 80101e8:	4648      	mov	r0, r9
 80101ea:	f000 fed7 	bl	8010f9c <__i2b>
 80101ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101f0:	4604      	mov	r4, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 81da 	beq.w	80105ac <_dtoa_r+0xa74>
 80101f8:	461a      	mov	r2, r3
 80101fa:	4601      	mov	r1, r0
 80101fc:	4648      	mov	r0, r9
 80101fe:	f000 ff85 	bl	801110c <__pow5mult>
 8010202:	9b07      	ldr	r3, [sp, #28]
 8010204:	2b01      	cmp	r3, #1
 8010206:	4604      	mov	r4, r0
 8010208:	f300 80a0 	bgt.w	801034c <_dtoa_r+0x814>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	f040 8096 	bne.w	8010340 <_dtoa_r+0x808>
 8010214:	9b03      	ldr	r3, [sp, #12]
 8010216:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801021a:	2a00      	cmp	r2, #0
 801021c:	f040 8092 	bne.w	8010344 <_dtoa_r+0x80c>
 8010220:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010224:	0d12      	lsrs	r2, r2, #20
 8010226:	0512      	lsls	r2, r2, #20
 8010228:	2a00      	cmp	r2, #0
 801022a:	f000 808d 	beq.w	8010348 <_dtoa_r+0x810>
 801022e:	9b04      	ldr	r3, [sp, #16]
 8010230:	3301      	adds	r3, #1
 8010232:	9304      	str	r3, [sp, #16]
 8010234:	9b06      	ldr	r3, [sp, #24]
 8010236:	3301      	adds	r3, #1
 8010238:	9306      	str	r3, [sp, #24]
 801023a:	2301      	movs	r3, #1
 801023c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801023e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 81b9 	beq.w	80105b8 <_dtoa_r+0xa80>
 8010246:	6922      	ldr	r2, [r4, #16]
 8010248:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801024c:	6910      	ldr	r0, [r2, #16]
 801024e:	f000 fe59 	bl	8010f04 <__hi0bits>
 8010252:	f1c0 0020 	rsb	r0, r0, #32
 8010256:	9b06      	ldr	r3, [sp, #24]
 8010258:	4418      	add	r0, r3
 801025a:	f010 001f 	ands.w	r0, r0, #31
 801025e:	f000 8081 	beq.w	8010364 <_dtoa_r+0x82c>
 8010262:	f1c0 0220 	rsb	r2, r0, #32
 8010266:	2a04      	cmp	r2, #4
 8010268:	dd73      	ble.n	8010352 <_dtoa_r+0x81a>
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	f1c0 001c 	rsb	r0, r0, #28
 8010270:	4403      	add	r3, r0
 8010272:	9304      	str	r3, [sp, #16]
 8010274:	9b06      	ldr	r3, [sp, #24]
 8010276:	4406      	add	r6, r0
 8010278:	4403      	add	r3, r0
 801027a:	9306      	str	r3, [sp, #24]
 801027c:	9b04      	ldr	r3, [sp, #16]
 801027e:	2b00      	cmp	r3, #0
 8010280:	dd05      	ble.n	801028e <_dtoa_r+0x756>
 8010282:	9901      	ldr	r1, [sp, #4]
 8010284:	461a      	mov	r2, r3
 8010286:	4648      	mov	r0, r9
 8010288:	f000 ff9a 	bl	80111c0 <__lshift>
 801028c:	9001      	str	r0, [sp, #4]
 801028e:	9b06      	ldr	r3, [sp, #24]
 8010290:	2b00      	cmp	r3, #0
 8010292:	dd05      	ble.n	80102a0 <_dtoa_r+0x768>
 8010294:	4621      	mov	r1, r4
 8010296:	461a      	mov	r2, r3
 8010298:	4648      	mov	r0, r9
 801029a:	f000 ff91 	bl	80111c0 <__lshift>
 801029e:	4604      	mov	r4, r0
 80102a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d060      	beq.n	8010368 <_dtoa_r+0x830>
 80102a6:	9801      	ldr	r0, [sp, #4]
 80102a8:	4621      	mov	r1, r4
 80102aa:	f000 fff5 	bl	8011298 <__mcmp>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	da5a      	bge.n	8010368 <_dtoa_r+0x830>
 80102b2:	f108 33ff 	add.w	r3, r8, #4294967295
 80102b6:	9305      	str	r3, [sp, #20]
 80102b8:	9901      	ldr	r1, [sp, #4]
 80102ba:	2300      	movs	r3, #0
 80102bc:	220a      	movs	r2, #10
 80102be:	4648      	mov	r0, r9
 80102c0:	f000 fd90 	bl	8010de4 <__multadd>
 80102c4:	9b08      	ldr	r3, [sp, #32]
 80102c6:	9001      	str	r0, [sp, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 8177 	beq.w	80105bc <_dtoa_r+0xa84>
 80102ce:	4629      	mov	r1, r5
 80102d0:	2300      	movs	r3, #0
 80102d2:	220a      	movs	r2, #10
 80102d4:	4648      	mov	r0, r9
 80102d6:	f000 fd85 	bl	8010de4 <__multadd>
 80102da:	f1bb 0f00 	cmp.w	fp, #0
 80102de:	4605      	mov	r5, r0
 80102e0:	dc6e      	bgt.n	80103c0 <_dtoa_r+0x888>
 80102e2:	9b07      	ldr	r3, [sp, #28]
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	dc48      	bgt.n	801037a <_dtoa_r+0x842>
 80102e8:	e06a      	b.n	80103c0 <_dtoa_r+0x888>
 80102ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80102ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80102f0:	e739      	b.n	8010166 <_dtoa_r+0x62e>
 80102f2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80102f6:	42a3      	cmp	r3, r4
 80102f8:	db07      	blt.n	801030a <_dtoa_r+0x7d2>
 80102fa:	f1ba 0f00 	cmp.w	sl, #0
 80102fe:	eba3 0404 	sub.w	r4, r3, r4
 8010302:	db0b      	blt.n	801031c <_dtoa_r+0x7e4>
 8010304:	9e04      	ldr	r6, [sp, #16]
 8010306:	4652      	mov	r2, sl
 8010308:	e72f      	b.n	801016a <_dtoa_r+0x632>
 801030a:	1ae2      	subs	r2, r4, r3
 801030c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801030e:	9e04      	ldr	r6, [sp, #16]
 8010310:	4413      	add	r3, r2
 8010312:	930a      	str	r3, [sp, #40]	@ 0x28
 8010314:	4652      	mov	r2, sl
 8010316:	4623      	mov	r3, r4
 8010318:	2400      	movs	r4, #0
 801031a:	e726      	b.n	801016a <_dtoa_r+0x632>
 801031c:	9a04      	ldr	r2, [sp, #16]
 801031e:	eba2 060a 	sub.w	r6, r2, sl
 8010322:	2200      	movs	r2, #0
 8010324:	e721      	b.n	801016a <_dtoa_r+0x632>
 8010326:	9e04      	ldr	r6, [sp, #16]
 8010328:	9d08      	ldr	r5, [sp, #32]
 801032a:	461c      	mov	r4, r3
 801032c:	e72a      	b.n	8010184 <_dtoa_r+0x64c>
 801032e:	9a01      	ldr	r2, [sp, #4]
 8010330:	9205      	str	r2, [sp, #20]
 8010332:	e752      	b.n	80101da <_dtoa_r+0x6a2>
 8010334:	9901      	ldr	r1, [sp, #4]
 8010336:	461a      	mov	r2, r3
 8010338:	e751      	b.n	80101de <_dtoa_r+0x6a6>
 801033a:	9b05      	ldr	r3, [sp, #20]
 801033c:	9301      	str	r3, [sp, #4]
 801033e:	e752      	b.n	80101e6 <_dtoa_r+0x6ae>
 8010340:	2300      	movs	r3, #0
 8010342:	e77b      	b.n	801023c <_dtoa_r+0x704>
 8010344:	9b02      	ldr	r3, [sp, #8]
 8010346:	e779      	b.n	801023c <_dtoa_r+0x704>
 8010348:	920b      	str	r2, [sp, #44]	@ 0x2c
 801034a:	e778      	b.n	801023e <_dtoa_r+0x706>
 801034c:	2300      	movs	r3, #0
 801034e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010350:	e779      	b.n	8010246 <_dtoa_r+0x70e>
 8010352:	d093      	beq.n	801027c <_dtoa_r+0x744>
 8010354:	9b04      	ldr	r3, [sp, #16]
 8010356:	321c      	adds	r2, #28
 8010358:	4413      	add	r3, r2
 801035a:	9304      	str	r3, [sp, #16]
 801035c:	9b06      	ldr	r3, [sp, #24]
 801035e:	4416      	add	r6, r2
 8010360:	4413      	add	r3, r2
 8010362:	e78a      	b.n	801027a <_dtoa_r+0x742>
 8010364:	4602      	mov	r2, r0
 8010366:	e7f5      	b.n	8010354 <_dtoa_r+0x81c>
 8010368:	f1ba 0f00 	cmp.w	sl, #0
 801036c:	f8cd 8014 	str.w	r8, [sp, #20]
 8010370:	46d3      	mov	fp, sl
 8010372:	dc21      	bgt.n	80103b8 <_dtoa_r+0x880>
 8010374:	9b07      	ldr	r3, [sp, #28]
 8010376:	2b02      	cmp	r3, #2
 8010378:	dd1e      	ble.n	80103b8 <_dtoa_r+0x880>
 801037a:	f1bb 0f00 	cmp.w	fp, #0
 801037e:	f47f addc 	bne.w	800ff3a <_dtoa_r+0x402>
 8010382:	4621      	mov	r1, r4
 8010384:	465b      	mov	r3, fp
 8010386:	2205      	movs	r2, #5
 8010388:	4648      	mov	r0, r9
 801038a:	f000 fd2b 	bl	8010de4 <__multadd>
 801038e:	4601      	mov	r1, r0
 8010390:	4604      	mov	r4, r0
 8010392:	9801      	ldr	r0, [sp, #4]
 8010394:	f000 ff80 	bl	8011298 <__mcmp>
 8010398:	2800      	cmp	r0, #0
 801039a:	f77f adce 	ble.w	800ff3a <_dtoa_r+0x402>
 801039e:	463e      	mov	r6, r7
 80103a0:	2331      	movs	r3, #49	@ 0x31
 80103a2:	f806 3b01 	strb.w	r3, [r6], #1
 80103a6:	9b05      	ldr	r3, [sp, #20]
 80103a8:	3301      	adds	r3, #1
 80103aa:	9305      	str	r3, [sp, #20]
 80103ac:	e5c9      	b.n	800ff42 <_dtoa_r+0x40a>
 80103ae:	f8cd 8014 	str.w	r8, [sp, #20]
 80103b2:	4654      	mov	r4, sl
 80103b4:	4625      	mov	r5, r4
 80103b6:	e7f2      	b.n	801039e <_dtoa_r+0x866>
 80103b8:	9b08      	ldr	r3, [sp, #32]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f000 8102 	beq.w	80105c4 <_dtoa_r+0xa8c>
 80103c0:	2e00      	cmp	r6, #0
 80103c2:	dd05      	ble.n	80103d0 <_dtoa_r+0x898>
 80103c4:	4629      	mov	r1, r5
 80103c6:	4632      	mov	r2, r6
 80103c8:	4648      	mov	r0, r9
 80103ca:	f000 fef9 	bl	80111c0 <__lshift>
 80103ce:	4605      	mov	r5, r0
 80103d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d058      	beq.n	8010488 <_dtoa_r+0x950>
 80103d6:	6869      	ldr	r1, [r5, #4]
 80103d8:	4648      	mov	r0, r9
 80103da:	f000 fca1 	bl	8010d20 <_Balloc>
 80103de:	4606      	mov	r6, r0
 80103e0:	b928      	cbnz	r0, 80103ee <_dtoa_r+0x8b6>
 80103e2:	4b82      	ldr	r3, [pc, #520]	@ (80105ec <_dtoa_r+0xab4>)
 80103e4:	4602      	mov	r2, r0
 80103e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80103ea:	f7ff bbbe 	b.w	800fb6a <_dtoa_r+0x32>
 80103ee:	692a      	ldr	r2, [r5, #16]
 80103f0:	3202      	adds	r2, #2
 80103f2:	0092      	lsls	r2, r2, #2
 80103f4:	f105 010c 	add.w	r1, r5, #12
 80103f8:	300c      	adds	r0, #12
 80103fa:	f7ff faf4 	bl	800f9e6 <memcpy>
 80103fe:	2201      	movs	r2, #1
 8010400:	4631      	mov	r1, r6
 8010402:	4648      	mov	r0, r9
 8010404:	f000 fedc 	bl	80111c0 <__lshift>
 8010408:	1c7b      	adds	r3, r7, #1
 801040a:	9304      	str	r3, [sp, #16]
 801040c:	eb07 030b 	add.w	r3, r7, fp
 8010410:	9309      	str	r3, [sp, #36]	@ 0x24
 8010412:	9b02      	ldr	r3, [sp, #8]
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	46a8      	mov	r8, r5
 801041a:	9308      	str	r3, [sp, #32]
 801041c:	4605      	mov	r5, r0
 801041e:	9b04      	ldr	r3, [sp, #16]
 8010420:	9801      	ldr	r0, [sp, #4]
 8010422:	4621      	mov	r1, r4
 8010424:	f103 3bff 	add.w	fp, r3, #4294967295
 8010428:	f7ff fafc 	bl	800fa24 <quorem>
 801042c:	4641      	mov	r1, r8
 801042e:	9002      	str	r0, [sp, #8]
 8010430:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010434:	9801      	ldr	r0, [sp, #4]
 8010436:	f000 ff2f 	bl	8011298 <__mcmp>
 801043a:	462a      	mov	r2, r5
 801043c:	9006      	str	r0, [sp, #24]
 801043e:	4621      	mov	r1, r4
 8010440:	4648      	mov	r0, r9
 8010442:	f000 ff45 	bl	80112d0 <__mdiff>
 8010446:	68c2      	ldr	r2, [r0, #12]
 8010448:	4606      	mov	r6, r0
 801044a:	b9fa      	cbnz	r2, 801048c <_dtoa_r+0x954>
 801044c:	4601      	mov	r1, r0
 801044e:	9801      	ldr	r0, [sp, #4]
 8010450:	f000 ff22 	bl	8011298 <__mcmp>
 8010454:	4602      	mov	r2, r0
 8010456:	4631      	mov	r1, r6
 8010458:	4648      	mov	r0, r9
 801045a:	920a      	str	r2, [sp, #40]	@ 0x28
 801045c:	f000 fca0 	bl	8010da0 <_Bfree>
 8010460:	9b07      	ldr	r3, [sp, #28]
 8010462:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010464:	9e04      	ldr	r6, [sp, #16]
 8010466:	ea42 0103 	orr.w	r1, r2, r3
 801046a:	9b08      	ldr	r3, [sp, #32]
 801046c:	4319      	orrs	r1, r3
 801046e:	d10f      	bne.n	8010490 <_dtoa_r+0x958>
 8010470:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010474:	d028      	beq.n	80104c8 <_dtoa_r+0x990>
 8010476:	9b06      	ldr	r3, [sp, #24]
 8010478:	2b00      	cmp	r3, #0
 801047a:	dd02      	ble.n	8010482 <_dtoa_r+0x94a>
 801047c:	9b02      	ldr	r3, [sp, #8]
 801047e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010482:	f88b a000 	strb.w	sl, [fp]
 8010486:	e55e      	b.n	800ff46 <_dtoa_r+0x40e>
 8010488:	4628      	mov	r0, r5
 801048a:	e7bd      	b.n	8010408 <_dtoa_r+0x8d0>
 801048c:	2201      	movs	r2, #1
 801048e:	e7e2      	b.n	8010456 <_dtoa_r+0x91e>
 8010490:	9b06      	ldr	r3, [sp, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	db04      	blt.n	80104a0 <_dtoa_r+0x968>
 8010496:	9907      	ldr	r1, [sp, #28]
 8010498:	430b      	orrs	r3, r1
 801049a:	9908      	ldr	r1, [sp, #32]
 801049c:	430b      	orrs	r3, r1
 801049e:	d120      	bne.n	80104e2 <_dtoa_r+0x9aa>
 80104a0:	2a00      	cmp	r2, #0
 80104a2:	ddee      	ble.n	8010482 <_dtoa_r+0x94a>
 80104a4:	9901      	ldr	r1, [sp, #4]
 80104a6:	2201      	movs	r2, #1
 80104a8:	4648      	mov	r0, r9
 80104aa:	f000 fe89 	bl	80111c0 <__lshift>
 80104ae:	4621      	mov	r1, r4
 80104b0:	9001      	str	r0, [sp, #4]
 80104b2:	f000 fef1 	bl	8011298 <__mcmp>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	dc03      	bgt.n	80104c2 <_dtoa_r+0x98a>
 80104ba:	d1e2      	bne.n	8010482 <_dtoa_r+0x94a>
 80104bc:	f01a 0f01 	tst.w	sl, #1
 80104c0:	d0df      	beq.n	8010482 <_dtoa_r+0x94a>
 80104c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80104c6:	d1d9      	bne.n	801047c <_dtoa_r+0x944>
 80104c8:	2339      	movs	r3, #57	@ 0x39
 80104ca:	f88b 3000 	strb.w	r3, [fp]
 80104ce:	4633      	mov	r3, r6
 80104d0:	461e      	mov	r6, r3
 80104d2:	3b01      	subs	r3, #1
 80104d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80104d8:	2a39      	cmp	r2, #57	@ 0x39
 80104da:	d052      	beq.n	8010582 <_dtoa_r+0xa4a>
 80104dc:	3201      	adds	r2, #1
 80104de:	701a      	strb	r2, [r3, #0]
 80104e0:	e531      	b.n	800ff46 <_dtoa_r+0x40e>
 80104e2:	2a00      	cmp	r2, #0
 80104e4:	dd07      	ble.n	80104f6 <_dtoa_r+0x9be>
 80104e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80104ea:	d0ed      	beq.n	80104c8 <_dtoa_r+0x990>
 80104ec:	f10a 0301 	add.w	r3, sl, #1
 80104f0:	f88b 3000 	strb.w	r3, [fp]
 80104f4:	e527      	b.n	800ff46 <_dtoa_r+0x40e>
 80104f6:	9b04      	ldr	r3, [sp, #16]
 80104f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104fa:	f803 ac01 	strb.w	sl, [r3, #-1]
 80104fe:	4293      	cmp	r3, r2
 8010500:	d029      	beq.n	8010556 <_dtoa_r+0xa1e>
 8010502:	9901      	ldr	r1, [sp, #4]
 8010504:	2300      	movs	r3, #0
 8010506:	220a      	movs	r2, #10
 8010508:	4648      	mov	r0, r9
 801050a:	f000 fc6b 	bl	8010de4 <__multadd>
 801050e:	45a8      	cmp	r8, r5
 8010510:	9001      	str	r0, [sp, #4]
 8010512:	f04f 0300 	mov.w	r3, #0
 8010516:	f04f 020a 	mov.w	r2, #10
 801051a:	4641      	mov	r1, r8
 801051c:	4648      	mov	r0, r9
 801051e:	d107      	bne.n	8010530 <_dtoa_r+0x9f8>
 8010520:	f000 fc60 	bl	8010de4 <__multadd>
 8010524:	4680      	mov	r8, r0
 8010526:	4605      	mov	r5, r0
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	3301      	adds	r3, #1
 801052c:	9304      	str	r3, [sp, #16]
 801052e:	e776      	b.n	801041e <_dtoa_r+0x8e6>
 8010530:	f000 fc58 	bl	8010de4 <__multadd>
 8010534:	4629      	mov	r1, r5
 8010536:	4680      	mov	r8, r0
 8010538:	2300      	movs	r3, #0
 801053a:	220a      	movs	r2, #10
 801053c:	4648      	mov	r0, r9
 801053e:	f000 fc51 	bl	8010de4 <__multadd>
 8010542:	4605      	mov	r5, r0
 8010544:	e7f0      	b.n	8010528 <_dtoa_r+0x9f0>
 8010546:	f1bb 0f00 	cmp.w	fp, #0
 801054a:	bfcc      	ite	gt
 801054c:	465e      	movgt	r6, fp
 801054e:	2601      	movle	r6, #1
 8010550:	443e      	add	r6, r7
 8010552:	f04f 0800 	mov.w	r8, #0
 8010556:	9901      	ldr	r1, [sp, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	4648      	mov	r0, r9
 801055c:	f000 fe30 	bl	80111c0 <__lshift>
 8010560:	4621      	mov	r1, r4
 8010562:	9001      	str	r0, [sp, #4]
 8010564:	f000 fe98 	bl	8011298 <__mcmp>
 8010568:	2800      	cmp	r0, #0
 801056a:	dcb0      	bgt.n	80104ce <_dtoa_r+0x996>
 801056c:	d102      	bne.n	8010574 <_dtoa_r+0xa3c>
 801056e:	f01a 0f01 	tst.w	sl, #1
 8010572:	d1ac      	bne.n	80104ce <_dtoa_r+0x996>
 8010574:	4633      	mov	r3, r6
 8010576:	461e      	mov	r6, r3
 8010578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801057c:	2a30      	cmp	r2, #48	@ 0x30
 801057e:	d0fa      	beq.n	8010576 <_dtoa_r+0xa3e>
 8010580:	e4e1      	b.n	800ff46 <_dtoa_r+0x40e>
 8010582:	429f      	cmp	r7, r3
 8010584:	d1a4      	bne.n	80104d0 <_dtoa_r+0x998>
 8010586:	9b05      	ldr	r3, [sp, #20]
 8010588:	3301      	adds	r3, #1
 801058a:	9305      	str	r3, [sp, #20]
 801058c:	2331      	movs	r3, #49	@ 0x31
 801058e:	703b      	strb	r3, [r7, #0]
 8010590:	e4d9      	b.n	800ff46 <_dtoa_r+0x40e>
 8010592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010594:	4f16      	ldr	r7, [pc, #88]	@ (80105f0 <_dtoa_r+0xab8>)
 8010596:	b11b      	cbz	r3, 80105a0 <_dtoa_r+0xa68>
 8010598:	f107 0308 	add.w	r3, r7, #8
 801059c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801059e:	6013      	str	r3, [r2, #0]
 80105a0:	4638      	mov	r0, r7
 80105a2:	b011      	add	sp, #68	@ 0x44
 80105a4:	ecbd 8b02 	vpop	{d8}
 80105a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ac:	9b07      	ldr	r3, [sp, #28]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	f77f ae2c 	ble.w	801020c <_dtoa_r+0x6d4>
 80105b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105b8:	2001      	movs	r0, #1
 80105ba:	e64c      	b.n	8010256 <_dtoa_r+0x71e>
 80105bc:	f1bb 0f00 	cmp.w	fp, #0
 80105c0:	f77f aed8 	ble.w	8010374 <_dtoa_r+0x83c>
 80105c4:	463e      	mov	r6, r7
 80105c6:	9801      	ldr	r0, [sp, #4]
 80105c8:	4621      	mov	r1, r4
 80105ca:	f7ff fa2b 	bl	800fa24 <quorem>
 80105ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80105d2:	f806 ab01 	strb.w	sl, [r6], #1
 80105d6:	1bf2      	subs	r2, r6, r7
 80105d8:	4593      	cmp	fp, r2
 80105da:	ddb4      	ble.n	8010546 <_dtoa_r+0xa0e>
 80105dc:	9901      	ldr	r1, [sp, #4]
 80105de:	2300      	movs	r3, #0
 80105e0:	220a      	movs	r2, #10
 80105e2:	4648      	mov	r0, r9
 80105e4:	f000 fbfe 	bl	8010de4 <__multadd>
 80105e8:	9001      	str	r0, [sp, #4]
 80105ea:	e7ec      	b.n	80105c6 <_dtoa_r+0xa8e>
 80105ec:	08012b4d 	.word	0x08012b4d
 80105f0:	08012ad1 	.word	0x08012ad1

080105f4 <_free_r>:
 80105f4:	b538      	push	{r3, r4, r5, lr}
 80105f6:	4605      	mov	r5, r0
 80105f8:	2900      	cmp	r1, #0
 80105fa:	d041      	beq.n	8010680 <_free_r+0x8c>
 80105fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010600:	1f0c      	subs	r4, r1, #4
 8010602:	2b00      	cmp	r3, #0
 8010604:	bfb8      	it	lt
 8010606:	18e4      	addlt	r4, r4, r3
 8010608:	f7fd fab8 	bl	800db7c <__malloc_lock>
 801060c:	4a1d      	ldr	r2, [pc, #116]	@ (8010684 <_free_r+0x90>)
 801060e:	6813      	ldr	r3, [r2, #0]
 8010610:	b933      	cbnz	r3, 8010620 <_free_r+0x2c>
 8010612:	6063      	str	r3, [r4, #4]
 8010614:	6014      	str	r4, [r2, #0]
 8010616:	4628      	mov	r0, r5
 8010618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801061c:	f7fd bab4 	b.w	800db88 <__malloc_unlock>
 8010620:	42a3      	cmp	r3, r4
 8010622:	d908      	bls.n	8010636 <_free_r+0x42>
 8010624:	6820      	ldr	r0, [r4, #0]
 8010626:	1821      	adds	r1, r4, r0
 8010628:	428b      	cmp	r3, r1
 801062a:	bf01      	itttt	eq
 801062c:	6819      	ldreq	r1, [r3, #0]
 801062e:	685b      	ldreq	r3, [r3, #4]
 8010630:	1809      	addeq	r1, r1, r0
 8010632:	6021      	streq	r1, [r4, #0]
 8010634:	e7ed      	b.n	8010612 <_free_r+0x1e>
 8010636:	461a      	mov	r2, r3
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	b10b      	cbz	r3, 8010640 <_free_r+0x4c>
 801063c:	42a3      	cmp	r3, r4
 801063e:	d9fa      	bls.n	8010636 <_free_r+0x42>
 8010640:	6811      	ldr	r1, [r2, #0]
 8010642:	1850      	adds	r0, r2, r1
 8010644:	42a0      	cmp	r0, r4
 8010646:	d10b      	bne.n	8010660 <_free_r+0x6c>
 8010648:	6820      	ldr	r0, [r4, #0]
 801064a:	4401      	add	r1, r0
 801064c:	1850      	adds	r0, r2, r1
 801064e:	4283      	cmp	r3, r0
 8010650:	6011      	str	r1, [r2, #0]
 8010652:	d1e0      	bne.n	8010616 <_free_r+0x22>
 8010654:	6818      	ldr	r0, [r3, #0]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	6053      	str	r3, [r2, #4]
 801065a:	4408      	add	r0, r1
 801065c:	6010      	str	r0, [r2, #0]
 801065e:	e7da      	b.n	8010616 <_free_r+0x22>
 8010660:	d902      	bls.n	8010668 <_free_r+0x74>
 8010662:	230c      	movs	r3, #12
 8010664:	602b      	str	r3, [r5, #0]
 8010666:	e7d6      	b.n	8010616 <_free_r+0x22>
 8010668:	6820      	ldr	r0, [r4, #0]
 801066a:	1821      	adds	r1, r4, r0
 801066c:	428b      	cmp	r3, r1
 801066e:	bf04      	itt	eq
 8010670:	6819      	ldreq	r1, [r3, #0]
 8010672:	685b      	ldreq	r3, [r3, #4]
 8010674:	6063      	str	r3, [r4, #4]
 8010676:	bf04      	itt	eq
 8010678:	1809      	addeq	r1, r1, r0
 801067a:	6021      	streq	r1, [r4, #0]
 801067c:	6054      	str	r4, [r2, #4]
 801067e:	e7ca      	b.n	8010616 <_free_r+0x22>
 8010680:	bd38      	pop	{r3, r4, r5, pc}
 8010682:	bf00      	nop
 8010684:	24004dc8 	.word	0x24004dc8

08010688 <rshift>:
 8010688:	6903      	ldr	r3, [r0, #16]
 801068a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801068e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010692:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010696:	f100 0414 	add.w	r4, r0, #20
 801069a:	dd45      	ble.n	8010728 <rshift+0xa0>
 801069c:	f011 011f 	ands.w	r1, r1, #31
 80106a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80106a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80106a8:	d10c      	bne.n	80106c4 <rshift+0x3c>
 80106aa:	f100 0710 	add.w	r7, r0, #16
 80106ae:	4629      	mov	r1, r5
 80106b0:	42b1      	cmp	r1, r6
 80106b2:	d334      	bcc.n	801071e <rshift+0x96>
 80106b4:	1a9b      	subs	r3, r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	1eea      	subs	r2, r5, #3
 80106ba:	4296      	cmp	r6, r2
 80106bc:	bf38      	it	cc
 80106be:	2300      	movcc	r3, #0
 80106c0:	4423      	add	r3, r4
 80106c2:	e015      	b.n	80106f0 <rshift+0x68>
 80106c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80106c8:	f1c1 0820 	rsb	r8, r1, #32
 80106cc:	40cf      	lsrs	r7, r1
 80106ce:	f105 0e04 	add.w	lr, r5, #4
 80106d2:	46a1      	mov	r9, r4
 80106d4:	4576      	cmp	r6, lr
 80106d6:	46f4      	mov	ip, lr
 80106d8:	d815      	bhi.n	8010706 <rshift+0x7e>
 80106da:	1a9a      	subs	r2, r3, r2
 80106dc:	0092      	lsls	r2, r2, #2
 80106de:	3a04      	subs	r2, #4
 80106e0:	3501      	adds	r5, #1
 80106e2:	42ae      	cmp	r6, r5
 80106e4:	bf38      	it	cc
 80106e6:	2200      	movcc	r2, #0
 80106e8:	18a3      	adds	r3, r4, r2
 80106ea:	50a7      	str	r7, [r4, r2]
 80106ec:	b107      	cbz	r7, 80106f0 <rshift+0x68>
 80106ee:	3304      	adds	r3, #4
 80106f0:	1b1a      	subs	r2, r3, r4
 80106f2:	42a3      	cmp	r3, r4
 80106f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80106f8:	bf08      	it	eq
 80106fa:	2300      	moveq	r3, #0
 80106fc:	6102      	str	r2, [r0, #16]
 80106fe:	bf08      	it	eq
 8010700:	6143      	streq	r3, [r0, #20]
 8010702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010706:	f8dc c000 	ldr.w	ip, [ip]
 801070a:	fa0c fc08 	lsl.w	ip, ip, r8
 801070e:	ea4c 0707 	orr.w	r7, ip, r7
 8010712:	f849 7b04 	str.w	r7, [r9], #4
 8010716:	f85e 7b04 	ldr.w	r7, [lr], #4
 801071a:	40cf      	lsrs	r7, r1
 801071c:	e7da      	b.n	80106d4 <rshift+0x4c>
 801071e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010722:	f847 cf04 	str.w	ip, [r7, #4]!
 8010726:	e7c3      	b.n	80106b0 <rshift+0x28>
 8010728:	4623      	mov	r3, r4
 801072a:	e7e1      	b.n	80106f0 <rshift+0x68>

0801072c <__hexdig_fun>:
 801072c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010730:	2b09      	cmp	r3, #9
 8010732:	d802      	bhi.n	801073a <__hexdig_fun+0xe>
 8010734:	3820      	subs	r0, #32
 8010736:	b2c0      	uxtb	r0, r0
 8010738:	4770      	bx	lr
 801073a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801073e:	2b05      	cmp	r3, #5
 8010740:	d801      	bhi.n	8010746 <__hexdig_fun+0x1a>
 8010742:	3847      	subs	r0, #71	@ 0x47
 8010744:	e7f7      	b.n	8010736 <__hexdig_fun+0xa>
 8010746:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801074a:	2b05      	cmp	r3, #5
 801074c:	d801      	bhi.n	8010752 <__hexdig_fun+0x26>
 801074e:	3827      	subs	r0, #39	@ 0x27
 8010750:	e7f1      	b.n	8010736 <__hexdig_fun+0xa>
 8010752:	2000      	movs	r0, #0
 8010754:	4770      	bx	lr
	...

08010758 <__gethex>:
 8010758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	b085      	sub	sp, #20
 801075e:	468a      	mov	sl, r1
 8010760:	9302      	str	r3, [sp, #8]
 8010762:	680b      	ldr	r3, [r1, #0]
 8010764:	9001      	str	r0, [sp, #4]
 8010766:	4690      	mov	r8, r2
 8010768:	1c9c      	adds	r4, r3, #2
 801076a:	46a1      	mov	r9, r4
 801076c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010770:	2830      	cmp	r0, #48	@ 0x30
 8010772:	d0fa      	beq.n	801076a <__gethex+0x12>
 8010774:	eba9 0303 	sub.w	r3, r9, r3
 8010778:	f1a3 0b02 	sub.w	fp, r3, #2
 801077c:	f7ff ffd6 	bl	801072c <__hexdig_fun>
 8010780:	4605      	mov	r5, r0
 8010782:	2800      	cmp	r0, #0
 8010784:	d168      	bne.n	8010858 <__gethex+0x100>
 8010786:	49a0      	ldr	r1, [pc, #640]	@ (8010a08 <__gethex+0x2b0>)
 8010788:	2201      	movs	r2, #1
 801078a:	4648      	mov	r0, r9
 801078c:	f7ff f892 	bl	800f8b4 <strncmp>
 8010790:	4607      	mov	r7, r0
 8010792:	2800      	cmp	r0, #0
 8010794:	d167      	bne.n	8010866 <__gethex+0x10e>
 8010796:	f899 0001 	ldrb.w	r0, [r9, #1]
 801079a:	4626      	mov	r6, r4
 801079c:	f7ff ffc6 	bl	801072c <__hexdig_fun>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d062      	beq.n	801086a <__gethex+0x112>
 80107a4:	4623      	mov	r3, r4
 80107a6:	7818      	ldrb	r0, [r3, #0]
 80107a8:	2830      	cmp	r0, #48	@ 0x30
 80107aa:	4699      	mov	r9, r3
 80107ac:	f103 0301 	add.w	r3, r3, #1
 80107b0:	d0f9      	beq.n	80107a6 <__gethex+0x4e>
 80107b2:	f7ff ffbb 	bl	801072c <__hexdig_fun>
 80107b6:	fab0 f580 	clz	r5, r0
 80107ba:	096d      	lsrs	r5, r5, #5
 80107bc:	f04f 0b01 	mov.w	fp, #1
 80107c0:	464a      	mov	r2, r9
 80107c2:	4616      	mov	r6, r2
 80107c4:	3201      	adds	r2, #1
 80107c6:	7830      	ldrb	r0, [r6, #0]
 80107c8:	f7ff ffb0 	bl	801072c <__hexdig_fun>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d1f8      	bne.n	80107c2 <__gethex+0x6a>
 80107d0:	498d      	ldr	r1, [pc, #564]	@ (8010a08 <__gethex+0x2b0>)
 80107d2:	2201      	movs	r2, #1
 80107d4:	4630      	mov	r0, r6
 80107d6:	f7ff f86d 	bl	800f8b4 <strncmp>
 80107da:	2800      	cmp	r0, #0
 80107dc:	d13f      	bne.n	801085e <__gethex+0x106>
 80107de:	b944      	cbnz	r4, 80107f2 <__gethex+0x9a>
 80107e0:	1c74      	adds	r4, r6, #1
 80107e2:	4622      	mov	r2, r4
 80107e4:	4616      	mov	r6, r2
 80107e6:	3201      	adds	r2, #1
 80107e8:	7830      	ldrb	r0, [r6, #0]
 80107ea:	f7ff ff9f 	bl	801072c <__hexdig_fun>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d1f8      	bne.n	80107e4 <__gethex+0x8c>
 80107f2:	1ba4      	subs	r4, r4, r6
 80107f4:	00a7      	lsls	r7, r4, #2
 80107f6:	7833      	ldrb	r3, [r6, #0]
 80107f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80107fc:	2b50      	cmp	r3, #80	@ 0x50
 80107fe:	d13e      	bne.n	801087e <__gethex+0x126>
 8010800:	7873      	ldrb	r3, [r6, #1]
 8010802:	2b2b      	cmp	r3, #43	@ 0x2b
 8010804:	d033      	beq.n	801086e <__gethex+0x116>
 8010806:	2b2d      	cmp	r3, #45	@ 0x2d
 8010808:	d034      	beq.n	8010874 <__gethex+0x11c>
 801080a:	1c71      	adds	r1, r6, #1
 801080c:	2400      	movs	r4, #0
 801080e:	7808      	ldrb	r0, [r1, #0]
 8010810:	f7ff ff8c 	bl	801072c <__hexdig_fun>
 8010814:	1e43      	subs	r3, r0, #1
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b18      	cmp	r3, #24
 801081a:	d830      	bhi.n	801087e <__gethex+0x126>
 801081c:	f1a0 0210 	sub.w	r2, r0, #16
 8010820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010824:	f7ff ff82 	bl	801072c <__hexdig_fun>
 8010828:	f100 3cff 	add.w	ip, r0, #4294967295
 801082c:	fa5f fc8c 	uxtb.w	ip, ip
 8010830:	f1bc 0f18 	cmp.w	ip, #24
 8010834:	f04f 030a 	mov.w	r3, #10
 8010838:	d91e      	bls.n	8010878 <__gethex+0x120>
 801083a:	b104      	cbz	r4, 801083e <__gethex+0xe6>
 801083c:	4252      	negs	r2, r2
 801083e:	4417      	add	r7, r2
 8010840:	f8ca 1000 	str.w	r1, [sl]
 8010844:	b1ed      	cbz	r5, 8010882 <__gethex+0x12a>
 8010846:	f1bb 0f00 	cmp.w	fp, #0
 801084a:	bf0c      	ite	eq
 801084c:	2506      	moveq	r5, #6
 801084e:	2500      	movne	r5, #0
 8010850:	4628      	mov	r0, r5
 8010852:	b005      	add	sp, #20
 8010854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010858:	2500      	movs	r5, #0
 801085a:	462c      	mov	r4, r5
 801085c:	e7b0      	b.n	80107c0 <__gethex+0x68>
 801085e:	2c00      	cmp	r4, #0
 8010860:	d1c7      	bne.n	80107f2 <__gethex+0x9a>
 8010862:	4627      	mov	r7, r4
 8010864:	e7c7      	b.n	80107f6 <__gethex+0x9e>
 8010866:	464e      	mov	r6, r9
 8010868:	462f      	mov	r7, r5
 801086a:	2501      	movs	r5, #1
 801086c:	e7c3      	b.n	80107f6 <__gethex+0x9e>
 801086e:	2400      	movs	r4, #0
 8010870:	1cb1      	adds	r1, r6, #2
 8010872:	e7cc      	b.n	801080e <__gethex+0xb6>
 8010874:	2401      	movs	r4, #1
 8010876:	e7fb      	b.n	8010870 <__gethex+0x118>
 8010878:	fb03 0002 	mla	r0, r3, r2, r0
 801087c:	e7ce      	b.n	801081c <__gethex+0xc4>
 801087e:	4631      	mov	r1, r6
 8010880:	e7de      	b.n	8010840 <__gethex+0xe8>
 8010882:	eba6 0309 	sub.w	r3, r6, r9
 8010886:	3b01      	subs	r3, #1
 8010888:	4629      	mov	r1, r5
 801088a:	2b07      	cmp	r3, #7
 801088c:	dc0a      	bgt.n	80108a4 <__gethex+0x14c>
 801088e:	9801      	ldr	r0, [sp, #4]
 8010890:	f000 fa46 	bl	8010d20 <_Balloc>
 8010894:	4604      	mov	r4, r0
 8010896:	b940      	cbnz	r0, 80108aa <__gethex+0x152>
 8010898:	4b5c      	ldr	r3, [pc, #368]	@ (8010a0c <__gethex+0x2b4>)
 801089a:	4602      	mov	r2, r0
 801089c:	21e4      	movs	r1, #228	@ 0xe4
 801089e:	485c      	ldr	r0, [pc, #368]	@ (8010a10 <__gethex+0x2b8>)
 80108a0:	f001 feec 	bl	801267c <__assert_func>
 80108a4:	3101      	adds	r1, #1
 80108a6:	105b      	asrs	r3, r3, #1
 80108a8:	e7ef      	b.n	801088a <__gethex+0x132>
 80108aa:	f100 0a14 	add.w	sl, r0, #20
 80108ae:	2300      	movs	r3, #0
 80108b0:	4655      	mov	r5, sl
 80108b2:	469b      	mov	fp, r3
 80108b4:	45b1      	cmp	r9, r6
 80108b6:	d337      	bcc.n	8010928 <__gethex+0x1d0>
 80108b8:	f845 bb04 	str.w	fp, [r5], #4
 80108bc:	eba5 050a 	sub.w	r5, r5, sl
 80108c0:	10ad      	asrs	r5, r5, #2
 80108c2:	6125      	str	r5, [r4, #16]
 80108c4:	4658      	mov	r0, fp
 80108c6:	f000 fb1d 	bl	8010f04 <__hi0bits>
 80108ca:	016d      	lsls	r5, r5, #5
 80108cc:	f8d8 6000 	ldr.w	r6, [r8]
 80108d0:	1a2d      	subs	r5, r5, r0
 80108d2:	42b5      	cmp	r5, r6
 80108d4:	dd54      	ble.n	8010980 <__gethex+0x228>
 80108d6:	1bad      	subs	r5, r5, r6
 80108d8:	4629      	mov	r1, r5
 80108da:	4620      	mov	r0, r4
 80108dc:	f000 fea6 	bl	801162c <__any_on>
 80108e0:	4681      	mov	r9, r0
 80108e2:	b178      	cbz	r0, 8010904 <__gethex+0x1ac>
 80108e4:	1e6b      	subs	r3, r5, #1
 80108e6:	1159      	asrs	r1, r3, #5
 80108e8:	f003 021f 	and.w	r2, r3, #31
 80108ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80108f0:	f04f 0901 	mov.w	r9, #1
 80108f4:	fa09 f202 	lsl.w	r2, r9, r2
 80108f8:	420a      	tst	r2, r1
 80108fa:	d003      	beq.n	8010904 <__gethex+0x1ac>
 80108fc:	454b      	cmp	r3, r9
 80108fe:	dc36      	bgt.n	801096e <__gethex+0x216>
 8010900:	f04f 0902 	mov.w	r9, #2
 8010904:	4629      	mov	r1, r5
 8010906:	4620      	mov	r0, r4
 8010908:	f7ff febe 	bl	8010688 <rshift>
 801090c:	442f      	add	r7, r5
 801090e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010912:	42bb      	cmp	r3, r7
 8010914:	da42      	bge.n	801099c <__gethex+0x244>
 8010916:	9801      	ldr	r0, [sp, #4]
 8010918:	4621      	mov	r1, r4
 801091a:	f000 fa41 	bl	8010da0 <_Bfree>
 801091e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010920:	2300      	movs	r3, #0
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	25a3      	movs	r5, #163	@ 0xa3
 8010926:	e793      	b.n	8010850 <__gethex+0xf8>
 8010928:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801092c:	2a2e      	cmp	r2, #46	@ 0x2e
 801092e:	d012      	beq.n	8010956 <__gethex+0x1fe>
 8010930:	2b20      	cmp	r3, #32
 8010932:	d104      	bne.n	801093e <__gethex+0x1e6>
 8010934:	f845 bb04 	str.w	fp, [r5], #4
 8010938:	f04f 0b00 	mov.w	fp, #0
 801093c:	465b      	mov	r3, fp
 801093e:	7830      	ldrb	r0, [r6, #0]
 8010940:	9303      	str	r3, [sp, #12]
 8010942:	f7ff fef3 	bl	801072c <__hexdig_fun>
 8010946:	9b03      	ldr	r3, [sp, #12]
 8010948:	f000 000f 	and.w	r0, r0, #15
 801094c:	4098      	lsls	r0, r3
 801094e:	ea4b 0b00 	orr.w	fp, fp, r0
 8010952:	3304      	adds	r3, #4
 8010954:	e7ae      	b.n	80108b4 <__gethex+0x15c>
 8010956:	45b1      	cmp	r9, r6
 8010958:	d8ea      	bhi.n	8010930 <__gethex+0x1d8>
 801095a:	492b      	ldr	r1, [pc, #172]	@ (8010a08 <__gethex+0x2b0>)
 801095c:	9303      	str	r3, [sp, #12]
 801095e:	2201      	movs	r2, #1
 8010960:	4630      	mov	r0, r6
 8010962:	f7fe ffa7 	bl	800f8b4 <strncmp>
 8010966:	9b03      	ldr	r3, [sp, #12]
 8010968:	2800      	cmp	r0, #0
 801096a:	d1e1      	bne.n	8010930 <__gethex+0x1d8>
 801096c:	e7a2      	b.n	80108b4 <__gethex+0x15c>
 801096e:	1ea9      	subs	r1, r5, #2
 8010970:	4620      	mov	r0, r4
 8010972:	f000 fe5b 	bl	801162c <__any_on>
 8010976:	2800      	cmp	r0, #0
 8010978:	d0c2      	beq.n	8010900 <__gethex+0x1a8>
 801097a:	f04f 0903 	mov.w	r9, #3
 801097e:	e7c1      	b.n	8010904 <__gethex+0x1ac>
 8010980:	da09      	bge.n	8010996 <__gethex+0x23e>
 8010982:	1b75      	subs	r5, r6, r5
 8010984:	4621      	mov	r1, r4
 8010986:	9801      	ldr	r0, [sp, #4]
 8010988:	462a      	mov	r2, r5
 801098a:	f000 fc19 	bl	80111c0 <__lshift>
 801098e:	1b7f      	subs	r7, r7, r5
 8010990:	4604      	mov	r4, r0
 8010992:	f100 0a14 	add.w	sl, r0, #20
 8010996:	f04f 0900 	mov.w	r9, #0
 801099a:	e7b8      	b.n	801090e <__gethex+0x1b6>
 801099c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80109a0:	42bd      	cmp	r5, r7
 80109a2:	dd6f      	ble.n	8010a84 <__gethex+0x32c>
 80109a4:	1bed      	subs	r5, r5, r7
 80109a6:	42ae      	cmp	r6, r5
 80109a8:	dc34      	bgt.n	8010a14 <__gethex+0x2bc>
 80109aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109ae:	2b02      	cmp	r3, #2
 80109b0:	d022      	beq.n	80109f8 <__gethex+0x2a0>
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d024      	beq.n	8010a00 <__gethex+0x2a8>
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	d115      	bne.n	80109e6 <__gethex+0x28e>
 80109ba:	42ae      	cmp	r6, r5
 80109bc:	d113      	bne.n	80109e6 <__gethex+0x28e>
 80109be:	2e01      	cmp	r6, #1
 80109c0:	d10b      	bne.n	80109da <__gethex+0x282>
 80109c2:	9a02      	ldr	r2, [sp, #8]
 80109c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80109c8:	6013      	str	r3, [r2, #0]
 80109ca:	2301      	movs	r3, #1
 80109cc:	6123      	str	r3, [r4, #16]
 80109ce:	f8ca 3000 	str.w	r3, [sl]
 80109d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109d4:	2562      	movs	r5, #98	@ 0x62
 80109d6:	601c      	str	r4, [r3, #0]
 80109d8:	e73a      	b.n	8010850 <__gethex+0xf8>
 80109da:	1e71      	subs	r1, r6, #1
 80109dc:	4620      	mov	r0, r4
 80109de:	f000 fe25 	bl	801162c <__any_on>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d1ed      	bne.n	80109c2 <__gethex+0x26a>
 80109e6:	9801      	ldr	r0, [sp, #4]
 80109e8:	4621      	mov	r1, r4
 80109ea:	f000 f9d9 	bl	8010da0 <_Bfree>
 80109ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109f0:	2300      	movs	r3, #0
 80109f2:	6013      	str	r3, [r2, #0]
 80109f4:	2550      	movs	r5, #80	@ 0x50
 80109f6:	e72b      	b.n	8010850 <__gethex+0xf8>
 80109f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1f3      	bne.n	80109e6 <__gethex+0x28e>
 80109fe:	e7e0      	b.n	80109c2 <__gethex+0x26a>
 8010a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1dd      	bne.n	80109c2 <__gethex+0x26a>
 8010a06:	e7ee      	b.n	80109e6 <__gethex+0x28e>
 8010a08:	08012a90 	.word	0x08012a90
 8010a0c:	08012b4d 	.word	0x08012b4d
 8010a10:	08012b5e 	.word	0x08012b5e
 8010a14:	1e6f      	subs	r7, r5, #1
 8010a16:	f1b9 0f00 	cmp.w	r9, #0
 8010a1a:	d130      	bne.n	8010a7e <__gethex+0x326>
 8010a1c:	b127      	cbz	r7, 8010a28 <__gethex+0x2d0>
 8010a1e:	4639      	mov	r1, r7
 8010a20:	4620      	mov	r0, r4
 8010a22:	f000 fe03 	bl	801162c <__any_on>
 8010a26:	4681      	mov	r9, r0
 8010a28:	117a      	asrs	r2, r7, #5
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010a30:	f007 071f 	and.w	r7, r7, #31
 8010a34:	40bb      	lsls	r3, r7
 8010a36:	4213      	tst	r3, r2
 8010a38:	4629      	mov	r1, r5
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	bf18      	it	ne
 8010a3e:	f049 0902 	orrne.w	r9, r9, #2
 8010a42:	f7ff fe21 	bl	8010688 <rshift>
 8010a46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010a4a:	1b76      	subs	r6, r6, r5
 8010a4c:	2502      	movs	r5, #2
 8010a4e:	f1b9 0f00 	cmp.w	r9, #0
 8010a52:	d047      	beq.n	8010ae4 <__gethex+0x38c>
 8010a54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d015      	beq.n	8010a88 <__gethex+0x330>
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	d017      	beq.n	8010a90 <__gethex+0x338>
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d109      	bne.n	8010a78 <__gethex+0x320>
 8010a64:	f019 0f02 	tst.w	r9, #2
 8010a68:	d006      	beq.n	8010a78 <__gethex+0x320>
 8010a6a:	f8da 3000 	ldr.w	r3, [sl]
 8010a6e:	ea49 0903 	orr.w	r9, r9, r3
 8010a72:	f019 0f01 	tst.w	r9, #1
 8010a76:	d10e      	bne.n	8010a96 <__gethex+0x33e>
 8010a78:	f045 0510 	orr.w	r5, r5, #16
 8010a7c:	e032      	b.n	8010ae4 <__gethex+0x38c>
 8010a7e:	f04f 0901 	mov.w	r9, #1
 8010a82:	e7d1      	b.n	8010a28 <__gethex+0x2d0>
 8010a84:	2501      	movs	r5, #1
 8010a86:	e7e2      	b.n	8010a4e <__gethex+0x2f6>
 8010a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a8a:	f1c3 0301 	rsb	r3, r3, #1
 8010a8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d0f0      	beq.n	8010a78 <__gethex+0x320>
 8010a96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a9a:	f104 0314 	add.w	r3, r4, #20
 8010a9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010aa2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010aa6:	f04f 0c00 	mov.w	ip, #0
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ab0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010ab4:	d01b      	beq.n	8010aee <__gethex+0x396>
 8010ab6:	3201      	adds	r2, #1
 8010ab8:	6002      	str	r2, [r0, #0]
 8010aba:	2d02      	cmp	r5, #2
 8010abc:	f104 0314 	add.w	r3, r4, #20
 8010ac0:	d13c      	bne.n	8010b3c <__gethex+0x3e4>
 8010ac2:	f8d8 2000 	ldr.w	r2, [r8]
 8010ac6:	3a01      	subs	r2, #1
 8010ac8:	42b2      	cmp	r2, r6
 8010aca:	d109      	bne.n	8010ae0 <__gethex+0x388>
 8010acc:	1171      	asrs	r1, r6, #5
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ad4:	f006 061f 	and.w	r6, r6, #31
 8010ad8:	fa02 f606 	lsl.w	r6, r2, r6
 8010adc:	421e      	tst	r6, r3
 8010ade:	d13a      	bne.n	8010b56 <__gethex+0x3fe>
 8010ae0:	f045 0520 	orr.w	r5, r5, #32
 8010ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ae6:	601c      	str	r4, [r3, #0]
 8010ae8:	9b02      	ldr	r3, [sp, #8]
 8010aea:	601f      	str	r7, [r3, #0]
 8010aec:	e6b0      	b.n	8010850 <__gethex+0xf8>
 8010aee:	4299      	cmp	r1, r3
 8010af0:	f843 cc04 	str.w	ip, [r3, #-4]
 8010af4:	d8d9      	bhi.n	8010aaa <__gethex+0x352>
 8010af6:	68a3      	ldr	r3, [r4, #8]
 8010af8:	459b      	cmp	fp, r3
 8010afa:	db17      	blt.n	8010b2c <__gethex+0x3d4>
 8010afc:	6861      	ldr	r1, [r4, #4]
 8010afe:	9801      	ldr	r0, [sp, #4]
 8010b00:	3101      	adds	r1, #1
 8010b02:	f000 f90d 	bl	8010d20 <_Balloc>
 8010b06:	4681      	mov	r9, r0
 8010b08:	b918      	cbnz	r0, 8010b12 <__gethex+0x3ba>
 8010b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010b74 <__gethex+0x41c>)
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	2184      	movs	r1, #132	@ 0x84
 8010b10:	e6c5      	b.n	801089e <__gethex+0x146>
 8010b12:	6922      	ldr	r2, [r4, #16]
 8010b14:	3202      	adds	r2, #2
 8010b16:	f104 010c 	add.w	r1, r4, #12
 8010b1a:	0092      	lsls	r2, r2, #2
 8010b1c:	300c      	adds	r0, #12
 8010b1e:	f7fe ff62 	bl	800f9e6 <memcpy>
 8010b22:	4621      	mov	r1, r4
 8010b24:	9801      	ldr	r0, [sp, #4]
 8010b26:	f000 f93b 	bl	8010da0 <_Bfree>
 8010b2a:	464c      	mov	r4, r9
 8010b2c:	6923      	ldr	r3, [r4, #16]
 8010b2e:	1c5a      	adds	r2, r3, #1
 8010b30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b34:	6122      	str	r2, [r4, #16]
 8010b36:	2201      	movs	r2, #1
 8010b38:	615a      	str	r2, [r3, #20]
 8010b3a:	e7be      	b.n	8010aba <__gethex+0x362>
 8010b3c:	6922      	ldr	r2, [r4, #16]
 8010b3e:	455a      	cmp	r2, fp
 8010b40:	dd0b      	ble.n	8010b5a <__gethex+0x402>
 8010b42:	2101      	movs	r1, #1
 8010b44:	4620      	mov	r0, r4
 8010b46:	f7ff fd9f 	bl	8010688 <rshift>
 8010b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b4e:	3701      	adds	r7, #1
 8010b50:	42bb      	cmp	r3, r7
 8010b52:	f6ff aee0 	blt.w	8010916 <__gethex+0x1be>
 8010b56:	2501      	movs	r5, #1
 8010b58:	e7c2      	b.n	8010ae0 <__gethex+0x388>
 8010b5a:	f016 061f 	ands.w	r6, r6, #31
 8010b5e:	d0fa      	beq.n	8010b56 <__gethex+0x3fe>
 8010b60:	4453      	add	r3, sl
 8010b62:	f1c6 0620 	rsb	r6, r6, #32
 8010b66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010b6a:	f000 f9cb 	bl	8010f04 <__hi0bits>
 8010b6e:	42b0      	cmp	r0, r6
 8010b70:	dbe7      	blt.n	8010b42 <__gethex+0x3ea>
 8010b72:	e7f0      	b.n	8010b56 <__gethex+0x3fe>
 8010b74:	08012b4d 	.word	0x08012b4d

08010b78 <L_shift>:
 8010b78:	f1c2 0208 	rsb	r2, r2, #8
 8010b7c:	0092      	lsls	r2, r2, #2
 8010b7e:	b570      	push	{r4, r5, r6, lr}
 8010b80:	f1c2 0620 	rsb	r6, r2, #32
 8010b84:	6843      	ldr	r3, [r0, #4]
 8010b86:	6804      	ldr	r4, [r0, #0]
 8010b88:	fa03 f506 	lsl.w	r5, r3, r6
 8010b8c:	432c      	orrs	r4, r5
 8010b8e:	40d3      	lsrs	r3, r2
 8010b90:	6004      	str	r4, [r0, #0]
 8010b92:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b96:	4288      	cmp	r0, r1
 8010b98:	d3f4      	bcc.n	8010b84 <L_shift+0xc>
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}

08010b9c <__match>:
 8010b9c:	b530      	push	{r4, r5, lr}
 8010b9e:	6803      	ldr	r3, [r0, #0]
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ba6:	b914      	cbnz	r4, 8010bae <__match+0x12>
 8010ba8:	6003      	str	r3, [r0, #0]
 8010baa:	2001      	movs	r0, #1
 8010bac:	bd30      	pop	{r4, r5, pc}
 8010bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010bb6:	2d19      	cmp	r5, #25
 8010bb8:	bf98      	it	ls
 8010bba:	3220      	addls	r2, #32
 8010bbc:	42a2      	cmp	r2, r4
 8010bbe:	d0f0      	beq.n	8010ba2 <__match+0x6>
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	e7f3      	b.n	8010bac <__match+0x10>

08010bc4 <__hexnan>:
 8010bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc8:	680b      	ldr	r3, [r1, #0]
 8010bca:	6801      	ldr	r1, [r0, #0]
 8010bcc:	115e      	asrs	r6, r3, #5
 8010bce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010bd2:	f013 031f 	ands.w	r3, r3, #31
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	bf18      	it	ne
 8010bda:	3604      	addne	r6, #4
 8010bdc:	2500      	movs	r5, #0
 8010bde:	1f37      	subs	r7, r6, #4
 8010be0:	4682      	mov	sl, r0
 8010be2:	4690      	mov	r8, r2
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010bea:	46b9      	mov	r9, r7
 8010bec:	463c      	mov	r4, r7
 8010bee:	9502      	str	r5, [sp, #8]
 8010bf0:	46ab      	mov	fp, r5
 8010bf2:	784a      	ldrb	r2, [r1, #1]
 8010bf4:	1c4b      	adds	r3, r1, #1
 8010bf6:	9303      	str	r3, [sp, #12]
 8010bf8:	b342      	cbz	r2, 8010c4c <__hexnan+0x88>
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	9105      	str	r1, [sp, #20]
 8010bfe:	9204      	str	r2, [sp, #16]
 8010c00:	f7ff fd94 	bl	801072c <__hexdig_fun>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	d151      	bne.n	8010cac <__hexnan+0xe8>
 8010c08:	9a04      	ldr	r2, [sp, #16]
 8010c0a:	9905      	ldr	r1, [sp, #20]
 8010c0c:	2a20      	cmp	r2, #32
 8010c0e:	d818      	bhi.n	8010c42 <__hexnan+0x7e>
 8010c10:	9b02      	ldr	r3, [sp, #8]
 8010c12:	459b      	cmp	fp, r3
 8010c14:	dd13      	ble.n	8010c3e <__hexnan+0x7a>
 8010c16:	454c      	cmp	r4, r9
 8010c18:	d206      	bcs.n	8010c28 <__hexnan+0x64>
 8010c1a:	2d07      	cmp	r5, #7
 8010c1c:	dc04      	bgt.n	8010c28 <__hexnan+0x64>
 8010c1e:	462a      	mov	r2, r5
 8010c20:	4649      	mov	r1, r9
 8010c22:	4620      	mov	r0, r4
 8010c24:	f7ff ffa8 	bl	8010b78 <L_shift>
 8010c28:	4544      	cmp	r4, r8
 8010c2a:	d952      	bls.n	8010cd2 <__hexnan+0x10e>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f1a4 0904 	sub.w	r9, r4, #4
 8010c32:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c36:	f8cd b008 	str.w	fp, [sp, #8]
 8010c3a:	464c      	mov	r4, r9
 8010c3c:	461d      	mov	r5, r3
 8010c3e:	9903      	ldr	r1, [sp, #12]
 8010c40:	e7d7      	b.n	8010bf2 <__hexnan+0x2e>
 8010c42:	2a29      	cmp	r2, #41	@ 0x29
 8010c44:	d157      	bne.n	8010cf6 <__hexnan+0x132>
 8010c46:	3102      	adds	r1, #2
 8010c48:	f8ca 1000 	str.w	r1, [sl]
 8010c4c:	f1bb 0f00 	cmp.w	fp, #0
 8010c50:	d051      	beq.n	8010cf6 <__hexnan+0x132>
 8010c52:	454c      	cmp	r4, r9
 8010c54:	d206      	bcs.n	8010c64 <__hexnan+0xa0>
 8010c56:	2d07      	cmp	r5, #7
 8010c58:	dc04      	bgt.n	8010c64 <__hexnan+0xa0>
 8010c5a:	462a      	mov	r2, r5
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f7ff ff8a 	bl	8010b78 <L_shift>
 8010c64:	4544      	cmp	r4, r8
 8010c66:	d936      	bls.n	8010cd6 <__hexnan+0x112>
 8010c68:	f1a8 0204 	sub.w	r2, r8, #4
 8010c6c:	4623      	mov	r3, r4
 8010c6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010c72:	f842 1f04 	str.w	r1, [r2, #4]!
 8010c76:	429f      	cmp	r7, r3
 8010c78:	d2f9      	bcs.n	8010c6e <__hexnan+0xaa>
 8010c7a:	1b3b      	subs	r3, r7, r4
 8010c7c:	f023 0303 	bic.w	r3, r3, #3
 8010c80:	3304      	adds	r3, #4
 8010c82:	3401      	adds	r4, #1
 8010c84:	3e03      	subs	r6, #3
 8010c86:	42b4      	cmp	r4, r6
 8010c88:	bf88      	it	hi
 8010c8a:	2304      	movhi	r3, #4
 8010c8c:	4443      	add	r3, r8
 8010c8e:	2200      	movs	r2, #0
 8010c90:	f843 2b04 	str.w	r2, [r3], #4
 8010c94:	429f      	cmp	r7, r3
 8010c96:	d2fb      	bcs.n	8010c90 <__hexnan+0xcc>
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	b91b      	cbnz	r3, 8010ca4 <__hexnan+0xe0>
 8010c9c:	4547      	cmp	r7, r8
 8010c9e:	d128      	bne.n	8010cf2 <__hexnan+0x12e>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	603b      	str	r3, [r7, #0]
 8010ca4:	2005      	movs	r0, #5
 8010ca6:	b007      	add	sp, #28
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	3501      	adds	r5, #1
 8010cae:	2d08      	cmp	r5, #8
 8010cb0:	f10b 0b01 	add.w	fp, fp, #1
 8010cb4:	dd06      	ble.n	8010cc4 <__hexnan+0x100>
 8010cb6:	4544      	cmp	r4, r8
 8010cb8:	d9c1      	bls.n	8010c3e <__hexnan+0x7a>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010cc0:	2501      	movs	r5, #1
 8010cc2:	3c04      	subs	r4, #4
 8010cc4:	6822      	ldr	r2, [r4, #0]
 8010cc6:	f000 000f 	and.w	r0, r0, #15
 8010cca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010cce:	6020      	str	r0, [r4, #0]
 8010cd0:	e7b5      	b.n	8010c3e <__hexnan+0x7a>
 8010cd2:	2508      	movs	r5, #8
 8010cd4:	e7b3      	b.n	8010c3e <__hexnan+0x7a>
 8010cd6:	9b01      	ldr	r3, [sp, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d0dd      	beq.n	8010c98 <__hexnan+0xd4>
 8010cdc:	f1c3 0320 	rsb	r3, r3, #32
 8010ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce4:	40da      	lsrs	r2, r3
 8010ce6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010cea:	4013      	ands	r3, r2
 8010cec:	f846 3c04 	str.w	r3, [r6, #-4]
 8010cf0:	e7d2      	b.n	8010c98 <__hexnan+0xd4>
 8010cf2:	3f04      	subs	r7, #4
 8010cf4:	e7d0      	b.n	8010c98 <__hexnan+0xd4>
 8010cf6:	2004      	movs	r0, #4
 8010cf8:	e7d5      	b.n	8010ca6 <__hexnan+0xe2>

08010cfa <__ascii_mbtowc>:
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	b901      	cbnz	r1, 8010d00 <__ascii_mbtowc+0x6>
 8010cfe:	a901      	add	r1, sp, #4
 8010d00:	b142      	cbz	r2, 8010d14 <__ascii_mbtowc+0x1a>
 8010d02:	b14b      	cbz	r3, 8010d18 <__ascii_mbtowc+0x1e>
 8010d04:	7813      	ldrb	r3, [r2, #0]
 8010d06:	600b      	str	r3, [r1, #0]
 8010d08:	7812      	ldrb	r2, [r2, #0]
 8010d0a:	1e10      	subs	r0, r2, #0
 8010d0c:	bf18      	it	ne
 8010d0e:	2001      	movne	r0, #1
 8010d10:	b002      	add	sp, #8
 8010d12:	4770      	bx	lr
 8010d14:	4610      	mov	r0, r2
 8010d16:	e7fb      	b.n	8010d10 <__ascii_mbtowc+0x16>
 8010d18:	f06f 0001 	mvn.w	r0, #1
 8010d1c:	e7f8      	b.n	8010d10 <__ascii_mbtowc+0x16>
	...

08010d20 <_Balloc>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	69c6      	ldr	r6, [r0, #28]
 8010d24:	4604      	mov	r4, r0
 8010d26:	460d      	mov	r5, r1
 8010d28:	b976      	cbnz	r6, 8010d48 <_Balloc+0x28>
 8010d2a:	2010      	movs	r0, #16
 8010d2c:	f7fc fe74 	bl	800da18 <malloc>
 8010d30:	4602      	mov	r2, r0
 8010d32:	61e0      	str	r0, [r4, #28]
 8010d34:	b920      	cbnz	r0, 8010d40 <_Balloc+0x20>
 8010d36:	4b18      	ldr	r3, [pc, #96]	@ (8010d98 <_Balloc+0x78>)
 8010d38:	4818      	ldr	r0, [pc, #96]	@ (8010d9c <_Balloc+0x7c>)
 8010d3a:	216b      	movs	r1, #107	@ 0x6b
 8010d3c:	f001 fc9e 	bl	801267c <__assert_func>
 8010d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d44:	6006      	str	r6, [r0, #0]
 8010d46:	60c6      	str	r6, [r0, #12]
 8010d48:	69e6      	ldr	r6, [r4, #28]
 8010d4a:	68f3      	ldr	r3, [r6, #12]
 8010d4c:	b183      	cbz	r3, 8010d70 <_Balloc+0x50>
 8010d4e:	69e3      	ldr	r3, [r4, #28]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d56:	b9b8      	cbnz	r0, 8010d88 <_Balloc+0x68>
 8010d58:	2101      	movs	r1, #1
 8010d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8010d5e:	1d72      	adds	r2, r6, #5
 8010d60:	0092      	lsls	r2, r2, #2
 8010d62:	4620      	mov	r0, r4
 8010d64:	f001 fca8 	bl	80126b8 <_calloc_r>
 8010d68:	b160      	cbz	r0, 8010d84 <_Balloc+0x64>
 8010d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d6e:	e00e      	b.n	8010d8e <_Balloc+0x6e>
 8010d70:	2221      	movs	r2, #33	@ 0x21
 8010d72:	2104      	movs	r1, #4
 8010d74:	4620      	mov	r0, r4
 8010d76:	f001 fc9f 	bl	80126b8 <_calloc_r>
 8010d7a:	69e3      	ldr	r3, [r4, #28]
 8010d7c:	60f0      	str	r0, [r6, #12]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d1e4      	bne.n	8010d4e <_Balloc+0x2e>
 8010d84:	2000      	movs	r0, #0
 8010d86:	bd70      	pop	{r4, r5, r6, pc}
 8010d88:	6802      	ldr	r2, [r0, #0]
 8010d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d8e:	2300      	movs	r3, #0
 8010d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d94:	e7f7      	b.n	8010d86 <_Balloc+0x66>
 8010d96:	bf00      	nop
 8010d98:	08012ade 	.word	0x08012ade
 8010d9c:	08012bbe 	.word	0x08012bbe

08010da0 <_Bfree>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	69c6      	ldr	r6, [r0, #28]
 8010da4:	4605      	mov	r5, r0
 8010da6:	460c      	mov	r4, r1
 8010da8:	b976      	cbnz	r6, 8010dc8 <_Bfree+0x28>
 8010daa:	2010      	movs	r0, #16
 8010dac:	f7fc fe34 	bl	800da18 <malloc>
 8010db0:	4602      	mov	r2, r0
 8010db2:	61e8      	str	r0, [r5, #28]
 8010db4:	b920      	cbnz	r0, 8010dc0 <_Bfree+0x20>
 8010db6:	4b09      	ldr	r3, [pc, #36]	@ (8010ddc <_Bfree+0x3c>)
 8010db8:	4809      	ldr	r0, [pc, #36]	@ (8010de0 <_Bfree+0x40>)
 8010dba:	218f      	movs	r1, #143	@ 0x8f
 8010dbc:	f001 fc5e 	bl	801267c <__assert_func>
 8010dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dc4:	6006      	str	r6, [r0, #0]
 8010dc6:	60c6      	str	r6, [r0, #12]
 8010dc8:	b13c      	cbz	r4, 8010dda <_Bfree+0x3a>
 8010dca:	69eb      	ldr	r3, [r5, #28]
 8010dcc:	6862      	ldr	r2, [r4, #4]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010dd4:	6021      	str	r1, [r4, #0]
 8010dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	08012ade 	.word	0x08012ade
 8010de0:	08012bbe 	.word	0x08012bbe

08010de4 <__multadd>:
 8010de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de8:	690d      	ldr	r5, [r1, #16]
 8010dea:	4607      	mov	r7, r0
 8010dec:	460c      	mov	r4, r1
 8010dee:	461e      	mov	r6, r3
 8010df0:	f101 0c14 	add.w	ip, r1, #20
 8010df4:	2000      	movs	r0, #0
 8010df6:	f8dc 3000 	ldr.w	r3, [ip]
 8010dfa:	b299      	uxth	r1, r3
 8010dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8010e00:	0c1e      	lsrs	r6, r3, #16
 8010e02:	0c0b      	lsrs	r3, r1, #16
 8010e04:	fb02 3306 	mla	r3, r2, r6, r3
 8010e08:	b289      	uxth	r1, r1
 8010e0a:	3001      	adds	r0, #1
 8010e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e10:	4285      	cmp	r5, r0
 8010e12:	f84c 1b04 	str.w	r1, [ip], #4
 8010e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e1a:	dcec      	bgt.n	8010df6 <__multadd+0x12>
 8010e1c:	b30e      	cbz	r6, 8010e62 <__multadd+0x7e>
 8010e1e:	68a3      	ldr	r3, [r4, #8]
 8010e20:	42ab      	cmp	r3, r5
 8010e22:	dc19      	bgt.n	8010e58 <__multadd+0x74>
 8010e24:	6861      	ldr	r1, [r4, #4]
 8010e26:	4638      	mov	r0, r7
 8010e28:	3101      	adds	r1, #1
 8010e2a:	f7ff ff79 	bl	8010d20 <_Balloc>
 8010e2e:	4680      	mov	r8, r0
 8010e30:	b928      	cbnz	r0, 8010e3e <__multadd+0x5a>
 8010e32:	4602      	mov	r2, r0
 8010e34:	4b0c      	ldr	r3, [pc, #48]	@ (8010e68 <__multadd+0x84>)
 8010e36:	480d      	ldr	r0, [pc, #52]	@ (8010e6c <__multadd+0x88>)
 8010e38:	21ba      	movs	r1, #186	@ 0xba
 8010e3a:	f001 fc1f 	bl	801267c <__assert_func>
 8010e3e:	6922      	ldr	r2, [r4, #16]
 8010e40:	3202      	adds	r2, #2
 8010e42:	f104 010c 	add.w	r1, r4, #12
 8010e46:	0092      	lsls	r2, r2, #2
 8010e48:	300c      	adds	r0, #12
 8010e4a:	f7fe fdcc 	bl	800f9e6 <memcpy>
 8010e4e:	4621      	mov	r1, r4
 8010e50:	4638      	mov	r0, r7
 8010e52:	f7ff ffa5 	bl	8010da0 <_Bfree>
 8010e56:	4644      	mov	r4, r8
 8010e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e5c:	3501      	adds	r5, #1
 8010e5e:	615e      	str	r6, [r3, #20]
 8010e60:	6125      	str	r5, [r4, #16]
 8010e62:	4620      	mov	r0, r4
 8010e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e68:	08012b4d 	.word	0x08012b4d
 8010e6c:	08012bbe 	.word	0x08012bbe

08010e70 <__s2b>:
 8010e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e74:	460c      	mov	r4, r1
 8010e76:	4615      	mov	r5, r2
 8010e78:	461f      	mov	r7, r3
 8010e7a:	2209      	movs	r2, #9
 8010e7c:	3308      	adds	r3, #8
 8010e7e:	4606      	mov	r6, r0
 8010e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e84:	2100      	movs	r1, #0
 8010e86:	2201      	movs	r2, #1
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	db09      	blt.n	8010ea0 <__s2b+0x30>
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7ff ff47 	bl	8010d20 <_Balloc>
 8010e92:	b940      	cbnz	r0, 8010ea6 <__s2b+0x36>
 8010e94:	4602      	mov	r2, r0
 8010e96:	4b19      	ldr	r3, [pc, #100]	@ (8010efc <__s2b+0x8c>)
 8010e98:	4819      	ldr	r0, [pc, #100]	@ (8010f00 <__s2b+0x90>)
 8010e9a:	21d3      	movs	r1, #211	@ 0xd3
 8010e9c:	f001 fbee 	bl	801267c <__assert_func>
 8010ea0:	0052      	lsls	r2, r2, #1
 8010ea2:	3101      	adds	r1, #1
 8010ea4:	e7f0      	b.n	8010e88 <__s2b+0x18>
 8010ea6:	9b08      	ldr	r3, [sp, #32]
 8010ea8:	6143      	str	r3, [r0, #20]
 8010eaa:	2d09      	cmp	r5, #9
 8010eac:	f04f 0301 	mov.w	r3, #1
 8010eb0:	6103      	str	r3, [r0, #16]
 8010eb2:	dd16      	ble.n	8010ee2 <__s2b+0x72>
 8010eb4:	f104 0909 	add.w	r9, r4, #9
 8010eb8:	46c8      	mov	r8, r9
 8010eba:	442c      	add	r4, r5
 8010ebc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ec0:	4601      	mov	r1, r0
 8010ec2:	3b30      	subs	r3, #48	@ 0x30
 8010ec4:	220a      	movs	r2, #10
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7ff ff8c 	bl	8010de4 <__multadd>
 8010ecc:	45a0      	cmp	r8, r4
 8010ece:	d1f5      	bne.n	8010ebc <__s2b+0x4c>
 8010ed0:	f1a5 0408 	sub.w	r4, r5, #8
 8010ed4:	444c      	add	r4, r9
 8010ed6:	1b2d      	subs	r5, r5, r4
 8010ed8:	1963      	adds	r3, r4, r5
 8010eda:	42bb      	cmp	r3, r7
 8010edc:	db04      	blt.n	8010ee8 <__s2b+0x78>
 8010ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ee2:	340a      	adds	r4, #10
 8010ee4:	2509      	movs	r5, #9
 8010ee6:	e7f6      	b.n	8010ed6 <__s2b+0x66>
 8010ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010eec:	4601      	mov	r1, r0
 8010eee:	3b30      	subs	r3, #48	@ 0x30
 8010ef0:	220a      	movs	r2, #10
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f7ff ff76 	bl	8010de4 <__multadd>
 8010ef8:	e7ee      	b.n	8010ed8 <__s2b+0x68>
 8010efa:	bf00      	nop
 8010efc:	08012b4d 	.word	0x08012b4d
 8010f00:	08012bbe 	.word	0x08012bbe

08010f04 <__hi0bits>:
 8010f04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f08:	4603      	mov	r3, r0
 8010f0a:	bf36      	itet	cc
 8010f0c:	0403      	lslcc	r3, r0, #16
 8010f0e:	2000      	movcs	r0, #0
 8010f10:	2010      	movcc	r0, #16
 8010f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f16:	bf3c      	itt	cc
 8010f18:	021b      	lslcc	r3, r3, #8
 8010f1a:	3008      	addcc	r0, #8
 8010f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f20:	bf3c      	itt	cc
 8010f22:	011b      	lslcc	r3, r3, #4
 8010f24:	3004      	addcc	r0, #4
 8010f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f2a:	bf3c      	itt	cc
 8010f2c:	009b      	lslcc	r3, r3, #2
 8010f2e:	3002      	addcc	r0, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	db05      	blt.n	8010f40 <__hi0bits+0x3c>
 8010f34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f38:	f100 0001 	add.w	r0, r0, #1
 8010f3c:	bf08      	it	eq
 8010f3e:	2020      	moveq	r0, #32
 8010f40:	4770      	bx	lr

08010f42 <__lo0bits>:
 8010f42:	6803      	ldr	r3, [r0, #0]
 8010f44:	4602      	mov	r2, r0
 8010f46:	f013 0007 	ands.w	r0, r3, #7
 8010f4a:	d00b      	beq.n	8010f64 <__lo0bits+0x22>
 8010f4c:	07d9      	lsls	r1, r3, #31
 8010f4e:	d421      	bmi.n	8010f94 <__lo0bits+0x52>
 8010f50:	0798      	lsls	r0, r3, #30
 8010f52:	bf49      	itett	mi
 8010f54:	085b      	lsrmi	r3, r3, #1
 8010f56:	089b      	lsrpl	r3, r3, #2
 8010f58:	2001      	movmi	r0, #1
 8010f5a:	6013      	strmi	r3, [r2, #0]
 8010f5c:	bf5c      	itt	pl
 8010f5e:	6013      	strpl	r3, [r2, #0]
 8010f60:	2002      	movpl	r0, #2
 8010f62:	4770      	bx	lr
 8010f64:	b299      	uxth	r1, r3
 8010f66:	b909      	cbnz	r1, 8010f6c <__lo0bits+0x2a>
 8010f68:	0c1b      	lsrs	r3, r3, #16
 8010f6a:	2010      	movs	r0, #16
 8010f6c:	b2d9      	uxtb	r1, r3
 8010f6e:	b909      	cbnz	r1, 8010f74 <__lo0bits+0x32>
 8010f70:	3008      	adds	r0, #8
 8010f72:	0a1b      	lsrs	r3, r3, #8
 8010f74:	0719      	lsls	r1, r3, #28
 8010f76:	bf04      	itt	eq
 8010f78:	091b      	lsreq	r3, r3, #4
 8010f7a:	3004      	addeq	r0, #4
 8010f7c:	0799      	lsls	r1, r3, #30
 8010f7e:	bf04      	itt	eq
 8010f80:	089b      	lsreq	r3, r3, #2
 8010f82:	3002      	addeq	r0, #2
 8010f84:	07d9      	lsls	r1, r3, #31
 8010f86:	d403      	bmi.n	8010f90 <__lo0bits+0x4e>
 8010f88:	085b      	lsrs	r3, r3, #1
 8010f8a:	f100 0001 	add.w	r0, r0, #1
 8010f8e:	d003      	beq.n	8010f98 <__lo0bits+0x56>
 8010f90:	6013      	str	r3, [r2, #0]
 8010f92:	4770      	bx	lr
 8010f94:	2000      	movs	r0, #0
 8010f96:	4770      	bx	lr
 8010f98:	2020      	movs	r0, #32
 8010f9a:	4770      	bx	lr

08010f9c <__i2b>:
 8010f9c:	b510      	push	{r4, lr}
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	f7ff febd 	bl	8010d20 <_Balloc>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	b928      	cbnz	r0, 8010fb6 <__i2b+0x1a>
 8010faa:	4b05      	ldr	r3, [pc, #20]	@ (8010fc0 <__i2b+0x24>)
 8010fac:	4805      	ldr	r0, [pc, #20]	@ (8010fc4 <__i2b+0x28>)
 8010fae:	f240 1145 	movw	r1, #325	@ 0x145
 8010fb2:	f001 fb63 	bl	801267c <__assert_func>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	6144      	str	r4, [r0, #20]
 8010fba:	6103      	str	r3, [r0, #16]
 8010fbc:	bd10      	pop	{r4, pc}
 8010fbe:	bf00      	nop
 8010fc0:	08012b4d 	.word	0x08012b4d
 8010fc4:	08012bbe 	.word	0x08012bbe

08010fc8 <__multiply>:
 8010fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fcc:	4617      	mov	r7, r2
 8010fce:	690a      	ldr	r2, [r1, #16]
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	bfa8      	it	ge
 8010fd6:	463b      	movge	r3, r7
 8010fd8:	4689      	mov	r9, r1
 8010fda:	bfa4      	itt	ge
 8010fdc:	460f      	movge	r7, r1
 8010fde:	4699      	movge	r9, r3
 8010fe0:	693d      	ldr	r5, [r7, #16]
 8010fe2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	6879      	ldr	r1, [r7, #4]
 8010fea:	eb05 060a 	add.w	r6, r5, sl
 8010fee:	42b3      	cmp	r3, r6
 8010ff0:	b085      	sub	sp, #20
 8010ff2:	bfb8      	it	lt
 8010ff4:	3101      	addlt	r1, #1
 8010ff6:	f7ff fe93 	bl	8010d20 <_Balloc>
 8010ffa:	b930      	cbnz	r0, 801100a <__multiply+0x42>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	4b41      	ldr	r3, [pc, #260]	@ (8011104 <__multiply+0x13c>)
 8011000:	4841      	ldr	r0, [pc, #260]	@ (8011108 <__multiply+0x140>)
 8011002:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011006:	f001 fb39 	bl	801267c <__assert_func>
 801100a:	f100 0414 	add.w	r4, r0, #20
 801100e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011012:	4623      	mov	r3, r4
 8011014:	2200      	movs	r2, #0
 8011016:	4573      	cmp	r3, lr
 8011018:	d320      	bcc.n	801105c <__multiply+0x94>
 801101a:	f107 0814 	add.w	r8, r7, #20
 801101e:	f109 0114 	add.w	r1, r9, #20
 8011022:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011026:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801102a:	9302      	str	r3, [sp, #8]
 801102c:	1beb      	subs	r3, r5, r7
 801102e:	3b15      	subs	r3, #21
 8011030:	f023 0303 	bic.w	r3, r3, #3
 8011034:	3304      	adds	r3, #4
 8011036:	3715      	adds	r7, #21
 8011038:	42bd      	cmp	r5, r7
 801103a:	bf38      	it	cc
 801103c:	2304      	movcc	r3, #4
 801103e:	9301      	str	r3, [sp, #4]
 8011040:	9b02      	ldr	r3, [sp, #8]
 8011042:	9103      	str	r1, [sp, #12]
 8011044:	428b      	cmp	r3, r1
 8011046:	d80c      	bhi.n	8011062 <__multiply+0x9a>
 8011048:	2e00      	cmp	r6, #0
 801104a:	dd03      	ble.n	8011054 <__multiply+0x8c>
 801104c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011050:	2b00      	cmp	r3, #0
 8011052:	d055      	beq.n	8011100 <__multiply+0x138>
 8011054:	6106      	str	r6, [r0, #16]
 8011056:	b005      	add	sp, #20
 8011058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105c:	f843 2b04 	str.w	r2, [r3], #4
 8011060:	e7d9      	b.n	8011016 <__multiply+0x4e>
 8011062:	f8b1 a000 	ldrh.w	sl, [r1]
 8011066:	f1ba 0f00 	cmp.w	sl, #0
 801106a:	d01f      	beq.n	80110ac <__multiply+0xe4>
 801106c:	46c4      	mov	ip, r8
 801106e:	46a1      	mov	r9, r4
 8011070:	2700      	movs	r7, #0
 8011072:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011076:	f8d9 3000 	ldr.w	r3, [r9]
 801107a:	fa1f fb82 	uxth.w	fp, r2
 801107e:	b29b      	uxth	r3, r3
 8011080:	fb0a 330b 	mla	r3, sl, fp, r3
 8011084:	443b      	add	r3, r7
 8011086:	f8d9 7000 	ldr.w	r7, [r9]
 801108a:	0c12      	lsrs	r2, r2, #16
 801108c:	0c3f      	lsrs	r7, r7, #16
 801108e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011092:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011096:	b29b      	uxth	r3, r3
 8011098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801109c:	4565      	cmp	r5, ip
 801109e:	f849 3b04 	str.w	r3, [r9], #4
 80110a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80110a6:	d8e4      	bhi.n	8011072 <__multiply+0xaa>
 80110a8:	9b01      	ldr	r3, [sp, #4]
 80110aa:	50e7      	str	r7, [r4, r3]
 80110ac:	9b03      	ldr	r3, [sp, #12]
 80110ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80110b2:	3104      	adds	r1, #4
 80110b4:	f1b9 0f00 	cmp.w	r9, #0
 80110b8:	d020      	beq.n	80110fc <__multiply+0x134>
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	4647      	mov	r7, r8
 80110be:	46a4      	mov	ip, r4
 80110c0:	f04f 0a00 	mov.w	sl, #0
 80110c4:	f8b7 b000 	ldrh.w	fp, [r7]
 80110c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80110cc:	fb09 220b 	mla	r2, r9, fp, r2
 80110d0:	4452      	add	r2, sl
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110d8:	f84c 3b04 	str.w	r3, [ip], #4
 80110dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80110e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110e4:	f8bc 3000 	ldrh.w	r3, [ip]
 80110e8:	fb09 330a 	mla	r3, r9, sl, r3
 80110ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80110f0:	42bd      	cmp	r5, r7
 80110f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110f6:	d8e5      	bhi.n	80110c4 <__multiply+0xfc>
 80110f8:	9a01      	ldr	r2, [sp, #4]
 80110fa:	50a3      	str	r3, [r4, r2]
 80110fc:	3404      	adds	r4, #4
 80110fe:	e79f      	b.n	8011040 <__multiply+0x78>
 8011100:	3e01      	subs	r6, #1
 8011102:	e7a1      	b.n	8011048 <__multiply+0x80>
 8011104:	08012b4d 	.word	0x08012b4d
 8011108:	08012bbe 	.word	0x08012bbe

0801110c <__pow5mult>:
 801110c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011110:	4615      	mov	r5, r2
 8011112:	f012 0203 	ands.w	r2, r2, #3
 8011116:	4607      	mov	r7, r0
 8011118:	460e      	mov	r6, r1
 801111a:	d007      	beq.n	801112c <__pow5mult+0x20>
 801111c:	4c25      	ldr	r4, [pc, #148]	@ (80111b4 <__pow5mult+0xa8>)
 801111e:	3a01      	subs	r2, #1
 8011120:	2300      	movs	r3, #0
 8011122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011126:	f7ff fe5d 	bl	8010de4 <__multadd>
 801112a:	4606      	mov	r6, r0
 801112c:	10ad      	asrs	r5, r5, #2
 801112e:	d03d      	beq.n	80111ac <__pow5mult+0xa0>
 8011130:	69fc      	ldr	r4, [r7, #28]
 8011132:	b97c      	cbnz	r4, 8011154 <__pow5mult+0x48>
 8011134:	2010      	movs	r0, #16
 8011136:	f7fc fc6f 	bl	800da18 <malloc>
 801113a:	4602      	mov	r2, r0
 801113c:	61f8      	str	r0, [r7, #28]
 801113e:	b928      	cbnz	r0, 801114c <__pow5mult+0x40>
 8011140:	4b1d      	ldr	r3, [pc, #116]	@ (80111b8 <__pow5mult+0xac>)
 8011142:	481e      	ldr	r0, [pc, #120]	@ (80111bc <__pow5mult+0xb0>)
 8011144:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011148:	f001 fa98 	bl	801267c <__assert_func>
 801114c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011150:	6004      	str	r4, [r0, #0]
 8011152:	60c4      	str	r4, [r0, #12]
 8011154:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801115c:	b94c      	cbnz	r4, 8011172 <__pow5mult+0x66>
 801115e:	f240 2171 	movw	r1, #625	@ 0x271
 8011162:	4638      	mov	r0, r7
 8011164:	f7ff ff1a 	bl	8010f9c <__i2b>
 8011168:	2300      	movs	r3, #0
 801116a:	f8c8 0008 	str.w	r0, [r8, #8]
 801116e:	4604      	mov	r4, r0
 8011170:	6003      	str	r3, [r0, #0]
 8011172:	f04f 0900 	mov.w	r9, #0
 8011176:	07eb      	lsls	r3, r5, #31
 8011178:	d50a      	bpl.n	8011190 <__pow5mult+0x84>
 801117a:	4631      	mov	r1, r6
 801117c:	4622      	mov	r2, r4
 801117e:	4638      	mov	r0, r7
 8011180:	f7ff ff22 	bl	8010fc8 <__multiply>
 8011184:	4631      	mov	r1, r6
 8011186:	4680      	mov	r8, r0
 8011188:	4638      	mov	r0, r7
 801118a:	f7ff fe09 	bl	8010da0 <_Bfree>
 801118e:	4646      	mov	r6, r8
 8011190:	106d      	asrs	r5, r5, #1
 8011192:	d00b      	beq.n	80111ac <__pow5mult+0xa0>
 8011194:	6820      	ldr	r0, [r4, #0]
 8011196:	b938      	cbnz	r0, 80111a8 <__pow5mult+0x9c>
 8011198:	4622      	mov	r2, r4
 801119a:	4621      	mov	r1, r4
 801119c:	4638      	mov	r0, r7
 801119e:	f7ff ff13 	bl	8010fc8 <__multiply>
 80111a2:	6020      	str	r0, [r4, #0]
 80111a4:	f8c0 9000 	str.w	r9, [r0]
 80111a8:	4604      	mov	r4, r0
 80111aa:	e7e4      	b.n	8011176 <__pow5mult+0x6a>
 80111ac:	4630      	mov	r0, r6
 80111ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b2:	bf00      	nop
 80111b4:	08012dd4 	.word	0x08012dd4
 80111b8:	08012ade 	.word	0x08012ade
 80111bc:	08012bbe 	.word	0x08012bbe

080111c0 <__lshift>:
 80111c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c4:	460c      	mov	r4, r1
 80111c6:	6849      	ldr	r1, [r1, #4]
 80111c8:	6923      	ldr	r3, [r4, #16]
 80111ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111ce:	68a3      	ldr	r3, [r4, #8]
 80111d0:	4607      	mov	r7, r0
 80111d2:	4691      	mov	r9, r2
 80111d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111d8:	f108 0601 	add.w	r6, r8, #1
 80111dc:	42b3      	cmp	r3, r6
 80111de:	db0b      	blt.n	80111f8 <__lshift+0x38>
 80111e0:	4638      	mov	r0, r7
 80111e2:	f7ff fd9d 	bl	8010d20 <_Balloc>
 80111e6:	4605      	mov	r5, r0
 80111e8:	b948      	cbnz	r0, 80111fe <__lshift+0x3e>
 80111ea:	4602      	mov	r2, r0
 80111ec:	4b28      	ldr	r3, [pc, #160]	@ (8011290 <__lshift+0xd0>)
 80111ee:	4829      	ldr	r0, [pc, #164]	@ (8011294 <__lshift+0xd4>)
 80111f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80111f4:	f001 fa42 	bl	801267c <__assert_func>
 80111f8:	3101      	adds	r1, #1
 80111fa:	005b      	lsls	r3, r3, #1
 80111fc:	e7ee      	b.n	80111dc <__lshift+0x1c>
 80111fe:	2300      	movs	r3, #0
 8011200:	f100 0114 	add.w	r1, r0, #20
 8011204:	f100 0210 	add.w	r2, r0, #16
 8011208:	4618      	mov	r0, r3
 801120a:	4553      	cmp	r3, sl
 801120c:	db33      	blt.n	8011276 <__lshift+0xb6>
 801120e:	6920      	ldr	r0, [r4, #16]
 8011210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011214:	f104 0314 	add.w	r3, r4, #20
 8011218:	f019 091f 	ands.w	r9, r9, #31
 801121c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011224:	d02b      	beq.n	801127e <__lshift+0xbe>
 8011226:	f1c9 0e20 	rsb	lr, r9, #32
 801122a:	468a      	mov	sl, r1
 801122c:	2200      	movs	r2, #0
 801122e:	6818      	ldr	r0, [r3, #0]
 8011230:	fa00 f009 	lsl.w	r0, r0, r9
 8011234:	4310      	orrs	r0, r2
 8011236:	f84a 0b04 	str.w	r0, [sl], #4
 801123a:	f853 2b04 	ldr.w	r2, [r3], #4
 801123e:	459c      	cmp	ip, r3
 8011240:	fa22 f20e 	lsr.w	r2, r2, lr
 8011244:	d8f3      	bhi.n	801122e <__lshift+0x6e>
 8011246:	ebac 0304 	sub.w	r3, ip, r4
 801124a:	3b15      	subs	r3, #21
 801124c:	f023 0303 	bic.w	r3, r3, #3
 8011250:	3304      	adds	r3, #4
 8011252:	f104 0015 	add.w	r0, r4, #21
 8011256:	4560      	cmp	r0, ip
 8011258:	bf88      	it	hi
 801125a:	2304      	movhi	r3, #4
 801125c:	50ca      	str	r2, [r1, r3]
 801125e:	b10a      	cbz	r2, 8011264 <__lshift+0xa4>
 8011260:	f108 0602 	add.w	r6, r8, #2
 8011264:	3e01      	subs	r6, #1
 8011266:	4638      	mov	r0, r7
 8011268:	612e      	str	r6, [r5, #16]
 801126a:	4621      	mov	r1, r4
 801126c:	f7ff fd98 	bl	8010da0 <_Bfree>
 8011270:	4628      	mov	r0, r5
 8011272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011276:	f842 0f04 	str.w	r0, [r2, #4]!
 801127a:	3301      	adds	r3, #1
 801127c:	e7c5      	b.n	801120a <__lshift+0x4a>
 801127e:	3904      	subs	r1, #4
 8011280:	f853 2b04 	ldr.w	r2, [r3], #4
 8011284:	f841 2f04 	str.w	r2, [r1, #4]!
 8011288:	459c      	cmp	ip, r3
 801128a:	d8f9      	bhi.n	8011280 <__lshift+0xc0>
 801128c:	e7ea      	b.n	8011264 <__lshift+0xa4>
 801128e:	bf00      	nop
 8011290:	08012b4d 	.word	0x08012b4d
 8011294:	08012bbe 	.word	0x08012bbe

08011298 <__mcmp>:
 8011298:	690a      	ldr	r2, [r1, #16]
 801129a:	4603      	mov	r3, r0
 801129c:	6900      	ldr	r0, [r0, #16]
 801129e:	1a80      	subs	r0, r0, r2
 80112a0:	b530      	push	{r4, r5, lr}
 80112a2:	d10e      	bne.n	80112c2 <__mcmp+0x2a>
 80112a4:	3314      	adds	r3, #20
 80112a6:	3114      	adds	r1, #20
 80112a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80112ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80112b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80112b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80112b8:	4295      	cmp	r5, r2
 80112ba:	d003      	beq.n	80112c4 <__mcmp+0x2c>
 80112bc:	d205      	bcs.n	80112ca <__mcmp+0x32>
 80112be:	f04f 30ff 	mov.w	r0, #4294967295
 80112c2:	bd30      	pop	{r4, r5, pc}
 80112c4:	42a3      	cmp	r3, r4
 80112c6:	d3f3      	bcc.n	80112b0 <__mcmp+0x18>
 80112c8:	e7fb      	b.n	80112c2 <__mcmp+0x2a>
 80112ca:	2001      	movs	r0, #1
 80112cc:	e7f9      	b.n	80112c2 <__mcmp+0x2a>
	...

080112d0 <__mdiff>:
 80112d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d4:	4689      	mov	r9, r1
 80112d6:	4606      	mov	r6, r0
 80112d8:	4611      	mov	r1, r2
 80112da:	4648      	mov	r0, r9
 80112dc:	4614      	mov	r4, r2
 80112de:	f7ff ffdb 	bl	8011298 <__mcmp>
 80112e2:	1e05      	subs	r5, r0, #0
 80112e4:	d112      	bne.n	801130c <__mdiff+0x3c>
 80112e6:	4629      	mov	r1, r5
 80112e8:	4630      	mov	r0, r6
 80112ea:	f7ff fd19 	bl	8010d20 <_Balloc>
 80112ee:	4602      	mov	r2, r0
 80112f0:	b928      	cbnz	r0, 80112fe <__mdiff+0x2e>
 80112f2:	4b3f      	ldr	r3, [pc, #252]	@ (80113f0 <__mdiff+0x120>)
 80112f4:	f240 2137 	movw	r1, #567	@ 0x237
 80112f8:	483e      	ldr	r0, [pc, #248]	@ (80113f4 <__mdiff+0x124>)
 80112fa:	f001 f9bf 	bl	801267c <__assert_func>
 80112fe:	2301      	movs	r3, #1
 8011300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011304:	4610      	mov	r0, r2
 8011306:	b003      	add	sp, #12
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130c:	bfbc      	itt	lt
 801130e:	464b      	movlt	r3, r9
 8011310:	46a1      	movlt	r9, r4
 8011312:	4630      	mov	r0, r6
 8011314:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011318:	bfba      	itte	lt
 801131a:	461c      	movlt	r4, r3
 801131c:	2501      	movlt	r5, #1
 801131e:	2500      	movge	r5, #0
 8011320:	f7ff fcfe 	bl	8010d20 <_Balloc>
 8011324:	4602      	mov	r2, r0
 8011326:	b918      	cbnz	r0, 8011330 <__mdiff+0x60>
 8011328:	4b31      	ldr	r3, [pc, #196]	@ (80113f0 <__mdiff+0x120>)
 801132a:	f240 2145 	movw	r1, #581	@ 0x245
 801132e:	e7e3      	b.n	80112f8 <__mdiff+0x28>
 8011330:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011334:	6926      	ldr	r6, [r4, #16]
 8011336:	60c5      	str	r5, [r0, #12]
 8011338:	f109 0310 	add.w	r3, r9, #16
 801133c:	f109 0514 	add.w	r5, r9, #20
 8011340:	f104 0e14 	add.w	lr, r4, #20
 8011344:	f100 0b14 	add.w	fp, r0, #20
 8011348:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801134c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011350:	9301      	str	r3, [sp, #4]
 8011352:	46d9      	mov	r9, fp
 8011354:	f04f 0c00 	mov.w	ip, #0
 8011358:	9b01      	ldr	r3, [sp, #4]
 801135a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801135e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011362:	9301      	str	r3, [sp, #4]
 8011364:	fa1f f38a 	uxth.w	r3, sl
 8011368:	4619      	mov	r1, r3
 801136a:	b283      	uxth	r3, r0
 801136c:	1acb      	subs	r3, r1, r3
 801136e:	0c00      	lsrs	r0, r0, #16
 8011370:	4463      	add	r3, ip
 8011372:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011376:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801137a:	b29b      	uxth	r3, r3
 801137c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011380:	4576      	cmp	r6, lr
 8011382:	f849 3b04 	str.w	r3, [r9], #4
 8011386:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801138a:	d8e5      	bhi.n	8011358 <__mdiff+0x88>
 801138c:	1b33      	subs	r3, r6, r4
 801138e:	3b15      	subs	r3, #21
 8011390:	f023 0303 	bic.w	r3, r3, #3
 8011394:	3415      	adds	r4, #21
 8011396:	3304      	adds	r3, #4
 8011398:	42a6      	cmp	r6, r4
 801139a:	bf38      	it	cc
 801139c:	2304      	movcc	r3, #4
 801139e:	441d      	add	r5, r3
 80113a0:	445b      	add	r3, fp
 80113a2:	461e      	mov	r6, r3
 80113a4:	462c      	mov	r4, r5
 80113a6:	4544      	cmp	r4, r8
 80113a8:	d30e      	bcc.n	80113c8 <__mdiff+0xf8>
 80113aa:	f108 0103 	add.w	r1, r8, #3
 80113ae:	1b49      	subs	r1, r1, r5
 80113b0:	f021 0103 	bic.w	r1, r1, #3
 80113b4:	3d03      	subs	r5, #3
 80113b6:	45a8      	cmp	r8, r5
 80113b8:	bf38      	it	cc
 80113ba:	2100      	movcc	r1, #0
 80113bc:	440b      	add	r3, r1
 80113be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113c2:	b191      	cbz	r1, 80113ea <__mdiff+0x11a>
 80113c4:	6117      	str	r7, [r2, #16]
 80113c6:	e79d      	b.n	8011304 <__mdiff+0x34>
 80113c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80113cc:	46e6      	mov	lr, ip
 80113ce:	0c08      	lsrs	r0, r1, #16
 80113d0:	fa1c fc81 	uxtah	ip, ip, r1
 80113d4:	4471      	add	r1, lr
 80113d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80113da:	b289      	uxth	r1, r1
 80113dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80113e0:	f846 1b04 	str.w	r1, [r6], #4
 80113e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113e8:	e7dd      	b.n	80113a6 <__mdiff+0xd6>
 80113ea:	3f01      	subs	r7, #1
 80113ec:	e7e7      	b.n	80113be <__mdiff+0xee>
 80113ee:	bf00      	nop
 80113f0:	08012b4d 	.word	0x08012b4d
 80113f4:	08012bbe 	.word	0x08012bbe

080113f8 <__ulp>:
 80113f8:	b082      	sub	sp, #8
 80113fa:	ed8d 0b00 	vstr	d0, [sp]
 80113fe:	9a01      	ldr	r2, [sp, #4]
 8011400:	4b0f      	ldr	r3, [pc, #60]	@ (8011440 <__ulp+0x48>)
 8011402:	4013      	ands	r3, r2
 8011404:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011408:	2b00      	cmp	r3, #0
 801140a:	dc08      	bgt.n	801141e <__ulp+0x26>
 801140c:	425b      	negs	r3, r3
 801140e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011412:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011416:	da04      	bge.n	8011422 <__ulp+0x2a>
 8011418:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801141c:	4113      	asrs	r3, r2
 801141e:	2200      	movs	r2, #0
 8011420:	e008      	b.n	8011434 <__ulp+0x3c>
 8011422:	f1a2 0314 	sub.w	r3, r2, #20
 8011426:	2b1e      	cmp	r3, #30
 8011428:	bfda      	itte	le
 801142a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801142e:	40da      	lsrle	r2, r3
 8011430:	2201      	movgt	r2, #1
 8011432:	2300      	movs	r3, #0
 8011434:	4619      	mov	r1, r3
 8011436:	4610      	mov	r0, r2
 8011438:	ec41 0b10 	vmov	d0, r0, r1
 801143c:	b002      	add	sp, #8
 801143e:	4770      	bx	lr
 8011440:	7ff00000 	.word	0x7ff00000

08011444 <__b2d>:
 8011444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011448:	6906      	ldr	r6, [r0, #16]
 801144a:	f100 0814 	add.w	r8, r0, #20
 801144e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011452:	1f37      	subs	r7, r6, #4
 8011454:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011458:	4610      	mov	r0, r2
 801145a:	f7ff fd53 	bl	8010f04 <__hi0bits>
 801145e:	f1c0 0320 	rsb	r3, r0, #32
 8011462:	280a      	cmp	r0, #10
 8011464:	600b      	str	r3, [r1, #0]
 8011466:	491b      	ldr	r1, [pc, #108]	@ (80114d4 <__b2d+0x90>)
 8011468:	dc15      	bgt.n	8011496 <__b2d+0x52>
 801146a:	f1c0 0c0b 	rsb	ip, r0, #11
 801146e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011472:	45b8      	cmp	r8, r7
 8011474:	ea43 0501 	orr.w	r5, r3, r1
 8011478:	bf34      	ite	cc
 801147a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801147e:	2300      	movcs	r3, #0
 8011480:	3015      	adds	r0, #21
 8011482:	fa02 f000 	lsl.w	r0, r2, r0
 8011486:	fa23 f30c 	lsr.w	r3, r3, ip
 801148a:	4303      	orrs	r3, r0
 801148c:	461c      	mov	r4, r3
 801148e:	ec45 4b10 	vmov	d0, r4, r5
 8011492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011496:	45b8      	cmp	r8, r7
 8011498:	bf3a      	itte	cc
 801149a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801149e:	f1a6 0708 	subcc.w	r7, r6, #8
 80114a2:	2300      	movcs	r3, #0
 80114a4:	380b      	subs	r0, #11
 80114a6:	d012      	beq.n	80114ce <__b2d+0x8a>
 80114a8:	f1c0 0120 	rsb	r1, r0, #32
 80114ac:	fa23 f401 	lsr.w	r4, r3, r1
 80114b0:	4082      	lsls	r2, r0
 80114b2:	4322      	orrs	r2, r4
 80114b4:	4547      	cmp	r7, r8
 80114b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80114ba:	bf8c      	ite	hi
 80114bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80114c0:	2200      	movls	r2, #0
 80114c2:	4083      	lsls	r3, r0
 80114c4:	40ca      	lsrs	r2, r1
 80114c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80114ca:	4313      	orrs	r3, r2
 80114cc:	e7de      	b.n	801148c <__b2d+0x48>
 80114ce:	ea42 0501 	orr.w	r5, r2, r1
 80114d2:	e7db      	b.n	801148c <__b2d+0x48>
 80114d4:	3ff00000 	.word	0x3ff00000

080114d8 <__d2b>:
 80114d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114dc:	460f      	mov	r7, r1
 80114de:	2101      	movs	r1, #1
 80114e0:	ec59 8b10 	vmov	r8, r9, d0
 80114e4:	4616      	mov	r6, r2
 80114e6:	f7ff fc1b 	bl	8010d20 <_Balloc>
 80114ea:	4604      	mov	r4, r0
 80114ec:	b930      	cbnz	r0, 80114fc <__d2b+0x24>
 80114ee:	4602      	mov	r2, r0
 80114f0:	4b23      	ldr	r3, [pc, #140]	@ (8011580 <__d2b+0xa8>)
 80114f2:	4824      	ldr	r0, [pc, #144]	@ (8011584 <__d2b+0xac>)
 80114f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80114f8:	f001 f8c0 	bl	801267c <__assert_func>
 80114fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011504:	b10d      	cbz	r5, 801150a <__d2b+0x32>
 8011506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801150a:	9301      	str	r3, [sp, #4]
 801150c:	f1b8 0300 	subs.w	r3, r8, #0
 8011510:	d023      	beq.n	801155a <__d2b+0x82>
 8011512:	4668      	mov	r0, sp
 8011514:	9300      	str	r3, [sp, #0]
 8011516:	f7ff fd14 	bl	8010f42 <__lo0bits>
 801151a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801151e:	b1d0      	cbz	r0, 8011556 <__d2b+0x7e>
 8011520:	f1c0 0320 	rsb	r3, r0, #32
 8011524:	fa02 f303 	lsl.w	r3, r2, r3
 8011528:	430b      	orrs	r3, r1
 801152a:	40c2      	lsrs	r2, r0
 801152c:	6163      	str	r3, [r4, #20]
 801152e:	9201      	str	r2, [sp, #4]
 8011530:	9b01      	ldr	r3, [sp, #4]
 8011532:	61a3      	str	r3, [r4, #24]
 8011534:	2b00      	cmp	r3, #0
 8011536:	bf0c      	ite	eq
 8011538:	2201      	moveq	r2, #1
 801153a:	2202      	movne	r2, #2
 801153c:	6122      	str	r2, [r4, #16]
 801153e:	b1a5      	cbz	r5, 801156a <__d2b+0x92>
 8011540:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011544:	4405      	add	r5, r0
 8011546:	603d      	str	r5, [r7, #0]
 8011548:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801154c:	6030      	str	r0, [r6, #0]
 801154e:	4620      	mov	r0, r4
 8011550:	b003      	add	sp, #12
 8011552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011556:	6161      	str	r1, [r4, #20]
 8011558:	e7ea      	b.n	8011530 <__d2b+0x58>
 801155a:	a801      	add	r0, sp, #4
 801155c:	f7ff fcf1 	bl	8010f42 <__lo0bits>
 8011560:	9b01      	ldr	r3, [sp, #4]
 8011562:	6163      	str	r3, [r4, #20]
 8011564:	3020      	adds	r0, #32
 8011566:	2201      	movs	r2, #1
 8011568:	e7e8      	b.n	801153c <__d2b+0x64>
 801156a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801156e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011572:	6038      	str	r0, [r7, #0]
 8011574:	6918      	ldr	r0, [r3, #16]
 8011576:	f7ff fcc5 	bl	8010f04 <__hi0bits>
 801157a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801157e:	e7e5      	b.n	801154c <__d2b+0x74>
 8011580:	08012b4d 	.word	0x08012b4d
 8011584:	08012bbe 	.word	0x08012bbe

08011588 <__ratio>:
 8011588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	4688      	mov	r8, r1
 801158e:	4669      	mov	r1, sp
 8011590:	4681      	mov	r9, r0
 8011592:	f7ff ff57 	bl	8011444 <__b2d>
 8011596:	a901      	add	r1, sp, #4
 8011598:	4640      	mov	r0, r8
 801159a:	ec55 4b10 	vmov	r4, r5, d0
 801159e:	f7ff ff51 	bl	8011444 <__b2d>
 80115a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80115a6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80115aa:	1ad2      	subs	r2, r2, r3
 80115ac:	e9dd 3100 	ldrd	r3, r1, [sp]
 80115b0:	1a5b      	subs	r3, r3, r1
 80115b2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80115b6:	ec57 6b10 	vmov	r6, r7, d0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	bfd6      	itet	le
 80115be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80115c2:	462a      	movgt	r2, r5
 80115c4:	463a      	movle	r2, r7
 80115c6:	46ab      	mov	fp, r5
 80115c8:	46a2      	mov	sl, r4
 80115ca:	bfce      	itee	gt
 80115cc:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80115d0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80115d4:	ee00 3a90 	vmovle	s1, r3
 80115d8:	ec4b ab17 	vmov	d7, sl, fp
 80115dc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80115e0:	b003      	add	sp, #12
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115e6 <__copybits>:
 80115e6:	3901      	subs	r1, #1
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	1149      	asrs	r1, r1, #5
 80115ec:	6914      	ldr	r4, [r2, #16]
 80115ee:	3101      	adds	r1, #1
 80115f0:	f102 0314 	add.w	r3, r2, #20
 80115f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115fc:	1f05      	subs	r5, r0, #4
 80115fe:	42a3      	cmp	r3, r4
 8011600:	d30c      	bcc.n	801161c <__copybits+0x36>
 8011602:	1aa3      	subs	r3, r4, r2
 8011604:	3b11      	subs	r3, #17
 8011606:	f023 0303 	bic.w	r3, r3, #3
 801160a:	3211      	adds	r2, #17
 801160c:	42a2      	cmp	r2, r4
 801160e:	bf88      	it	hi
 8011610:	2300      	movhi	r3, #0
 8011612:	4418      	add	r0, r3
 8011614:	2300      	movs	r3, #0
 8011616:	4288      	cmp	r0, r1
 8011618:	d305      	bcc.n	8011626 <__copybits+0x40>
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011620:	f845 6f04 	str.w	r6, [r5, #4]!
 8011624:	e7eb      	b.n	80115fe <__copybits+0x18>
 8011626:	f840 3b04 	str.w	r3, [r0], #4
 801162a:	e7f4      	b.n	8011616 <__copybits+0x30>

0801162c <__any_on>:
 801162c:	f100 0214 	add.w	r2, r0, #20
 8011630:	6900      	ldr	r0, [r0, #16]
 8011632:	114b      	asrs	r3, r1, #5
 8011634:	4298      	cmp	r0, r3
 8011636:	b510      	push	{r4, lr}
 8011638:	db11      	blt.n	801165e <__any_on+0x32>
 801163a:	dd0a      	ble.n	8011652 <__any_on+0x26>
 801163c:	f011 011f 	ands.w	r1, r1, #31
 8011640:	d007      	beq.n	8011652 <__any_on+0x26>
 8011642:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011646:	fa24 f001 	lsr.w	r0, r4, r1
 801164a:	fa00 f101 	lsl.w	r1, r0, r1
 801164e:	428c      	cmp	r4, r1
 8011650:	d10b      	bne.n	801166a <__any_on+0x3e>
 8011652:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011656:	4293      	cmp	r3, r2
 8011658:	d803      	bhi.n	8011662 <__any_on+0x36>
 801165a:	2000      	movs	r0, #0
 801165c:	bd10      	pop	{r4, pc}
 801165e:	4603      	mov	r3, r0
 8011660:	e7f7      	b.n	8011652 <__any_on+0x26>
 8011662:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011666:	2900      	cmp	r1, #0
 8011668:	d0f5      	beq.n	8011656 <__any_on+0x2a>
 801166a:	2001      	movs	r0, #1
 801166c:	e7f6      	b.n	801165c <__any_on+0x30>

0801166e <_malloc_usable_size_r>:
 801166e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011672:	1f18      	subs	r0, r3, #4
 8011674:	2b00      	cmp	r3, #0
 8011676:	bfbc      	itt	lt
 8011678:	580b      	ldrlt	r3, [r1, r0]
 801167a:	18c0      	addlt	r0, r0, r3
 801167c:	4770      	bx	lr
	...

08011680 <_strtol_l.isra.0>:
 8011680:	2b24      	cmp	r3, #36	@ 0x24
 8011682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011686:	4686      	mov	lr, r0
 8011688:	4690      	mov	r8, r2
 801168a:	d801      	bhi.n	8011690 <_strtol_l.isra.0+0x10>
 801168c:	2b01      	cmp	r3, #1
 801168e:	d106      	bne.n	801169e <_strtol_l.isra.0+0x1e>
 8011690:	f7fe f97c 	bl	800f98c <__errno>
 8011694:	2316      	movs	r3, #22
 8011696:	6003      	str	r3, [r0, #0]
 8011698:	2000      	movs	r0, #0
 801169a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801169e:	4834      	ldr	r0, [pc, #208]	@ (8011770 <_strtol_l.isra.0+0xf0>)
 80116a0:	460d      	mov	r5, r1
 80116a2:	462a      	mov	r2, r5
 80116a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116a8:	5d06      	ldrb	r6, [r0, r4]
 80116aa:	f016 0608 	ands.w	r6, r6, #8
 80116ae:	d1f8      	bne.n	80116a2 <_strtol_l.isra.0+0x22>
 80116b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80116b2:	d110      	bne.n	80116d6 <_strtol_l.isra.0+0x56>
 80116b4:	782c      	ldrb	r4, [r5, #0]
 80116b6:	2601      	movs	r6, #1
 80116b8:	1c95      	adds	r5, r2, #2
 80116ba:	f033 0210 	bics.w	r2, r3, #16
 80116be:	d115      	bne.n	80116ec <_strtol_l.isra.0+0x6c>
 80116c0:	2c30      	cmp	r4, #48	@ 0x30
 80116c2:	d10d      	bne.n	80116e0 <_strtol_l.isra.0+0x60>
 80116c4:	782a      	ldrb	r2, [r5, #0]
 80116c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80116ca:	2a58      	cmp	r2, #88	@ 0x58
 80116cc:	d108      	bne.n	80116e0 <_strtol_l.isra.0+0x60>
 80116ce:	786c      	ldrb	r4, [r5, #1]
 80116d0:	3502      	adds	r5, #2
 80116d2:	2310      	movs	r3, #16
 80116d4:	e00a      	b.n	80116ec <_strtol_l.isra.0+0x6c>
 80116d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80116d8:	bf04      	itt	eq
 80116da:	782c      	ldrbeq	r4, [r5, #0]
 80116dc:	1c95      	addeq	r5, r2, #2
 80116de:	e7ec      	b.n	80116ba <_strtol_l.isra.0+0x3a>
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1f6      	bne.n	80116d2 <_strtol_l.isra.0+0x52>
 80116e4:	2c30      	cmp	r4, #48	@ 0x30
 80116e6:	bf14      	ite	ne
 80116e8:	230a      	movne	r3, #10
 80116ea:	2308      	moveq	r3, #8
 80116ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80116f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116f4:	2200      	movs	r2, #0
 80116f6:	fbbc f9f3 	udiv	r9, ip, r3
 80116fa:	4610      	mov	r0, r2
 80116fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8011700:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011704:	2f09      	cmp	r7, #9
 8011706:	d80f      	bhi.n	8011728 <_strtol_l.isra.0+0xa8>
 8011708:	463c      	mov	r4, r7
 801170a:	42a3      	cmp	r3, r4
 801170c:	dd1b      	ble.n	8011746 <_strtol_l.isra.0+0xc6>
 801170e:	1c57      	adds	r7, r2, #1
 8011710:	d007      	beq.n	8011722 <_strtol_l.isra.0+0xa2>
 8011712:	4581      	cmp	r9, r0
 8011714:	d314      	bcc.n	8011740 <_strtol_l.isra.0+0xc0>
 8011716:	d101      	bne.n	801171c <_strtol_l.isra.0+0x9c>
 8011718:	45a2      	cmp	sl, r4
 801171a:	db11      	blt.n	8011740 <_strtol_l.isra.0+0xc0>
 801171c:	fb00 4003 	mla	r0, r0, r3, r4
 8011720:	2201      	movs	r2, #1
 8011722:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011726:	e7eb      	b.n	8011700 <_strtol_l.isra.0+0x80>
 8011728:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801172c:	2f19      	cmp	r7, #25
 801172e:	d801      	bhi.n	8011734 <_strtol_l.isra.0+0xb4>
 8011730:	3c37      	subs	r4, #55	@ 0x37
 8011732:	e7ea      	b.n	801170a <_strtol_l.isra.0+0x8a>
 8011734:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011738:	2f19      	cmp	r7, #25
 801173a:	d804      	bhi.n	8011746 <_strtol_l.isra.0+0xc6>
 801173c:	3c57      	subs	r4, #87	@ 0x57
 801173e:	e7e4      	b.n	801170a <_strtol_l.isra.0+0x8a>
 8011740:	f04f 32ff 	mov.w	r2, #4294967295
 8011744:	e7ed      	b.n	8011722 <_strtol_l.isra.0+0xa2>
 8011746:	1c53      	adds	r3, r2, #1
 8011748:	d108      	bne.n	801175c <_strtol_l.isra.0+0xdc>
 801174a:	2322      	movs	r3, #34	@ 0x22
 801174c:	f8ce 3000 	str.w	r3, [lr]
 8011750:	4660      	mov	r0, ip
 8011752:	f1b8 0f00 	cmp.w	r8, #0
 8011756:	d0a0      	beq.n	801169a <_strtol_l.isra.0+0x1a>
 8011758:	1e69      	subs	r1, r5, #1
 801175a:	e006      	b.n	801176a <_strtol_l.isra.0+0xea>
 801175c:	b106      	cbz	r6, 8011760 <_strtol_l.isra.0+0xe0>
 801175e:	4240      	negs	r0, r0
 8011760:	f1b8 0f00 	cmp.w	r8, #0
 8011764:	d099      	beq.n	801169a <_strtol_l.isra.0+0x1a>
 8011766:	2a00      	cmp	r2, #0
 8011768:	d1f6      	bne.n	8011758 <_strtol_l.isra.0+0xd8>
 801176a:	f8c8 1000 	str.w	r1, [r8]
 801176e:	e794      	b.n	801169a <_strtol_l.isra.0+0x1a>
 8011770:	08012cd1 	.word	0x08012cd1

08011774 <_strtol_r>:
 8011774:	f7ff bf84 	b.w	8011680 <_strtol_l.isra.0>

08011778 <__ascii_wctomb>:
 8011778:	4603      	mov	r3, r0
 801177a:	4608      	mov	r0, r1
 801177c:	b141      	cbz	r1, 8011790 <__ascii_wctomb+0x18>
 801177e:	2aff      	cmp	r2, #255	@ 0xff
 8011780:	d904      	bls.n	801178c <__ascii_wctomb+0x14>
 8011782:	228a      	movs	r2, #138	@ 0x8a
 8011784:	601a      	str	r2, [r3, #0]
 8011786:	f04f 30ff 	mov.w	r0, #4294967295
 801178a:	4770      	bx	lr
 801178c:	700a      	strb	r2, [r1, #0]
 801178e:	2001      	movs	r0, #1
 8011790:	4770      	bx	lr

08011792 <__ssputs_r>:
 8011792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011796:	688e      	ldr	r6, [r1, #8]
 8011798:	461f      	mov	r7, r3
 801179a:	42be      	cmp	r6, r7
 801179c:	680b      	ldr	r3, [r1, #0]
 801179e:	4682      	mov	sl, r0
 80117a0:	460c      	mov	r4, r1
 80117a2:	4690      	mov	r8, r2
 80117a4:	d82d      	bhi.n	8011802 <__ssputs_r+0x70>
 80117a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80117ae:	d026      	beq.n	80117fe <__ssputs_r+0x6c>
 80117b0:	6965      	ldr	r5, [r4, #20]
 80117b2:	6909      	ldr	r1, [r1, #16]
 80117b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117b8:	eba3 0901 	sub.w	r9, r3, r1
 80117bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80117c0:	1c7b      	adds	r3, r7, #1
 80117c2:	444b      	add	r3, r9
 80117c4:	106d      	asrs	r5, r5, #1
 80117c6:	429d      	cmp	r5, r3
 80117c8:	bf38      	it	cc
 80117ca:	461d      	movcc	r5, r3
 80117cc:	0553      	lsls	r3, r2, #21
 80117ce:	d527      	bpl.n	8011820 <__ssputs_r+0x8e>
 80117d0:	4629      	mov	r1, r5
 80117d2:	f7fc f953 	bl	800da7c <_malloc_r>
 80117d6:	4606      	mov	r6, r0
 80117d8:	b360      	cbz	r0, 8011834 <__ssputs_r+0xa2>
 80117da:	6921      	ldr	r1, [r4, #16]
 80117dc:	464a      	mov	r2, r9
 80117de:	f7fe f902 	bl	800f9e6 <memcpy>
 80117e2:	89a3      	ldrh	r3, [r4, #12]
 80117e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80117e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117ec:	81a3      	strh	r3, [r4, #12]
 80117ee:	6126      	str	r6, [r4, #16]
 80117f0:	6165      	str	r5, [r4, #20]
 80117f2:	444e      	add	r6, r9
 80117f4:	eba5 0509 	sub.w	r5, r5, r9
 80117f8:	6026      	str	r6, [r4, #0]
 80117fa:	60a5      	str	r5, [r4, #8]
 80117fc:	463e      	mov	r6, r7
 80117fe:	42be      	cmp	r6, r7
 8011800:	d900      	bls.n	8011804 <__ssputs_r+0x72>
 8011802:	463e      	mov	r6, r7
 8011804:	6820      	ldr	r0, [r4, #0]
 8011806:	4632      	mov	r2, r6
 8011808:	4641      	mov	r1, r8
 801180a:	f000 fefa 	bl	8012602 <memmove>
 801180e:	68a3      	ldr	r3, [r4, #8]
 8011810:	1b9b      	subs	r3, r3, r6
 8011812:	60a3      	str	r3, [r4, #8]
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	4433      	add	r3, r6
 8011818:	6023      	str	r3, [r4, #0]
 801181a:	2000      	movs	r0, #0
 801181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011820:	462a      	mov	r2, r5
 8011822:	f7fc f9bf 	bl	800dba4 <_realloc_r>
 8011826:	4606      	mov	r6, r0
 8011828:	2800      	cmp	r0, #0
 801182a:	d1e0      	bne.n	80117ee <__ssputs_r+0x5c>
 801182c:	6921      	ldr	r1, [r4, #16]
 801182e:	4650      	mov	r0, sl
 8011830:	f7fe fee0 	bl	80105f4 <_free_r>
 8011834:	230c      	movs	r3, #12
 8011836:	f8ca 3000 	str.w	r3, [sl]
 801183a:	89a3      	ldrh	r3, [r4, #12]
 801183c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011840:	81a3      	strh	r3, [r4, #12]
 8011842:	f04f 30ff 	mov.w	r0, #4294967295
 8011846:	e7e9      	b.n	801181c <__ssputs_r+0x8a>

08011848 <_svfiprintf_r>:
 8011848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801184c:	4698      	mov	r8, r3
 801184e:	898b      	ldrh	r3, [r1, #12]
 8011850:	061b      	lsls	r3, r3, #24
 8011852:	b09d      	sub	sp, #116	@ 0x74
 8011854:	4607      	mov	r7, r0
 8011856:	460d      	mov	r5, r1
 8011858:	4614      	mov	r4, r2
 801185a:	d510      	bpl.n	801187e <_svfiprintf_r+0x36>
 801185c:	690b      	ldr	r3, [r1, #16]
 801185e:	b973      	cbnz	r3, 801187e <_svfiprintf_r+0x36>
 8011860:	2140      	movs	r1, #64	@ 0x40
 8011862:	f7fc f90b 	bl	800da7c <_malloc_r>
 8011866:	6028      	str	r0, [r5, #0]
 8011868:	6128      	str	r0, [r5, #16]
 801186a:	b930      	cbnz	r0, 801187a <_svfiprintf_r+0x32>
 801186c:	230c      	movs	r3, #12
 801186e:	603b      	str	r3, [r7, #0]
 8011870:	f04f 30ff 	mov.w	r0, #4294967295
 8011874:	b01d      	add	sp, #116	@ 0x74
 8011876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187a:	2340      	movs	r3, #64	@ 0x40
 801187c:	616b      	str	r3, [r5, #20]
 801187e:	2300      	movs	r3, #0
 8011880:	9309      	str	r3, [sp, #36]	@ 0x24
 8011882:	2320      	movs	r3, #32
 8011884:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011888:	f8cd 800c 	str.w	r8, [sp, #12]
 801188c:	2330      	movs	r3, #48	@ 0x30
 801188e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011a2c <_svfiprintf_r+0x1e4>
 8011892:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011896:	f04f 0901 	mov.w	r9, #1
 801189a:	4623      	mov	r3, r4
 801189c:	469a      	mov	sl, r3
 801189e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118a2:	b10a      	cbz	r2, 80118a8 <_svfiprintf_r+0x60>
 80118a4:	2a25      	cmp	r2, #37	@ 0x25
 80118a6:	d1f9      	bne.n	801189c <_svfiprintf_r+0x54>
 80118a8:	ebba 0b04 	subs.w	fp, sl, r4
 80118ac:	d00b      	beq.n	80118c6 <_svfiprintf_r+0x7e>
 80118ae:	465b      	mov	r3, fp
 80118b0:	4622      	mov	r2, r4
 80118b2:	4629      	mov	r1, r5
 80118b4:	4638      	mov	r0, r7
 80118b6:	f7ff ff6c 	bl	8011792 <__ssputs_r>
 80118ba:	3001      	adds	r0, #1
 80118bc:	f000 80a7 	beq.w	8011a0e <_svfiprintf_r+0x1c6>
 80118c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118c2:	445a      	add	r2, fp
 80118c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80118c6:	f89a 3000 	ldrb.w	r3, [sl]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f000 809f 	beq.w	8011a0e <_svfiprintf_r+0x1c6>
 80118d0:	2300      	movs	r3, #0
 80118d2:	f04f 32ff 	mov.w	r2, #4294967295
 80118d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118da:	f10a 0a01 	add.w	sl, sl, #1
 80118de:	9304      	str	r3, [sp, #16]
 80118e0:	9307      	str	r3, [sp, #28]
 80118e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80118e8:	4654      	mov	r4, sl
 80118ea:	2205      	movs	r2, #5
 80118ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118f0:	484e      	ldr	r0, [pc, #312]	@ (8011a2c <_svfiprintf_r+0x1e4>)
 80118f2:	f7ee fcf5 	bl	80002e0 <memchr>
 80118f6:	9a04      	ldr	r2, [sp, #16]
 80118f8:	b9d8      	cbnz	r0, 8011932 <_svfiprintf_r+0xea>
 80118fa:	06d0      	lsls	r0, r2, #27
 80118fc:	bf44      	itt	mi
 80118fe:	2320      	movmi	r3, #32
 8011900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011904:	0711      	lsls	r1, r2, #28
 8011906:	bf44      	itt	mi
 8011908:	232b      	movmi	r3, #43	@ 0x2b
 801190a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801190e:	f89a 3000 	ldrb.w	r3, [sl]
 8011912:	2b2a      	cmp	r3, #42	@ 0x2a
 8011914:	d015      	beq.n	8011942 <_svfiprintf_r+0xfa>
 8011916:	9a07      	ldr	r2, [sp, #28]
 8011918:	4654      	mov	r4, sl
 801191a:	2000      	movs	r0, #0
 801191c:	f04f 0c0a 	mov.w	ip, #10
 8011920:	4621      	mov	r1, r4
 8011922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011926:	3b30      	subs	r3, #48	@ 0x30
 8011928:	2b09      	cmp	r3, #9
 801192a:	d94b      	bls.n	80119c4 <_svfiprintf_r+0x17c>
 801192c:	b1b0      	cbz	r0, 801195c <_svfiprintf_r+0x114>
 801192e:	9207      	str	r2, [sp, #28]
 8011930:	e014      	b.n	801195c <_svfiprintf_r+0x114>
 8011932:	eba0 0308 	sub.w	r3, r0, r8
 8011936:	fa09 f303 	lsl.w	r3, r9, r3
 801193a:	4313      	orrs	r3, r2
 801193c:	9304      	str	r3, [sp, #16]
 801193e:	46a2      	mov	sl, r4
 8011940:	e7d2      	b.n	80118e8 <_svfiprintf_r+0xa0>
 8011942:	9b03      	ldr	r3, [sp, #12]
 8011944:	1d19      	adds	r1, r3, #4
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	9103      	str	r1, [sp, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	bfbb      	ittet	lt
 801194e:	425b      	neglt	r3, r3
 8011950:	f042 0202 	orrlt.w	r2, r2, #2
 8011954:	9307      	strge	r3, [sp, #28]
 8011956:	9307      	strlt	r3, [sp, #28]
 8011958:	bfb8      	it	lt
 801195a:	9204      	strlt	r2, [sp, #16]
 801195c:	7823      	ldrb	r3, [r4, #0]
 801195e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011960:	d10a      	bne.n	8011978 <_svfiprintf_r+0x130>
 8011962:	7863      	ldrb	r3, [r4, #1]
 8011964:	2b2a      	cmp	r3, #42	@ 0x2a
 8011966:	d132      	bne.n	80119ce <_svfiprintf_r+0x186>
 8011968:	9b03      	ldr	r3, [sp, #12]
 801196a:	1d1a      	adds	r2, r3, #4
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	9203      	str	r2, [sp, #12]
 8011970:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011974:	3402      	adds	r4, #2
 8011976:	9305      	str	r3, [sp, #20]
 8011978:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a3c <_svfiprintf_r+0x1f4>
 801197c:	7821      	ldrb	r1, [r4, #0]
 801197e:	2203      	movs	r2, #3
 8011980:	4650      	mov	r0, sl
 8011982:	f7ee fcad 	bl	80002e0 <memchr>
 8011986:	b138      	cbz	r0, 8011998 <_svfiprintf_r+0x150>
 8011988:	9b04      	ldr	r3, [sp, #16]
 801198a:	eba0 000a 	sub.w	r0, r0, sl
 801198e:	2240      	movs	r2, #64	@ 0x40
 8011990:	4082      	lsls	r2, r0
 8011992:	4313      	orrs	r3, r2
 8011994:	3401      	adds	r4, #1
 8011996:	9304      	str	r3, [sp, #16]
 8011998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801199c:	4824      	ldr	r0, [pc, #144]	@ (8011a30 <_svfiprintf_r+0x1e8>)
 801199e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80119a2:	2206      	movs	r2, #6
 80119a4:	f7ee fc9c 	bl	80002e0 <memchr>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d036      	beq.n	8011a1a <_svfiprintf_r+0x1d2>
 80119ac:	4b21      	ldr	r3, [pc, #132]	@ (8011a34 <_svfiprintf_r+0x1ec>)
 80119ae:	bb1b      	cbnz	r3, 80119f8 <_svfiprintf_r+0x1b0>
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	3307      	adds	r3, #7
 80119b4:	f023 0307 	bic.w	r3, r3, #7
 80119b8:	3308      	adds	r3, #8
 80119ba:	9303      	str	r3, [sp, #12]
 80119bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119be:	4433      	add	r3, r6
 80119c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80119c2:	e76a      	b.n	801189a <_svfiprintf_r+0x52>
 80119c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80119c8:	460c      	mov	r4, r1
 80119ca:	2001      	movs	r0, #1
 80119cc:	e7a8      	b.n	8011920 <_svfiprintf_r+0xd8>
 80119ce:	2300      	movs	r3, #0
 80119d0:	3401      	adds	r4, #1
 80119d2:	9305      	str	r3, [sp, #20]
 80119d4:	4619      	mov	r1, r3
 80119d6:	f04f 0c0a 	mov.w	ip, #10
 80119da:	4620      	mov	r0, r4
 80119dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119e0:	3a30      	subs	r2, #48	@ 0x30
 80119e2:	2a09      	cmp	r2, #9
 80119e4:	d903      	bls.n	80119ee <_svfiprintf_r+0x1a6>
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d0c6      	beq.n	8011978 <_svfiprintf_r+0x130>
 80119ea:	9105      	str	r1, [sp, #20]
 80119ec:	e7c4      	b.n	8011978 <_svfiprintf_r+0x130>
 80119ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80119f2:	4604      	mov	r4, r0
 80119f4:	2301      	movs	r3, #1
 80119f6:	e7f0      	b.n	80119da <_svfiprintf_r+0x192>
 80119f8:	ab03      	add	r3, sp, #12
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	462a      	mov	r2, r5
 80119fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011a38 <_svfiprintf_r+0x1f0>)
 8011a00:	a904      	add	r1, sp, #16
 8011a02:	4638      	mov	r0, r7
 8011a04:	f7fc ff48 	bl	800e898 <_printf_float>
 8011a08:	1c42      	adds	r2, r0, #1
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	d1d6      	bne.n	80119bc <_svfiprintf_r+0x174>
 8011a0e:	89ab      	ldrh	r3, [r5, #12]
 8011a10:	065b      	lsls	r3, r3, #25
 8011a12:	f53f af2d 	bmi.w	8011870 <_svfiprintf_r+0x28>
 8011a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a18:	e72c      	b.n	8011874 <_svfiprintf_r+0x2c>
 8011a1a:	ab03      	add	r3, sp, #12
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	462a      	mov	r2, r5
 8011a20:	4b05      	ldr	r3, [pc, #20]	@ (8011a38 <_svfiprintf_r+0x1f0>)
 8011a22:	a904      	add	r1, sp, #16
 8011a24:	4638      	mov	r0, r7
 8011a26:	f7fd f9bf 	bl	800eda8 <_printf_i>
 8011a2a:	e7ed      	b.n	8011a08 <_svfiprintf_r+0x1c0>
 8011a2c:	08012c17 	.word	0x08012c17
 8011a30:	08012c21 	.word	0x08012c21
 8011a34:	0800e899 	.word	0x0800e899
 8011a38:	08011793 	.word	0x08011793
 8011a3c:	08012c1d 	.word	0x08012c1d

08011a40 <_sungetc_r>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	1c4b      	adds	r3, r1, #1
 8011a44:	4614      	mov	r4, r2
 8011a46:	d103      	bne.n	8011a50 <_sungetc_r+0x10>
 8011a48:	f04f 35ff 	mov.w	r5, #4294967295
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	bd38      	pop	{r3, r4, r5, pc}
 8011a50:	8993      	ldrh	r3, [r2, #12]
 8011a52:	f023 0320 	bic.w	r3, r3, #32
 8011a56:	8193      	strh	r3, [r2, #12]
 8011a58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a5a:	6852      	ldr	r2, [r2, #4]
 8011a5c:	b2cd      	uxtb	r5, r1
 8011a5e:	b18b      	cbz	r3, 8011a84 <_sungetc_r+0x44>
 8011a60:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011a62:	4293      	cmp	r3, r2
 8011a64:	dd08      	ble.n	8011a78 <_sungetc_r+0x38>
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	1e5a      	subs	r2, r3, #1
 8011a6a:	6022      	str	r2, [r4, #0]
 8011a6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a70:	6863      	ldr	r3, [r4, #4]
 8011a72:	3301      	adds	r3, #1
 8011a74:	6063      	str	r3, [r4, #4]
 8011a76:	e7e9      	b.n	8011a4c <_sungetc_r+0xc>
 8011a78:	4621      	mov	r1, r4
 8011a7a:	f000 fd88 	bl	801258e <__submore>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d0f1      	beq.n	8011a66 <_sungetc_r+0x26>
 8011a82:	e7e1      	b.n	8011a48 <_sungetc_r+0x8>
 8011a84:	6921      	ldr	r1, [r4, #16]
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	b151      	cbz	r1, 8011aa0 <_sungetc_r+0x60>
 8011a8a:	4299      	cmp	r1, r3
 8011a8c:	d208      	bcs.n	8011aa0 <_sungetc_r+0x60>
 8011a8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011a92:	42a9      	cmp	r1, r5
 8011a94:	d104      	bne.n	8011aa0 <_sungetc_r+0x60>
 8011a96:	3b01      	subs	r3, #1
 8011a98:	3201      	adds	r2, #1
 8011a9a:	6023      	str	r3, [r4, #0]
 8011a9c:	6062      	str	r2, [r4, #4]
 8011a9e:	e7d5      	b.n	8011a4c <_sungetc_r+0xc>
 8011aa0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011aaa:	2303      	movs	r3, #3
 8011aac:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011aae:	4623      	mov	r3, r4
 8011ab0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011ab4:	6023      	str	r3, [r4, #0]
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e7dc      	b.n	8011a74 <_sungetc_r+0x34>

08011aba <__ssrefill_r>:
 8011aba:	b510      	push	{r4, lr}
 8011abc:	460c      	mov	r4, r1
 8011abe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011ac0:	b169      	cbz	r1, 8011ade <__ssrefill_r+0x24>
 8011ac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ac6:	4299      	cmp	r1, r3
 8011ac8:	d001      	beq.n	8011ace <__ssrefill_r+0x14>
 8011aca:	f7fe fd93 	bl	80105f4 <_free_r>
 8011ace:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ad0:	6063      	str	r3, [r4, #4]
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	6360      	str	r0, [r4, #52]	@ 0x34
 8011ad6:	b113      	cbz	r3, 8011ade <__ssrefill_r+0x24>
 8011ad8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011ada:	6023      	str	r3, [r4, #0]
 8011adc:	bd10      	pop	{r4, pc}
 8011ade:	6923      	ldr	r3, [r4, #16]
 8011ae0:	6023      	str	r3, [r4, #0]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	6063      	str	r3, [r4, #4]
 8011ae6:	89a3      	ldrh	r3, [r4, #12]
 8011ae8:	f043 0320 	orr.w	r3, r3, #32
 8011aec:	81a3      	strh	r3, [r4, #12]
 8011aee:	f04f 30ff 	mov.w	r0, #4294967295
 8011af2:	e7f3      	b.n	8011adc <__ssrefill_r+0x22>

08011af4 <__ssvfiscanf_r>:
 8011af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af8:	460c      	mov	r4, r1
 8011afa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011afe:	2100      	movs	r1, #0
 8011b00:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011b04:	49a6      	ldr	r1, [pc, #664]	@ (8011da0 <__ssvfiscanf_r+0x2ac>)
 8011b06:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011b08:	f10d 0804 	add.w	r8, sp, #4
 8011b0c:	49a5      	ldr	r1, [pc, #660]	@ (8011da4 <__ssvfiscanf_r+0x2b0>)
 8011b0e:	4fa6      	ldr	r7, [pc, #664]	@ (8011da8 <__ssvfiscanf_r+0x2b4>)
 8011b10:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011b14:	4606      	mov	r6, r0
 8011b16:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011b18:	9300      	str	r3, [sp, #0]
 8011b1a:	f892 9000 	ldrb.w	r9, [r2]
 8011b1e:	f1b9 0f00 	cmp.w	r9, #0
 8011b22:	f000 8158 	beq.w	8011dd6 <__ssvfiscanf_r+0x2e2>
 8011b26:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011b2a:	f013 0308 	ands.w	r3, r3, #8
 8011b2e:	f102 0501 	add.w	r5, r2, #1
 8011b32:	d019      	beq.n	8011b68 <__ssvfiscanf_r+0x74>
 8011b34:	6863      	ldr	r3, [r4, #4]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	dd0f      	ble.n	8011b5a <__ssvfiscanf_r+0x66>
 8011b3a:	6823      	ldr	r3, [r4, #0]
 8011b3c:	781a      	ldrb	r2, [r3, #0]
 8011b3e:	5cba      	ldrb	r2, [r7, r2]
 8011b40:	0712      	lsls	r2, r2, #28
 8011b42:	d401      	bmi.n	8011b48 <__ssvfiscanf_r+0x54>
 8011b44:	462a      	mov	r2, r5
 8011b46:	e7e8      	b.n	8011b1a <__ssvfiscanf_r+0x26>
 8011b48:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011b4a:	3201      	adds	r2, #1
 8011b4c:	9245      	str	r2, [sp, #276]	@ 0x114
 8011b4e:	6862      	ldr	r2, [r4, #4]
 8011b50:	3301      	adds	r3, #1
 8011b52:	3a01      	subs	r2, #1
 8011b54:	6062      	str	r2, [r4, #4]
 8011b56:	6023      	str	r3, [r4, #0]
 8011b58:	e7ec      	b.n	8011b34 <__ssvfiscanf_r+0x40>
 8011b5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	4630      	mov	r0, r6
 8011b60:	4798      	blx	r3
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d0e9      	beq.n	8011b3a <__ssvfiscanf_r+0x46>
 8011b66:	e7ed      	b.n	8011b44 <__ssvfiscanf_r+0x50>
 8011b68:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011b6c:	f040 8085 	bne.w	8011c7a <__ssvfiscanf_r+0x186>
 8011b70:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b72:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011b74:	7853      	ldrb	r3, [r2, #1]
 8011b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b78:	bf02      	ittt	eq
 8011b7a:	2310      	moveq	r3, #16
 8011b7c:	1c95      	addeq	r5, r2, #2
 8011b7e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011b80:	220a      	movs	r2, #10
 8011b82:	46aa      	mov	sl, r5
 8011b84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011b88:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011b8c:	2b09      	cmp	r3, #9
 8011b8e:	d91e      	bls.n	8011bce <__ssvfiscanf_r+0xda>
 8011b90:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011dac <__ssvfiscanf_r+0x2b8>
 8011b94:	2203      	movs	r2, #3
 8011b96:	4658      	mov	r0, fp
 8011b98:	f7ee fba2 	bl	80002e0 <memchr>
 8011b9c:	b138      	cbz	r0, 8011bae <__ssvfiscanf_r+0xba>
 8011b9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011ba0:	eba0 000b 	sub.w	r0, r0, fp
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	4083      	lsls	r3, r0
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	9341      	str	r3, [sp, #260]	@ 0x104
 8011bac:	4655      	mov	r5, sl
 8011bae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011bb2:	2b78      	cmp	r3, #120	@ 0x78
 8011bb4:	d806      	bhi.n	8011bc4 <__ssvfiscanf_r+0xd0>
 8011bb6:	2b57      	cmp	r3, #87	@ 0x57
 8011bb8:	d810      	bhi.n	8011bdc <__ssvfiscanf_r+0xe8>
 8011bba:	2b25      	cmp	r3, #37	@ 0x25
 8011bbc:	d05d      	beq.n	8011c7a <__ssvfiscanf_r+0x186>
 8011bbe:	d857      	bhi.n	8011c70 <__ssvfiscanf_r+0x17c>
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d075      	beq.n	8011cb0 <__ssvfiscanf_r+0x1bc>
 8011bc4:	2303      	movs	r3, #3
 8011bc6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011bc8:	230a      	movs	r3, #10
 8011bca:	9342      	str	r3, [sp, #264]	@ 0x108
 8011bcc:	e088      	b.n	8011ce0 <__ssvfiscanf_r+0x1ec>
 8011bce:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011bd0:	fb02 1103 	mla	r1, r2, r3, r1
 8011bd4:	3930      	subs	r1, #48	@ 0x30
 8011bd6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011bd8:	4655      	mov	r5, sl
 8011bda:	e7d2      	b.n	8011b82 <__ssvfiscanf_r+0x8e>
 8011bdc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011be0:	2a20      	cmp	r2, #32
 8011be2:	d8ef      	bhi.n	8011bc4 <__ssvfiscanf_r+0xd0>
 8011be4:	a101      	add	r1, pc, #4	@ (adr r1, 8011bec <__ssvfiscanf_r+0xf8>)
 8011be6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011bea:	bf00      	nop
 8011bec:	08011cbf 	.word	0x08011cbf
 8011bf0:	08011bc5 	.word	0x08011bc5
 8011bf4:	08011bc5 	.word	0x08011bc5
 8011bf8:	08011d19 	.word	0x08011d19
 8011bfc:	08011bc5 	.word	0x08011bc5
 8011c00:	08011bc5 	.word	0x08011bc5
 8011c04:	08011bc5 	.word	0x08011bc5
 8011c08:	08011bc5 	.word	0x08011bc5
 8011c0c:	08011bc5 	.word	0x08011bc5
 8011c10:	08011bc5 	.word	0x08011bc5
 8011c14:	08011bc5 	.word	0x08011bc5
 8011c18:	08011d2f 	.word	0x08011d2f
 8011c1c:	08011d15 	.word	0x08011d15
 8011c20:	08011c77 	.word	0x08011c77
 8011c24:	08011c77 	.word	0x08011c77
 8011c28:	08011c77 	.word	0x08011c77
 8011c2c:	08011bc5 	.word	0x08011bc5
 8011c30:	08011cd1 	.word	0x08011cd1
 8011c34:	08011bc5 	.word	0x08011bc5
 8011c38:	08011bc5 	.word	0x08011bc5
 8011c3c:	08011bc5 	.word	0x08011bc5
 8011c40:	08011bc5 	.word	0x08011bc5
 8011c44:	08011d3f 	.word	0x08011d3f
 8011c48:	08011cd9 	.word	0x08011cd9
 8011c4c:	08011cb7 	.word	0x08011cb7
 8011c50:	08011bc5 	.word	0x08011bc5
 8011c54:	08011bc5 	.word	0x08011bc5
 8011c58:	08011d3b 	.word	0x08011d3b
 8011c5c:	08011bc5 	.word	0x08011bc5
 8011c60:	08011d15 	.word	0x08011d15
 8011c64:	08011bc5 	.word	0x08011bc5
 8011c68:	08011bc5 	.word	0x08011bc5
 8011c6c:	08011cbf 	.word	0x08011cbf
 8011c70:	3b45      	subs	r3, #69	@ 0x45
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	d8a6      	bhi.n	8011bc4 <__ssvfiscanf_r+0xd0>
 8011c76:	2305      	movs	r3, #5
 8011c78:	e031      	b.n	8011cde <__ssvfiscanf_r+0x1ea>
 8011c7a:	6863      	ldr	r3, [r4, #4]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dd0d      	ble.n	8011c9c <__ssvfiscanf_r+0x1a8>
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	781a      	ldrb	r2, [r3, #0]
 8011c84:	454a      	cmp	r2, r9
 8011c86:	f040 80a6 	bne.w	8011dd6 <__ssvfiscanf_r+0x2e2>
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	6862      	ldr	r2, [r4, #4]
 8011c8e:	6023      	str	r3, [r4, #0]
 8011c90:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011c92:	3a01      	subs	r2, #1
 8011c94:	3301      	adds	r3, #1
 8011c96:	6062      	str	r2, [r4, #4]
 8011c98:	9345      	str	r3, [sp, #276]	@ 0x114
 8011c9a:	e753      	b.n	8011b44 <__ssvfiscanf_r+0x50>
 8011c9c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	4798      	blx	r3
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d0eb      	beq.n	8011c80 <__ssvfiscanf_r+0x18c>
 8011ca8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011caa:	2800      	cmp	r0, #0
 8011cac:	f040 808b 	bne.w	8011dc6 <__ssvfiscanf_r+0x2d2>
 8011cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb4:	e08b      	b.n	8011dce <__ssvfiscanf_r+0x2da>
 8011cb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011cb8:	f042 0220 	orr.w	r2, r2, #32
 8011cbc:	9241      	str	r2, [sp, #260]	@ 0x104
 8011cbe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011cc4:	9241      	str	r2, [sp, #260]	@ 0x104
 8011cc6:	2210      	movs	r2, #16
 8011cc8:	2b6e      	cmp	r3, #110	@ 0x6e
 8011cca:	9242      	str	r2, [sp, #264]	@ 0x108
 8011ccc:	d902      	bls.n	8011cd4 <__ssvfiscanf_r+0x1e0>
 8011cce:	e005      	b.n	8011cdc <__ssvfiscanf_r+0x1e8>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	9342      	str	r3, [sp, #264]	@ 0x108
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	e002      	b.n	8011cde <__ssvfiscanf_r+0x1ea>
 8011cd8:	2308      	movs	r3, #8
 8011cda:	9342      	str	r3, [sp, #264]	@ 0x108
 8011cdc:	2304      	movs	r3, #4
 8011cde:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011ce0:	6863      	ldr	r3, [r4, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	dd39      	ble.n	8011d5a <__ssvfiscanf_r+0x266>
 8011ce6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ce8:	0659      	lsls	r1, r3, #25
 8011cea:	d404      	bmi.n	8011cf6 <__ssvfiscanf_r+0x202>
 8011cec:	6823      	ldr	r3, [r4, #0]
 8011cee:	781a      	ldrb	r2, [r3, #0]
 8011cf0:	5cba      	ldrb	r2, [r7, r2]
 8011cf2:	0712      	lsls	r2, r2, #28
 8011cf4:	d438      	bmi.n	8011d68 <__ssvfiscanf_r+0x274>
 8011cf6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	dc47      	bgt.n	8011d8c <__ssvfiscanf_r+0x298>
 8011cfc:	466b      	mov	r3, sp
 8011cfe:	4622      	mov	r2, r4
 8011d00:	a941      	add	r1, sp, #260	@ 0x104
 8011d02:	4630      	mov	r0, r6
 8011d04:	f000 f9ae 	bl	8012064 <_scanf_chars>
 8011d08:	2801      	cmp	r0, #1
 8011d0a:	d064      	beq.n	8011dd6 <__ssvfiscanf_r+0x2e2>
 8011d0c:	2802      	cmp	r0, #2
 8011d0e:	f47f af19 	bne.w	8011b44 <__ssvfiscanf_r+0x50>
 8011d12:	e7c9      	b.n	8011ca8 <__ssvfiscanf_r+0x1b4>
 8011d14:	220a      	movs	r2, #10
 8011d16:	e7d7      	b.n	8011cc8 <__ssvfiscanf_r+0x1d4>
 8011d18:	4629      	mov	r1, r5
 8011d1a:	4640      	mov	r0, r8
 8011d1c:	f000 fbfe 	bl	801251c <__sccl>
 8011d20:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d26:	9341      	str	r3, [sp, #260]	@ 0x104
 8011d28:	4605      	mov	r5, r0
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e7d7      	b.n	8011cde <__ssvfiscanf_r+0x1ea>
 8011d2e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d34:	9341      	str	r3, [sp, #260]	@ 0x104
 8011d36:	2300      	movs	r3, #0
 8011d38:	e7d1      	b.n	8011cde <__ssvfiscanf_r+0x1ea>
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	e7cf      	b.n	8011cde <__ssvfiscanf_r+0x1ea>
 8011d3e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011d40:	06c3      	lsls	r3, r0, #27
 8011d42:	f53f aeff 	bmi.w	8011b44 <__ssvfiscanf_r+0x50>
 8011d46:	9b00      	ldr	r3, [sp, #0]
 8011d48:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011d4a:	1d19      	adds	r1, r3, #4
 8011d4c:	9100      	str	r1, [sp, #0]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	07c0      	lsls	r0, r0, #31
 8011d52:	bf4c      	ite	mi
 8011d54:	801a      	strhmi	r2, [r3, #0]
 8011d56:	601a      	strpl	r2, [r3, #0]
 8011d58:	e6f4      	b.n	8011b44 <__ssvfiscanf_r+0x50>
 8011d5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	4630      	mov	r0, r6
 8011d60:	4798      	blx	r3
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d0bf      	beq.n	8011ce6 <__ssvfiscanf_r+0x1f2>
 8011d66:	e79f      	b.n	8011ca8 <__ssvfiscanf_r+0x1b4>
 8011d68:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011d6a:	3201      	adds	r2, #1
 8011d6c:	9245      	str	r2, [sp, #276]	@ 0x114
 8011d6e:	6862      	ldr	r2, [r4, #4]
 8011d70:	3a01      	subs	r2, #1
 8011d72:	2a00      	cmp	r2, #0
 8011d74:	6062      	str	r2, [r4, #4]
 8011d76:	dd02      	ble.n	8011d7e <__ssvfiscanf_r+0x28a>
 8011d78:	3301      	adds	r3, #1
 8011d7a:	6023      	str	r3, [r4, #0]
 8011d7c:	e7b6      	b.n	8011cec <__ssvfiscanf_r+0x1f8>
 8011d7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d80:	4621      	mov	r1, r4
 8011d82:	4630      	mov	r0, r6
 8011d84:	4798      	blx	r3
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d0b0      	beq.n	8011cec <__ssvfiscanf_r+0x1f8>
 8011d8a:	e78d      	b.n	8011ca8 <__ssvfiscanf_r+0x1b4>
 8011d8c:	2b04      	cmp	r3, #4
 8011d8e:	dc0f      	bgt.n	8011db0 <__ssvfiscanf_r+0x2bc>
 8011d90:	466b      	mov	r3, sp
 8011d92:	4622      	mov	r2, r4
 8011d94:	a941      	add	r1, sp, #260	@ 0x104
 8011d96:	4630      	mov	r0, r6
 8011d98:	f000 f9be 	bl	8012118 <_scanf_i>
 8011d9c:	e7b4      	b.n	8011d08 <__ssvfiscanf_r+0x214>
 8011d9e:	bf00      	nop
 8011da0:	08011a41 	.word	0x08011a41
 8011da4:	08011abb 	.word	0x08011abb
 8011da8:	08012cd1 	.word	0x08012cd1
 8011dac:	08012c1d 	.word	0x08012c1d
 8011db0:	4b0a      	ldr	r3, [pc, #40]	@ (8011ddc <__ssvfiscanf_r+0x2e8>)
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f43f aec6 	beq.w	8011b44 <__ssvfiscanf_r+0x50>
 8011db8:	466b      	mov	r3, sp
 8011dba:	4622      	mov	r2, r4
 8011dbc:	a941      	add	r1, sp, #260	@ 0x104
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	f7fd f910 	bl	800efe4 <_scanf_float>
 8011dc4:	e7a0      	b.n	8011d08 <__ssvfiscanf_r+0x214>
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	065b      	lsls	r3, r3, #25
 8011dca:	f53f af71 	bmi.w	8011cb0 <__ssvfiscanf_r+0x1bc>
 8011dce:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011dd8:	e7f9      	b.n	8011dce <__ssvfiscanf_r+0x2da>
 8011dda:	bf00      	nop
 8011ddc:	0800efe5 	.word	0x0800efe5

08011de0 <__sfputc_r>:
 8011de0:	6893      	ldr	r3, [r2, #8]
 8011de2:	3b01      	subs	r3, #1
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	b410      	push	{r4}
 8011de8:	6093      	str	r3, [r2, #8]
 8011dea:	da08      	bge.n	8011dfe <__sfputc_r+0x1e>
 8011dec:	6994      	ldr	r4, [r2, #24]
 8011dee:	42a3      	cmp	r3, r4
 8011df0:	db01      	blt.n	8011df6 <__sfputc_r+0x16>
 8011df2:	290a      	cmp	r1, #10
 8011df4:	d103      	bne.n	8011dfe <__sfputc_r+0x1e>
 8011df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dfa:	f7fd bcbe 	b.w	800f77a <__swbuf_r>
 8011dfe:	6813      	ldr	r3, [r2, #0]
 8011e00:	1c58      	adds	r0, r3, #1
 8011e02:	6010      	str	r0, [r2, #0]
 8011e04:	7019      	strb	r1, [r3, #0]
 8011e06:	4608      	mov	r0, r1
 8011e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e0c:	4770      	bx	lr

08011e0e <__sfputs_r>:
 8011e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e10:	4606      	mov	r6, r0
 8011e12:	460f      	mov	r7, r1
 8011e14:	4614      	mov	r4, r2
 8011e16:	18d5      	adds	r5, r2, r3
 8011e18:	42ac      	cmp	r4, r5
 8011e1a:	d101      	bne.n	8011e20 <__sfputs_r+0x12>
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	e007      	b.n	8011e30 <__sfputs_r+0x22>
 8011e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e24:	463a      	mov	r2, r7
 8011e26:	4630      	mov	r0, r6
 8011e28:	f7ff ffda 	bl	8011de0 <__sfputc_r>
 8011e2c:	1c43      	adds	r3, r0, #1
 8011e2e:	d1f3      	bne.n	8011e18 <__sfputs_r+0xa>
 8011e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e34 <_vfiprintf_r>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	460d      	mov	r5, r1
 8011e3a:	b09d      	sub	sp, #116	@ 0x74
 8011e3c:	4614      	mov	r4, r2
 8011e3e:	4698      	mov	r8, r3
 8011e40:	4606      	mov	r6, r0
 8011e42:	b118      	cbz	r0, 8011e4c <_vfiprintf_r+0x18>
 8011e44:	6a03      	ldr	r3, [r0, #32]
 8011e46:	b90b      	cbnz	r3, 8011e4c <_vfiprintf_r+0x18>
 8011e48:	f7fd fb5e 	bl	800f508 <__sinit>
 8011e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e4e:	07d9      	lsls	r1, r3, #31
 8011e50:	d405      	bmi.n	8011e5e <_vfiprintf_r+0x2a>
 8011e52:	89ab      	ldrh	r3, [r5, #12]
 8011e54:	059a      	lsls	r2, r3, #22
 8011e56:	d402      	bmi.n	8011e5e <_vfiprintf_r+0x2a>
 8011e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e5a:	f7fd fdc2 	bl	800f9e2 <__retarget_lock_acquire_recursive>
 8011e5e:	89ab      	ldrh	r3, [r5, #12]
 8011e60:	071b      	lsls	r3, r3, #28
 8011e62:	d501      	bpl.n	8011e68 <_vfiprintf_r+0x34>
 8011e64:	692b      	ldr	r3, [r5, #16]
 8011e66:	b99b      	cbnz	r3, 8011e90 <_vfiprintf_r+0x5c>
 8011e68:	4629      	mov	r1, r5
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	f7fd fcc4 	bl	800f7f8 <__swsetup_r>
 8011e70:	b170      	cbz	r0, 8011e90 <_vfiprintf_r+0x5c>
 8011e72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e74:	07dc      	lsls	r4, r3, #31
 8011e76:	d504      	bpl.n	8011e82 <_vfiprintf_r+0x4e>
 8011e78:	f04f 30ff 	mov.w	r0, #4294967295
 8011e7c:	b01d      	add	sp, #116	@ 0x74
 8011e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e82:	89ab      	ldrh	r3, [r5, #12]
 8011e84:	0598      	lsls	r0, r3, #22
 8011e86:	d4f7      	bmi.n	8011e78 <_vfiprintf_r+0x44>
 8011e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e8a:	f7fd fdab 	bl	800f9e4 <__retarget_lock_release_recursive>
 8011e8e:	e7f3      	b.n	8011e78 <_vfiprintf_r+0x44>
 8011e90:	2300      	movs	r3, #0
 8011e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e94:	2320      	movs	r3, #32
 8011e96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e9e:	2330      	movs	r3, #48	@ 0x30
 8011ea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012050 <_vfiprintf_r+0x21c>
 8011ea4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ea8:	f04f 0901 	mov.w	r9, #1
 8011eac:	4623      	mov	r3, r4
 8011eae:	469a      	mov	sl, r3
 8011eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eb4:	b10a      	cbz	r2, 8011eba <_vfiprintf_r+0x86>
 8011eb6:	2a25      	cmp	r2, #37	@ 0x25
 8011eb8:	d1f9      	bne.n	8011eae <_vfiprintf_r+0x7a>
 8011eba:	ebba 0b04 	subs.w	fp, sl, r4
 8011ebe:	d00b      	beq.n	8011ed8 <_vfiprintf_r+0xa4>
 8011ec0:	465b      	mov	r3, fp
 8011ec2:	4622      	mov	r2, r4
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f7ff ffa1 	bl	8011e0e <__sfputs_r>
 8011ecc:	3001      	adds	r0, #1
 8011ece:	f000 80a7 	beq.w	8012020 <_vfiprintf_r+0x1ec>
 8011ed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ed4:	445a      	add	r2, fp
 8011ed6:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f000 809f 	beq.w	8012020 <_vfiprintf_r+0x1ec>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eec:	f10a 0a01 	add.w	sl, sl, #1
 8011ef0:	9304      	str	r3, [sp, #16]
 8011ef2:	9307      	str	r3, [sp, #28]
 8011ef4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ef8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011efa:	4654      	mov	r4, sl
 8011efc:	2205      	movs	r2, #5
 8011efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f02:	4853      	ldr	r0, [pc, #332]	@ (8012050 <_vfiprintf_r+0x21c>)
 8011f04:	f7ee f9ec 	bl	80002e0 <memchr>
 8011f08:	9a04      	ldr	r2, [sp, #16]
 8011f0a:	b9d8      	cbnz	r0, 8011f44 <_vfiprintf_r+0x110>
 8011f0c:	06d1      	lsls	r1, r2, #27
 8011f0e:	bf44      	itt	mi
 8011f10:	2320      	movmi	r3, #32
 8011f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f16:	0713      	lsls	r3, r2, #28
 8011f18:	bf44      	itt	mi
 8011f1a:	232b      	movmi	r3, #43	@ 0x2b
 8011f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f20:	f89a 3000 	ldrb.w	r3, [sl]
 8011f24:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f26:	d015      	beq.n	8011f54 <_vfiprintf_r+0x120>
 8011f28:	9a07      	ldr	r2, [sp, #28]
 8011f2a:	4654      	mov	r4, sl
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	f04f 0c0a 	mov.w	ip, #10
 8011f32:	4621      	mov	r1, r4
 8011f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f38:	3b30      	subs	r3, #48	@ 0x30
 8011f3a:	2b09      	cmp	r3, #9
 8011f3c:	d94b      	bls.n	8011fd6 <_vfiprintf_r+0x1a2>
 8011f3e:	b1b0      	cbz	r0, 8011f6e <_vfiprintf_r+0x13a>
 8011f40:	9207      	str	r2, [sp, #28]
 8011f42:	e014      	b.n	8011f6e <_vfiprintf_r+0x13a>
 8011f44:	eba0 0308 	sub.w	r3, r0, r8
 8011f48:	fa09 f303 	lsl.w	r3, r9, r3
 8011f4c:	4313      	orrs	r3, r2
 8011f4e:	9304      	str	r3, [sp, #16]
 8011f50:	46a2      	mov	sl, r4
 8011f52:	e7d2      	b.n	8011efa <_vfiprintf_r+0xc6>
 8011f54:	9b03      	ldr	r3, [sp, #12]
 8011f56:	1d19      	adds	r1, r3, #4
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	9103      	str	r1, [sp, #12]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	bfbb      	ittet	lt
 8011f60:	425b      	neglt	r3, r3
 8011f62:	f042 0202 	orrlt.w	r2, r2, #2
 8011f66:	9307      	strge	r3, [sp, #28]
 8011f68:	9307      	strlt	r3, [sp, #28]
 8011f6a:	bfb8      	it	lt
 8011f6c:	9204      	strlt	r2, [sp, #16]
 8011f6e:	7823      	ldrb	r3, [r4, #0]
 8011f70:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f72:	d10a      	bne.n	8011f8a <_vfiprintf_r+0x156>
 8011f74:	7863      	ldrb	r3, [r4, #1]
 8011f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f78:	d132      	bne.n	8011fe0 <_vfiprintf_r+0x1ac>
 8011f7a:	9b03      	ldr	r3, [sp, #12]
 8011f7c:	1d1a      	adds	r2, r3, #4
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	9203      	str	r2, [sp, #12]
 8011f82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f86:	3402      	adds	r4, #2
 8011f88:	9305      	str	r3, [sp, #20]
 8011f8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012060 <_vfiprintf_r+0x22c>
 8011f8e:	7821      	ldrb	r1, [r4, #0]
 8011f90:	2203      	movs	r2, #3
 8011f92:	4650      	mov	r0, sl
 8011f94:	f7ee f9a4 	bl	80002e0 <memchr>
 8011f98:	b138      	cbz	r0, 8011faa <_vfiprintf_r+0x176>
 8011f9a:	9b04      	ldr	r3, [sp, #16]
 8011f9c:	eba0 000a 	sub.w	r0, r0, sl
 8011fa0:	2240      	movs	r2, #64	@ 0x40
 8011fa2:	4082      	lsls	r2, r0
 8011fa4:	4313      	orrs	r3, r2
 8011fa6:	3401      	adds	r4, #1
 8011fa8:	9304      	str	r3, [sp, #16]
 8011faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fae:	4829      	ldr	r0, [pc, #164]	@ (8012054 <_vfiprintf_r+0x220>)
 8011fb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fb4:	2206      	movs	r2, #6
 8011fb6:	f7ee f993 	bl	80002e0 <memchr>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d03f      	beq.n	801203e <_vfiprintf_r+0x20a>
 8011fbe:	4b26      	ldr	r3, [pc, #152]	@ (8012058 <_vfiprintf_r+0x224>)
 8011fc0:	bb1b      	cbnz	r3, 801200a <_vfiprintf_r+0x1d6>
 8011fc2:	9b03      	ldr	r3, [sp, #12]
 8011fc4:	3307      	adds	r3, #7
 8011fc6:	f023 0307 	bic.w	r3, r3, #7
 8011fca:	3308      	adds	r3, #8
 8011fcc:	9303      	str	r3, [sp, #12]
 8011fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fd0:	443b      	add	r3, r7
 8011fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fd4:	e76a      	b.n	8011eac <_vfiprintf_r+0x78>
 8011fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fda:	460c      	mov	r4, r1
 8011fdc:	2001      	movs	r0, #1
 8011fde:	e7a8      	b.n	8011f32 <_vfiprintf_r+0xfe>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	3401      	adds	r4, #1
 8011fe4:	9305      	str	r3, [sp, #20]
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	f04f 0c0a 	mov.w	ip, #10
 8011fec:	4620      	mov	r0, r4
 8011fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ff2:	3a30      	subs	r2, #48	@ 0x30
 8011ff4:	2a09      	cmp	r2, #9
 8011ff6:	d903      	bls.n	8012000 <_vfiprintf_r+0x1cc>
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d0c6      	beq.n	8011f8a <_vfiprintf_r+0x156>
 8011ffc:	9105      	str	r1, [sp, #20]
 8011ffe:	e7c4      	b.n	8011f8a <_vfiprintf_r+0x156>
 8012000:	fb0c 2101 	mla	r1, ip, r1, r2
 8012004:	4604      	mov	r4, r0
 8012006:	2301      	movs	r3, #1
 8012008:	e7f0      	b.n	8011fec <_vfiprintf_r+0x1b8>
 801200a:	ab03      	add	r3, sp, #12
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	462a      	mov	r2, r5
 8012010:	4b12      	ldr	r3, [pc, #72]	@ (801205c <_vfiprintf_r+0x228>)
 8012012:	a904      	add	r1, sp, #16
 8012014:	4630      	mov	r0, r6
 8012016:	f7fc fc3f 	bl	800e898 <_printf_float>
 801201a:	4607      	mov	r7, r0
 801201c:	1c78      	adds	r0, r7, #1
 801201e:	d1d6      	bne.n	8011fce <_vfiprintf_r+0x19a>
 8012020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012022:	07d9      	lsls	r1, r3, #31
 8012024:	d405      	bmi.n	8012032 <_vfiprintf_r+0x1fe>
 8012026:	89ab      	ldrh	r3, [r5, #12]
 8012028:	059a      	lsls	r2, r3, #22
 801202a:	d402      	bmi.n	8012032 <_vfiprintf_r+0x1fe>
 801202c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801202e:	f7fd fcd9 	bl	800f9e4 <__retarget_lock_release_recursive>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	065b      	lsls	r3, r3, #25
 8012036:	f53f af1f 	bmi.w	8011e78 <_vfiprintf_r+0x44>
 801203a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801203c:	e71e      	b.n	8011e7c <_vfiprintf_r+0x48>
 801203e:	ab03      	add	r3, sp, #12
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	462a      	mov	r2, r5
 8012044:	4b05      	ldr	r3, [pc, #20]	@ (801205c <_vfiprintf_r+0x228>)
 8012046:	a904      	add	r1, sp, #16
 8012048:	4630      	mov	r0, r6
 801204a:	f7fc fead 	bl	800eda8 <_printf_i>
 801204e:	e7e4      	b.n	801201a <_vfiprintf_r+0x1e6>
 8012050:	08012c17 	.word	0x08012c17
 8012054:	08012c21 	.word	0x08012c21
 8012058:	0800e899 	.word	0x0800e899
 801205c:	08011e0f 	.word	0x08011e0f
 8012060:	08012c1d 	.word	0x08012c1d

08012064 <_scanf_chars>:
 8012064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012068:	4615      	mov	r5, r2
 801206a:	688a      	ldr	r2, [r1, #8]
 801206c:	4680      	mov	r8, r0
 801206e:	460c      	mov	r4, r1
 8012070:	b932      	cbnz	r2, 8012080 <_scanf_chars+0x1c>
 8012072:	698a      	ldr	r2, [r1, #24]
 8012074:	2a00      	cmp	r2, #0
 8012076:	bf14      	ite	ne
 8012078:	f04f 32ff 	movne.w	r2, #4294967295
 801207c:	2201      	moveq	r2, #1
 801207e:	608a      	str	r2, [r1, #8]
 8012080:	6822      	ldr	r2, [r4, #0]
 8012082:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012114 <_scanf_chars+0xb0>
 8012086:	06d1      	lsls	r1, r2, #27
 8012088:	bf5f      	itttt	pl
 801208a:	681a      	ldrpl	r2, [r3, #0]
 801208c:	1d11      	addpl	r1, r2, #4
 801208e:	6019      	strpl	r1, [r3, #0]
 8012090:	6816      	ldrpl	r6, [r2, #0]
 8012092:	2700      	movs	r7, #0
 8012094:	69a0      	ldr	r0, [r4, #24]
 8012096:	b188      	cbz	r0, 80120bc <_scanf_chars+0x58>
 8012098:	2801      	cmp	r0, #1
 801209a:	d107      	bne.n	80120ac <_scanf_chars+0x48>
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	781a      	ldrb	r2, [r3, #0]
 80120a0:	6963      	ldr	r3, [r4, #20]
 80120a2:	5c9b      	ldrb	r3, [r3, r2]
 80120a4:	b953      	cbnz	r3, 80120bc <_scanf_chars+0x58>
 80120a6:	2f00      	cmp	r7, #0
 80120a8:	d031      	beq.n	801210e <_scanf_chars+0xaa>
 80120aa:	e022      	b.n	80120f2 <_scanf_chars+0x8e>
 80120ac:	2802      	cmp	r0, #2
 80120ae:	d120      	bne.n	80120f2 <_scanf_chars+0x8e>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80120b8:	071b      	lsls	r3, r3, #28
 80120ba:	d41a      	bmi.n	80120f2 <_scanf_chars+0x8e>
 80120bc:	6823      	ldr	r3, [r4, #0]
 80120be:	06da      	lsls	r2, r3, #27
 80120c0:	bf5e      	ittt	pl
 80120c2:	682b      	ldrpl	r3, [r5, #0]
 80120c4:	781b      	ldrbpl	r3, [r3, #0]
 80120c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80120ca:	682a      	ldr	r2, [r5, #0]
 80120cc:	686b      	ldr	r3, [r5, #4]
 80120ce:	3201      	adds	r2, #1
 80120d0:	602a      	str	r2, [r5, #0]
 80120d2:	68a2      	ldr	r2, [r4, #8]
 80120d4:	3b01      	subs	r3, #1
 80120d6:	3a01      	subs	r2, #1
 80120d8:	606b      	str	r3, [r5, #4]
 80120da:	3701      	adds	r7, #1
 80120dc:	60a2      	str	r2, [r4, #8]
 80120de:	b142      	cbz	r2, 80120f2 <_scanf_chars+0x8e>
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	dcd7      	bgt.n	8012094 <_scanf_chars+0x30>
 80120e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80120e8:	4629      	mov	r1, r5
 80120ea:	4640      	mov	r0, r8
 80120ec:	4798      	blx	r3
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d0d0      	beq.n	8012094 <_scanf_chars+0x30>
 80120f2:	6823      	ldr	r3, [r4, #0]
 80120f4:	f013 0310 	ands.w	r3, r3, #16
 80120f8:	d105      	bne.n	8012106 <_scanf_chars+0xa2>
 80120fa:	68e2      	ldr	r2, [r4, #12]
 80120fc:	3201      	adds	r2, #1
 80120fe:	60e2      	str	r2, [r4, #12]
 8012100:	69a2      	ldr	r2, [r4, #24]
 8012102:	b102      	cbz	r2, 8012106 <_scanf_chars+0xa2>
 8012104:	7033      	strb	r3, [r6, #0]
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	443b      	add	r3, r7
 801210a:	6123      	str	r3, [r4, #16]
 801210c:	2000      	movs	r0, #0
 801210e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012112:	bf00      	nop
 8012114:	08012cd1 	.word	0x08012cd1

08012118 <_scanf_i>:
 8012118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211c:	4698      	mov	r8, r3
 801211e:	4b74      	ldr	r3, [pc, #464]	@ (80122f0 <_scanf_i+0x1d8>)
 8012120:	460c      	mov	r4, r1
 8012122:	4682      	mov	sl, r0
 8012124:	4616      	mov	r6, r2
 8012126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801212a:	b087      	sub	sp, #28
 801212c:	ab03      	add	r3, sp, #12
 801212e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012132:	4b70      	ldr	r3, [pc, #448]	@ (80122f4 <_scanf_i+0x1dc>)
 8012134:	69a1      	ldr	r1, [r4, #24]
 8012136:	4a70      	ldr	r2, [pc, #448]	@ (80122f8 <_scanf_i+0x1e0>)
 8012138:	2903      	cmp	r1, #3
 801213a:	bf08      	it	eq
 801213c:	461a      	moveq	r2, r3
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	9201      	str	r2, [sp, #4]
 8012142:	1e5a      	subs	r2, r3, #1
 8012144:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012148:	bf88      	it	hi
 801214a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801214e:	4627      	mov	r7, r4
 8012150:	bf82      	ittt	hi
 8012152:	eb03 0905 	addhi.w	r9, r3, r5
 8012156:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801215a:	60a3      	strhi	r3, [r4, #8]
 801215c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012160:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012164:	bf98      	it	ls
 8012166:	f04f 0900 	movls.w	r9, #0
 801216a:	6023      	str	r3, [r4, #0]
 801216c:	463d      	mov	r5, r7
 801216e:	f04f 0b00 	mov.w	fp, #0
 8012172:	6831      	ldr	r1, [r6, #0]
 8012174:	ab03      	add	r3, sp, #12
 8012176:	7809      	ldrb	r1, [r1, #0]
 8012178:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801217c:	2202      	movs	r2, #2
 801217e:	f7ee f8af 	bl	80002e0 <memchr>
 8012182:	b328      	cbz	r0, 80121d0 <_scanf_i+0xb8>
 8012184:	f1bb 0f01 	cmp.w	fp, #1
 8012188:	d159      	bne.n	801223e <_scanf_i+0x126>
 801218a:	6862      	ldr	r2, [r4, #4]
 801218c:	b92a      	cbnz	r2, 801219a <_scanf_i+0x82>
 801218e:	6822      	ldr	r2, [r4, #0]
 8012190:	2108      	movs	r1, #8
 8012192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012196:	6061      	str	r1, [r4, #4]
 8012198:	6022      	str	r2, [r4, #0]
 801219a:	6822      	ldr	r2, [r4, #0]
 801219c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80121a0:	6022      	str	r2, [r4, #0]
 80121a2:	68a2      	ldr	r2, [r4, #8]
 80121a4:	1e51      	subs	r1, r2, #1
 80121a6:	60a1      	str	r1, [r4, #8]
 80121a8:	b192      	cbz	r2, 80121d0 <_scanf_i+0xb8>
 80121aa:	6832      	ldr	r2, [r6, #0]
 80121ac:	1c51      	adds	r1, r2, #1
 80121ae:	6031      	str	r1, [r6, #0]
 80121b0:	7812      	ldrb	r2, [r2, #0]
 80121b2:	f805 2b01 	strb.w	r2, [r5], #1
 80121b6:	6872      	ldr	r2, [r6, #4]
 80121b8:	3a01      	subs	r2, #1
 80121ba:	2a00      	cmp	r2, #0
 80121bc:	6072      	str	r2, [r6, #4]
 80121be:	dc07      	bgt.n	80121d0 <_scanf_i+0xb8>
 80121c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80121c4:	4631      	mov	r1, r6
 80121c6:	4650      	mov	r0, sl
 80121c8:	4790      	blx	r2
 80121ca:	2800      	cmp	r0, #0
 80121cc:	f040 8085 	bne.w	80122da <_scanf_i+0x1c2>
 80121d0:	f10b 0b01 	add.w	fp, fp, #1
 80121d4:	f1bb 0f03 	cmp.w	fp, #3
 80121d8:	d1cb      	bne.n	8012172 <_scanf_i+0x5a>
 80121da:	6863      	ldr	r3, [r4, #4]
 80121dc:	b90b      	cbnz	r3, 80121e2 <_scanf_i+0xca>
 80121de:	230a      	movs	r3, #10
 80121e0:	6063      	str	r3, [r4, #4]
 80121e2:	6863      	ldr	r3, [r4, #4]
 80121e4:	4945      	ldr	r1, [pc, #276]	@ (80122fc <_scanf_i+0x1e4>)
 80121e6:	6960      	ldr	r0, [r4, #20]
 80121e8:	1ac9      	subs	r1, r1, r3
 80121ea:	f000 f997 	bl	801251c <__sccl>
 80121ee:	f04f 0b00 	mov.w	fp, #0
 80121f2:	68a3      	ldr	r3, [r4, #8]
 80121f4:	6822      	ldr	r2, [r4, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d03d      	beq.n	8012276 <_scanf_i+0x15e>
 80121fa:	6831      	ldr	r1, [r6, #0]
 80121fc:	6960      	ldr	r0, [r4, #20]
 80121fe:	f891 c000 	ldrb.w	ip, [r1]
 8012202:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012206:	2800      	cmp	r0, #0
 8012208:	d035      	beq.n	8012276 <_scanf_i+0x15e>
 801220a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801220e:	d124      	bne.n	801225a <_scanf_i+0x142>
 8012210:	0510      	lsls	r0, r2, #20
 8012212:	d522      	bpl.n	801225a <_scanf_i+0x142>
 8012214:	f10b 0b01 	add.w	fp, fp, #1
 8012218:	f1b9 0f00 	cmp.w	r9, #0
 801221c:	d003      	beq.n	8012226 <_scanf_i+0x10e>
 801221e:	3301      	adds	r3, #1
 8012220:	f109 39ff 	add.w	r9, r9, #4294967295
 8012224:	60a3      	str	r3, [r4, #8]
 8012226:	6873      	ldr	r3, [r6, #4]
 8012228:	3b01      	subs	r3, #1
 801222a:	2b00      	cmp	r3, #0
 801222c:	6073      	str	r3, [r6, #4]
 801222e:	dd1b      	ble.n	8012268 <_scanf_i+0x150>
 8012230:	6833      	ldr	r3, [r6, #0]
 8012232:	3301      	adds	r3, #1
 8012234:	6033      	str	r3, [r6, #0]
 8012236:	68a3      	ldr	r3, [r4, #8]
 8012238:	3b01      	subs	r3, #1
 801223a:	60a3      	str	r3, [r4, #8]
 801223c:	e7d9      	b.n	80121f2 <_scanf_i+0xda>
 801223e:	f1bb 0f02 	cmp.w	fp, #2
 8012242:	d1ae      	bne.n	80121a2 <_scanf_i+0x8a>
 8012244:	6822      	ldr	r2, [r4, #0]
 8012246:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801224a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801224e:	d1c4      	bne.n	80121da <_scanf_i+0xc2>
 8012250:	2110      	movs	r1, #16
 8012252:	6061      	str	r1, [r4, #4]
 8012254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012258:	e7a2      	b.n	80121a0 <_scanf_i+0x88>
 801225a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801225e:	6022      	str	r2, [r4, #0]
 8012260:	780b      	ldrb	r3, [r1, #0]
 8012262:	f805 3b01 	strb.w	r3, [r5], #1
 8012266:	e7de      	b.n	8012226 <_scanf_i+0x10e>
 8012268:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801226c:	4631      	mov	r1, r6
 801226e:	4650      	mov	r0, sl
 8012270:	4798      	blx	r3
 8012272:	2800      	cmp	r0, #0
 8012274:	d0df      	beq.n	8012236 <_scanf_i+0x11e>
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	05d9      	lsls	r1, r3, #23
 801227a:	d50d      	bpl.n	8012298 <_scanf_i+0x180>
 801227c:	42bd      	cmp	r5, r7
 801227e:	d909      	bls.n	8012294 <_scanf_i+0x17c>
 8012280:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012284:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012288:	4632      	mov	r2, r6
 801228a:	4650      	mov	r0, sl
 801228c:	4798      	blx	r3
 801228e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012292:	464d      	mov	r5, r9
 8012294:	42bd      	cmp	r5, r7
 8012296:	d028      	beq.n	80122ea <_scanf_i+0x1d2>
 8012298:	6822      	ldr	r2, [r4, #0]
 801229a:	f012 0210 	ands.w	r2, r2, #16
 801229e:	d113      	bne.n	80122c8 <_scanf_i+0x1b0>
 80122a0:	702a      	strb	r2, [r5, #0]
 80122a2:	6863      	ldr	r3, [r4, #4]
 80122a4:	9e01      	ldr	r6, [sp, #4]
 80122a6:	4639      	mov	r1, r7
 80122a8:	4650      	mov	r0, sl
 80122aa:	47b0      	blx	r6
 80122ac:	f8d8 3000 	ldr.w	r3, [r8]
 80122b0:	6821      	ldr	r1, [r4, #0]
 80122b2:	1d1a      	adds	r2, r3, #4
 80122b4:	f8c8 2000 	str.w	r2, [r8]
 80122b8:	f011 0f20 	tst.w	r1, #32
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	d00f      	beq.n	80122e0 <_scanf_i+0x1c8>
 80122c0:	6018      	str	r0, [r3, #0]
 80122c2:	68e3      	ldr	r3, [r4, #12]
 80122c4:	3301      	adds	r3, #1
 80122c6:	60e3      	str	r3, [r4, #12]
 80122c8:	6923      	ldr	r3, [r4, #16]
 80122ca:	1bed      	subs	r5, r5, r7
 80122cc:	445d      	add	r5, fp
 80122ce:	442b      	add	r3, r5
 80122d0:	6123      	str	r3, [r4, #16]
 80122d2:	2000      	movs	r0, #0
 80122d4:	b007      	add	sp, #28
 80122d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122da:	f04f 0b00 	mov.w	fp, #0
 80122de:	e7ca      	b.n	8012276 <_scanf_i+0x15e>
 80122e0:	07ca      	lsls	r2, r1, #31
 80122e2:	bf4c      	ite	mi
 80122e4:	8018      	strhmi	r0, [r3, #0]
 80122e6:	6018      	strpl	r0, [r3, #0]
 80122e8:	e7eb      	b.n	80122c2 <_scanf_i+0x1aa>
 80122ea:	2001      	movs	r0, #1
 80122ec:	e7f2      	b.n	80122d4 <_scanf_i+0x1bc>
 80122ee:	bf00      	nop
 80122f0:	080129bc 	.word	0x080129bc
 80122f4:	08011775 	.word	0x08011775
 80122f8:	080127bd 	.word	0x080127bd
 80122fc:	08012c38 	.word	0x08012c38

08012300 <__sflush_r>:
 8012300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012308:	0716      	lsls	r6, r2, #28
 801230a:	4605      	mov	r5, r0
 801230c:	460c      	mov	r4, r1
 801230e:	d454      	bmi.n	80123ba <__sflush_r+0xba>
 8012310:	684b      	ldr	r3, [r1, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	dc02      	bgt.n	801231c <__sflush_r+0x1c>
 8012316:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012318:	2b00      	cmp	r3, #0
 801231a:	dd48      	ble.n	80123ae <__sflush_r+0xae>
 801231c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801231e:	2e00      	cmp	r6, #0
 8012320:	d045      	beq.n	80123ae <__sflush_r+0xae>
 8012322:	2300      	movs	r3, #0
 8012324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012328:	682f      	ldr	r7, [r5, #0]
 801232a:	6a21      	ldr	r1, [r4, #32]
 801232c:	602b      	str	r3, [r5, #0]
 801232e:	d030      	beq.n	8012392 <__sflush_r+0x92>
 8012330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	0759      	lsls	r1, r3, #29
 8012336:	d505      	bpl.n	8012344 <__sflush_r+0x44>
 8012338:	6863      	ldr	r3, [r4, #4]
 801233a:	1ad2      	subs	r2, r2, r3
 801233c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801233e:	b10b      	cbz	r3, 8012344 <__sflush_r+0x44>
 8012340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012342:	1ad2      	subs	r2, r2, r3
 8012344:	2300      	movs	r3, #0
 8012346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012348:	6a21      	ldr	r1, [r4, #32]
 801234a:	4628      	mov	r0, r5
 801234c:	47b0      	blx	r6
 801234e:	1c43      	adds	r3, r0, #1
 8012350:	89a3      	ldrh	r3, [r4, #12]
 8012352:	d106      	bne.n	8012362 <__sflush_r+0x62>
 8012354:	6829      	ldr	r1, [r5, #0]
 8012356:	291d      	cmp	r1, #29
 8012358:	d82b      	bhi.n	80123b2 <__sflush_r+0xb2>
 801235a:	4a2a      	ldr	r2, [pc, #168]	@ (8012404 <__sflush_r+0x104>)
 801235c:	40ca      	lsrs	r2, r1
 801235e:	07d6      	lsls	r6, r2, #31
 8012360:	d527      	bpl.n	80123b2 <__sflush_r+0xb2>
 8012362:	2200      	movs	r2, #0
 8012364:	6062      	str	r2, [r4, #4]
 8012366:	04d9      	lsls	r1, r3, #19
 8012368:	6922      	ldr	r2, [r4, #16]
 801236a:	6022      	str	r2, [r4, #0]
 801236c:	d504      	bpl.n	8012378 <__sflush_r+0x78>
 801236e:	1c42      	adds	r2, r0, #1
 8012370:	d101      	bne.n	8012376 <__sflush_r+0x76>
 8012372:	682b      	ldr	r3, [r5, #0]
 8012374:	b903      	cbnz	r3, 8012378 <__sflush_r+0x78>
 8012376:	6560      	str	r0, [r4, #84]	@ 0x54
 8012378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801237a:	602f      	str	r7, [r5, #0]
 801237c:	b1b9      	cbz	r1, 80123ae <__sflush_r+0xae>
 801237e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012382:	4299      	cmp	r1, r3
 8012384:	d002      	beq.n	801238c <__sflush_r+0x8c>
 8012386:	4628      	mov	r0, r5
 8012388:	f7fe f934 	bl	80105f4 <_free_r>
 801238c:	2300      	movs	r3, #0
 801238e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012390:	e00d      	b.n	80123ae <__sflush_r+0xae>
 8012392:	2301      	movs	r3, #1
 8012394:	4628      	mov	r0, r5
 8012396:	47b0      	blx	r6
 8012398:	4602      	mov	r2, r0
 801239a:	1c50      	adds	r0, r2, #1
 801239c:	d1c9      	bne.n	8012332 <__sflush_r+0x32>
 801239e:	682b      	ldr	r3, [r5, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d0c6      	beq.n	8012332 <__sflush_r+0x32>
 80123a4:	2b1d      	cmp	r3, #29
 80123a6:	d001      	beq.n	80123ac <__sflush_r+0xac>
 80123a8:	2b16      	cmp	r3, #22
 80123aa:	d11e      	bne.n	80123ea <__sflush_r+0xea>
 80123ac:	602f      	str	r7, [r5, #0]
 80123ae:	2000      	movs	r0, #0
 80123b0:	e022      	b.n	80123f8 <__sflush_r+0xf8>
 80123b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123b6:	b21b      	sxth	r3, r3
 80123b8:	e01b      	b.n	80123f2 <__sflush_r+0xf2>
 80123ba:	690f      	ldr	r7, [r1, #16]
 80123bc:	2f00      	cmp	r7, #0
 80123be:	d0f6      	beq.n	80123ae <__sflush_r+0xae>
 80123c0:	0793      	lsls	r3, r2, #30
 80123c2:	680e      	ldr	r6, [r1, #0]
 80123c4:	bf08      	it	eq
 80123c6:	694b      	ldreq	r3, [r1, #20]
 80123c8:	600f      	str	r7, [r1, #0]
 80123ca:	bf18      	it	ne
 80123cc:	2300      	movne	r3, #0
 80123ce:	eba6 0807 	sub.w	r8, r6, r7
 80123d2:	608b      	str	r3, [r1, #8]
 80123d4:	f1b8 0f00 	cmp.w	r8, #0
 80123d8:	dde9      	ble.n	80123ae <__sflush_r+0xae>
 80123da:	6a21      	ldr	r1, [r4, #32]
 80123dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80123de:	4643      	mov	r3, r8
 80123e0:	463a      	mov	r2, r7
 80123e2:	4628      	mov	r0, r5
 80123e4:	47b0      	blx	r6
 80123e6:	2800      	cmp	r0, #0
 80123e8:	dc08      	bgt.n	80123fc <__sflush_r+0xfc>
 80123ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123f2:	81a3      	strh	r3, [r4, #12]
 80123f4:	f04f 30ff 	mov.w	r0, #4294967295
 80123f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123fc:	4407      	add	r7, r0
 80123fe:	eba8 0800 	sub.w	r8, r8, r0
 8012402:	e7e7      	b.n	80123d4 <__sflush_r+0xd4>
 8012404:	20400001 	.word	0x20400001

08012408 <_fflush_r>:
 8012408:	b538      	push	{r3, r4, r5, lr}
 801240a:	690b      	ldr	r3, [r1, #16]
 801240c:	4605      	mov	r5, r0
 801240e:	460c      	mov	r4, r1
 8012410:	b913      	cbnz	r3, 8012418 <_fflush_r+0x10>
 8012412:	2500      	movs	r5, #0
 8012414:	4628      	mov	r0, r5
 8012416:	bd38      	pop	{r3, r4, r5, pc}
 8012418:	b118      	cbz	r0, 8012422 <_fflush_r+0x1a>
 801241a:	6a03      	ldr	r3, [r0, #32]
 801241c:	b90b      	cbnz	r3, 8012422 <_fflush_r+0x1a>
 801241e:	f7fd f873 	bl	800f508 <__sinit>
 8012422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d0f3      	beq.n	8012412 <_fflush_r+0xa>
 801242a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801242c:	07d0      	lsls	r0, r2, #31
 801242e:	d404      	bmi.n	801243a <_fflush_r+0x32>
 8012430:	0599      	lsls	r1, r3, #22
 8012432:	d402      	bmi.n	801243a <_fflush_r+0x32>
 8012434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012436:	f7fd fad4 	bl	800f9e2 <__retarget_lock_acquire_recursive>
 801243a:	4628      	mov	r0, r5
 801243c:	4621      	mov	r1, r4
 801243e:	f7ff ff5f 	bl	8012300 <__sflush_r>
 8012442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012444:	07da      	lsls	r2, r3, #31
 8012446:	4605      	mov	r5, r0
 8012448:	d4e4      	bmi.n	8012414 <_fflush_r+0xc>
 801244a:	89a3      	ldrh	r3, [r4, #12]
 801244c:	059b      	lsls	r3, r3, #22
 801244e:	d4e1      	bmi.n	8012414 <_fflush_r+0xc>
 8012450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012452:	f7fd fac7 	bl	800f9e4 <__retarget_lock_release_recursive>
 8012456:	e7dd      	b.n	8012414 <_fflush_r+0xc>

08012458 <__swhatbuf_r>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	460c      	mov	r4, r1
 801245c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012460:	2900      	cmp	r1, #0
 8012462:	b096      	sub	sp, #88	@ 0x58
 8012464:	4615      	mov	r5, r2
 8012466:	461e      	mov	r6, r3
 8012468:	da0d      	bge.n	8012486 <__swhatbuf_r+0x2e>
 801246a:	89a3      	ldrh	r3, [r4, #12]
 801246c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012470:	f04f 0100 	mov.w	r1, #0
 8012474:	bf14      	ite	ne
 8012476:	2340      	movne	r3, #64	@ 0x40
 8012478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801247c:	2000      	movs	r0, #0
 801247e:	6031      	str	r1, [r6, #0]
 8012480:	602b      	str	r3, [r5, #0]
 8012482:	b016      	add	sp, #88	@ 0x58
 8012484:	bd70      	pop	{r4, r5, r6, pc}
 8012486:	466a      	mov	r2, sp
 8012488:	f000 f8d6 	bl	8012638 <_fstat_r>
 801248c:	2800      	cmp	r0, #0
 801248e:	dbec      	blt.n	801246a <__swhatbuf_r+0x12>
 8012490:	9901      	ldr	r1, [sp, #4]
 8012492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801249a:	4259      	negs	r1, r3
 801249c:	4159      	adcs	r1, r3
 801249e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124a2:	e7eb      	b.n	801247c <__swhatbuf_r+0x24>

080124a4 <__smakebuf_r>:
 80124a4:	898b      	ldrh	r3, [r1, #12]
 80124a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124a8:	079d      	lsls	r5, r3, #30
 80124aa:	4606      	mov	r6, r0
 80124ac:	460c      	mov	r4, r1
 80124ae:	d507      	bpl.n	80124c0 <__smakebuf_r+0x1c>
 80124b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	6123      	str	r3, [r4, #16]
 80124b8:	2301      	movs	r3, #1
 80124ba:	6163      	str	r3, [r4, #20]
 80124bc:	b003      	add	sp, #12
 80124be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c0:	ab01      	add	r3, sp, #4
 80124c2:	466a      	mov	r2, sp
 80124c4:	f7ff ffc8 	bl	8012458 <__swhatbuf_r>
 80124c8:	9f00      	ldr	r7, [sp, #0]
 80124ca:	4605      	mov	r5, r0
 80124cc:	4639      	mov	r1, r7
 80124ce:	4630      	mov	r0, r6
 80124d0:	f7fb fad4 	bl	800da7c <_malloc_r>
 80124d4:	b948      	cbnz	r0, 80124ea <__smakebuf_r+0x46>
 80124d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124da:	059a      	lsls	r2, r3, #22
 80124dc:	d4ee      	bmi.n	80124bc <__smakebuf_r+0x18>
 80124de:	f023 0303 	bic.w	r3, r3, #3
 80124e2:	f043 0302 	orr.w	r3, r3, #2
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	e7e2      	b.n	80124b0 <__smakebuf_r+0xc>
 80124ea:	89a3      	ldrh	r3, [r4, #12]
 80124ec:	6020      	str	r0, [r4, #0]
 80124ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124f2:	81a3      	strh	r3, [r4, #12]
 80124f4:	9b01      	ldr	r3, [sp, #4]
 80124f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80124fa:	b15b      	cbz	r3, 8012514 <__smakebuf_r+0x70>
 80124fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012500:	4630      	mov	r0, r6
 8012502:	f000 f8ab 	bl	801265c <_isatty_r>
 8012506:	b128      	cbz	r0, 8012514 <__smakebuf_r+0x70>
 8012508:	89a3      	ldrh	r3, [r4, #12]
 801250a:	f023 0303 	bic.w	r3, r3, #3
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	81a3      	strh	r3, [r4, #12]
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	431d      	orrs	r5, r3
 8012518:	81a5      	strh	r5, [r4, #12]
 801251a:	e7cf      	b.n	80124bc <__smakebuf_r+0x18>

0801251c <__sccl>:
 801251c:	b570      	push	{r4, r5, r6, lr}
 801251e:	780b      	ldrb	r3, [r1, #0]
 8012520:	4604      	mov	r4, r0
 8012522:	2b5e      	cmp	r3, #94	@ 0x5e
 8012524:	bf0b      	itete	eq
 8012526:	784b      	ldrbeq	r3, [r1, #1]
 8012528:	1c4a      	addne	r2, r1, #1
 801252a:	1c8a      	addeq	r2, r1, #2
 801252c:	2100      	movne	r1, #0
 801252e:	bf08      	it	eq
 8012530:	2101      	moveq	r1, #1
 8012532:	3801      	subs	r0, #1
 8012534:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012538:	f800 1f01 	strb.w	r1, [r0, #1]!
 801253c:	42a8      	cmp	r0, r5
 801253e:	d1fb      	bne.n	8012538 <__sccl+0x1c>
 8012540:	b90b      	cbnz	r3, 8012546 <__sccl+0x2a>
 8012542:	1e50      	subs	r0, r2, #1
 8012544:	bd70      	pop	{r4, r5, r6, pc}
 8012546:	f081 0101 	eor.w	r1, r1, #1
 801254a:	54e1      	strb	r1, [r4, r3]
 801254c:	4610      	mov	r0, r2
 801254e:	4602      	mov	r2, r0
 8012550:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012554:	2d2d      	cmp	r5, #45	@ 0x2d
 8012556:	d005      	beq.n	8012564 <__sccl+0x48>
 8012558:	2d5d      	cmp	r5, #93	@ 0x5d
 801255a:	d016      	beq.n	801258a <__sccl+0x6e>
 801255c:	2d00      	cmp	r5, #0
 801255e:	d0f1      	beq.n	8012544 <__sccl+0x28>
 8012560:	462b      	mov	r3, r5
 8012562:	e7f2      	b.n	801254a <__sccl+0x2e>
 8012564:	7846      	ldrb	r6, [r0, #1]
 8012566:	2e5d      	cmp	r6, #93	@ 0x5d
 8012568:	d0fa      	beq.n	8012560 <__sccl+0x44>
 801256a:	42b3      	cmp	r3, r6
 801256c:	dcf8      	bgt.n	8012560 <__sccl+0x44>
 801256e:	3002      	adds	r0, #2
 8012570:	461a      	mov	r2, r3
 8012572:	3201      	adds	r2, #1
 8012574:	4296      	cmp	r6, r2
 8012576:	54a1      	strb	r1, [r4, r2]
 8012578:	dcfb      	bgt.n	8012572 <__sccl+0x56>
 801257a:	1af2      	subs	r2, r6, r3
 801257c:	3a01      	subs	r2, #1
 801257e:	1c5d      	adds	r5, r3, #1
 8012580:	42b3      	cmp	r3, r6
 8012582:	bfa8      	it	ge
 8012584:	2200      	movge	r2, #0
 8012586:	18ab      	adds	r3, r5, r2
 8012588:	e7e1      	b.n	801254e <__sccl+0x32>
 801258a:	4610      	mov	r0, r2
 801258c:	e7da      	b.n	8012544 <__sccl+0x28>

0801258e <__submore>:
 801258e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012592:	460c      	mov	r4, r1
 8012594:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801259a:	4299      	cmp	r1, r3
 801259c:	d11d      	bne.n	80125da <__submore+0x4c>
 801259e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80125a2:	f7fb fa6b 	bl	800da7c <_malloc_r>
 80125a6:	b918      	cbnz	r0, 80125b0 <__submore+0x22>
 80125a8:	f04f 30ff 	mov.w	r0, #4294967295
 80125ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80125b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80125b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80125ba:	6360      	str	r0, [r4, #52]	@ 0x34
 80125bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80125c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80125c4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80125c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80125cc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80125d0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80125d4:	6020      	str	r0, [r4, #0]
 80125d6:	2000      	movs	r0, #0
 80125d8:	e7e8      	b.n	80125ac <__submore+0x1e>
 80125da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80125dc:	0077      	lsls	r7, r6, #1
 80125de:	463a      	mov	r2, r7
 80125e0:	f7fb fae0 	bl	800dba4 <_realloc_r>
 80125e4:	4605      	mov	r5, r0
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d0de      	beq.n	80125a8 <__submore+0x1a>
 80125ea:	eb00 0806 	add.w	r8, r0, r6
 80125ee:	4601      	mov	r1, r0
 80125f0:	4632      	mov	r2, r6
 80125f2:	4640      	mov	r0, r8
 80125f4:	f7fd f9f7 	bl	800f9e6 <memcpy>
 80125f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80125fc:	f8c4 8000 	str.w	r8, [r4]
 8012600:	e7e9      	b.n	80125d6 <__submore+0x48>

08012602 <memmove>:
 8012602:	4288      	cmp	r0, r1
 8012604:	b510      	push	{r4, lr}
 8012606:	eb01 0402 	add.w	r4, r1, r2
 801260a:	d902      	bls.n	8012612 <memmove+0x10>
 801260c:	4284      	cmp	r4, r0
 801260e:	4623      	mov	r3, r4
 8012610:	d807      	bhi.n	8012622 <memmove+0x20>
 8012612:	1e43      	subs	r3, r0, #1
 8012614:	42a1      	cmp	r1, r4
 8012616:	d008      	beq.n	801262a <memmove+0x28>
 8012618:	f811 2b01 	ldrb.w	r2, [r1], #1
 801261c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012620:	e7f8      	b.n	8012614 <memmove+0x12>
 8012622:	4402      	add	r2, r0
 8012624:	4601      	mov	r1, r0
 8012626:	428a      	cmp	r2, r1
 8012628:	d100      	bne.n	801262c <memmove+0x2a>
 801262a:	bd10      	pop	{r4, pc}
 801262c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012630:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012634:	e7f7      	b.n	8012626 <memmove+0x24>
	...

08012638 <_fstat_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4d07      	ldr	r5, [pc, #28]	@ (8012658 <_fstat_r+0x20>)
 801263c:	2300      	movs	r3, #0
 801263e:	4604      	mov	r4, r0
 8012640:	4608      	mov	r0, r1
 8012642:	4611      	mov	r1, r2
 8012644:	602b      	str	r3, [r5, #0]
 8012646:	f7ef ff37 	bl	80024b8 <_fstat>
 801264a:	1c43      	adds	r3, r0, #1
 801264c:	d102      	bne.n	8012654 <_fstat_r+0x1c>
 801264e:	682b      	ldr	r3, [r5, #0]
 8012650:	b103      	cbz	r3, 8012654 <_fstat_r+0x1c>
 8012652:	6023      	str	r3, [r4, #0]
 8012654:	bd38      	pop	{r3, r4, r5, pc}
 8012656:	bf00      	nop
 8012658:	24004f08 	.word	0x24004f08

0801265c <_isatty_r>:
 801265c:	b538      	push	{r3, r4, r5, lr}
 801265e:	4d06      	ldr	r5, [pc, #24]	@ (8012678 <_isatty_r+0x1c>)
 8012660:	2300      	movs	r3, #0
 8012662:	4604      	mov	r4, r0
 8012664:	4608      	mov	r0, r1
 8012666:	602b      	str	r3, [r5, #0]
 8012668:	f7ef ff36 	bl	80024d8 <_isatty>
 801266c:	1c43      	adds	r3, r0, #1
 801266e:	d102      	bne.n	8012676 <_isatty_r+0x1a>
 8012670:	682b      	ldr	r3, [r5, #0]
 8012672:	b103      	cbz	r3, 8012676 <_isatty_r+0x1a>
 8012674:	6023      	str	r3, [r4, #0]
 8012676:	bd38      	pop	{r3, r4, r5, pc}
 8012678:	24004f08 	.word	0x24004f08

0801267c <__assert_func>:
 801267c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801267e:	4614      	mov	r4, r2
 8012680:	461a      	mov	r2, r3
 8012682:	4b09      	ldr	r3, [pc, #36]	@ (80126a8 <__assert_func+0x2c>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	4605      	mov	r5, r0
 8012688:	68d8      	ldr	r0, [r3, #12]
 801268a:	b14c      	cbz	r4, 80126a0 <__assert_func+0x24>
 801268c:	4b07      	ldr	r3, [pc, #28]	@ (80126ac <__assert_func+0x30>)
 801268e:	9100      	str	r1, [sp, #0]
 8012690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012694:	4906      	ldr	r1, [pc, #24]	@ (80126b0 <__assert_func+0x34>)
 8012696:	462b      	mov	r3, r5
 8012698:	f000 f892 	bl	80127c0 <fiprintf>
 801269c:	f000 f8a2 	bl	80127e4 <abort>
 80126a0:	4b04      	ldr	r3, [pc, #16]	@ (80126b4 <__assert_func+0x38>)
 80126a2:	461c      	mov	r4, r3
 80126a4:	e7f3      	b.n	801268e <__assert_func+0x12>
 80126a6:	bf00      	nop
 80126a8:	24000198 	.word	0x24000198
 80126ac:	08012c43 	.word	0x08012c43
 80126b0:	08012c50 	.word	0x08012c50
 80126b4:	08012c7e 	.word	0x08012c7e

080126b8 <_calloc_r>:
 80126b8:	b570      	push	{r4, r5, r6, lr}
 80126ba:	fba1 5402 	umull	r5, r4, r1, r2
 80126be:	b934      	cbnz	r4, 80126ce <_calloc_r+0x16>
 80126c0:	4629      	mov	r1, r5
 80126c2:	f7fb f9db 	bl	800da7c <_malloc_r>
 80126c6:	4606      	mov	r6, r0
 80126c8:	b928      	cbnz	r0, 80126d6 <_calloc_r+0x1e>
 80126ca:	4630      	mov	r0, r6
 80126cc:	bd70      	pop	{r4, r5, r6, pc}
 80126ce:	220c      	movs	r2, #12
 80126d0:	6002      	str	r2, [r0, #0]
 80126d2:	2600      	movs	r6, #0
 80126d4:	e7f9      	b.n	80126ca <_calloc_r+0x12>
 80126d6:	462a      	mov	r2, r5
 80126d8:	4621      	mov	r1, r4
 80126da:	f7fd f8e3 	bl	800f8a4 <memset>
 80126de:	e7f4      	b.n	80126ca <_calloc_r+0x12>

080126e0 <_strtoul_l.isra.0>:
 80126e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126e4:	4e34      	ldr	r6, [pc, #208]	@ (80127b8 <_strtoul_l.isra.0+0xd8>)
 80126e6:	4686      	mov	lr, r0
 80126e8:	460d      	mov	r5, r1
 80126ea:	4628      	mov	r0, r5
 80126ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126f0:	5d37      	ldrb	r7, [r6, r4]
 80126f2:	f017 0708 	ands.w	r7, r7, #8
 80126f6:	d1f8      	bne.n	80126ea <_strtoul_l.isra.0+0xa>
 80126f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80126fa:	d110      	bne.n	801271e <_strtoul_l.isra.0+0x3e>
 80126fc:	782c      	ldrb	r4, [r5, #0]
 80126fe:	2701      	movs	r7, #1
 8012700:	1c85      	adds	r5, r0, #2
 8012702:	f033 0010 	bics.w	r0, r3, #16
 8012706:	d115      	bne.n	8012734 <_strtoul_l.isra.0+0x54>
 8012708:	2c30      	cmp	r4, #48	@ 0x30
 801270a:	d10d      	bne.n	8012728 <_strtoul_l.isra.0+0x48>
 801270c:	7828      	ldrb	r0, [r5, #0]
 801270e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012712:	2858      	cmp	r0, #88	@ 0x58
 8012714:	d108      	bne.n	8012728 <_strtoul_l.isra.0+0x48>
 8012716:	786c      	ldrb	r4, [r5, #1]
 8012718:	3502      	adds	r5, #2
 801271a:	2310      	movs	r3, #16
 801271c:	e00a      	b.n	8012734 <_strtoul_l.isra.0+0x54>
 801271e:	2c2b      	cmp	r4, #43	@ 0x2b
 8012720:	bf04      	itt	eq
 8012722:	782c      	ldrbeq	r4, [r5, #0]
 8012724:	1c85      	addeq	r5, r0, #2
 8012726:	e7ec      	b.n	8012702 <_strtoul_l.isra.0+0x22>
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1f6      	bne.n	801271a <_strtoul_l.isra.0+0x3a>
 801272c:	2c30      	cmp	r4, #48	@ 0x30
 801272e:	bf14      	ite	ne
 8012730:	230a      	movne	r3, #10
 8012732:	2308      	moveq	r3, #8
 8012734:	f04f 38ff 	mov.w	r8, #4294967295
 8012738:	2600      	movs	r6, #0
 801273a:	fbb8 f8f3 	udiv	r8, r8, r3
 801273e:	fb03 f908 	mul.w	r9, r3, r8
 8012742:	ea6f 0909 	mvn.w	r9, r9
 8012746:	4630      	mov	r0, r6
 8012748:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801274c:	f1bc 0f09 	cmp.w	ip, #9
 8012750:	d810      	bhi.n	8012774 <_strtoul_l.isra.0+0x94>
 8012752:	4664      	mov	r4, ip
 8012754:	42a3      	cmp	r3, r4
 8012756:	dd1e      	ble.n	8012796 <_strtoul_l.isra.0+0xb6>
 8012758:	f1b6 3fff 	cmp.w	r6, #4294967295
 801275c:	d007      	beq.n	801276e <_strtoul_l.isra.0+0x8e>
 801275e:	4580      	cmp	r8, r0
 8012760:	d316      	bcc.n	8012790 <_strtoul_l.isra.0+0xb0>
 8012762:	d101      	bne.n	8012768 <_strtoul_l.isra.0+0x88>
 8012764:	45a1      	cmp	r9, r4
 8012766:	db13      	blt.n	8012790 <_strtoul_l.isra.0+0xb0>
 8012768:	fb00 4003 	mla	r0, r0, r3, r4
 801276c:	2601      	movs	r6, #1
 801276e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012772:	e7e9      	b.n	8012748 <_strtoul_l.isra.0+0x68>
 8012774:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012778:	f1bc 0f19 	cmp.w	ip, #25
 801277c:	d801      	bhi.n	8012782 <_strtoul_l.isra.0+0xa2>
 801277e:	3c37      	subs	r4, #55	@ 0x37
 8012780:	e7e8      	b.n	8012754 <_strtoul_l.isra.0+0x74>
 8012782:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012786:	f1bc 0f19 	cmp.w	ip, #25
 801278a:	d804      	bhi.n	8012796 <_strtoul_l.isra.0+0xb6>
 801278c:	3c57      	subs	r4, #87	@ 0x57
 801278e:	e7e1      	b.n	8012754 <_strtoul_l.isra.0+0x74>
 8012790:	f04f 36ff 	mov.w	r6, #4294967295
 8012794:	e7eb      	b.n	801276e <_strtoul_l.isra.0+0x8e>
 8012796:	1c73      	adds	r3, r6, #1
 8012798:	d106      	bne.n	80127a8 <_strtoul_l.isra.0+0xc8>
 801279a:	2322      	movs	r3, #34	@ 0x22
 801279c:	f8ce 3000 	str.w	r3, [lr]
 80127a0:	4630      	mov	r0, r6
 80127a2:	b932      	cbnz	r2, 80127b2 <_strtoul_l.isra.0+0xd2>
 80127a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127a8:	b107      	cbz	r7, 80127ac <_strtoul_l.isra.0+0xcc>
 80127aa:	4240      	negs	r0, r0
 80127ac:	2a00      	cmp	r2, #0
 80127ae:	d0f9      	beq.n	80127a4 <_strtoul_l.isra.0+0xc4>
 80127b0:	b106      	cbz	r6, 80127b4 <_strtoul_l.isra.0+0xd4>
 80127b2:	1e69      	subs	r1, r5, #1
 80127b4:	6011      	str	r1, [r2, #0]
 80127b6:	e7f5      	b.n	80127a4 <_strtoul_l.isra.0+0xc4>
 80127b8:	08012cd1 	.word	0x08012cd1

080127bc <_strtoul_r>:
 80127bc:	f7ff bf90 	b.w	80126e0 <_strtoul_l.isra.0>

080127c0 <fiprintf>:
 80127c0:	b40e      	push	{r1, r2, r3}
 80127c2:	b503      	push	{r0, r1, lr}
 80127c4:	4601      	mov	r1, r0
 80127c6:	ab03      	add	r3, sp, #12
 80127c8:	4805      	ldr	r0, [pc, #20]	@ (80127e0 <fiprintf+0x20>)
 80127ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80127ce:	6800      	ldr	r0, [r0, #0]
 80127d0:	9301      	str	r3, [sp, #4]
 80127d2:	f7ff fb2f 	bl	8011e34 <_vfiprintf_r>
 80127d6:	b002      	add	sp, #8
 80127d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80127dc:	b003      	add	sp, #12
 80127de:	4770      	bx	lr
 80127e0:	24000198 	.word	0x24000198

080127e4 <abort>:
 80127e4:	b508      	push	{r3, lr}
 80127e6:	2006      	movs	r0, #6
 80127e8:	f000 f82c 	bl	8012844 <raise>
 80127ec:	2001      	movs	r0, #1
 80127ee:	f7ef fe13 	bl	8002418 <_exit>

080127f2 <_raise_r>:
 80127f2:	291f      	cmp	r1, #31
 80127f4:	b538      	push	{r3, r4, r5, lr}
 80127f6:	4605      	mov	r5, r0
 80127f8:	460c      	mov	r4, r1
 80127fa:	d904      	bls.n	8012806 <_raise_r+0x14>
 80127fc:	2316      	movs	r3, #22
 80127fe:	6003      	str	r3, [r0, #0]
 8012800:	f04f 30ff 	mov.w	r0, #4294967295
 8012804:	bd38      	pop	{r3, r4, r5, pc}
 8012806:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012808:	b112      	cbz	r2, 8012810 <_raise_r+0x1e>
 801280a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801280e:	b94b      	cbnz	r3, 8012824 <_raise_r+0x32>
 8012810:	4628      	mov	r0, r5
 8012812:	f000 f831 	bl	8012878 <_getpid_r>
 8012816:	4622      	mov	r2, r4
 8012818:	4601      	mov	r1, r0
 801281a:	4628      	mov	r0, r5
 801281c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012820:	f000 b818 	b.w	8012854 <_kill_r>
 8012824:	2b01      	cmp	r3, #1
 8012826:	d00a      	beq.n	801283e <_raise_r+0x4c>
 8012828:	1c59      	adds	r1, r3, #1
 801282a:	d103      	bne.n	8012834 <_raise_r+0x42>
 801282c:	2316      	movs	r3, #22
 801282e:	6003      	str	r3, [r0, #0]
 8012830:	2001      	movs	r0, #1
 8012832:	e7e7      	b.n	8012804 <_raise_r+0x12>
 8012834:	2100      	movs	r1, #0
 8012836:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801283a:	4620      	mov	r0, r4
 801283c:	4798      	blx	r3
 801283e:	2000      	movs	r0, #0
 8012840:	e7e0      	b.n	8012804 <_raise_r+0x12>
	...

08012844 <raise>:
 8012844:	4b02      	ldr	r3, [pc, #8]	@ (8012850 <raise+0xc>)
 8012846:	4601      	mov	r1, r0
 8012848:	6818      	ldr	r0, [r3, #0]
 801284a:	f7ff bfd2 	b.w	80127f2 <_raise_r>
 801284e:	bf00      	nop
 8012850:	24000198 	.word	0x24000198

08012854 <_kill_r>:
 8012854:	b538      	push	{r3, r4, r5, lr}
 8012856:	4d07      	ldr	r5, [pc, #28]	@ (8012874 <_kill_r+0x20>)
 8012858:	2300      	movs	r3, #0
 801285a:	4604      	mov	r4, r0
 801285c:	4608      	mov	r0, r1
 801285e:	4611      	mov	r1, r2
 8012860:	602b      	str	r3, [r5, #0]
 8012862:	f7ef fdc9 	bl	80023f8 <_kill>
 8012866:	1c43      	adds	r3, r0, #1
 8012868:	d102      	bne.n	8012870 <_kill_r+0x1c>
 801286a:	682b      	ldr	r3, [r5, #0]
 801286c:	b103      	cbz	r3, 8012870 <_kill_r+0x1c>
 801286e:	6023      	str	r3, [r4, #0]
 8012870:	bd38      	pop	{r3, r4, r5, pc}
 8012872:	bf00      	nop
 8012874:	24004f08 	.word	0x24004f08

08012878 <_getpid_r>:
 8012878:	f7ef bdb6 	b.w	80023e8 <_getpid>

0801287c <_init>:
 801287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801287e:	bf00      	nop
 8012880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012882:	bc08      	pop	{r3}
 8012884:	469e      	mov	lr, r3
 8012886:	4770      	bx	lr

08012888 <_fini>:
 8012888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801288a:	bf00      	nop
 801288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801288e:	bc08      	pop	{r3}
 8012890:	469e      	mov	lr, r3
 8012892:	4770      	bx	lr
