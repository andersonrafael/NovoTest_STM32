
NovoTEst_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bd4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08012e78  08012e78  00013e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013480  08013480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013488  08013488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801348c  0801348c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08013490  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d24  240001e8  08013678  000151e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004f0c  08013678  00015f0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026e40  00000000  00000000  00015216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d21  00000000  00000000  0003c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f58  00000000  00000000  00040d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001894  00000000  00000000  00042cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1d6  00000000  00000000  00044564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028a17  00000000  00000000  0008173a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178f8d  00000000  00000000  000aa151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002230de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b2c  00000000  00000000  00223124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0022cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012e5c 	.word	0x08012e5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08012e5c 	.word	0x08012e5c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e015      	b.n	8000aec <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fc5d 	bl	8000380 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	4798      	blx	r3
 8000ad4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e005      	b.n	8000aec <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f00f fa6e 	bl	800ffc6 <memcpy>

    return copy;
 8000aea:	68bb      	ldr	r3, [r7, #8]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2028      	movs	r0, #40	@ 0x28
 8000b02:	4798      	blx	r3
 8000b04:	60f8      	str	r0, [r7, #12]
    if (node)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000b0c:	2228      	movs	r2, #40	@ 0x28
 8000b0e:	2100      	movs	r1, #0
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f00f f9b7 	bl	800fe84 <memset>
    }

    return node;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000b2c:	e03d      	b.n	8000baa <cJSON_Delete+0x8a>
    {
        next = item->next;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <cJSON_Delete+0x32>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffe7 	bl	8000b20 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10c      	bne.n	8000b78 <cJSON_Delete+0x58>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d008      	beq.n	8000b78 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6912      	ldr	r2, [r2, #16]
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4798      	blx	r3
            item->valuestring = NULL;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10c      	bne.n	8000b9e <cJSON_Delete+0x7e>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d008      	beq.n	8000b9e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6a12      	ldr	r2, [r2, #32]
 8000b94:	4610      	mov	r0, r2
 8000b96:	4798      	blx	r3
            item->string = NULL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	4798      	blx	r3
        item = next;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1be      	bne.n	8000b2e <cJSON_Delete+0xe>
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000000 	.word	0x24000000

08000bc0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000bc4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <ensure+0x20>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <ensure+0x24>
    {
        return NULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e083      	b.n	8000cfc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <ensure+0x3c>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d301      	bcc.n	8000c0c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e077      	b.n	8000cfc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da01      	bge.n	8000c16 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e072      	b.n	8000cfc <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d805      	bhi.n	8000c38 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	e061      	b.n	8000cfc <ensure+0x12c>
    }

    if (p->noalloc) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ensure+0x74>
        return NULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e05b      	b.n	8000cfc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c4a:	d308      	bcc.n	8000c5e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db03      	blt.n	8000c5a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8000c52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e004      	b.n	8000c64 <ensure+0x94>
        }
        else
        {
            return NULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e04e      	b.n	8000cfc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	4610      	mov	r0, r2
 8000c78:	4798      	blx	r3
 8000c7a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d132      	bne.n	8000ce8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4798      	blx	r3
            p->length = 0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]

            return NULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e02e      	b.n	8000cfc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	4798      	blx	r3
 8000ca6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10d      	bne.n	8000cca <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4798      	blx	r3
            p->length = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

            return NULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e018      	b.n	8000cfc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f00f f975 	bl	800ffc6 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4798      	blx	r3
    }
    p->length = newsize;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4413      	add	r3, r2
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d013      	beq.n	8000d3e <update_offset+0x3a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00f      	beq.n	8000d3e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689c      	ldr	r4, [r3, #8]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fb26 	bl	8000380 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	18e2      	adds	r2, r4, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	e000      	b.n	8000d40 <update_offset+0x3c>
        return;
 8000d3e:	bf00      	nop
}
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d52:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8000d56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d5a:	eeb0 6bc7 	vabs.f64	d6, d7
 8000d5e:	ed97 7b00 	vldr	d7, [r7]
 8000d62:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dd04      	ble.n	8000d7a <compare_double+0x32>
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d78:	e003      	b.n	8000d82 <compare_double+0x3a>
 8000d7a:	ed97 7b00 	vldr	d7, [r7]
 8000d7e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d82:	ed87 7b04 	vstr	d7, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8000d86:	ed97 6b02 	vldr	d6, [r7, #8]
 8000d8a:	ed97 7b00 	vldr	d7, [r7]
 8000d8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d92:	eeb0 6bc7 	vabs.f64	d6, d7
 8000d96:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d9a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000dc0 <compare_double+0x78>
 8000d9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000da2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	3cb00000 	.word	0x3cb00000

08000dc8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	@ 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ddc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8000dfc:	f7ff fee0 	bl	8000bc0 <get_decimal_point>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <print_number+0x54>
    {
        return false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e0a2      	b.n	8000f62 <print_number+0x19a>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8000e1c:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000e20:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e24:	eeb4 6b47 	vcmp.f64	d6, d7
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	d612      	bvs.n	8000e54 <print_number+0x8c>
 8000e2e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e32:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e36:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8000f70 <print_number+0x1a8>
 8000e3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	bfd4      	ite	le
 8000e44:	2301      	movle	r3, #1
 8000e46:	2300      	movgt	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f083 0301 	eor.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d007      	beq.n	8000e64 <print_number+0x9c>
    {
        length = sprintf((char*)number_buffer, "null");
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4947      	ldr	r1, [pc, #284]	@ (8000f78 <print_number+0x1b0>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00e feea 	bl	800fc34 <siprintf>
 8000e60:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e62:	e03c      	b.n	8000ede <print_number+0x116>
    }
    else if(d == (double)item->valueint)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e70:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000e74:	eeb4 6b47 	vcmp.f64	d6, d7
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d109      	bne.n	8000e92 <print_number+0xca>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	493d      	ldr	r1, [pc, #244]	@ (8000f7c <print_number+0x1b4>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00e fed3 	bl	800fc34 <siprintf>
 8000e8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e90:	e025      	b.n	8000ede <print_number+0x116>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8000e92:	f107 0014 	add.w	r0, r7, #20
 8000e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e9a:	4939      	ldr	r1, [pc, #228]	@ (8000f80 <print_number+0x1b8>)
 8000e9c:	f00e feca 	bl	800fc34 <siprintf>
 8000ea0:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <print_number+0x1bc>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00e fee3 	bl	800fc78 <siscanf>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10a      	bne.n	8000ece <print_number+0x106>
 8000eb8:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ebc:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec4:	f7ff ff40 	bl	8000d48 <compare_double>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <print_number+0x116>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8000ece:	f107 0014 	add.w	r0, r7, #20
 8000ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ed6:	492c      	ldr	r1, [pc, #176]	@ (8000f88 <print_number+0x1c0>)
 8000ed8:	f00e feac 	bl	800fc34 <siprintf>
 8000edc:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db02      	blt.n	8000eea <print_number+0x122>
 8000ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee6:	2b19      	cmp	r3, #25
 8000ee8:	dd01      	ble.n	8000eee <print_number+0x126>
    {
        return false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e039      	b.n	8000f62 <print_number+0x19a>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8000eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f7ff fe6b 	bl	8000bd0 <ensure>
 8000efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8000efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <print_number+0x13e>
    {
        return false;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e02d      	b.n	8000f62 <print_number+0x19a>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f0a:	e01a      	b.n	8000f42 <print_number+0x17a>
    {
        if (number_buffer[i] == decimal_point)
 8000f0c:	f107 0214 	add.w	r2, r7, #20
 8000f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d105      	bne.n	8000f2a <print_number+0x162>
        {
            output_pointer[i] = '.';
 8000f1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f22:	4413      	add	r3, r2
 8000f24:	222e      	movs	r2, #46	@ 0x2e
 8000f26:	701a      	strb	r2, [r3, #0]
            continue;
 8000f28:	e008      	b.n	8000f3c <print_number+0x174>
        }

        output_pointer[i] = number_buffer[i];
 8000f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f2e:	4413      	add	r3, r2
 8000f30:	f107 0114 	add.w	r1, r7, #20
 8000f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f36:	440a      	add	r2, r1
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f3e:	3301      	adds	r3, #1
 8000f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3e0      	bcc.n	8000f0c <print_number+0x144>
    }
    output_pointer[i] = '\0';
 8000f4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f4e:	4413      	add	r3, r2
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f5a:	441a      	add	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	609a      	str	r2, [r3, #8]

    return true;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3748      	adds	r7, #72	@ 0x48
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	ffffffff 	.word	0xffffffff
 8000f74:	7fefffff 	.word	0x7fefffff
 8000f78:	08012e84 	.word	0x08012e84
 8000f7c:	08012e8c 	.word	0x08012e8c
 8000f80:	08012e90 	.word	0x08012e90
 8000f84:	08012e98 	.word	0x08012e98
 8000f88:	08012e9c 	.word	0x08012e9c

08000f8c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <print_string_ptr+0x28>
    {
        return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e110      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d111      	bne.n	8000fde <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8000fba:	2103      	movs	r1, #3
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff fe07 	bl	8000bd0 <ensure>
 8000fc2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <print_string_ptr+0x42>
        {
            return false;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e103      	b.n	80011d6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4a83      	ldr	r2, [pc, #524]	@ (80011e0 <print_string_ptr+0x254>)
 8000fd2:	8811      	ldrh	r1, [r2, #0]
 8000fd4:	7892      	ldrb	r2, [r2, #2]
 8000fd6:	8019      	strh	r1, [r3, #0]
 8000fd8:	709a      	strb	r2, [r3, #2]

        return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0fb      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e024      	b.n	800102e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b22      	cmp	r3, #34	@ 0x22
 8000fea:	dc0f      	bgt.n	800100c <print_string_ptr+0x80>
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	db13      	blt.n	8001018 <print_string_ptr+0x8c>
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80011e4 <print_string_ptr+0x258>)
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <print_string_ptr+0x84>
 800100a:	e005      	b.n	8001018 <print_string_ptr+0x8c>
 800100c:	2b5c      	cmp	r3, #92	@ 0x5c
 800100e:	d103      	bne.n	8001018 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
                break;
 8001016:	e007      	b.n	8001028 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b1f      	cmp	r3, #31
 800101e:	d802      	bhi.n	8001026 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3305      	adds	r3, #5
 8001024:	617b      	str	r3, [r7, #20]
                }
                break;
 8001026:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3301      	adds	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1d6      	bne.n	8000fe4 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	461a      	mov	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3303      	adds	r3, #3
 8001048:	4619      	mov	r1, r3
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f7ff fdc0 	bl	8000bd0 <ensure>
 8001050:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <print_string_ptr+0xd0>
    {
        return false;
 8001058:	2300      	movs	r3, #0
 800105a:	e0bc      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d117      	bne.n	8001092 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2222      	movs	r2, #34	@ 0x22
 8001066:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f00e ffa8 	bl	800ffc6 <memcpy>
        output[output_length + 1] = '\"';
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	2222      	movs	r2, #34	@ 0x22
 8001080:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

        return true;
 800108e:	2301      	movs	r3, #1
 8001090:	e0a1      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2222      	movs	r2, #34	@ 0x22
 8001096:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	3301      	adds	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e086      	b.n	80011b2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	d90c      	bls.n	80010c6 <print_string_ptr+0x13a>
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b22      	cmp	r3, #34	@ 0x22
 80010b2:	d008      	beq.n	80010c6 <print_string_ptr+0x13a>
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80010ba:	d004      	beq.n	80010c6 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e06f      	b.n	80011a6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	61ba      	str	r2, [r7, #24]
 80010cc:	225c      	movs	r2, #92	@ 0x5c
 80010ce:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b22      	cmp	r3, #34	@ 0x22
 80010d6:	dc3d      	bgt.n	8001154 <print_string_ptr+0x1c8>
 80010d8:	2b08      	cmp	r3, #8
 80010da:	db59      	blt.n	8001190 <print_string_ptr+0x204>
 80010dc:	3b08      	subs	r3, #8
 80010de:	2b1a      	cmp	r3, #26
 80010e0:	d856      	bhi.n	8001190 <print_string_ptr+0x204>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <print_string_ptr+0x15c>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001169 	.word	0x08001169
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001179 	.word	0x08001179
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001171 	.word	0x08001171
 80010fc:	08001181 	.word	0x08001181
 8001100:	08001191 	.word	0x08001191
 8001104:	08001191 	.word	0x08001191
 8001108:	08001191 	.word	0x08001191
 800110c:	08001191 	.word	0x08001191
 8001110:	08001191 	.word	0x08001191
 8001114:	08001191 	.word	0x08001191
 8001118:	08001191 	.word	0x08001191
 800111c:	08001191 	.word	0x08001191
 8001120:	08001191 	.word	0x08001191
 8001124:	08001191 	.word	0x08001191
 8001128:	08001191 	.word	0x08001191
 800112c:	08001191 	.word	0x08001191
 8001130:	08001191 	.word	0x08001191
 8001134:	08001191 	.word	0x08001191
 8001138:	08001191 	.word	0x08001191
 800113c:	08001191 	.word	0x08001191
 8001140:	08001191 	.word	0x08001191
 8001144:	08001191 	.word	0x08001191
 8001148:	08001191 	.word	0x08001191
 800114c:	08001191 	.word	0x08001191
 8001150:	08001161 	.word	0x08001161
 8001154:	2b5c      	cmp	r3, #92	@ 0x5c
 8001156:	d11b      	bne.n	8001190 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	225c      	movs	r2, #92	@ 0x5c
 800115c:	701a      	strb	r2, [r3, #0]
                    break;
 800115e:	e022      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2222      	movs	r2, #34	@ 0x22
 8001164:	701a      	strb	r2, [r3, #0]
                    break;
 8001166:	e01e      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2262      	movs	r2, #98	@ 0x62
 800116c:	701a      	strb	r2, [r3, #0]
                    break;
 800116e:	e01a      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2266      	movs	r2, #102	@ 0x66
 8001174:	701a      	strb	r2, [r3, #0]
                    break;
 8001176:	e016      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	226e      	movs	r2, #110	@ 0x6e
 800117c:	701a      	strb	r2, [r3, #0]
                    break;
 800117e:	e012      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2272      	movs	r2, #114	@ 0x72
 8001184:	701a      	strb	r2, [r3, #0]
                    break;
 8001186:	e00e      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2274      	movs	r2, #116	@ 0x74
 800118c:	701a      	strb	r2, [r3, #0]
                    break;
 800118e:	e00a      	b.n	80011a6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4914      	ldr	r1, [pc, #80]	@ (80011e8 <print_string_ptr+0x25c>)
 8001198:	69b8      	ldr	r0, [r7, #24]
 800119a:	f00e fd4b 	bl	800fc34 <siprintf>
                    output_pointer += 4;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3304      	adds	r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
                    break;
 80011a4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f af74 	bne.w	80010a4 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	2222      	movs	r2, #34	@ 0x22
 80011c6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3302      	adds	r3, #2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4413      	add	r3, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

    return true;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	08012ea4 	.word	0x08012ea4
 80011e4:	04000037 	.word	0x04000037
 80011e8:	08012ea8 	.word	0x08012ea8

080011ec <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fec5 	bl	8000f8c <print_string_ptr>
 8001202:	4603      	mov	r3, r0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	@ 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2224      	movs	r2, #36	@ 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00e fe2d 	bl	800fe84 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a3b      	ldr	r2, [pc, #236]	@ (800131c <print+0x110>)
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	4610      	mov	r0, r2
 8001234:	4798      	blx	r3
 8001236:	4603      	mov	r3, r0
 8001238:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <print+0x110>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	ca07      	ldmia	r2, {r0, r1, r2}
 800124c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d042      	beq.n	80012dc <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f86f 	bl	8001340 <print_value>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03b      	beq.n	80012e0 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fd49 	bl	8000d04 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	3201      	adds	r2, #1
 8001284:	4611      	mov	r1, r2
 8001286:	4798      	blx	r3
 8001288:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800128a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800128c:	2b00      	cmp	r3, #0
 800128e:	d029      	beq.n	80012e4 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e020      	b.n	80012d8 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	3201      	adds	r2, #1
 800129e:	4610      	mov	r0, r2
 80012a0:	4798      	blx	r3
 80012a2:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 80012a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01e      	beq.n	80012e8 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	bf28      	it	cs
 80012b6:	4613      	movcs	r3, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012bc:	f00e fe83 	bl	800ffc6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012c4:	4413      	add	r3, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4610      	mov	r0, r2
 80012d2:	4798      	blx	r3
        buffer->buffer = NULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80012d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012da:	e01a      	b.n	8001312 <print+0x106>
        goto fail;
 80012dc:	bf00      	nop
 80012de:	e004      	b.n	80012ea <print+0xde>
        goto fail;
 80012e0:	bf00      	nop
 80012e2:	e002      	b.n	80012ea <print+0xde>
            goto fail;
 80012e4:	bf00      	nop
 80012e6:	e000      	b.n	80012ea <print+0xde>
            goto fail;
 80012e8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4610      	mov	r0, r2
 80012f8:	4798      	blx	r3
        buffer->buffer = NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <print+0x104>
    {
        hooks->deallocate(printed);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800130a:	4798      	blx	r3
        printed = NULL;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3738      	adds	r7, #56	@ 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	08012f9c 	.word	0x08012f9c

08001320 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <cJSON_Print+0x1c>)
 800132a:	2101      	movs	r1, #1
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff6d 	bl	800120c <print>
 8001332:	4603      	mov	r3, r0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24000000 	.word	0x24000000

08001340 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <print_value+0x1a>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <print_value+0x1e>
    {
        return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e0c9      	b.n	80014f2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b80      	cmp	r3, #128	@ 0x80
 8001366:	f000 808e 	beq.w	8001486 <print_value+0x146>
 800136a:	2b80      	cmp	r3, #128	@ 0x80
 800136c:	f300 80c0 	bgt.w	80014f0 <print_value+0x1b0>
 8001370:	2b20      	cmp	r3, #32
 8001372:	dc49      	bgt.n	8001408 <print_value+0xc8>
 8001374:	2b00      	cmp	r3, #0
 8001376:	f340 80bb 	ble.w	80014f0 <print_value+0x1b0>
 800137a:	3b01      	subs	r3, #1
 800137c:	2b1f      	cmp	r3, #31
 800137e:	f200 80b7 	bhi.w	80014f0 <print_value+0x1b0>
 8001382:	a201      	add	r2, pc, #4	@ (adr r2, 8001388 <print_value+0x48>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001433 	.word	0x08001433
 800138c:	08001457 	.word	0x08001457
 8001390:	080014f1 	.word	0x080014f1
 8001394:	0800140f 	.word	0x0800140f
 8001398:	080014f1 	.word	0x080014f1
 800139c:	080014f1 	.word	0x080014f1
 80013a0:	080014f1 	.word	0x080014f1
 80013a4:	0800147b 	.word	0x0800147b
 80013a8:	080014f1 	.word	0x080014f1
 80013ac:	080014f1 	.word	0x080014f1
 80013b0:	080014f1 	.word	0x080014f1
 80013b4:	080014f1 	.word	0x080014f1
 80013b8:	080014f1 	.word	0x080014f1
 80013bc:	080014f1 	.word	0x080014f1
 80013c0:	080014f1 	.word	0x080014f1
 80013c4:	080014cd 	.word	0x080014cd
 80013c8:	080014f1 	.word	0x080014f1
 80013cc:	080014f1 	.word	0x080014f1
 80013d0:	080014f1 	.word	0x080014f1
 80013d4:	080014f1 	.word	0x080014f1
 80013d8:	080014f1 	.word	0x080014f1
 80013dc:	080014f1 	.word	0x080014f1
 80013e0:	080014f1 	.word	0x080014f1
 80013e4:	080014f1 	.word	0x080014f1
 80013e8:	080014f1 	.word	0x080014f1
 80013ec:	080014f1 	.word	0x080014f1
 80013f0:	080014f1 	.word	0x080014f1
 80013f4:	080014f1 	.word	0x080014f1
 80013f8:	080014f1 	.word	0x080014f1
 80013fc:	080014f1 	.word	0x080014f1
 8001400:	080014f1 	.word	0x080014f1
 8001404:	080014d9 	.word	0x080014d9
 8001408:	2b40      	cmp	r3, #64	@ 0x40
 800140a:	d06b      	beq.n	80014e4 <print_value+0x1a4>
 800140c:	e070      	b.n	80014f0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800140e:	2105      	movs	r1, #5
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f7ff fbdd 	bl	8000bd0 <ensure>
 8001416:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <print_value+0xe2>
            {
                return false;
 800141e:	2300      	movs	r3, #0
 8001420:	e067      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <print_value+0x1bc>)
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	6018      	str	r0, [r3, #0]
 800142a:	7912      	ldrb	r2, [r2, #4]
 800142c:	711a      	strb	r2, [r3, #4]
            return true;
 800142e:	2301      	movs	r3, #1
 8001430:	e05f      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001432:	2106      	movs	r1, #6
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f7ff fbcb 	bl	8000bd0 <ensure>
 800143a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <print_value+0x106>
            {
                return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e055      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <print_value+0x1c0>)
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	6018      	str	r0, [r3, #0]
 800144e:	8892      	ldrh	r2, [r2, #4]
 8001450:	809a      	strh	r2, [r3, #4]
            return true;
 8001452:	2301      	movs	r3, #1
 8001454:	e04d      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8001456:	2105      	movs	r1, #5
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff fbb9 	bl	8000bd0 <ensure>
 800145e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <print_value+0x12a>
            {
                return false;
 8001466:	2300      	movs	r3, #0
 8001468:	e043      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <print_value+0x1c4>)
 800146e:	6810      	ldr	r0, [r2, #0]
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	7912      	ldrb	r2, [r2, #4]
 8001474:	711a      	strb	r2, [r3, #4]
            return true;
 8001476:	2301      	movs	r3, #1
 8001478:	e03b      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fca3 	bl	8000dc8 <print_number>
 8001482:	4603      	mov	r3, r0
 8001484:	e035      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <print_value+0x156>
            {
                return false;
 8001492:	2300      	movs	r3, #0
 8001494:	e02d      	b.n	80014f2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff70 	bl	8000380 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	3301      	adds	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f7ff fb91 	bl	8000bd0 <ensure>
 80014ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <print_value+0x17a>
            {
                return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e01b      	b.n	80014f2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4619      	mov	r1, r3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f00e fd7f 	bl	800ffc6 <memcpy>
            return true;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e012      	b.n	80014f2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fe8c 	bl	80011ec <print_string>
 80014d4:	4603      	mov	r3, r0
 80014d6:	e00c      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f814 	bl	8001508 <print_array>
 80014e0:	4603      	mov	r3, r0
 80014e2:	e006      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f894 	bl	8001614 <print_object>
 80014ec:	4603      	mov	r3, r0
 80014ee:	e000      	b.n	80014f2 <print_value+0x1b2>

        default:
            return false;
 80014f0:	2300      	movs	r3, #0
    }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08012e84 	.word	0x08012e84
 8001500:	08012eb4 	.word	0x08012eb4
 8001504:	08012ebc 	.word	0x08012ebc

08001508 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <print_array+0x22>
    {
        return false;
 8001526:	2300      	movs	r3, #0
 8001528:	e070      	b.n	800160c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800152a:	2101      	movs	r1, #1
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff fb4f 	bl	8000bd0 <ensure>
 8001532:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <print_array+0x36>
    {
        return false;
 800153a:	2300      	movs	r3, #0
 800153c:	e066      	b.n	800160c <print_array+0x104>
    }

    *output_pointer = '[';
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	225b      	movs	r2, #91	@ 0x5b
 8001542:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001558:	e03d      	b.n	80015d6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	6938      	ldr	r0, [r7, #16]
 800155e:	f7ff feef 	bl	8001340 <print_value>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <print_array+0x64>
        {
            return false;
 8001568:	2300      	movs	r3, #0
 800156a:	e04f      	b.n	800160c <print_array+0x104>
        }
        update_offset(output_buffer);
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7ff fbc9 	bl	8000d04 <update_offset>
        if (current_element->next)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d02a      	beq.n	80015d0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <print_array+0x7e>
 8001582:	2302      	movs	r3, #2
 8001584:	e000      	b.n	8001588 <print_array+0x80>
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	4619      	mov	r1, r3
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f7ff fb1d 	bl	8000bd0 <ensure>
 8001596:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <print_array+0x9a>
            {
                return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e034      	b.n	800160c <print_array+0x104>
            }
            *output_pointer++ = ',';
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	617a      	str	r2, [r7, #20]
 80015a8:	222c      	movs	r2, #44	@ 0x2c
 80015aa:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	617a      	str	r2, [r7, #20]
 80015ba:	2220      	movs	r2, #32
 80015bc:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	441a      	add	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1be      	bne.n	800155a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80015dc:	2102      	movs	r1, #2
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff faf6 	bl	8000bd0 <ensure>
 80015e4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <print_array+0xe8>
    {
        return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e00d      	b.n	800160c <print_array+0x104>
    }
    *output_pointer++ = ']';
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	617a      	str	r2, [r7, #20]
 80015f6:	225d      	movs	r2, #93	@ 0x5d
 80015f8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	60da      	str	r2, [r3, #12]

    return true;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <print_object+0x22>
    {
        return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e108      	b.n	8001848 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <print_object+0x2e>
 800163e:	2302      	movs	r3, #2
 8001640:	e000      	b.n	8001644 <print_object+0x30>
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	4619      	mov	r1, r3
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f7ff fabf 	bl	8000bd0 <ensure>
 8001652:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <print_object+0x4a>
    {
        return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e0f4      	b.n	8001848 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	61fa      	str	r2, [r7, #28]
 8001664:	227b      	movs	r2, #123	@ 0x7b
 8001666:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	61fa      	str	r2, [r7, #28]
 8001680:	220a      	movs	r2, #10
 8001682:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	441a      	add	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001690:	e0a0      	b.n	80017d4 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d022      	beq.n	80016e0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4619      	mov	r1, r3
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7ff fa95 	bl	8000bd0 <ensure>
 80016a6:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <print_object+0x9e>
            {
                return false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e0ca      	b.n	8001848 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e007      	b.n	80016c8 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	61fa      	str	r2, [r7, #28]
 80016be:	2209      	movs	r2, #9
 80016c0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3f2      	bcc.n	80016b8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	441a      	add	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc50 	bl	8000f8c <print_string_ptr>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <print_object+0xe2>
        {
            return false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e0a8      	b.n	8001848 <print_object+0x234>
        }
        update_offset(output_buffer);
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f7ff fb04 	bl	8000d04 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <print_object+0xf4>
 8001704:	2302      	movs	r3, #2
 8001706:	e000      	b.n	800170a <print_object+0xf6>
 8001708:	2301      	movs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f7ff fa5e 	bl	8000bd0 <ensure>
 8001714:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <print_object+0x10c>
        {
            return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e093      	b.n	8001848 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	223a      	movs	r2, #58	@ 0x3a
 8001728:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	61fa      	str	r2, [r7, #28]
 8001738:	2209      	movs	r2, #9
 800173a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	441a      	add	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	69b8      	ldr	r0, [r7, #24]
 800174c:	f7ff fdf8 	bl	8001340 <print_value>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <print_object+0x146>
        {
            return false;
 8001756:	2300      	movs	r3, #0
 8001758:	e076      	b.n	8001848 <print_object+0x234>
        }
        update_offset(output_buffer);
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f7ff fad2 	bl	8000d04 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <print_object+0x158>
 8001768:	2201      	movs	r2, #1
 800176a:	e000      	b.n	800176e <print_object+0x15a>
 800176c:	2200      	movs	r2, #0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <print_object+0x166>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <print_object+0x168>
 800177a:	2300      	movs	r3, #0
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	4619      	mov	r1, r3
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f7ff fa22 	bl	8000bd0 <ensure>
 800178c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <print_object+0x184>
        {
            return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e057      	b.n	8001848 <print_object+0x234>
        }
        if (current_item->next)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <print_object+0x196>
        {
            *output_pointer++ = ',';
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	61fa      	str	r2, [r7, #28]
 80017a6:	222c      	movs	r2, #44	@ 0x2c
 80017a8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	61fa      	str	r2, [r7, #28]
 80017b8:	220a      	movs	r2, #10
 80017ba:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	441a      	add	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f af5b 	bne.w	8001692 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <print_object+0x1d8>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	e000      	b.n	80017ee <print_object+0x1da>
 80017ec:	2302      	movs	r3, #2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff f9ed 	bl	8000bd0 <ensure>
 80017f6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <print_object+0x1ee>
    {
        return false;
 80017fe:	2300      	movs	r3, #0
 8001800:	e022      	b.n	8001848 <print_object+0x234>
    }
    if (output_buffer->format)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d010      	beq.n	800182c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e007      	b.n	8001820 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	2209      	movs	r2, #9
 8001818:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	3301      	adds	r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	3b01      	subs	r3, #1
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3f1      	bcc.n	8001810 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	61fa      	str	r2, [r7, #28]
 8001832:	227d      	movs	r2, #125	@ 0x7d
 8001834:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	60da      	str	r2, [r3, #12]

    return true;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <add_item_to_array+0x22>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <add_item_to_array+0x22>
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d101      	bne.n	8001898 <add_item_to_array+0x26>
    {
        return false;
 8001894:	2300      	movs	r3, #0
 8001896:	e01e      	b.n	80018d6 <add_item_to_array+0x64>
    }

    child = array->child;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	609a      	str	r2, [r3, #8]
        item->prev = item;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e00d      	b.n	80018d4 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ffc2 	bl	8001850 <suffix_object>
            array->child->prev = item;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <add_item_to_object+0x30>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <add_item_to_object+0x30>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <add_item_to_object+0x30>
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d101      	bne.n	8001928 <add_item_to_object+0x34>
    {
        return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e036      	b.n	8001996 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ffd5 	bl	80018de <cast_away_const>
 8001934:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e00e      	b.n	8001960 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f7ff f8ad 	bl	8000aa4 <cJSON_strdup>
 800194a:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <add_item_to_object+0x62>
        {
            return false;
 8001952:	2300      	movs	r3, #0
 8001954:	e01f      	b.n	8001996 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800195e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <add_item_to_object+0x8c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a12      	ldr	r2, [r2, #32]
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
    }

    item->string = new_key;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff6f 	bl	8001872 <add_item_to_array>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 80019ae:	ed97 0b00 	vldr	d0, [r7]
 80019b2:	f000 f819 	bl	80019e8 <cJSON_CreateNumber>
 80019b6:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <cJSON_AddNumberToObject+0x44>)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ff96 	bl	80018f4 <add_item_to_object>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	e003      	b.n	80019da <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff f8a4 	bl	8000b20 <cJSON_Delete>
    return NULL;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24000000 	.word	0x24000000

080019e8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80019f2:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <cJSON_CreateNumber+0x90>)
 80019f4:	f7ff f87e 	bl	8000af4 <cJSON_New_Item>
 80019f8:	60f8      	str	r0, [r7, #12]
    if(item)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d02b      	beq.n	8001a58 <cJSON_CreateNumber+0x70>
    {
        item->type = cJSON_Number;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2208      	movs	r2, #8
 8001a04:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001a10:	ed97 7b00 	vldr	d7, [r7]
 8001a14:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001a68 <cJSON_CreateNumber+0x80>
 8001a18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	db04      	blt.n	8001a2c <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	e015      	b.n	8001a58 <cJSON_CreateNumber+0x70>
        }
        else if (num <= (double)INT_MIN)
 8001a2c:	ed97 7b00 	vldr	d7, [r7]
 8001a30:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001a70 <cJSON_CreateNumber+0x88>
 8001a34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d804      	bhi.n	8001a48 <cJSON_CreateNumber+0x60>
        {
            item->valueint = INT_MIN;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	e007      	b.n	8001a58 <cJSON_CreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 8001a48:	ed97 7b00 	vldr	d7, [r7]
 8001a4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a50:	ee17 2a90 	vmov	r2, s15
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	ffc00000 	.word	0xffc00000
 8001a6c:	41dfffff 	.word	0x41dfffff
 8001a70:	00000000 	.word	0x00000000
 8001a74:	c1e00000 	.word	0xc1e00000
 8001a78:	24000000 	.word	0x24000000

08001a7c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <cJSON_CreateObject+0x24>)
 8001a84:	f7ff f836 	bl	8000af4 <cJSON_New_Item>
 8001a88:	6078      	str	r0, [r7, #4]
    if (item)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24000000 	.word	0x24000000

08001aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	200b      	movs	r0, #11
 8001ace:	f001 f927 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ad2:	200b      	movs	r0, #11
 8001ad4:	f001 f93e 	bl	8002d54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	200c      	movs	r0, #12
 8001ade:	f001 f91f 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ae2:	200c      	movs	r0, #12
 8001ae4:	f001 f936 	bl	8002d54 <HAL_NVIC_EnableIRQ>

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400

08001af4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorDataQueue */
  sensorDataQueueHandle = osMessageQueueNew (10, sizeof(SensorData_t), &sensorDataQueue_attributes);
 8001af8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <MX_FREERTOS_Init+0x38>)
 8001afa:	210c      	movs	r1, #12
 8001afc:	200a      	movs	r0, #10
 8001afe:	f009 fc02 	bl	800b306 <osMessageQueueNew>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <MX_FREERTOS_Init+0x3c>)
 8001b06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <MX_FREERTOS_Init+0x40>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	480a      	ldr	r0, [pc, #40]	@ (8001b38 <MX_FREERTOS_Init+0x44>)
 8001b0e:	f009 fb4d 	bl	800b1ac <osThreadNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <MX_FREERTOS_Init+0x48>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 8001b18:	4a09      	ldr	r2, [pc, #36]	@ (8001b40 <MX_FREERTOS_Init+0x4c>)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <MX_FREERTOS_Init+0x50>)
 8001b1e:	f009 fb45 	bl	800b1ac <osThreadNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <MX_FREERTOS_Init+0x54>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08012fe8 	.word	0x08012fe8
 8001b30:	2400020c 	.word	0x2400020c
 8001b34:	08012fa0 	.word	0x08012fa0
 8001b38:	08001b4d 	.word	0x08001b4d
 8001b3c:	24000204 	.word	0x24000204
 8001b40:	08012fc4 	.word	0x08012fc4
 8001b44:	08001ba5 	.word	0x08001ba5
 8001b48:	24000208 	.word	0x24000208

08001b4c <StartProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  // Loop infinito da tarefa
  for(;;)
  {
    // 1. Obter a leitura filtrada do ADC
    data_to_send.raw_adc = get_filtered_reading();
 8001b54:	f000 fa16 	bl	8001f84 <get_filtered_reading>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	81bb      	strh	r3, [r7, #12]

    // 2. Converter o valor bruto para tensão e depois para corrente
    data_to_send.voltage_mv = raw_to_voltage_mV(data_to_send.raw_adc);
 8001b5c:	89bb      	ldrh	r3, [r7, #12]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fa34 	bl	8001fcc <raw_to_voltage_mV>
 8001b64:	eef0 7a40 	vmov.f32	s15, s0
 8001b68:	edc7 7a04 	vstr	s15, [r7, #16]
    data_to_send.current_ma = voltage_to_current_mA(data_to_send.voltage_mv);
 8001b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b70:	eeb0 0a67 	vmov.f32	s0, s15
 8001b74:	f000 fa48 	bl	8002008 <voltage_to_current_mA>
 8001b78:	eef0 7a40 	vmov.f32	s15, s0
 8001b7c:	edc7 7a05 	vstr	s15, [r7, #20]

    // 3. Enviar a estrutura de dados completa para a fila
    osMessageQueuePut(sensorDataQueueHandle, &data_to_send, 0U, osWaitForever);
 8001b80:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <StartProducerTask+0x54>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	f107 010c 	add.w	r1, r7, #12
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f009 fc2d 	bl	800b3ec <osMessageQueuePut>

    // 4. Pausar a tarefa. A frequência de atualização será este delay
    // somado ao tempo total da medição (NUM_SAMPLES * 10ms).
    osDelay(1000);
 8001b92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b96:	f009 fb9b 	bl	800b2d0 <osDelay>
    data_to_send.raw_adc = get_filtered_reading();
 8001b9a:	bf00      	nop
 8001b9c:	e7da      	b.n	8001b54 <StartProducerTask+0x8>
 8001b9e:	bf00      	nop
 8001ba0:	2400020c 	.word	0x2400020c

08001ba4 <StartConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  // Loop infinito da tarefa
  for(;;)
  {
    // 1. Esperar para receber um item da fila (a tarefa dorme aqui, economizando CPU)
    status = osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever);
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <StartConsumerTask+0xf8>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	f107 010c 	add.w	r1, r7, #12
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f009 fc77 	bl	800b4ac <osMessageQueueGet>
 8001bbe:	6238      	str	r0, [r7, #32]

    if (status == osOK)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f2      	bne.n	8001bac <StartConsumerTask+0x8>
    {
      // Pisca o LED azul (LD3) para indicar que está a processar e a enviar
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bca:	4835      	ldr	r0, [pc, #212]	@ (8001ca0 <StartConsumerTask+0xfc>)
 8001bcc:	f003 fcbf 	bl	800554e <HAL_GPIO_TogglePin>

      // 2. Calcular a percentagem (lógica de apresentação)
      float percentage = ((received_data.current_ma - MIN_CURRENT_MA) / (MAX_CURRENT_MA - MIN_CURRENT_MA)) * 100.0f;
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001bd8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bdc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001ca4 <StartConsumerTask+0x100>
 8001be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      if (percentage < 0.0f) percentage = 0.0f;
 8001bf0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d502      	bpl.n	8001c04 <StartConsumerTask+0x60>
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
      if (percentage > 100.0f) percentage = 100.0f;
 8001c04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c08:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001ca4 <StartConsumerTask+0x100>
 8001c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	dd01      	ble.n	8001c1a <StartConsumerTask+0x76>
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <StartConsumerTask+0x104>)
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24

      // 3. Criar o objeto JSON
      cJSON *root = cJSON_CreateObject();
 8001c1a:	f7ff ff2f 	bl	8001a7c <cJSON_CreateObject>
 8001c1e:	61f8      	str	r0, [r7, #28]
      if (root != NULL)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0c2      	beq.n	8001bac <StartConsumerTask+0x8>
      {
        cJSON_AddNumberToObject(root, "raw_adc", received_data.raw_adc);
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c30:	eeb0 0b47 	vmov.f64	d0, d7
 8001c34:	491d      	ldr	r1, [pc, #116]	@ (8001cac <StartConsumerTask+0x108>)
 8001c36:	69f8      	ldr	r0, [r7, #28]
 8001c38:	f7ff feb2 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "voltage_mV", received_data.voltage_mv);
 8001c3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c44:	eeb0 0b47 	vmov.f64	d0, d7
 8001c48:	4919      	ldr	r1, [pc, #100]	@ (8001cb0 <StartConsumerTask+0x10c>)
 8001c4a:	69f8      	ldr	r0, [r7, #28]
 8001c4c:	f7ff fea8 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "current_mA", received_data.current_ma);
 8001c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c58:	eeb0 0b47 	vmov.f64	d0, d7
 8001c5c:	4915      	ldr	r1, [pc, #84]	@ (8001cb4 <StartConsumerTask+0x110>)
 8001c5e:	69f8      	ldr	r0, [r7, #28]
 8001c60:	f7ff fe9e 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "percentage", percentage);
 8001c64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c70:	4911      	ldr	r1, [pc, #68]	@ (8001cb8 <StartConsumerTask+0x114>)
 8001c72:	69f8      	ldr	r0, [r7, #28]
 8001c74:	f7ff fe94 	bl	80019a0 <cJSON_AddNumberToObject>

        // 4. Converter o objeto JSON para uma string
        char *json_string = cJSON_Print(root);
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f7ff fb51 	bl	8001320 <cJSON_Print>
 8001c7e:	61b8      	str	r0, [r7, #24]
        if (json_string != NULL)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <StartConsumerTask+0xf0>
        {
          // 5. Enviar a string JSON pela UART3 usando printf
          printf("%s\r\n", json_string);
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <StartConsumerTask+0x118>)
 8001c8a:	f00d ff63 	bl	800fb54 <iprintf>

          // 6. LIBERAR A MEMÓRIA ALOCADA! (Muito importante)
          free(json_string);
 8001c8e:	69b8      	ldr	r0, [r7, #24]
 8001c90:	f00c f9ba 	bl	800e008 <free>
        }

        // 7. Liberar a memória do objeto JSON
        cJSON_Delete(root);
 8001c94:	69f8      	ldr	r0, [r7, #28]
 8001c96:	f7fe ff43 	bl	8000b20 <cJSON_Delete>
    status = osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever);
 8001c9a:	e787      	b.n	8001bac <StartConsumerTask+0x8>
 8001c9c:	2400020c 	.word	0x2400020c
 8001ca0:	58020400 	.word	0x58020400
 8001ca4:	42c80000 	.word	0x42c80000
 8001ca8:	42c80000 	.word	0x42c80000
 8001cac:	08012ef4 	.word	0x08012ef4
 8001cb0:	08012efc 	.word	0x08012efc
 8001cb4:	08012f08 	.word	0x08012f08
 8001cb8:	08012f14 	.word	0x08012f14
 8001cbc:	08012f20 	.word	0x08012f20

08001cc0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd6:	4b56      	ldr	r3, [pc, #344]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	4a54      	ldr	r2, [pc, #336]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001cde:	f043 0320 	orr.w	r3, r3, #32
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce6:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d18:	4a45      	ldr	r2, [pc, #276]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d22:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	4b3f      	ldr	r3, [pc, #252]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	4a3e      	ldr	r2, [pc, #248]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d40:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d4e:	4b38      	ldr	r3, [pc, #224]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	4a36      	ldr	r2, [pc, #216]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5e:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <MX_GPIO_Init+0x170>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2110      	movs	r1, #16
 8001d70:	4830      	ldr	r0, [pc, #192]	@ (8001e34 <MX_GPIO_Init+0x174>)
 8001d72:	f003 fbd3 	bl	800551c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001d7c:	482e      	ldr	r0, [pc, #184]	@ (8001e38 <MX_GPIO_Init+0x178>)
 8001d7e:	f003 fbcd 	bl	800551c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d88:	482c      	ldr	r0, [pc, #176]	@ (8001e3c <MX_GPIO_Init+0x17c>)
 8001d8a:	f003 fbc7 	bl	800551c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2102      	movs	r1, #2
 8001d92:	482b      	ldr	r0, [pc, #172]	@ (8001e40 <MX_GPIO_Init+0x180>)
 8001d94:	f003 fbc2 	bl	800551c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4825      	ldr	r0, [pc, #148]	@ (8001e44 <MX_GPIO_Init+0x184>)
 8001db0:	f003 fa04 	bl	80051bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001db4:	2310      	movs	r3, #16
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481a      	ldr	r0, [pc, #104]	@ (8001e34 <MX_GPIO_Init+0x174>)
 8001dcc:	f003 f9f6 	bl	80051bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001dd0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4813      	ldr	r0, [pc, #76]	@ (8001e38 <MX_GPIO_Init+0x178>)
 8001dea:	f003 f9e7 	bl	80051bc <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8001dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_GPIO_Init+0x17c>)
 8001e08:	f003 f9d8 	bl	80051bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4807      	ldr	r0, [pc, #28]	@ (8001e40 <MX_GPIO_Init+0x180>)
 8001e24:	f003 f9ca 	bl	80051bc <HAL_GPIO_Init>

}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58020000 	.word	0x58020000
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	58020c00 	.word	0x58020c00
 8001e40:	58021000 	.word	0x58021000
 8001e44:	58021400 	.word	0x58021400

08001e48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e50:	1d39      	adds	r1, r7, #4
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	2201      	movs	r2, #1
 8001e58:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <__io_putchar+0x20>)
 8001e5a:	f007 fbaf 	bl	80095bc <HAL_UART_Transmit>
  return ch;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	240002e8 	.word	0x240002e8

08001e6c <AD7091R_Init>:

void AD7091R_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2110      	movs	r1, #16
 8001e76:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <AD7091R_Init+0x64>)
 8001e78:	f003 fb50 	bl	800551c <HAL_GPIO_WritePin>
    uint16_t reset_cmd_tx = AD7091R_CMD_RESET;
 8001e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e80:	80fb      	strh	r3, [r7, #6]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&reset_cmd_tx, 2, HAL_MAX_DELAY);
 8001e82:	1db9      	adds	r1, r7, #6
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4812      	ldr	r0, [pc, #72]	@ (8001ed4 <AD7091R_Init+0x68>)
 8001e8c:	f006 fb2c 	bl	80084e8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	2110      	movs	r1, #16
 8001e94:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <AD7091R_Init+0x64>)
 8001e96:	f003 fb41 	bl	800551c <HAL_GPIO_WritePin>
    HAL_Delay(100); // HAL_Delay é aceitável aqui, pois é antes do RTOS iniciar
 8001e9a:	2064      	movs	r0, #100	@ 0x64
 8001e9c:	f000 fe58 	bl	8002b50 <HAL_Delay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	480a      	ldr	r0, [pc, #40]	@ (8001ed0 <AD7091R_Init+0x64>)
 8001ea6:	f003 fb39 	bl	800551c <HAL_GPIO_WritePin>
    uint16_t normal_cmd_tx = AD7091R_CMD_NORMAL;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	80bb      	strh	r3, [r7, #4]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY);
 8001eae:	1d39      	adds	r1, r7, #4
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4807      	ldr	r0, [pc, #28]	@ (8001ed4 <AD7091R_Init+0x68>)
 8001eb8:	f006 fb16 	bl	80084e8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	4803      	ldr	r0, [pc, #12]	@ (8001ed0 <AD7091R_Init+0x64>)
 8001ec2:	f003 fb2b 	bl	800551c <HAL_GPIO_WritePin>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	58020000 	.word	0x58020000
 8001ed4:	24000210 	.word	0x24000210

08001ed8 <AD7091R_ReadData>:

uint16_t AD7091R_ReadData(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
    uint8_t rx_buf[2] = {0};
 8001ede:	2300      	movs	r3, #0
 8001ee0:	803b      	strh	r3, [r7, #0]
    uint16_t adc_raw_16bits, adc_value_12bits;

    osDelay(1); // Pequena pausa com osDelay
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f009 f9f4 	bl	800b2d0 <osDelay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2110      	movs	r1, #16
 8001eec:	4820      	ldr	r0, [pc, #128]	@ (8001f70 <AD7091R_ReadData+0x98>)
 8001eee:	f003 fb15 	bl	800551c <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8001ef2:	4639      	mov	r1, r7
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	2202      	movs	r2, #2
 8001efa:	481e      	ldr	r0, [pc, #120]	@ (8001f74 <AD7091R_ReadData+0x9c>)
 8001efc:	f006 fce2 	bl	80088c4 <HAL_SPI_Receive>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <AD7091R_ReadData+0x5c>
    {
        HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2110      	movs	r1, #16
 8001f0a:	4819      	ldr	r0, [pc, #100]	@ (8001f70 <AD7091R_ReadData+0x98>)
 8001f0c:	f003 fb06 	bl	800551c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2102      	movs	r1, #2
 8001f14:	4818      	ldr	r0, [pc, #96]	@ (8001f78 <AD7091R_ReadData+0xa0>)
 8001f16:	f003 fb01 	bl	800551c <HAL_GPIO_WritePin>
        osDelay(100);
 8001f1a:	2064      	movs	r0, #100	@ 0x64
 8001f1c:	f009 f9d8 	bl	800b2d0 <osDelay>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2102      	movs	r1, #2
 8001f24:	4814      	ldr	r0, [pc, #80]	@ (8001f78 <AD7091R_ReadData+0xa0>)
 8001f26:	f003 faf9 	bl	800551c <HAL_GPIO_WritePin>
        printf("Erro na comunicacao SPI!\r\n");
 8001f2a:	4814      	ldr	r0, [pc, #80]	@ (8001f7c <AD7091R_ReadData+0xa4>)
 8001f2c:	f00d fe7a 	bl	800fc24 <puts>
        return 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e018      	b.n	8001f66 <AD7091R_ReadData+0x8e>
    }
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2110      	movs	r1, #16
 8001f38:	480d      	ldr	r0, [pc, #52]	@ (8001f70 <AD7091R_ReadData+0x98>)
 8001f3a:	f003 faef 	bl	800551c <HAL_GPIO_WritePin>

    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f3e:	2101      	movs	r1, #1
 8001f40:	480f      	ldr	r0, [pc, #60]	@ (8001f80 <AD7091R_ReadData+0xa8>)
 8001f42:	f003 fb04 	bl	800554e <HAL_GPIO_TogglePin>

    adc_raw_16bits = (rx_buf[0] << 8) | rx_buf[1];
 8001f46:	783b      	ldrb	r3, [r7, #0]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	787b      	ldrb	r3, [r7, #1]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	80fb      	strh	r3, [r7, #6]
    adc_value_12bits = (adc_raw_16bits >> 2) & 0x0FFF;
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	80bb      	strh	r3, [r7, #4]

    return adc_value_12bits;
 8001f64:	88bb      	ldrh	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58020000 	.word	0x58020000
 8001f74:	24000210 	.word	0x24000210
 8001f78:	58021000 	.word	0x58021000
 8001f7c:	08012f28 	.word	0x08012f28
 8001f80:	58020400 	.word	0x58020400

08001f84 <get_filtered_reading>:

uint16_t get_filtered_reading(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	70fb      	strb	r3, [r7, #3]
 8001f92:	e00c      	b.n	8001fae <get_filtered_reading+0x2a>
        sum += AD7091R_ReadData();
 8001f94:	f7ff ffa0 	bl	8001ed8 <AD7091R_ReadData>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	607b      	str	r3, [r7, #4]
        osDelay(10);
 8001fa2:	200a      	movs	r0, #10
 8001fa4:	f009 f994 	bl	800b2d0 <osDelay>
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	3301      	adds	r3, #1
 8001fac:	70fb      	strb	r3, [r7, #3]
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b1d      	cmp	r3, #29
 8001fb2:	d9ef      	bls.n	8001f94 <get_filtered_reading+0x10>
    }
    return (uint16_t)(sum / NUM_SAMPLES);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <get_filtered_reading+0x44>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	b29b      	uxth	r3, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	88888889 	.word	0x88888889

08001fcc <raw_to_voltage_mV>:

float raw_to_voltage_mV(uint16_t raw_value)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
    return ((float)raw_value / ADC_MAX_VALUE) * VREF_MV;
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002000 <raw_to_voltage_mV+0x34>
 8001fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002004 <raw_to_voltage_mV+0x38>
 8001fec:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	457ff000 	.word	0x457ff000
 8002004:	451c4000 	.word	0x451c4000

08002008 <voltage_to_current_mA>:

float voltage_to_current_mA(float voltage_mv)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage_mv < MIN_VOLTAGE_ADC_MV) voltage_mv = MIN_VOLTAGE_ADC_MV;
 8002012:	edd7 7a01 	vldr	s15, [r7, #4]
 8002016:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002068 <voltage_to_current_mA+0x60>
 800201a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002022:	d501      	bpl.n	8002028 <voltage_to_current_mA+0x20>
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <voltage_to_current_mA+0x64>)
 8002026:	607b      	str	r3, [r7, #4]
    if (voltage_mv > MAX_VOLTAGE_ADC_MV) voltage_mv = MAX_VOLTAGE_ADC_MV;
 8002028:	edd7 7a01 	vldr	s15, [r7, #4]
 800202c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002070 <voltage_to_current_mA+0x68>
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd01      	ble.n	800203e <voltage_to_current_mA+0x36>
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <voltage_to_current_mA+0x6c>)
 800203c:	607b      	str	r3, [r7, #4]

    return 4.0f + ((voltage_mv - MIN_VOLTAGE_ADC_MV) * (16.0f / (MAX_VOLTAGE_ADC_MV - MIN_VOLTAGE_ADC_MV)));
 800203e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002042:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002068 <voltage_to_current_mA+0x60>
 8002046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800204a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002078 <voltage_to_current_mA+0x70>
 800204e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002052:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002056:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	42c80000 	.word	0x42c80000
 800206c:	42c80000 	.word	0x42c80000
 8002070:	45160000 	.word	0x45160000
 8002074:	45160000 	.word	0x45160000
 8002078:	3be3f389 	.word	0x3be3f389

0800207c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002080:	f000 fd1e 	bl	8002ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002084:	f000 f81c 	bl	80020c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002088:	f7ff fe1a 	bl	8001cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 800208c:	f7ff fd0a 	bl	8001aa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002090:	f000 fbc8 	bl	8002824 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002094:	f000 f896 	bl	80021c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Inicializando ADC AD7091R...\r\n");
 8002098:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <main+0x3c>)
 800209a:	f00d fdc3 	bl	800fc24 <puts>
  AD7091R_Init();
 800209e:	f7ff fee5 	bl	8001e6c <AD7091R_Init>
  printf("Sistema pronto.\r\n");
 80020a2:	4806      	ldr	r0, [pc, #24]	@ (80020bc <main+0x40>)
 80020a4:	f00d fdbe 	bl	800fc24 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020a8:	f009 f836 	bl	800b118 <osKernelInitialize>
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80020ac:	f7ff fd22 	bl	8001af4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020b0:	f009 f856 	bl	800b160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <main+0x38>
 80020b8:	08012f44 	.word	0x08012f44
 80020bc:	08012f64 	.word	0x08012f64

080020c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b09c      	sub	sp, #112	@ 0x70
 80020c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ca:	224c      	movs	r2, #76	@ 0x4c
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f00d fed8 	bl	800fe84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2220      	movs	r2, #32
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f00d fed2 	bl	800fe84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80020e0:	2002      	movs	r0, #2
 80020e2:	f003 fa4f 	bl	8005584 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4b31      	ldr	r3, [pc, #196]	@ (80021b0 <SystemClock_Config+0xf0>)
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	4a30      	ldr	r2, [pc, #192]	@ (80021b0 <SystemClock_Config+0xf0>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80020f6:	4b2e      	ldr	r3, [pc, #184]	@ (80021b0 <SystemClock_Config+0xf0>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4b2c      	ldr	r3, [pc, #176]	@ (80021b4 <SystemClock_Config+0xf4>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002108:	4a2a      	ldr	r2, [pc, #168]	@ (80021b4 <SystemClock_Config+0xf4>)
 800210a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <SystemClock_Config+0xf4>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800211c:	bf00      	nop
 800211e:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <SystemClock_Config+0xf4>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800212a:	d1f8      	bne.n	800211e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800212c:	2302      	movs	r3, #2
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002130:	2301      	movs	r3, #1
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002134:	2340      	movs	r3, #64	@ 0x40
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002138:	2302      	movs	r3, #2
 800213a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800213c:	2300      	movs	r3, #0
 800213e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002144:	230a      	movs	r3, #10
 8002146:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002154:	230c      	movs	r3, #12
 8002156:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002158:	2302      	movs	r3, #2
 800215a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fa47 	bl	80055f8 <HAL_RCC_OscConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002170:	f000 f822 	bl	80021b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002174:	233f      	movs	r3, #63	@ 0x3f
 8002176:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002188:	2340      	movs	r3, #64	@ 0x40
 800218a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fe87 	bl	8005eac <HAL_RCC_ClockConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80021a4:	f000 f808 	bl	80021b8 <Error_Handler>
  }
}
 80021a8:	bf00      	nop
 80021aa:	3770      	adds	r7, #112	@ 0x70
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	58000400 	.word	0x58000400
 80021b4:	58024800 	.word	0x58024800

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <Error_Handler+0x8>

080021c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021ca:	4a28      	ldr	r2, [pc, #160]	@ (800226c <MX_SPI1_Init+0xa8>)
 80021cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021de:	2203      	movs	r2, #3
 80021e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <MX_SPI1_Init+0xa4>)
 80021f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220a:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <MX_SPI1_Init+0xa4>)
 800220c:	2200      	movs	r2, #0
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002210:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002212:	2200      	movs	r2, #0
 8002214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002216:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002218:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002220:	2200      	movs	r2, #0
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002224:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002226:	2200      	movs	r2, #0
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <MX_SPI1_Init+0xa4>)
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002238:	2200      	movs	r2, #0
 800223a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800223c:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <MX_SPI1_Init+0xa4>)
 800223e:	2200      	movs	r2, #0
 8002240:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002244:	2200      	movs	r2, #0
 8002246:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <MX_SPI1_Init+0xa4>)
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002250:	2200      	movs	r2, #0
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002254:	4804      	ldr	r0, [pc, #16]	@ (8002268 <MX_SPI1_Init+0xa4>)
 8002256:	f006 f823 	bl	80082a0 <HAL_SPI_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002260:	f7ff ffaa 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	24000210 	.word	0x24000210
 800226c:	40013000 	.word	0x40013000

08002270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0bc      	sub	sp, #240	@ 0xf0
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	22c0      	movs	r2, #192	@ 0xc0
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f00d fdf7 	bl	800fe84 <memset>
  if(spiHandle->Instance==SPI1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a38      	ldr	r2, [pc, #224]	@ (800237c <HAL_SPI_MspInit+0x10c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d168      	bne.n	8002372 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 f9c7 	bl	8006648 <HAL_RCCEx_PeriphCLKConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80022c0:	f7ff ff7a 	bl	80021b8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 80022c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 80022d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e8:	4a25      	ldr	r2, [pc, #148]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_SPI_MspInit+0x110>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800231e:	2360      	movs	r3, #96	@ 0x60
 8002320:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002336:	2305      	movs	r3, #5
 8002338:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002340:	4619      	mov	r1, r3
 8002342:	4810      	ldr	r0, [pc, #64]	@ (8002384 <HAL_SPI_MspInit+0x114>)
 8002344:	f002 ff3a 	bl	80051bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002348:	2320      	movs	r3, #32
 800234a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002360:	2305      	movs	r3, #5
 8002362:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800236a:	4619      	mov	r1, r3
 800236c:	4806      	ldr	r0, [pc, #24]	@ (8002388 <HAL_SPI_MspInit+0x118>)
 800236e:	f002 ff25 	bl	80051bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002372:	bf00      	nop
 8002374:	37f0      	adds	r7, #240	@ 0xf0
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40013000 	.word	0x40013000
 8002380:	58024400 	.word	0x58024400
 8002384:	58020000 	.word	0x58020000
 8002388:	58020400 	.word	0x58020400

0800238c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_MspInit+0x38>)
 8002394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002398:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_MspInit+0x38>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_MspInit+0x38>)
 80023a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	210f      	movs	r1, #15
 80023b4:	f06f 0001 	mvn.w	r0, #1
 80023b8:	f000 fcb2 	bl	8002d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	58024400 	.word	0x58024400

080023c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b090      	sub	sp, #64	@ 0x40
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	d827      	bhi.n	8002426 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	2037      	movs	r0, #55	@ 0x37
 80023dc:	f000 fca0 	bl	8002d20 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023e0:	2037      	movs	r0, #55	@ 0x37
 80023e2:	f000 fcb7 	bl	8002d54 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80023e6:	4a29      	ldr	r2, [pc, #164]	@ (800248c <HAL_InitTick+0xc4>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80023ec:	4b28      	ldr	r3, [pc, #160]	@ (8002490 <HAL_InitTick+0xc8>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f2:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_InitTick+0xc8>)
 80023f4:	f043 0320 	orr.w	r3, r3, #32
 80023f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_InitTick+0xc8>)
 80023fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800240a:	f107 0210 	add.w	r2, r7, #16
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f004 f8d5 	bl	80065c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_InitTick+0x6a>
 8002424:	e001      	b.n	800242a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e02b      	b.n	8002482 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800242a:	f004 f89f 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800242e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002430:	e004      	b.n	800243c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002432:	f004 f89b 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243e:	4a15      	ldr	r2, [pc, #84]	@ (8002494 <HAL_InitTick+0xcc>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	3b01      	subs	r3, #1
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800244a:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <HAL_InitTick+0xd0>)
 800244c:	4a13      	ldr	r2, [pc, #76]	@ (800249c <HAL_InitTick+0xd4>)
 800244e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_InitTick+0xd0>)
 8002452:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002456:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002458:	4a0f      	ldr	r2, [pc, #60]	@ (8002498 <HAL_InitTick+0xd0>)
 800245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_InitTick+0xd0>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_InitTick+0xd0>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800246a:	480b      	ldr	r0, [pc, #44]	@ (8002498 <HAL_InitTick+0xd0>)
 800246c:	f006 fd85 	bl	8008f7a <HAL_TIM_Base_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002476:	4808      	ldr	r0, [pc, #32]	@ (8002498 <HAL_InitTick+0xd0>)
 8002478:	f006 fde0 	bl	800903c <HAL_TIM_Base_Start_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	e000      	b.n	8002482 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	3740      	adds	r7, #64	@ 0x40
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000014 	.word	0x24000014
 8002490:	58024400 	.word	0x58024400
 8002494:	431bde83 	.word	0x431bde83
 8002498:	24000298 	.word	0x24000298
 800249c:	40001400 	.word	0x40001400

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <NMI_Handler+0x4>

080024a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <MemManage_Handler+0x4>

080024b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <BusFault_Handler+0x4>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <UsageFault_Handler+0x4>

080024c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024dc:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <DMA1_Stream0_IRQHandler+0x10>)
 80024de:	f001 fd07 	bl	8003ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2400037c 	.word	0x2400037c

080024ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <DMA1_Stream1_IRQHandler+0x10>)
 80024f2:	f001 fcfd 	bl	8003ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	240003f4 	.word	0x240003f4

08002500 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <USART3_IRQHandler+0x10>)
 8002506:	f007 f8e7 	bl	80096d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	240002e8 	.word	0x240002e8

08002514 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <TIM7_IRQHandler+0x10>)
 800251a:	f006 fe07 	bl	800912c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	24000298 	.word	0x24000298

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_kill>:

int _kill(int pid, int sig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002542:	f00d fd13 	bl	800ff6c <__errno>
 8002546:	4603      	mov	r3, r0
 8002548:	2216      	movs	r2, #22
 800254a:	601a      	str	r2, [r3, #0]
  return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_exit>:

void _exit (int status)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ffe7 	bl	8002538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800256a:	bf00      	nop
 800256c:	e7fd      	b.n	800256a <_exit+0x12>

0800256e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e00a      	b.n	8002596 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002580:	f3af 8000 	nop.w
 8002584:	4601      	mov	r1, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	60ba      	str	r2, [r7, #8]
 800258c:	b2ca      	uxtb	r2, r1
 800258e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	dbf0      	blt.n	8002580 <_read+0x12>
  }

  return len;
 800259e:	687b      	ldr	r3, [r7, #4]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e009      	b.n	80025ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	60ba      	str	r2, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fc40 	bl	8001e48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3301      	adds	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	dbf1      	blt.n	80025ba <_write+0x12>
  }
  return len;
 80025d6:	687b      	ldr	r3, [r7, #4]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_close>:

int _close(int file)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002608:	605a      	str	r2, [r3, #4]
  return 0;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_isatty>:

int _isatty(int file)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002650:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <_sbrk+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <_sbrk+0x60>)
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800265c:	4b13      	ldr	r3, [pc, #76]	@ (80026ac <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <_sbrk+0x64>)
 8002666:	4a12      	ldr	r2, [pc, #72]	@ (80026b0 <_sbrk+0x68>)
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002678:	f00d fc78 	bl	800ff6c <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e009      	b.n	800269c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	24080000 	.word	0x24080000
 80026a8:	00000400 	.word	0x00000400
 80026ac:	240002e4 	.word	0x240002e4
 80026b0:	24004f10 	.word	0x24004f10

080026b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026b8:	4b43      	ldr	r3, [pc, #268]	@ (80027c8 <SystemInit+0x114>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	4a42      	ldr	r2, [pc, #264]	@ (80027c8 <SystemInit+0x114>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026c8:	4b40      	ldr	r3, [pc, #256]	@ (80027cc <SystemInit+0x118>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d807      	bhi.n	80026e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026d4:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <SystemInit+0x118>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 030f 	bic.w	r3, r3, #15
 80026dc:	4a3b      	ldr	r2, [pc, #236]	@ (80027cc <SystemInit+0x118>)
 80026de:	f043 0307 	orr.w	r3, r3, #7
 80026e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026e4:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <SystemInit+0x11c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a39      	ldr	r2, [pc, #228]	@ (80027d0 <SystemInit+0x11c>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026f0:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <SystemInit+0x11c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026f6:	4b36      	ldr	r3, [pc, #216]	@ (80027d0 <SystemInit+0x11c>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4935      	ldr	r1, [pc, #212]	@ (80027d0 <SystemInit+0x11c>)
 80026fc:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <SystemInit+0x120>)
 80026fe:	4013      	ands	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002702:	4b32      	ldr	r3, [pc, #200]	@ (80027cc <SystemInit+0x118>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800270e:	4b2f      	ldr	r3, [pc, #188]	@ (80027cc <SystemInit+0x118>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 030f 	bic.w	r3, r3, #15
 8002716:	4a2d      	ldr	r2, [pc, #180]	@ (80027cc <SystemInit+0x118>)
 8002718:	f043 0307 	orr.w	r3, r3, #7
 800271c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800271e:	4b2c      	ldr	r3, [pc, #176]	@ (80027d0 <SystemInit+0x11c>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002724:	4b2a      	ldr	r3, [pc, #168]	@ (80027d0 <SystemInit+0x11c>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800272a:	4b29      	ldr	r3, [pc, #164]	@ (80027d0 <SystemInit+0x11c>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002730:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <SystemInit+0x11c>)
 8002732:	4a29      	ldr	r2, [pc, #164]	@ (80027d8 <SystemInit+0x124>)
 8002734:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002736:	4b26      	ldr	r3, [pc, #152]	@ (80027d0 <SystemInit+0x11c>)
 8002738:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <SystemInit+0x128>)
 800273a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800273c:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <SystemInit+0x11c>)
 800273e:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <SystemInit+0x12c>)
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002742:	4b23      	ldr	r3, [pc, #140]	@ (80027d0 <SystemInit+0x11c>)
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002748:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <SystemInit+0x11c>)
 800274a:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <SystemInit+0x12c>)
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <SystemInit+0x11c>)
 8002750:	2200      	movs	r2, #0
 8002752:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002754:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <SystemInit+0x11c>)
 8002756:	4a22      	ldr	r2, [pc, #136]	@ (80027e0 <SystemInit+0x12c>)
 8002758:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800275a:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <SystemInit+0x11c>)
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <SystemInit+0x11c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <SystemInit+0x11c>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <SystemInit+0x11c>)
 800276e:	2200      	movs	r2, #0
 8002770:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002772:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <SystemInit+0x130>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <SystemInit+0x134>)
 8002778:	4013      	ands	r3, r2
 800277a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800277e:	d202      	bcs.n	8002786 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002780:	4b1a      	ldr	r3, [pc, #104]	@ (80027ec <SystemInit+0x138>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <SystemInit+0x11c>)
 8002788:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800278c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d113      	bne.n	80027bc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002794:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <SystemInit+0x11c>)
 8002796:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800279a:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <SystemInit+0x11c>)
 800279c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <SystemInit+0x13c>)
 80027a6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027aa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <SystemInit+0x11c>)
 80027ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027b2:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <SystemInit+0x11c>)
 80027b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	52002000 	.word	0x52002000
 80027d0:	58024400 	.word	0x58024400
 80027d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80027d8:	02020200 	.word	0x02020200
 80027dc:	01ff0000 	.word	0x01ff0000
 80027e0:	01010280 	.word	0x01010280
 80027e4:	5c001000 	.word	0x5c001000
 80027e8:	ffff0000 	.word	0xffff0000
 80027ec:	51008108 	.word	0x51008108
 80027f0:	52004000 	.word	0x52004000

080027f4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <ExitRun0Mode+0x2c>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a08      	ldr	r2, [pc, #32]	@ (8002820 <ExitRun0Mode+0x2c>)
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002804:	bf00      	nop
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <ExitRun0Mode+0x2c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f9      	beq.n	8002806 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	58024800 	.word	0x58024800

08002824 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002828:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 800282a:	4a23      	ldr	r2, [pc, #140]	@ (80028b8 <MX_USART3_UART_Init+0x94>)
 800282c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b1f      	ldr	r3, [pc, #124]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002842:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002854:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002866:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800286c:	4811      	ldr	r0, [pc, #68]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 800286e:	f006 fe55 	bl	800951c <HAL_UART_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002878:	f7ff fc9e 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287c:	2100      	movs	r1, #0
 800287e:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002880:	f008 fb3c 	bl	800aefc <HAL_UARTEx_SetTxFifoThreshold>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800288a:	f7ff fc95 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800288e:	2100      	movs	r1, #0
 8002890:	4808      	ldr	r0, [pc, #32]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 8002892:	f008 fb71 	bl	800af78 <HAL_UARTEx_SetRxFifoThreshold>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800289c:	f7ff fc8c 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028a0:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <MX_USART3_UART_Init+0x90>)
 80028a2:	f008 faf2 	bl	800ae8a <HAL_UARTEx_DisableFifoMode>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80028ac:	f7ff fc84 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	240002e8 	.word	0x240002e8
 80028b8:	40004800 	.word	0x40004800

080028bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0ba      	sub	sp, #232	@ 0xe8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	22c0      	movs	r2, #192	@ 0xc0
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f00d fad1 	bl	800fe84 <memset>
  if(uartHandle->Instance==USART3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a59      	ldr	r2, [pc, #356]	@ (8002a4c <HAL_UART_MspInit+0x190>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f040 80aa 	bne.w	8002a42 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028ee:	f04f 0202 	mov.w	r2, #2
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fe9f 	bl	8006648 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002910:	f7ff fc52 	bl	80021b8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002914:	4b4e      	ldr	r3, [pc, #312]	@ (8002a50 <HAL_UART_MspInit+0x194>)
 8002916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800291a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a50 <HAL_UART_MspInit+0x194>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002920:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002924:	4b4a      	ldr	r3, [pc, #296]	@ (8002a50 <HAL_UART_MspInit+0x194>)
 8002926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800292a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002932:	4b47      	ldr	r3, [pc, #284]	@ (8002a50 <HAL_UART_MspInit+0x194>)
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002938:	4a45      	ldr	r2, [pc, #276]	@ (8002a50 <HAL_UART_MspInit+0x194>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002942:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <HAL_UART_MspInit+0x194>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002950:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002954:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800296a:	2307      	movs	r3, #7
 800296c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002970:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002974:	4619      	mov	r1, r3
 8002976:	4837      	ldr	r0, [pc, #220]	@ (8002a54 <HAL_UART_MspInit+0x198>)
 8002978:	f002 fc20 	bl	80051bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800297c:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 800297e:	4a37      	ldr	r2, [pc, #220]	@ (8002a5c <HAL_UART_MspInit+0x1a0>)
 8002980:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002982:	4b35      	ldr	r3, [pc, #212]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 8002984:	222d      	movs	r2, #45	@ 0x2d
 8002986:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002988:	4b33      	ldr	r3, [pc, #204]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800298e:	4b32      	ldr	r3, [pc, #200]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002994:	4b30      	ldr	r3, [pc, #192]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 8002996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800299a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800299c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b4:	4b28      	ldr	r3, [pc, #160]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029ba:	4827      	ldr	r0, [pc, #156]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029bc:	f000 f9d8 	bl	8002d70 <HAL_DMA_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80029c6:	f7ff fbf7 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a22      	ldr	r2, [pc, #136]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029d2:	4a21      	ldr	r2, [pc, #132]	@ (8002a58 <HAL_UART_MspInit+0x19c>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80029d8:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 80029da:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <HAL_UART_MspInit+0x1a8>)
 80029dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80029de:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 80029e0:	222e      	movs	r2, #46	@ 0x2e
 80029e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 80029f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fe:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0a:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002a16:	4812      	ldr	r0, [pc, #72]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a18:	f000 f9aa 	bl	8002d70 <HAL_DMA_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002a22:	f7ff fbc9 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a2a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a60 <HAL_UART_MspInit+0x1a4>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2105      	movs	r1, #5
 8002a36:	2027      	movs	r0, #39	@ 0x27
 8002a38:	f000 f972 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a3c:	2027      	movs	r0, #39	@ 0x27
 8002a3e:	f000 f989 	bl	8002d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a42:	bf00      	nop
 8002a44:	37e8      	adds	r7, #232	@ 0xe8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40004800 	.word	0x40004800
 8002a50:	58024400 	.word	0x58024400
 8002a54:	58020c00 	.word	0x58020c00
 8002a58:	2400037c 	.word	0x2400037c
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	240003f4 	.word	0x240003f4
 8002a64:	40020028 	.word	0x40020028

08002a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a68:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002aa4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002a6c:	f7ff fec2 	bl	80027f4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a70:	f7ff fe20 	bl	80026b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a76:	490d      	ldr	r1, [pc, #52]	@ (8002aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f00d fa6d 	bl	800ff78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9e:	f7ff faed 	bl	800207c <main>
  bx  lr
 8002aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aa4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002aa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002aac:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002ab0:	08013490 	.word	0x08013490
  ldr r2, =_sbss
 8002ab4:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002ab8:	24004f0c 	.word	0x24004f0c

08002abc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <ADC3_IRQHandler>
	...

08002ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	f000 f91f 	bl	8002d0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002acc:	f003 fba4 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_Init+0x68>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	4913      	ldr	r1, [pc, #76]	@ (8002b2c <HAL_Init+0x6c>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_Init+0x68>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <HAL_Init+0x6c>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	4a0b      	ldr	r2, [pc, #44]	@ (8002b30 <HAL_Init+0x70>)
 8002b02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_Init+0x74>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f7ff fc5c 	bl	80023c8 <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e002      	b.n	8002b20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1a:	f7ff fc37 	bl	800238c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	08013000 	.word	0x08013000
 8002b30:	24000010 	.word	0x24000010
 8002b34:	2400000c 	.word	0x2400000c

08002b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_GetTick+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	2400046c 	.word	0x2400046c

08002b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d005      	beq.n	8002b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_Delay+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b76:	bf00      	nop
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d8f7      	bhi.n	8002b78 <HAL_Delay+0x28>
  {
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	24000018 	.word	0x24000018

08002b98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_GetREVID+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	5c001000 	.word	0x5c001000

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00
 8002bf4:	05fa0000 	.word	0x05fa0000

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	@ (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff4c 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2e:	f7ff ff63 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	6978      	ldr	r0, [r7, #20]
 8002d3a:	f7ff ffb3 	bl	8002ca4 <NVIC_EncodePriority>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff82 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff56 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff fede 	bl	8002b38 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e316      	b.n	80033b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a66      	ldr	r2, [pc, #408]	@ (8002f28 <HAL_DMA_Init+0x1b8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04a      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_DMA_Init+0x1bc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d045      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a63      	ldr	r2, [pc, #396]	@ (8002f30 <HAL_DMA_Init+0x1c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d040      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a62      	ldr	r2, [pc, #392]	@ (8002f34 <HAL_DMA_Init+0x1c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03b      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a60      	ldr	r2, [pc, #384]	@ (8002f38 <HAL_DMA_Init+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d036      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002f3c <HAL_DMA_Init+0x1cc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f40 <HAL_DMA_Init+0x1d0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02c      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f44 <HAL_DMA_Init+0x1d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d027      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8002f48 <HAL_DMA_Init+0x1d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a59      	ldr	r2, [pc, #356]	@ (8002f4c <HAL_DMA_Init+0x1dc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a57      	ldr	r2, [pc, #348]	@ (8002f50 <HAL_DMA_Init+0x1e0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a56      	ldr	r2, [pc, #344]	@ (8002f54 <HAL_DMA_Init+0x1e4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a54      	ldr	r2, [pc, #336]	@ (8002f58 <HAL_DMA_Init+0x1e8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a53      	ldr	r2, [pc, #332]	@ (8002f5c <HAL_DMA_Init+0x1ec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a51      	ldr	r2, [pc, #324]	@ (8002f60 <HAL_DMA_Init+0x1f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a50      	ldr	r2, [pc, #320]	@ (8002f64 <HAL_DMA_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_DMA_Init+0xbc>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_Init+0xbe>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 813b 	beq.w	80030aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a37      	ldr	r2, [pc, #220]	@ (8002f28 <HAL_DMA_Init+0x1b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a36      	ldr	r2, [pc, #216]	@ (8002f2c <HAL_DMA_Init+0x1bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a34      	ldr	r2, [pc, #208]	@ (8002f30 <HAL_DMA_Init+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a33      	ldr	r2, [pc, #204]	@ (8002f34 <HAL_DMA_Init+0x1c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <HAL_DMA_Init+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a30      	ldr	r2, [pc, #192]	@ (8002f3c <HAL_DMA_Init+0x1cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <HAL_DMA_Init+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f44 <HAL_DMA_Init+0x1d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	@ (8002f48 <HAL_DMA_Init+0x1d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f4c <HAL_DMA_Init+0x1dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a28      	ldr	r2, [pc, #160]	@ (8002f50 <HAL_DMA_Init+0x1e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <HAL_DMA_Init+0x1e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	@ (8002f58 <HAL_DMA_Init+0x1e8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <HAL_DMA_Init+0x1ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <HAL_DMA_Init+0x1f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a21      	ldr	r2, [pc, #132]	@ (8002f64 <HAL_DMA_Init+0x1f4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Init+0x186>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_DMA_Init+0x196>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f06:	e02f      	b.n	8002f68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f08:	f7ff fe16 	bl	8002b38 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d928      	bls.n	8002f68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e246      	b.n	80033b6 <HAL_DMA_Init+0x646>
 8002f28:	40020010 	.word	0x40020010
 8002f2c:	40020028 	.word	0x40020028
 8002f30:	40020040 	.word	0x40020040
 8002f34:	40020058 	.word	0x40020058
 8002f38:	40020070 	.word	0x40020070
 8002f3c:	40020088 	.word	0x40020088
 8002f40:	400200a0 	.word	0x400200a0
 8002f44:	400200b8 	.word	0x400200b8
 8002f48:	40020410 	.word	0x40020410
 8002f4c:	40020428 	.word	0x40020428
 8002f50:	40020440 	.word	0x40020440
 8002f54:	40020458 	.word	0x40020458
 8002f58:	40020470 	.word	0x40020470
 8002f5c:	40020488 	.word	0x40020488
 8002f60:	400204a0 	.word	0x400204a0
 8002f64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1c8      	bne.n	8002f08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4b83      	ldr	r3, [pc, #524]	@ (8003190 <HAL_DMA_Init+0x420>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fcc:	4b71      	ldr	r3, [pc, #452]	@ (8003194 <HAL_DMA_Init+0x424>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b71      	ldr	r3, [pc, #452]	@ (8003198 <HAL_DMA_Init+0x428>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd8:	d328      	bcc.n	800302c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b28      	cmp	r3, #40	@ 0x28
 8002fe0:	d903      	bls.n	8002fea <HAL_DMA_Init+0x27a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fe8:	d917      	bls.n	800301a <HAL_DMA_Init+0x2aa>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ff0:	d903      	bls.n	8002ffa <HAL_DMA_Init+0x28a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b42      	cmp	r3, #66	@ 0x42
 8002ff8:	d90f      	bls.n	800301a <HAL_DMA_Init+0x2aa>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b46      	cmp	r3, #70	@ 0x46
 8003000:	d903      	bls.n	800300a <HAL_DMA_Init+0x29a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b48      	cmp	r3, #72	@ 0x48
 8003008:	d907      	bls.n	800301a <HAL_DMA_Init+0x2aa>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003010:	d905      	bls.n	800301e <HAL_DMA_Init+0x2ae>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b52      	cmp	r3, #82	@ 0x52
 8003018:	d801      	bhi.n	800301e <HAL_DMA_Init+0x2ae>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_DMA_Init+0x2b0>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800302a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0307 	bic.w	r3, r3, #7
 8003042:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	2b04      	cmp	r3, #4
 8003054:	d117      	bne.n	8003086 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f001 ff1d 	bl	8004ea8 <DMA_CheckFifoParam>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2240      	movs	r2, #64	@ 0x40
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e197      	b.n	80033b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f001 fe58 	bl	8004d44 <DMA_CalcBaseAndBitshift>
 8003094:	4603      	mov	r3, r0
 8003096:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	223f      	movs	r2, #63	@ 0x3f
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e0cd      	b.n	8003246 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a3b      	ldr	r2, [pc, #236]	@ (800319c <HAL_DMA_Init+0x42c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a39      	ldr	r2, [pc, #228]	@ (80031a0 <HAL_DMA_Init+0x430>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01d      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a38      	ldr	r2, [pc, #224]	@ (80031a4 <HAL_DMA_Init+0x434>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d018      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a36      	ldr	r2, [pc, #216]	@ (80031a8 <HAL_DMA_Init+0x438>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a35      	ldr	r2, [pc, #212]	@ (80031ac <HAL_DMA_Init+0x43c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00e      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a33      	ldr	r2, [pc, #204]	@ (80031b0 <HAL_DMA_Init+0x440>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a32      	ldr	r2, [pc, #200]	@ (80031b4 <HAL_DMA_Init+0x444>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_DMA_Init+0x38a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a30      	ldr	r2, [pc, #192]	@ (80031b8 <HAL_DMA_Init+0x448>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_DMA_Init+0x38e>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_DMA_Init+0x390>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8097 	beq.w	8003234 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a24      	ldr	r2, [pc, #144]	@ (800319c <HAL_DMA_Init+0x42c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d021      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <HAL_DMA_Init+0x430>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01c      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <HAL_DMA_Init+0x434>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d017      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_DMA_Init+0x438>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d012      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1e      	ldr	r2, [pc, #120]	@ (80031ac <HAL_DMA_Init+0x43c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00d      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_DMA_Init+0x440>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d008      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <HAL_DMA_Init+0x444>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <HAL_DMA_Init+0x3e4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a19      	ldr	r2, [pc, #100]	@ (80031b8 <HAL_DMA_Init+0x448>)
 8003152:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <HAL_DMA_Init+0x44c>)
 8003170:	4013      	ands	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b40      	cmp	r3, #64	@ 0x40
 800317a:	d021      	beq.n	80031c0 <HAL_DMA_Init+0x450>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d102      	bne.n	800318a <HAL_DMA_Init+0x41a>
 8003184:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003188:	e01b      	b.n	80031c2 <HAL_DMA_Init+0x452>
 800318a:	2300      	movs	r3, #0
 800318c:	e019      	b.n	80031c2 <HAL_DMA_Init+0x452>
 800318e:	bf00      	nop
 8003190:	fe10803f 	.word	0xfe10803f
 8003194:	5c001000 	.word	0x5c001000
 8003198:	ffff0000 	.word	0xffff0000
 800319c:	58025408 	.word	0x58025408
 80031a0:	5802541c 	.word	0x5802541c
 80031a4:	58025430 	.word	0x58025430
 80031a8:	58025444 	.word	0x58025444
 80031ac:	58025458 	.word	0x58025458
 80031b0:	5802546c 	.word	0x5802546c
 80031b4:	58025480 	.word	0x58025480
 80031b8:	58025494 	.word	0x58025494
 80031bc:	fffe000f 	.word	0xfffe000f
 80031c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b6e      	ldr	r3, [pc, #440]	@ (80033c0 <HAL_DMA_Init+0x650>)
 8003208:	4413      	add	r3, r2
 800320a:	4a6e      	ldr	r2, [pc, #440]	@ (80033c4 <HAL_DMA_Init+0x654>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f001 fd93 	bl	8004d44 <DMA_CalcBaseAndBitshift>
 800321e:	4603      	mov	r3, r0
 8003220:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e008      	b.n	8003246 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2240      	movs	r2, #64	@ 0x40
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2203      	movs	r2, #3
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0b7      	b.n	80033b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5f      	ldr	r2, [pc, #380]	@ (80033c8 <HAL_DMA_Init+0x658>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d072      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5d      	ldr	r2, [pc, #372]	@ (80033cc <HAL_DMA_Init+0x65c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d06d      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5c      	ldr	r2, [pc, #368]	@ (80033d0 <HAL_DMA_Init+0x660>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d068      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <HAL_DMA_Init+0x664>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d063      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a59      	ldr	r2, [pc, #356]	@ (80033d8 <HAL_DMA_Init+0x668>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d05e      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a57      	ldr	r2, [pc, #348]	@ (80033dc <HAL_DMA_Init+0x66c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d059      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a56      	ldr	r2, [pc, #344]	@ (80033e0 <HAL_DMA_Init+0x670>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d054      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a54      	ldr	r2, [pc, #336]	@ (80033e4 <HAL_DMA_Init+0x674>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04f      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a53      	ldr	r2, [pc, #332]	@ (80033e8 <HAL_DMA_Init+0x678>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a51      	ldr	r2, [pc, #324]	@ (80033ec <HAL_DMA_Init+0x67c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a50      	ldr	r2, [pc, #320]	@ (80033f0 <HAL_DMA_Init+0x680>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4e      	ldr	r2, [pc, #312]	@ (80033f4 <HAL_DMA_Init+0x684>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4d      	ldr	r2, [pc, #308]	@ (80033f8 <HAL_DMA_Init+0x688>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	@ (80033fc <HAL_DMA_Init+0x68c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003400 <HAL_DMA_Init+0x690>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a48      	ldr	r2, [pc, #288]	@ (8003404 <HAL_DMA_Init+0x694>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a47      	ldr	r2, [pc, #284]	@ (8003408 <HAL_DMA_Init+0x698>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a45      	ldr	r2, [pc, #276]	@ (800340c <HAL_DMA_Init+0x69c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a44      	ldr	r2, [pc, #272]	@ (8003410 <HAL_DMA_Init+0x6a0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a42      	ldr	r2, [pc, #264]	@ (8003414 <HAL_DMA_Init+0x6a4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a41      	ldr	r2, [pc, #260]	@ (8003418 <HAL_DMA_Init+0x6a8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3f      	ldr	r2, [pc, #252]	@ (800341c <HAL_DMA_Init+0x6ac>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a3e      	ldr	r2, [pc, #248]	@ (8003420 <HAL_DMA_Init+0x6b0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_Init+0x5c6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3c      	ldr	r2, [pc, #240]	@ (8003424 <HAL_DMA_Init+0x6b4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_DMA_Init+0x5ca>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_DMA_Init+0x5cc>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d032      	beq.n	80033a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f001 fe2d 	bl	8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b80      	cmp	r3, #128	@ 0x80
 800334c:	d102      	bne.n	8003354 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003368:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_DMA_Init+0x624>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d80c      	bhi.n	8003394 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 feaa 	bl	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	e008      	b.n	80033a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	a7fdabf8 	.word	0xa7fdabf8
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	40020010 	.word	0x40020010
 80033cc:	40020028 	.word	0x40020028
 80033d0:	40020040 	.word	0x40020040
 80033d4:	40020058 	.word	0x40020058
 80033d8:	40020070 	.word	0x40020070
 80033dc:	40020088 	.word	0x40020088
 80033e0:	400200a0 	.word	0x400200a0
 80033e4:	400200b8 	.word	0x400200b8
 80033e8:	40020410 	.word	0x40020410
 80033ec:	40020428 	.word	0x40020428
 80033f0:	40020440 	.word	0x40020440
 80033f4:	40020458 	.word	0x40020458
 80033f8:	40020470 	.word	0x40020470
 80033fc:	40020488 	.word	0x40020488
 8003400:	400204a0 	.word	0x400204a0
 8003404:	400204b8 	.word	0x400204b8
 8003408:	58025408 	.word	0x58025408
 800340c:	5802541c 	.word	0x5802541c
 8003410:	58025430 	.word	0x58025430
 8003414:	58025444 	.word	0x58025444
 8003418:	58025458 	.word	0x58025458
 800341c:	5802546c 	.word	0x5802546c
 8003420:	58025480 	.word	0x58025480
 8003424:	58025494 	.word	0x58025494

08003428 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003430:	f7ff fb82 	bl	8002b38 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e2dc      	b.n	80039fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d008      	beq.n	800345e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e2cd      	b.n	80039fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a76      	ldr	r2, [pc, #472]	@ (800363c <HAL_DMA_Abort+0x214>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a74      	ldr	r2, [pc, #464]	@ (8003640 <HAL_DMA_Abort+0x218>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	@ (8003644 <HAL_DMA_Abort+0x21c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a71      	ldr	r2, [pc, #452]	@ (8003648 <HAL_DMA_Abort+0x220>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a70      	ldr	r2, [pc, #448]	@ (800364c <HAL_DMA_Abort+0x224>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	@ (8003650 <HAL_DMA_Abort+0x228>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6d      	ldr	r2, [pc, #436]	@ (8003654 <HAL_DMA_Abort+0x22c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003658 <HAL_DMA_Abort+0x230>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6a      	ldr	r2, [pc, #424]	@ (800365c <HAL_DMA_Abort+0x234>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a68      	ldr	r2, [pc, #416]	@ (8003660 <HAL_DMA_Abort+0x238>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a67      	ldr	r2, [pc, #412]	@ (8003664 <HAL_DMA_Abort+0x23c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a65      	ldr	r2, [pc, #404]	@ (8003668 <HAL_DMA_Abort+0x240>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a64      	ldr	r2, [pc, #400]	@ (800366c <HAL_DMA_Abort+0x244>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a62      	ldr	r2, [pc, #392]	@ (8003670 <HAL_DMA_Abort+0x248>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a61      	ldr	r2, [pc, #388]	@ (8003674 <HAL_DMA_Abort+0x24c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort+0xd6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003678 <HAL_DMA_Abort+0x250>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_DMA_Abort+0xda>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_DMA_Abort+0xdc>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 021e 	bic.w	r2, r2, #30
 8003516:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003526:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e00a      	b.n	8003546 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020e 	bic.w	r2, r2, #14
 800353e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3c      	ldr	r2, [pc, #240]	@ (800363c <HAL_DMA_Abort+0x214>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d072      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3a      	ldr	r2, [pc, #232]	@ (8003640 <HAL_DMA_Abort+0x218>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d06d      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a39      	ldr	r2, [pc, #228]	@ (8003644 <HAL_DMA_Abort+0x21c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d068      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a37      	ldr	r2, [pc, #220]	@ (8003648 <HAL_DMA_Abort+0x220>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d063      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a36      	ldr	r2, [pc, #216]	@ (800364c <HAL_DMA_Abort+0x224>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d05e      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a34      	ldr	r2, [pc, #208]	@ (8003650 <HAL_DMA_Abort+0x228>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d059      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a33      	ldr	r2, [pc, #204]	@ (8003654 <HAL_DMA_Abort+0x22c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d054      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a31      	ldr	r2, [pc, #196]	@ (8003658 <HAL_DMA_Abort+0x230>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d04f      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a30      	ldr	r2, [pc, #192]	@ (800365c <HAL_DMA_Abort+0x234>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04a      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <HAL_DMA_Abort+0x238>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d045      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <HAL_DMA_Abort+0x23c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <HAL_DMA_Abort+0x240>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d03b      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <HAL_DMA_Abort+0x244>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d036      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a28      	ldr	r2, [pc, #160]	@ (8003670 <HAL_DMA_Abort+0x248>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <HAL_DMA_Abort+0x24c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02c      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a25      	ldr	r2, [pc, #148]	@ (8003678 <HAL_DMA_Abort+0x250>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d027      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a24      	ldr	r2, [pc, #144]	@ (800367c <HAL_DMA_Abort+0x254>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <HAL_DMA_Abort+0x258>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a21      	ldr	r2, [pc, #132]	@ (8003684 <HAL_DMA_Abort+0x25c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1f      	ldr	r2, [pc, #124]	@ (8003688 <HAL_DMA_Abort+0x260>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1e      	ldr	r2, [pc, #120]	@ (800368c <HAL_DMA_Abort+0x264>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1c      	ldr	r2, [pc, #112]	@ (8003690 <HAL_DMA_Abort+0x268>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1b      	ldr	r2, [pc, #108]	@ (8003694 <HAL_DMA_Abort+0x26c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_Abort+0x20e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_DMA_Abort+0x270>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d132      	bne.n	800369c <HAL_DMA_Abort+0x274>
 8003636:	2301      	movs	r3, #1
 8003638:	e031      	b.n	800369e <HAL_DMA_Abort+0x276>
 800363a:	bf00      	nop
 800363c:	40020010 	.word	0x40020010
 8003640:	40020028 	.word	0x40020028
 8003644:	40020040 	.word	0x40020040
 8003648:	40020058 	.word	0x40020058
 800364c:	40020070 	.word	0x40020070
 8003650:	40020088 	.word	0x40020088
 8003654:	400200a0 	.word	0x400200a0
 8003658:	400200b8 	.word	0x400200b8
 800365c:	40020410 	.word	0x40020410
 8003660:	40020428 	.word	0x40020428
 8003664:	40020440 	.word	0x40020440
 8003668:	40020458 	.word	0x40020458
 800366c:	40020470 	.word	0x40020470
 8003670:	40020488 	.word	0x40020488
 8003674:	400204a0 	.word	0x400204a0
 8003678:	400204b8 	.word	0x400204b8
 800367c:	58025408 	.word	0x58025408
 8003680:	5802541c 	.word	0x5802541c
 8003684:	58025430 	.word	0x58025430
 8003688:	58025444 	.word	0x58025444
 800368c:	58025458 	.word	0x58025458
 8003690:	5802546c 	.word	0x5802546c
 8003694:	58025480 	.word	0x58025480
 8003698:	58025494 	.word	0x58025494
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6d      	ldr	r2, [pc, #436]	@ (800386c <HAL_DMA_Abort+0x444>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003870 <HAL_DMA_Abort+0x448>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003874 <HAL_DMA_Abort+0x44c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <HAL_DMA_Abort+0x450>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a67      	ldr	r2, [pc, #412]	@ (800387c <HAL_DMA_Abort+0x454>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a65      	ldr	r2, [pc, #404]	@ (8003880 <HAL_DMA_Abort+0x458>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a64      	ldr	r2, [pc, #400]	@ (8003884 <HAL_DMA_Abort+0x45c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a62      	ldr	r2, [pc, #392]	@ (8003888 <HAL_DMA_Abort+0x460>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a61      	ldr	r2, [pc, #388]	@ (800388c <HAL_DMA_Abort+0x464>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a5f      	ldr	r2, [pc, #380]	@ (8003890 <HAL_DMA_Abort+0x468>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a5e      	ldr	r2, [pc, #376]	@ (8003894 <HAL_DMA_Abort+0x46c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5c      	ldr	r2, [pc, #368]	@ (8003898 <HAL_DMA_Abort+0x470>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5b      	ldr	r2, [pc, #364]	@ (800389c <HAL_DMA_Abort+0x474>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a59      	ldr	r2, [pc, #356]	@ (80038a0 <HAL_DMA_Abort+0x478>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a58      	ldr	r2, [pc, #352]	@ (80038a4 <HAL_DMA_Abort+0x47c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_Abort+0x32a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_DMA_Abort+0x480>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <HAL_DMA_Abort+0x33c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <HAL_DMA_Abort+0x34c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003774:	e013      	b.n	800379e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003776:	f7ff f9df 	bl	8002b38 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b05      	cmp	r3, #5
 8003782:	d90c      	bls.n	800379e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12d      	b.n	80039fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2f      	ldr	r2, [pc, #188]	@ (800386c <HAL_DMA_Abort+0x444>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d04a      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003870 <HAL_DMA_Abort+0x448>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d045      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <HAL_DMA_Abort+0x44c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d040      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003878 <HAL_DMA_Abort+0x450>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d03b      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a29      	ldr	r2, [pc, #164]	@ (800387c <HAL_DMA_Abort+0x454>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d036      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a27      	ldr	r2, [pc, #156]	@ (8003880 <HAL_DMA_Abort+0x458>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d031      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a26      	ldr	r2, [pc, #152]	@ (8003884 <HAL_DMA_Abort+0x45c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d02c      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a24      	ldr	r2, [pc, #144]	@ (8003888 <HAL_DMA_Abort+0x460>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d027      	beq.n	800384a <HAL_DMA_Abort+0x422>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a23      	ldr	r2, [pc, #140]	@ (800388c <HAL_DMA_Abort+0x464>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d022      	beq.n	800384a <HAL_DMA_Abort+0x422>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a21      	ldr	r2, [pc, #132]	@ (8003890 <HAL_DMA_Abort+0x468>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01d      	beq.n	800384a <HAL_DMA_Abort+0x422>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a20      	ldr	r2, [pc, #128]	@ (8003894 <HAL_DMA_Abort+0x46c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_DMA_Abort+0x422>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1e      	ldr	r2, [pc, #120]	@ (8003898 <HAL_DMA_Abort+0x470>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_DMA_Abort+0x422>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <HAL_DMA_Abort+0x474>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_DMA_Abort+0x422>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1b      	ldr	r2, [pc, #108]	@ (80038a0 <HAL_DMA_Abort+0x478>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_DMA_Abort+0x422>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1a      	ldr	r2, [pc, #104]	@ (80038a4 <HAL_DMA_Abort+0x47c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_DMA_Abort+0x422>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <HAL_DMA_Abort+0x480>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_DMA_Abort+0x426>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_DMA_Abort+0x428>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02b      	beq.n	80038ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003858:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	223f      	movs	r2, #63	@ 0x3f
 8003864:	409a      	lsls	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	e02a      	b.n	80038c2 <HAL_DMA_Abort+0x49a>
 800386c:	40020010 	.word	0x40020010
 8003870:	40020028 	.word	0x40020028
 8003874:	40020040 	.word	0x40020040
 8003878:	40020058 	.word	0x40020058
 800387c:	40020070 	.word	0x40020070
 8003880:	40020088 	.word	0x40020088
 8003884:	400200a0 	.word	0x400200a0
 8003888:	400200b8 	.word	0x400200b8
 800388c:	40020410 	.word	0x40020410
 8003890:	40020428 	.word	0x40020428
 8003894:	40020440 	.word	0x40020440
 8003898:	40020458 	.word	0x40020458
 800389c:	40020470 	.word	0x40020470
 80038a0:	40020488 	.word	0x40020488
 80038a4:	400204a0 	.word	0x400204a0
 80038a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2201      	movs	r2, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003a04 <HAL_DMA_Abort+0x5dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d072      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a08 <HAL_DMA_Abort+0x5e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d06d      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a4c      	ldr	r2, [pc, #304]	@ (8003a0c <HAL_DMA_Abort+0x5e4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d068      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a10 <HAL_DMA_Abort+0x5e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d063      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a49      	ldr	r2, [pc, #292]	@ (8003a14 <HAL_DMA_Abort+0x5ec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d05e      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a47      	ldr	r2, [pc, #284]	@ (8003a18 <HAL_DMA_Abort+0x5f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d059      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a46      	ldr	r2, [pc, #280]	@ (8003a1c <HAL_DMA_Abort+0x5f4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d054      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a44      	ldr	r2, [pc, #272]	@ (8003a20 <HAL_DMA_Abort+0x5f8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d04f      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a43      	ldr	r2, [pc, #268]	@ (8003a24 <HAL_DMA_Abort+0x5fc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d04a      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a41      	ldr	r2, [pc, #260]	@ (8003a28 <HAL_DMA_Abort+0x600>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d045      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a40      	ldr	r2, [pc, #256]	@ (8003a2c <HAL_DMA_Abort+0x604>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d040      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3e      	ldr	r2, [pc, #248]	@ (8003a30 <HAL_DMA_Abort+0x608>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d03b      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a34 <HAL_DMA_Abort+0x60c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d036      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3b      	ldr	r2, [pc, #236]	@ (8003a38 <HAL_DMA_Abort+0x610>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d031      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a3a      	ldr	r2, [pc, #232]	@ (8003a3c <HAL_DMA_Abort+0x614>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d02c      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a38      	ldr	r2, [pc, #224]	@ (8003a40 <HAL_DMA_Abort+0x618>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d027      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a37      	ldr	r2, [pc, #220]	@ (8003a44 <HAL_DMA_Abort+0x61c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a35      	ldr	r2, [pc, #212]	@ (8003a48 <HAL_DMA_Abort+0x620>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01d      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a34      	ldr	r2, [pc, #208]	@ (8003a4c <HAL_DMA_Abort+0x624>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a32      	ldr	r2, [pc, #200]	@ (8003a50 <HAL_DMA_Abort+0x628>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a31      	ldr	r2, [pc, #196]	@ (8003a54 <HAL_DMA_Abort+0x62c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2f      	ldr	r2, [pc, #188]	@ (8003a58 <HAL_DMA_Abort+0x630>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2e      	ldr	r2, [pc, #184]	@ (8003a5c <HAL_DMA_Abort+0x634>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_DMA_Abort+0x58a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003a60 <HAL_DMA_Abort+0x638>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_DMA_Abort+0x58e>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_DMA_Abort+0x590>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40020010 	.word	0x40020010
 8003a08:	40020028 	.word	0x40020028
 8003a0c:	40020040 	.word	0x40020040
 8003a10:	40020058 	.word	0x40020058
 8003a14:	40020070 	.word	0x40020070
 8003a18:	40020088 	.word	0x40020088
 8003a1c:	400200a0 	.word	0x400200a0
 8003a20:	400200b8 	.word	0x400200b8
 8003a24:	40020410 	.word	0x40020410
 8003a28:	40020428 	.word	0x40020428
 8003a2c:	40020440 	.word	0x40020440
 8003a30:	40020458 	.word	0x40020458
 8003a34:	40020470 	.word	0x40020470
 8003a38:	40020488 	.word	0x40020488
 8003a3c:	400204a0 	.word	0x400204a0
 8003a40:	400204b8 	.word	0x400204b8
 8003a44:	58025408 	.word	0x58025408
 8003a48:	5802541c 	.word	0x5802541c
 8003a4c:	58025430 	.word	0x58025430
 8003a50:	58025444 	.word	0x58025444
 8003a54:	58025458 	.word	0x58025458
 8003a58:	5802546c 	.word	0x5802546c
 8003a5c:	58025480 	.word	0x58025480
 8003a60:	58025494 	.word	0x58025494

08003a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e237      	b.n	8003ee6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d004      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2280      	movs	r2, #128	@ 0x80
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e22c      	b.n	8003ee6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5c      	ldr	r2, [pc, #368]	@ (8003c04 <HAL_DMA_Abort_IT+0x1a0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04a      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c08 <HAL_DMA_Abort_IT+0x1a4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d045      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a59      	ldr	r2, [pc, #356]	@ (8003c0c <HAL_DMA_Abort_IT+0x1a8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a58      	ldr	r2, [pc, #352]	@ (8003c10 <HAL_DMA_Abort_IT+0x1ac>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03b      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a56      	ldr	r2, [pc, #344]	@ (8003c14 <HAL_DMA_Abort_IT+0x1b0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d036      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a55      	ldr	r2, [pc, #340]	@ (8003c18 <HAL_DMA_Abort_IT+0x1b4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d031      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a53      	ldr	r2, [pc, #332]	@ (8003c1c <HAL_DMA_Abort_IT+0x1b8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02c      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a52      	ldr	r2, [pc, #328]	@ (8003c20 <HAL_DMA_Abort_IT+0x1bc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d027      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a50      	ldr	r2, [pc, #320]	@ (8003c24 <HAL_DMA_Abort_IT+0x1c0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a4f      	ldr	r2, [pc, #316]	@ (8003c28 <HAL_DMA_Abort_IT+0x1c4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a4d      	ldr	r2, [pc, #308]	@ (8003c2c <HAL_DMA_Abort_IT+0x1c8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a4c      	ldr	r2, [pc, #304]	@ (8003c30 <HAL_DMA_Abort_IT+0x1cc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <HAL_DMA_Abort_IT+0x1d0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a49      	ldr	r2, [pc, #292]	@ (8003c38 <HAL_DMA_Abort_IT+0x1d4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a47      	ldr	r2, [pc, #284]	@ (8003c3c <HAL_DMA_Abort_IT+0x1d8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xc8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a46      	ldr	r2, [pc, #280]	@ (8003c40 <HAL_DMA_Abort_IT+0x1dc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_DMA_Abort_IT+0xcc>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_Abort_IT+0xce>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8086 	beq.w	8003c44 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2f      	ldr	r2, [pc, #188]	@ (8003c04 <HAL_DMA_Abort_IT+0x1a0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003c08 <HAL_DMA_Abort_IT+0x1a4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	@ (8003c0c <HAL_DMA_Abort_IT+0x1a8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	@ (8003c10 <HAL_DMA_Abort_IT+0x1ac>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <HAL_DMA_Abort_IT+0x1b0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a28      	ldr	r2, [pc, #160]	@ (8003c18 <HAL_DMA_Abort_IT+0x1b4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a26      	ldr	r2, [pc, #152]	@ (8003c1c <HAL_DMA_Abort_IT+0x1b8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	@ (8003c20 <HAL_DMA_Abort_IT+0x1bc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a23      	ldr	r2, [pc, #140]	@ (8003c24 <HAL_DMA_Abort_IT+0x1c0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a22      	ldr	r2, [pc, #136]	@ (8003c28 <HAL_DMA_Abort_IT+0x1c4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a20      	ldr	r2, [pc, #128]	@ (8003c2c <HAL_DMA_Abort_IT+0x1c8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c30 <HAL_DMA_Abort_IT+0x1cc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c34 <HAL_DMA_Abort_IT+0x1d0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c38 <HAL_DMA_Abort_IT+0x1d4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c3c <HAL_DMA_Abort_IT+0x1d8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x17c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a19      	ldr	r2, [pc, #100]	@ (8003c40 <HAL_DMA_Abort_IT+0x1dc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <HAL_DMA_Abort_IT+0x18e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e178      	b.n	8003ee4 <HAL_DMA_Abort_IT+0x480>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e16f      	b.n	8003ee4 <HAL_DMA_Abort_IT+0x480>
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 020e 	bic.w	r2, r2, #14
 8003c52:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6c      	ldr	r2, [pc, #432]	@ (8003e0c <HAL_DMA_Abort_IT+0x3a8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d04a      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6b      	ldr	r2, [pc, #428]	@ (8003e10 <HAL_DMA_Abort_IT+0x3ac>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d045      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a69      	ldr	r2, [pc, #420]	@ (8003e14 <HAL_DMA_Abort_IT+0x3b0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d040      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a68      	ldr	r2, [pc, #416]	@ (8003e18 <HAL_DMA_Abort_IT+0x3b4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d03b      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a66      	ldr	r2, [pc, #408]	@ (8003e1c <HAL_DMA_Abort_IT+0x3b8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d036      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a65      	ldr	r2, [pc, #404]	@ (8003e20 <HAL_DMA_Abort_IT+0x3bc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d031      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a63      	ldr	r2, [pc, #396]	@ (8003e24 <HAL_DMA_Abort_IT+0x3c0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d02c      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a62      	ldr	r2, [pc, #392]	@ (8003e28 <HAL_DMA_Abort_IT+0x3c4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d027      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a60      	ldr	r2, [pc, #384]	@ (8003e2c <HAL_DMA_Abort_IT+0x3c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e30 <HAL_DMA_Abort_IT+0x3cc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003e34 <HAL_DMA_Abort_IT+0x3d0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8003e38 <HAL_DMA_Abort_IT+0x3d4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e3c <HAL_DMA_Abort_IT+0x3d8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a59      	ldr	r2, [pc, #356]	@ (8003e40 <HAL_DMA_Abort_IT+0x3dc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a57      	ldr	r2, [pc, #348]	@ (8003e44 <HAL_DMA_Abort_IT+0x3e0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x290>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a56      	ldr	r2, [pc, #344]	@ (8003e48 <HAL_DMA_Abort_IT+0x3e4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <HAL_DMA_Abort_IT+0x2a2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <HAL_DMA_Abort_IT+0x2b2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e0c <HAL_DMA_Abort_IT+0x3a8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d072      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3a      	ldr	r2, [pc, #232]	@ (8003e10 <HAL_DMA_Abort_IT+0x3ac>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d06d      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a39      	ldr	r2, [pc, #228]	@ (8003e14 <HAL_DMA_Abort_IT+0x3b0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d068      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a37      	ldr	r2, [pc, #220]	@ (8003e18 <HAL_DMA_Abort_IT+0x3b4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d063      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a36      	ldr	r2, [pc, #216]	@ (8003e1c <HAL_DMA_Abort_IT+0x3b8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d05e      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a34      	ldr	r2, [pc, #208]	@ (8003e20 <HAL_DMA_Abort_IT+0x3bc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d059      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a33      	ldr	r2, [pc, #204]	@ (8003e24 <HAL_DMA_Abort_IT+0x3c0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d054      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a31      	ldr	r2, [pc, #196]	@ (8003e28 <HAL_DMA_Abort_IT+0x3c4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04f      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a30      	ldr	r2, [pc, #192]	@ (8003e2c <HAL_DMA_Abort_IT+0x3c8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04a      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2e      	ldr	r2, [pc, #184]	@ (8003e30 <HAL_DMA_Abort_IT+0x3cc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d045      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e34 <HAL_DMA_Abort_IT+0x3d0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2b      	ldr	r2, [pc, #172]	@ (8003e38 <HAL_DMA_Abort_IT+0x3d4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <HAL_DMA_Abort_IT+0x3d8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	@ (8003e40 <HAL_DMA_Abort_IT+0x3dc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a27      	ldr	r2, [pc, #156]	@ (8003e44 <HAL_DMA_Abort_IT+0x3e0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d02c      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a25      	ldr	r2, [pc, #148]	@ (8003e48 <HAL_DMA_Abort_IT+0x3e4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a24      	ldr	r2, [pc, #144]	@ (8003e4c <HAL_DMA_Abort_IT+0x3e8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a22      	ldr	r2, [pc, #136]	@ (8003e50 <HAL_DMA_Abort_IT+0x3ec>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a21      	ldr	r2, [pc, #132]	@ (8003e54 <HAL_DMA_Abort_IT+0x3f0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e58 <HAL_DMA_Abort_IT+0x3f4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e5c <HAL_DMA_Abort_IT+0x3f8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1c      	ldr	r2, [pc, #112]	@ (8003e60 <HAL_DMA_Abort_IT+0x3fc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e64 <HAL_DMA_Abort_IT+0x400>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x3a2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a19      	ldr	r2, [pc, #100]	@ (8003e68 <HAL_DMA_Abort_IT+0x404>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d132      	bne.n	8003e6c <HAL_DMA_Abort_IT+0x408>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e031      	b.n	8003e6e <HAL_DMA_Abort_IT+0x40a>
 8003e0a:	bf00      	nop
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
 8003e4c:	58025408 	.word	0x58025408
 8003e50:	5802541c 	.word	0x5802541c
 8003e54:	58025430 	.word	0x58025430
 8003e58:	58025444 	.word	0x58025444
 8003e5c:	58025458 	.word	0x58025458
 8003e60:	5802546c 	.word	0x5802546c
 8003e64:	58025480 	.word	0x58025480
 8003e68:	58025494 	.word	0x58025494
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d028      	beq.n	8003ec4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	409a      	lsls	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ea0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ec2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003efc:	4b67      	ldr	r3, [pc, #412]	@ (800409c <HAL_DMA_IRQHandler+0x1ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a67      	ldr	r2, [pc, #412]	@ (80040a0 <HAL_DMA_IRQHandler+0x1b0>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5f      	ldr	r2, [pc, #380]	@ (80040a4 <HAL_DMA_IRQHandler+0x1b4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04a      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5d      	ldr	r2, [pc, #372]	@ (80040a8 <HAL_DMA_IRQHandler+0x1b8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d045      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80040ac <HAL_DMA_IRQHandler+0x1bc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d040      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5a      	ldr	r2, [pc, #360]	@ (80040b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a59      	ldr	r2, [pc, #356]	@ (80040b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d036      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a57      	ldr	r2, [pc, #348]	@ (80040b8 <HAL_DMA_IRQHandler+0x1c8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d031      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a56      	ldr	r2, [pc, #344]	@ (80040bc <HAL_DMA_IRQHandler+0x1cc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d02c      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a54      	ldr	r2, [pc, #336]	@ (80040c0 <HAL_DMA_IRQHandler+0x1d0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d027      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a53      	ldr	r2, [pc, #332]	@ (80040c4 <HAL_DMA_IRQHandler+0x1d4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d022      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a51      	ldr	r2, [pc, #324]	@ (80040c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a50      	ldr	r2, [pc, #320]	@ (80040cc <HAL_DMA_IRQHandler+0x1dc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4e      	ldr	r2, [pc, #312]	@ (80040d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80040d4 <HAL_DMA_IRQHandler+0x1e4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80040d8 <HAL_DMA_IRQHandler+0x1e8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80040dc <HAL_DMA_IRQHandler+0x1ec>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xd2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a48      	ldr	r2, [pc, #288]	@ (80040e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_DMA_IRQHandler+0xd6>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_DMA_IRQHandler+0xd8>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 842b 	beq.w	8004824 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80a2 	beq.w	8004128 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80040a4 <HAL_DMA_IRQHandler+0x1b4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04a      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <HAL_DMA_IRQHandler+0x1b8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d045      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80040ac <HAL_DMA_IRQHandler+0x1bc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d03b      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a28      	ldr	r2, [pc, #160]	@ (80040b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d036      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a27      	ldr	r2, [pc, #156]	@ (80040b8 <HAL_DMA_IRQHandler+0x1c8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d031      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a25      	ldr	r2, [pc, #148]	@ (80040bc <HAL_DMA_IRQHandler+0x1cc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d027      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <HAL_DMA_IRQHandler+0x1d4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a21      	ldr	r2, [pc, #132]	@ (80040c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d01d      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <HAL_DMA_IRQHandler+0x1dc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1e      	ldr	r2, [pc, #120]	@ (80040d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1c      	ldr	r2, [pc, #112]	@ (80040d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1b      	ldr	r2, [pc, #108]	@ (80040d8 <HAL_DMA_IRQHandler+0x1e8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_DMA_IRQHandler+0x1ec>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_DMA_IRQHandler+0x194>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d12f      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x1f4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e02e      	b.n	80040f8 <HAL_DMA_IRQHandler+0x208>
 800409a:	bf00      	nop
 800409c:	2400000c 	.word	0x2400000c
 80040a0:	1b4e81b5 	.word	0x1b4e81b5
 80040a4:	40020010 	.word	0x40020010
 80040a8:	40020028 	.word	0x40020028
 80040ac:	40020040 	.word	0x40020040
 80040b0:	40020058 	.word	0x40020058
 80040b4:	40020070 	.word	0x40020070
 80040b8:	40020088 	.word	0x40020088
 80040bc:	400200a0 	.word	0x400200a0
 80040c0:	400200b8 	.word	0x400200b8
 80040c4:	40020410 	.word	0x40020410
 80040c8:	40020428 	.word	0x40020428
 80040cc:	40020440 	.word	0x40020440
 80040d0:	40020458 	.word	0x40020458
 80040d4:	40020470 	.word	0x40020470
 80040d8:	40020488 	.word	0x40020488
 80040dc:	400204a0 	.word	0x400204a0
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0204 	bic.w	r2, r2, #4
 800410a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2208      	movs	r2, #8
 8004116:	409a      	lsls	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d06e      	beq.n	800421c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a69      	ldr	r2, [pc, #420]	@ (80042e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04a      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a67      	ldr	r2, [pc, #412]	@ (80042ec <HAL_DMA_IRQHandler+0x3fc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d045      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a66      	ldr	r2, [pc, #408]	@ (80042f0 <HAL_DMA_IRQHandler+0x400>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d040      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a64      	ldr	r2, [pc, #400]	@ (80042f4 <HAL_DMA_IRQHandler+0x404>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d03b      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a63      	ldr	r2, [pc, #396]	@ (80042f8 <HAL_DMA_IRQHandler+0x408>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d036      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a61      	ldr	r2, [pc, #388]	@ (80042fc <HAL_DMA_IRQHandler+0x40c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d031      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a60      	ldr	r2, [pc, #384]	@ (8004300 <HAL_DMA_IRQHandler+0x410>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d02c      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5e      	ldr	r2, [pc, #376]	@ (8004304 <HAL_DMA_IRQHandler+0x414>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d027      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a5d      	ldr	r2, [pc, #372]	@ (8004308 <HAL_DMA_IRQHandler+0x418>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5b      	ldr	r2, [pc, #364]	@ (800430c <HAL_DMA_IRQHandler+0x41c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01d      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004310 <HAL_DMA_IRQHandler+0x420>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a58      	ldr	r2, [pc, #352]	@ (8004314 <HAL_DMA_IRQHandler+0x424>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a57      	ldr	r2, [pc, #348]	@ (8004318 <HAL_DMA_IRQHandler+0x428>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a55      	ldr	r2, [pc, #340]	@ (800431c <HAL_DMA_IRQHandler+0x42c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a54      	ldr	r2, [pc, #336]	@ (8004320 <HAL_DMA_IRQHandler+0x430>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_DMA_IRQHandler+0x2ee>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a52      	ldr	r2, [pc, #328]	@ (8004324 <HAL_DMA_IRQHandler+0x434>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10a      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x304>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e003      	b.n	80041fc <HAL_DMA_IRQHandler+0x30c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2201      	movs	r2, #1
 800420a:	409a      	lsls	r2, r3
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f043 0202 	orr.w	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2204      	movs	r2, #4
 8004226:	409a      	lsls	r2, r3
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 808f 	beq.w	8004350 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2c      	ldr	r2, [pc, #176]	@ (80042e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d04a      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <HAL_DMA_IRQHandler+0x3fc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d045      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a29      	ldr	r2, [pc, #164]	@ (80042f0 <HAL_DMA_IRQHandler+0x400>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d040      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <HAL_DMA_IRQHandler+0x404>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d03b      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a26      	ldr	r2, [pc, #152]	@ (80042f8 <HAL_DMA_IRQHandler+0x408>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d036      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a24      	ldr	r2, [pc, #144]	@ (80042fc <HAL_DMA_IRQHandler+0x40c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d031      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a23      	ldr	r2, [pc, #140]	@ (8004300 <HAL_DMA_IRQHandler+0x410>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d02c      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_DMA_IRQHandler+0x414>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d027      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a20      	ldr	r2, [pc, #128]	@ (8004308 <HAL_DMA_IRQHandler+0x418>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d022      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_DMA_IRQHandler+0x41c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01d      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <HAL_DMA_IRQHandler+0x420>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d018      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_DMA_IRQHandler+0x424>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004318 <HAL_DMA_IRQHandler+0x428>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	@ (800431c <HAL_DMA_IRQHandler+0x42c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <HAL_DMA_IRQHandler+0x430>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x3e2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <HAL_DMA_IRQHandler+0x434>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d12a      	bne.n	8004328 <HAL_DMA_IRQHandler+0x438>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e023      	b.n	8004330 <HAL_DMA_IRQHandler+0x440>
 80042e8:	40020010 	.word	0x40020010
 80042ec:	40020028 	.word	0x40020028
 80042f0:	40020040 	.word	0x40020040
 80042f4:	40020058 	.word	0x40020058
 80042f8:	40020070 	.word	0x40020070
 80042fc:	40020088 	.word	0x40020088
 8004300:	400200a0 	.word	0x400200a0
 8004304:	400200b8 	.word	0x400200b8
 8004308:	40020410 	.word	0x40020410
 800430c:	40020428 	.word	0x40020428
 8004310:	40020440 	.word	0x40020440
 8004314:	40020458 	.word	0x40020458
 8004318:	40020470 	.word	0x40020470
 800431c:	40020488 	.word	0x40020488
 8004320:	400204a0 	.word	0x400204a0
 8004324:	400204b8 	.word	0x400204b8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2204      	movs	r2, #4
 800433e:	409a      	lsls	r2, r3
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2210      	movs	r2, #16
 800435a:	409a      	lsls	r2, r3
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a6 	beq.w	80044b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a85      	ldr	r2, [pc, #532]	@ (8004580 <HAL_DMA_IRQHandler+0x690>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d04a      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a83      	ldr	r2, [pc, #524]	@ (8004584 <HAL_DMA_IRQHandler+0x694>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d045      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a82      	ldr	r2, [pc, #520]	@ (8004588 <HAL_DMA_IRQHandler+0x698>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d040      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a80      	ldr	r2, [pc, #512]	@ (800458c <HAL_DMA_IRQHandler+0x69c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d03b      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7f      	ldr	r2, [pc, #508]	@ (8004590 <HAL_DMA_IRQHandler+0x6a0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d036      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a7d      	ldr	r2, [pc, #500]	@ (8004594 <HAL_DMA_IRQHandler+0x6a4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004598 <HAL_DMA_IRQHandler+0x6a8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d02c      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7a      	ldr	r2, [pc, #488]	@ (800459c <HAL_DMA_IRQHandler+0x6ac>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d027      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a79      	ldr	r2, [pc, #484]	@ (80045a0 <HAL_DMA_IRQHandler+0x6b0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d022      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a77      	ldr	r2, [pc, #476]	@ (80045a4 <HAL_DMA_IRQHandler+0x6b4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01d      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a76      	ldr	r2, [pc, #472]	@ (80045a8 <HAL_DMA_IRQHandler+0x6b8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a74      	ldr	r2, [pc, #464]	@ (80045ac <HAL_DMA_IRQHandler+0x6bc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <HAL_DMA_IRQHandler+0x6c0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a71      	ldr	r2, [pc, #452]	@ (80045b4 <HAL_DMA_IRQHandler+0x6c4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a70      	ldr	r2, [pc, #448]	@ (80045b8 <HAL_DMA_IRQHandler+0x6c8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_DMA_IRQHandler+0x516>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6e      	ldr	r2, [pc, #440]	@ (80045bc <HAL_DMA_IRQHandler+0x6cc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10a      	bne.n	800441c <HAL_DMA_IRQHandler+0x52c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e009      	b.n	8004430 <HAL_DMA_IRQHandler+0x540>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d03e      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2210      	movs	r2, #16
 800443e:	409a      	lsls	r2, r3
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d108      	bne.n	8004472 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d024      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e01f      	b.n	80044b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
 8004482:	e016      	b.n	80044b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0208 	bic.w	r2, r2, #8
 80044a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2220      	movs	r2, #32
 80044bc:	409a      	lsls	r2, r3
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8110 	beq.w	80046e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004580 <HAL_DMA_IRQHandler+0x690>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d04a      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <HAL_DMA_IRQHandler+0x694>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d045      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a29      	ldr	r2, [pc, #164]	@ (8004588 <HAL_DMA_IRQHandler+0x698>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d040      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_DMA_IRQHandler+0x69c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d03b      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a26      	ldr	r2, [pc, #152]	@ (8004590 <HAL_DMA_IRQHandler+0x6a0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d036      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <HAL_DMA_IRQHandler+0x6a4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d031      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a23      	ldr	r2, [pc, #140]	@ (8004598 <HAL_DMA_IRQHandler+0x6a8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02c      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_DMA_IRQHandler+0x6ac>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d027      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a20      	ldr	r2, [pc, #128]	@ (80045a0 <HAL_DMA_IRQHandler+0x6b0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d022      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_DMA_IRQHandler+0x6b4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d01d      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_DMA_IRQHandler+0x6b8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d018      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <HAL_DMA_IRQHandler+0x6bc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1a      	ldr	r2, [pc, #104]	@ (80045b0 <HAL_DMA_IRQHandler+0x6c0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00e      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a19      	ldr	r2, [pc, #100]	@ (80045b4 <HAL_DMA_IRQHandler+0x6c4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a17      	ldr	r2, [pc, #92]	@ (80045b8 <HAL_DMA_IRQHandler+0x6c8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_DMA_IRQHandler+0x678>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a16      	ldr	r2, [pc, #88]	@ (80045bc <HAL_DMA_IRQHandler+0x6cc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d12b      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x6d0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e02a      	b.n	80045d4 <HAL_DMA_IRQHandler+0x6e4>
 800457e:	bf00      	nop
 8004580:	40020010 	.word	0x40020010
 8004584:	40020028 	.word	0x40020028
 8004588:	40020040 	.word	0x40020040
 800458c:	40020058 	.word	0x40020058
 8004590:	40020070 	.word	0x40020070
 8004594:	40020088 	.word	0x40020088
 8004598:	400200a0 	.word	0x400200a0
 800459c:	400200b8 	.word	0x400200b8
 80045a0:	40020410 	.word	0x40020410
 80045a4:	40020428 	.word	0x40020428
 80045a8:	40020440 	.word	0x40020440
 80045ac:	40020458 	.word	0x40020458
 80045b0:	40020470 	.word	0x40020470
 80045b4:	40020488 	.word	0x40020488
 80045b8:	400204a0 	.word	0x400204a0
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf14      	ite	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	2300      	moveq	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8087 	beq.w	80046e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2220      	movs	r2, #32
 80045e4:	409a      	lsls	r2, r3
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d139      	bne.n	800466a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0216 	bic.w	r2, r2, #22
 8004604:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004614:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_DMA_IRQHandler+0x736>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0208 	bic.w	r2, r2, #8
 8004634:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	223f      	movs	r2, #63	@ 0x3f
 8004640:	409a      	lsls	r2, r3
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 834a 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
          }
          return;
 8004668:	e344      	b.n	8004cf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d018      	beq.n	80046aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d108      	bne.n	8004698 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02c      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
 8004696:	e027      	b.n	80046e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d023      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	4798      	blx	r3
 80046a8:	e01e      	b.n	80046e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10f      	bne.n	80046d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0210 	bic.w	r2, r2, #16
 80046c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8306 	beq.w	8004cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8088 	beq.w	8004810 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a7a      	ldr	r2, [pc, #488]	@ (80048f8 <HAL_DMA_IRQHandler+0xa08>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d04a      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a79      	ldr	r2, [pc, #484]	@ (80048fc <HAL_DMA_IRQHandler+0xa0c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d045      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a77      	ldr	r2, [pc, #476]	@ (8004900 <HAL_DMA_IRQHandler+0xa10>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d040      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a76      	ldr	r2, [pc, #472]	@ (8004904 <HAL_DMA_IRQHandler+0xa14>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d03b      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a74      	ldr	r2, [pc, #464]	@ (8004908 <HAL_DMA_IRQHandler+0xa18>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d036      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a73      	ldr	r2, [pc, #460]	@ (800490c <HAL_DMA_IRQHandler+0xa1c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d031      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a71      	ldr	r2, [pc, #452]	@ (8004910 <HAL_DMA_IRQHandler+0xa20>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02c      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a70      	ldr	r2, [pc, #448]	@ (8004914 <HAL_DMA_IRQHandler+0xa24>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d027      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a6e      	ldr	r2, [pc, #440]	@ (8004918 <HAL_DMA_IRQHandler+0xa28>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6d      	ldr	r2, [pc, #436]	@ (800491c <HAL_DMA_IRQHandler+0xa2c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01d      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6b      	ldr	r2, [pc, #428]	@ (8004920 <HAL_DMA_IRQHandler+0xa30>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6a      	ldr	r2, [pc, #424]	@ (8004924 <HAL_DMA_IRQHandler+0xa34>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a68      	ldr	r2, [pc, #416]	@ (8004928 <HAL_DMA_IRQHandler+0xa38>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a67      	ldr	r2, [pc, #412]	@ (800492c <HAL_DMA_IRQHandler+0xa3c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a65      	ldr	r2, [pc, #404]	@ (8004930 <HAL_DMA_IRQHandler+0xa40>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x8b8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a64      	ldr	r2, [pc, #400]	@ (8004934 <HAL_DMA_IRQHandler+0xa44>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <HAL_DMA_IRQHandler+0x8ca>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e007      	b.n	80047ca <HAL_DMA_IRQHandler+0x8da>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d307      	bcc.n	80047e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f2      	bne.n	80047ca <HAL_DMA_IRQHandler+0x8da>
 80047e4:	e000      	b.n	80047e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2203      	movs	r2, #3
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80047fe:	e003      	b.n	8004808 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8272 	beq.w	8004cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
 8004822:	e26c      	b.n	8004cfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a43      	ldr	r2, [pc, #268]	@ (8004938 <HAL_DMA_IRQHandler+0xa48>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a42      	ldr	r2, [pc, #264]	@ (800493c <HAL_DMA_IRQHandler+0xa4c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d01d      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a40      	ldr	r2, [pc, #256]	@ (8004940 <HAL_DMA_IRQHandler+0xa50>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3f      	ldr	r2, [pc, #252]	@ (8004944 <HAL_DMA_IRQHandler+0xa54>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3d      	ldr	r2, [pc, #244]	@ (8004948 <HAL_DMA_IRQHandler+0xa58>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3c      	ldr	r2, [pc, #240]	@ (800494c <HAL_DMA_IRQHandler+0xa5c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3a      	ldr	r2, [pc, #232]	@ (8004950 <HAL_DMA_IRQHandler+0xa60>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_DMA_IRQHandler+0x984>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a39      	ldr	r2, [pc, #228]	@ (8004954 <HAL_DMA_IRQHandler+0xa64>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_DMA_IRQHandler+0x988>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_DMA_IRQHandler+0x98a>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 823f 	beq.w	8004cfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2204      	movs	r2, #4
 8004892:	409a      	lsls	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80cd 	beq.w	8004a38 <HAL_DMA_IRQHandler+0xb48>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80c7 	beq.w	8004a38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2204      	movs	r2, #4
 80048b4:	409a      	lsls	r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d049      	beq.n	8004958 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8210 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e0:	e20a      	b.n	8004cf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8206 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f4:	e200      	b.n	8004cf8 <HAL_DMA_IRQHandler+0xe08>
 80048f6:	bf00      	nop
 80048f8:	40020010 	.word	0x40020010
 80048fc:	40020028 	.word	0x40020028
 8004900:	40020040 	.word	0x40020040
 8004904:	40020058 	.word	0x40020058
 8004908:	40020070 	.word	0x40020070
 800490c:	40020088 	.word	0x40020088
 8004910:	400200a0 	.word	0x400200a0
 8004914:	400200b8 	.word	0x400200b8
 8004918:	40020410 	.word	0x40020410
 800491c:	40020428 	.word	0x40020428
 8004920:	40020440 	.word	0x40020440
 8004924:	40020458 	.word	0x40020458
 8004928:	40020470 	.word	0x40020470
 800492c:	40020488 	.word	0x40020488
 8004930:	400204a0 	.word	0x400204a0
 8004934:	400204b8 	.word	0x400204b8
 8004938:	58025408 	.word	0x58025408
 800493c:	5802541c 	.word	0x5802541c
 8004940:	58025430 	.word	0x58025430
 8004944:	58025444 	.word	0x58025444
 8004948:	58025458 	.word	0x58025458
 800494c:	5802546c 	.word	0x5802546c
 8004950:	58025480 	.word	0x58025480
 8004954:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d160      	bne.n	8004a24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a7f      	ldr	r2, [pc, #508]	@ (8004b64 <HAL_DMA_IRQHandler+0xc74>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d04a      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a7d      	ldr	r2, [pc, #500]	@ (8004b68 <HAL_DMA_IRQHandler+0xc78>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d045      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b6c <HAL_DMA_IRQHandler+0xc7c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d040      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a7a      	ldr	r2, [pc, #488]	@ (8004b70 <HAL_DMA_IRQHandler+0xc80>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d03b      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a79      	ldr	r2, [pc, #484]	@ (8004b74 <HAL_DMA_IRQHandler+0xc84>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d036      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a77      	ldr	r2, [pc, #476]	@ (8004b78 <HAL_DMA_IRQHandler+0xc88>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d031      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a76      	ldr	r2, [pc, #472]	@ (8004b7c <HAL_DMA_IRQHandler+0xc8c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02c      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a74      	ldr	r2, [pc, #464]	@ (8004b80 <HAL_DMA_IRQHandler+0xc90>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d027      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a73      	ldr	r2, [pc, #460]	@ (8004b84 <HAL_DMA_IRQHandler+0xc94>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a71      	ldr	r2, [pc, #452]	@ (8004b88 <HAL_DMA_IRQHandler+0xc98>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a70      	ldr	r2, [pc, #448]	@ (8004b8c <HAL_DMA_IRQHandler+0xc9c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b90 <HAL_DMA_IRQHandler+0xca0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a6d      	ldr	r2, [pc, #436]	@ (8004b94 <HAL_DMA_IRQHandler+0xca4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b98 <HAL_DMA_IRQHandler+0xca8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b9c <HAL_DMA_IRQHandler+0xcac>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xb12>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a68      	ldr	r2, [pc, #416]	@ (8004ba0 <HAL_DMA_IRQHandler+0xcb0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <HAL_DMA_IRQHandler+0xb24>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0208 	bic.w	r2, r2, #8
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e007      	b.n	8004a24 <HAL_DMA_IRQHandler+0xb34>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8165 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a36:	e15f      	b.n	8004cf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2202      	movs	r2, #2
 8004a42:	409a      	lsls	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80c5 	beq.w	8004bd8 <HAL_DMA_IRQHandler+0xce8>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80bf 	beq.w	8004bd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2202      	movs	r2, #2
 8004a64:	409a      	lsls	r2, r3
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d018      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 813a 	beq.w	8004cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a90:	e134      	b.n	8004cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8130 	beq.w	8004cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa4:	e12a      	b.n	8004cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 8089 	bne.w	8004bc4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b64 <HAL_DMA_IRQHandler+0xc74>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a29      	ldr	r2, [pc, #164]	@ (8004b68 <HAL_DMA_IRQHandler+0xc78>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a28      	ldr	r2, [pc, #160]	@ (8004b6c <HAL_DMA_IRQHandler+0xc7c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	@ (8004b70 <HAL_DMA_IRQHandler+0xc80>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a25      	ldr	r2, [pc, #148]	@ (8004b74 <HAL_DMA_IRQHandler+0xc84>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a23      	ldr	r2, [pc, #140]	@ (8004b78 <HAL_DMA_IRQHandler+0xc88>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a22      	ldr	r2, [pc, #136]	@ (8004b7c <HAL_DMA_IRQHandler+0xc8c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a20      	ldr	r2, [pc, #128]	@ (8004b80 <HAL_DMA_IRQHandler+0xc90>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1f      	ldr	r2, [pc, #124]	@ (8004b84 <HAL_DMA_IRQHandler+0xc94>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	@ (8004b88 <HAL_DMA_IRQHandler+0xc98>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b8c <HAL_DMA_IRQHandler+0xc9c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1a      	ldr	r2, [pc, #104]	@ (8004b90 <HAL_DMA_IRQHandler+0xca0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a19      	ldr	r2, [pc, #100]	@ (8004b94 <HAL_DMA_IRQHandler+0xca4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <HAL_DMA_IRQHandler+0xca8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a16      	ldr	r2, [pc, #88]	@ (8004b9c <HAL_DMA_IRQHandler+0xcac>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xc62>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ba0 <HAL_DMA_IRQHandler+0xcb0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d128      	bne.n	8004ba4 <HAL_DMA_IRQHandler+0xcb4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0214 	bic.w	r2, r2, #20
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e027      	b.n	8004bb4 <HAL_DMA_IRQHandler+0xcc4>
 8004b64:	40020010 	.word	0x40020010
 8004b68:	40020028 	.word	0x40020028
 8004b6c:	40020040 	.word	0x40020040
 8004b70:	40020058 	.word	0x40020058
 8004b74:	40020070 	.word	0x40020070
 8004b78:	40020088 	.word	0x40020088
 8004b7c:	400200a0 	.word	0x400200a0
 8004b80:	400200b8 	.word	0x400200b8
 8004b84:	40020410 	.word	0x40020410
 8004b88:	40020428 	.word	0x40020428
 8004b8c:	40020440 	.word	0x40020440
 8004b90:	40020458 	.word	0x40020458
 8004b94:	40020470 	.word	0x40020470
 8004b98:	40020488 	.word	0x40020488
 8004b9c:	400204a0 	.word	0x400204a0
 8004ba0:	400204b8 	.word	0x400204b8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 020a 	bic.w	r2, r2, #10
 8004bb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8097 	beq.w	8004cfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bd6:	e091      	b.n	8004cfc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2208      	movs	r2, #8
 8004be2:	409a      	lsls	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8088 	beq.w	8004cfe <HAL_DMA_IRQHandler+0xe0e>
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8082 	beq.w	8004cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a41      	ldr	r2, [pc, #260]	@ (8004d04 <HAL_DMA_IRQHandler+0xe14>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d04a      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3f      	ldr	r2, [pc, #252]	@ (8004d08 <HAL_DMA_IRQHandler+0xe18>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d045      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a3e      	ldr	r2, [pc, #248]	@ (8004d0c <HAL_DMA_IRQHandler+0xe1c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d040      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d10 <HAL_DMA_IRQHandler+0xe20>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d03b      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3b      	ldr	r2, [pc, #236]	@ (8004d14 <HAL_DMA_IRQHandler+0xe24>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d036      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a39      	ldr	r2, [pc, #228]	@ (8004d18 <HAL_DMA_IRQHandler+0xe28>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d031      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a38      	ldr	r2, [pc, #224]	@ (8004d1c <HAL_DMA_IRQHandler+0xe2c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d02c      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a36      	ldr	r2, [pc, #216]	@ (8004d20 <HAL_DMA_IRQHandler+0xe30>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d027      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a35      	ldr	r2, [pc, #212]	@ (8004d24 <HAL_DMA_IRQHandler+0xe34>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d022      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <HAL_DMA_IRQHandler+0xe38>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a32      	ldr	r2, [pc, #200]	@ (8004d2c <HAL_DMA_IRQHandler+0xe3c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a30      	ldr	r2, [pc, #192]	@ (8004d30 <HAL_DMA_IRQHandler+0xe40>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	@ (8004d34 <HAL_DMA_IRQHandler+0xe44>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2d      	ldr	r2, [pc, #180]	@ (8004d38 <HAL_DMA_IRQHandler+0xe48>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d3c <HAL_DMA_IRQHandler+0xe4c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xdaa>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	@ (8004d40 <HAL_DMA_IRQHandler+0xe50>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <HAL_DMA_IRQHandler+0xdbc>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 021c 	bic.w	r2, r2, #28
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e007      	b.n	8004cbc <HAL_DMA_IRQHandler+0xdcc>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 020e 	bic.w	r2, r2, #14
 8004cba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
 8004cf2:	e004      	b.n	8004cfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004cf4:	bf00      	nop
 8004cf6:	e002      	b.n	8004cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cfe:	3728      	adds	r7, #40	@ 0x28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40020010 	.word	0x40020010
 8004d08:	40020028 	.word	0x40020028
 8004d0c:	40020040 	.word	0x40020040
 8004d10:	40020058 	.word	0x40020058
 8004d14:	40020070 	.word	0x40020070
 8004d18:	40020088 	.word	0x40020088
 8004d1c:	400200a0 	.word	0x400200a0
 8004d20:	400200b8 	.word	0x400200b8
 8004d24:	40020410 	.word	0x40020410
 8004d28:	40020428 	.word	0x40020428
 8004d2c:	40020440 	.word	0x40020440
 8004d30:	40020458 	.word	0x40020458
 8004d34:	40020470 	.word	0x40020470
 8004d38:	40020488 	.word	0x40020488
 8004d3c:	400204a0 	.word	0x400204a0
 8004d40:	400204b8 	.word	0x400204b8

08004d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a42      	ldr	r2, [pc, #264]	@ (8004e5c <DMA_CalcBaseAndBitshift+0x118>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d04a      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a41      	ldr	r2, [pc, #260]	@ (8004e60 <DMA_CalcBaseAndBitshift+0x11c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d045      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3f      	ldr	r2, [pc, #252]	@ (8004e64 <DMA_CalcBaseAndBitshift+0x120>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d040      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e68 <DMA_CalcBaseAndBitshift+0x124>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d03b      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3c      	ldr	r2, [pc, #240]	@ (8004e6c <DMA_CalcBaseAndBitshift+0x128>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d036      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a3b      	ldr	r2, [pc, #236]	@ (8004e70 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d031      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a39      	ldr	r2, [pc, #228]	@ (8004e74 <DMA_CalcBaseAndBitshift+0x130>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02c      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a38      	ldr	r2, [pc, #224]	@ (8004e78 <DMA_CalcBaseAndBitshift+0x134>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d027      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a36      	ldr	r2, [pc, #216]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x138>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a35      	ldr	r2, [pc, #212]	@ (8004e80 <DMA_CalcBaseAndBitshift+0x13c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d01d      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a33      	ldr	r2, [pc, #204]	@ (8004e84 <DMA_CalcBaseAndBitshift+0x140>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a32      	ldr	r2, [pc, #200]	@ (8004e88 <DMA_CalcBaseAndBitshift+0x144>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a30      	ldr	r2, [pc, #192]	@ (8004e8c <DMA_CalcBaseAndBitshift+0x148>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e90 <DMA_CalcBaseAndBitshift+0x14c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e94 <DMA_CalcBaseAndBitshift+0x150>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <DMA_CalcBaseAndBitshift+0xa8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <DMA_CalcBaseAndBitshift+0x154>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d101      	bne.n	8004df0 <DMA_CalcBaseAndBitshift+0xac>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <DMA_CalcBaseAndBitshift+0xae>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d024      	beq.n	8004e40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	3b10      	subs	r3, #16
 8004dfe:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <DMA_CalcBaseAndBitshift+0x158>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	4a24      	ldr	r2, [pc, #144]	@ (8004ea0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e10:	5cd3      	ldrb	r3, [r2, r3]
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d908      	bls.n	8004e30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	1d1a      	adds	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e2e:	e00d      	b.n	8004e4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e3e:	e005      	b.n	8004e4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40020010 	.word	0x40020010
 8004e60:	40020028 	.word	0x40020028
 8004e64:	40020040 	.word	0x40020040
 8004e68:	40020058 	.word	0x40020058
 8004e6c:	40020070 	.word	0x40020070
 8004e70:	40020088 	.word	0x40020088
 8004e74:	400200a0 	.word	0x400200a0
 8004e78:	400200b8 	.word	0x400200b8
 8004e7c:	40020410 	.word	0x40020410
 8004e80:	40020428 	.word	0x40020428
 8004e84:	40020440 	.word	0x40020440
 8004e88:	40020458 	.word	0x40020458
 8004e8c:	40020470 	.word	0x40020470
 8004e90:	40020488 	.word	0x40020488
 8004e94:	400204a0 	.word	0x400204a0
 8004e98:	400204b8 	.word	0x400204b8
 8004e9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ea0:	08013010 	.word	0x08013010
 8004ea4:	fffffc00 	.word	0xfffffc00

08004ea8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d120      	bne.n	8004efe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d858      	bhi.n	8004f76 <DMA_CheckFifoParam+0xce>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <DMA_CheckFifoParam+0x24>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eef 	.word	0x08004eef
 8004ed4:	08004edd 	.word	0x08004edd
 8004ed8:	08004f77 	.word	0x08004f77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d048      	beq.n	8004f7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eec:	e045      	b.n	8004f7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ef6:	d142      	bne.n	8004f7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004efc:	e03f      	b.n	8004f7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f06:	d123      	bne.n	8004f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d838      	bhi.n	8004f82 <DMA_CheckFifoParam+0xda>
 8004f10:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <DMA_CheckFifoParam+0x70>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f29 	.word	0x08004f29
 8004f1c:	08004f2f 	.word	0x08004f2f
 8004f20:	08004f29 	.word	0x08004f29
 8004f24:	08004f41 	.word	0x08004f41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f2c:	e030      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d025      	beq.n	8004f86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f3e:	e022      	b.n	8004f86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f48:	d11f      	bne.n	8004f8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f4e:	e01c      	b.n	8004f8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d902      	bls.n	8004f5e <DMA_CheckFifoParam+0xb6>
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d003      	beq.n	8004f64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f5c:	e018      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
        break;
 8004f62:	e015      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00e      	beq.n	8004f8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
    break;
 8004f74:	e00b      	b.n	8004f8e <DMA_CheckFifoParam+0xe6>
        break;
 8004f76:	bf00      	nop
 8004f78:	e00a      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        break;
 8004f7a:	bf00      	nop
 8004f7c:	e008      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        break;
 8004f7e:	bf00      	nop
 8004f80:	e006      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        break;
 8004f82:	bf00      	nop
 8004f84:	e004      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
    break;
 8004f8e:	bf00      	nop
    }
  }

  return status;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop

08004fa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a38      	ldr	r2, [pc, #224]	@ (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a36      	ldr	r2, [pc, #216]	@ (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a35      	ldr	r2, [pc, #212]	@ (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a33      	ldr	r2, [pc, #204]	@ (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a32      	ldr	r2, [pc, #200]	@ (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a30      	ldr	r2, [pc, #192]	@ (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2f      	ldr	r2, [pc, #188]	@ (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80050b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d101      	bne.n	8005002 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01a      	beq.n	800503e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	3b08      	subs	r3, #8
 8005010:	4a28      	ldr	r2, [pc, #160]	@ (80050b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4b26      	ldr	r3, [pc, #152]	@ (80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a24      	ldr	r2, [pc, #144]	@ (80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800502c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2201      	movs	r2, #1
 8005036:	409a      	lsls	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800503c:	e024      	b.n	8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	3b10      	subs	r3, #16
 8005046:	4a1e      	ldr	r2, [pc, #120]	@ (80050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a1c      	ldr	r2, [pc, #112]	@ (80050c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d806      	bhi.n	8005066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d902      	bls.n	8005066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3308      	adds	r3, #8
 8005064:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4b18      	ldr	r3, [pc, #96]	@ (80050cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005078:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	2201      	movs	r2, #1
 8005082:	409a      	lsls	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	58025408 	.word	0x58025408
 8005098:	5802541c 	.word	0x5802541c
 800509c:	58025430 	.word	0x58025430
 80050a0:	58025444 	.word	0x58025444
 80050a4:	58025458 	.word	0x58025458
 80050a8:	5802546c 	.word	0x5802546c
 80050ac:	58025480 	.word	0x58025480
 80050b0:	58025494 	.word	0x58025494
 80050b4:	cccccccd 	.word	0xcccccccd
 80050b8:	16009600 	.word	0x16009600
 80050bc:	58025880 	.word	0x58025880
 80050c0:	aaaaaaab 	.word	0xaaaaaaab
 80050c4:	400204b8 	.word	0x400204b8
 80050c8:	4002040f 	.word	0x4002040f
 80050cc:	10008200 	.word	0x10008200
 80050d0:	40020880 	.word	0x40020880

080050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04a      	beq.n	8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d847      	bhi.n	8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a25      	ldr	r2, [pc, #148]	@ (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d022      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a24      	ldr	r2, [pc, #144]	@ (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d01d      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d018      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	@ (8005198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1e      	ldr	r2, [pc, #120]	@ (80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d101      	bne.n	8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	461a      	mov	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a15      	ldr	r2, [pc, #84]	@ (80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800515c:	671a      	str	r2, [r3, #112]	@ 0x70
 800515e:	e009      	b.n	8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	461a      	mov	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a11      	ldr	r2, [pc, #68]	@ (80051b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005172:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3b01      	subs	r3, #1
 8005178:	2201      	movs	r2, #1
 800517a:	409a      	lsls	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	58025408 	.word	0x58025408
 8005190:	5802541c 	.word	0x5802541c
 8005194:	58025430 	.word	0x58025430
 8005198:	58025444 	.word	0x58025444
 800519c:	58025458 	.word	0x58025458
 80051a0:	5802546c 	.word	0x5802546c
 80051a4:	58025480 	.word	0x58025480
 80051a8:	58025494 	.word	0x58025494
 80051ac:	1600963f 	.word	0x1600963f
 80051b0:	58025940 	.word	0x58025940
 80051b4:	1000823f 	.word	0x1000823f
 80051b8:	40020940 	.word	0x40020940

080051bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	@ 0x24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051ca:	4b89      	ldr	r3, [pc, #548]	@ (80053f0 <HAL_GPIO_Init+0x234>)
 80051cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ce:	e194      	b.n	80054fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2101      	movs	r1, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	4013      	ands	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8186 	beq.w	80054f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d005      	beq.n	8005200 <HAL_GPIO_Init+0x44>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d130      	bne.n	8005262 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2203      	movs	r2, #3
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005236:	2201      	movs	r2, #1
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 0201 	and.w	r2, r3, #1
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4313      	orrs	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b03      	cmp	r3, #3
 800526c:	d017      	beq.n	800529e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	2203      	movs	r2, #3
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d123      	bne.n	80052f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	08da      	lsrs	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3208      	adds	r2, #8
 80052b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	220f      	movs	r2, #15
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4013      	ands	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	08da      	lsrs	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3208      	adds	r2, #8
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	2203      	movs	r2, #3
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80e0 	beq.w	80054f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005334:	4b2f      	ldr	r3, [pc, #188]	@ (80053f4 <HAL_GPIO_Init+0x238>)
 8005336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800533a:	4a2e      	ldr	r2, [pc, #184]	@ (80053f4 <HAL_GPIO_Init+0x238>)
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005344:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <HAL_GPIO_Init+0x238>)
 8005346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005352:	4a29      	ldr	r2, [pc, #164]	@ (80053f8 <HAL_GPIO_Init+0x23c>)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	089b      	lsrs	r3, r3, #2
 8005358:	3302      	adds	r3, #2
 800535a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	220f      	movs	r2, #15
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a20      	ldr	r2, [pc, #128]	@ (80053fc <HAL_GPIO_Init+0x240>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d052      	beq.n	8005424 <HAL_GPIO_Init+0x268>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1f      	ldr	r2, [pc, #124]	@ (8005400 <HAL_GPIO_Init+0x244>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d031      	beq.n	80053ea <HAL_GPIO_Init+0x22e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <HAL_GPIO_Init+0x248>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02b      	beq.n	80053e6 <HAL_GPIO_Init+0x22a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <HAL_GPIO_Init+0x24c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d025      	beq.n	80053e2 <HAL_GPIO_Init+0x226>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <HAL_GPIO_Init+0x250>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <HAL_GPIO_Init+0x222>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005410 <HAL_GPIO_Init+0x254>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d019      	beq.n	80053da <HAL_GPIO_Init+0x21e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005414 <HAL_GPIO_Init+0x258>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_GPIO_Init+0x21a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <HAL_GPIO_Init+0x25c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00d      	beq.n	80053d2 <HAL_GPIO_Init+0x216>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a18      	ldr	r2, [pc, #96]	@ (800541c <HAL_GPIO_Init+0x260>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <HAL_GPIO_Init+0x212>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <HAL_GPIO_Init+0x264>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <HAL_GPIO_Init+0x20e>
 80053c6:	2309      	movs	r3, #9
 80053c8:	e02d      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053ca:	230a      	movs	r3, #10
 80053cc:	e02b      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053ce:	2308      	movs	r3, #8
 80053d0:	e029      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053d2:	2307      	movs	r3, #7
 80053d4:	e027      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053d6:	2306      	movs	r3, #6
 80053d8:	e025      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053da:	2305      	movs	r3, #5
 80053dc:	e023      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053de:	2304      	movs	r3, #4
 80053e0:	e021      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053e2:	2303      	movs	r3, #3
 80053e4:	e01f      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e01d      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e01b      	b.n	8005426 <HAL_GPIO_Init+0x26a>
 80053ee:	bf00      	nop
 80053f0:	58000080 	.word	0x58000080
 80053f4:	58024400 	.word	0x58024400
 80053f8:	58000400 	.word	0x58000400
 80053fc:	58020000 	.word	0x58020000
 8005400:	58020400 	.word	0x58020400
 8005404:	58020800 	.word	0x58020800
 8005408:	58020c00 	.word	0x58020c00
 800540c:	58021000 	.word	0x58021000
 8005410:	58021400 	.word	0x58021400
 8005414:	58021800 	.word	0x58021800
 8005418:	58021c00 	.word	0x58021c00
 800541c:	58022000 	.word	0x58022000
 8005420:	58022400 	.word	0x58022400
 8005424:	2300      	movs	r3, #0
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	f002 0203 	and.w	r2, r2, #3
 800542c:	0092      	lsls	r2, r2, #2
 800542e:	4093      	lsls	r3, r2
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005436:	4938      	ldr	r1, [pc, #224]	@ (8005518 <HAL_GPIO_Init+0x35c>)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	089b      	lsrs	r3, r3, #2
 800543c:	3302      	adds	r3, #2
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	43db      	mvns	r3, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4013      	ands	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800546a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005498:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	f47f ae63 	bne.w	80051d0 <HAL_GPIO_Init+0x14>
  }
}
 800550a:	bf00      	nop
 800550c:	bf00      	nop
 800550e:	3724      	adds	r7, #36	@ 0x24
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	58000400 	.word	0x58000400

0800551c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	807b      	strh	r3, [r7, #2]
 8005528:	4613      	mov	r3, r2
 800552a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800552c:	787b      	ldrb	r3, [r7, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005532:	887a      	ldrh	r2, [r7, #2]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005538:	e003      	b.n	8005542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800553a:	887b      	ldrh	r3, [r7, #2]
 800553c:	041a      	lsls	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	619a      	str	r2, [r3, #24]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005560:	887a      	ldrh	r2, [r7, #2]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4013      	ands	r3, r2
 8005566:	041a      	lsls	r2, r3, #16
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	43d9      	mvns	r1, r3
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	400b      	ands	r3, r1
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800558c:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <HAL_PWREx_ConfigSupply+0x70>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d00a      	beq.n	80055ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005598:	4b16      	ldr	r3, [pc, #88]	@ (80055f4 <HAL_PWREx_ConfigSupply+0x70>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d001      	beq.n	80055aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e01f      	b.n	80055ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e01d      	b.n	80055ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055ae:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_PWREx_ConfigSupply+0x70>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f023 0207 	bic.w	r2, r3, #7
 80055b6:	490f      	ldr	r1, [pc, #60]	@ (80055f4 <HAL_PWREx_ConfigSupply+0x70>)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055be:	f7fd fabb 	bl	8002b38 <HAL_GetTick>
 80055c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055c4:	e009      	b.n	80055da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055c6:	f7fd fab7 	bl	8002b38 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055d4:	d901      	bls.n	80055da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e007      	b.n	80055ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_PWREx_ConfigSupply+0x70>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e6:	d1ee      	bne.n	80055c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	58024800 	.word	0x58024800

080055f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	@ 0x30
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f000 bc48 	b.w	8005e9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8088 	beq.w	800572a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800561a:	4b99      	ldr	r3, [pc, #612]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005624:	4b96      	ldr	r3, [pc, #600]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562c:	2b10      	cmp	r3, #16
 800562e:	d007      	beq.n	8005640 <HAL_RCC_OscConfig+0x48>
 8005630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005632:	2b18      	cmp	r3, #24
 8005634:	d111      	bne.n	800565a <HAL_RCC_OscConfig+0x62>
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d10c      	bne.n	800565a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005640:	4b8f      	ldr	r3, [pc, #572]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d06d      	beq.n	8005728 <HAL_RCC_OscConfig+0x130>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d169      	bne.n	8005728 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	f000 bc21 	b.w	8005e9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x7a>
 8005664:	4b86      	ldr	r3, [pc, #536]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a85      	ldr	r2, [pc, #532]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e02e      	b.n	80056d0 <HAL_RCC_OscConfig+0xd8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10c      	bne.n	8005694 <HAL_RCC_OscConfig+0x9c>
 800567a:	4b81      	ldr	r3, [pc, #516]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a80      	ldr	r2, [pc, #512]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	4b7e      	ldr	r3, [pc, #504]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a7d      	ldr	r2, [pc, #500]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800568c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0xd8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0xc0>
 800569e:	4b78      	ldr	r3, [pc, #480]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a77      	ldr	r2, [pc, #476]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b75      	ldr	r3, [pc, #468]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a74      	ldr	r2, [pc, #464]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0xd8>
 80056b8:	4b71      	ldr	r3, [pc, #452]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a70      	ldr	r2, [pc, #448]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b6e      	ldr	r3, [pc, #440]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a6d      	ldr	r2, [pc, #436]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd fa2e 	bl	8002b38 <HAL_GetTick>
 80056dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fd fa2a 	bl	8002b38 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	@ 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e3d4      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056f2:	4b63      	ldr	r3, [pc, #396]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0xe8>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd fa1a 	bl	8002b38 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005708:	f7fd fa16 	bl	8002b38 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	@ 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e3c0      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800571a:	4b59      	ldr	r3, [pc, #356]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x110>
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80ca 	beq.w	80058cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005738:	4b51      	ldr	r3, [pc, #324]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005740:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005742:	4b4f      	ldr	r3, [pc, #316]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_RCC_OscConfig+0x166>
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2b18      	cmp	r3, #24
 8005752:	d156      	bne.n	8005802 <HAL_RCC_OscConfig+0x20a>
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d151      	bne.n	8005802 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575e:	4b48      	ldr	r3, [pc, #288]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_RCC_OscConfig+0x17e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e392      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005776:	4b42      	ldr	r3, [pc, #264]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 0219 	bic.w	r2, r3, #25
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	493f      	ldr	r1, [pc, #252]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fd f9d6 	bl	8002b38 <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005790:	f7fd f9d2 	bl	8002b38 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e37c      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057a2:	4b37      	ldr	r3, [pc, #220]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ae:	f7fd f9f3 	bl	8002b98 <HAL_GetREVID>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d817      	bhi.n	80057ec <HAL_RCC_OscConfig+0x1f4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b40      	cmp	r3, #64	@ 0x40
 80057c2:	d108      	bne.n	80057d6 <HAL_RCC_OscConfig+0x1de>
 80057c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80057cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057d4:	e07a      	b.n	80058cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	031b      	lsls	r3, r3, #12
 80057e4:	4926      	ldr	r1, [pc, #152]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ea:	e06f      	b.n	80058cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ec:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	061b      	lsls	r3, r3, #24
 80057fa:	4921      	ldr	r1, [pc, #132]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005800:	e064      	b.n	80058cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d047      	beq.n	800589a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800580a:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 0219 	bic.w	r2, r3, #25
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	491a      	ldr	r1, [pc, #104]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fd f98c 	bl	8002b38 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005824:	f7fd f988 	bl	8002b38 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e332      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005836:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005842:	f7fd f9a9 	bl	8002b98 <HAL_GetREVID>
 8005846:	4603      	mov	r3, r0
 8005848:	f241 0203 	movw	r2, #4099	@ 0x1003
 800584c:	4293      	cmp	r3, r2
 800584e:	d819      	bhi.n	8005884 <HAL_RCC_OscConfig+0x28c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d108      	bne.n	800586a <HAL_RCC_OscConfig+0x272>
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005860:	4a07      	ldr	r2, [pc, #28]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005866:	6053      	str	r3, [r2, #4]
 8005868:	e030      	b.n	80058cc <HAL_RCC_OscConfig+0x2d4>
 800586a:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	031b      	lsls	r3, r3, #12
 8005878:	4901      	ldr	r1, [pc, #4]	@ (8005880 <HAL_RCC_OscConfig+0x288>)
 800587a:	4313      	orrs	r3, r2
 800587c:	604b      	str	r3, [r1, #4]
 800587e:	e025      	b.n	80058cc <HAL_RCC_OscConfig+0x2d4>
 8005880:	58024400 	.word	0x58024400
 8005884:	4b9a      	ldr	r3, [pc, #616]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	4997      	ldr	r1, [pc, #604]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
 8005898:	e018      	b.n	80058cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589a:	4b95      	ldr	r3, [pc, #596]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a94      	ldr	r2, [pc, #592]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a6:	f7fd f947 	bl	8002b38 <HAL_GetTick>
 80058aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ae:	f7fd f943 	bl	8002b38 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e2ed      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058c0:	4b8b      	ldr	r3, [pc, #556]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f0      	bne.n	80058ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80a9 	beq.w	8005a2c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058da:	4b85      	ldr	r3, [pc, #532]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058e4:	4b82      	ldr	r3, [pc, #520]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d007      	beq.n	8005900 <HAL_RCC_OscConfig+0x308>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b18      	cmp	r3, #24
 80058f4:	d13a      	bne.n	800596c <HAL_RCC_OscConfig+0x374>
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d135      	bne.n	800596c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005900:	4b7b      	ldr	r3, [pc, #492]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_OscConfig+0x320>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	2b80      	cmp	r3, #128	@ 0x80
 8005912:	d001      	beq.n	8005918 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e2c1      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005918:	f7fd f93e 	bl	8002b98 <HAL_GetREVID>
 800591c:	4603      	mov	r3, r0
 800591e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005922:	4293      	cmp	r3, r2
 8005924:	d817      	bhi.n	8005956 <HAL_RCC_OscConfig+0x35e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	2b20      	cmp	r3, #32
 800592c:	d108      	bne.n	8005940 <HAL_RCC_OscConfig+0x348>
 800592e:	4b70      	ldr	r3, [pc, #448]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005936:	4a6e      	ldr	r2, [pc, #440]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005938:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800593c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800593e:	e075      	b.n	8005a2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005940:	4b6b      	ldr	r3, [pc, #428]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	069b      	lsls	r3, r3, #26
 800594e:	4968      	ldr	r1, [pc, #416]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005954:	e06a      	b.n	8005a2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005956:	4b66      	ldr	r3, [pc, #408]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	061b      	lsls	r3, r3, #24
 8005964:	4962      	ldr	r1, [pc, #392]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005966:	4313      	orrs	r3, r2
 8005968:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800596a:	e05f      	b.n	8005a2c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d042      	beq.n	80059fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005974:	4b5e      	ldr	r3, [pc, #376]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5d      	ldr	r2, [pc, #372]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 800597a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd f8da 	bl	8002b38 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005988:	f7fd f8d6 	bl	8002b38 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e280      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800599a:	4b55      	ldr	r3, [pc, #340]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059a6:	f7fd f8f7 	bl	8002b98 <HAL_GetREVID>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d817      	bhi.n	80059e4 <HAL_RCC_OscConfig+0x3ec>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d108      	bne.n	80059ce <HAL_RCC_OscConfig+0x3d6>
 80059bc:	4b4c      	ldr	r3, [pc, #304]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80059c4:	4a4a      	ldr	r2, [pc, #296]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059ca:	6053      	str	r3, [r2, #4]
 80059cc:	e02e      	b.n	8005a2c <HAL_RCC_OscConfig+0x434>
 80059ce:	4b48      	ldr	r3, [pc, #288]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	069b      	lsls	r3, r3, #26
 80059dc:	4944      	ldr	r1, [pc, #272]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
 80059e2:	e023      	b.n	8005a2c <HAL_RCC_OscConfig+0x434>
 80059e4:	4b42      	ldr	r3, [pc, #264]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	493f      	ldr	r1, [pc, #252]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60cb      	str	r3, [r1, #12]
 80059f8:	e018      	b.n	8005a2c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059fa:	4b3d      	ldr	r3, [pc, #244]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a3c      	ldr	r2, [pc, #240]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a06:	f7fd f897 	bl	8002b38 <HAL_GetTick>
 8005a0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a0e:	f7fd f893 	bl	8002b38 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e23d      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a20:	4b33      	ldr	r3, [pc, #204]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d036      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d019      	beq.n	8005a74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a40:	4b2b      	ldr	r3, [pc, #172]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a44:	4a2a      	ldr	r2, [pc, #168]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4c:	f7fd f874 	bl	8002b38 <HAL_GetTick>
 8005a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a54:	f7fd f870 	bl	8002b38 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e21a      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a66:	4b22      	ldr	r3, [pc, #136]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCC_OscConfig+0x45c>
 8005a72:	e018      	b.n	8005aa6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a74:	4b1e      	ldr	r3, [pc, #120]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a78:	4a1d      	ldr	r2, [pc, #116]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a80:	f7fd f85a 	bl	8002b38 <HAL_GetTick>
 8005a84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a88:	f7fd f856 	bl	8002b38 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e200      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a9a:	4b15      	ldr	r3, [pc, #84]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d039      	beq.n	8005b26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01c      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005aba:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a0c      	ldr	r2, [pc, #48]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ac4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ac6:	f7fd f837 	bl	8002b38 <HAL_GetTick>
 8005aca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ace:	f7fd f833 	bl	8002b38 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e1dd      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ae0:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <HAL_RCC_OscConfig+0x4f8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x4d6>
 8005aec:	e01b      	b.n	8005b26 <HAL_RCC_OscConfig+0x52e>
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005af4:	4b9b      	ldr	r3, [pc, #620]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a9a      	ldr	r2, [pc, #616]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005afa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005afe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b00:	f7fd f81a 	bl	8002b38 <HAL_GetTick>
 8005b04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b08:	f7fd f816 	bl	8002b38 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e1c0      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b1a:	4b92      	ldr	r3, [pc, #584]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8081 	beq.w	8005c36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b34:	4b8c      	ldr	r3, [pc, #560]	@ (8005d68 <HAL_RCC_OscConfig+0x770>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a8b      	ldr	r2, [pc, #556]	@ (8005d68 <HAL_RCC_OscConfig+0x770>)
 8005b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b40:	f7fc fffa 	bl	8002b38 <HAL_GetTick>
 8005b44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b48:	f7fc fff6 	bl	8002b38 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	@ 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e1a0      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b5a:	4b83      	ldr	r3, [pc, #524]	@ (8005d68 <HAL_RCC_OscConfig+0x770>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f0      	beq.n	8005b48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCC_OscConfig+0x584>
 8005b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b72:	4a7c      	ldr	r2, [pc, #496]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b7a:	e02d      	b.n	8005bd8 <HAL_RCC_OscConfig+0x5e0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10c      	bne.n	8005b9e <HAL_RCC_OscConfig+0x5a6>
 8005b84:	4b77      	ldr	r3, [pc, #476]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b88:	4a76      	ldr	r2, [pc, #472]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b90:	4b74      	ldr	r3, [pc, #464]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b94:	4a73      	ldr	r2, [pc, #460]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005b96:	f023 0304 	bic.w	r3, r3, #4
 8005b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b9c:	e01c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x5e0>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x5c8>
 8005ba6:	4b6f      	ldr	r3, [pc, #444]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005baa:	4a6e      	ldr	r2, [pc, #440]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bac:	f043 0304 	orr.w	r3, r3, #4
 8005bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb6:	4a6b      	ldr	r2, [pc, #428]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bbe:	e00b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x5e0>
 8005bc0:	4b68      	ldr	r3, [pc, #416]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc4:	4a67      	ldr	r2, [pc, #412]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bcc:	4b65      	ldr	r3, [pc, #404]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd0:	4a64      	ldr	r2, [pc, #400]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005bd2:	f023 0304 	bic.w	r3, r3, #4
 8005bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fc ffaa 	bl	8002b38 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be8:	f7fc ffa6 	bl	8002b38 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e14e      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfe:	4b59      	ldr	r3, [pc, #356]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ee      	beq.n	8005be8 <HAL_RCC_OscConfig+0x5f0>
 8005c0a:	e014      	b.n	8005c36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fc ff94 	bl	8002b38 <HAL_GetTick>
 8005c10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c14:	f7fc ff90 	bl	8002b38 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e138      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1ee      	bne.n	8005c14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 812d 	beq.w	8005e9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c40:	4b48      	ldr	r3, [pc, #288]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c48:	2b18      	cmp	r3, #24
 8005c4a:	f000 80bd 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	f040 809e 	bne.w	8005d94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c58:	4b42      	ldr	r3, [pc, #264]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a41      	ldr	r2, [pc, #260]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fc ff68 	bl	8002b38 <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6c:	f7fc ff64 	bl	8002b38 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e10e      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c7e:	4b39      	ldr	r3, [pc, #228]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c8a:	4b36      	ldr	r3, [pc, #216]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005c8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c8e:	4b37      	ldr	r3, [pc, #220]	@ (8005d6c <HAL_RCC_OscConfig+0x774>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c9a:	0112      	lsls	r2, r2, #4
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	4931      	ldr	r1, [pc, #196]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	025b      	lsls	r3, r3, #9
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	061b      	lsls	r3, r3, #24
 8005cd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cd4:	4923      	ldr	r1, [pc, #140]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005cda:	4b22      	ldr	r3, [pc, #136]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	4a21      	ldr	r2, [pc, #132]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cea:	4b21      	ldr	r3, [pc, #132]	@ (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cf2:	00d2      	lsls	r2, r2, #3
 8005cf4:	491b      	ldr	r1, [pc, #108]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	f023 020c 	bic.w	r2, r3, #12
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	4917      	ldr	r1, [pc, #92]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d0c:	4b15      	ldr	r3, [pc, #84]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	f023 0202 	bic.w	r2, r3, #2
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	4912      	ldr	r1, [pc, #72]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d1e:	4b11      	ldr	r3, [pc, #68]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	4a10      	ldr	r2, [pc, #64]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d36:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d42:	4b08      	ldr	r3, [pc, #32]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	4a07      	ldr	r2, [pc, #28]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d4e:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <HAL_RCC_OscConfig+0x76c>)
 8005d54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5a:	f7fc feed 	bl	8002b38 <HAL_GetTick>
 8005d5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d60:	e011      	b.n	8005d86 <HAL_RCC_OscConfig+0x78e>
 8005d62:	bf00      	nop
 8005d64:	58024400 	.word	0x58024400
 8005d68:	58024800 	.word	0x58024800
 8005d6c:	fffffc0c 	.word	0xfffffc0c
 8005d70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d74:	f7fc fee0 	bl	8002b38 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e08a      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d86:	4b47      	ldr	r3, [pc, #284]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0x77c>
 8005d92:	e082      	b.n	8005e9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d94:	4b43      	ldr	r3, [pc, #268]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a42      	ldr	r2, [pc, #264]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fc feca 	bl	8002b38 <HAL_GetTick>
 8005da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fc fec6 	bl	8002b38 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e070      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dba:	4b3a      	ldr	r3, [pc, #232]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0x7b0>
 8005dc6:	e068      	b.n	8005e9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005dc8:	4b36      	ldr	r3, [pc, #216]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005dce:	4b35      	ldr	r3, [pc, #212]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d031      	beq.n	8005e40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f003 0203 	and.w	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d12a      	bne.n	8005e40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d122      	bne.n	8005e40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d11a      	bne.n	8005e40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	0a5b      	lsrs	r3, r3, #9
 8005e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d111      	bne.n	8005e40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d108      	bne.n	8005e40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e02b      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e44:	4b17      	ldr	r3, [pc, #92]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e48:	08db      	lsrs	r3, r3, #3
 8005e4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d01f      	beq.n	8005e9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	4a11      	ldr	r2, [pc, #68]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e66:	f7fc fe67 	bl	8002b38 <HAL_GetTick>
 8005e6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e6c:	bf00      	nop
 8005e6e:	f7fc fe63 	bl	8002b38 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d0f9      	beq.n	8005e6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <HAL_RCC_OscConfig+0x8b0>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e86:	00d2      	lsls	r2, r2, #3
 8005e88:	4906      	ldr	r1, [pc, #24]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005e8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <HAL_RCC_OscConfig+0x8ac>)
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3730      	adds	r7, #48	@ 0x30
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	58024400 	.word	0x58024400
 8005ea8:	ffff0007 	.word	0xffff0007

08005eac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e19c      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d910      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b87      	ldr	r3, [pc, #540]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 020f 	bic.w	r2, r3, #15
 8005ed6:	4985      	ldr	r1, [pc, #532]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b83      	ldr	r3, [pc, #524]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e184      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	4b7b      	ldr	r3, [pc, #492]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d908      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f0c:	4b78      	ldr	r3, [pc, #480]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	4975      	ldr	r1, [pc, #468]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d010      	beq.n	8005f4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	4b70      	ldr	r3, [pc, #448]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d908      	bls.n	8005f4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	496a      	ldr	r1, [pc, #424]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	4b64      	ldr	r3, [pc, #400]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d908      	bls.n	8005f7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f68:	4b61      	ldr	r3, [pc, #388]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	495e      	ldr	r1, [pc, #376]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d010      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69da      	ldr	r2, [r3, #28]
 8005f8a:	4b59      	ldr	r3, [pc, #356]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d908      	bls.n	8005fa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f96:	4b56      	ldr	r3, [pc, #344]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	4953      	ldr	r1, [pc, #332]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d908      	bls.n	8005fd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f023 020f 	bic.w	r2, r3, #15
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4947      	ldr	r1, [pc, #284]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d055      	beq.n	800608e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005fe2:	4b43      	ldr	r3, [pc, #268]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	4940      	ldr	r1, [pc, #256]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d107      	bne.n	800600c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d121      	bne.n	800604c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0f6      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d107      	bne.n	8006024 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006014:	4b36      	ldr	r3, [pc, #216]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d115      	bne.n	800604c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0ea      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d107      	bne.n	800603c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800602c:	4b30      	ldr	r3, [pc, #192]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0de      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800603c:	4b2c      	ldr	r3, [pc, #176]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0d6      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800604c:	4b28      	ldr	r3, [pc, #160]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f023 0207 	bic.w	r2, r3, #7
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4925      	ldr	r1, [pc, #148]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 800605a:	4313      	orrs	r3, r2
 800605c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605e:	f7fc fd6b 	bl	8002b38 <HAL_GetTick>
 8006062:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006064:	e00a      	b.n	800607c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006066:	f7fc fd67 	bl	8002b38 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e0be      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607c:	4b1c      	ldr	r3, [pc, #112]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	429a      	cmp	r2, r3
 800608c:	d1eb      	bne.n	8006066 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d010      	beq.n	80060bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	4b14      	ldr	r3, [pc, #80]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d208      	bcs.n	80060bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060aa:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f023 020f 	bic.w	r2, r3, #15
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	490e      	ldr	r1, [pc, #56]	@ (80060f0 <HAL_RCC_ClockConfig+0x244>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060bc:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d214      	bcs.n	80060f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ca:	4b08      	ldr	r3, [pc, #32]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 020f 	bic.w	r2, r3, #15
 80060d2:	4906      	ldr	r1, [pc, #24]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b04      	ldr	r3, [pc, #16]	@ (80060ec <HAL_RCC_ClockConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d005      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e086      	b.n	80061fa <HAL_RCC_ClockConfig+0x34e>
 80060ec:	52002000 	.word	0x52002000
 80060f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	4b3f      	ldr	r3, [pc, #252]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800610c:	429a      	cmp	r2, r3
 800610e:	d208      	bcs.n	8006122 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006110:	4b3c      	ldr	r3, [pc, #240]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	4939      	ldr	r1, [pc, #228]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 800611e:	4313      	orrs	r3, r2
 8006120:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	4b34      	ldr	r3, [pc, #208]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800613a:	429a      	cmp	r2, r3
 800613c:	d208      	bcs.n	8006150 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800613e:	4b31      	ldr	r3, [pc, #196]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	492e      	ldr	r1, [pc, #184]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 800614c:	4313      	orrs	r3, r2
 800614e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b28      	ldr	r3, [pc, #160]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006168:	429a      	cmp	r2, r3
 800616a:	d208      	bcs.n	800617e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800616c:	4b25      	ldr	r3, [pc, #148]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	4922      	ldr	r1, [pc, #136]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 800617a:	4313      	orrs	r3, r2
 800617c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d010      	beq.n	80061ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006196:	429a      	cmp	r2, r3
 8006198:	d208      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800619a:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	4917      	ldr	r1, [pc, #92]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061ac:	f000 f834 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b14      	ldr	r3, [pc, #80]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	4912      	ldr	r1, [pc, #72]	@ (8006208 <HAL_RCC_ClockConfig+0x35c>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
 80061c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <HAL_RCC_ClockConfig+0x358>)
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006208 <HAL_RCC_ClockConfig+0x35c>)
 80061d4:	5cd3      	ldrb	r3, [r2, r3]
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	4a0a      	ldr	r2, [pc, #40]	@ (800620c <HAL_RCC_ClockConfig+0x360>)
 80061e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006210 <HAL_RCC_ClockConfig+0x364>)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80061ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <HAL_RCC_ClockConfig+0x368>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fc f8ea 	bl	80023c8 <HAL_InitTick>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	58024400 	.word	0x58024400
 8006208:	08013000 	.word	0x08013000
 800620c:	24000010 	.word	0x24000010
 8006210:	2400000c 	.word	0x2400000c
 8006214:	24000014 	.word	0x24000014

08006218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	@ 0x24
 800621c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800621e:	4bb3      	ldr	r3, [pc, #716]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006226:	2b18      	cmp	r3, #24
 8006228:	f200 8155 	bhi.w	80064d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800622c:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <HAL_RCC_GetSysClockFreq+0x1c>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006299 	.word	0x08006299
 8006238:	080064d7 	.word	0x080064d7
 800623c:	080064d7 	.word	0x080064d7
 8006240:	080064d7 	.word	0x080064d7
 8006244:	080064d7 	.word	0x080064d7
 8006248:	080064d7 	.word	0x080064d7
 800624c:	080064d7 	.word	0x080064d7
 8006250:	080064d7 	.word	0x080064d7
 8006254:	080062bf 	.word	0x080062bf
 8006258:	080064d7 	.word	0x080064d7
 800625c:	080064d7 	.word	0x080064d7
 8006260:	080064d7 	.word	0x080064d7
 8006264:	080064d7 	.word	0x080064d7
 8006268:	080064d7 	.word	0x080064d7
 800626c:	080064d7 	.word	0x080064d7
 8006270:	080064d7 	.word	0x080064d7
 8006274:	080062c5 	.word	0x080062c5
 8006278:	080064d7 	.word	0x080064d7
 800627c:	080064d7 	.word	0x080064d7
 8006280:	080064d7 	.word	0x080064d7
 8006284:	080064d7 	.word	0x080064d7
 8006288:	080064d7 	.word	0x080064d7
 800628c:	080064d7 	.word	0x080064d7
 8006290:	080064d7 	.word	0x080064d7
 8006294:	080062cb 	.word	0x080062cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006298:	4b94      	ldr	r3, [pc, #592]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062a4:	4b91      	ldr	r3, [pc, #580]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	4a90      	ldr	r2, [pc, #576]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062b6:	e111      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062b8:	4b8d      	ldr	r3, [pc, #564]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062ba:	61bb      	str	r3, [r7, #24]
      break;
 80062bc:	e10e      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062be:	4b8d      	ldr	r3, [pc, #564]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062c0:	61bb      	str	r3, [r7, #24]
      break;
 80062c2:	e10b      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80062c4:	4b8c      	ldr	r3, [pc, #560]	@ (80064f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062c6:	61bb      	str	r3, [r7, #24]
      break;
 80062c8:	e108      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ca:	4b88      	ldr	r3, [pc, #544]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062d4:	4b85      	ldr	r3, [pc, #532]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062e0:	4b82      	ldr	r3, [pc, #520]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062ea:	4b80      	ldr	r3, [pc, #512]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ee:	08db      	lsrs	r3, r3, #3
 80062f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80e1 	beq.w	80064d0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b02      	cmp	r3, #2
 8006312:	f000 8083 	beq.w	800641c <HAL_RCC_GetSysClockFreq+0x204>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b02      	cmp	r3, #2
 800631a:	f200 80a1 	bhi.w	8006460 <HAL_RCC_GetSysClockFreq+0x248>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x114>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d056      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800632a:	e099      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632c:	4b6f      	ldr	r3, [pc, #444]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d02d      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006338:	4b6c      	ldr	r3, [pc, #432]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	4a6b      	ldr	r2, [pc, #428]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006362:	4b62      	ldr	r3, [pc, #392]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a02 	vldr	s12, [r7, #8]
 8006376:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006392:	e087      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006500 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a6:	4b51      	ldr	r3, [pc, #324]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80063be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063d6:	e065      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006504 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b40      	ldr	r3, [pc, #256]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800641a:	e043      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006508 <HAL_RCC_GetSysClockFreq+0x2f0>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b2f      	ldr	r3, [pc, #188]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006442:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645e:	e021      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006504 <HAL_RCC_GetSysClockFreq+0x2ec>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b1e      	ldr	r3, [pc, #120]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a02 	vldr	s12, [r7, #8]
 8006486:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064a4:	4b11      	ldr	r3, [pc, #68]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a8:	0a5b      	lsrs	r3, r3, #9
 80064aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ae:	3301      	adds	r3, #1
 80064b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c8:	ee17 3a90 	vmov	r3, s15
 80064cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064ce:	e005      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
      break;
 80064d4:	e002      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80064d6:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064d8:	61bb      	str	r3, [r7, #24]
      break;
 80064da:	bf00      	nop
  }

  return sysclockfreq;
 80064dc:	69bb      	ldr	r3, [r7, #24]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3724      	adds	r7, #36	@ 0x24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
 80064f0:	03d09000 	.word	0x03d09000
 80064f4:	003d0900 	.word	0x003d0900
 80064f8:	017d7840 	.word	0x017d7840
 80064fc:	46000000 	.word	0x46000000
 8006500:	4c742400 	.word	0x4c742400
 8006504:	4a742400 	.word	0x4a742400
 8006508:	4bbebc20 	.word	0x4bbebc20

0800650c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006512:	f7ff fe81 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b10      	ldr	r3, [pc, #64]	@ (800655c <HAL_RCC_GetHCLKFreq+0x50>)
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490f      	ldr	r1, [pc, #60]	@ (8006560 <HAL_RCC_GetHCLKFreq+0x54>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	fa22 f303 	lsr.w	r3, r2, r3
 800652e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006530:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <HAL_RCC_GetHCLKFreq+0x50>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	4a09      	ldr	r2, [pc, #36]	@ (8006560 <HAL_RCC_GetHCLKFreq+0x54>)
 800653a:	5cd3      	ldrb	r3, [r2, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	4a07      	ldr	r2, [pc, #28]	@ (8006564 <HAL_RCC_GetHCLKFreq+0x58>)
 8006548:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800654a:	4a07      	ldr	r2, [pc, #28]	@ (8006568 <HAL_RCC_GetHCLKFreq+0x5c>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <HAL_RCC_GetHCLKFreq+0x58>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	58024400 	.word	0x58024400
 8006560:	08013000 	.word	0x08013000
 8006564:	24000010 	.word	0x24000010
 8006568:	2400000c 	.word	0x2400000c

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006570:	f7ff ffcc 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4904      	ldr	r1, [pc, #16]	@ (8006594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	58024400 	.word	0x58024400
 8006594:	08013000 	.word	0x08013000

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800659c:	f7ff ffb6 	bl	800650c <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4904      	ldr	r1, [pc, #16]	@ (80065c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	58024400 	.word	0x58024400
 80065c0:	08013000 	.word	0x08013000

080065c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	223f      	movs	r2, #63	@ 0x3f
 80065d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0207 	and.w	r2, r3, #7
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80065e0:	4b17      	ldr	r3, [pc, #92]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80065ec:	4b14      	ldr	r3, [pc, #80]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f003 020f 	and.w	r2, r3, #15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80065f8:	4b11      	ldr	r3, [pc, #68]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006604:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006610:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800661c:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <HAL_RCC_GetClockConfig+0x7c>)
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006628:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <HAL_RCC_GetClockConfig+0x80>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 020f 	and.w	r2, r3, #15
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	58024400 	.word	0x58024400
 8006644:	52002000 	.word	0x52002000

08006648 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800664c:	b0ca      	sub	sp, #296	@ 0x128
 800664e:	af00      	add	r7, sp, #0
 8006650:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006654:	2300      	movs	r3, #0
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800665a:	2300      	movs	r3, #0
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800666c:	2500      	movs	r5, #0
 800666e:	ea54 0305 	orrs.w	r3, r4, r5
 8006672:	d049      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800667a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800667e:	d02f      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006680:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006684:	d828      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800668a:	d01a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800668c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006690:	d822      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800669a:	d007      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800669c:	e01c      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669e:	4bb8      	ldr	r3, [pc, #736]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	4ab7      	ldr	r2, [pc, #732]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80066aa:	e01a      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b0:	3308      	adds	r3, #8
 80066b2:	2102      	movs	r1, #2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f001 fc8f 	bl	8007fd8 <RCCEx_PLL2_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80066c0:	e00f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	3328      	adds	r3, #40	@ 0x28
 80066c8:	2102      	movs	r1, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fd36 	bl	800813c <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066ea:	4ba5      	ldr	r3, [pc, #660]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066f8:	4aa1      	ldr	r2, [pc, #644]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80066fe:	e003      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006714:	f04f 0900 	mov.w	r9, #0
 8006718:	ea58 0309 	orrs.w	r3, r8, r9
 800671c:	d047      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006724:	2b04      	cmp	r3, #4
 8006726:	d82a      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006728:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006745 	.word	0x08006745
 8006734:	08006753 	.word	0x08006753
 8006738:	08006769 	.word	0x08006769
 800673c:	08006787 	.word	0x08006787
 8006740:	08006787 	.word	0x08006787
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006744:	4b8e      	ldr	r3, [pc, #568]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	4a8d      	ldr	r2, [pc, #564]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800674a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800674e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006750:	e01a      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	3308      	adds	r3, #8
 8006758:	2100      	movs	r1, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f001 fc3c 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006766:	e00f      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	3328      	adds	r3, #40	@ 0x28
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fce3 	bl	800813c <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800677c:	e004      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006784:	e000      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006790:	4b7b      	ldr	r3, [pc, #492]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006794:	f023 0107 	bic.w	r1, r3, #7
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	4a78      	ldr	r2, [pc, #480]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80067a4:	e003      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80067ba:	f04f 0b00 	mov.w	fp, #0
 80067be:	ea5a 030b 	orrs.w	r3, sl, fp
 80067c2:	d04c      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ce:	d030      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80067d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d4:	d829      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80067d8:	d02d      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80067da:	2bc0      	cmp	r3, #192	@ 0xc0
 80067dc:	d825      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067de:	2b80      	cmp	r3, #128	@ 0x80
 80067e0:	d018      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80067e2:	2b80      	cmp	r3, #128	@ 0x80
 80067e4:	d821      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80067ea:	2b40      	cmp	r3, #64	@ 0x40
 80067ec:	d007      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80067ee:	e01c      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f0:	4b63      	ldr	r3, [pc, #396]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	4a62      	ldr	r2, [pc, #392]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80067fc:	e01c      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	3308      	adds	r3, #8
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fbe6 	bl	8007fd8 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006812:	e011      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	3328      	adds	r3, #40	@ 0x28
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fc8d 	bl	800813c <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006830:	e002      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006840:	4b4f      	ldr	r3, [pc, #316]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006844:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684e:	4a4c      	ldr	r2, [pc, #304]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006850:	430b      	orrs	r3, r1
 8006852:	6513      	str	r3, [r2, #80]	@ 0x50
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800686a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006874:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d053      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006886:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800688a:	d035      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800688c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006890:	d82e      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006892:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006896:	d031      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006898:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800689c:	d828      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800689e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068a2:	d01a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80068a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068a8:	d822      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80068ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068b2:	d007      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80068b4:	e01c      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b6:	4b32      	ldr	r3, [pc, #200]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	4a31      	ldr	r2, [pc, #196]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068c2:	e01c      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	3308      	adds	r3, #8
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 fb83 	bl	8007fd8 <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068d8:	e011      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	3328      	adds	r3, #40	@ 0x28
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fc2a 	bl	800813c <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068ee:	e006      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80068f8:	bf00      	nop
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006906:	4b1e      	ldr	r3, [pc, #120]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006916:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006918:	430b      	orrs	r3, r1
 800691a:	6593      	str	r3, [r2, #88]	@ 0x58
 800691c:	e003      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006932:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006936:	2300      	movs	r3, #0
 8006938:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800693c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006940:	460b      	mov	r3, r1
 8006942:	4313      	orrs	r3, r2
 8006944:	d056      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800694e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006952:	d038      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006958:	d831      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800695a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800695e:	d034      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006960:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006964:	d82b      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800696a:	d01d      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800696c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006970:	d825      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800697a:	d00a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800697c:	e01f      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800697e:	bf00      	nop
 8006980:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006984:	4ba2      	ldr	r3, [pc, #648]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	4aa1      	ldr	r2, [pc, #644]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800698a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006990:	e01c      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006996:	3308      	adds	r3, #8
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f001 fb1c 	bl	8007fd8 <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069a6:	e011      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	3328      	adds	r3, #40	@ 0x28
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 fbc3 	bl	800813c <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c4:	e002      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80069ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80069d4:	4b8e      	ldr	r3, [pc, #568]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069e4:	4a8a      	ldr	r2, [pc, #552]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d03a      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1a:	2b30      	cmp	r3, #48	@ 0x30
 8006a1c:	d01f      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006a1e:	2b30      	cmp	r3, #48	@ 0x30
 8006a20:	d819      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	d00c      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d815      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d019      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d111      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a32:	4b77      	ldr	r3, [pc, #476]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	4a76      	ldr	r2, [pc, #472]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006a3e:	e011      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	3308      	adds	r3, #8
 8006a46:	2102      	movs	r1, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fac5 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006a54:	e006      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a5c:	e002      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a6c:	4b68      	ldr	r3, [pc, #416]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a7a:	4a65      	ldr	r2, [pc, #404]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a80:	e003      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006a96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d051      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab4:	d035      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ab6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aba:	d82e      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ac0:	d031      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ac6:	d828      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	d01a      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	d822      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006adc:	d007      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ade:	e01c      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006aec:	e01c      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	3308      	adds	r3, #8
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 fa6e 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b02:	e011      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	3328      	adds	r3, #40	@ 0x28
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fb15 	bl	800813c <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b18:	e006      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b20:	e002      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006b22:	bf00      	nop
 8006b24:	e000      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b30:	4b37      	ldr	r3, [pc, #220]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b3e:	4a34      	ldr	r2, [pc, #208]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b44:	e003      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	d056      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b78:	d033      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006b7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b7e:	d82c      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b84:	d02f      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006b86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b8a:	d826      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b90:	d02b      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006b92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b96:	d820      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b9c:	d012      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba2:	d81a      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d022      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bac:	d115      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fa0e 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bc2:	e015      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc8:	3328      	adds	r3, #40	@ 0x28
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 fab5 	bl	800813c <RCCEx_PLL3_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e00a      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006be0:	e006      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006be2:	bf00      	nop
 8006be4:	e004      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10d      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006bf8:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c06:	4a02      	ldr	r2, [pc, #8]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c0c:	e006      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006c0e:	bf00      	nop
 8006c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	d055      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c48:	d033      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c4e:	d82c      	bhi.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c54:	d02f      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c5a:	d826      	bhi.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c60:	d02b      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c66:	d820      	bhi.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c6c:	d012      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c72:	d81a      	bhi.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d022      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c7c:	d115      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	3308      	adds	r3, #8
 8006c84:	2101      	movs	r1, #1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 f9a6 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c92:	e015      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	3328      	adds	r3, #40	@ 0x28
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 fa4d 	bl	800813c <RCCEx_PLL3_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e00a      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb0:	e006      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006cb2:	bf00      	nop
 8006cb4:	e004      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006cb6:	bf00      	nop
 8006cb8:	e002      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10b      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006cc8:	4ba3      	ldr	r3, [pc, #652]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ccc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cd8:	4a9f      	ldr	r2, [pc, #636]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cde:	e003      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d02:	460b      	mov	r3, r1
 8006d04:	4313      	orrs	r3, r2
 8006d06:	d037      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d12:	d00e      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d18:	d816      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d018      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d22:	d111      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d24:	4b8c      	ldr	r3, [pc, #560]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	4a8b      	ldr	r2, [pc, #556]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d30:	e00f      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d36:	3308      	adds	r3, #8
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 f94c 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d46:	e004      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d4e:	e000      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d68:	4a7b      	ldr	r2, [pc, #492]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d6e:	e003      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4313      	orrs	r3, r2
 8006d96:	d039      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d81c      	bhi.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006da2:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006de5 	.word	0x08006de5
 8006dac:	08006db9 	.word	0x08006db9
 8006db0:	08006dc7 	.word	0x08006dc7
 8006db4:	08006de5 	.word	0x08006de5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db8:	4b67      	ldr	r3, [pc, #412]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	4a66      	ldr	r2, [pc, #408]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006dc4:	e00f      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	3308      	adds	r3, #8
 8006dcc:	2102      	movs	r1, #2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 f902 	bl	8007fd8 <RCCEx_PLL2_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006dda:	e004      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de2:	e000      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006dee:	4b5a      	ldr	r3, [pc, #360]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df2:	f023 0103 	bic.w	r1, r3, #3
 8006df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfc:	4a56      	ldr	r2, [pc, #344]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e02:	e003      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006e26:	460b      	mov	r3, r1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f000 809f 	beq.w	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a4a      	ldr	r2, [pc, #296]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e3a:	f7fb fe7d 	bl	8002b38 <HAL_GetTick>
 8006e3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e42:	e00b      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e44:	f7fb fe78 	bl	8002b38 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b64      	cmp	r3, #100	@ 0x64
 8006e52:	d903      	bls.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e5a:	e005      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0ed      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d179      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e70:	4b39      	ldr	r3, [pc, #228]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e7c:	4053      	eors	r3, r2
 8006e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d015      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e86:	4b34      	ldr	r3, [pc, #208]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e92:	4b31      	ldr	r3, [pc, #196]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a30      	ldr	r2, [pc, #192]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ea8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ebe:	d118      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fb fe3a 	bl	8002b38 <HAL_GetTick>
 8006ec4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec8:	e00d      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fb fe35 	bl	8002b38 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ed4:	1ad2      	subs	r2, r2, r3
 8006ed6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d903      	bls.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0eb      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d129      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f0a:	d10e      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006f0c:	4b12      	ldr	r3, [pc, #72]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f1c:	091a      	lsrs	r2, r3, #4
 8006f1e:	4b10      	ldr	r3, [pc, #64]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	4a0d      	ldr	r2, [pc, #52]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6113      	str	r3, [r2, #16]
 8006f28:	e005      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f34:	6113      	str	r3, [r2, #16]
 8006f36:	4b08      	ldr	r3, [pc, #32]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f46:	4a04      	ldr	r2, [pc, #16]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f4c:	e00e      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006f56:	e009      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	58024800 	.word	0x58024800
 8006f60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f002 0301 	and.w	r3, r2, #1
 8006f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f000 8089 	beq.w	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f94:	2b28      	cmp	r3, #40	@ 0x28
 8006f96:	d86b      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006f98:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08007079 	.word	0x08007079
 8006fa4:	08007071 	.word	0x08007071
 8006fa8:	08007071 	.word	0x08007071
 8006fac:	08007071 	.word	0x08007071
 8006fb0:	08007071 	.word	0x08007071
 8006fb4:	08007071 	.word	0x08007071
 8006fb8:	08007071 	.word	0x08007071
 8006fbc:	08007071 	.word	0x08007071
 8006fc0:	08007045 	.word	0x08007045
 8006fc4:	08007071 	.word	0x08007071
 8006fc8:	08007071 	.word	0x08007071
 8006fcc:	08007071 	.word	0x08007071
 8006fd0:	08007071 	.word	0x08007071
 8006fd4:	08007071 	.word	0x08007071
 8006fd8:	08007071 	.word	0x08007071
 8006fdc:	08007071 	.word	0x08007071
 8006fe0:	0800705b 	.word	0x0800705b
 8006fe4:	08007071 	.word	0x08007071
 8006fe8:	08007071 	.word	0x08007071
 8006fec:	08007071 	.word	0x08007071
 8006ff0:	08007071 	.word	0x08007071
 8006ff4:	08007071 	.word	0x08007071
 8006ff8:	08007071 	.word	0x08007071
 8006ffc:	08007071 	.word	0x08007071
 8007000:	08007079 	.word	0x08007079
 8007004:	08007071 	.word	0x08007071
 8007008:	08007071 	.word	0x08007071
 800700c:	08007071 	.word	0x08007071
 8007010:	08007071 	.word	0x08007071
 8007014:	08007071 	.word	0x08007071
 8007018:	08007071 	.word	0x08007071
 800701c:	08007071 	.word	0x08007071
 8007020:	08007079 	.word	0x08007079
 8007024:	08007071 	.word	0x08007071
 8007028:	08007071 	.word	0x08007071
 800702c:	08007071 	.word	0x08007071
 8007030:	08007071 	.word	0x08007071
 8007034:	08007071 	.word	0x08007071
 8007038:	08007071 	.word	0x08007071
 800703c:	08007071 	.word	0x08007071
 8007040:	08007079 	.word	0x08007079
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007048:	3308      	adds	r3, #8
 800704a:	2101      	movs	r1, #1
 800704c:	4618      	mov	r0, r3
 800704e:	f000 ffc3 	bl	8007fd8 <RCCEx_PLL2_Config>
 8007052:	4603      	mov	r3, r0
 8007054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007058:	e00f      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705e:	3328      	adds	r3, #40	@ 0x28
 8007060:	2101      	movs	r1, #1
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f86a 	bl	800813c <RCCEx_PLL3_Config>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800706e:	e004      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007076:	e000      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800707a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007082:	4bbf      	ldr	r3, [pc, #764]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007086:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007090:	4abb      	ldr	r2, [pc, #748]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007092:	430b      	orrs	r3, r1
 8007094:	6553      	str	r3, [r2, #84]	@ 0x54
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f002 0302 	and.w	r3, r2, #2
 80070ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80070ba:	460b      	mov	r3, r1
 80070bc:	4313      	orrs	r3, r2
 80070be:	d041      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d824      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80070ca:	a201      	add	r2, pc, #4	@ (adr r2, 80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	0800711d 	.word	0x0800711d
 80070d4:	080070e9 	.word	0x080070e9
 80070d8:	080070ff 	.word	0x080070ff
 80070dc:	0800711d 	.word	0x0800711d
 80070e0:	0800711d 	.word	0x0800711d
 80070e4:	0800711d 	.word	0x0800711d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	3308      	adds	r3, #8
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 ff71 	bl	8007fd8 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80070fc:	e00f      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	3328      	adds	r3, #40	@ 0x28
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f001 f818 	bl	800813c <RCCEx_PLL3_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007112:	e004      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800711c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007126:	4b96      	ldr	r3, [pc, #600]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712a:	f023 0107 	bic.w	r1, r3, #7
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007134:	4a92      	ldr	r2, [pc, #584]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6553      	str	r3, [r2, #84]	@ 0x54
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f002 0304 	and.w	r3, r2, #4
 8007150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007154:	2300      	movs	r3, #0
 8007156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800715a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d044      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800716c:	2b05      	cmp	r3, #5
 800716e:	d825      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007170:	a201      	add	r2, pc, #4	@ (adr r2, 8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	080071c5 	.word	0x080071c5
 800717c:	08007191 	.word	0x08007191
 8007180:	080071a7 	.word	0x080071a7
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071c5 	.word	0x080071c5
 800718c:	080071c5 	.word	0x080071c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007194:	3308      	adds	r3, #8
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f000 ff1d 	bl	8007fd8 <RCCEx_PLL2_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071a4:	e00f      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	3328      	adds	r3, #40	@ 0x28
 80071ac:	2101      	movs	r1, #1
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 ffc4 	bl	800813c <RCCEx_PLL3_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071ba:	e004      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80071c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071ce:	4b6c      	ldr	r3, [pc, #432]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d2:	f023 0107 	bic.w	r1, r3, #7
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071de:	4a68      	ldr	r2, [pc, #416]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071e0:	430b      	orrs	r3, r1
 80071e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071e4:	e003      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f002 0320 	and.w	r3, r2, #32
 80071fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007208:	460b      	mov	r3, r1
 800720a:	4313      	orrs	r3, r2
 800720c:	d055      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800721a:	d033      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800721c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007220:	d82c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007226:	d02f      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722c:	d826      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800722e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007232:	d02b      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007234:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007238:	d820      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800723a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723e:	d012      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007244:	d81a      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d022      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800724a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800724e:	d115      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	3308      	adds	r3, #8
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f000 febd 	bl	8007fd8 <RCCEx_PLL2_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007264:	e015      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3328      	adds	r3, #40	@ 0x28
 800726c:	2102      	movs	r1, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ff64 	bl	800813c <RCCEx_PLL3_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800727a:	e00a      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007282:	e006      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007284:	bf00      	nop
 8007286:	e004      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007288:	bf00      	nop
 800728a:	e002      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800729a:	4b39      	ldr	r3, [pc, #228]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800729c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072aa:	4a35      	ldr	r2, [pc, #212]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80072b0:	e003      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80072c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072ca:	2300      	movs	r3, #0
 80072cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4313      	orrs	r3, r2
 80072d8:	d058      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80072da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80072e6:	d033      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80072e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80072ec:	d82c      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d02f      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f8:	d826      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072fe:	d02b      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007300:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007304:	d820      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800730a:	d012      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007310:	d81a      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d022      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800731a:	d115      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	3308      	adds	r3, #8
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fe57 	bl	8007fd8 <RCCEx_PLL2_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007330:	e015      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007336:	3328      	adds	r3, #40	@ 0x28
 8007338:	2102      	movs	r1, #2
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fefe 	bl	800813c <RCCEx_PLL3_Config>
 8007340:	4603      	mov	r3, r0
 8007342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007346:	e00a      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800734e:	e006      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007350:	bf00      	nop
 8007352:	e004      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007354:	bf00      	nop
 8007356:	e002      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800735c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10e      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007366:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800736a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007376:	4a02      	ldr	r2, [pc, #8]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007378:	430b      	orrs	r3, r1
 800737a:	6593      	str	r3, [r2, #88]	@ 0x58
 800737c:	e006      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800737e:	bf00      	nop
 8007380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800739c:	2300      	movs	r3, #0
 800739e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80073a6:	460b      	mov	r3, r1
 80073a8:	4313      	orrs	r3, r2
 80073aa:	d055      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80073b8:	d033      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80073ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80073be:	d82c      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c4:	d02f      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ca:	d826      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80073d0:	d02b      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80073d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80073d6:	d820      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073dc:	d012      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80073de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073e2:	d81a      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d022      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80073e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ec:	d115      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	3308      	adds	r3, #8
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fdee 	bl	8007fd8 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007402:	e015      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	3328      	adds	r3, #40	@ 0x28
 800740a:	2102      	movs	r1, #2
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fe95 	bl	800813c <RCCEx_PLL3_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007418:	e00a      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007420:	e006      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800742e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007438:	4ba1      	ldr	r3, [pc, #644]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800743a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007448:	4a9d      	ldr	r2, [pc, #628]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800744a:	430b      	orrs	r3, r1
 800744c:	6593      	str	r3, [r2, #88]	@ 0x58
 800744e:	e003      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f002 0308 	and.w	r3, r2, #8
 8007464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007468:	2300      	movs	r3, #0
 800746a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800746e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007472:	460b      	mov	r3, r1
 8007474:	4313      	orrs	r3, r2
 8007476:	d01e      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007484:	d10c      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748a:	3328      	adds	r3, #40	@ 0x28
 800748c:	2102      	movs	r1, #2
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fe54 	bl	800813c <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074a0:	4b87      	ldr	r3, [pc, #540]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b0:	4a83      	ldr	r2, [pc, #524]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074b2:	430b      	orrs	r3, r1
 80074b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f002 0310 	and.w	r3, r2, #16
 80074c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074c6:	2300      	movs	r3, #0
 80074c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80074d0:	460b      	mov	r3, r1
 80074d2:	4313      	orrs	r3, r2
 80074d4:	d01e      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e2:	d10c      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	3328      	adds	r3, #40	@ 0x28
 80074ea:	2102      	movs	r1, #2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fe25 	bl	800813c <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074fe:	4b70      	ldr	r3, [pc, #448]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007502:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800750e:	4a6c      	ldr	r2, [pc, #432]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007524:	2300      	movs	r3, #0
 8007526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800752a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800752e:	460b      	mov	r3, r1
 8007530:	4313      	orrs	r3, r2
 8007532:	d03e      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800753c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007540:	d022      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007546:	d81b      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800754c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007550:	d00b      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007552:	e015      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	3308      	adds	r3, #8
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fd3b 	bl	8007fd8 <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007568:	e00f      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	3328      	adds	r3, #40	@ 0x28
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fde2 	bl	800813c <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800757e:	e004      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007592:	4b4b      	ldr	r3, [pc, #300]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007596:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075a2:	4a47      	ldr	r2, [pc, #284]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075a8:	e003      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80075be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075c0:	2300      	movs	r3, #0
 80075c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075c8:	460b      	mov	r3, r1
 80075ca:	4313      	orrs	r3, r2
 80075cc:	d03b      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075da:	d01f      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80075dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075e0:	d818      	bhi.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80075e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075e6:	d003      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80075e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075ec:	d007      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80075ee:	e011      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f0:	4b33      	ldr	r3, [pc, #204]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	4a32      	ldr	r2, [pc, #200]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80075fc:	e00f      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007602:	3328      	adds	r3, #40	@ 0x28
 8007604:	2101      	movs	r1, #1
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fd98 	bl	800813c <RCCEx_PLL3_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007612:	e004      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800761a:	e000      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800761c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007626:	4b26      	ldr	r3, [pc, #152]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800762a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007636:	4a22      	ldr	r2, [pc, #136]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007638:	430b      	orrs	r3, r1
 800763a:	6553      	str	r3, [r2, #84]	@ 0x54
 800763c:	e003      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007652:	673b      	str	r3, [r7, #112]	@ 0x70
 8007654:	2300      	movs	r3, #0
 8007656:	677b      	str	r3, [r7, #116]	@ 0x74
 8007658:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800765c:	460b      	mov	r3, r1
 800765e:	4313      	orrs	r3, r2
 8007660:	d034      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800766c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007670:	d007      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007672:	e011      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007674:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	4a11      	ldr	r2, [pc, #68]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800767a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800767e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007680:	e00e      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007686:	3308      	adds	r3, #8
 8007688:	2102      	movs	r1, #2
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fca4 	bl	8007fd8 <RCCEx_PLL2_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800769e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10d      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b6:	4a02      	ldr	r2, [pc, #8]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076b8:	430b      	orrs	r3, r1
 80076ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076bc:	e006      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80076d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076da:	2300      	movs	r3, #0
 80076dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80076e2:	460b      	mov	r3, r1
 80076e4:	4313      	orrs	r3, r2
 80076e6:	d00c      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	3328      	adds	r3, #40	@ 0x28
 80076ee:	2102      	movs	r1, #2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fd23 	bl	800813c <RCCEx_PLL3_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800770e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007710:	2300      	movs	r3, #0
 8007712:	667b      	str	r3, [r7, #100]	@ 0x64
 8007714:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007718:	460b      	mov	r3, r1
 800771a:	4313      	orrs	r3, r2
 800771c:	d038      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800772a:	d018      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800772c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007730:	d811      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007736:	d014      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800773c:	d80b      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d011      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007746:	d106      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007748:	4bc3      	ldr	r3, [pc, #780]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	4ac2      	ldr	r2, [pc, #776]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800774e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007754:	e008      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800775c:	e004      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10b      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007770:	4bb9      	ldr	r3, [pc, #740]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007774:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007780:	4ab5      	ldr	r2, [pc, #724]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007782:	430b      	orrs	r3, r1
 8007784:	6553      	str	r3, [r2, #84]	@ 0x54
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800778c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800779c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800779e:	2300      	movs	r3, #0
 80077a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077a6:	460b      	mov	r3, r1
 80077a8:	4313      	orrs	r3, r2
 80077aa:	d009      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077ac:	4baa      	ldr	r3, [pc, #680]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ba:	4aa7      	ldr	r2, [pc, #668]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80077cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80077ce:	2300      	movs	r3, #0
 80077d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80077d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80077d6:	460b      	mov	r3, r1
 80077d8:	4313      	orrs	r3, r2
 80077da:	d00a      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80077dc:	4b9e      	ldr	r3, [pc, #632]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80077ec:	4a9a      	ldr	r2, [pc, #616]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80077fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007800:	2300      	movs	r3, #0
 8007802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007804:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d009      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800780e:	4b92      	ldr	r3, [pc, #584]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007812:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800781c:	4a8e      	ldr	r2, [pc, #568]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800781e:	430b      	orrs	r3, r1
 8007820:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800782e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007830:	2300      	movs	r3, #0
 8007832:	647b      	str	r3, [r7, #68]	@ 0x44
 8007834:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d00e      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800783e:	4b86      	ldr	r3, [pc, #536]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	4a85      	ldr	r2, [pc, #532]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007844:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007848:	6113      	str	r3, [r2, #16]
 800784a:	4b83      	ldr	r3, [pc, #524]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800784c:	6919      	ldr	r1, [r3, #16]
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007856:	4a80      	ldr	r2, [pc, #512]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007858:	430b      	orrs	r3, r1
 800785a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800786a:	2300      	movs	r3, #0
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800786e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007872:	460b      	mov	r3, r1
 8007874:	4313      	orrs	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007878:	4b77      	ldr	r3, [pc, #476]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800787a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007886:	4a74      	ldr	r2, [pc, #464]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007888:	430b      	orrs	r3, r1
 800788a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007898:	633b      	str	r3, [r7, #48]	@ 0x30
 800789a:	2300      	movs	r3, #0
 800789c:	637b      	str	r3, [r7, #52]	@ 0x34
 800789e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80078a2:	460b      	mov	r3, r1
 80078a4:	4313      	orrs	r3, r2
 80078a6:	d00a      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078a8:	4b6b      	ldr	r3, [pc, #428]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b8:	4a67      	ldr	r2, [pc, #412]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	2100      	movs	r1, #0
 80078c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80078d4:	460b      	mov	r3, r1
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d011      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	3308      	adds	r3, #8
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fb78 	bl	8007fd8 <RCCEx_PLL2_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	2100      	movs	r1, #0
 8007908:	6239      	str	r1, [r7, #32]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007910:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d011      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	3308      	adds	r3, #8
 8007920:	2101      	movs	r1, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fb58 	bl	8007fd8 <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	2100      	movs	r1, #0
 8007948:	61b9      	str	r1, [r7, #24]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007954:	460b      	mov	r3, r1
 8007956:	4313      	orrs	r3, r2
 8007958:	d011      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795e:	3308      	adds	r3, #8
 8007960:	2102      	movs	r1, #2
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fb38 	bl	8007fd8 <RCCEx_PLL2_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800796e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	2100      	movs	r1, #0
 8007988:	6139      	str	r1, [r7, #16]
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007994:	460b      	mov	r3, r1
 8007996:	4313      	orrs	r3, r2
 8007998:	d011      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	3328      	adds	r3, #40	@ 0x28
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fbca 	bl	800813c <RCCEx_PLL3_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80079ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	2100      	movs	r1, #0
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	f003 0310 	and.w	r3, r3, #16
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079d4:	460b      	mov	r3, r1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d011      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079de:	3328      	adds	r3, #40	@ 0x28
 80079e0:	2101      	movs	r1, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fbaa 	bl	800813c <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	2100      	movs	r1, #0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a14:	460b      	mov	r3, r1
 8007a16:	4313      	orrs	r3, r2
 8007a18:	d011      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	3328      	adds	r3, #40	@ 0x28
 8007a20:	2102      	movs	r1, #2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fb8a 	bl	800813c <RCCEx_PLL3_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007a3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e000      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007a52:	46bd      	mov	sp, r7
 8007a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a58:	58024400 	.word	0x58024400

08007a5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a60:	f7fe fd54 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8007a64:	4602      	mov	r2, r0
 8007a66:	4b06      	ldr	r3, [pc, #24]	@ (8007a80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	091b      	lsrs	r3, r3, #4
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	4904      	ldr	r1, [pc, #16]	@ (8007a84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a72:	5ccb      	ldrb	r3, [r1, r3]
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	58024400 	.word	0x58024400
 8007a84:	08013000 	.word	0x08013000

08007a88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b089      	sub	sp, #36	@ 0x24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a90:	4ba1      	ldr	r3, [pc, #644]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	0b1b      	lsrs	r3, r3, #12
 8007aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aaa:	091b      	lsrs	r3, r3, #4
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007ab2:	4b99      	ldr	r3, [pc, #612]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab6:	08db      	lsrs	r3, r3, #3
 8007ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8111 	beq.w	8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	f000 8083 	beq.w	8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	f200 80a1 	bhi.w	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d056      	beq.n	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007af2:	e099      	b.n	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af4:	4b88      	ldr	r3, [pc, #544]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d02d      	beq.n	8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b00:	4b85      	ldr	r3, [pc, #532]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	08db      	lsrs	r3, r3, #3
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	4a84      	ldr	r2, [pc, #528]	@ (8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b5a:	e087      	b.n	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b9e:	e065      	b.n	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb2:	4b59      	ldr	r3, [pc, #356]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007be2:	e043      	b.n	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf6:	4b48      	ldr	r3, [pc, #288]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c26:	e021      	b.n	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3a:	4b37      	ldr	r3, [pc, #220]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	0a5b      	lsrs	r3, r3, #9
 8007c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c92:	ee17 2a90 	vmov	r2, s15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	0c1b      	lsrs	r3, r3, #16
 8007ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc0:	ee17 2a90 	vmov	r2, s15
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007cc8:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ccc:	0e1b      	lsrs	r3, r3, #24
 8007cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cee:	ee17 2a90 	vmov	r2, s15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cf6:	e008      	b.n	8007d0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
}
 8007d0a:	bf00      	nop
 8007d0c:	3724      	adds	r7, #36	@ 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	03d09000 	.word	0x03d09000
 8007d20:	46000000 	.word	0x46000000
 8007d24:	4c742400 	.word	0x4c742400
 8007d28:	4a742400 	.word	0x4a742400
 8007d2c:	4bbebc20 	.word	0x4bbebc20

08007d30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b089      	sub	sp, #36	@ 0x24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d38:	4ba1      	ldr	r3, [pc, #644]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007d42:	4b9f      	ldr	r3, [pc, #636]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	0d1b      	lsrs	r3, r3, #20
 8007d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007d5a:	4b99      	ldr	r3, [pc, #612]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5e:	08db      	lsrs	r3, r3, #3
 8007d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8111 	beq.w	8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	f000 8083 	beq.w	8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	f200 80a1 	bhi.w	8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d056      	beq.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d9a:	e099      	b.n	8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d9c:	4b88      	ldr	r3, [pc, #544]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d02d      	beq.n	8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007da8:	4b85      	ldr	r3, [pc, #532]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	08db      	lsrs	r3, r3, #3
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	4a84      	ldr	r2, [pc, #528]	@ (8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007de6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e02:	e087      	b.n	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e16:	4b6a      	ldr	r3, [pc, #424]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e46:	e065      	b.n	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5a:	4b59      	ldr	r3, [pc, #356]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e8a:	e043      	b.n	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9e:	4b48      	ldr	r3, [pc, #288]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ece:	e021      	b.n	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee2:	4b37      	ldr	r3, [pc, #220]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007f14:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	0a5b      	lsrs	r3, r3, #9
 8007f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3a:	ee17 2a90 	vmov	r2, s15
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007f42:	4b1f      	ldr	r3, [pc, #124]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	0c1b      	lsrs	r3, r3, #16
 8007f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f4c:	ee07 3a90 	vmov	s15, r3
 8007f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f68:	ee17 2a90 	vmov	r2, s15
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f70:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f74:	0e1b      	lsrs	r3, r3, #24
 8007f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f96:	ee17 2a90 	vmov	r2, s15
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
}
 8007fb2:	bf00      	nop
 8007fb4:	3724      	adds	r7, #36	@ 0x24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	03d09000 	.word	0x03d09000
 8007fc8:	46000000 	.word	0x46000000
 8007fcc:	4c742400 	.word	0x4c742400
 8007fd0:	4a742400 	.word	0x4a742400
 8007fd4:	4bbebc20 	.word	0x4bbebc20

08007fd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fe6:	4b53      	ldr	r3, [pc, #332]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d101      	bne.n	8007ff6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e099      	b.n	800812a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008002:	f7fa fd99 	bl	8002b38 <HAL_GetTick>
 8008006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008008:	e008      	b.n	800801c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800800a:	f7fa fd95 	bl	8002b38 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e086      	b.n	800812a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800801c:	4b45      	ldr	r3, [pc, #276]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f0      	bne.n	800800a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008028:	4b42      	ldr	r3, [pc, #264]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	031b      	lsls	r3, r3, #12
 8008036:	493f      	ldr	r1, [pc, #252]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8008038:	4313      	orrs	r3, r2
 800803a:	628b      	str	r3, [r1, #40]	@ 0x28
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	3b01      	subs	r3, #1
 8008042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	3b01      	subs	r3, #1
 800804c:	025b      	lsls	r3, r3, #9
 800804e:	b29b      	uxth	r3, r3
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	3b01      	subs	r3, #1
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	3b01      	subs	r3, #1
 8008066:	061b      	lsls	r3, r3, #24
 8008068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800806c:	4931      	ldr	r1, [pc, #196]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008072:	4b30      	ldr	r3, [pc, #192]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	492d      	ldr	r1, [pc, #180]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8008080:	4313      	orrs	r3, r2
 8008082:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008084:	4b2b      	ldr	r3, [pc, #172]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	f023 0220 	bic.w	r2, r3, #32
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	4928      	ldr	r1, [pc, #160]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008096:	4b27      	ldr	r3, [pc, #156]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	4a26      	ldr	r2, [pc, #152]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 800809c:	f023 0310 	bic.w	r3, r3, #16
 80080a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080a2:	4b24      	ldr	r3, [pc, #144]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080a6:	4b24      	ldr	r3, [pc, #144]	@ (8008138 <RCCEx_PLL2_Config+0x160>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	69d2      	ldr	r2, [r2, #28]
 80080ae:	00d2      	lsls	r2, r2, #3
 80080b0:	4920      	ldr	r1, [pc, #128]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080bc:	f043 0310 	orr.w	r3, r3, #16
 80080c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080d4:	e00f      	b.n	80080f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d106      	bne.n	80080ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080dc:	4b15      	ldr	r3, [pc, #84]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	4a14      	ldr	r2, [pc, #80]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080e8:	e005      	b.n	80080f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080ea:	4b12      	ldr	r3, [pc, #72]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	4a11      	ldr	r2, [pc, #68]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008102:	f7fa fd19 	bl	8002b38 <HAL_GetTick>
 8008106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008108:	e008      	b.n	800811c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800810a:	f7fa fd15 	bl	8002b38 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e006      	b.n	800812a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800811c:	4b05      	ldr	r3, [pc, #20]	@ (8008134 <RCCEx_PLL2_Config+0x15c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0f0      	beq.n	800810a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	58024400 	.word	0x58024400
 8008138:	ffff0007 	.word	0xffff0007

0800813c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800814a:	4b53      	ldr	r3, [pc, #332]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800814c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d101      	bne.n	800815a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e099      	b.n	800828e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800815a:	4b4f      	ldr	r3, [pc, #316]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a4e      	ldr	r2, [pc, #312]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008166:	f7fa fce7 	bl	8002b38 <HAL_GetTick>
 800816a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800816c:	e008      	b.n	8008180 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800816e:	f7fa fce3 	bl	8002b38 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e086      	b.n	800828e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008180:	4b45      	ldr	r3, [pc, #276]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f0      	bne.n	800816e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800818c:	4b42      	ldr	r3, [pc, #264]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800818e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008190:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	051b      	lsls	r3, r3, #20
 800819a:	493f      	ldr	r1, [pc, #252]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800819c:	4313      	orrs	r3, r2
 800819e:	628b      	str	r3, [r1, #40]	@ 0x28
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	025b      	lsls	r3, r3, #9
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	431a      	orrs	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	061b      	lsls	r3, r3, #24
 80081cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081d0:	4931      	ldr	r1, [pc, #196]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081d6:	4b30      	ldr	r3, [pc, #192]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 80081d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	492d      	ldr	r1, [pc, #180]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4928      	ldr	r1, [pc, #160]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081fa:	4b27      	ldr	r3, [pc, #156]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	4a26      	ldr	r2, [pc, #152]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008206:	4b24      	ldr	r3, [pc, #144]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800820a:	4b24      	ldr	r3, [pc, #144]	@ (800829c <RCCEx_PLL3_Config+0x160>)
 800820c:	4013      	ands	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	69d2      	ldr	r2, [r2, #28]
 8008212:	00d2      	lsls	r2, r2, #3
 8008214:	4920      	ldr	r1, [pc, #128]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008216:	4313      	orrs	r3, r2
 8008218:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800821a:	4b1f      	ldr	r3, [pc, #124]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800821c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821e:	4a1e      	ldr	r2, [pc, #120]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800822c:	4b1a      	ldr	r3, [pc, #104]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	4a19      	ldr	r2, [pc, #100]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008238:	e00f      	b.n	800825a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d106      	bne.n	800824e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008240:	4b15      	ldr	r3, [pc, #84]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	4a14      	ldr	r2, [pc, #80]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008246:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800824a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800824c:	e005      	b.n	800825a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800824e:	4b12      	ldr	r3, [pc, #72]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008252:	4a11      	ldr	r2, [pc, #68]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800825a:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a0e      	ldr	r2, [pc, #56]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008266:	f7fa fc67 	bl	8002b38 <HAL_GetTick>
 800826a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800826c:	e008      	b.n	8008280 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800826e:	f7fa fc63 	bl	8002b38 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e006      	b.n	800828e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008280:	4b05      	ldr	r3, [pc, #20]	@ (8008298 <RCCEx_PLL3_Config+0x15c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0f0      	beq.n	800826e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	58024400 	.word	0x58024400
 800829c:	ffff0007 	.word	0xffff0007

080082a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e10f      	b.n	80084d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a87      	ldr	r2, [pc, #540]	@ (80084dc <HAL_SPI_Init+0x23c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00f      	beq.n	80082e2 <HAL_SPI_Init+0x42>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a86      	ldr	r2, [pc, #536]	@ (80084e0 <HAL_SPI_Init+0x240>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00a      	beq.n	80082e2 <HAL_SPI_Init+0x42>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a84      	ldr	r2, [pc, #528]	@ (80084e4 <HAL_SPI_Init+0x244>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d005      	beq.n	80082e2 <HAL_SPI_Init+0x42>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d901      	bls.n	80082e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e0f7      	b.n	80084d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fe2e 	bl	8008f44 <SPI_GetPacketSize>
 80082e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a7b      	ldr	r2, [pc, #492]	@ (80084dc <HAL_SPI_Init+0x23c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00c      	beq.n	800830e <HAL_SPI_Init+0x6e>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a79      	ldr	r2, [pc, #484]	@ (80084e0 <HAL_SPI_Init+0x240>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d007      	beq.n	800830e <HAL_SPI_Init+0x6e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a78      	ldr	r2, [pc, #480]	@ (80084e4 <HAL_SPI_Init+0x244>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d002      	beq.n	800830e <HAL_SPI_Init+0x6e>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b08      	cmp	r3, #8
 800830c:	d811      	bhi.n	8008332 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008312:	4a72      	ldr	r2, [pc, #456]	@ (80084dc <HAL_SPI_Init+0x23c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d009      	beq.n	800832c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a70      	ldr	r2, [pc, #448]	@ (80084e0 <HAL_SPI_Init+0x240>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d004      	beq.n	800832c <HAL_SPI_Init+0x8c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a6f      	ldr	r2, [pc, #444]	@ (80084e4 <HAL_SPI_Init+0x244>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d104      	bne.n	8008336 <HAL_SPI_Init+0x96>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b10      	cmp	r3, #16
 8008330:	d901      	bls.n	8008336 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e0cd      	b.n	80084d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7f9 ff90 	bl	8002270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0201 	bic.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008372:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800837c:	d119      	bne.n	80083b2 <HAL_SPI_Init+0x112>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008386:	d103      	bne.n	8008390 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10c      	bne.n	80083b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800839c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083a0:	d107      	bne.n	80083b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00f      	beq.n	80083de <HAL_SPI_Init+0x13e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b06      	cmp	r3, #6
 80083c4:	d90b      	bls.n	80083de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	e007      	b.n	80083ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	431a      	orrs	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	ea42 0103 	orr.w	r1, r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800844e:	ea42 0103 	orr.w	r1, r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d113      	bne.n	800848e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008478:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800848c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0201 	bic.w	r2, r2, #1
 800849c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40013000 	.word	0x40013000
 80084e0:	40003800 	.word	0x40003800
 80084e4:	40003c00 	.word	0x40003c00

080084e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3320      	adds	r3, #32
 80084fe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008500:	f7fa fb1a 	bl	8002b38 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	d001      	beq.n	8008516 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008512:	2302      	movs	r3, #2
 8008514:	e1d1      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <HAL_SPI_Transmit+0x3a>
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e1c9      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_SPI_Transmit+0x4c>
 8008530:	2302      	movs	r3, #2
 8008532:	e1c2      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2203      	movs	r2, #3
 8008540:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	88fa      	ldrh	r2, [r7, #6]
 8008556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	88fa      	ldrh	r2, [r7, #6]
 800855e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800858c:	d108      	bne.n	80085a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e009      	b.n	80085b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80085b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	4b96      	ldr	r3, [pc, #600]	@ (8008814 <HAL_SPI_Transmit+0x32c>)
 80085bc:	4013      	ands	r3, r2
 80085be:	88f9      	ldrh	r1, [r7, #6]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0201 	orr.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085e0:	d107      	bne.n	80085f2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	d947      	bls.n	800868a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085fa:	e03f      	b.n	800867c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b02      	cmp	r3, #2
 8008608:	d114      	bne.n	8008634 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008632:	e023      	b.n	800867c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008634:	f7fa fa80 	bl	8002b38 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d803      	bhi.n	800864c <HAL_SPI_Transmit+0x164>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d102      	bne.n	8008652 <HAL_SPI_Transmit+0x16a>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d114      	bne.n	800867c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fba8 	bl	8008da8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800865e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e11e      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1b9      	bne.n	80085fc <HAL_SPI_Transmit+0x114>
 8008688:	e0f1      	b.n	800886e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b07      	cmp	r3, #7
 8008690:	f240 80e6 	bls.w	8008860 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008694:	e05d      	b.n	8008752 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d132      	bne.n	800870a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d918      	bls.n	80086e2 <HAL_SPI_Transmit+0x1fa>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d014      	beq.n	80086e2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c8:	1d1a      	adds	r2, r3, #4
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b02      	subs	r3, #2
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086e0:	e037      	b.n	8008752 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e6:	881a      	ldrh	r2, [r3, #0]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086f0:	1c9a      	adds	r2, r3, #2
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008708:	e023      	b.n	8008752 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800870a:	f7fa fa15 	bl	8002b38 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d803      	bhi.n	8008722 <HAL_SPI_Transmit+0x23a>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d102      	bne.n	8008728 <HAL_SPI_Transmit+0x240>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d114      	bne.n	8008752 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fb3d 	bl	8008da8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008734:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e0b3      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d19b      	bne.n	8008696 <HAL_SPI_Transmit+0x1ae>
 800875e:	e086      	b.n	800886e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b02      	cmp	r3, #2
 800876c:	d154      	bne.n	8008818 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b03      	cmp	r3, #3
 8008778:	d918      	bls.n	80087ac <HAL_SPI_Transmit+0x2c4>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877e:	2b40      	cmp	r3, #64	@ 0x40
 8008780:	d914      	bls.n	80087ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800879e:	b29b      	uxth	r3, r3
 80087a0:	3b04      	subs	r3, #4
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087aa:	e059      	b.n	8008860 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d917      	bls.n	80087e8 <HAL_SPI_Transmit+0x300>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d013      	beq.n	80087e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087c4:	881a      	ldrh	r2, [r3, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ce:	1c9a      	adds	r2, r3, #2
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3b02      	subs	r3, #2
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087e6:	e03b      	b.n	8008860 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3320      	adds	r3, #32
 80087f2:	7812      	ldrb	r2, [r2, #0]
 80087f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29a      	uxth	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008812:	e025      	b.n	8008860 <HAL_SPI_Transmit+0x378>
 8008814:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008818:	f7fa f98e 	bl	8002b38 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d803      	bhi.n	8008830 <HAL_SPI_Transmit+0x348>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d102      	bne.n	8008836 <HAL_SPI_Transmit+0x34e>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d114      	bne.n	8008860 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fab6 	bl	8008da8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008842:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e02c      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	f47f af79 	bne.w	8008760 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2200      	movs	r2, #0
 8008876:	2108      	movs	r1, #8
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fb35 	bl	8008ee8 <SPI_WaitOnFlagUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800888a:	f043 0220 	orr.w	r2, r3, #32
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fa87 	bl	8008da8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80088b8:	2300      	movs	r3, #0
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop

080088c4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d8:	095b      	lsrs	r3, r3, #5
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3301      	adds	r3, #1
 80088de:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3330      	adds	r3, #48	@ 0x30
 80088e6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088e8:	f7fa f926 	bl	8002b38 <HAL_GetTick>
 80088ec:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d001      	beq.n	80088fe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80088fa:	2302      	movs	r3, #2
 80088fc:	e250      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <HAL_SPI_Receive+0x46>
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e248      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_SPI_Receive+0x58>
 8008918:	2302      	movs	r3, #2
 800891a:	e241      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2204      	movs	r2, #4
 8008928:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	88fa      	ldrh	r2, [r7, #6]
 800893e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	88fa      	ldrh	r2, [r7, #6]
 8008946:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008974:	d108      	bne.n	8008988 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e009      	b.n	800899c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800899a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	4b95      	ldr	r3, [pc, #596]	@ (8008bf8 <HAL_SPI_Receive+0x334>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	88f9      	ldrh	r1, [r7, #6]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	430b      	orrs	r3, r1
 80089ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c8:	d107      	bne.n	80089da <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b0f      	cmp	r3, #15
 80089e0:	d96c      	bls.n	8008abc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80089e2:	e064      	b.n	8008aae <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d114      	bne.n	8008a24 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a22:	e044      	b.n	8008aae <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	8bfa      	ldrh	r2, [r7, #30]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d919      	bls.n	8008a66 <HAL_SPI_Receive+0x1a2>
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d014      	beq.n	8008a66 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a46:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a4c:	1d1a      	adds	r2, r3, #4
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a64:	e023      	b.n	8008aae <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a66:	f7fa f867 	bl	8002b38 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d803      	bhi.n	8008a7e <HAL_SPI_Receive+0x1ba>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d102      	bne.n	8008a84 <HAL_SPI_Receive+0x1c0>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d114      	bne.n	8008aae <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 f98f 	bl	8008da8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e178      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d194      	bne.n	80089e4 <HAL_SPI_Receive+0x120>
 8008aba:	e15e      	b.n	8008d7a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	2b07      	cmp	r3, #7
 8008ac2:	f240 8153 	bls.w	8008d6c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008ac6:	e08f      	b.n	8008be8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d114      	bne.n	8008b08 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	8812      	ldrh	r2, [r2, #0]
 8008ae6:	b292      	uxth	r2, r2
 8008ae8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aee:	1c9a      	adds	r2, r3, #2
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b01      	subs	r3, #1
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b06:	e06f      	b.n	8008be8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	8bfa      	ldrh	r2, [r7, #30]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d924      	bls.n	8008b60 <HAL_SPI_Receive+0x29c>
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01f      	beq.n	8008b60 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	8812      	ldrh	r2, [r2, #0]
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b30:	1c9a      	adds	r2, r3, #2
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	8812      	ldrh	r2, [r2, #0]
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b46:	1c9a      	adds	r2, r3, #2
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b02      	subs	r3, #2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b5e:	e043      	b.n	8008be8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d119      	bne.n	8008ba0 <HAL_SPI_Receive+0x2dc>
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d014      	beq.n	8008ba0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	8812      	ldrh	r2, [r2, #0]
 8008b7e:	b292      	uxth	r2, r2
 8008b80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b86:	1c9a      	adds	r2, r3, #2
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b9e:	e023      	b.n	8008be8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ba0:	f7f9 ffca 	bl	8002b38 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d803      	bhi.n	8008bb8 <HAL_SPI_Receive+0x2f4>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d102      	bne.n	8008bbe <HAL_SPI_Receive+0x2fa>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d114      	bne.n	8008be8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 f8f2 	bl	8008da8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e0db      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f47f af69 	bne.w	8008ac8 <HAL_SPI_Receive+0x204>
 8008bf6:	e0c0      	b.n	8008d7a <HAL_SPI_Receive+0x4b6>
 8008bf8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d117      	bne.n	8008c42 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c1e:	7812      	ldrb	r2, [r2, #0]
 8008c20:	b2d2      	uxtb	r2, r2
 8008c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c40:	e094      	b.n	8008d6c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	8bfa      	ldrh	r2, [r7, #30]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d946      	bls.n	8008cde <HAL_SPI_Receive+0x41a>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d041      	beq.n	8008cde <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	b2d2      	uxtb	r2, r2
 8008c6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c82:	7812      	ldrb	r2, [r2, #0]
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	b2d2      	uxtb	r2, r2
 8008ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cdc:	e046      	b.n	8008d6c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d81c      	bhi.n	8008d24 <HAL_SPI_Receive+0x460>
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d017      	beq.n	8008d24 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d22:	e023      	b.n	8008d6c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d24:	f7f9 ff08 	bl	8002b38 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d803      	bhi.n	8008d3c <HAL_SPI_Receive+0x478>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d102      	bne.n	8008d42 <HAL_SPI_Receive+0x47e>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d114      	bne.n	8008d6c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f830 	bl	8008da8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e019      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f af41 	bne.w	8008bfc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f814 	bl	8008da8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
  }
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f042 0208 	orr.w	r2, r2, #8
 8008dc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0210 	orr.w	r2, r2, #16
 8008dd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6919      	ldr	r1, [r3, #16]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b3c      	ldr	r3, [pc, #240]	@ (8008ee4 <SPI_CloseTransfer+0x13c>)
 8008df4:	400b      	ands	r3, r1
 8008df6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008e06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d014      	beq.n	8008e3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00f      	beq.n	8008e3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0220 	orr.w	r2, r2, #32
 8008e3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d014      	beq.n	8008e74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00f      	beq.n	8008e74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e5a:	f043 0204 	orr.w	r2, r3, #4
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00f      	beq.n	8008e9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e84:	f043 0201 	orr.w	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00f      	beq.n	8008ec8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eae:	f043 0208 	orr.w	r2, r3, #8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ec6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	fffffc90 	.word	0xfffffc90

08008ee8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ef8:	e010      	b.n	8008f1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008efa:	f7f9 fe1d 	bl	8002b38 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d803      	bhi.n	8008f12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d102      	bne.n	8008f18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e00f      	b.n	8008f3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695a      	ldr	r2, [r3, #20]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d0df      	beq.n	8008efa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	3301      	adds	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3307      	adds	r3, #7
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e049      	b.n	8009020 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f841 	bl	8009028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f000 f9f1 	bl	80093a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	d001      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e054      	b.n	80090fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0201 	orr.w	r2, r2, #1
 800906a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a26      	ldr	r2, [pc, #152]	@ (800910c <HAL_TIM_Base_Start_IT+0xd0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d022      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907e:	d01d      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a22      	ldr	r2, [pc, #136]	@ (8009110 <HAL_TIM_Base_Start_IT+0xd4>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d018      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a21      	ldr	r2, [pc, #132]	@ (8009114 <HAL_TIM_Base_Start_IT+0xd8>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d013      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1f      	ldr	r2, [pc, #124]	@ (8009118 <HAL_TIM_Base_Start_IT+0xdc>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00e      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a1e      	ldr	r2, [pc, #120]	@ (800911c <HAL_TIM_Base_Start_IT+0xe0>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d009      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009120 <HAL_TIM_Base_Start_IT+0xe4>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x80>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009124 <HAL_TIM_Base_Start_IT+0xe8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d115      	bne.n	80090e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	4b19      	ldr	r3, [pc, #100]	@ (8009128 <HAL_TIM_Base_Start_IT+0xec>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b06      	cmp	r3, #6
 80090cc:	d015      	beq.n	80090fa <HAL_TIM_Base_Start_IT+0xbe>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090d4:	d011      	beq.n	80090fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0201 	orr.w	r2, r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	e008      	b.n	80090fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e000      	b.n	80090fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40010000 	.word	0x40010000
 8009110:	40000400 	.word	0x40000400
 8009114:	40000800 	.word	0x40000800
 8009118:	40000c00 	.word	0x40000c00
 800911c:	40010400 	.word	0x40010400
 8009120:	40001800 	.word	0x40001800
 8009124:	40014000 	.word	0x40014000
 8009128:	00010007 	.word	0x00010007

0800912c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d020      	beq.n	8009190 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01b      	beq.n	8009190 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0202 	mvn.w	r2, #2
 8009160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8f3 	bl	8009362 <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8e5 	bl	800934e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f8f6 	bl	8009376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	d020      	beq.n	80091dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0204 	mvn.w	r2, #4
 80091ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8cd 	bl	8009362 <HAL_TIM_IC_CaptureCallback>
 80091c8:	e005      	b.n	80091d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f8bf 	bl	800934e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f8d0 	bl	8009376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d020      	beq.n	8009228 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01b      	beq.n	8009228 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0208 	mvn.w	r2, #8
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2204      	movs	r2, #4
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8a7 	bl	8009362 <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f899 	bl	800934e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8aa 	bl	8009376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b00      	cmp	r3, #0
 8009230:	d020      	beq.n	8009274 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f003 0310 	and.w	r3, r3, #16
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01b      	beq.n	8009274 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f06f 0210 	mvn.w	r2, #16
 8009244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2208      	movs	r2, #8
 800924a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f881 	bl	8009362 <HAL_TIM_IC_CaptureCallback>
 8009260:	e005      	b.n	800926e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f873 	bl	800934e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f884 	bl	8009376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f06f 0201 	mvn.w	r2, #1
 8009290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f851 	bl	800933a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f917 	bl	80094f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00c      	beq.n	80092ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f90f 	bl	8009508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00c      	beq.n	800930e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f83e 	bl	800938a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f06f 0220 	mvn.w	r2, #32
 800932a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f8d7 	bl	80094e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
	...

080093a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a43      	ldr	r2, [pc, #268]	@ (80094c0 <TIM_Base_SetConfig+0x120>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d013      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093be:	d00f      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a40      	ldr	r2, [pc, #256]	@ (80094c4 <TIM_Base_SetConfig+0x124>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00b      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a3f      	ldr	r2, [pc, #252]	@ (80094c8 <TIM_Base_SetConfig+0x128>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d007      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a3e      	ldr	r2, [pc, #248]	@ (80094cc <TIM_Base_SetConfig+0x12c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a3d      	ldr	r2, [pc, #244]	@ (80094d0 <TIM_Base_SetConfig+0x130>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d108      	bne.n	80093f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a32      	ldr	r2, [pc, #200]	@ (80094c0 <TIM_Base_SetConfig+0x120>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d01f      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009400:	d01b      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2f      	ldr	r2, [pc, #188]	@ (80094c4 <TIM_Base_SetConfig+0x124>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d017      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2e      	ldr	r2, [pc, #184]	@ (80094c8 <TIM_Base_SetConfig+0x128>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2d      	ldr	r2, [pc, #180]	@ (80094cc <TIM_Base_SetConfig+0x12c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00f      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a2c      	ldr	r2, [pc, #176]	@ (80094d0 <TIM_Base_SetConfig+0x130>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00b      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2b      	ldr	r2, [pc, #172]	@ (80094d4 <TIM_Base_SetConfig+0x134>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d007      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a2a      	ldr	r2, [pc, #168]	@ (80094d8 <TIM_Base_SetConfig+0x138>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d003      	beq.n	800943a <TIM_Base_SetConfig+0x9a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a29      	ldr	r2, [pc, #164]	@ (80094dc <TIM_Base_SetConfig+0x13c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d108      	bne.n	800944c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	4313      	orrs	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a14      	ldr	r2, [pc, #80]	@ (80094c0 <TIM_Base_SetConfig+0x120>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00f      	beq.n	8009492 <TIM_Base_SetConfig+0xf2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a16      	ldr	r2, [pc, #88]	@ (80094d0 <TIM_Base_SetConfig+0x130>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_Base_SetConfig+0xf2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a15      	ldr	r2, [pc, #84]	@ (80094d4 <TIM_Base_SetConfig+0x134>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <TIM_Base_SetConfig+0xf2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a14      	ldr	r2, [pc, #80]	@ (80094d8 <TIM_Base_SetConfig+0x138>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_Base_SetConfig+0xf2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a13      	ldr	r2, [pc, #76]	@ (80094dc <TIM_Base_SetConfig+0x13c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d103      	bne.n	800949a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f043 0204 	orr.w	r2, r3, #4
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	601a      	str	r2, [r3, #0]
}
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40010000 	.word	0x40010000
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40014400 	.word	0x40014400
 80094dc:	40014800 	.word	0x40014800

080094e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e042      	b.n	80095b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7f9 f9bb 	bl	80028bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2224      	movs	r2, #36	@ 0x24
 800954a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0201 	bic.w	r2, r2, #1
 800955c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 fa14 	bl	800a994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fca9 	bl	8009ec4 <UART_SetConfig>
 8009572:	4603      	mov	r3, r0
 8009574:	2b01      	cmp	r3, #1
 8009576:	d101      	bne.n	800957c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e01b      	b.n	80095b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800958a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800959a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 fa93 	bl	800aad8 <UART_CheckIdleState>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	@ 0x28
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	4613      	mov	r3, r2
 80095ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d17b      	bne.n	80096ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_UART_Transmit+0x26>
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e074      	b.n	80096d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2221      	movs	r2, #33	@ 0x21
 80095f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095f6:	f7f9 fa9f 	bl	8002b38 <HAL_GetTick>
 80095fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	88fa      	ldrh	r2, [r7, #6]
 8009600:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009614:	d108      	bne.n	8009628 <HAL_UART_Transmit+0x6c>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	e003      	b.n	8009630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009630:	e030      	b.n	8009694 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f001 faf5 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e03d      	b.n	80096d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	3302      	adds	r3, #2
 800966e:	61bb      	str	r3, [r7, #24]
 8009670:	e007      	b.n	8009682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	3301      	adds	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1c8      	bne.n	8009632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2200      	movs	r2, #0
 80096a8:	2140      	movs	r1, #64	@ 0x40
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f001 fabe 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e006      	b.n	80096d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e000      	b.n	80096d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80096ce:	2302      	movs	r3, #2
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3720      	adds	r7, #32
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b0ba      	sub	sp, #232	@ 0xe8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009702:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009706:	4013      	ands	r3, r2
 8009708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800970c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11b      	bne.n	800974c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d015      	beq.n	800974c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800972c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8393 	beq.w	8009e68 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
      }
      return;
 800974a:	e38d      	b.n	8009e68 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800974c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8123 	beq.w	800999c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009756:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800975a:	4b8d      	ldr	r3, [pc, #564]	@ (8009990 <HAL_UART_IRQHandler+0x2b8>)
 800975c:	4013      	ands	r3, r2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009766:	4b8b      	ldr	r3, [pc, #556]	@ (8009994 <HAL_UART_IRQHandler+0x2bc>)
 8009768:	4013      	ands	r3, r2
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 8116 	beq.w	800999c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d011      	beq.n	80097a0 <HAL_UART_IRQHandler+0xc8>
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2201      	movs	r2, #1
 800978e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009796:	f043 0201 	orr.w	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d011      	beq.n	80097d0 <HAL_UART_IRQHandler+0xf8>
 80097ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00b      	beq.n	80097d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2202      	movs	r2, #2
 80097be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c6:	f043 0204 	orr.w	r2, r3, #4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d011      	beq.n	8009800 <HAL_UART_IRQHandler+0x128>
 80097dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2204      	movs	r2, #4
 80097ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f6:	f043 0202 	orr.w	r2, r3, #2
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	2b00      	cmp	r3, #0
 800980a:	d017      	beq.n	800983c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800981c:	4b5c      	ldr	r3, [pc, #368]	@ (8009990 <HAL_UART_IRQHandler+0x2b8>)
 800981e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2208      	movs	r2, #8
 800982a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009832:	f043 0208 	orr.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800983c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009844:	2b00      	cmp	r3, #0
 8009846:	d012      	beq.n	800986e <HAL_UART_IRQHandler+0x196>
 8009848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800984c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00c      	beq.n	800986e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800985c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 82f9 	beq.w	8009e6c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800987a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d013      	beq.n	80098ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c2:	2b40      	cmp	r3, #64	@ 0x40
 80098c4:	d005      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d054      	beq.n	800997c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 fa18 	bl	800ad08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e2:	2b40      	cmp	r3, #64	@ 0x40
 80098e4:	d146      	bne.n	8009974 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3308      	adds	r3, #8
 80098ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3308      	adds	r3, #8
 800990e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800991e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800992a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1d9      	bne.n	80098e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009938:	2b00      	cmp	r3, #0
 800993a:	d017      	beq.n	800996c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009942:	4a15      	ldr	r2, [pc, #84]	@ (8009998 <HAL_UART_IRQHandler+0x2c0>)
 8009944:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800994c:	4618      	mov	r0, r3
 800994e:	f7fa f889 	bl	8003a64 <HAL_DMA_Abort_IT>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d019      	beq.n	800998c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800995e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009966:	4610      	mov	r0, r2
 8009968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996a:	e00f      	b.n	800998c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa93 	bl	8009e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009972:	e00b      	b.n	800998c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fa8f 	bl	8009e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997a:	e007      	b.n	800998c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fa8b 	bl	8009e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800998a:	e26f      	b.n	8009e6c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998c:	bf00      	nop
    return;
 800998e:	e26d      	b.n	8009e6c <HAL_UART_IRQHandler+0x794>
 8009990:	10000001 	.word	0x10000001
 8009994:	04000120 	.word	0x04000120
 8009998:	0800add5 	.word	0x0800add5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	f040 8203 	bne.w	8009dac <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099aa:	f003 0310 	and.w	r3, r3, #16
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 81fc 	beq.w	8009dac <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b8:	f003 0310 	and.w	r3, r3, #16
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 81f5 	beq.w	8009dac <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2210      	movs	r2, #16
 80099c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d4:	2b40      	cmp	r3, #64	@ 0x40
 80099d6:	f040 816d 	bne.w	8009cb4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4aa4      	ldr	r2, [pc, #656]	@ (8009c74 <HAL_UART_IRQHandler+0x59c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d068      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4aa1      	ldr	r2, [pc, #644]	@ (8009c78 <HAL_UART_IRQHandler+0x5a0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d061      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a9f      	ldr	r2, [pc, #636]	@ (8009c7c <HAL_UART_IRQHandler+0x5a4>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d05a      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a9c      	ldr	r2, [pc, #624]	@ (8009c80 <HAL_UART_IRQHandler+0x5a8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d053      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a9a      	ldr	r2, [pc, #616]	@ (8009c84 <HAL_UART_IRQHandler+0x5ac>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d04c      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a97      	ldr	r2, [pc, #604]	@ (8009c88 <HAL_UART_IRQHandler+0x5b0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d045      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a95      	ldr	r2, [pc, #596]	@ (8009c8c <HAL_UART_IRQHandler+0x5b4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d03e      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a92      	ldr	r2, [pc, #584]	@ (8009c90 <HAL_UART_IRQHandler+0x5b8>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d037      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a90      	ldr	r2, [pc, #576]	@ (8009c94 <HAL_UART_IRQHandler+0x5bc>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d030      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a8d      	ldr	r2, [pc, #564]	@ (8009c98 <HAL_UART_IRQHandler+0x5c0>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d029      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a8b      	ldr	r2, [pc, #556]	@ (8009c9c <HAL_UART_IRQHandler+0x5c4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d022      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a88      	ldr	r2, [pc, #544]	@ (8009ca0 <HAL_UART_IRQHandler+0x5c8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d01b      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a86      	ldr	r2, [pc, #536]	@ (8009ca4 <HAL_UART_IRQHandler+0x5cc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d014      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a83      	ldr	r2, [pc, #524]	@ (8009ca8 <HAL_UART_IRQHandler+0x5d0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d00d      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a81      	ldr	r2, [pc, #516]	@ (8009cac <HAL_UART_IRQHandler+0x5d4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d006      	beq.n	8009aba <HAL_UART_IRQHandler+0x3e2>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a7e      	ldr	r2, [pc, #504]	@ (8009cb0 <HAL_UART_IRQHandler+0x5d8>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d106      	bne.n	8009ac8 <HAL_UART_IRQHandler+0x3f0>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	e005      	b.n	8009ad4 <HAL_UART_IRQHandler+0x3fc>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80ad 	beq.w	8009c3c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aec:	429a      	cmp	r2, r3
 8009aee:	f080 80a5 	bcs.w	8009c3c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009af8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b08:	f000 8087 	beq.w	8009c1a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1da      	bne.n	8009b0c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3308      	adds	r3, #8
 8009b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e1      	bne.n	8009b56 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3308      	adds	r3, #8
 8009b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e3      	bne.n	8009b92 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009be8:	f023 0310 	bic.w	r3, r3, #16
 8009bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e4      	bne.n	8009bd8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7f9 fc07 	bl	8003428 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f939 	bl	8009eac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009c3a:	e119      	b.n	8009e70 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c46:	429a      	cmp	r2, r3
 8009c48:	f040 8112 	bne.w	8009e70 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c58:	f040 810a 	bne.w	8009e70 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f91e 	bl	8009eac <HAL_UARTEx_RxEventCallback>
      return;
 8009c70:	e0fe      	b.n	8009e70 <HAL_UART_IRQHandler+0x798>
 8009c72:	bf00      	nop
 8009c74:	40020010 	.word	0x40020010
 8009c78:	40020028 	.word	0x40020028
 8009c7c:	40020040 	.word	0x40020040
 8009c80:	40020058 	.word	0x40020058
 8009c84:	40020070 	.word	0x40020070
 8009c88:	40020088 	.word	0x40020088
 8009c8c:	400200a0 	.word	0x400200a0
 8009c90:	400200b8 	.word	0x400200b8
 8009c94:	40020410 	.word	0x40020410
 8009c98:	40020428 	.word	0x40020428
 8009c9c:	40020440 	.word	0x40020440
 8009ca0:	40020458 	.word	0x40020458
 8009ca4:	40020470 	.word	0x40020470
 8009ca8:	40020488 	.word	0x40020488
 8009cac:	400204a0 	.word	0x400204a0
 8009cb0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 80cf 	beq.w	8009e74 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80ca 	beq.w	8009e74 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e4      	bne.n	8009ce0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	623b      	str	r3, [r7, #32]
   return(result);
 8009d26:	6a3a      	ldr	r2, [r7, #32]
 8009d28:	4b55      	ldr	r3, [pc, #340]	@ (8009e80 <HAL_UART_IRQHandler+0x7a8>)
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3308      	adds	r3, #8
 8009d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e3      	bne.n	8009d16 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0310 	bic.w	r3, r3, #16
 8009d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d84:	61fb      	str	r3, [r7, #28]
 8009d86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	69b9      	ldr	r1, [r7, #24]
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	617b      	str	r3, [r7, #20]
   return(result);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e4      	bne.n	8009d62 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f881 	bl	8009eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009daa:	e063      	b.n	8009e74 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00e      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x6fe>
 8009db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d008      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 f83d 	bl	800ae4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dd4:	e051      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d014      	beq.n	8009e0c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d105      	bne.n	8009dfa <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d03a      	beq.n	8009e78 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	4798      	blx	r3
    }
    return;
 8009e0a:	e035      	b.n	8009e78 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <HAL_UART_IRQHandler+0x754>
 8009e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 ffe7 	bl	800adf8 <UART_EndTransmit_IT>
    return;
 8009e2a:	e026      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d009      	beq.n	8009e4c <HAL_UART_IRQHandler+0x774>
 8009e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 f816 	bl	800ae76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e4a:	e016      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d010      	beq.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
 8009e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da0c      	bge.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fffe 	bl	800ae62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e66:	e008      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e68:	bf00      	nop
 8009e6a:	e006      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e6c:	bf00      	nop
 8009e6e:	e004      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e70:	bf00      	nop
 8009e72:	e002      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e74:	bf00      	nop
 8009e76:	e000      	b.n	8009e7a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e78:	bf00      	nop
  }
}
 8009e7a:	37e8      	adds	r7, #232	@ 0xe8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	effffffe 	.word	0xeffffffe

08009e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ec8:	b092      	sub	sp, #72	@ 0x48
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4bbe      	ldr	r3, [pc, #760]	@ (800a1ec <UART_SetConfig+0x328>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4ab3      	ldr	r2, [pc, #716]	@ (800a1f0 <UART_SetConfig+0x32c>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d004      	beq.n	8009f30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	4baf      	ldr	r3, [pc, #700]	@ (800a1f4 <UART_SetConfig+0x330>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f40:	430b      	orrs	r3, r1
 8009f42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4a:	f023 010f 	bic.w	r1, r3, #15
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4aa6      	ldr	r2, [pc, #664]	@ (800a1f8 <UART_SetConfig+0x334>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d177      	bne.n	800a054 <UART_SetConfig+0x190>
 8009f64:	4ba5      	ldr	r3, [pc, #660]	@ (800a1fc <UART_SetConfig+0x338>)
 8009f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f6c:	2b28      	cmp	r3, #40	@ 0x28
 8009f6e:	d86d      	bhi.n	800a04c <UART_SetConfig+0x188>
 8009f70:	a201      	add	r2, pc, #4	@ (adr r2, 8009f78 <UART_SetConfig+0xb4>)
 8009f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f76:	bf00      	nop
 8009f78:	0800a01d 	.word	0x0800a01d
 8009f7c:	0800a04d 	.word	0x0800a04d
 8009f80:	0800a04d 	.word	0x0800a04d
 8009f84:	0800a04d 	.word	0x0800a04d
 8009f88:	0800a04d 	.word	0x0800a04d
 8009f8c:	0800a04d 	.word	0x0800a04d
 8009f90:	0800a04d 	.word	0x0800a04d
 8009f94:	0800a04d 	.word	0x0800a04d
 8009f98:	0800a025 	.word	0x0800a025
 8009f9c:	0800a04d 	.word	0x0800a04d
 8009fa0:	0800a04d 	.word	0x0800a04d
 8009fa4:	0800a04d 	.word	0x0800a04d
 8009fa8:	0800a04d 	.word	0x0800a04d
 8009fac:	0800a04d 	.word	0x0800a04d
 8009fb0:	0800a04d 	.word	0x0800a04d
 8009fb4:	0800a04d 	.word	0x0800a04d
 8009fb8:	0800a02d 	.word	0x0800a02d
 8009fbc:	0800a04d 	.word	0x0800a04d
 8009fc0:	0800a04d 	.word	0x0800a04d
 8009fc4:	0800a04d 	.word	0x0800a04d
 8009fc8:	0800a04d 	.word	0x0800a04d
 8009fcc:	0800a04d 	.word	0x0800a04d
 8009fd0:	0800a04d 	.word	0x0800a04d
 8009fd4:	0800a04d 	.word	0x0800a04d
 8009fd8:	0800a035 	.word	0x0800a035
 8009fdc:	0800a04d 	.word	0x0800a04d
 8009fe0:	0800a04d 	.word	0x0800a04d
 8009fe4:	0800a04d 	.word	0x0800a04d
 8009fe8:	0800a04d 	.word	0x0800a04d
 8009fec:	0800a04d 	.word	0x0800a04d
 8009ff0:	0800a04d 	.word	0x0800a04d
 8009ff4:	0800a04d 	.word	0x0800a04d
 8009ff8:	0800a03d 	.word	0x0800a03d
 8009ffc:	0800a04d 	.word	0x0800a04d
 800a000:	0800a04d 	.word	0x0800a04d
 800a004:	0800a04d 	.word	0x0800a04d
 800a008:	0800a04d 	.word	0x0800a04d
 800a00c:	0800a04d 	.word	0x0800a04d
 800a010:	0800a04d 	.word	0x0800a04d
 800a014:	0800a04d 	.word	0x0800a04d
 800a018:	0800a045 	.word	0x0800a045
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a022:	e222      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a024:	2304      	movs	r3, #4
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02a:	e21e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a02c:	2308      	movs	r3, #8
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e21a      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a034:	2310      	movs	r3, #16
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e216      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a03c:	2320      	movs	r3, #32
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e212      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a044:	2340      	movs	r3, #64	@ 0x40
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e20e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a04c:	2380      	movs	r3, #128	@ 0x80
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e20a      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a69      	ldr	r2, [pc, #420]	@ (800a200 <UART_SetConfig+0x33c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d130      	bne.n	800a0c0 <UART_SetConfig+0x1fc>
 800a05e:	4b67      	ldr	r3, [pc, #412]	@ (800a1fc <UART_SetConfig+0x338>)
 800a060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	2b05      	cmp	r3, #5
 800a068:	d826      	bhi.n	800a0b8 <UART_SetConfig+0x1f4>
 800a06a:	a201      	add	r2, pc, #4	@ (adr r2, 800a070 <UART_SetConfig+0x1ac>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a089 	.word	0x0800a089
 800a074:	0800a091 	.word	0x0800a091
 800a078:	0800a099 	.word	0x0800a099
 800a07c:	0800a0a1 	.word	0x0800a0a1
 800a080:	0800a0a9 	.word	0x0800a0a9
 800a084:	0800a0b1 	.word	0x0800a0b1
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08e:	e1ec      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a090:	2304      	movs	r3, #4
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a096:	e1e8      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a098:	2308      	movs	r3, #8
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e1e4      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e1e0      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a0a8:	2320      	movs	r3, #32
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e1dc      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a0b0:	2340      	movs	r3, #64	@ 0x40
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e1d8      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a0b8:	2380      	movs	r3, #128	@ 0x80
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e1d4      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a4f      	ldr	r2, [pc, #316]	@ (800a204 <UART_SetConfig+0x340>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d130      	bne.n	800a12c <UART_SetConfig+0x268>
 800a0ca:	4b4c      	ldr	r3, [pc, #304]	@ (800a1fc <UART_SetConfig+0x338>)
 800a0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d826      	bhi.n	800a124 <UART_SetConfig+0x260>
 800a0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0dc <UART_SetConfig+0x218>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a0f5 	.word	0x0800a0f5
 800a0e0:	0800a0fd 	.word	0x0800a0fd
 800a0e4:	0800a105 	.word	0x0800a105
 800a0e8:	0800a10d 	.word	0x0800a10d
 800a0ec:	0800a115 	.word	0x0800a115
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e1b6      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e1b2      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a104:	2308      	movs	r3, #8
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e1ae      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a10c:	2310      	movs	r3, #16
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e1aa      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a114:	2320      	movs	r3, #32
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e1a6      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a11c:	2340      	movs	r3, #64	@ 0x40
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e1a2      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a124:	2380      	movs	r3, #128	@ 0x80
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e19e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a35      	ldr	r2, [pc, #212]	@ (800a208 <UART_SetConfig+0x344>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d130      	bne.n	800a198 <UART_SetConfig+0x2d4>
 800a136:	4b31      	ldr	r3, [pc, #196]	@ (800a1fc <UART_SetConfig+0x338>)
 800a138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d826      	bhi.n	800a190 <UART_SetConfig+0x2cc>
 800a142:	a201      	add	r2, pc, #4	@ (adr r2, 800a148 <UART_SetConfig+0x284>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a161 	.word	0x0800a161
 800a14c:	0800a169 	.word	0x0800a169
 800a150:	0800a171 	.word	0x0800a171
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a181 	.word	0x0800a181
 800a15c:	0800a189 	.word	0x0800a189
 800a160:	2300      	movs	r3, #0
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e180      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a168:	2304      	movs	r3, #4
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e17c      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a170:	2308      	movs	r3, #8
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e178      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a178:	2310      	movs	r3, #16
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e174      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a180:	2320      	movs	r3, #32
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e170      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a188:	2340      	movs	r3, #64	@ 0x40
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e16c      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a190:	2380      	movs	r3, #128	@ 0x80
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e168      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a1b      	ldr	r2, [pc, #108]	@ (800a20c <UART_SetConfig+0x348>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d142      	bne.n	800a228 <UART_SetConfig+0x364>
 800a1a2:	4b16      	ldr	r3, [pc, #88]	@ (800a1fc <UART_SetConfig+0x338>)
 800a1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	d838      	bhi.n	800a220 <UART_SetConfig+0x35c>
 800a1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <UART_SetConfig+0x2f0>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1cd 	.word	0x0800a1cd
 800a1b8:	0800a1d5 	.word	0x0800a1d5
 800a1bc:	0800a1dd 	.word	0x0800a1dd
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a211 	.word	0x0800a211
 800a1c8:	0800a219 	.word	0x0800a219
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e14a      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e146      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a1dc:	2308      	movs	r3, #8
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e142      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e13e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a1ec:	cfff69f3 	.word	0xcfff69f3
 800a1f0:	58000c00 	.word	0x58000c00
 800a1f4:	11fff4ff 	.word	0x11fff4ff
 800a1f8:	40011000 	.word	0x40011000
 800a1fc:	58024400 	.word	0x58024400
 800a200:	40004400 	.word	0x40004400
 800a204:	40004800 	.word	0x40004800
 800a208:	40004c00 	.word	0x40004c00
 800a20c:	40005000 	.word	0x40005000
 800a210:	2320      	movs	r3, #32
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e128      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a218:	2340      	movs	r3, #64	@ 0x40
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21e:	e124      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a220:	2380      	movs	r3, #128	@ 0x80
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a226:	e120      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4acb      	ldr	r2, [pc, #812]	@ (800a55c <UART_SetConfig+0x698>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d176      	bne.n	800a320 <UART_SetConfig+0x45c>
 800a232:	4bcb      	ldr	r3, [pc, #812]	@ (800a560 <UART_SetConfig+0x69c>)
 800a234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a23a:	2b28      	cmp	r3, #40	@ 0x28
 800a23c:	d86c      	bhi.n	800a318 <UART_SetConfig+0x454>
 800a23e:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <UART_SetConfig+0x380>)
 800a240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a244:	0800a2e9 	.word	0x0800a2e9
 800a248:	0800a319 	.word	0x0800a319
 800a24c:	0800a319 	.word	0x0800a319
 800a250:	0800a319 	.word	0x0800a319
 800a254:	0800a319 	.word	0x0800a319
 800a258:	0800a319 	.word	0x0800a319
 800a25c:	0800a319 	.word	0x0800a319
 800a260:	0800a319 	.word	0x0800a319
 800a264:	0800a2f1 	.word	0x0800a2f1
 800a268:	0800a319 	.word	0x0800a319
 800a26c:	0800a319 	.word	0x0800a319
 800a270:	0800a319 	.word	0x0800a319
 800a274:	0800a319 	.word	0x0800a319
 800a278:	0800a319 	.word	0x0800a319
 800a27c:	0800a319 	.word	0x0800a319
 800a280:	0800a319 	.word	0x0800a319
 800a284:	0800a2f9 	.word	0x0800a2f9
 800a288:	0800a319 	.word	0x0800a319
 800a28c:	0800a319 	.word	0x0800a319
 800a290:	0800a319 	.word	0x0800a319
 800a294:	0800a319 	.word	0x0800a319
 800a298:	0800a319 	.word	0x0800a319
 800a29c:	0800a319 	.word	0x0800a319
 800a2a0:	0800a319 	.word	0x0800a319
 800a2a4:	0800a301 	.word	0x0800a301
 800a2a8:	0800a319 	.word	0x0800a319
 800a2ac:	0800a319 	.word	0x0800a319
 800a2b0:	0800a319 	.word	0x0800a319
 800a2b4:	0800a319 	.word	0x0800a319
 800a2b8:	0800a319 	.word	0x0800a319
 800a2bc:	0800a319 	.word	0x0800a319
 800a2c0:	0800a319 	.word	0x0800a319
 800a2c4:	0800a309 	.word	0x0800a309
 800a2c8:	0800a319 	.word	0x0800a319
 800a2cc:	0800a319 	.word	0x0800a319
 800a2d0:	0800a319 	.word	0x0800a319
 800a2d4:	0800a319 	.word	0x0800a319
 800a2d8:	0800a319 	.word	0x0800a319
 800a2dc:	0800a319 	.word	0x0800a319
 800a2e0:	0800a319 	.word	0x0800a319
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e0bc      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f6:	e0b8      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a2f8:	2308      	movs	r3, #8
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fe:	e0b4      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a300:	2310      	movs	r3, #16
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a306:	e0b0      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a308:	2320      	movs	r3, #32
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e0ac      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a310:	2340      	movs	r3, #64	@ 0x40
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e0a8      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a318:	2380      	movs	r3, #128	@ 0x80
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e0a4      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a8f      	ldr	r2, [pc, #572]	@ (800a564 <UART_SetConfig+0x6a0>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d130      	bne.n	800a38c <UART_SetConfig+0x4c8>
 800a32a:	4b8d      	ldr	r3, [pc, #564]	@ (800a560 <UART_SetConfig+0x69c>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	2b05      	cmp	r3, #5
 800a334:	d826      	bhi.n	800a384 <UART_SetConfig+0x4c0>
 800a336:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <UART_SetConfig+0x478>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a355 	.word	0x0800a355
 800a340:	0800a35d 	.word	0x0800a35d
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a36d 	.word	0x0800a36d
 800a34c:	0800a375 	.word	0x0800a375
 800a350:	0800a37d 	.word	0x0800a37d
 800a354:	2300      	movs	r3, #0
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e086      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a35c:	2304      	movs	r3, #4
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e082      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a364:	2308      	movs	r3, #8
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e07e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a36c:	2310      	movs	r3, #16
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e07a      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a374:	2320      	movs	r3, #32
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e076      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a37c:	2340      	movs	r3, #64	@ 0x40
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e072      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a384:	2380      	movs	r3, #128	@ 0x80
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e06e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a75      	ldr	r2, [pc, #468]	@ (800a568 <UART_SetConfig+0x6a4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d130      	bne.n	800a3f8 <UART_SetConfig+0x534>
 800a396:	4b72      	ldr	r3, [pc, #456]	@ (800a560 <UART_SetConfig+0x69c>)
 800a398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b05      	cmp	r3, #5
 800a3a0:	d826      	bhi.n	800a3f0 <UART_SetConfig+0x52c>
 800a3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a8 <UART_SetConfig+0x4e4>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3c1 	.word	0x0800a3c1
 800a3ac:	0800a3c9 	.word	0x0800a3c9
 800a3b0:	0800a3d1 	.word	0x0800a3d1
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e050      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e04c      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e048      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e044      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e040      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3e8:	2340      	movs	r3, #64	@ 0x40
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e03c      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3f0:	2380      	movs	r3, #128	@ 0x80
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e038      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a5b      	ldr	r2, [pc, #364]	@ (800a56c <UART_SetConfig+0x6a8>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d130      	bne.n	800a464 <UART_SetConfig+0x5a0>
 800a402:	4b57      	ldr	r3, [pc, #348]	@ (800a560 <UART_SetConfig+0x69c>)
 800a404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	d826      	bhi.n	800a45c <UART_SetConfig+0x598>
 800a40e:	a201      	add	r2, pc, #4	@ (adr r2, 800a414 <UART_SetConfig+0x550>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a42d 	.word	0x0800a42d
 800a418:	0800a435 	.word	0x0800a435
 800a41c:	0800a43d 	.word	0x0800a43d
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a44d 	.word	0x0800a44d
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	2302      	movs	r3, #2
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e01a      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a434:	2304      	movs	r3, #4
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e016      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a43c:	2308      	movs	r3, #8
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e012      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a444:	2310      	movs	r3, #16
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e00e      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a44c:	2320      	movs	r3, #32
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e00a      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a454:	2340      	movs	r3, #64	@ 0x40
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e006      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a45c:	2380      	movs	r3, #128	@ 0x80
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e002      	b.n	800a46a <UART_SetConfig+0x5a6>
 800a464:	2380      	movs	r3, #128	@ 0x80
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a3f      	ldr	r2, [pc, #252]	@ (800a56c <UART_SetConfig+0x6a8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	f040 80f8 	bne.w	800a666 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a476:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	dc46      	bgt.n	800a50c <UART_SetConfig+0x648>
 800a47e:	2b02      	cmp	r3, #2
 800a480:	f2c0 8082 	blt.w	800a588 <UART_SetConfig+0x6c4>
 800a484:	3b02      	subs	r3, #2
 800a486:	2b1e      	cmp	r3, #30
 800a488:	d87e      	bhi.n	800a588 <UART_SetConfig+0x6c4>
 800a48a:	a201      	add	r2, pc, #4	@ (adr r2, 800a490 <UART_SetConfig+0x5cc>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a513 	.word	0x0800a513
 800a494:	0800a589 	.word	0x0800a589
 800a498:	0800a51b 	.word	0x0800a51b
 800a49c:	0800a589 	.word	0x0800a589
 800a4a0:	0800a589 	.word	0x0800a589
 800a4a4:	0800a589 	.word	0x0800a589
 800a4a8:	0800a52b 	.word	0x0800a52b
 800a4ac:	0800a589 	.word	0x0800a589
 800a4b0:	0800a589 	.word	0x0800a589
 800a4b4:	0800a589 	.word	0x0800a589
 800a4b8:	0800a589 	.word	0x0800a589
 800a4bc:	0800a589 	.word	0x0800a589
 800a4c0:	0800a589 	.word	0x0800a589
 800a4c4:	0800a589 	.word	0x0800a589
 800a4c8:	0800a53b 	.word	0x0800a53b
 800a4cc:	0800a589 	.word	0x0800a589
 800a4d0:	0800a589 	.word	0x0800a589
 800a4d4:	0800a589 	.word	0x0800a589
 800a4d8:	0800a589 	.word	0x0800a589
 800a4dc:	0800a589 	.word	0x0800a589
 800a4e0:	0800a589 	.word	0x0800a589
 800a4e4:	0800a589 	.word	0x0800a589
 800a4e8:	0800a589 	.word	0x0800a589
 800a4ec:	0800a589 	.word	0x0800a589
 800a4f0:	0800a589 	.word	0x0800a589
 800a4f4:	0800a589 	.word	0x0800a589
 800a4f8:	0800a589 	.word	0x0800a589
 800a4fc:	0800a589 	.word	0x0800a589
 800a500:	0800a589 	.word	0x0800a589
 800a504:	0800a589 	.word	0x0800a589
 800a508:	0800a57b 	.word	0x0800a57b
 800a50c:	2b40      	cmp	r3, #64	@ 0x40
 800a50e:	d037      	beq.n	800a580 <UART_SetConfig+0x6bc>
 800a510:	e03a      	b.n	800a588 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a512:	f7fd faa3 	bl	8007a5c <HAL_RCCEx_GetD3PCLK1Freq>
 800a516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a518:	e03c      	b.n	800a594 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fd fab2 	bl	8007a88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e034      	b.n	800a594 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a52a:	f107 0318 	add.w	r3, r7, #24
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fd fbfe 	bl	8007d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e02c      	b.n	800a594 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a53a:	4b09      	ldr	r3, [pc, #36]	@ (800a560 <UART_SetConfig+0x69c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d016      	beq.n	800a574 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a546:	4b06      	ldr	r3, [pc, #24]	@ (800a560 <UART_SetConfig+0x69c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	08db      	lsrs	r3, r3, #3
 800a54c:	f003 0303 	and.w	r3, r3, #3
 800a550:	4a07      	ldr	r2, [pc, #28]	@ (800a570 <UART_SetConfig+0x6ac>)
 800a552:	fa22 f303 	lsr.w	r3, r2, r3
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a558:	e01c      	b.n	800a594 <UART_SetConfig+0x6d0>
 800a55a:	bf00      	nop
 800a55c:	40011400 	.word	0x40011400
 800a560:	58024400 	.word	0x58024400
 800a564:	40007800 	.word	0x40007800
 800a568:	40007c00 	.word	0x40007c00
 800a56c:	58000c00 	.word	0x58000c00
 800a570:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a574:	4b9d      	ldr	r3, [pc, #628]	@ (800a7ec <UART_SetConfig+0x928>)
 800a576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a578:	e00c      	b.n	800a594 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a57a:	4b9d      	ldr	r3, [pc, #628]	@ (800a7f0 <UART_SetConfig+0x92c>)
 800a57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57e:	e009      	b.n	800a594 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a586:	e005      	b.n	800a594 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a592:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 81de 	beq.w	800a958 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	4a94      	ldr	r2, [pc, #592]	@ (800a7f4 <UART_SetConfig+0x930>)
 800a5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d305      	bcc.n	800a5cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d903      	bls.n	800a5d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5d2:	e1c1      	b.n	800a958 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	60bb      	str	r3, [r7, #8]
 800a5da:	60fa      	str	r2, [r7, #12]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	4a84      	ldr	r2, [pc, #528]	@ (800a7f4 <UART_SetConfig+0x930>)
 800a5e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5f6:	f7f6 f887 	bl	8000708 <__aeabi_uldivmod>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4610      	mov	r0, r2
 800a600:	4619      	mov	r1, r3
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	f04f 0300 	mov.w	r3, #0
 800a60a:	020b      	lsls	r3, r1, #8
 800a60c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a610:	0202      	lsls	r2, r0, #8
 800a612:	6979      	ldr	r1, [r7, #20]
 800a614:	6849      	ldr	r1, [r1, #4]
 800a616:	0849      	lsrs	r1, r1, #1
 800a618:	2000      	movs	r0, #0
 800a61a:	460c      	mov	r4, r1
 800a61c:	4605      	mov	r5, r0
 800a61e:	eb12 0804 	adds.w	r8, r2, r4
 800a622:	eb43 0905 	adc.w	r9, r3, r5
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	469a      	mov	sl, r3
 800a62e:	4693      	mov	fp, r2
 800a630:	4652      	mov	r2, sl
 800a632:	465b      	mov	r3, fp
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 f866 	bl	8000708 <__aeabi_uldivmod>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4613      	mov	r3, r2
 800a642:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a64a:	d308      	bcc.n	800a65e <UART_SetConfig+0x79a>
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a652:	d204      	bcs.n	800a65e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a65a:	60da      	str	r2, [r3, #12]
 800a65c:	e17c      	b.n	800a958 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a664:	e178      	b.n	800a958 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a66e:	f040 80c5 	bne.w	800a7fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a672:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a676:	2b20      	cmp	r3, #32
 800a678:	dc48      	bgt.n	800a70c <UART_SetConfig+0x848>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	db7b      	blt.n	800a776 <UART_SetConfig+0x8b2>
 800a67e:	2b20      	cmp	r3, #32
 800a680:	d879      	bhi.n	800a776 <UART_SetConfig+0x8b2>
 800a682:	a201      	add	r2, pc, #4	@ (adr r2, 800a688 <UART_SetConfig+0x7c4>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a713 	.word	0x0800a713
 800a68c:	0800a71b 	.word	0x0800a71b
 800a690:	0800a777 	.word	0x0800a777
 800a694:	0800a777 	.word	0x0800a777
 800a698:	0800a723 	.word	0x0800a723
 800a69c:	0800a777 	.word	0x0800a777
 800a6a0:	0800a777 	.word	0x0800a777
 800a6a4:	0800a777 	.word	0x0800a777
 800a6a8:	0800a733 	.word	0x0800a733
 800a6ac:	0800a777 	.word	0x0800a777
 800a6b0:	0800a777 	.word	0x0800a777
 800a6b4:	0800a777 	.word	0x0800a777
 800a6b8:	0800a777 	.word	0x0800a777
 800a6bc:	0800a777 	.word	0x0800a777
 800a6c0:	0800a777 	.word	0x0800a777
 800a6c4:	0800a777 	.word	0x0800a777
 800a6c8:	0800a743 	.word	0x0800a743
 800a6cc:	0800a777 	.word	0x0800a777
 800a6d0:	0800a777 	.word	0x0800a777
 800a6d4:	0800a777 	.word	0x0800a777
 800a6d8:	0800a777 	.word	0x0800a777
 800a6dc:	0800a777 	.word	0x0800a777
 800a6e0:	0800a777 	.word	0x0800a777
 800a6e4:	0800a777 	.word	0x0800a777
 800a6e8:	0800a777 	.word	0x0800a777
 800a6ec:	0800a777 	.word	0x0800a777
 800a6f0:	0800a777 	.word	0x0800a777
 800a6f4:	0800a777 	.word	0x0800a777
 800a6f8:	0800a777 	.word	0x0800a777
 800a6fc:	0800a777 	.word	0x0800a777
 800a700:	0800a777 	.word	0x0800a777
 800a704:	0800a777 	.word	0x0800a777
 800a708:	0800a769 	.word	0x0800a769
 800a70c:	2b40      	cmp	r3, #64	@ 0x40
 800a70e:	d02e      	beq.n	800a76e <UART_SetConfig+0x8aa>
 800a710:	e031      	b.n	800a776 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a712:	f7fb ff2b 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800a716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a718:	e033      	b.n	800a782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a71a:	f7fb ff3d 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 800a71e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a720:	e02f      	b.n	800a782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd f9ae 	bl	8007a88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a730:	e027      	b.n	800a782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a732:	f107 0318 	add.w	r3, r7, #24
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd fafa 	bl	8007d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	e01f      	b.n	800a782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a742:	4b2d      	ldr	r3, [pc, #180]	@ (800a7f8 <UART_SetConfig+0x934>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d009      	beq.n	800a762 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a74e:	4b2a      	ldr	r3, [pc, #168]	@ (800a7f8 <UART_SetConfig+0x934>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	4a24      	ldr	r2, [pc, #144]	@ (800a7ec <UART_SetConfig+0x928>)
 800a75a:	fa22 f303 	lsr.w	r3, r2, r3
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a760:	e00f      	b.n	800a782 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a762:	4b22      	ldr	r3, [pc, #136]	@ (800a7ec <UART_SetConfig+0x928>)
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a766:	e00c      	b.n	800a782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a768:	4b21      	ldr	r3, [pc, #132]	@ (800a7f0 <UART_SetConfig+0x92c>)
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76c:	e009      	b.n	800a782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a76e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a774:	e005      	b.n	800a782 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 80e7 	beq.w	800a958 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	4a19      	ldr	r2, [pc, #100]	@ (800a7f4 <UART_SetConfig+0x930>)
 800a790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a794:	461a      	mov	r2, r3
 800a796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a798:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79c:	005a      	lsls	r2, r3, #1
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	441a      	add	r2, r3
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	2b0f      	cmp	r3, #15
 800a7b4:	d916      	bls.n	800a7e4 <UART_SetConfig+0x920>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7bc:	d212      	bcs.n	800a7e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f023 030f 	bic.w	r3, r3, #15
 800a7c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	085b      	lsrs	r3, r3, #1
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a7e0:	60da      	str	r2, [r3, #12]
 800a7e2:	e0b9      	b.n	800a958 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7ea:	e0b5      	b.n	800a958 <UART_SetConfig+0xa94>
 800a7ec:	03d09000 	.word	0x03d09000
 800a7f0:	003d0900 	.word	0x003d0900
 800a7f4:	08013018 	.word	0x08013018
 800a7f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a800:	2b20      	cmp	r3, #32
 800a802:	dc49      	bgt.n	800a898 <UART_SetConfig+0x9d4>
 800a804:	2b00      	cmp	r3, #0
 800a806:	db7c      	blt.n	800a902 <UART_SetConfig+0xa3e>
 800a808:	2b20      	cmp	r3, #32
 800a80a:	d87a      	bhi.n	800a902 <UART_SetConfig+0xa3e>
 800a80c:	a201      	add	r2, pc, #4	@ (adr r2, 800a814 <UART_SetConfig+0x950>)
 800a80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a812:	bf00      	nop
 800a814:	0800a89f 	.word	0x0800a89f
 800a818:	0800a8a7 	.word	0x0800a8a7
 800a81c:	0800a903 	.word	0x0800a903
 800a820:	0800a903 	.word	0x0800a903
 800a824:	0800a8af 	.word	0x0800a8af
 800a828:	0800a903 	.word	0x0800a903
 800a82c:	0800a903 	.word	0x0800a903
 800a830:	0800a903 	.word	0x0800a903
 800a834:	0800a8bf 	.word	0x0800a8bf
 800a838:	0800a903 	.word	0x0800a903
 800a83c:	0800a903 	.word	0x0800a903
 800a840:	0800a903 	.word	0x0800a903
 800a844:	0800a903 	.word	0x0800a903
 800a848:	0800a903 	.word	0x0800a903
 800a84c:	0800a903 	.word	0x0800a903
 800a850:	0800a903 	.word	0x0800a903
 800a854:	0800a8cf 	.word	0x0800a8cf
 800a858:	0800a903 	.word	0x0800a903
 800a85c:	0800a903 	.word	0x0800a903
 800a860:	0800a903 	.word	0x0800a903
 800a864:	0800a903 	.word	0x0800a903
 800a868:	0800a903 	.word	0x0800a903
 800a86c:	0800a903 	.word	0x0800a903
 800a870:	0800a903 	.word	0x0800a903
 800a874:	0800a903 	.word	0x0800a903
 800a878:	0800a903 	.word	0x0800a903
 800a87c:	0800a903 	.word	0x0800a903
 800a880:	0800a903 	.word	0x0800a903
 800a884:	0800a903 	.word	0x0800a903
 800a888:	0800a903 	.word	0x0800a903
 800a88c:	0800a903 	.word	0x0800a903
 800a890:	0800a903 	.word	0x0800a903
 800a894:	0800a8f5 	.word	0x0800a8f5
 800a898:	2b40      	cmp	r3, #64	@ 0x40
 800a89a:	d02e      	beq.n	800a8fa <UART_SetConfig+0xa36>
 800a89c:	e031      	b.n	800a902 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a89e:	f7fb fe65 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800a8a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e033      	b.n	800a90e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a6:	f7fb fe77 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 800a8aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8ac:	e02f      	b.n	800a90e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fd f8e8 	bl	8007a88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8bc:	e027      	b.n	800a90e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8be:	f107 0318 	add.w	r3, r7, #24
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fd fa34 	bl	8007d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e01f      	b.n	800a90e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ce:	4b2d      	ldr	r3, [pc, #180]	@ (800a984 <UART_SetConfig+0xac0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0320 	and.w	r3, r3, #32
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d009      	beq.n	800a8ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8da:	4b2a      	ldr	r3, [pc, #168]	@ (800a984 <UART_SetConfig+0xac0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	08db      	lsrs	r3, r3, #3
 800a8e0:	f003 0303 	and.w	r3, r3, #3
 800a8e4:	4a28      	ldr	r2, [pc, #160]	@ (800a988 <UART_SetConfig+0xac4>)
 800a8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8ec:	e00f      	b.n	800a90e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a8ee:	4b26      	ldr	r3, [pc, #152]	@ (800a988 <UART_SetConfig+0xac4>)
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f2:	e00c      	b.n	800a90e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8f4:	4b25      	ldr	r3, [pc, #148]	@ (800a98c <UART_SetConfig+0xac8>)
 800a8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f8:	e009      	b.n	800a90e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e005      	b.n	800a90e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a90c:	bf00      	nop
    }

    if (pclk != 0U)
 800a90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a910:	2b00      	cmp	r3, #0
 800a912:	d021      	beq.n	800a958 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	4a1d      	ldr	r2, [pc, #116]	@ (800a990 <UART_SetConfig+0xacc>)
 800a91a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a91e:	461a      	mov	r2, r3
 800a920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a922:	fbb3 f2f2 	udiv	r2, r3, r2
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	085b      	lsrs	r3, r3, #1
 800a92c:	441a      	add	r2, r3
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	fbb2 f3f3 	udiv	r3, r2, r3
 800a936:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	2b0f      	cmp	r3, #15
 800a93c:	d909      	bls.n	800a952 <UART_SetConfig+0xa8e>
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a944:	d205      	bcs.n	800a952 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a948:	b29a      	uxth	r2, r3
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60da      	str	r2, [r3, #12]
 800a950:	e002      	b.n	800a958 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2201      	movs	r2, #1
 800a964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2200      	movs	r2, #0
 800a96c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2200      	movs	r2, #0
 800a972:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a974:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3748      	adds	r7, #72	@ 0x48
 800a97c:	46bd      	mov	sp, r7
 800a97e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a982:	bf00      	nop
 800a984:	58024400 	.word	0x58024400
 800a988:	03d09000 	.word	0x03d09000
 800a98c:	003d0900 	.word	0x003d0900
 800a990:	08013018 	.word	0x08013018

0800a994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00a      	beq.n	800aa02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa06:	f003 0304 	and.w	r3, r3, #4
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00a      	beq.n	800aa46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00a      	beq.n	800aa68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	430a      	orrs	r2, r1
 800aa66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01a      	beq.n	800aaaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa92:	d10a      	bne.n	800aaaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	430a      	orrs	r2, r1
 800aaca:	605a      	str	r2, [r3, #4]
  }
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b098      	sub	sp, #96	@ 0x60
 800aadc:	af02      	add	r7, sp, #8
 800aade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aae8:	f7f8 f826 	bl	8002b38 <HAL_GetTick>
 800aaec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d12f      	bne.n	800ab5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aafc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab04:	2200      	movs	r2, #0
 800ab06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f88e 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d022      	beq.n	800ab5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e6      	bne.n	800ab16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e063      	b.n	800ac24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0304 	and.w	r3, r3, #4
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d149      	bne.n	800abfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab72:	2200      	movs	r2, #0
 800ab74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f857 	bl	800ac2c <UART_WaitOnFlagUntilTimeout>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d03c      	beq.n	800abfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	e853 3f00 	ldrex	r3, [r3]
 800ab90:	623b      	str	r3, [r7, #32]
   return(result);
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e6      	bne.n	800ab84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3308      	adds	r3, #8
 800abbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3308      	adds	r3, #8
 800abd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd6:	61fa      	str	r2, [r7, #28]
 800abd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	69b9      	ldr	r1, [r7, #24]
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	617b      	str	r3, [r7, #20]
   return(result);
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e5      	bne.n	800abb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e012      	b.n	800ac24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3758      	adds	r7, #88	@ 0x58
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac3c:	e04f      	b.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d04b      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac46:	f7f7 ff77 	bl	8002b38 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d302      	bcc.n	800ac5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e04e      	b.n	800acfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d037      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b80      	cmp	r3, #128	@ 0x80
 800ac72:	d034      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b40      	cmp	r3, #64	@ 0x40
 800ac78:	d031      	beq.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	f003 0308 	and.w	r3, r3, #8
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d110      	bne.n	800acaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 f839 	bl	800ad08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2208      	movs	r2, #8
 800ac9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e029      	b.n	800acfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acb8:	d111      	bne.n	800acde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f81f 	bl	800ad08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e00f      	b.n	800acfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	69da      	ldr	r2, [r3, #28]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4013      	ands	r3, r2
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	429a      	cmp	r2, r3
 800acec:	bf0c      	ite	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	2300      	movne	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d0a0      	beq.n	800ac3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b095      	sub	sp, #84	@ 0x54
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e6      	bne.n	800ad10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad52:	69fa      	ldr	r2, [r7, #28]
 800ad54:	4b1e      	ldr	r3, [pc, #120]	@ (800add0 <UART_EndRxTransfer+0xc8>)
 800ad56:	4013      	ands	r3, r2
 800ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e5      	bne.n	800ad42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d118      	bne.n	800adb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	e853 3f00 	ldrex	r3, [r3]
 800ad8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	f023 0310 	bic.w	r3, r3, #16
 800ad92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad9c:	61bb      	str	r3, [r7, #24]
 800ad9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	6979      	ldr	r1, [r7, #20]
 800ada2:	69ba      	ldr	r2, [r7, #24]
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	613b      	str	r3, [r7, #16]
   return(result);
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e6      	bne.n	800ad7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adc4:	bf00      	nop
 800adc6:	3754      	adds	r7, #84	@ 0x54
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	effffffe 	.word	0xeffffffe

0800add4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff f854 	bl	8009e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf0:	bf00      	nop
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae14:	61fb      	str	r3, [r7, #28]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	6979      	ldr	r1, [r7, #20]
 800ae24:	69ba      	ldr	r2, [r7, #24]
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e6      	bne.n	800ae00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2220      	movs	r2, #32
 800ae36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff f81f 	bl	8009e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae46:	bf00      	nop
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae56:	bf00      	nop
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e027      	b.n	800aef0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2224      	movs	r2, #36	@ 0x24
 800aeac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 0201 	bic.w	r2, r2, #1
 800aec6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aece:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af10:	2302      	movs	r3, #2
 800af12:	e02d      	b.n	800af70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2224      	movs	r2, #36	@ 0x24
 800af20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0201 	bic.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f84f 	bl	800aff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2220      	movs	r2, #32
 800af62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d101      	bne.n	800af90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af8c:	2302      	movs	r3, #2
 800af8e:	e02d      	b.n	800afec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2224      	movs	r2, #36	@ 0x24
 800af9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 0201 	bic.w	r2, r2, #1
 800afb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f811 	bl	800aff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2220      	movs	r2, #32
 800afde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b000:	2b00      	cmp	r3, #0
 800b002:	d108      	bne.n	800b016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b014:	e031      	b.n	800b07a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b016:	2310      	movs	r3, #16
 800b018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b01a:	2310      	movs	r3, #16
 800b01c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	0e5b      	lsrs	r3, r3, #25
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	0f5b      	lsrs	r3, r3, #29
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f003 0307 	and.w	r3, r3, #7
 800b03c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	7b3a      	ldrb	r2, [r7, #12]
 800b042:	4911      	ldr	r1, [pc, #68]	@ (800b088 <UARTEx_SetNbDataToProcess+0x94>)
 800b044:	5c8a      	ldrb	r2, [r1, r2]
 800b046:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b04a:	7b3a      	ldrb	r2, [r7, #12]
 800b04c:	490f      	ldr	r1, [pc, #60]	@ (800b08c <UARTEx_SetNbDataToProcess+0x98>)
 800b04e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b050:	fb93 f3f2 	sdiv	r3, r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	7b7a      	ldrb	r2, [r7, #13]
 800b060:	4909      	ldr	r1, [pc, #36]	@ (800b088 <UARTEx_SetNbDataToProcess+0x94>)
 800b062:	5c8a      	ldrb	r2, [r1, r2]
 800b064:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b068:	7b7a      	ldrb	r2, [r7, #13]
 800b06a:	4908      	ldr	r1, [pc, #32]	@ (800b08c <UARTEx_SetNbDataToProcess+0x98>)
 800b06c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b06e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b072:	b29a      	uxth	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	08013030 	.word	0x08013030
 800b08c:	08013038 	.word	0x08013038

0800b090 <__NVIC_SetPriority>:
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	6039      	str	r1, [r7, #0]
 800b09a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b09c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	db0a      	blt.n	800b0ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	490c      	ldr	r1, [pc, #48]	@ (800b0dc <__NVIC_SetPriority+0x4c>)
 800b0aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0ae:	0112      	lsls	r2, r2, #4
 800b0b0:	b2d2      	uxtb	r2, r2
 800b0b2:	440b      	add	r3, r1
 800b0b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b0b8:	e00a      	b.n	800b0d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	4908      	ldr	r1, [pc, #32]	@ (800b0e0 <__NVIC_SetPriority+0x50>)
 800b0c0:	88fb      	ldrh	r3, [r7, #6]
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	3b04      	subs	r3, #4
 800b0c8:	0112      	lsls	r2, r2, #4
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	761a      	strb	r2, [r3, #24]
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	e000e100 	.word	0xe000e100
 800b0e0:	e000ed00 	.word	0xe000ed00

0800b0e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b0e8:	4b05      	ldr	r3, [pc, #20]	@ (800b100 <SysTick_Handler+0x1c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b0ec:	f001 ff06 	bl	800cefc <xTaskGetSchedulerState>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d001      	beq.n	800b0fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b0f6:	f002 fcff 	bl	800daf8 <xPortSysTickHandler>
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	e000e010 	.word	0xe000e010

0800b104 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b108:	2100      	movs	r1, #0
 800b10a:	f06f 0004 	mvn.w	r0, #4
 800b10e:	f7ff ffbf 	bl	800b090 <__NVIC_SetPriority>
#endif
}
 800b112:	bf00      	nop
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b11e:	f3ef 8305 	mrs	r3, IPSR
 800b122:	603b      	str	r3, [r7, #0]
  return(result);
 800b124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b12a:	f06f 0305 	mvn.w	r3, #5
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	e00c      	b.n	800b14c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b132:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <osKernelInitialize+0x44>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b13a:	4b08      	ldr	r3, [pc, #32]	@ (800b15c <osKernelInitialize+0x44>)
 800b13c:	2201      	movs	r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b140:	2300      	movs	r3, #0
 800b142:	607b      	str	r3, [r7, #4]
 800b144:	e002      	b.n	800b14c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b146:	f04f 33ff 	mov.w	r3, #4294967295
 800b14a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b14c:	687b      	ldr	r3, [r7, #4]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	24000470 	.word	0x24000470

0800b160 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b166:	f3ef 8305 	mrs	r3, IPSR
 800b16a:	603b      	str	r3, [r7, #0]
  return(result);
 800b16c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b172:	f06f 0305 	mvn.w	r3, #5
 800b176:	607b      	str	r3, [r7, #4]
 800b178:	e010      	b.n	800b19c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b17a:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a8 <osKernelStart+0x48>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d109      	bne.n	800b196 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b182:	f7ff ffbf 	bl	800b104 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b186:	4b08      	ldr	r3, [pc, #32]	@ (800b1a8 <osKernelStart+0x48>)
 800b188:	2202      	movs	r2, #2
 800b18a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b18c:	f001 fa68 	bl	800c660 <vTaskStartScheduler>
      stat = osOK;
 800b190:	2300      	movs	r3, #0
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	e002      	b.n	800b19c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b196:	f04f 33ff 	mov.w	r3, #4294967295
 800b19a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b19c:	687b      	ldr	r3, [r7, #4]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	24000470 	.word	0x24000470

0800b1ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08e      	sub	sp, #56	@ 0x38
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1bc:	f3ef 8305 	mrs	r3, IPSR
 800b1c0:	617b      	str	r3, [r7, #20]
  return(result);
 800b1c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d17e      	bne.n	800b2c6 <osThreadNew+0x11a>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d07b      	beq.n	800b2c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b1ce:	2380      	movs	r3, #128	@ 0x80
 800b1d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b1d2:	2318      	movs	r3, #24
 800b1d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b1da:	f04f 33ff 	mov.w	r3, #4294967295
 800b1de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d045      	beq.n	800b272 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d002      	beq.n	800b1f4 <osThreadNew+0x48>
        name = attr->name;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d008      	beq.n	800b21a <osThreadNew+0x6e>
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	2b38      	cmp	r3, #56	@ 0x38
 800b20c:	d805      	bhi.n	800b21a <osThreadNew+0x6e>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <osThreadNew+0x72>
        return (NULL);
 800b21a:	2300      	movs	r3, #0
 800b21c:	e054      	b.n	800b2c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	089b      	lsrs	r3, r3, #2
 800b22c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00e      	beq.n	800b254 <osThreadNew+0xa8>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	2b5b      	cmp	r3, #91	@ 0x5b
 800b23c:	d90a      	bls.n	800b254 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b242:	2b00      	cmp	r3, #0
 800b244:	d006      	beq.n	800b254 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <osThreadNew+0xa8>
        mem = 1;
 800b24e:	2301      	movs	r3, #1
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	e010      	b.n	800b276 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10c      	bne.n	800b276 <osThreadNew+0xca>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d108      	bne.n	800b276 <osThreadNew+0xca>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d104      	bne.n	800b276 <osThreadNew+0xca>
          mem = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61bb      	str	r3, [r7, #24]
 800b270:	e001      	b.n	800b276 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d110      	bne.n	800b29e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b284:	9202      	str	r2, [sp, #8]
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	6a3a      	ldr	r2, [r7, #32]
 800b290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f001 f808 	bl	800c2a8 <xTaskCreateStatic>
 800b298:	4603      	mov	r3, r0
 800b29a:	613b      	str	r3, [r7, #16]
 800b29c:	e013      	b.n	800b2c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d110      	bne.n	800b2c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	f107 0310 	add.w	r3, r7, #16
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f001 f856 	bl	800c368 <xTaskCreate>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d001      	beq.n	800b2c6 <osThreadNew+0x11a>
            hTask = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b2c6:	693b      	ldr	r3, [r7, #16]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3728      	adds	r7, #40	@ 0x28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2d8:	f3ef 8305 	mrs	r3, IPSR
 800b2dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <osDelay+0x1c>
    stat = osErrorISR;
 800b2e4:	f06f 0305 	mvn.w	r3, #5
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	e007      	b.n	800b2fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d002      	beq.n	800b2fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f001 f97c 	bl	800c5f4 <vTaskDelay>
    }
  }

  return (stat);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b306:	b580      	push	{r7, lr}
 800b308:	b08a      	sub	sp, #40	@ 0x28
 800b30a:	af02      	add	r7, sp, #8
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b316:	f3ef 8305 	mrs	r3, IPSR
 800b31a:	613b      	str	r3, [r7, #16]
  return(result);
 800b31c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d15f      	bne.n	800b3e2 <osMessageQueueNew+0xdc>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d05c      	beq.n	800b3e2 <osMessageQueueNew+0xdc>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d059      	beq.n	800b3e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295
 800b332:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d029      	beq.n	800b38e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d012      	beq.n	800b368 <osMessageQueueNew+0x62>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	2b4f      	cmp	r3, #79	@ 0x4f
 800b348:	d90e      	bls.n	800b368 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	695a      	ldr	r2, [r3, #20]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	fb01 f303 	mul.w	r3, r1, r3
 800b35e:	429a      	cmp	r2, r3
 800b360:	d302      	bcc.n	800b368 <osMessageQueueNew+0x62>
        mem = 1;
 800b362:	2301      	movs	r3, #1
 800b364:	61bb      	str	r3, [r7, #24]
 800b366:	e014      	b.n	800b392 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d110      	bne.n	800b392 <osMessageQueueNew+0x8c>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10c      	bne.n	800b392 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d108      	bne.n	800b392 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <osMessageQueueNew+0x8c>
          mem = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	61bb      	str	r3, [r7, #24]
 800b38c:	e001      	b.n	800b392 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d10b      	bne.n	800b3b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	9100      	str	r1, [sp, #0]
 800b3a4:	68b9      	ldr	r1, [r7, #8]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 fa30 	bl	800b80c <xQueueGenericCreateStatic>
 800b3ac:	61f8      	str	r0, [r7, #28]
 800b3ae:	e008      	b.n	800b3c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d105      	bne.n	800b3c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	68b9      	ldr	r1, [r7, #8]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 faa3 	bl	800b906 <xQueueGenericCreate>
 800b3c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00c      	beq.n	800b3e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	617b      	str	r3, [r7, #20]
 800b3d4:	e001      	b.n	800b3da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b3da:	6979      	ldr	r1, [r7, #20]
 800b3dc:	69f8      	ldr	r0, [r7, #28]
 800b3de:	f000 ff05 	bl	800c1ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b3e2:	69fb      	ldr	r3, [r7, #28]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3720      	adds	r7, #32
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b400:	2300      	movs	r3, #0
 800b402:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b404:	f3ef 8305 	mrs	r3, IPSR
 800b408:	617b      	str	r3, [r7, #20]
  return(result);
 800b40a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d028      	beq.n	800b462 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <osMessageQueuePut+0x36>
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <osMessageQueuePut+0x36>
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b422:	f06f 0303 	mvn.w	r3, #3
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	e038      	b.n	800b49c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b42e:	f107 0210 	add.w	r2, r7, #16
 800b432:	2300      	movs	r3, #0
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	69b8      	ldr	r0, [r7, #24]
 800b438:	f000 fbc6 	bl	800bbc8 <xQueueGenericSendFromISR>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d003      	beq.n	800b44a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b442:	f06f 0302 	mvn.w	r3, #2
 800b446:	61fb      	str	r3, [r7, #28]
 800b448:	e028      	b.n	800b49c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d025      	beq.n	800b49c <osMessageQueuePut+0xb0>
 800b450:	4b15      	ldr	r3, [pc, #84]	@ (800b4a8 <osMessageQueuePut+0xbc>)
 800b452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	e01c      	b.n	800b49c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <osMessageQueuePut+0x82>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d103      	bne.n	800b476 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b46e:	f06f 0303 	mvn.w	r3, #3
 800b472:	61fb      	str	r3, [r7, #28]
 800b474:	e012      	b.n	800b49c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b476:	2300      	movs	r3, #0
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	69b8      	ldr	r0, [r7, #24]
 800b47e:	f000 faa1 	bl	800b9c4 <xQueueGenericSend>
 800b482:	4603      	mov	r3, r0
 800b484:	2b01      	cmp	r3, #1
 800b486:	d009      	beq.n	800b49c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b48e:	f06f 0301 	mvn.w	r3, #1
 800b492:	61fb      	str	r3, [r7, #28]
 800b494:	e002      	b.n	800b49c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b496:	f06f 0302 	mvn.w	r3, #2
 800b49a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b49c:	69fb      	ldr	r3, [r7, #28]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3720      	adds	r7, #32
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4c2:	f3ef 8305 	mrs	r3, IPSR
 800b4c6:	617b      	str	r3, [r7, #20]
  return(result);
 800b4c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d028      	beq.n	800b520 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d005      	beq.n	800b4e0 <osMessageQueueGet+0x34>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <osMessageQueueGet+0x34>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b4e0:	f06f 0303 	mvn.w	r3, #3
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	e037      	b.n	800b558 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b4ec:	f107 0310 	add.w	r3, r7, #16
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	69b8      	ldr	r0, [r7, #24]
 800b4f6:	f000 fce7 	bl	800bec8 <xQueueReceiveFromISR>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d003      	beq.n	800b508 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b500:	f06f 0302 	mvn.w	r3, #2
 800b504:	61fb      	str	r3, [r7, #28]
 800b506:	e027      	b.n	800b558 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d024      	beq.n	800b558 <osMessageQueueGet+0xac>
 800b50e:	4b15      	ldr	r3, [pc, #84]	@ (800b564 <osMessageQueueGet+0xb8>)
 800b510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	e01b      	b.n	800b558 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <osMessageQueueGet+0x80>
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d103      	bne.n	800b534 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b52c:	f06f 0303 	mvn.w	r3, #3
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	e011      	b.n	800b558 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	68b9      	ldr	r1, [r7, #8]
 800b538:	69b8      	ldr	r0, [r7, #24]
 800b53a:	f000 fbe3 	bl	800bd04 <xQueueReceive>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b01      	cmp	r3, #1
 800b542:	d009      	beq.n	800b558 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b54a:	f06f 0301 	mvn.w	r3, #1
 800b54e:	61fb      	str	r3, [r7, #28]
 800b550:	e002      	b.n	800b558 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b552:	f06f 0302 	mvn.w	r3, #2
 800b556:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b558:	69fb      	ldr	r3, [r7, #28]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3720      	adds	r7, #32
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4a07      	ldr	r2, [pc, #28]	@ (800b594 <vApplicationGetIdleTaskMemory+0x2c>)
 800b578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	4a06      	ldr	r2, [pc, #24]	@ (800b598 <vApplicationGetIdleTaskMemory+0x30>)
 800b57e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2280      	movs	r2, #128	@ 0x80
 800b584:	601a      	str	r2, [r3, #0]
}
 800b586:	bf00      	nop
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	24000474 	.word	0x24000474
 800b598:	240004d0 	.word	0x240004d0

0800b59c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4a07      	ldr	r2, [pc, #28]	@ (800b5c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	4a06      	ldr	r2, [pc, #24]	@ (800b5cc <vApplicationGetTimerTaskMemory+0x30>)
 800b5b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b5ba:	601a      	str	r2, [r3, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	240006d0 	.word	0x240006d0
 800b5cc:	2400072c 	.word	0x2400072c

0800b5d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f103 0208 	add.w	r2, r3, #8
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f103 0208 	add.w	r2, r3, #8
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f103 0208 	add.w	r2, r3, #8
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b61e:	bf00      	nop
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b62a:	b480      	push	{r7}
 800b62c:	b085      	sub	sp, #20
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	689a      	ldr	r2, [r3, #8]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]
}
 800b666:	bf00      	nop
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b672:	b480      	push	{r7}
 800b674:	b085      	sub	sp, #20
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b688:	d103      	bne.n	800b692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	e00c      	b.n	800b6ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3308      	adds	r3, #8
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	e002      	b.n	800b6a0 <vListInsert+0x2e>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d2f6      	bcs.n	800b69a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	601a      	str	r2, [r3, #0]
}
 800b6d8:	bf00      	nop
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	6892      	ldr	r2, [r2, #8]
 800b6fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	6852      	ldr	r2, [r2, #4]
 800b704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d103      	bne.n	800b718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	1e5a      	subs	r2, r3, #1
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10b      	bne.n	800b764 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b75e:	bf00      	nop
 800b760:	bf00      	nop
 800b762:	e7fd      	b.n	800b760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b764:	f002 f938 	bl	800d9d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b770:	68f9      	ldr	r1, [r7, #12]
 800b772:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b774:	fb01 f303 	mul.w	r3, r1, r3
 800b778:	441a      	add	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b794:	3b01      	subs	r3, #1
 800b796:	68f9      	ldr	r1, [r7, #12]
 800b798:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b79a:	fb01 f303 	mul.w	r3, r1, r3
 800b79e:	441a      	add	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	22ff      	movs	r2, #255	@ 0xff
 800b7a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	22ff      	movs	r2, #255	@ 0xff
 800b7b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d114      	bne.n	800b7e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01a      	beq.n	800b7f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3310      	adds	r3, #16
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 f9d8 	bl	800cb7c <xTaskRemoveFromEventList>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d012      	beq.n	800b7f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b808 <xQueueGenericReset+0xd0>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	e009      	b.n	800b7f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3310      	adds	r3, #16
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fef1 	bl	800b5d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3324      	adds	r3, #36	@ 0x24
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff feec 	bl	800b5d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7f8:	f002 f920 	bl	800da3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7fc:	2301      	movs	r3, #1
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	e000ed04 	.word	0xe000ed04

0800b80c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08e      	sub	sp, #56	@ 0x38
 800b810:	af02      	add	r7, sp, #8
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
 800b818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10b      	bne.n	800b838 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b832:	bf00      	nop
 800b834:	bf00      	nop
 800b836:	e7fd      	b.n	800b834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10b      	bne.n	800b856 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b850:	bf00      	nop
 800b852:	bf00      	nop
 800b854:	e7fd      	b.n	800b852 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <xQueueGenericCreateStatic+0x56>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <xQueueGenericCreateStatic+0x5a>
 800b862:	2301      	movs	r3, #1
 800b864:	e000      	b.n	800b868 <xQueueGenericCreateStatic+0x5c>
 800b866:	2300      	movs	r3, #0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10b      	bne.n	800b884 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	623b      	str	r3, [r7, #32]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d102      	bne.n	800b890 <xQueueGenericCreateStatic+0x84>
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <xQueueGenericCreateStatic+0x88>
 800b890:	2301      	movs	r3, #1
 800b892:	e000      	b.n	800b896 <xQueueGenericCreateStatic+0x8a>
 800b894:	2300      	movs	r3, #0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10b      	bne.n	800b8b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	61fb      	str	r3, [r7, #28]
}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	e7fd      	b.n	800b8ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8b2:	2350      	movs	r3, #80	@ 0x50
 800b8b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b50      	cmp	r3, #80	@ 0x50
 800b8ba:	d00b      	beq.n	800b8d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	61bb      	str	r3, [r7, #24]
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	e7fd      	b.n	800b8d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00d      	beq.n	800b8fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	68b9      	ldr	r1, [r7, #8]
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 f840 	bl	800b97c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3730      	adds	r7, #48	@ 0x30
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b906:	b580      	push	{r7, lr}
 800b908:	b08a      	sub	sp, #40	@ 0x28
 800b90a:	af02      	add	r7, sp, #8
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	60b9      	str	r1, [r7, #8]
 800b910:	4613      	mov	r3, r2
 800b912:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10b      	bne.n	800b932 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	613b      	str	r3, [r7, #16]
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	e7fd      	b.n	800b92e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	3350      	adds	r3, #80	@ 0x50
 800b940:	4618      	mov	r0, r3
 800b942:	f002 f96b 	bl	800dc1c <pvPortMalloc>
 800b946:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d011      	beq.n	800b972 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	3350      	adds	r3, #80	@ 0x50
 800b956:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b960:	79fa      	ldrb	r2, [r7, #7]
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	4613      	mov	r3, r2
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 f805 	bl	800b97c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b972:	69bb      	ldr	r3, [r7, #24]
	}
 800b974:	4618      	mov	r0, r3
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d103      	bne.n	800b998 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e002      	b.n	800b99e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	69b8      	ldr	r0, [r7, #24]
 800b9ae:	f7ff fec3 	bl	800b738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	78fa      	ldrb	r2, [r7, #3]
 800b9b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9ba:	bf00      	nop
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b08e      	sub	sp, #56	@ 0x38
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10b      	bne.n	800b9f8 <xQueueGenericSend+0x34>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9f2:	bf00      	nop
 800b9f4:	bf00      	nop
 800b9f6:	e7fd      	b.n	800b9f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d103      	bne.n	800ba06 <xQueueGenericSend+0x42>
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <xQueueGenericSend+0x46>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e000      	b.n	800ba0c <xQueueGenericSend+0x48>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10b      	bne.n	800ba28 <xQueueGenericSend+0x64>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	e7fd      	b.n	800ba24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d103      	bne.n	800ba36 <xQueueGenericSend+0x72>
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <xQueueGenericSend+0x76>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <xQueueGenericSend+0x78>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10b      	bne.n	800ba58 <xQueueGenericSend+0x94>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	623b      	str	r3, [r7, #32]
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	e7fd      	b.n	800ba54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba58:	f001 fa50 	bl	800cefc <xTaskGetSchedulerState>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <xQueueGenericSend+0xa4>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <xQueueGenericSend+0xa8>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <xQueueGenericSend+0xaa>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10b      	bne.n	800ba8a <xQueueGenericSend+0xc6>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	61fb      	str	r3, [r7, #28]
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop
 800ba88:	e7fd      	b.n	800ba86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba8a:	f001 ffa5 	bl	800d9d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d302      	bcc.n	800baa0 <xQueueGenericSend+0xdc>
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d129      	bne.n	800baf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	68b9      	ldr	r1, [r7, #8]
 800baa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800baa6:	f000 fa91 	bl	800bfcc <prvCopyDataToQueue>
 800baaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d010      	beq.n	800bad6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab6:	3324      	adds	r3, #36	@ 0x24
 800bab8:	4618      	mov	r0, r3
 800baba:	f001 f85f 	bl	800cb7c <xTaskRemoveFromEventList>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d013      	beq.n	800baec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bac4:	4b3f      	ldr	r3, [pc, #252]	@ (800bbc4 <xQueueGenericSend+0x200>)
 800bac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	e00a      	b.n	800baec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d007      	beq.n	800baec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800badc:	4b39      	ldr	r3, [pc, #228]	@ (800bbc4 <xQueueGenericSend+0x200>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800baec:	f001 ffa6 	bl	800da3c <vPortExitCritical>
				return pdPASS;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e063      	b.n	800bbbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d103      	bne.n	800bb02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bafa:	f001 ff9f 	bl	800da3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e05c      	b.n	800bbbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d106      	bne.n	800bb16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb08:	f107 0314 	add.w	r3, r7, #20
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f001 f899 	bl	800cc44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb16:	f001 ff91 	bl	800da3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb1a:	f000 fe09 	bl	800c730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb1e:	f001 ff5b 	bl	800d9d8 <vPortEnterCritical>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb28:	b25b      	sxtb	r3, r3
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d103      	bne.n	800bb38 <xQueueGenericSend+0x174>
 800bb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb3e:	b25b      	sxtb	r3, r3
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d103      	bne.n	800bb4e <xQueueGenericSend+0x18a>
 800bb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb4e:	f001 ff75 	bl	800da3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb52:	1d3a      	adds	r2, r7, #4
 800bb54:	f107 0314 	add.w	r3, r7, #20
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f001 f888 	bl	800cc70 <xTaskCheckForTimeOut>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d124      	bne.n	800bbb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb68:	f000 fb28 	bl	800c1bc <prvIsQueueFull>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d018      	beq.n	800bba4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb74:	3310      	adds	r3, #16
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 ffac 	bl	800cad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb82:	f000 fab3 	bl	800c0ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb86:	f000 fde1 	bl	800c74c <xTaskResumeAll>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f47f af7c 	bne.w	800ba8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bb92:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <xQueueGenericSend+0x200>)
 800bb94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	e772      	b.n	800ba8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bba6:	f000 faa1 	bl	800c0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbaa:	f000 fdcf 	bl	800c74c <xTaskResumeAll>
 800bbae:	e76c      	b.n	800ba8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbb2:	f000 fa9b 	bl	800c0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbb6:	f000 fdc9 	bl	800c74c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3738      	adds	r7, #56	@ 0x38
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b090      	sub	sp, #64	@ 0x40
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10b      	bne.n	800bbf8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	e7fd      	b.n	800bbf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d103      	bne.n	800bc06 <xQueueGenericSendFromISR+0x3e>
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <xQueueGenericSendFromISR+0x42>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e000      	b.n	800bc0c <xQueueGenericSendFromISR+0x44>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10b      	bne.n	800bc28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d103      	bne.n	800bc36 <xQueueGenericSendFromISR+0x6e>
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d101      	bne.n	800bc3a <xQueueGenericSendFromISR+0x72>
 800bc36:	2301      	movs	r3, #1
 800bc38:	e000      	b.n	800bc3c <xQueueGenericSendFromISR+0x74>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10b      	bne.n	800bc58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	623b      	str	r3, [r7, #32]
}
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
 800bc56:	e7fd      	b.n	800bc54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc58:	f001 ff9e 	bl	800db98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc5c:	f3ef 8211 	mrs	r2, BASEPRI
 800bc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	61fa      	str	r2, [r7, #28]
 800bc72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d302      	bcc.n	800bc8a <xQueueGenericSendFromISR+0xc2>
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d12f      	bne.n	800bcea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	68b9      	ldr	r1, [r7, #8]
 800bc9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bca0:	f000 f994 	bl	800bfcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bca4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcac:	d112      	bne.n	800bcd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d016      	beq.n	800bce4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	3324      	adds	r3, #36	@ 0x24
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 ff5e 	bl	800cb7c <xTaskRemoveFromEventList>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00e      	beq.n	800bce4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	e007      	b.n	800bce4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bcd8:	3301      	adds	r3, #1
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	b25a      	sxtb	r2, r3
 800bcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bce4:	2301      	movs	r3, #1
 800bce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bce8:	e001      	b.n	800bcee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3740      	adds	r7, #64	@ 0x40
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08c      	sub	sp, #48	@ 0x30
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10b      	bne.n	800bd36 <xQueueReceive+0x32>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	623b      	str	r3, [r7, #32]
}
 800bd30:	bf00      	nop
 800bd32:	bf00      	nop
 800bd34:	e7fd      	b.n	800bd32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <xQueueReceive+0x40>
 800bd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <xQueueReceive+0x44>
 800bd44:	2301      	movs	r3, #1
 800bd46:	e000      	b.n	800bd4a <xQueueReceive+0x46>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10b      	bne.n	800bd66 <xQueueReceive+0x62>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	61fb      	str	r3, [r7, #28]
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd66:	f001 f8c9 	bl	800cefc <xTaskGetSchedulerState>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d102      	bne.n	800bd76 <xQueueReceive+0x72>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <xQueueReceive+0x76>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e000      	b.n	800bd7c <xQueueReceive+0x78>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10b      	bne.n	800bd98 <xQueueReceive+0x94>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	61bb      	str	r3, [r7, #24]
}
 800bd92:	bf00      	nop
 800bd94:	bf00      	nop
 800bd96:	e7fd      	b.n	800bd94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd98:	f001 fe1e 	bl	800d9d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01f      	beq.n	800bde8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdac:	f000 f978 	bl	800c0a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	1e5a      	subs	r2, r3, #1
 800bdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00f      	beq.n	800bde0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc2:	3310      	adds	r3, #16
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fed9 	bl	800cb7c <xTaskRemoveFromEventList>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d007      	beq.n	800bde0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdd0:	4b3c      	ldr	r3, [pc, #240]	@ (800bec4 <xQueueReceive+0x1c0>)
 800bdd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bde0:	f001 fe2c 	bl	800da3c <vPortExitCritical>
				return pdPASS;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e069      	b.n	800bebc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d103      	bne.n	800bdf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdee:	f001 fe25 	bl	800da3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e062      	b.n	800bebc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d106      	bne.n	800be0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdfc:	f107 0310 	add.w	r3, r7, #16
 800be00:	4618      	mov	r0, r3
 800be02:	f000 ff1f 	bl	800cc44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be06:	2301      	movs	r3, #1
 800be08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be0a:	f001 fe17 	bl	800da3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be0e:	f000 fc8f 	bl	800c730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be12:	f001 fde1 	bl	800d9d8 <vPortEnterCritical>
 800be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be1c:	b25b      	sxtb	r3, r3
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be22:	d103      	bne.n	800be2c <xQueueReceive+0x128>
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be32:	b25b      	sxtb	r3, r3
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be38:	d103      	bne.n	800be42 <xQueueReceive+0x13e>
 800be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be42:	f001 fdfb 	bl	800da3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be46:	1d3a      	adds	r2, r7, #4
 800be48:	f107 0310 	add.w	r3, r7, #16
 800be4c:	4611      	mov	r1, r2
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 ff0e 	bl	800cc70 <xTaskCheckForTimeOut>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d123      	bne.n	800bea2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be5c:	f000 f998 	bl	800c190 <prvIsQueueEmpty>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d017      	beq.n	800be96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	3324      	adds	r3, #36	@ 0x24
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	4611      	mov	r1, r2
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fe32 	bl	800cad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be76:	f000 f939 	bl	800c0ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be7a:	f000 fc67 	bl	800c74c <xTaskResumeAll>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d189      	bne.n	800bd98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800be84:	4b0f      	ldr	r3, [pc, #60]	@ (800bec4 <xQueueReceive+0x1c0>)
 800be86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	e780      	b.n	800bd98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be98:	f000 f928 	bl	800c0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be9c:	f000 fc56 	bl	800c74c <xTaskResumeAll>
 800bea0:	e77a      	b.n	800bd98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bea4:	f000 f922 	bl	800c0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bea8:	f000 fc50 	bl	800c74c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800beae:	f000 f96f 	bl	800c190 <prvIsQueueEmpty>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f43f af6f 	beq.w	800bd98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800beba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3730      	adds	r7, #48	@ 0x30
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	e000ed04 	.word	0xe000ed04

0800bec8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08e      	sub	sp, #56	@ 0x38
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10b      	bne.n	800bef6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	623b      	str	r3, [r7, #32]
}
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
 800bef4:	e7fd      	b.n	800bef2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d103      	bne.n	800bf04 <xQueueReceiveFromISR+0x3c>
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d101      	bne.n	800bf08 <xQueueReceiveFromISR+0x40>
 800bf04:	2301      	movs	r3, #1
 800bf06:	e000      	b.n	800bf0a <xQueueReceiveFromISR+0x42>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10b      	bne.n	800bf26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	61fb      	str	r3, [r7, #28]
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	e7fd      	b.n	800bf22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf26:	f001 fe37 	bl	800db98 <vPortValidateInterruptPriority>
	__asm volatile
 800bf2a:	f3ef 8211 	mrs	r2, BASEPRI
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	61ba      	str	r2, [r7, #24]
 800bf40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d02f      	beq.n	800bfb2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf5c:	68b9      	ldr	r1, [r7, #8]
 800bf5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf60:	f000 f89e 	bl	800c0a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf66:	1e5a      	subs	r2, r3, #1
 800bf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d112      	bne.n	800bf9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d016      	beq.n	800bfac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf80:	3310      	adds	r3, #16
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fdfa 	bl	800cb7c <xTaskRemoveFromEventList>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00e      	beq.n	800bfac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00b      	beq.n	800bfac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	e007      	b.n	800bfac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	b25a      	sxtb	r2, r3
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bfac:	2301      	movs	r3, #1
 800bfae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfb0:	e001      	b.n	800bfb6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f383 8811 	msr	BASEPRI, r3
}
 800bfc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3738      	adds	r7, #56	@ 0x38
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10d      	bne.n	800c006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d14d      	bne.n	800c08e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 ff9e 	bl	800cf38 <xTaskPriorityDisinherit>
 800bffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	609a      	str	r2, [r3, #8]
 800c004:	e043      	b.n	800c08e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d119      	bne.n	800c040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6858      	ldr	r0, [r3, #4]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c014:	461a      	mov	r2, r3
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	f003 ffd5 	bl	800ffc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c024:	441a      	add	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	429a      	cmp	r2, r3
 800c034:	d32b      	bcc.n	800c08e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	605a      	str	r2, [r3, #4]
 800c03e:	e026      	b.n	800c08e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	68d8      	ldr	r0, [r3, #12]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c048:	461a      	mov	r2, r3
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	f003 ffbb 	bl	800ffc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	68da      	ldr	r2, [r3, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c058:	425b      	negs	r3, r3
 800c05a:	441a      	add	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	68da      	ldr	r2, [r3, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d207      	bcs.n	800c07c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c074:	425b      	negs	r3, r3
 800c076:	441a      	add	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d105      	bne.n	800c08e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c096:	697b      	ldr	r3, [r7, #20]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d018      	beq.n	800c0e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ba:	441a      	add	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	68da      	ldr	r2, [r3, #12]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d303      	bcc.n	800c0d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	68d9      	ldr	r1, [r3, #12]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0dc:	461a      	mov	r2, r3
 800c0de:	6838      	ldr	r0, [r7, #0]
 800c0e0:	f003 ff71 	bl	800ffc6 <memcpy>
	}
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0f4:	f001 fc70 	bl	800d9d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c100:	e011      	b.n	800c126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c106:	2b00      	cmp	r3, #0
 800c108:	d012      	beq.n	800c130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3324      	adds	r3, #36	@ 0x24
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fd34 	bl	800cb7c <xTaskRemoveFromEventList>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c11a:	f000 fe0d 	bl	800cd38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	3b01      	subs	r3, #1
 800c122:	b2db      	uxtb	r3, r3
 800c124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dce9      	bgt.n	800c102 <prvUnlockQueue+0x16>
 800c12e:	e000      	b.n	800c132 <prvUnlockQueue+0x46>
					break;
 800c130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	22ff      	movs	r2, #255	@ 0xff
 800c136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c13a:	f001 fc7f 	bl	800da3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c13e:	f001 fc4b 	bl	800d9d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c14a:	e011      	b.n	800c170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d012      	beq.n	800c17a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3310      	adds	r3, #16
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 fd0f 	bl	800cb7c <xTaskRemoveFromEventList>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c164:	f000 fde8 	bl	800cd38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c174:	2b00      	cmp	r3, #0
 800c176:	dce9      	bgt.n	800c14c <prvUnlockQueue+0x60>
 800c178:	e000      	b.n	800c17c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c17a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	22ff      	movs	r2, #255	@ 0xff
 800c180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c184:	f001 fc5a 	bl	800da3c <vPortExitCritical>
}
 800c188:	bf00      	nop
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c198:	f001 fc1e 	bl	800d9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	e001      	b.n	800c1ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1ae:	f001 fc45 	bl	800da3c <vPortExitCritical>

	return xReturn;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1c4:	f001 fc08 	bl	800d9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d102      	bne.n	800c1da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	60fb      	str	r3, [r7, #12]
 800c1d8:	e001      	b.n	800c1de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1de:	f001 fc2d 	bl	800da3c <vPortExitCritical>

	return xReturn;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	e014      	b.n	800c226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c1fc:	4a0f      	ldr	r2, [pc, #60]	@ (800c23c <vQueueAddToRegistry+0x50>)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10b      	bne.n	800c220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c208:	490c      	ldr	r1, [pc, #48]	@ (800c23c <vQueueAddToRegistry+0x50>)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c212:	4a0a      	ldr	r2, [pc, #40]	@ (800c23c <vQueueAddToRegistry+0x50>)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	4413      	add	r3, r2
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c21e:	e006      	b.n	800c22e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3301      	adds	r3, #1
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b07      	cmp	r3, #7
 800c22a:	d9e7      	bls.n	800c1fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	24000b2c 	.word	0x24000b2c

0800c240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c250:	f001 fbc2 	bl	800d9d8 <vPortEnterCritical>
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c25a:	b25b      	sxtb	r3, r3
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d103      	bne.n	800c26a <vQueueWaitForMessageRestricted+0x2a>
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c270:	b25b      	sxtb	r3, r3
 800c272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c276:	d103      	bne.n	800c280 <vQueueWaitForMessageRestricted+0x40>
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c280:	f001 fbdc 	bl	800da3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d106      	bne.n	800c29a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	3324      	adds	r3, #36	@ 0x24
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	68b9      	ldr	r1, [r7, #8]
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fc45 	bl	800cb24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c29a:	6978      	ldr	r0, [r7, #20]
 800c29c:	f7ff ff26 	bl	800c0ec <prvUnlockQueue>
	}
 800c2a0:	bf00      	nop
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08e      	sub	sp, #56	@ 0x38
 800c2ac:	af04      	add	r7, sp, #16
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
 800c2b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10b      	bne.n	800c2d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	623b      	str	r3, [r7, #32]
}
 800c2ce:	bf00      	nop
 800c2d0:	bf00      	nop
 800c2d2:	e7fd      	b.n	800c2d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10b      	bne.n	800c2f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	61fb      	str	r3, [r7, #28]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2f2:	235c      	movs	r3, #92	@ 0x5c
 800c2f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2fa:	d00b      	beq.n	800c314 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	61bb      	str	r3, [r7, #24]
}
 800c30e:	bf00      	nop
 800c310:	bf00      	nop
 800c312:	e7fd      	b.n	800c310 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d01e      	beq.n	800c35a <xTaskCreateStatic+0xb2>
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d01b      	beq.n	800c35a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c324:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c32a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32e:	2202      	movs	r2, #2
 800c330:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c334:	2300      	movs	r3, #0
 800c336:	9303      	str	r3, [sp, #12]
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	9302      	str	r3, [sp, #8]
 800c33c:	f107 0314 	add.w	r3, r7, #20
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 f850 	bl	800c3f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c354:	f000 f8de 	bl	800c514 <prvAddNewTaskToReadyList>
 800c358:	e001      	b.n	800c35e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c35e:	697b      	ldr	r3, [r7, #20]
	}
 800c360:	4618      	mov	r0, r3
 800c362:	3728      	adds	r7, #40	@ 0x28
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08c      	sub	sp, #48	@ 0x30
 800c36c:	af04      	add	r7, sp, #16
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	4613      	mov	r3, r2
 800c376:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c378:	88fb      	ldrh	r3, [r7, #6]
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f001 fc4d 	bl	800dc1c <pvPortMalloc>
 800c382:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00e      	beq.n	800c3a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c38a:	205c      	movs	r0, #92	@ 0x5c
 800c38c:	f001 fc46 	bl	800dc1c <pvPortMalloc>
 800c390:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c39e:	e005      	b.n	800c3ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c3a0:	6978      	ldr	r0, [r7, #20]
 800c3a2:	f001 fd09 	bl	800ddb8 <vPortFree>
 800c3a6:	e001      	b.n	800c3ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d017      	beq.n	800c3e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c3ba:	88fa      	ldrh	r2, [r7, #6]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9303      	str	r3, [sp, #12]
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	9302      	str	r3, [sp, #8]
 800c3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68b9      	ldr	r1, [r7, #8]
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 f80e 	bl	800c3f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3d6:	69f8      	ldr	r0, [r7, #28]
 800c3d8:	f000 f89c 	bl	800c514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	61bb      	str	r3, [r7, #24]
 800c3e0:	e002      	b.n	800c3e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3e8:	69bb      	ldr	r3, [r7, #24]
	}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b088      	sub	sp, #32
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c402:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	461a      	mov	r2, r3
 800c40a:	21a5      	movs	r1, #165	@ 0xa5
 800c40c:	f003 fd3a 	bl	800fe84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c41a:	440b      	add	r3, r1
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	f023 0307 	bic.w	r3, r3, #7
 800c428:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	f003 0307 	and.w	r3, r3, #7
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	617b      	str	r3, [r7, #20]
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01f      	beq.n	800c492 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c452:	2300      	movs	r3, #0
 800c454:	61fb      	str	r3, [r7, #28]
 800c456:	e012      	b.n	800c47e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	4413      	add	r3, r2
 800c45e:	7819      	ldrb	r1, [r3, #0]
 800c460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	4413      	add	r3, r2
 800c466:	3334      	adds	r3, #52	@ 0x34
 800c468:	460a      	mov	r2, r1
 800c46a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	4413      	add	r3, r2
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d006      	beq.n	800c486 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	3301      	adds	r3, #1
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	2b0f      	cmp	r3, #15
 800c482:	d9e9      	bls.n	800c458 <prvInitialiseNewTask+0x66>
 800c484:	e000      	b.n	800c488 <prvInitialiseNewTask+0x96>
			{
				break;
 800c486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48a:	2200      	movs	r2, #0
 800c48c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c490:	e003      	b.n	800c49a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	2b37      	cmp	r3, #55	@ 0x37
 800c49e:	d901      	bls.n	800c4a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c4a0:	2337      	movs	r3, #55	@ 0x37
 800c4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7ff f8a8 	bl	800b610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	3318      	adds	r3, #24
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7ff f8a3 	bl	800b610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	68f9      	ldr	r1, [r7, #12]
 800c4f2:	69b8      	ldr	r0, [r7, #24]
 800c4f4:	f001 f93e 	bl	800d774 <pxPortInitialiseStack>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c50a:	bf00      	nop
 800c50c:	3720      	adds	r7, #32
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c51c:	f001 fa5c 	bl	800d9d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c520:	4b2d      	ldr	r3, [pc, #180]	@ (800c5d8 <prvAddNewTaskToReadyList+0xc4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3301      	adds	r3, #1
 800c526:	4a2c      	ldr	r2, [pc, #176]	@ (800c5d8 <prvAddNewTaskToReadyList+0xc4>)
 800c528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c52a:	4b2c      	ldr	r3, [pc, #176]	@ (800c5dc <prvAddNewTaskToReadyList+0xc8>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d109      	bne.n	800c546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c532:	4a2a      	ldr	r2, [pc, #168]	@ (800c5dc <prvAddNewTaskToReadyList+0xc8>)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c538:	4b27      	ldr	r3, [pc, #156]	@ (800c5d8 <prvAddNewTaskToReadyList+0xc4>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d110      	bne.n	800c562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c540:	f000 fc1e 	bl	800cd80 <prvInitialiseTaskLists>
 800c544:	e00d      	b.n	800c562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c546:	4b26      	ldr	r3, [pc, #152]	@ (800c5e0 <prvAddNewTaskToReadyList+0xcc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d109      	bne.n	800c562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c54e:	4b23      	ldr	r3, [pc, #140]	@ (800c5dc <prvAddNewTaskToReadyList+0xc8>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c558:	429a      	cmp	r2, r3
 800c55a:	d802      	bhi.n	800c562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c55c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5dc <prvAddNewTaskToReadyList+0xc8>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c562:	4b20      	ldr	r3, [pc, #128]	@ (800c5e4 <prvAddNewTaskToReadyList+0xd0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3301      	adds	r3, #1
 800c568:	4a1e      	ldr	r2, [pc, #120]	@ (800c5e4 <prvAddNewTaskToReadyList+0xd0>)
 800c56a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c56c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5e4 <prvAddNewTaskToReadyList+0xd0>)
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c578:	4b1b      	ldr	r3, [pc, #108]	@ (800c5e8 <prvAddNewTaskToReadyList+0xd4>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d903      	bls.n	800c588 <prvAddNewTaskToReadyList+0x74>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c584:	4a18      	ldr	r2, [pc, #96]	@ (800c5e8 <prvAddNewTaskToReadyList+0xd4>)
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c58c:	4613      	mov	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4413      	add	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4a15      	ldr	r2, [pc, #84]	@ (800c5ec <prvAddNewTaskToReadyList+0xd8>)
 800c596:	441a      	add	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3304      	adds	r3, #4
 800c59c:	4619      	mov	r1, r3
 800c59e:	4610      	mov	r0, r2
 800c5a0:	f7ff f843 	bl	800b62a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c5a4:	f001 fa4a 	bl	800da3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c5a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <prvAddNewTaskToReadyList+0xcc>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00e      	beq.n	800c5ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <prvAddNewTaskToReadyList+0xc8>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d207      	bcs.n	800c5ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c5be:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f0 <prvAddNewTaskToReadyList+0xdc>)
 800c5c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5ce:	bf00      	nop
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	24001040 	.word	0x24001040
 800c5dc:	24000b6c 	.word	0x24000b6c
 800c5e0:	2400104c 	.word	0x2400104c
 800c5e4:	2400105c 	.word	0x2400105c
 800c5e8:	24001048 	.word	0x24001048
 800c5ec:	24000b70 	.word	0x24000b70
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d018      	beq.n	800c638 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c606:	4b14      	ldr	r3, [pc, #80]	@ (800c658 <vTaskDelay+0x64>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00b      	beq.n	800c626 <vTaskDelay+0x32>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	60bb      	str	r3, [r7, #8]
}
 800c620:	bf00      	nop
 800c622:	bf00      	nop
 800c624:	e7fd      	b.n	800c622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c626:	f000 f883 	bl	800c730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c62a:	2100      	movs	r1, #0
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fcf3 	bl	800d018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c632:	f000 f88b 	bl	800c74c <xTaskResumeAll>
 800c636:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d107      	bne.n	800c64e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c63e:	4b07      	ldr	r3, [pc, #28]	@ (800c65c <vTaskDelay+0x68>)
 800c640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c64e:	bf00      	nop
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	24001068 	.word	0x24001068
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b08a      	sub	sp, #40	@ 0x28
 800c664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c666:	2300      	movs	r3, #0
 800c668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c66e:	463a      	mov	r2, r7
 800c670:	1d39      	adds	r1, r7, #4
 800c672:	f107 0308 	add.w	r3, r7, #8
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe ff76 	bl	800b568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	9202      	str	r2, [sp, #8]
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	2300      	movs	r3, #0
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	2300      	movs	r3, #0
 800c68c:	460a      	mov	r2, r1
 800c68e:	4922      	ldr	r1, [pc, #136]	@ (800c718 <vTaskStartScheduler+0xb8>)
 800c690:	4822      	ldr	r0, [pc, #136]	@ (800c71c <vTaskStartScheduler+0xbc>)
 800c692:	f7ff fe09 	bl	800c2a8 <xTaskCreateStatic>
 800c696:	4603      	mov	r3, r0
 800c698:	4a21      	ldr	r2, [pc, #132]	@ (800c720 <vTaskStartScheduler+0xc0>)
 800c69a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c69c:	4b20      	ldr	r3, [pc, #128]	@ (800c720 <vTaskStartScheduler+0xc0>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	e001      	b.n	800c6ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d102      	bne.n	800c6ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6b4:	f000 fd04 	bl	800d0c0 <xTimerCreateTimerTask>
 800c6b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d116      	bne.n	800c6ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	613b      	str	r3, [r7, #16]
}
 800c6d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6d4:	4b13      	ldr	r3, [pc, #76]	@ (800c724 <vTaskStartScheduler+0xc4>)
 800c6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6dc:	4b12      	ldr	r3, [pc, #72]	@ (800c728 <vTaskStartScheduler+0xc8>)
 800c6de:	2201      	movs	r2, #1
 800c6e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6e2:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <vTaskStartScheduler+0xcc>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6e8:	f001 f8d2 	bl	800d890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6ec:	e00f      	b.n	800c70e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f4:	d10b      	bne.n	800c70e <vTaskStartScheduler+0xae>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	60fb      	str	r3, [r7, #12]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <vTaskStartScheduler+0xaa>
}
 800c70e:	bf00      	nop
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	08012f78 	.word	0x08012f78
 800c71c:	0800cd51 	.word	0x0800cd51
 800c720:	24001064 	.word	0x24001064
 800c724:	24001060 	.word	0x24001060
 800c728:	2400104c 	.word	0x2400104c
 800c72c:	24001044 	.word	0x24001044

0800c730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c730:	b480      	push	{r7}
 800c732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c734:	4b04      	ldr	r3, [pc, #16]	@ (800c748 <vTaskSuspendAll+0x18>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3301      	adds	r3, #1
 800c73a:	4a03      	ldr	r2, [pc, #12]	@ (800c748 <vTaskSuspendAll+0x18>)
 800c73c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c73e:	bf00      	nop
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr
 800c748:	24001068 	.word	0x24001068

0800c74c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c752:	2300      	movs	r3, #0
 800c754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c756:	2300      	movs	r3, #0
 800c758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c75a:	4b42      	ldr	r3, [pc, #264]	@ (800c864 <xTaskResumeAll+0x118>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10b      	bne.n	800c77a <xTaskResumeAll+0x2e>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	603b      	str	r3, [r7, #0]
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop
 800c778:	e7fd      	b.n	800c776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c77a:	f001 f92d 	bl	800d9d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c77e:	4b39      	ldr	r3, [pc, #228]	@ (800c864 <xTaskResumeAll+0x118>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3b01      	subs	r3, #1
 800c784:	4a37      	ldr	r2, [pc, #220]	@ (800c864 <xTaskResumeAll+0x118>)
 800c786:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c788:	4b36      	ldr	r3, [pc, #216]	@ (800c864 <xTaskResumeAll+0x118>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d162      	bne.n	800c856 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c790:	4b35      	ldr	r3, [pc, #212]	@ (800c868 <xTaskResumeAll+0x11c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d05e      	beq.n	800c856 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c798:	e02f      	b.n	800c7fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c79a:	4b34      	ldr	r3, [pc, #208]	@ (800c86c <xTaskResumeAll+0x120>)
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3318      	adds	r3, #24
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe ff9c 	bl	800b6e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe ff97 	bl	800b6e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ba:	4b2d      	ldr	r3, [pc, #180]	@ (800c870 <xTaskResumeAll+0x124>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d903      	bls.n	800c7ca <xTaskResumeAll+0x7e>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c6:	4a2a      	ldr	r2, [pc, #168]	@ (800c870 <xTaskResumeAll+0x124>)
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4a27      	ldr	r2, [pc, #156]	@ (800c874 <xTaskResumeAll+0x128>)
 800c7d8:	441a      	add	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f7fe ff22 	bl	800b62a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ea:	4b23      	ldr	r3, [pc, #140]	@ (800c878 <xTaskResumeAll+0x12c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d302      	bcc.n	800c7fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c7f4:	4b21      	ldr	r3, [pc, #132]	@ (800c87c <xTaskResumeAll+0x130>)
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c86c <xTaskResumeAll+0x120>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1cb      	bne.n	800c79a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c808:	f000 fb58 	bl	800cebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c80c:	4b1c      	ldr	r3, [pc, #112]	@ (800c880 <xTaskResumeAll+0x134>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d010      	beq.n	800c83a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c818:	f000 f846 	bl	800c8a8 <xTaskIncrementTick>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d002      	beq.n	800c828 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c822:	4b16      	ldr	r3, [pc, #88]	@ (800c87c <xTaskResumeAll+0x130>)
 800c824:	2201      	movs	r2, #1
 800c826:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f1      	bne.n	800c818 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c834:	4b12      	ldr	r3, [pc, #72]	@ (800c880 <xTaskResumeAll+0x134>)
 800c836:	2200      	movs	r2, #0
 800c838:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c83a:	4b10      	ldr	r3, [pc, #64]	@ (800c87c <xTaskResumeAll+0x130>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d009      	beq.n	800c856 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c842:	2301      	movs	r3, #1
 800c844:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c846:	4b0f      	ldr	r3, [pc, #60]	@ (800c884 <xTaskResumeAll+0x138>)
 800c848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c856:	f001 f8f1 	bl	800da3c <vPortExitCritical>

	return xAlreadyYielded;
 800c85a:	68bb      	ldr	r3, [r7, #8]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	24001068 	.word	0x24001068
 800c868:	24001040 	.word	0x24001040
 800c86c:	24001000 	.word	0x24001000
 800c870:	24001048 	.word	0x24001048
 800c874:	24000b70 	.word	0x24000b70
 800c878:	24000b6c 	.word	0x24000b6c
 800c87c:	24001054 	.word	0x24001054
 800c880:	24001050 	.word	0x24001050
 800c884:	e000ed04 	.word	0xe000ed04

0800c888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c88e:	4b05      	ldr	r3, [pc, #20]	@ (800c8a4 <xTaskGetTickCount+0x1c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c894:	687b      	ldr	r3, [r7, #4]
}
 800c896:	4618      	mov	r0, r3
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	24001044 	.word	0x24001044

0800c8a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8b2:	4b4f      	ldr	r3, [pc, #316]	@ (800c9f0 <xTaskIncrementTick+0x148>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f040 8090 	bne.w	800c9dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8bc:	4b4d      	ldr	r3, [pc, #308]	@ (800c9f4 <xTaskIncrementTick+0x14c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8c4:	4a4b      	ldr	r2, [pc, #300]	@ (800c9f4 <xTaskIncrementTick+0x14c>)
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d121      	bne.n	800c914 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8d0:	4b49      	ldr	r3, [pc, #292]	@ (800c9f8 <xTaskIncrementTick+0x150>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00b      	beq.n	800c8f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	603b      	str	r3, [r7, #0]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <xTaskIncrementTick+0x46>
 800c8f2:	4b41      	ldr	r3, [pc, #260]	@ (800c9f8 <xTaskIncrementTick+0x150>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	4b40      	ldr	r3, [pc, #256]	@ (800c9fc <xTaskIncrementTick+0x154>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a3e      	ldr	r2, [pc, #248]	@ (800c9f8 <xTaskIncrementTick+0x150>)
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	4a3e      	ldr	r2, [pc, #248]	@ (800c9fc <xTaskIncrementTick+0x154>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	4b3e      	ldr	r3, [pc, #248]	@ (800ca00 <xTaskIncrementTick+0x158>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3301      	adds	r3, #1
 800c90c:	4a3c      	ldr	r2, [pc, #240]	@ (800ca00 <xTaskIncrementTick+0x158>)
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	f000 fad4 	bl	800cebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c914:	4b3b      	ldr	r3, [pc, #236]	@ (800ca04 <xTaskIncrementTick+0x15c>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d349      	bcc.n	800c9b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c91e:	4b36      	ldr	r3, [pc, #216]	@ (800c9f8 <xTaskIncrementTick+0x150>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d104      	bne.n	800c932 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c928:	4b36      	ldr	r3, [pc, #216]	@ (800ca04 <xTaskIncrementTick+0x15c>)
 800c92a:	f04f 32ff 	mov.w	r2, #4294967295
 800c92e:	601a      	str	r2, [r3, #0]
					break;
 800c930:	e03f      	b.n	800c9b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c932:	4b31      	ldr	r3, [pc, #196]	@ (800c9f8 <xTaskIncrementTick+0x150>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	429a      	cmp	r2, r3
 800c948:	d203      	bcs.n	800c952 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c94a:	4a2e      	ldr	r2, [pc, #184]	@ (800ca04 <xTaskIncrementTick+0x15c>)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c950:	e02f      	b.n	800c9b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3304      	adds	r3, #4
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fec4 	bl	800b6e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c960:	2b00      	cmp	r3, #0
 800c962:	d004      	beq.n	800c96e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	3318      	adds	r3, #24
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fe febb 	bl	800b6e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c972:	4b25      	ldr	r3, [pc, #148]	@ (800ca08 <xTaskIncrementTick+0x160>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d903      	bls.n	800c982 <xTaskIncrementTick+0xda>
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97e:	4a22      	ldr	r2, [pc, #136]	@ (800ca08 <xTaskIncrementTick+0x160>)
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c986:	4613      	mov	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4a1f      	ldr	r2, [pc, #124]	@ (800ca0c <xTaskIncrementTick+0x164>)
 800c990:	441a      	add	r2, r3
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	3304      	adds	r3, #4
 800c996:	4619      	mov	r1, r3
 800c998:	4610      	mov	r0, r2
 800c99a:	f7fe fe46 	bl	800b62a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca10 <xTaskIncrementTick+0x168>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d3b8      	bcc.n	800c91e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9b0:	e7b5      	b.n	800c91e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9b2:	4b17      	ldr	r3, [pc, #92]	@ (800ca10 <xTaskIncrementTick+0x168>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b8:	4914      	ldr	r1, [pc, #80]	@ (800ca0c <xTaskIncrementTick+0x164>)
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d901      	bls.n	800c9ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c9ce:	4b11      	ldr	r3, [pc, #68]	@ (800ca14 <xTaskIncrementTick+0x16c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d007      	beq.n	800c9e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	617b      	str	r3, [r7, #20]
 800c9da:	e004      	b.n	800c9e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c9dc:	4b0e      	ldr	r3, [pc, #56]	@ (800ca18 <xTaskIncrementTick+0x170>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	4a0d      	ldr	r2, [pc, #52]	@ (800ca18 <xTaskIncrementTick+0x170>)
 800c9e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c9e6:	697b      	ldr	r3, [r7, #20]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3718      	adds	r7, #24
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	24001068 	.word	0x24001068
 800c9f4:	24001044 	.word	0x24001044
 800c9f8:	24000ff8 	.word	0x24000ff8
 800c9fc:	24000ffc 	.word	0x24000ffc
 800ca00:	24001058 	.word	0x24001058
 800ca04:	24001060 	.word	0x24001060
 800ca08:	24001048 	.word	0x24001048
 800ca0c:	24000b70 	.word	0x24000b70
 800ca10:	24000b6c 	.word	0x24000b6c
 800ca14:	24001054 	.word	0x24001054
 800ca18:	24001050 	.word	0x24001050

0800ca1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca22:	4b28      	ldr	r3, [pc, #160]	@ (800cac4 <vTaskSwitchContext+0xa8>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d003      	beq.n	800ca32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca2a:	4b27      	ldr	r3, [pc, #156]	@ (800cac8 <vTaskSwitchContext+0xac>)
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca30:	e042      	b.n	800cab8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ca32:	4b25      	ldr	r3, [pc, #148]	@ (800cac8 <vTaskSwitchContext+0xac>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca38:	4b24      	ldr	r3, [pc, #144]	@ (800cacc <vTaskSwitchContext+0xb0>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e011      	b.n	800ca64 <vTaskSwitchContext+0x48>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10b      	bne.n	800ca5e <vTaskSwitchContext+0x42>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	607b      	str	r3, [r7, #4]
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	e7fd      	b.n	800ca5a <vTaskSwitchContext+0x3e>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3b01      	subs	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	491a      	ldr	r1, [pc, #104]	@ (800cad0 <vTaskSwitchContext+0xb4>)
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	440b      	add	r3, r1
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d0e3      	beq.n	800ca40 <vTaskSwitchContext+0x24>
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4a13      	ldr	r2, [pc, #76]	@ (800cad0 <vTaskSwitchContext+0xb4>)
 800ca84:	4413      	add	r3, r2
 800ca86:	60bb      	str	r3, [r7, #8]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	3308      	adds	r3, #8
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d104      	bne.n	800caa8 <vTaskSwitchContext+0x8c>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	605a      	str	r2, [r3, #4]
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	4a09      	ldr	r2, [pc, #36]	@ (800cad4 <vTaskSwitchContext+0xb8>)
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	4a06      	ldr	r2, [pc, #24]	@ (800cacc <vTaskSwitchContext+0xb0>)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6013      	str	r3, [r2, #0]
}
 800cab8:	bf00      	nop
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	24001068 	.word	0x24001068
 800cac8:	24001054 	.word	0x24001054
 800cacc:	24001048 	.word	0x24001048
 800cad0:	24000b70 	.word	0x24000b70
 800cad4:	24000b6c 	.word	0x24000b6c

0800cad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10b      	bne.n	800cb00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	60fb      	str	r3, [r7, #12]
}
 800cafa:	bf00      	nop
 800cafc:	bf00      	nop
 800cafe:	e7fd      	b.n	800cafc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb00:	4b07      	ldr	r3, [pc, #28]	@ (800cb20 <vTaskPlaceOnEventList+0x48>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3318      	adds	r3, #24
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7fe fdb2 	bl	800b672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb0e:	2101      	movs	r1, #1
 800cb10:	6838      	ldr	r0, [r7, #0]
 800cb12:	f000 fa81 	bl	800d018 <prvAddCurrentTaskToDelayedList>
}
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	24000b6c 	.word	0x24000b6c

0800cb24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10b      	bne.n	800cb4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	617b      	str	r3, [r7, #20]
}
 800cb48:	bf00      	nop
 800cb4a:	bf00      	nop
 800cb4c:	e7fd      	b.n	800cb4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb4e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb78 <vTaskPlaceOnEventListRestricted+0x54>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3318      	adds	r3, #24
 800cb54:	4619      	mov	r1, r3
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f7fe fd67 	bl	800b62a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d002      	beq.n	800cb68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cb62:	f04f 33ff 	mov.w	r3, #4294967295
 800cb66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	68b8      	ldr	r0, [r7, #8]
 800cb6c:	f000 fa54 	bl	800d018 <prvAddCurrentTaskToDelayedList>
	}
 800cb70:	bf00      	nop
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	24000b6c 	.word	0x24000b6c

0800cb7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10b      	bne.n	800cbaa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60fb      	str	r3, [r7, #12]
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	e7fd      	b.n	800cba6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	3318      	adds	r3, #24
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe fd98 	bl	800b6e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbb4:	4b1d      	ldr	r3, [pc, #116]	@ (800cc2c <xTaskRemoveFromEventList+0xb0>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d11d      	bne.n	800cbf8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe fd8f 	bl	800b6e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbca:	4b19      	ldr	r3, [pc, #100]	@ (800cc30 <xTaskRemoveFromEventList+0xb4>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d903      	bls.n	800cbda <xTaskRemoveFromEventList+0x5e>
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd6:	4a16      	ldr	r2, [pc, #88]	@ (800cc30 <xTaskRemoveFromEventList+0xb4>)
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4a13      	ldr	r2, [pc, #76]	@ (800cc34 <xTaskRemoveFromEventList+0xb8>)
 800cbe8:	441a      	add	r2, r3
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	3304      	adds	r3, #4
 800cbee:	4619      	mov	r1, r3
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	f7fe fd1a 	bl	800b62a <vListInsertEnd>
 800cbf6:	e005      	b.n	800cc04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	3318      	adds	r3, #24
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	480e      	ldr	r0, [pc, #56]	@ (800cc38 <xTaskRemoveFromEventList+0xbc>)
 800cc00:	f7fe fd13 	bl	800b62a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc08:	4b0c      	ldr	r3, [pc, #48]	@ (800cc3c <xTaskRemoveFromEventList+0xc0>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d905      	bls.n	800cc1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc12:	2301      	movs	r3, #1
 800cc14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc16:	4b0a      	ldr	r3, [pc, #40]	@ (800cc40 <xTaskRemoveFromEventList+0xc4>)
 800cc18:	2201      	movs	r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	e001      	b.n	800cc22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc22:	697b      	ldr	r3, [r7, #20]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	24001068 	.word	0x24001068
 800cc30:	24001048 	.word	0x24001048
 800cc34:	24000b70 	.word	0x24000b70
 800cc38:	24001000 	.word	0x24001000
 800cc3c:	24000b6c 	.word	0x24000b6c
 800cc40:	24001054 	.word	0x24001054

0800cc44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <vTaskInternalSetTimeOutState+0x24>)
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc54:	4b05      	ldr	r3, [pc, #20]	@ (800cc6c <vTaskInternalSetTimeOutState+0x28>)
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	605a      	str	r2, [r3, #4]
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	24001058 	.word	0x24001058
 800cc6c:	24001044 	.word	0x24001044

0800cc70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10b      	bne.n	800cc98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	613b      	str	r3, [r7, #16]
}
 800cc92:	bf00      	nop
 800cc94:	bf00      	nop
 800cc96:	e7fd      	b.n	800cc94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10b      	bne.n	800ccb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60fb      	str	r3, [r7, #12]
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	e7fd      	b.n	800ccb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ccb6:	f000 fe8f 	bl	800d9d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccba:	4b1d      	ldr	r3, [pc, #116]	@ (800cd30 <xTaskCheckForTimeOut+0xc0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd2:	d102      	bne.n	800ccda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	61fb      	str	r3, [r7, #28]
 800ccd8:	e023      	b.n	800cd22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	4b15      	ldr	r3, [pc, #84]	@ (800cd34 <xTaskCheckForTimeOut+0xc4>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d007      	beq.n	800ccf6 <xTaskCheckForTimeOut+0x86>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d302      	bcc.n	800ccf6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	61fb      	str	r3, [r7, #28]
 800ccf4:	e015      	b.n	800cd22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d20b      	bcs.n	800cd18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	1ad2      	subs	r2, r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff ff99 	bl	800cc44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd12:	2300      	movs	r3, #0
 800cd14:	61fb      	str	r3, [r7, #28]
 800cd16:	e004      	b.n	800cd22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd22:	f000 fe8b 	bl	800da3c <vPortExitCritical>

	return xReturn;
 800cd26:	69fb      	ldr	r3, [r7, #28]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3720      	adds	r7, #32
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	24001044 	.word	0x24001044
 800cd34:	24001058 	.word	0x24001058

0800cd38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd38:	b480      	push	{r7}
 800cd3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd3c:	4b03      	ldr	r3, [pc, #12]	@ (800cd4c <vTaskMissedYield+0x14>)
 800cd3e:	2201      	movs	r2, #1
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	24001054 	.word	0x24001054

0800cd50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd58:	f000 f852 	bl	800ce00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd5c:	4b06      	ldr	r3, [pc, #24]	@ (800cd78 <prvIdleTask+0x28>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d9f9      	bls.n	800cd58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd64:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <prvIdleTask+0x2c>)
 800cd66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd74:	e7f0      	b.n	800cd58 <prvIdleTask+0x8>
 800cd76:	bf00      	nop
 800cd78:	24000b70 	.word	0x24000b70
 800cd7c:	e000ed04 	.word	0xe000ed04

0800cd80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd86:	2300      	movs	r3, #0
 800cd88:	607b      	str	r3, [r7, #4]
 800cd8a:	e00c      	b.n	800cda6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4a12      	ldr	r2, [pc, #72]	@ (800cde0 <prvInitialiseTaskLists+0x60>)
 800cd98:	4413      	add	r3, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fc18 	bl	800b5d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3301      	adds	r3, #1
 800cda4:	607b      	str	r3, [r7, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b37      	cmp	r3, #55	@ 0x37
 800cdaa:	d9ef      	bls.n	800cd8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdac:	480d      	ldr	r0, [pc, #52]	@ (800cde4 <prvInitialiseTaskLists+0x64>)
 800cdae:	f7fe fc0f 	bl	800b5d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdb2:	480d      	ldr	r0, [pc, #52]	@ (800cde8 <prvInitialiseTaskLists+0x68>)
 800cdb4:	f7fe fc0c 	bl	800b5d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdb8:	480c      	ldr	r0, [pc, #48]	@ (800cdec <prvInitialiseTaskLists+0x6c>)
 800cdba:	f7fe fc09 	bl	800b5d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdbe:	480c      	ldr	r0, [pc, #48]	@ (800cdf0 <prvInitialiseTaskLists+0x70>)
 800cdc0:	f7fe fc06 	bl	800b5d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdc4:	480b      	ldr	r0, [pc, #44]	@ (800cdf4 <prvInitialiseTaskLists+0x74>)
 800cdc6:	f7fe fc03 	bl	800b5d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdca:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf8 <prvInitialiseTaskLists+0x78>)
 800cdcc:	4a05      	ldr	r2, [pc, #20]	@ (800cde4 <prvInitialiseTaskLists+0x64>)
 800cdce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cdfc <prvInitialiseTaskLists+0x7c>)
 800cdd2:	4a05      	ldr	r2, [pc, #20]	@ (800cde8 <prvInitialiseTaskLists+0x68>)
 800cdd4:	601a      	str	r2, [r3, #0]
}
 800cdd6:	bf00      	nop
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	24000b70 	.word	0x24000b70
 800cde4:	24000fd0 	.word	0x24000fd0
 800cde8:	24000fe4 	.word	0x24000fe4
 800cdec:	24001000 	.word	0x24001000
 800cdf0:	24001014 	.word	0x24001014
 800cdf4:	2400102c 	.word	0x2400102c
 800cdf8:	24000ff8 	.word	0x24000ff8
 800cdfc:	24000ffc 	.word	0x24000ffc

0800ce00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce06:	e019      	b.n	800ce3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce08:	f000 fde6 	bl	800d9d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce0c:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <prvCheckTasksWaitingTermination+0x50>)
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3304      	adds	r3, #4
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fc63 	bl	800b6e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce54 <prvCheckTasksWaitingTermination+0x54>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	4a0b      	ldr	r2, [pc, #44]	@ (800ce54 <prvCheckTasksWaitingTermination+0x54>)
 800ce26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce28:	4b0b      	ldr	r3, [pc, #44]	@ (800ce58 <prvCheckTasksWaitingTermination+0x58>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ce58 <prvCheckTasksWaitingTermination+0x58>)
 800ce30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce32:	f000 fe03 	bl	800da3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f810 	bl	800ce5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce3c:	4b06      	ldr	r3, [pc, #24]	@ (800ce58 <prvCheckTasksWaitingTermination+0x58>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e1      	bne.n	800ce08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	24001014 	.word	0x24001014
 800ce54:	24001040 	.word	0x24001040
 800ce58:	24001028 	.word	0x24001028

0800ce5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d108      	bne.n	800ce80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 ffa0 	bl	800ddb8 <vPortFree>
				vPortFree( pxTCB );
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 ff9d 	bl	800ddb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce7e:	e019      	b.n	800ceb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d103      	bne.n	800ce92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 ff94 	bl	800ddb8 <vPortFree>
	}
 800ce90:	e010      	b.n	800ceb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d00b      	beq.n	800ceb4 <prvDeleteTCB+0x58>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	60fb      	str	r3, [r7, #12]
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	e7fd      	b.n	800ceb0 <prvDeleteTCB+0x54>
	}
 800ceb4:	bf00      	nop
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cec2:	4b0c      	ldr	r3, [pc, #48]	@ (800cef4 <prvResetNextTaskUnblockTime+0x38>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d104      	bne.n	800ced6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	@ (800cef8 <prvResetNextTaskUnblockTime+0x3c>)
 800cece:	f04f 32ff 	mov.w	r2, #4294967295
 800ced2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ced4:	e008      	b.n	800cee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ced6:	4b07      	ldr	r3, [pc, #28]	@ (800cef4 <prvResetNextTaskUnblockTime+0x38>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4a04      	ldr	r2, [pc, #16]	@ (800cef8 <prvResetNextTaskUnblockTime+0x3c>)
 800cee6:	6013      	str	r3, [r2, #0]
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	24000ff8 	.word	0x24000ff8
 800cef8:	24001060 	.word	0x24001060

0800cefc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf02:	4b0b      	ldr	r3, [pc, #44]	@ (800cf30 <xTaskGetSchedulerState+0x34>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	607b      	str	r3, [r7, #4]
 800cf0e:	e008      	b.n	800cf22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf10:	4b08      	ldr	r3, [pc, #32]	@ (800cf34 <xTaskGetSchedulerState+0x38>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf18:	2302      	movs	r3, #2
 800cf1a:	607b      	str	r3, [r7, #4]
 800cf1c:	e001      	b.n	800cf22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf22:	687b      	ldr	r3, [r7, #4]
	}
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	2400104c 	.word	0x2400104c
 800cf34:	24001068 	.word	0x24001068

0800cf38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d058      	beq.n	800d000 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf4e:	4b2f      	ldr	r3, [pc, #188]	@ (800d00c <xTaskPriorityDisinherit+0xd4>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d00b      	beq.n	800cf70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	60fb      	str	r3, [r7, #12]
}
 800cf6a:	bf00      	nop
 800cf6c:	bf00      	nop
 800cf6e:	e7fd      	b.n	800cf6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	60bb      	str	r3, [r7, #8]
}
 800cf8a:	bf00      	nop
 800cf8c:	bf00      	nop
 800cf8e:	e7fd      	b.n	800cf8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf94:	1e5a      	subs	r2, r3, #1
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d02c      	beq.n	800d000 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d128      	bne.n	800d000 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fb96 	bl	800b6e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800d010 <xTaskPriorityDisinherit+0xd8>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d903      	bls.n	800cfe0 <xTaskPriorityDisinherit+0xa8>
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfdc:	4a0c      	ldr	r2, [pc, #48]	@ (800d010 <xTaskPriorityDisinherit+0xd8>)
 800cfde:	6013      	str	r3, [r2, #0]
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	4413      	add	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4a09      	ldr	r2, [pc, #36]	@ (800d014 <xTaskPriorityDisinherit+0xdc>)
 800cfee:	441a      	add	r2, r3
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	3304      	adds	r3, #4
 800cff4:	4619      	mov	r1, r3
 800cff6:	4610      	mov	r0, r2
 800cff8:	f7fe fb17 	bl	800b62a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d000:	697b      	ldr	r3, [r7, #20]
	}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	24000b6c 	.word	0x24000b6c
 800d010:	24001048 	.word	0x24001048
 800d014:	24000b70 	.word	0x24000b70

0800d018 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d022:	4b21      	ldr	r3, [pc, #132]	@ (800d0a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d028:	4b20      	ldr	r3, [pc, #128]	@ (800d0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fb58 	bl	800b6e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03a:	d10a      	bne.n	800d052 <prvAddCurrentTaskToDelayedList+0x3a>
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d007      	beq.n	800d052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d042:	4b1a      	ldr	r3, [pc, #104]	@ (800d0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3304      	adds	r3, #4
 800d048:	4619      	mov	r1, r3
 800d04a:	4819      	ldr	r0, [pc, #100]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d04c:	f7fe faed 	bl	800b62a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d050:	e026      	b.n	800d0a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4413      	add	r3, r2
 800d058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d05a:	4b14      	ldr	r3, [pc, #80]	@ (800d0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	429a      	cmp	r2, r3
 800d068:	d209      	bcs.n	800d07e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d06a:	4b12      	ldr	r3, [pc, #72]	@ (800d0b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	4b0f      	ldr	r3, [pc, #60]	@ (800d0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3304      	adds	r3, #4
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f7fe fafb 	bl	800b672 <vListInsert>
}
 800d07c:	e010      	b.n	800d0a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d07e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	4b0a      	ldr	r3, [pc, #40]	@ (800d0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3304      	adds	r3, #4
 800d088:	4619      	mov	r1, r3
 800d08a:	4610      	mov	r0, r2
 800d08c:	f7fe faf1 	bl	800b672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d090:	4b0a      	ldr	r3, [pc, #40]	@ (800d0bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	429a      	cmp	r2, r3
 800d098:	d202      	bcs.n	800d0a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d09a:	4a08      	ldr	r2, [pc, #32]	@ (800d0bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	6013      	str	r3, [r2, #0]
}
 800d0a0:	bf00      	nop
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	24001044 	.word	0x24001044
 800d0ac:	24000b6c 	.word	0x24000b6c
 800d0b0:	2400102c 	.word	0x2400102c
 800d0b4:	24000ffc 	.word	0x24000ffc
 800d0b8:	24000ff8 	.word	0x24000ff8
 800d0bc:	24001060 	.word	0x24001060

0800d0c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	@ 0x28
 800d0c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0ca:	f000 fb13 	bl	800d6f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800d144 <xTimerCreateTimerTask+0x84>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d021      	beq.n	800d11a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0de:	1d3a      	adds	r2, r7, #4
 800d0e0:	f107 0108 	add.w	r1, r7, #8
 800d0e4:	f107 030c 	add.w	r3, r7, #12
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fe fa57 	bl	800b59c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0ee:	6879      	ldr	r1, [r7, #4]
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	9202      	str	r2, [sp, #8]
 800d0f6:	9301      	str	r3, [sp, #4]
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	460a      	mov	r2, r1
 800d100:	4911      	ldr	r1, [pc, #68]	@ (800d148 <xTimerCreateTimerTask+0x88>)
 800d102:	4812      	ldr	r0, [pc, #72]	@ (800d14c <xTimerCreateTimerTask+0x8c>)
 800d104:	f7ff f8d0 	bl	800c2a8 <xTaskCreateStatic>
 800d108:	4603      	mov	r3, r0
 800d10a:	4a11      	ldr	r2, [pc, #68]	@ (800d150 <xTimerCreateTimerTask+0x90>)
 800d10c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d10e:	4b10      	ldr	r3, [pc, #64]	@ (800d150 <xTimerCreateTimerTask+0x90>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d116:	2301      	movs	r3, #1
 800d118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10b      	bne.n	800d138 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	613b      	str	r3, [r7, #16]
}
 800d132:	bf00      	nop
 800d134:	bf00      	nop
 800d136:	e7fd      	b.n	800d134 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d138:	697b      	ldr	r3, [r7, #20]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	2400109c 	.word	0x2400109c
 800d148:	08012f80 	.word	0x08012f80
 800d14c:	0800d28d 	.word	0x0800d28d
 800d150:	240010a0 	.word	0x240010a0

0800d154 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b08a      	sub	sp, #40	@ 0x28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d162:	2300      	movs	r3, #0
 800d164:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10b      	bne.n	800d184 <xTimerGenericCommand+0x30>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	623b      	str	r3, [r7, #32]
}
 800d17e:	bf00      	nop
 800d180:	bf00      	nop
 800d182:	e7fd      	b.n	800d180 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d184:	4b19      	ldr	r3, [pc, #100]	@ (800d1ec <xTimerGenericCommand+0x98>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02a      	beq.n	800d1e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2b05      	cmp	r3, #5
 800d19c:	dc18      	bgt.n	800d1d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d19e:	f7ff fead 	bl	800cefc <xTaskGetSchedulerState>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d109      	bne.n	800d1bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1a8:	4b10      	ldr	r3, [pc, #64]	@ (800d1ec <xTimerGenericCommand+0x98>)
 800d1aa:	6818      	ldr	r0, [r3, #0]
 800d1ac:	f107 0110 	add.w	r1, r7, #16
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1b4:	f7fe fc06 	bl	800b9c4 <xQueueGenericSend>
 800d1b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1ba:	e012      	b.n	800d1e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d1ec <xTimerGenericCommand+0x98>)
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	f107 0110 	add.w	r1, r7, #16
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f7fe fbfc 	bl	800b9c4 <xQueueGenericSend>
 800d1cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1ce:	e008      	b.n	800d1e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1d0:	4b06      	ldr	r3, [pc, #24]	@ (800d1ec <xTimerGenericCommand+0x98>)
 800d1d2:	6818      	ldr	r0, [r3, #0]
 800d1d4:	f107 0110 	add.w	r1, r7, #16
 800d1d8:	2300      	movs	r3, #0
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	f7fe fcf4 	bl	800bbc8 <xQueueGenericSendFromISR>
 800d1e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3728      	adds	r7, #40	@ 0x28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	2400109c 	.word	0x2400109c

0800d1f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af02      	add	r7, sp, #8
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1fa:	4b23      	ldr	r3, [pc, #140]	@ (800d288 <prvProcessExpiredTimer+0x98>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	3304      	adds	r3, #4
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fe fa6b 	bl	800b6e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d214:	f003 0304 	and.w	r3, r3, #4
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d023      	beq.n	800d264 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	699a      	ldr	r2, [r3, #24]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	18d1      	adds	r1, r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	6978      	ldr	r0, [r7, #20]
 800d22a:	f000 f8d5 	bl	800d3d8 <prvInsertTimerInActiveList>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d020      	beq.n	800d276 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d234:	2300      	movs	r3, #0
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	2300      	movs	r3, #0
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	2100      	movs	r1, #0
 800d23e:	6978      	ldr	r0, [r7, #20]
 800d240:	f7ff ff88 	bl	800d154 <xTimerGenericCommand>
 800d244:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d114      	bne.n	800d276 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	60fb      	str	r3, [r7, #12]
}
 800d25e:	bf00      	nop
 800d260:	bf00      	nop
 800d262:	e7fd      	b.n	800d260 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d26a:	f023 0301 	bic.w	r3, r3, #1
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	6978      	ldr	r0, [r7, #20]
 800d27c:	4798      	blx	r3
}
 800d27e:	bf00      	nop
 800d280:	3718      	adds	r7, #24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	24001094 	.word	0x24001094

0800d28c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d294:	f107 0308 	add.w	r3, r7, #8
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f859 	bl	800d350 <prvGetNextExpireTime>
 800d29e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f000 f805 	bl	800d2b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d2aa:	f000 f8d7 	bl	800d45c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2ae:	bf00      	nop
 800d2b0:	e7f0      	b.n	800d294 <prvTimerTask+0x8>
	...

0800d2b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d2be:	f7ff fa37 	bl	800c730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2c2:	f107 0308 	add.w	r3, r7, #8
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f000 f866 	bl	800d398 <prvSampleTimeNow>
 800d2cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d130      	bne.n	800d336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10a      	bne.n	800d2f0 <prvProcessTimerOrBlockTask+0x3c>
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d806      	bhi.n	800d2f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d2e2:	f7ff fa33 	bl	800c74c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d2e6:	68f9      	ldr	r1, [r7, #12]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7ff ff81 	bl	800d1f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d2ee:	e024      	b.n	800d33a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d008      	beq.n	800d308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2f6:	4b13      	ldr	r3, [pc, #76]	@ (800d344 <prvProcessTimerOrBlockTask+0x90>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <prvProcessTimerOrBlockTask+0x50>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <prvProcessTimerOrBlockTask+0x52>
 800d304:	2300      	movs	r3, #0
 800d306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d308:	4b0f      	ldr	r3, [pc, #60]	@ (800d348 <prvProcessTimerOrBlockTask+0x94>)
 800d30a:	6818      	ldr	r0, [r3, #0]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4619      	mov	r1, r3
 800d316:	f7fe ff93 	bl	800c240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d31a:	f7ff fa17 	bl	800c74c <xTaskResumeAll>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10a      	bne.n	800d33a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d324:	4b09      	ldr	r3, [pc, #36]	@ (800d34c <prvProcessTimerOrBlockTask+0x98>)
 800d326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	f3bf 8f6f 	isb	sy
}
 800d334:	e001      	b.n	800d33a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d336:	f7ff fa09 	bl	800c74c <xTaskResumeAll>
}
 800d33a:	bf00      	nop
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	24001098 	.word	0x24001098
 800d348:	2400109c 	.word	0x2400109c
 800d34c:	e000ed04 	.word	0xe000ed04

0800d350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d358:	4b0e      	ldr	r3, [pc, #56]	@ (800d394 <prvGetNextExpireTime+0x44>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <prvGetNextExpireTime+0x16>
 800d362:	2201      	movs	r2, #1
 800d364:	e000      	b.n	800d368 <prvGetNextExpireTime+0x18>
 800d366:	2200      	movs	r2, #0
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d105      	bne.n	800d380 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d374:	4b07      	ldr	r3, [pc, #28]	@ (800d394 <prvGetNextExpireTime+0x44>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	e001      	b.n	800d384 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d380:	2300      	movs	r3, #0
 800d382:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d384:	68fb      	ldr	r3, [r7, #12]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	24001094 	.word	0x24001094

0800d398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d3a0:	f7ff fa72 	bl	800c888 <xTaskGetTickCount>
 800d3a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d3d4 <prvSampleTimeNow+0x3c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d205      	bcs.n	800d3bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d3b0:	f000 f93a 	bl	800d628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	e002      	b.n	800d3c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d3c2:	4a04      	ldr	r2, [pc, #16]	@ (800d3d4 <prvSampleTimeNow+0x3c>)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	240010a4 	.word	0x240010a4

0800d3d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
 800d3e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d812      	bhi.n	800d424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	1ad2      	subs	r2, r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d302      	bcc.n	800d412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d40c:	2301      	movs	r3, #1
 800d40e:	617b      	str	r3, [r7, #20]
 800d410:	e01b      	b.n	800d44a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d412:	4b10      	ldr	r3, [pc, #64]	@ (800d454 <prvInsertTimerInActiveList+0x7c>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3304      	adds	r3, #4
 800d41a:	4619      	mov	r1, r3
 800d41c:	4610      	mov	r0, r2
 800d41e:	f7fe f928 	bl	800b672 <vListInsert>
 800d422:	e012      	b.n	800d44a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d206      	bcs.n	800d43a <prvInsertTimerInActiveList+0x62>
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d302      	bcc.n	800d43a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d434:	2301      	movs	r3, #1
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e007      	b.n	800d44a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d43a:	4b07      	ldr	r3, [pc, #28]	@ (800d458 <prvInsertTimerInActiveList+0x80>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	3304      	adds	r3, #4
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7fe f914 	bl	800b672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d44a:	697b      	ldr	r3, [r7, #20]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	24001098 	.word	0x24001098
 800d458:	24001094 	.word	0x24001094

0800d45c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08e      	sub	sp, #56	@ 0x38
 800d460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d462:	e0ce      	b.n	800d602 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	da19      	bge.n	800d49e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d46a:	1d3b      	adds	r3, r7, #4
 800d46c:	3304      	adds	r3, #4
 800d46e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10b      	bne.n	800d48e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	61fb      	str	r3, [r7, #28]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d494:	6850      	ldr	r0, [r2, #4]
 800d496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d498:	6892      	ldr	r2, [r2, #8]
 800d49a:	4611      	mov	r1, r2
 800d49c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f2c0 80ae 	blt.w	800d602 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d004      	beq.n	800d4bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe f914 	bl	800b6e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4bc:	463b      	mov	r3, r7
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff ff6a 	bl	800d398 <prvSampleTimeNow>
 800d4c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b09      	cmp	r3, #9
 800d4ca:	f200 8097 	bhi.w	800d5fc <prvProcessReceivedCommands+0x1a0>
 800d4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d4 <prvProcessReceivedCommands+0x78>)
 800d4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d4:	0800d4fd 	.word	0x0800d4fd
 800d4d8:	0800d4fd 	.word	0x0800d4fd
 800d4dc:	0800d4fd 	.word	0x0800d4fd
 800d4e0:	0800d573 	.word	0x0800d573
 800d4e4:	0800d587 	.word	0x0800d587
 800d4e8:	0800d5d3 	.word	0x0800d5d3
 800d4ec:	0800d4fd 	.word	0x0800d4fd
 800d4f0:	0800d4fd 	.word	0x0800d4fd
 800d4f4:	0800d573 	.word	0x0800d573
 800d4f8:	0800d587 	.word	0x0800d587
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d502:	f043 0301 	orr.w	r3, r3, #1
 800d506:	b2da      	uxtb	r2, r3
 800d508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	18d1      	adds	r1, r2, r3
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d51c:	f7ff ff5c 	bl	800d3d8 <prvInsertTimerInActiveList>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d06c      	beq.n	800d600 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d52c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d061      	beq.n	800d600 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	441a      	add	r2, r3
 800d544:	2300      	movs	r3, #0
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	2300      	movs	r3, #0
 800d54a:	2100      	movs	r1, #0
 800d54c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d54e:	f7ff fe01 	bl	800d154 <xTimerGenericCommand>
 800d552:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d152      	bne.n	800d600 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	61bb      	str	r3, [r7, #24]
}
 800d56c:	bf00      	nop
 800d56e:	bf00      	nop
 800d570:	e7fd      	b.n	800d56e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d578:	f023 0301 	bic.w	r3, r3, #1
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d580:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d584:	e03d      	b.n	800d602 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d58c:	f043 0301 	orr.w	r3, r3, #1
 800d590:	b2da      	uxtb	r2, r3
 800d592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d594:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	699b      	ldr	r3, [r3, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10b      	bne.n	800d5be <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	617b      	str	r3, [r7, #20]
}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	e7fd      	b.n	800d5ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c0:	699a      	ldr	r2, [r3, #24]
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c4:	18d1      	adds	r1, r2, r3
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5cc:	f7ff ff04 	bl	800d3d8 <prvInsertTimerInActiveList>
					break;
 800d5d0:	e017      	b.n	800d602 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d103      	bne.n	800d5e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d5e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5e2:	f000 fbe9 	bl	800ddb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5e6:	e00c      	b.n	800d602 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5ee:	f023 0301 	bic.w	r3, r3, #1
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d5fa:	e002      	b.n	800d602 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d5fc:	bf00      	nop
 800d5fe:	e000      	b.n	800d602 <prvProcessReceivedCommands+0x1a6>
					break;
 800d600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d602:	4b08      	ldr	r3, [pc, #32]	@ (800d624 <prvProcessReceivedCommands+0x1c8>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	1d39      	adds	r1, r7, #4
 800d608:	2200      	movs	r2, #0
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe fb7a 	bl	800bd04 <xQueueReceive>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	f47f af26 	bne.w	800d464 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d618:	bf00      	nop
 800d61a:	bf00      	nop
 800d61c:	3730      	adds	r7, #48	@ 0x30
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	2400109c 	.word	0x2400109c

0800d628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b088      	sub	sp, #32
 800d62c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d62e:	e049      	b.n	800d6c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d630:	4b2e      	ldr	r3, [pc, #184]	@ (800d6ec <prvSwitchTimerLists+0xc4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d63a:	4b2c      	ldr	r3, [pc, #176]	@ (800d6ec <prvSwitchTimerLists+0xc4>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	3304      	adds	r3, #4
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe f84b 	bl	800b6e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d65c:	f003 0304 	and.w	r3, r3, #4
 800d660:	2b00      	cmp	r3, #0
 800d662:	d02f      	beq.n	800d6c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	4413      	add	r3, r2
 800d66c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	429a      	cmp	r2, r3
 800d674:	d90e      	bls.n	800d694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	68ba      	ldr	r2, [r7, #8]
 800d67a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d682:	4b1a      	ldr	r3, [pc, #104]	@ (800d6ec <prvSwitchTimerLists+0xc4>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	3304      	adds	r3, #4
 800d68a:	4619      	mov	r1, r3
 800d68c:	4610      	mov	r0, r2
 800d68e:	f7fd fff0 	bl	800b672 <vListInsert>
 800d692:	e017      	b.n	800d6c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d694:	2300      	movs	r3, #0
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	2300      	movs	r3, #0
 800d69a:	693a      	ldr	r2, [r7, #16]
 800d69c:	2100      	movs	r1, #0
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7ff fd58 	bl	800d154 <xTimerGenericCommand>
 800d6a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10b      	bne.n	800d6c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	603b      	str	r3, [r7, #0]
}
 800d6be:	bf00      	nop
 800d6c0:	bf00      	nop
 800d6c2:	e7fd      	b.n	800d6c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6c4:	4b09      	ldr	r3, [pc, #36]	@ (800d6ec <prvSwitchTimerLists+0xc4>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1b0      	bne.n	800d630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6ce:	4b07      	ldr	r3, [pc, #28]	@ (800d6ec <prvSwitchTimerLists+0xc4>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6d4:	4b06      	ldr	r3, [pc, #24]	@ (800d6f0 <prvSwitchTimerLists+0xc8>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a04      	ldr	r2, [pc, #16]	@ (800d6ec <prvSwitchTimerLists+0xc4>)
 800d6da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6dc:	4a04      	ldr	r2, [pc, #16]	@ (800d6f0 <prvSwitchTimerLists+0xc8>)
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	6013      	str	r3, [r2, #0]
}
 800d6e2:	bf00      	nop
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	24001094 	.word	0x24001094
 800d6f0:	24001098 	.word	0x24001098

0800d6f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6fa:	f000 f96d 	bl	800d9d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6fe:	4b15      	ldr	r3, [pc, #84]	@ (800d754 <prvCheckForValidListAndQueue+0x60>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d120      	bne.n	800d748 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d706:	4814      	ldr	r0, [pc, #80]	@ (800d758 <prvCheckForValidListAndQueue+0x64>)
 800d708:	f7fd ff62 	bl	800b5d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d70c:	4813      	ldr	r0, [pc, #76]	@ (800d75c <prvCheckForValidListAndQueue+0x68>)
 800d70e:	f7fd ff5f 	bl	800b5d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d712:	4b13      	ldr	r3, [pc, #76]	@ (800d760 <prvCheckForValidListAndQueue+0x6c>)
 800d714:	4a10      	ldr	r2, [pc, #64]	@ (800d758 <prvCheckForValidListAndQueue+0x64>)
 800d716:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d718:	4b12      	ldr	r3, [pc, #72]	@ (800d764 <prvCheckForValidListAndQueue+0x70>)
 800d71a:	4a10      	ldr	r2, [pc, #64]	@ (800d75c <prvCheckForValidListAndQueue+0x68>)
 800d71c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d71e:	2300      	movs	r3, #0
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	4b11      	ldr	r3, [pc, #68]	@ (800d768 <prvCheckForValidListAndQueue+0x74>)
 800d724:	4a11      	ldr	r2, [pc, #68]	@ (800d76c <prvCheckForValidListAndQueue+0x78>)
 800d726:	2110      	movs	r1, #16
 800d728:	200a      	movs	r0, #10
 800d72a:	f7fe f86f 	bl	800b80c <xQueueGenericCreateStatic>
 800d72e:	4603      	mov	r3, r0
 800d730:	4a08      	ldr	r2, [pc, #32]	@ (800d754 <prvCheckForValidListAndQueue+0x60>)
 800d732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d734:	4b07      	ldr	r3, [pc, #28]	@ (800d754 <prvCheckForValidListAndQueue+0x60>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d73c:	4b05      	ldr	r3, [pc, #20]	@ (800d754 <prvCheckForValidListAndQueue+0x60>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	490b      	ldr	r1, [pc, #44]	@ (800d770 <prvCheckForValidListAndQueue+0x7c>)
 800d742:	4618      	mov	r0, r3
 800d744:	f7fe fd52 	bl	800c1ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d748:	f000 f978 	bl	800da3c <vPortExitCritical>
}
 800d74c:	bf00      	nop
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2400109c 	.word	0x2400109c
 800d758:	2400106c 	.word	0x2400106c
 800d75c:	24001080 	.word	0x24001080
 800d760:	24001094 	.word	0x24001094
 800d764:	24001098 	.word	0x24001098
 800d768:	24001148 	.word	0x24001148
 800d76c:	240010a8 	.word	0x240010a8
 800d770:	08012f88 	.word	0x08012f88

0800d774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3b04      	subs	r3, #4
 800d784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3b04      	subs	r3, #4
 800d792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f023 0201 	bic.w	r2, r3, #1
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	3b04      	subs	r3, #4
 800d7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d7a4:	4a0c      	ldr	r2, [pc, #48]	@ (800d7d8 <pxPortInitialiseStack+0x64>)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3b14      	subs	r3, #20
 800d7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3b04      	subs	r3, #4
 800d7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f06f 0202 	mvn.w	r2, #2
 800d7c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	3b20      	subs	r3, #32
 800d7c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	0800d7dd 	.word	0x0800d7dd

0800d7dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7e6:	4b13      	ldr	r3, [pc, #76]	@ (800d834 <prvTaskExitError+0x58>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ee:	d00b      	beq.n	800d808 <prvTaskExitError+0x2c>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	60fb      	str	r3, [r7, #12]
}
 800d802:	bf00      	nop
 800d804:	bf00      	nop
 800d806:	e7fd      	b.n	800d804 <prvTaskExitError+0x28>
	__asm volatile
 800d808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	60bb      	str	r3, [r7, #8]
}
 800d81a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d81c:	bf00      	nop
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0fc      	beq.n	800d81e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	2400001c 	.word	0x2400001c
	...

0800d840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d840:	4b07      	ldr	r3, [pc, #28]	@ (800d860 <pxCurrentTCBConst2>)
 800d842:	6819      	ldr	r1, [r3, #0]
 800d844:	6808      	ldr	r0, [r1, #0]
 800d846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84a:	f380 8809 	msr	PSP, r0
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f04f 0000 	mov.w	r0, #0
 800d856:	f380 8811 	msr	BASEPRI, r0
 800d85a:	4770      	bx	lr
 800d85c:	f3af 8000 	nop.w

0800d860 <pxCurrentTCBConst2>:
 800d860:	24000b6c 	.word	0x24000b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d864:	bf00      	nop
 800d866:	bf00      	nop

0800d868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d868:	4808      	ldr	r0, [pc, #32]	@ (800d88c <prvPortStartFirstTask+0x24>)
 800d86a:	6800      	ldr	r0, [r0, #0]
 800d86c:	6800      	ldr	r0, [r0, #0]
 800d86e:	f380 8808 	msr	MSP, r0
 800d872:	f04f 0000 	mov.w	r0, #0
 800d876:	f380 8814 	msr	CONTROL, r0
 800d87a:	b662      	cpsie	i
 800d87c:	b661      	cpsie	f
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	df00      	svc	0
 800d888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d88a:	bf00      	nop
 800d88c:	e000ed08 	.word	0xe000ed08

0800d890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d896:	4b47      	ldr	r3, [pc, #284]	@ (800d9b4 <xPortStartScheduler+0x124>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a47      	ldr	r2, [pc, #284]	@ (800d9b8 <xPortStartScheduler+0x128>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d10b      	bne.n	800d8b8 <xPortStartScheduler+0x28>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	60fb      	str	r3, [r7, #12]
}
 800d8b2:	bf00      	nop
 800d8b4:	bf00      	nop
 800d8b6:	e7fd      	b.n	800d8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d8b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d9b4 <xPortStartScheduler+0x124>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a3f      	ldr	r2, [pc, #252]	@ (800d9bc <xPortStartScheduler+0x12c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d10b      	bne.n	800d8da <xPortStartScheduler+0x4a>
	__asm volatile
 800d8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	613b      	str	r3, [r7, #16]
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	e7fd      	b.n	800d8d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8da:	4b39      	ldr	r3, [pc, #228]	@ (800d9c0 <xPortStartScheduler+0x130>)
 800d8dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	22ff      	movs	r2, #255	@ 0xff
 800d8ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4b31      	ldr	r3, [pc, #196]	@ (800d9c4 <xPortStartScheduler+0x134>)
 800d900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d902:	4b31      	ldr	r3, [pc, #196]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d904:	2207      	movs	r2, #7
 800d906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d908:	e009      	b.n	800d91e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d90a:	4b2f      	ldr	r3, [pc, #188]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	3b01      	subs	r3, #1
 800d910:	4a2d      	ldr	r2, [pc, #180]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	b2db      	uxtb	r3, r3
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	b2db      	uxtb	r3, r3
 800d922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d926:	2b80      	cmp	r3, #128	@ 0x80
 800d928:	d0ef      	beq.n	800d90a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d92a:	4b27      	ldr	r3, [pc, #156]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f1c3 0307 	rsb	r3, r3, #7
 800d932:	2b04      	cmp	r3, #4
 800d934:	d00b      	beq.n	800d94e <xPortStartScheduler+0xbe>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	60bb      	str	r3, [r7, #8]
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d94e:	4b1e      	ldr	r3, [pc, #120]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	021b      	lsls	r3, r3, #8
 800d954:	4a1c      	ldr	r2, [pc, #112]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d958:	4b1b      	ldr	r3, [pc, #108]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d960:	4a19      	ldr	r2, [pc, #100]	@ (800d9c8 <xPortStartScheduler+0x138>)
 800d962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	b2da      	uxtb	r2, r3
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d96c:	4b17      	ldr	r3, [pc, #92]	@ (800d9cc <xPortStartScheduler+0x13c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a16      	ldr	r2, [pc, #88]	@ (800d9cc <xPortStartScheduler+0x13c>)
 800d972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d978:	4b14      	ldr	r3, [pc, #80]	@ (800d9cc <xPortStartScheduler+0x13c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a13      	ldr	r2, [pc, #76]	@ (800d9cc <xPortStartScheduler+0x13c>)
 800d97e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d984:	f000 f8da 	bl	800db3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d988:	4b11      	ldr	r3, [pc, #68]	@ (800d9d0 <xPortStartScheduler+0x140>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d98e:	f000 f8f9 	bl	800db84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d992:	4b10      	ldr	r3, [pc, #64]	@ (800d9d4 <xPortStartScheduler+0x144>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a0f      	ldr	r2, [pc, #60]	@ (800d9d4 <xPortStartScheduler+0x144>)
 800d998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d99c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d99e:	f7ff ff63 	bl	800d868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d9a2:	f7ff f83b 	bl	800ca1c <vTaskSwitchContext>
	prvTaskExitError();
 800d9a6:	f7ff ff19 	bl	800d7dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	e000ed00 	.word	0xe000ed00
 800d9b8:	410fc271 	.word	0x410fc271
 800d9bc:	410fc270 	.word	0x410fc270
 800d9c0:	e000e400 	.word	0xe000e400
 800d9c4:	24001198 	.word	0x24001198
 800d9c8:	2400119c 	.word	0x2400119c
 800d9cc:	e000ed20 	.word	0xe000ed20
 800d9d0:	2400001c 	.word	0x2400001c
 800d9d4:	e000ef34 	.word	0xe000ef34

0800d9d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	607b      	str	r3, [r7, #4]
}
 800d9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9f2:	4b10      	ldr	r3, [pc, #64]	@ (800da34 <vPortEnterCritical+0x5c>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800da34 <vPortEnterCritical+0x5c>)
 800d9fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800da34 <vPortEnterCritical+0x5c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d110      	bne.n	800da26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da04:	4b0c      	ldr	r3, [pc, #48]	@ (800da38 <vPortEnterCritical+0x60>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00b      	beq.n	800da26 <vPortEnterCritical+0x4e>
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	603b      	str	r3, [r7, #0]
}
 800da20:	bf00      	nop
 800da22:	bf00      	nop
 800da24:	e7fd      	b.n	800da22 <vPortEnterCritical+0x4a>
	}
}
 800da26:	bf00      	nop
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	2400001c 	.word	0x2400001c
 800da38:	e000ed04 	.word	0xe000ed04

0800da3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da42:	4b12      	ldr	r3, [pc, #72]	@ (800da8c <vPortExitCritical+0x50>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10b      	bne.n	800da62 <vPortExitCritical+0x26>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	607b      	str	r3, [r7, #4]
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	e7fd      	b.n	800da5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da62:	4b0a      	ldr	r3, [pc, #40]	@ (800da8c <vPortExitCritical+0x50>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3b01      	subs	r3, #1
 800da68:	4a08      	ldr	r2, [pc, #32]	@ (800da8c <vPortExitCritical+0x50>)
 800da6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da6c:	4b07      	ldr	r3, [pc, #28]	@ (800da8c <vPortExitCritical+0x50>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d105      	bne.n	800da80 <vPortExitCritical+0x44>
 800da74:	2300      	movs	r3, #0
 800da76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	f383 8811 	msr	BASEPRI, r3
}
 800da7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	2400001c 	.word	0x2400001c

0800da90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da90:	f3ef 8009 	mrs	r0, PSP
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	4b15      	ldr	r3, [pc, #84]	@ (800daf0 <pxCurrentTCBConst>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	f01e 0f10 	tst.w	lr, #16
 800daa0:	bf08      	it	eq
 800daa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800daa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daaa:	6010      	str	r0, [r2, #0]
 800daac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dab4:	f380 8811 	msr	BASEPRI, r0
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f7fe ffac 	bl	800ca1c <vTaskSwitchContext>
 800dac4:	f04f 0000 	mov.w	r0, #0
 800dac8:	f380 8811 	msr	BASEPRI, r0
 800dacc:	bc09      	pop	{r0, r3}
 800dace:	6819      	ldr	r1, [r3, #0]
 800dad0:	6808      	ldr	r0, [r1, #0]
 800dad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad6:	f01e 0f10 	tst.w	lr, #16
 800dada:	bf08      	it	eq
 800dadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dae0:	f380 8809 	msr	PSP, r0
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w

0800daf0 <pxCurrentTCBConst>:
 800daf0:	24000b6c 	.word	0x24000b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop

0800daf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	607b      	str	r3, [r7, #4]
}
 800db10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db12:	f7fe fec9 	bl	800c8a8 <xTaskIncrementTick>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d003      	beq.n	800db24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db1c:	4b06      	ldr	r3, [pc, #24]	@ (800db38 <xPortSysTickHandler+0x40>)
 800db1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	2300      	movs	r3, #0
 800db26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f383 8811 	msr	BASEPRI, r3
}
 800db2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	e000ed04 	.word	0xe000ed04

0800db3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db3c:	b480      	push	{r7}
 800db3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db40:	4b0b      	ldr	r3, [pc, #44]	@ (800db70 <vPortSetupTimerInterrupt+0x34>)
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db46:	4b0b      	ldr	r3, [pc, #44]	@ (800db74 <vPortSetupTimerInterrupt+0x38>)
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db4c:	4b0a      	ldr	r3, [pc, #40]	@ (800db78 <vPortSetupTimerInterrupt+0x3c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a0a      	ldr	r2, [pc, #40]	@ (800db7c <vPortSetupTimerInterrupt+0x40>)
 800db52:	fba2 2303 	umull	r2, r3, r2, r3
 800db56:	099b      	lsrs	r3, r3, #6
 800db58:	4a09      	ldr	r2, [pc, #36]	@ (800db80 <vPortSetupTimerInterrupt+0x44>)
 800db5a:	3b01      	subs	r3, #1
 800db5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db5e:	4b04      	ldr	r3, [pc, #16]	@ (800db70 <vPortSetupTimerInterrupt+0x34>)
 800db60:	2207      	movs	r2, #7
 800db62:	601a      	str	r2, [r3, #0]
}
 800db64:	bf00      	nop
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	e000e010 	.word	0xe000e010
 800db74:	e000e018 	.word	0xe000e018
 800db78:	2400000c 	.word	0x2400000c
 800db7c:	10624dd3 	.word	0x10624dd3
 800db80:	e000e014 	.word	0xe000e014

0800db84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800db94 <vPortEnableVFP+0x10>
 800db88:	6801      	ldr	r1, [r0, #0]
 800db8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800db8e:	6001      	str	r1, [r0, #0]
 800db90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db92:	bf00      	nop
 800db94:	e000ed88 	.word	0xe000ed88

0800db98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db9e:	f3ef 8305 	mrs	r3, IPSR
 800dba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b0f      	cmp	r3, #15
 800dba8:	d915      	bls.n	800dbd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dbaa:	4a18      	ldr	r2, [pc, #96]	@ (800dc0c <vPortValidateInterruptPriority+0x74>)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4413      	add	r3, r2
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dbb4:	4b16      	ldr	r3, [pc, #88]	@ (800dc10 <vPortValidateInterruptPriority+0x78>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	7afa      	ldrb	r2, [r7, #11]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d20b      	bcs.n	800dbd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	607b      	str	r3, [r7, #4]
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	e7fd      	b.n	800dbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800dc14 <vPortValidateInterruptPriority+0x7c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dbde:	4b0e      	ldr	r3, [pc, #56]	@ (800dc18 <vPortValidateInterruptPriority+0x80>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d90b      	bls.n	800dbfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	603b      	str	r3, [r7, #0]
}
 800dbf8:	bf00      	nop
 800dbfa:	bf00      	nop
 800dbfc:	e7fd      	b.n	800dbfa <vPortValidateInterruptPriority+0x62>
	}
 800dbfe:	bf00      	nop
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	e000e3f0 	.word	0xe000e3f0
 800dc10:	24001198 	.word	0x24001198
 800dc14:	e000ed0c 	.word	0xe000ed0c
 800dc18:	2400119c 	.word	0x2400119c

0800dc1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08a      	sub	sp, #40	@ 0x28
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc24:	2300      	movs	r3, #0
 800dc26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc28:	f7fe fd82 	bl	800c730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc2c:	4b5c      	ldr	r3, [pc, #368]	@ (800dda0 <pvPortMalloc+0x184>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc34:	f000 f924 	bl	800de80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc38:	4b5a      	ldr	r3, [pc, #360]	@ (800dda4 <pvPortMalloc+0x188>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4013      	ands	r3, r2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f040 8095 	bne.w	800dd70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d01e      	beq.n	800dc8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dc4c:	2208      	movs	r2, #8
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4413      	add	r3, r2
 800dc52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f003 0307 	and.w	r3, r3, #7
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d015      	beq.n	800dc8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f023 0307 	bic.w	r3, r3, #7
 800dc64:	3308      	adds	r3, #8
 800dc66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f003 0307 	and.w	r3, r3, #7
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00b      	beq.n	800dc8a <pvPortMalloc+0x6e>
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc76:	f383 8811 	msr	BASEPRI, r3
 800dc7a:	f3bf 8f6f 	isb	sy
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	617b      	str	r3, [r7, #20]
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop
 800dc88:	e7fd      	b.n	800dc86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d06f      	beq.n	800dd70 <pvPortMalloc+0x154>
 800dc90:	4b45      	ldr	r3, [pc, #276]	@ (800dda8 <pvPortMalloc+0x18c>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d86a      	bhi.n	800dd70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc9a:	4b44      	ldr	r3, [pc, #272]	@ (800ddac <pvPortMalloc+0x190>)
 800dc9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc9e:	4b43      	ldr	r3, [pc, #268]	@ (800ddac <pvPortMalloc+0x190>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dca4:	e004      	b.n	800dcb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d903      	bls.n	800dcc2 <pvPortMalloc+0xa6>
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1f1      	bne.n	800dca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dcc2:	4b37      	ldr	r3, [pc, #220]	@ (800dda0 <pvPortMalloc+0x184>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d051      	beq.n	800dd70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dccc:	6a3b      	ldr	r3, [r7, #32]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2208      	movs	r2, #8
 800dcd2:	4413      	add	r3, r2
 800dcd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	1ad2      	subs	r2, r2, r3
 800dce6:	2308      	movs	r3, #8
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d920      	bls.n	800dd30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dcee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	f003 0307 	and.w	r3, r3, #7
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00b      	beq.n	800dd18 <pvPortMalloc+0xfc>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	613b      	str	r3, [r7, #16]
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	1ad2      	subs	r2, r2, r3
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd2a:	69b8      	ldr	r0, [r7, #24]
 800dd2c:	f000 f90a 	bl	800df44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd30:	4b1d      	ldr	r3, [pc, #116]	@ (800dda8 <pvPortMalloc+0x18c>)
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	4a1b      	ldr	r2, [pc, #108]	@ (800dda8 <pvPortMalloc+0x18c>)
 800dd3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dda8 <pvPortMalloc+0x18c>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	4b1b      	ldr	r3, [pc, #108]	@ (800ddb0 <pvPortMalloc+0x194>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d203      	bcs.n	800dd52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd4a:	4b17      	ldr	r3, [pc, #92]	@ (800dda8 <pvPortMalloc+0x18c>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a18      	ldr	r2, [pc, #96]	@ (800ddb0 <pvPortMalloc+0x194>)
 800dd50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	4b13      	ldr	r3, [pc, #76]	@ (800dda4 <pvPortMalloc+0x188>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd62:	2200      	movs	r2, #0
 800dd64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd66:	4b13      	ldr	r3, [pc, #76]	@ (800ddb4 <pvPortMalloc+0x198>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	4a11      	ldr	r2, [pc, #68]	@ (800ddb4 <pvPortMalloc+0x198>)
 800dd6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd70:	f7fe fcec 	bl	800c74c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	f003 0307 	and.w	r3, r3, #7
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00b      	beq.n	800dd96 <pvPortMalloc+0x17a>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	60fb      	str	r3, [r7, #12]
}
 800dd90:	bf00      	nop
 800dd92:	bf00      	nop
 800dd94:	e7fd      	b.n	800dd92 <pvPortMalloc+0x176>
	return pvReturn;
 800dd96:	69fb      	ldr	r3, [r7, #28]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3728      	adds	r7, #40	@ 0x28
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	24004da8 	.word	0x24004da8
 800dda4:	24004dbc 	.word	0x24004dbc
 800dda8:	24004dac 	.word	0x24004dac
 800ddac:	24004da0 	.word	0x24004da0
 800ddb0:	24004db0 	.word	0x24004db0
 800ddb4:	24004db4 	.word	0x24004db4

0800ddb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d04f      	beq.n	800de6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ddca:	2308      	movs	r3, #8
 800ddcc:	425b      	negs	r3, r3
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	685a      	ldr	r2, [r3, #4]
 800dddc:	4b25      	ldr	r3, [pc, #148]	@ (800de74 <vPortFree+0xbc>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4013      	ands	r3, r2
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10b      	bne.n	800ddfe <vPortFree+0x46>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	60fb      	str	r3, [r7, #12]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00b      	beq.n	800de1e <vPortFree+0x66>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	60bb      	str	r3, [r7, #8]
}
 800de18:	bf00      	nop
 800de1a:	bf00      	nop
 800de1c:	e7fd      	b.n	800de1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	685a      	ldr	r2, [r3, #4]
 800de22:	4b14      	ldr	r3, [pc, #80]	@ (800de74 <vPortFree+0xbc>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4013      	ands	r3, r2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01e      	beq.n	800de6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d11a      	bne.n	800de6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	4b0e      	ldr	r3, [pc, #56]	@ (800de74 <vPortFree+0xbc>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	43db      	mvns	r3, r3
 800de3e:	401a      	ands	r2, r3
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de44:	f7fe fc74 	bl	800c730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	4b0a      	ldr	r3, [pc, #40]	@ (800de78 <vPortFree+0xc0>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4413      	add	r3, r2
 800de52:	4a09      	ldr	r2, [pc, #36]	@ (800de78 <vPortFree+0xc0>)
 800de54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de56:	6938      	ldr	r0, [r7, #16]
 800de58:	f000 f874 	bl	800df44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de5c:	4b07      	ldr	r3, [pc, #28]	@ (800de7c <vPortFree+0xc4>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3301      	adds	r3, #1
 800de62:	4a06      	ldr	r2, [pc, #24]	@ (800de7c <vPortFree+0xc4>)
 800de64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de66:	f7fe fc71 	bl	800c74c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de6a:	bf00      	nop
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	24004dbc 	.word	0x24004dbc
 800de78:	24004dac 	.word	0x24004dac
 800de7c:	24004db8 	.word	0x24004db8

0800de80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800de8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de8c:	4b27      	ldr	r3, [pc, #156]	@ (800df2c <prvHeapInit+0xac>)
 800de8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f003 0307 	and.w	r3, r3, #7
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00c      	beq.n	800deb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3307      	adds	r3, #7
 800de9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f023 0307 	bic.w	r3, r3, #7
 800dea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	4a1f      	ldr	r2, [pc, #124]	@ (800df2c <prvHeapInit+0xac>)
 800deb0:	4413      	add	r3, r2
 800deb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800deb8:	4a1d      	ldr	r2, [pc, #116]	@ (800df30 <prvHeapInit+0xb0>)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800debe:	4b1c      	ldr	r3, [pc, #112]	@ (800df30 <prvHeapInit+0xb0>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	4413      	add	r3, r2
 800deca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800decc:	2208      	movs	r2, #8
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	1a9b      	subs	r3, r3, r2
 800ded2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f023 0307 	bic.w	r3, r3, #7
 800deda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	4a15      	ldr	r2, [pc, #84]	@ (800df34 <prvHeapInit+0xb4>)
 800dee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dee2:	4b14      	ldr	r3, [pc, #80]	@ (800df34 <prvHeapInit+0xb4>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2200      	movs	r2, #0
 800dee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800deea:	4b12      	ldr	r3, [pc, #72]	@ (800df34 <prvHeapInit+0xb4>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	1ad2      	subs	r2, r2, r3
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df00:	4b0c      	ldr	r3, [pc, #48]	@ (800df34 <prvHeapInit+0xb4>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	4a0a      	ldr	r2, [pc, #40]	@ (800df38 <prvHeapInit+0xb8>)
 800df0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	4a09      	ldr	r2, [pc, #36]	@ (800df3c <prvHeapInit+0xbc>)
 800df16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df18:	4b09      	ldr	r3, [pc, #36]	@ (800df40 <prvHeapInit+0xc0>)
 800df1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800df1e:	601a      	str	r2, [r3, #0]
}
 800df20:	bf00      	nop
 800df22:	3714      	adds	r7, #20
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	240011a0 	.word	0x240011a0
 800df30:	24004da0 	.word	0x24004da0
 800df34:	24004da8 	.word	0x24004da8
 800df38:	24004db0 	.word	0x24004db0
 800df3c:	24004dac 	.word	0x24004dac
 800df40:	24004dbc 	.word	0x24004dbc

0800df44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df4c:	4b28      	ldr	r3, [pc, #160]	@ (800dff0 <prvInsertBlockIntoFreeList+0xac>)
 800df4e:	60fb      	str	r3, [r7, #12]
 800df50:	e002      	b.n	800df58 <prvInsertBlockIntoFreeList+0x14>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	60fb      	str	r3, [r7, #12]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d8f7      	bhi.n	800df52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	4413      	add	r3, r2
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	429a      	cmp	r2, r3
 800df72:	d108      	bne.n	800df86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	441a      	add	r2, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	441a      	add	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d118      	bne.n	800dfcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b15      	ldr	r3, [pc, #84]	@ (800dff4 <prvInsertBlockIntoFreeList+0xb0>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d00d      	beq.n	800dfc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685a      	ldr	r2, [r3, #4]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	441a      	add	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	e008      	b.n	800dfd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800dff4 <prvInsertBlockIntoFreeList+0xb0>)
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	601a      	str	r2, [r3, #0]
 800dfca:	e003      	b.n	800dfd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d002      	beq.n	800dfe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	24004da0 	.word	0x24004da0
 800dff4:	24004da8 	.word	0x24004da8

0800dff8 <malloc>:
 800dff8:	4b02      	ldr	r3, [pc, #8]	@ (800e004 <malloc+0xc>)
 800dffa:	4601      	mov	r1, r0
 800dffc:	6818      	ldr	r0, [r3, #0]
 800dffe:	f000 b82d 	b.w	800e05c <_malloc_r>
 800e002:	bf00      	nop
 800e004:	24000198 	.word	0x24000198

0800e008 <free>:
 800e008:	4b02      	ldr	r3, [pc, #8]	@ (800e014 <free+0xc>)
 800e00a:	4601      	mov	r1, r0
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	f002 bde1 	b.w	8010bd4 <_free_r>
 800e012:	bf00      	nop
 800e014:	24000198 	.word	0x24000198

0800e018 <sbrk_aligned>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	4e0f      	ldr	r6, [pc, #60]	@ (800e058 <sbrk_aligned+0x40>)
 800e01c:	460c      	mov	r4, r1
 800e01e:	6831      	ldr	r1, [r6, #0]
 800e020:	4605      	mov	r5, r0
 800e022:	b911      	cbnz	r1, 800e02a <sbrk_aligned+0x12>
 800e024:	f001 ff80 	bl	800ff28 <_sbrk_r>
 800e028:	6030      	str	r0, [r6, #0]
 800e02a:	4621      	mov	r1, r4
 800e02c:	4628      	mov	r0, r5
 800e02e:	f001 ff7b 	bl	800ff28 <_sbrk_r>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	d103      	bne.n	800e03e <sbrk_aligned+0x26>
 800e036:	f04f 34ff 	mov.w	r4, #4294967295
 800e03a:	4620      	mov	r0, r4
 800e03c:	bd70      	pop	{r4, r5, r6, pc}
 800e03e:	1cc4      	adds	r4, r0, #3
 800e040:	f024 0403 	bic.w	r4, r4, #3
 800e044:	42a0      	cmp	r0, r4
 800e046:	d0f8      	beq.n	800e03a <sbrk_aligned+0x22>
 800e048:	1a21      	subs	r1, r4, r0
 800e04a:	4628      	mov	r0, r5
 800e04c:	f001 ff6c 	bl	800ff28 <_sbrk_r>
 800e050:	3001      	adds	r0, #1
 800e052:	d1f2      	bne.n	800e03a <sbrk_aligned+0x22>
 800e054:	e7ef      	b.n	800e036 <sbrk_aligned+0x1e>
 800e056:	bf00      	nop
 800e058:	24004dc0 	.word	0x24004dc0

0800e05c <_malloc_r>:
 800e05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e060:	1ccd      	adds	r5, r1, #3
 800e062:	f025 0503 	bic.w	r5, r5, #3
 800e066:	3508      	adds	r5, #8
 800e068:	2d0c      	cmp	r5, #12
 800e06a:	bf38      	it	cc
 800e06c:	250c      	movcc	r5, #12
 800e06e:	2d00      	cmp	r5, #0
 800e070:	4606      	mov	r6, r0
 800e072:	db01      	blt.n	800e078 <_malloc_r+0x1c>
 800e074:	42a9      	cmp	r1, r5
 800e076:	d904      	bls.n	800e082 <_malloc_r+0x26>
 800e078:	230c      	movs	r3, #12
 800e07a:	6033      	str	r3, [r6, #0]
 800e07c:	2000      	movs	r0, #0
 800e07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e158 <_malloc_r+0xfc>
 800e086:	f000 f869 	bl	800e15c <__malloc_lock>
 800e08a:	f8d8 3000 	ldr.w	r3, [r8]
 800e08e:	461c      	mov	r4, r3
 800e090:	bb44      	cbnz	r4, 800e0e4 <_malloc_r+0x88>
 800e092:	4629      	mov	r1, r5
 800e094:	4630      	mov	r0, r6
 800e096:	f7ff ffbf 	bl	800e018 <sbrk_aligned>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	4604      	mov	r4, r0
 800e09e:	d158      	bne.n	800e152 <_malloc_r+0xf6>
 800e0a0:	f8d8 4000 	ldr.w	r4, [r8]
 800e0a4:	4627      	mov	r7, r4
 800e0a6:	2f00      	cmp	r7, #0
 800e0a8:	d143      	bne.n	800e132 <_malloc_r+0xd6>
 800e0aa:	2c00      	cmp	r4, #0
 800e0ac:	d04b      	beq.n	800e146 <_malloc_r+0xea>
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	eb04 0903 	add.w	r9, r4, r3
 800e0b8:	f001 ff36 	bl	800ff28 <_sbrk_r>
 800e0bc:	4581      	cmp	r9, r0
 800e0be:	d142      	bne.n	800e146 <_malloc_r+0xea>
 800e0c0:	6821      	ldr	r1, [r4, #0]
 800e0c2:	1a6d      	subs	r5, r5, r1
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	f7ff ffa6 	bl	800e018 <sbrk_aligned>
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d03a      	beq.n	800e146 <_malloc_r+0xea>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	442b      	add	r3, r5
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	bb62      	cbnz	r2, 800e138 <_malloc_r+0xdc>
 800e0de:	f8c8 7000 	str.w	r7, [r8]
 800e0e2:	e00f      	b.n	800e104 <_malloc_r+0xa8>
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	1b52      	subs	r2, r2, r5
 800e0e8:	d420      	bmi.n	800e12c <_malloc_r+0xd0>
 800e0ea:	2a0b      	cmp	r2, #11
 800e0ec:	d917      	bls.n	800e11e <_malloc_r+0xc2>
 800e0ee:	1961      	adds	r1, r4, r5
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	6025      	str	r5, [r4, #0]
 800e0f4:	bf18      	it	ne
 800e0f6:	6059      	strne	r1, [r3, #4]
 800e0f8:	6863      	ldr	r3, [r4, #4]
 800e0fa:	bf08      	it	eq
 800e0fc:	f8c8 1000 	streq.w	r1, [r8]
 800e100:	5162      	str	r2, [r4, r5]
 800e102:	604b      	str	r3, [r1, #4]
 800e104:	4630      	mov	r0, r6
 800e106:	f000 f82f 	bl	800e168 <__malloc_unlock>
 800e10a:	f104 000b 	add.w	r0, r4, #11
 800e10e:	1d23      	adds	r3, r4, #4
 800e110:	f020 0007 	bic.w	r0, r0, #7
 800e114:	1ac2      	subs	r2, r0, r3
 800e116:	bf1c      	itt	ne
 800e118:	1a1b      	subne	r3, r3, r0
 800e11a:	50a3      	strne	r3, [r4, r2]
 800e11c:	e7af      	b.n	800e07e <_malloc_r+0x22>
 800e11e:	6862      	ldr	r2, [r4, #4]
 800e120:	42a3      	cmp	r3, r4
 800e122:	bf0c      	ite	eq
 800e124:	f8c8 2000 	streq.w	r2, [r8]
 800e128:	605a      	strne	r2, [r3, #4]
 800e12a:	e7eb      	b.n	800e104 <_malloc_r+0xa8>
 800e12c:	4623      	mov	r3, r4
 800e12e:	6864      	ldr	r4, [r4, #4]
 800e130:	e7ae      	b.n	800e090 <_malloc_r+0x34>
 800e132:	463c      	mov	r4, r7
 800e134:	687f      	ldr	r7, [r7, #4]
 800e136:	e7b6      	b.n	800e0a6 <_malloc_r+0x4a>
 800e138:	461a      	mov	r2, r3
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	42a3      	cmp	r3, r4
 800e13e:	d1fb      	bne.n	800e138 <_malloc_r+0xdc>
 800e140:	2300      	movs	r3, #0
 800e142:	6053      	str	r3, [r2, #4]
 800e144:	e7de      	b.n	800e104 <_malloc_r+0xa8>
 800e146:	230c      	movs	r3, #12
 800e148:	6033      	str	r3, [r6, #0]
 800e14a:	4630      	mov	r0, r6
 800e14c:	f000 f80c 	bl	800e168 <__malloc_unlock>
 800e150:	e794      	b.n	800e07c <_malloc_r+0x20>
 800e152:	6005      	str	r5, [r0, #0]
 800e154:	e7d6      	b.n	800e104 <_malloc_r+0xa8>
 800e156:	bf00      	nop
 800e158:	24004dc4 	.word	0x24004dc4

0800e15c <__malloc_lock>:
 800e15c:	4801      	ldr	r0, [pc, #4]	@ (800e164 <__malloc_lock+0x8>)
 800e15e:	f001 bf30 	b.w	800ffc2 <__retarget_lock_acquire_recursive>
 800e162:	bf00      	nop
 800e164:	24004f08 	.word	0x24004f08

0800e168 <__malloc_unlock>:
 800e168:	4801      	ldr	r0, [pc, #4]	@ (800e170 <__malloc_unlock+0x8>)
 800e16a:	f001 bf2b 	b.w	800ffc4 <__retarget_lock_release_recursive>
 800e16e:	bf00      	nop
 800e170:	24004f08 	.word	0x24004f08

0800e174 <realloc>:
 800e174:	4b02      	ldr	r3, [pc, #8]	@ (800e180 <realloc+0xc>)
 800e176:	460a      	mov	r2, r1
 800e178:	4601      	mov	r1, r0
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	f000 b802 	b.w	800e184 <_realloc_r>
 800e180:	24000198 	.word	0x24000198

0800e184 <_realloc_r>:
 800e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e188:	4607      	mov	r7, r0
 800e18a:	4614      	mov	r4, r2
 800e18c:	460d      	mov	r5, r1
 800e18e:	b921      	cbnz	r1, 800e19a <_realloc_r+0x16>
 800e190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	4611      	mov	r1, r2
 800e196:	f7ff bf61 	b.w	800e05c <_malloc_r>
 800e19a:	b92a      	cbnz	r2, 800e1a8 <_realloc_r+0x24>
 800e19c:	f002 fd1a 	bl	8010bd4 <_free_r>
 800e1a0:	4625      	mov	r5, r4
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a8:	f003 fd51 	bl	8011c4e <_malloc_usable_size_r>
 800e1ac:	4284      	cmp	r4, r0
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	d802      	bhi.n	800e1b8 <_realloc_r+0x34>
 800e1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1b6:	d8f4      	bhi.n	800e1a2 <_realloc_r+0x1e>
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	f7ff ff4e 	bl	800e05c <_malloc_r>
 800e1c0:	4680      	mov	r8, r0
 800e1c2:	b908      	cbnz	r0, 800e1c8 <_realloc_r+0x44>
 800e1c4:	4645      	mov	r5, r8
 800e1c6:	e7ec      	b.n	800e1a2 <_realloc_r+0x1e>
 800e1c8:	42b4      	cmp	r4, r6
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	4629      	mov	r1, r5
 800e1ce:	bf28      	it	cs
 800e1d0:	4632      	movcs	r2, r6
 800e1d2:	f001 fef8 	bl	800ffc6 <memcpy>
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4638      	mov	r0, r7
 800e1da:	f002 fcfb 	bl	8010bd4 <_free_r>
 800e1de:	e7f1      	b.n	800e1c4 <_realloc_r+0x40>

0800e1e0 <sulp>:
 800e1e0:	b570      	push	{r4, r5, r6, lr}
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	460d      	mov	r5, r1
 800e1e6:	4616      	mov	r6, r2
 800e1e8:	ec45 4b10 	vmov	d0, r4, r5
 800e1ec:	f003 fbf4 	bl	80119d8 <__ulp>
 800e1f0:	b17e      	cbz	r6, 800e212 <sulp+0x32>
 800e1f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e1f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dd09      	ble.n	800e212 <sulp+0x32>
 800e1fe:	051b      	lsls	r3, r3, #20
 800e200:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e204:	2000      	movs	r0, #0
 800e206:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e20a:	ec41 0b17 	vmov	d7, r0, r1
 800e20e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	0000      	movs	r0, r0
	...

0800e218 <_strtod_l>:
 800e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21c:	ed2d 8b0a 	vpush	{d8-d12}
 800e220:	b097      	sub	sp, #92	@ 0x5c
 800e222:	4688      	mov	r8, r1
 800e224:	920e      	str	r2, [sp, #56]	@ 0x38
 800e226:	2200      	movs	r2, #0
 800e228:	9212      	str	r2, [sp, #72]	@ 0x48
 800e22a:	9005      	str	r0, [sp, #20]
 800e22c:	f04f 0a00 	mov.w	sl, #0
 800e230:	f04f 0b00 	mov.w	fp, #0
 800e234:	460a      	mov	r2, r1
 800e236:	9211      	str	r2, [sp, #68]	@ 0x44
 800e238:	7811      	ldrb	r1, [r2, #0]
 800e23a:	292b      	cmp	r1, #43	@ 0x2b
 800e23c:	d04c      	beq.n	800e2d8 <_strtod_l+0xc0>
 800e23e:	d839      	bhi.n	800e2b4 <_strtod_l+0x9c>
 800e240:	290d      	cmp	r1, #13
 800e242:	d833      	bhi.n	800e2ac <_strtod_l+0x94>
 800e244:	2908      	cmp	r1, #8
 800e246:	d833      	bhi.n	800e2b0 <_strtod_l+0x98>
 800e248:	2900      	cmp	r1, #0
 800e24a:	d03c      	beq.n	800e2c6 <_strtod_l+0xae>
 800e24c:	2200      	movs	r2, #0
 800e24e:	9208      	str	r2, [sp, #32]
 800e250:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e252:	782a      	ldrb	r2, [r5, #0]
 800e254:	2a30      	cmp	r2, #48	@ 0x30
 800e256:	f040 80b7 	bne.w	800e3c8 <_strtod_l+0x1b0>
 800e25a:	786a      	ldrb	r2, [r5, #1]
 800e25c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e260:	2a58      	cmp	r2, #88	@ 0x58
 800e262:	d170      	bne.n	800e346 <_strtod_l+0x12e>
 800e264:	9302      	str	r3, [sp, #8]
 800e266:	9b08      	ldr	r3, [sp, #32]
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	ab12      	add	r3, sp, #72	@ 0x48
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	4a90      	ldr	r2, [pc, #576]	@ (800e4b0 <_strtod_l+0x298>)
 800e270:	9805      	ldr	r0, [sp, #20]
 800e272:	ab13      	add	r3, sp, #76	@ 0x4c
 800e274:	a911      	add	r1, sp, #68	@ 0x44
 800e276:	f002 fd5f 	bl	8010d38 <__gethex>
 800e27a:	f010 060f 	ands.w	r6, r0, #15
 800e27e:	4604      	mov	r4, r0
 800e280:	d005      	beq.n	800e28e <_strtod_l+0x76>
 800e282:	2e06      	cmp	r6, #6
 800e284:	d12a      	bne.n	800e2dc <_strtod_l+0xc4>
 800e286:	3501      	adds	r5, #1
 800e288:	2300      	movs	r3, #0
 800e28a:	9511      	str	r5, [sp, #68]	@ 0x44
 800e28c:	9308      	str	r3, [sp, #32]
 800e28e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e290:	2b00      	cmp	r3, #0
 800e292:	f040 8537 	bne.w	800ed04 <_strtod_l+0xaec>
 800e296:	9b08      	ldr	r3, [sp, #32]
 800e298:	ec4b ab10 	vmov	d0, sl, fp
 800e29c:	b1cb      	cbz	r3, 800e2d2 <_strtod_l+0xba>
 800e29e:	eeb1 0b40 	vneg.f64	d0, d0
 800e2a2:	b017      	add	sp, #92	@ 0x5c
 800e2a4:	ecbd 8b0a 	vpop	{d8-d12}
 800e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ac:	2920      	cmp	r1, #32
 800e2ae:	d1cd      	bne.n	800e24c <_strtod_l+0x34>
 800e2b0:	3201      	adds	r2, #1
 800e2b2:	e7c0      	b.n	800e236 <_strtod_l+0x1e>
 800e2b4:	292d      	cmp	r1, #45	@ 0x2d
 800e2b6:	d1c9      	bne.n	800e24c <_strtod_l+0x34>
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	9108      	str	r1, [sp, #32]
 800e2bc:	1c51      	adds	r1, r2, #1
 800e2be:	9111      	str	r1, [sp, #68]	@ 0x44
 800e2c0:	7852      	ldrb	r2, [r2, #1]
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	d1c4      	bne.n	800e250 <_strtod_l+0x38>
 800e2c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2c8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f040 8517 	bne.w	800ed00 <_strtod_l+0xae8>
 800e2d2:	ec4b ab10 	vmov	d0, sl, fp
 800e2d6:	e7e4      	b.n	800e2a2 <_strtod_l+0x8a>
 800e2d8:	2100      	movs	r1, #0
 800e2da:	e7ee      	b.n	800e2ba <_strtod_l+0xa2>
 800e2dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e2de:	b13a      	cbz	r2, 800e2f0 <_strtod_l+0xd8>
 800e2e0:	2135      	movs	r1, #53	@ 0x35
 800e2e2:	a814      	add	r0, sp, #80	@ 0x50
 800e2e4:	f003 fc6f 	bl	8011bc6 <__copybits>
 800e2e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e2ea:	9805      	ldr	r0, [sp, #20]
 800e2ec:	f003 f848 	bl	8011380 <_Bfree>
 800e2f0:	1e73      	subs	r3, r6, #1
 800e2f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e2f4:	2b04      	cmp	r3, #4
 800e2f6:	d806      	bhi.n	800e306 <_strtod_l+0xee>
 800e2f8:	e8df f003 	tbb	[pc, r3]
 800e2fc:	201d0314 	.word	0x201d0314
 800e300:	14          	.byte	0x14
 800e301:	00          	.byte	0x00
 800e302:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e306:	05e3      	lsls	r3, r4, #23
 800e308:	bf48      	it	mi
 800e30a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e30e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e312:	0d1b      	lsrs	r3, r3, #20
 800e314:	051b      	lsls	r3, r3, #20
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1b9      	bne.n	800e28e <_strtod_l+0x76>
 800e31a:	f001 fe27 	bl	800ff6c <__errno>
 800e31e:	2322      	movs	r3, #34	@ 0x22
 800e320:	6003      	str	r3, [r0, #0]
 800e322:	e7b4      	b.n	800e28e <_strtod_l+0x76>
 800e324:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e328:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e32c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e330:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e334:	e7e7      	b.n	800e306 <_strtod_l+0xee>
 800e336:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e4b8 <_strtod_l+0x2a0>
 800e33a:	e7e4      	b.n	800e306 <_strtod_l+0xee>
 800e33c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e340:	f04f 3aff 	mov.w	sl, #4294967295
 800e344:	e7df      	b.n	800e306 <_strtod_l+0xee>
 800e346:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e348:	1c5a      	adds	r2, r3, #1
 800e34a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e34c:	785b      	ldrb	r3, [r3, #1]
 800e34e:	2b30      	cmp	r3, #48	@ 0x30
 800e350:	d0f9      	beq.n	800e346 <_strtod_l+0x12e>
 800e352:	2b00      	cmp	r3, #0
 800e354:	d09b      	beq.n	800e28e <_strtod_l+0x76>
 800e356:	2301      	movs	r3, #1
 800e358:	9307      	str	r3, [sp, #28]
 800e35a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e35c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e35e:	2300      	movs	r3, #0
 800e360:	9306      	str	r3, [sp, #24]
 800e362:	4699      	mov	r9, r3
 800e364:	461d      	mov	r5, r3
 800e366:	220a      	movs	r2, #10
 800e368:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e36a:	7804      	ldrb	r4, [r0, #0]
 800e36c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e370:	b2d9      	uxtb	r1, r3
 800e372:	2909      	cmp	r1, #9
 800e374:	d92a      	bls.n	800e3cc <_strtod_l+0x1b4>
 800e376:	494f      	ldr	r1, [pc, #316]	@ (800e4b4 <_strtod_l+0x29c>)
 800e378:	2201      	movs	r2, #1
 800e37a:	f001 fd8b 	bl	800fe94 <strncmp>
 800e37e:	b398      	cbz	r0, 800e3e8 <_strtod_l+0x1d0>
 800e380:	2000      	movs	r0, #0
 800e382:	4622      	mov	r2, r4
 800e384:	462b      	mov	r3, r5
 800e386:	4607      	mov	r7, r0
 800e388:	4601      	mov	r1, r0
 800e38a:	2a65      	cmp	r2, #101	@ 0x65
 800e38c:	d001      	beq.n	800e392 <_strtod_l+0x17a>
 800e38e:	2a45      	cmp	r2, #69	@ 0x45
 800e390:	d118      	bne.n	800e3c4 <_strtod_l+0x1ac>
 800e392:	b91b      	cbnz	r3, 800e39c <_strtod_l+0x184>
 800e394:	9b07      	ldr	r3, [sp, #28]
 800e396:	4303      	orrs	r3, r0
 800e398:	d095      	beq.n	800e2c6 <_strtod_l+0xae>
 800e39a:	2300      	movs	r3, #0
 800e39c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e3a0:	f108 0201 	add.w	r2, r8, #1
 800e3a4:	9211      	str	r2, [sp, #68]	@ 0x44
 800e3a6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e3aa:	2a2b      	cmp	r2, #43	@ 0x2b
 800e3ac:	d074      	beq.n	800e498 <_strtod_l+0x280>
 800e3ae:	2a2d      	cmp	r2, #45	@ 0x2d
 800e3b0:	d07a      	beq.n	800e4a8 <_strtod_l+0x290>
 800e3b2:	f04f 0e00 	mov.w	lr, #0
 800e3b6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e3ba:	2c09      	cmp	r4, #9
 800e3bc:	f240 8082 	bls.w	800e4c4 <_strtod_l+0x2ac>
 800e3c0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e3c4:	2400      	movs	r4, #0
 800e3c6:	e09d      	b.n	800e504 <_strtod_l+0x2ec>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	e7c5      	b.n	800e358 <_strtod_l+0x140>
 800e3cc:	2d08      	cmp	r5, #8
 800e3ce:	bfc8      	it	gt
 800e3d0:	9906      	ldrgt	r1, [sp, #24]
 800e3d2:	f100 0001 	add.w	r0, r0, #1
 800e3d6:	bfca      	itet	gt
 800e3d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e3dc:	fb02 3909 	mlale	r9, r2, r9, r3
 800e3e0:	9306      	strgt	r3, [sp, #24]
 800e3e2:	3501      	adds	r5, #1
 800e3e4:	9011      	str	r0, [sp, #68]	@ 0x44
 800e3e6:	e7bf      	b.n	800e368 <_strtod_l+0x150>
 800e3e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	9211      	str	r2, [sp, #68]	@ 0x44
 800e3ee:	785a      	ldrb	r2, [r3, #1]
 800e3f0:	b3bd      	cbz	r5, 800e462 <_strtod_l+0x24a>
 800e3f2:	4607      	mov	r7, r0
 800e3f4:	462b      	mov	r3, r5
 800e3f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e3fa:	2909      	cmp	r1, #9
 800e3fc:	d912      	bls.n	800e424 <_strtod_l+0x20c>
 800e3fe:	2101      	movs	r1, #1
 800e400:	e7c3      	b.n	800e38a <_strtod_l+0x172>
 800e402:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e404:	1c5a      	adds	r2, r3, #1
 800e406:	9211      	str	r2, [sp, #68]	@ 0x44
 800e408:	785a      	ldrb	r2, [r3, #1]
 800e40a:	3001      	adds	r0, #1
 800e40c:	2a30      	cmp	r2, #48	@ 0x30
 800e40e:	d0f8      	beq.n	800e402 <_strtod_l+0x1ea>
 800e410:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e414:	2b08      	cmp	r3, #8
 800e416:	f200 847a 	bhi.w	800ed0e <_strtod_l+0xaf6>
 800e41a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e41c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e41e:	4607      	mov	r7, r0
 800e420:	2000      	movs	r0, #0
 800e422:	4603      	mov	r3, r0
 800e424:	3a30      	subs	r2, #48	@ 0x30
 800e426:	f100 0101 	add.w	r1, r0, #1
 800e42a:	d014      	beq.n	800e456 <_strtod_l+0x23e>
 800e42c:	440f      	add	r7, r1
 800e42e:	469c      	mov	ip, r3
 800e430:	f04f 0e0a 	mov.w	lr, #10
 800e434:	f10c 0401 	add.w	r4, ip, #1
 800e438:	1ae6      	subs	r6, r4, r3
 800e43a:	42b1      	cmp	r1, r6
 800e43c:	dc13      	bgt.n	800e466 <_strtod_l+0x24e>
 800e43e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e442:	1819      	adds	r1, r3, r0
 800e444:	2908      	cmp	r1, #8
 800e446:	f103 0301 	add.w	r3, r3, #1
 800e44a:	4403      	add	r3, r0
 800e44c:	dc19      	bgt.n	800e482 <_strtod_l+0x26a>
 800e44e:	210a      	movs	r1, #10
 800e450:	fb01 2909 	mla	r9, r1, r9, r2
 800e454:	2100      	movs	r1, #0
 800e456:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e458:	1c50      	adds	r0, r2, #1
 800e45a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e45c:	7852      	ldrb	r2, [r2, #1]
 800e45e:	4608      	mov	r0, r1
 800e460:	e7c9      	b.n	800e3f6 <_strtod_l+0x1de>
 800e462:	4628      	mov	r0, r5
 800e464:	e7d2      	b.n	800e40c <_strtod_l+0x1f4>
 800e466:	f1bc 0f08 	cmp.w	ip, #8
 800e46a:	dc03      	bgt.n	800e474 <_strtod_l+0x25c>
 800e46c:	fb0e f909 	mul.w	r9, lr, r9
 800e470:	46a4      	mov	ip, r4
 800e472:	e7df      	b.n	800e434 <_strtod_l+0x21c>
 800e474:	2c10      	cmp	r4, #16
 800e476:	bfde      	ittt	le
 800e478:	9e06      	ldrle	r6, [sp, #24]
 800e47a:	fb0e f606 	mulle.w	r6, lr, r6
 800e47e:	9606      	strle	r6, [sp, #24]
 800e480:	e7f6      	b.n	800e470 <_strtod_l+0x258>
 800e482:	290f      	cmp	r1, #15
 800e484:	bfdf      	itttt	le
 800e486:	9806      	ldrle	r0, [sp, #24]
 800e488:	210a      	movle	r1, #10
 800e48a:	fb01 2200 	mlale	r2, r1, r0, r2
 800e48e:	9206      	strle	r2, [sp, #24]
 800e490:	e7e0      	b.n	800e454 <_strtod_l+0x23c>
 800e492:	2700      	movs	r7, #0
 800e494:	2101      	movs	r1, #1
 800e496:	e77d      	b.n	800e394 <_strtod_l+0x17c>
 800e498:	f04f 0e00 	mov.w	lr, #0
 800e49c:	f108 0202 	add.w	r2, r8, #2
 800e4a0:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4a2:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e4a6:	e786      	b.n	800e3b6 <_strtod_l+0x19e>
 800e4a8:	f04f 0e01 	mov.w	lr, #1
 800e4ac:	e7f6      	b.n	800e49c <_strtod_l+0x284>
 800e4ae:	bf00      	nop
 800e4b0:	08013244 	.word	0x08013244
 800e4b4:	08013040 	.word	0x08013040
 800e4b8:	7ff00000 	.word	0x7ff00000
 800e4bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e4be:	1c54      	adds	r4, r2, #1
 800e4c0:	9411      	str	r4, [sp, #68]	@ 0x44
 800e4c2:	7852      	ldrb	r2, [r2, #1]
 800e4c4:	2a30      	cmp	r2, #48	@ 0x30
 800e4c6:	d0f9      	beq.n	800e4bc <_strtod_l+0x2a4>
 800e4c8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e4cc:	2c08      	cmp	r4, #8
 800e4ce:	f63f af79 	bhi.w	800e3c4 <_strtod_l+0x1ac>
 800e4d2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e4d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e4d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e4dc:	1c54      	adds	r4, r2, #1
 800e4de:	9411      	str	r4, [sp, #68]	@ 0x44
 800e4e0:	7852      	ldrb	r2, [r2, #1]
 800e4e2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800e4e6:	2e09      	cmp	r6, #9
 800e4e8:	d937      	bls.n	800e55a <_strtod_l+0x342>
 800e4ea:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e4ec:	1ba4      	subs	r4, r4, r6
 800e4ee:	2c08      	cmp	r4, #8
 800e4f0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e4f4:	dc02      	bgt.n	800e4fc <_strtod_l+0x2e4>
 800e4f6:	4564      	cmp	r4, ip
 800e4f8:	bfa8      	it	ge
 800e4fa:	4664      	movge	r4, ip
 800e4fc:	f1be 0f00 	cmp.w	lr, #0
 800e500:	d000      	beq.n	800e504 <_strtod_l+0x2ec>
 800e502:	4264      	negs	r4, r4
 800e504:	2b00      	cmp	r3, #0
 800e506:	d14d      	bne.n	800e5a4 <_strtod_l+0x38c>
 800e508:	9b07      	ldr	r3, [sp, #28]
 800e50a:	4318      	orrs	r0, r3
 800e50c:	f47f aebf 	bne.w	800e28e <_strtod_l+0x76>
 800e510:	2900      	cmp	r1, #0
 800e512:	f47f aed8 	bne.w	800e2c6 <_strtod_l+0xae>
 800e516:	2a69      	cmp	r2, #105	@ 0x69
 800e518:	d027      	beq.n	800e56a <_strtod_l+0x352>
 800e51a:	dc24      	bgt.n	800e566 <_strtod_l+0x34e>
 800e51c:	2a49      	cmp	r2, #73	@ 0x49
 800e51e:	d024      	beq.n	800e56a <_strtod_l+0x352>
 800e520:	2a4e      	cmp	r2, #78	@ 0x4e
 800e522:	f47f aed0 	bne.w	800e2c6 <_strtod_l+0xae>
 800e526:	4997      	ldr	r1, [pc, #604]	@ (800e784 <_strtod_l+0x56c>)
 800e528:	a811      	add	r0, sp, #68	@ 0x44
 800e52a:	f002 fe27 	bl	801117c <__match>
 800e52e:	2800      	cmp	r0, #0
 800e530:	f43f aec9 	beq.w	800e2c6 <_strtod_l+0xae>
 800e534:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b28      	cmp	r3, #40	@ 0x28
 800e53a:	d12d      	bne.n	800e598 <_strtod_l+0x380>
 800e53c:	4992      	ldr	r1, [pc, #584]	@ (800e788 <_strtod_l+0x570>)
 800e53e:	aa14      	add	r2, sp, #80	@ 0x50
 800e540:	a811      	add	r0, sp, #68	@ 0x44
 800e542:	f002 fe2f 	bl	80111a4 <__hexnan>
 800e546:	2805      	cmp	r0, #5
 800e548:	d126      	bne.n	800e598 <_strtod_l+0x380>
 800e54a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e54c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e550:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e554:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e558:	e699      	b.n	800e28e <_strtod_l+0x76>
 800e55a:	240a      	movs	r4, #10
 800e55c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e560:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e564:	e7b9      	b.n	800e4da <_strtod_l+0x2c2>
 800e566:	2a6e      	cmp	r2, #110	@ 0x6e
 800e568:	e7db      	b.n	800e522 <_strtod_l+0x30a>
 800e56a:	4988      	ldr	r1, [pc, #544]	@ (800e78c <_strtod_l+0x574>)
 800e56c:	a811      	add	r0, sp, #68	@ 0x44
 800e56e:	f002 fe05 	bl	801117c <__match>
 800e572:	2800      	cmp	r0, #0
 800e574:	f43f aea7 	beq.w	800e2c6 <_strtod_l+0xae>
 800e578:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e57a:	4985      	ldr	r1, [pc, #532]	@ (800e790 <_strtod_l+0x578>)
 800e57c:	3b01      	subs	r3, #1
 800e57e:	a811      	add	r0, sp, #68	@ 0x44
 800e580:	9311      	str	r3, [sp, #68]	@ 0x44
 800e582:	f002 fdfb 	bl	801117c <__match>
 800e586:	b910      	cbnz	r0, 800e58e <_strtod_l+0x376>
 800e588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e58a:	3301      	adds	r3, #1
 800e58c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e58e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e7a4 <_strtod_l+0x58c>
 800e592:	f04f 0a00 	mov.w	sl, #0
 800e596:	e67a      	b.n	800e28e <_strtod_l+0x76>
 800e598:	487e      	ldr	r0, [pc, #504]	@ (800e794 <_strtod_l+0x57c>)
 800e59a:	f001 fd25 	bl	800ffe8 <nan>
 800e59e:	ec5b ab10 	vmov	sl, fp, d0
 800e5a2:	e674      	b.n	800e28e <_strtod_l+0x76>
 800e5a4:	ee07 9a90 	vmov	s15, r9
 800e5a8:	1be2      	subs	r2, r4, r7
 800e5aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e5ae:	2d00      	cmp	r5, #0
 800e5b0:	bf08      	it	eq
 800e5b2:	461d      	moveq	r5, r3
 800e5b4:	2b10      	cmp	r3, #16
 800e5b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	bfa8      	it	ge
 800e5bc:	2210      	movge	r2, #16
 800e5be:	2b09      	cmp	r3, #9
 800e5c0:	ec5b ab17 	vmov	sl, fp, d7
 800e5c4:	dc15      	bgt.n	800e5f2 <_strtod_l+0x3da>
 800e5c6:	1be1      	subs	r1, r4, r7
 800e5c8:	2900      	cmp	r1, #0
 800e5ca:	f43f ae60 	beq.w	800e28e <_strtod_l+0x76>
 800e5ce:	eba4 0107 	sub.w	r1, r4, r7
 800e5d2:	dd72      	ble.n	800e6ba <_strtod_l+0x4a2>
 800e5d4:	2916      	cmp	r1, #22
 800e5d6:	dc59      	bgt.n	800e68c <_strtod_l+0x474>
 800e5d8:	4b6f      	ldr	r3, [pc, #444]	@ (800e798 <_strtod_l+0x580>)
 800e5da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5e0:	ed93 7b00 	vldr	d7, [r3]
 800e5e4:	ec4b ab16 	vmov	d6, sl, fp
 800e5e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5ec:	ec5b ab17 	vmov	sl, fp, d7
 800e5f0:	e64d      	b.n	800e28e <_strtod_l+0x76>
 800e5f2:	4969      	ldr	r1, [pc, #420]	@ (800e798 <_strtod_l+0x580>)
 800e5f4:	eddd 6a06 	vldr	s13, [sp, #24]
 800e5f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e5fc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e600:	2b0f      	cmp	r3, #15
 800e602:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e606:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e60a:	ec5b ab16 	vmov	sl, fp, d6
 800e60e:	ddda      	ble.n	800e5c6 <_strtod_l+0x3ae>
 800e610:	1a9a      	subs	r2, r3, r2
 800e612:	1be1      	subs	r1, r4, r7
 800e614:	440a      	add	r2, r1
 800e616:	2a00      	cmp	r2, #0
 800e618:	f340 8094 	ble.w	800e744 <_strtod_l+0x52c>
 800e61c:	f012 000f 	ands.w	r0, r2, #15
 800e620:	d00a      	beq.n	800e638 <_strtod_l+0x420>
 800e622:	495d      	ldr	r1, [pc, #372]	@ (800e798 <_strtod_l+0x580>)
 800e624:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e628:	ed91 7b00 	vldr	d7, [r1]
 800e62c:	ec4b ab16 	vmov	d6, sl, fp
 800e630:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e634:	ec5b ab17 	vmov	sl, fp, d7
 800e638:	f032 020f 	bics.w	r2, r2, #15
 800e63c:	d073      	beq.n	800e726 <_strtod_l+0x50e>
 800e63e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e642:	dd47      	ble.n	800e6d4 <_strtod_l+0x4bc>
 800e644:	2400      	movs	r4, #0
 800e646:	4625      	mov	r5, r4
 800e648:	9407      	str	r4, [sp, #28]
 800e64a:	4626      	mov	r6, r4
 800e64c:	9a05      	ldr	r2, [sp, #20]
 800e64e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e7a4 <_strtod_l+0x58c>
 800e652:	2322      	movs	r3, #34	@ 0x22
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	f04f 0a00 	mov.w	sl, #0
 800e65a:	9b07      	ldr	r3, [sp, #28]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f43f ae16 	beq.w	800e28e <_strtod_l+0x76>
 800e662:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e664:	9805      	ldr	r0, [sp, #20]
 800e666:	f002 fe8b 	bl	8011380 <_Bfree>
 800e66a:	9805      	ldr	r0, [sp, #20]
 800e66c:	4631      	mov	r1, r6
 800e66e:	f002 fe87 	bl	8011380 <_Bfree>
 800e672:	9805      	ldr	r0, [sp, #20]
 800e674:	4629      	mov	r1, r5
 800e676:	f002 fe83 	bl	8011380 <_Bfree>
 800e67a:	9907      	ldr	r1, [sp, #28]
 800e67c:	9805      	ldr	r0, [sp, #20]
 800e67e:	f002 fe7f 	bl	8011380 <_Bfree>
 800e682:	9805      	ldr	r0, [sp, #20]
 800e684:	4621      	mov	r1, r4
 800e686:	f002 fe7b 	bl	8011380 <_Bfree>
 800e68a:	e600      	b.n	800e28e <_strtod_l+0x76>
 800e68c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e690:	1be0      	subs	r0, r4, r7
 800e692:	4281      	cmp	r1, r0
 800e694:	dbbc      	blt.n	800e610 <_strtod_l+0x3f8>
 800e696:	4a40      	ldr	r2, [pc, #256]	@ (800e798 <_strtod_l+0x580>)
 800e698:	f1c3 030f 	rsb	r3, r3, #15
 800e69c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e6a0:	ed91 7b00 	vldr	d7, [r1]
 800e6a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e6a6:	ec4b ab16 	vmov	d6, sl, fp
 800e6aa:	1acb      	subs	r3, r1, r3
 800e6ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e6b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6b4:	ed92 6b00 	vldr	d6, [r2]
 800e6b8:	e796      	b.n	800e5e8 <_strtod_l+0x3d0>
 800e6ba:	3116      	adds	r1, #22
 800e6bc:	dba8      	blt.n	800e610 <_strtod_l+0x3f8>
 800e6be:	4b36      	ldr	r3, [pc, #216]	@ (800e798 <_strtod_l+0x580>)
 800e6c0:	1b3c      	subs	r4, r7, r4
 800e6c2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e6c6:	ed94 7b00 	vldr	d7, [r4]
 800e6ca:	ec4b ab16 	vmov	d6, sl, fp
 800e6ce:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e6d2:	e78b      	b.n	800e5ec <_strtod_l+0x3d4>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	ec4b ab17 	vmov	d7, sl, fp
 800e6da:	4e30      	ldr	r6, [pc, #192]	@ (800e79c <_strtod_l+0x584>)
 800e6dc:	1112      	asrs	r2, r2, #4
 800e6de:	4601      	mov	r1, r0
 800e6e0:	2a01      	cmp	r2, #1
 800e6e2:	dc23      	bgt.n	800e72c <_strtod_l+0x514>
 800e6e4:	b108      	cbz	r0, 800e6ea <_strtod_l+0x4d2>
 800e6e6:	ec5b ab17 	vmov	sl, fp, d7
 800e6ea:	4a2c      	ldr	r2, [pc, #176]	@ (800e79c <_strtod_l+0x584>)
 800e6ec:	482c      	ldr	r0, [pc, #176]	@ (800e7a0 <_strtod_l+0x588>)
 800e6ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e6f2:	ed92 7b00 	vldr	d7, [r2]
 800e6f6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e6fa:	ec4b ab16 	vmov	d6, sl, fp
 800e6fe:	4a29      	ldr	r2, [pc, #164]	@ (800e7a4 <_strtod_l+0x58c>)
 800e700:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e704:	ee17 1a90 	vmov	r1, s15
 800e708:	400a      	ands	r2, r1
 800e70a:	4282      	cmp	r2, r0
 800e70c:	ec5b ab17 	vmov	sl, fp, d7
 800e710:	d898      	bhi.n	800e644 <_strtod_l+0x42c>
 800e712:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e716:	4282      	cmp	r2, r0
 800e718:	bf86      	itte	hi
 800e71a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e7a8 <_strtod_l+0x590>
 800e71e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e722:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e726:	2200      	movs	r2, #0
 800e728:	9206      	str	r2, [sp, #24]
 800e72a:	e076      	b.n	800e81a <_strtod_l+0x602>
 800e72c:	f012 0f01 	tst.w	r2, #1
 800e730:	d004      	beq.n	800e73c <_strtod_l+0x524>
 800e732:	ed96 6b00 	vldr	d6, [r6]
 800e736:	2001      	movs	r0, #1
 800e738:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e73c:	3101      	adds	r1, #1
 800e73e:	1052      	asrs	r2, r2, #1
 800e740:	3608      	adds	r6, #8
 800e742:	e7cd      	b.n	800e6e0 <_strtod_l+0x4c8>
 800e744:	d0ef      	beq.n	800e726 <_strtod_l+0x50e>
 800e746:	4252      	negs	r2, r2
 800e748:	f012 000f 	ands.w	r0, r2, #15
 800e74c:	d00a      	beq.n	800e764 <_strtod_l+0x54c>
 800e74e:	4912      	ldr	r1, [pc, #72]	@ (800e798 <_strtod_l+0x580>)
 800e750:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e754:	ed91 7b00 	vldr	d7, [r1]
 800e758:	ec4b ab16 	vmov	d6, sl, fp
 800e75c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e760:	ec5b ab17 	vmov	sl, fp, d7
 800e764:	1112      	asrs	r2, r2, #4
 800e766:	d0de      	beq.n	800e726 <_strtod_l+0x50e>
 800e768:	2a1f      	cmp	r2, #31
 800e76a:	dd1f      	ble.n	800e7ac <_strtod_l+0x594>
 800e76c:	2400      	movs	r4, #0
 800e76e:	4625      	mov	r5, r4
 800e770:	9407      	str	r4, [sp, #28]
 800e772:	4626      	mov	r6, r4
 800e774:	9a05      	ldr	r2, [sp, #20]
 800e776:	2322      	movs	r3, #34	@ 0x22
 800e778:	f04f 0a00 	mov.w	sl, #0
 800e77c:	f04f 0b00 	mov.w	fp, #0
 800e780:	6013      	str	r3, [r2, #0]
 800e782:	e76a      	b.n	800e65a <_strtod_l+0x442>
 800e784:	0801304f 	.word	0x0801304f
 800e788:	08013230 	.word	0x08013230
 800e78c:	08013047 	.word	0x08013047
 800e790:	08013084 	.word	0x08013084
 800e794:	0801322e 	.word	0x0801322e
 800e798:	080133b8 	.word	0x080133b8
 800e79c:	08013390 	.word	0x08013390
 800e7a0:	7ca00000 	.word	0x7ca00000
 800e7a4:	7ff00000 	.word	0x7ff00000
 800e7a8:	7fefffff 	.word	0x7fefffff
 800e7ac:	f012 0110 	ands.w	r1, r2, #16
 800e7b0:	bf18      	it	ne
 800e7b2:	216a      	movne	r1, #106	@ 0x6a
 800e7b4:	9106      	str	r1, [sp, #24]
 800e7b6:	ec4b ab17 	vmov	d7, sl, fp
 800e7ba:	49af      	ldr	r1, [pc, #700]	@ (800ea78 <_strtod_l+0x860>)
 800e7bc:	2000      	movs	r0, #0
 800e7be:	07d6      	lsls	r6, r2, #31
 800e7c0:	d504      	bpl.n	800e7cc <_strtod_l+0x5b4>
 800e7c2:	ed91 6b00 	vldr	d6, [r1]
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7cc:	1052      	asrs	r2, r2, #1
 800e7ce:	f101 0108 	add.w	r1, r1, #8
 800e7d2:	d1f4      	bne.n	800e7be <_strtod_l+0x5a6>
 800e7d4:	b108      	cbz	r0, 800e7da <_strtod_l+0x5c2>
 800e7d6:	ec5b ab17 	vmov	sl, fp, d7
 800e7da:	9a06      	ldr	r2, [sp, #24]
 800e7dc:	b1b2      	cbz	r2, 800e80c <_strtod_l+0x5f4>
 800e7de:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e7e2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e7e6:	2a00      	cmp	r2, #0
 800e7e8:	4658      	mov	r0, fp
 800e7ea:	dd0f      	ble.n	800e80c <_strtod_l+0x5f4>
 800e7ec:	2a1f      	cmp	r2, #31
 800e7ee:	dd55      	ble.n	800e89c <_strtod_l+0x684>
 800e7f0:	2a34      	cmp	r2, #52	@ 0x34
 800e7f2:	bfde      	ittt	le
 800e7f4:	f04f 32ff 	movle.w	r2, #4294967295
 800e7f8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e7fc:	408a      	lslle	r2, r1
 800e7fe:	f04f 0a00 	mov.w	sl, #0
 800e802:	bfcc      	ite	gt
 800e804:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e808:	ea02 0b00 	andle.w	fp, r2, r0
 800e80c:	ec4b ab17 	vmov	d7, sl, fp
 800e810:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e818:	d0a8      	beq.n	800e76c <_strtod_l+0x554>
 800e81a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e81c:	9805      	ldr	r0, [sp, #20]
 800e81e:	f8cd 9000 	str.w	r9, [sp]
 800e822:	462a      	mov	r2, r5
 800e824:	f002 fe14 	bl	8011450 <__s2b>
 800e828:	9007      	str	r0, [sp, #28]
 800e82a:	2800      	cmp	r0, #0
 800e82c:	f43f af0a 	beq.w	800e644 <_strtod_l+0x42c>
 800e830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e832:	1b3f      	subs	r7, r7, r4
 800e834:	2b00      	cmp	r3, #0
 800e836:	bfb4      	ite	lt
 800e838:	463b      	movlt	r3, r7
 800e83a:	2300      	movge	r3, #0
 800e83c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e840:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800ea68 <_strtod_l+0x850>
 800e844:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e848:	2400      	movs	r4, #0
 800e84a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e84c:	4625      	mov	r5, r4
 800e84e:	9b07      	ldr	r3, [sp, #28]
 800e850:	9805      	ldr	r0, [sp, #20]
 800e852:	6859      	ldr	r1, [r3, #4]
 800e854:	f002 fd54 	bl	8011300 <_Balloc>
 800e858:	4606      	mov	r6, r0
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f43f aef6 	beq.w	800e64c <_strtod_l+0x434>
 800e860:	9b07      	ldr	r3, [sp, #28]
 800e862:	691a      	ldr	r2, [r3, #16]
 800e864:	ec4b ab19 	vmov	d9, sl, fp
 800e868:	3202      	adds	r2, #2
 800e86a:	f103 010c 	add.w	r1, r3, #12
 800e86e:	0092      	lsls	r2, r2, #2
 800e870:	300c      	adds	r0, #12
 800e872:	f001 fba8 	bl	800ffc6 <memcpy>
 800e876:	eeb0 0b49 	vmov.f64	d0, d9
 800e87a:	9805      	ldr	r0, [sp, #20]
 800e87c:	aa14      	add	r2, sp, #80	@ 0x50
 800e87e:	a913      	add	r1, sp, #76	@ 0x4c
 800e880:	f003 f91a 	bl	8011ab8 <__d2b>
 800e884:	9012      	str	r0, [sp, #72]	@ 0x48
 800e886:	2800      	cmp	r0, #0
 800e888:	f43f aee0 	beq.w	800e64c <_strtod_l+0x434>
 800e88c:	9805      	ldr	r0, [sp, #20]
 800e88e:	2101      	movs	r1, #1
 800e890:	f002 fe74 	bl	801157c <__i2b>
 800e894:	4605      	mov	r5, r0
 800e896:	b940      	cbnz	r0, 800e8aa <_strtod_l+0x692>
 800e898:	2500      	movs	r5, #0
 800e89a:	e6d7      	b.n	800e64c <_strtod_l+0x434>
 800e89c:	f04f 31ff 	mov.w	r1, #4294967295
 800e8a0:	fa01 f202 	lsl.w	r2, r1, r2
 800e8a4:	ea02 0a0a 	and.w	sl, r2, sl
 800e8a8:	e7b0      	b.n	800e80c <_strtod_l+0x5f4>
 800e8aa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e8ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8ae:	2f00      	cmp	r7, #0
 800e8b0:	bfab      	itete	ge
 800e8b2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e8b4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e8b6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e8ba:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e8be:	bfac      	ite	ge
 800e8c0:	eb07 0903 	addge.w	r9, r7, r3
 800e8c4:	eba3 0807 	sublt.w	r8, r3, r7
 800e8c8:	9b06      	ldr	r3, [sp, #24]
 800e8ca:	1aff      	subs	r7, r7, r3
 800e8cc:	4417      	add	r7, r2
 800e8ce:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e8d2:	4a6a      	ldr	r2, [pc, #424]	@ (800ea7c <_strtod_l+0x864>)
 800e8d4:	3f01      	subs	r7, #1
 800e8d6:	4297      	cmp	r7, r2
 800e8d8:	da51      	bge.n	800e97e <_strtod_l+0x766>
 800e8da:	1bd1      	subs	r1, r2, r7
 800e8dc:	291f      	cmp	r1, #31
 800e8de:	eba3 0301 	sub.w	r3, r3, r1
 800e8e2:	f04f 0201 	mov.w	r2, #1
 800e8e6:	dc3e      	bgt.n	800e966 <_strtod_l+0x74e>
 800e8e8:	408a      	lsls	r2, r1
 800e8ea:	920c      	str	r2, [sp, #48]	@ 0x30
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e8f0:	eb09 0703 	add.w	r7, r9, r3
 800e8f4:	4498      	add	r8, r3
 800e8f6:	9b06      	ldr	r3, [sp, #24]
 800e8f8:	45b9      	cmp	r9, r7
 800e8fa:	4498      	add	r8, r3
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	bfa8      	it	ge
 800e900:	463b      	movge	r3, r7
 800e902:	4543      	cmp	r3, r8
 800e904:	bfa8      	it	ge
 800e906:	4643      	movge	r3, r8
 800e908:	2b00      	cmp	r3, #0
 800e90a:	bfc2      	ittt	gt
 800e90c:	1aff      	subgt	r7, r7, r3
 800e90e:	eba8 0803 	subgt.w	r8, r8, r3
 800e912:	eba9 0903 	subgt.w	r9, r9, r3
 800e916:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e918:	2b00      	cmp	r3, #0
 800e91a:	dd16      	ble.n	800e94a <_strtod_l+0x732>
 800e91c:	4629      	mov	r1, r5
 800e91e:	9805      	ldr	r0, [sp, #20]
 800e920:	461a      	mov	r2, r3
 800e922:	f002 fee3 	bl	80116ec <__pow5mult>
 800e926:	4605      	mov	r5, r0
 800e928:	2800      	cmp	r0, #0
 800e92a:	d0b5      	beq.n	800e898 <_strtod_l+0x680>
 800e92c:	4601      	mov	r1, r0
 800e92e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e930:	9805      	ldr	r0, [sp, #20]
 800e932:	f002 fe39 	bl	80115a8 <__multiply>
 800e936:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e938:	2800      	cmp	r0, #0
 800e93a:	f43f ae87 	beq.w	800e64c <_strtod_l+0x434>
 800e93e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e940:	9805      	ldr	r0, [sp, #20]
 800e942:	f002 fd1d 	bl	8011380 <_Bfree>
 800e946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e948:	9312      	str	r3, [sp, #72]	@ 0x48
 800e94a:	2f00      	cmp	r7, #0
 800e94c:	dc1b      	bgt.n	800e986 <_strtod_l+0x76e>
 800e94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e950:	2b00      	cmp	r3, #0
 800e952:	dd21      	ble.n	800e998 <_strtod_l+0x780>
 800e954:	4631      	mov	r1, r6
 800e956:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e958:	9805      	ldr	r0, [sp, #20]
 800e95a:	f002 fec7 	bl	80116ec <__pow5mult>
 800e95e:	4606      	mov	r6, r0
 800e960:	b9d0      	cbnz	r0, 800e998 <_strtod_l+0x780>
 800e962:	2600      	movs	r6, #0
 800e964:	e672      	b.n	800e64c <_strtod_l+0x434>
 800e966:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e96a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e96e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e972:	37e2      	adds	r7, #226	@ 0xe2
 800e974:	fa02 f107 	lsl.w	r1, r2, r7
 800e978:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e97a:	920c      	str	r2, [sp, #48]	@ 0x30
 800e97c:	e7b8      	b.n	800e8f0 <_strtod_l+0x6d8>
 800e97e:	2200      	movs	r2, #0
 800e980:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e982:	2201      	movs	r2, #1
 800e984:	e7f9      	b.n	800e97a <_strtod_l+0x762>
 800e986:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e988:	9805      	ldr	r0, [sp, #20]
 800e98a:	463a      	mov	r2, r7
 800e98c:	f002 ff08 	bl	80117a0 <__lshift>
 800e990:	9012      	str	r0, [sp, #72]	@ 0x48
 800e992:	2800      	cmp	r0, #0
 800e994:	d1db      	bne.n	800e94e <_strtod_l+0x736>
 800e996:	e659      	b.n	800e64c <_strtod_l+0x434>
 800e998:	f1b8 0f00 	cmp.w	r8, #0
 800e99c:	dd07      	ble.n	800e9ae <_strtod_l+0x796>
 800e99e:	4631      	mov	r1, r6
 800e9a0:	9805      	ldr	r0, [sp, #20]
 800e9a2:	4642      	mov	r2, r8
 800e9a4:	f002 fefc 	bl	80117a0 <__lshift>
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d0d9      	beq.n	800e962 <_strtod_l+0x74a>
 800e9ae:	f1b9 0f00 	cmp.w	r9, #0
 800e9b2:	dd08      	ble.n	800e9c6 <_strtod_l+0x7ae>
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	9805      	ldr	r0, [sp, #20]
 800e9b8:	464a      	mov	r2, r9
 800e9ba:	f002 fef1 	bl	80117a0 <__lshift>
 800e9be:	4605      	mov	r5, r0
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	f43f ae43 	beq.w	800e64c <_strtod_l+0x434>
 800e9c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e9c8:	9805      	ldr	r0, [sp, #20]
 800e9ca:	4632      	mov	r2, r6
 800e9cc:	f002 ff70 	bl	80118b0 <__mdiff>
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f43f ae3a 	beq.w	800e64c <_strtod_l+0x434>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e9de:	60c3      	str	r3, [r0, #12]
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	f002 ff49 	bl	8011878 <__mcmp>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	da4c      	bge.n	800ea84 <_strtod_l+0x86c>
 800e9ea:	ea58 080a 	orrs.w	r8, r8, sl
 800e9ee:	d172      	bne.n	800ead6 <_strtod_l+0x8be>
 800e9f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d16e      	bne.n	800ead6 <_strtod_l+0x8be>
 800e9f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9fc:	0d1b      	lsrs	r3, r3, #20
 800e9fe:	051b      	lsls	r3, r3, #20
 800ea00:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ea04:	d967      	bls.n	800ead6 <_strtod_l+0x8be>
 800ea06:	6963      	ldr	r3, [r4, #20]
 800ea08:	b913      	cbnz	r3, 800ea10 <_strtod_l+0x7f8>
 800ea0a:	6923      	ldr	r3, [r4, #16]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	dd62      	ble.n	800ead6 <_strtod_l+0x8be>
 800ea10:	4621      	mov	r1, r4
 800ea12:	2201      	movs	r2, #1
 800ea14:	9805      	ldr	r0, [sp, #20]
 800ea16:	f002 fec3 	bl	80117a0 <__lshift>
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	f002 ff2b 	bl	8011878 <__mcmp>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	dd57      	ble.n	800ead6 <_strtod_l+0x8be>
 800ea26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea2a:	9a06      	ldr	r2, [sp, #24]
 800ea2c:	0d1b      	lsrs	r3, r3, #20
 800ea2e:	051b      	lsls	r3, r3, #20
 800ea30:	2a00      	cmp	r2, #0
 800ea32:	d06e      	beq.n	800eb12 <_strtod_l+0x8fa>
 800ea34:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ea38:	d86b      	bhi.n	800eb12 <_strtod_l+0x8fa>
 800ea3a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ea3e:	f67f ae99 	bls.w	800e774 <_strtod_l+0x55c>
 800ea42:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800ea70 <_strtod_l+0x858>
 800ea46:	ec4b ab16 	vmov	d6, sl, fp
 800ea4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea80 <_strtod_l+0x868>)
 800ea4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ea50:	ee17 2a90 	vmov	r2, s15
 800ea54:	4013      	ands	r3, r2
 800ea56:	ec5b ab17 	vmov	sl, fp, d7
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f47f ae01 	bne.w	800e662 <_strtod_l+0x44a>
 800ea60:	9a05      	ldr	r2, [sp, #20]
 800ea62:	2322      	movs	r3, #34	@ 0x22
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	e5fc      	b.n	800e662 <_strtod_l+0x44a>
 800ea68:	ffc00000 	.word	0xffc00000
 800ea6c:	41dfffff 	.word	0x41dfffff
 800ea70:	00000000 	.word	0x00000000
 800ea74:	39500000 	.word	0x39500000
 800ea78:	08013258 	.word	0x08013258
 800ea7c:	fffffc02 	.word	0xfffffc02
 800ea80:	7ff00000 	.word	0x7ff00000
 800ea84:	46d9      	mov	r9, fp
 800ea86:	d15d      	bne.n	800eb44 <_strtod_l+0x92c>
 800ea88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea8c:	f1b8 0f00 	cmp.w	r8, #0
 800ea90:	d02a      	beq.n	800eae8 <_strtod_l+0x8d0>
 800ea92:	4aa9      	ldr	r2, [pc, #676]	@ (800ed38 <_strtod_l+0xb20>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d12a      	bne.n	800eaee <_strtod_l+0x8d6>
 800ea98:	9b06      	ldr	r3, [sp, #24]
 800ea9a:	4652      	mov	r2, sl
 800ea9c:	b1fb      	cbz	r3, 800eade <_strtod_l+0x8c6>
 800ea9e:	4ba7      	ldr	r3, [pc, #668]	@ (800ed3c <_strtod_l+0xb24>)
 800eaa0:	ea0b 0303 	and.w	r3, fp, r3
 800eaa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eaa8:	f04f 31ff 	mov.w	r1, #4294967295
 800eaac:	d81a      	bhi.n	800eae4 <_strtod_l+0x8cc>
 800eaae:	0d1b      	lsrs	r3, r3, #20
 800eab0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eab4:	fa01 f303 	lsl.w	r3, r1, r3
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d118      	bne.n	800eaee <_strtod_l+0x8d6>
 800eabc:	4ba0      	ldr	r3, [pc, #640]	@ (800ed40 <_strtod_l+0xb28>)
 800eabe:	4599      	cmp	r9, r3
 800eac0:	d102      	bne.n	800eac8 <_strtod_l+0x8b0>
 800eac2:	3201      	adds	r2, #1
 800eac4:	f43f adc2 	beq.w	800e64c <_strtod_l+0x434>
 800eac8:	4b9c      	ldr	r3, [pc, #624]	@ (800ed3c <_strtod_l+0xb24>)
 800eaca:	ea09 0303 	and.w	r3, r9, r3
 800eace:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ead2:	f04f 0a00 	mov.w	sl, #0
 800ead6:	9b06      	ldr	r3, [sp, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1b2      	bne.n	800ea42 <_strtod_l+0x82a>
 800eadc:	e5c1      	b.n	800e662 <_strtod_l+0x44a>
 800eade:	f04f 33ff 	mov.w	r3, #4294967295
 800eae2:	e7e9      	b.n	800eab8 <_strtod_l+0x8a0>
 800eae4:	460b      	mov	r3, r1
 800eae6:	e7e7      	b.n	800eab8 <_strtod_l+0x8a0>
 800eae8:	ea53 030a 	orrs.w	r3, r3, sl
 800eaec:	d09b      	beq.n	800ea26 <_strtod_l+0x80e>
 800eaee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eaf0:	b1c3      	cbz	r3, 800eb24 <_strtod_l+0x90c>
 800eaf2:	ea13 0f09 	tst.w	r3, r9
 800eaf6:	d0ee      	beq.n	800ead6 <_strtod_l+0x8be>
 800eaf8:	9a06      	ldr	r2, [sp, #24]
 800eafa:	4650      	mov	r0, sl
 800eafc:	4659      	mov	r1, fp
 800eafe:	f1b8 0f00 	cmp.w	r8, #0
 800eb02:	d013      	beq.n	800eb2c <_strtod_l+0x914>
 800eb04:	f7ff fb6c 	bl	800e1e0 <sulp>
 800eb08:	ee39 7b00 	vadd.f64	d7, d9, d0
 800eb0c:	ec5b ab17 	vmov	sl, fp, d7
 800eb10:	e7e1      	b.n	800ead6 <_strtod_l+0x8be>
 800eb12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eb16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb1e:	f04f 3aff 	mov.w	sl, #4294967295
 800eb22:	e7d8      	b.n	800ead6 <_strtod_l+0x8be>
 800eb24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb26:	ea13 0f0a 	tst.w	r3, sl
 800eb2a:	e7e4      	b.n	800eaf6 <_strtod_l+0x8de>
 800eb2c:	f7ff fb58 	bl	800e1e0 <sulp>
 800eb30:	ee39 0b40 	vsub.f64	d0, d9, d0
 800eb34:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3c:	ec5b ab10 	vmov	sl, fp, d0
 800eb40:	d1c9      	bne.n	800ead6 <_strtod_l+0x8be>
 800eb42:	e617      	b.n	800e774 <_strtod_l+0x55c>
 800eb44:	4629      	mov	r1, r5
 800eb46:	4620      	mov	r0, r4
 800eb48:	f003 f80e 	bl	8011b68 <__ratio>
 800eb4c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800eb50:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb58:	d85d      	bhi.n	800ec16 <_strtod_l+0x9fe>
 800eb5a:	f1b8 0f00 	cmp.w	r8, #0
 800eb5e:	d164      	bne.n	800ec2a <_strtod_l+0xa12>
 800eb60:	f1ba 0f00 	cmp.w	sl, #0
 800eb64:	d14b      	bne.n	800ebfe <_strtod_l+0x9e6>
 800eb66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb6a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d160      	bne.n	800ec34 <_strtod_l+0xa1c>
 800eb72:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800eb76:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800eb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7e:	d401      	bmi.n	800eb84 <_strtod_l+0x96c>
 800eb80:	ee20 8b08 	vmul.f64	d8, d0, d8
 800eb84:	eeb1 ab48 	vneg.f64	d10, d8
 800eb88:	486c      	ldr	r0, [pc, #432]	@ (800ed3c <_strtod_l+0xb24>)
 800eb8a:	496e      	ldr	r1, [pc, #440]	@ (800ed44 <_strtod_l+0xb2c>)
 800eb8c:	ea09 0700 	and.w	r7, r9, r0
 800eb90:	428f      	cmp	r7, r1
 800eb92:	ec53 2b1a 	vmov	r2, r3, d10
 800eb96:	d17d      	bne.n	800ec94 <_strtod_l+0xa7c>
 800eb98:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800eb9c:	ec4b ab1c 	vmov	d12, sl, fp
 800eba0:	eeb0 0b4c 	vmov.f64	d0, d12
 800eba4:	f002 ff18 	bl	80119d8 <__ulp>
 800eba8:	4864      	ldr	r0, [pc, #400]	@ (800ed3c <_strtod_l+0xb24>)
 800ebaa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ebae:	ee1c 3a90 	vmov	r3, s25
 800ebb2:	4a65      	ldr	r2, [pc, #404]	@ (800ed48 <_strtod_l+0xb30>)
 800ebb4:	ea03 0100 	and.w	r1, r3, r0
 800ebb8:	4291      	cmp	r1, r2
 800ebba:	ec5b ab1c 	vmov	sl, fp, d12
 800ebbe:	d93c      	bls.n	800ec3a <_strtod_l+0xa22>
 800ebc0:	ee19 2a90 	vmov	r2, s19
 800ebc4:	4b5e      	ldr	r3, [pc, #376]	@ (800ed40 <_strtod_l+0xb28>)
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d104      	bne.n	800ebd4 <_strtod_l+0x9bc>
 800ebca:	ee19 3a10 	vmov	r3, s18
 800ebce:	3301      	adds	r3, #1
 800ebd0:	f43f ad3c 	beq.w	800e64c <_strtod_l+0x434>
 800ebd4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800ed40 <_strtod_l+0xb28>
 800ebd8:	f04f 3aff 	mov.w	sl, #4294967295
 800ebdc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ebde:	9805      	ldr	r0, [sp, #20]
 800ebe0:	f002 fbce 	bl	8011380 <_Bfree>
 800ebe4:	9805      	ldr	r0, [sp, #20]
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	f002 fbca 	bl	8011380 <_Bfree>
 800ebec:	9805      	ldr	r0, [sp, #20]
 800ebee:	4629      	mov	r1, r5
 800ebf0:	f002 fbc6 	bl	8011380 <_Bfree>
 800ebf4:	9805      	ldr	r0, [sp, #20]
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	f002 fbc2 	bl	8011380 <_Bfree>
 800ebfc:	e627      	b.n	800e84e <_strtod_l+0x636>
 800ebfe:	f1ba 0f01 	cmp.w	sl, #1
 800ec02:	d103      	bne.n	800ec0c <_strtod_l+0x9f4>
 800ec04:	f1bb 0f00 	cmp.w	fp, #0
 800ec08:	f43f adb4 	beq.w	800e774 <_strtod_l+0x55c>
 800ec0c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ec10:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ec14:	e7b8      	b.n	800eb88 <_strtod_l+0x970>
 800ec16:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ec1a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ec1e:	f1b8 0f00 	cmp.w	r8, #0
 800ec22:	d0af      	beq.n	800eb84 <_strtod_l+0x96c>
 800ec24:	eeb0 ab48 	vmov.f64	d10, d8
 800ec28:	e7ae      	b.n	800eb88 <_strtod_l+0x970>
 800ec2a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ec2e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ec32:	e7a9      	b.n	800eb88 <_strtod_l+0x970>
 800ec34:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ec38:	e7a6      	b.n	800eb88 <_strtod_l+0x970>
 800ec3a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ec3e:	9b06      	ldr	r3, [sp, #24]
 800ec40:	46d9      	mov	r9, fp
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1ca      	bne.n	800ebdc <_strtod_l+0x9c4>
 800ec46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec4a:	0d1b      	lsrs	r3, r3, #20
 800ec4c:	051b      	lsls	r3, r3, #20
 800ec4e:	429f      	cmp	r7, r3
 800ec50:	d1c4      	bne.n	800ebdc <_strtod_l+0x9c4>
 800ec52:	ec51 0b18 	vmov	r0, r1, d8
 800ec56:	f7f1 fd6f 	bl	8000738 <__aeabi_d2lz>
 800ec5a:	f7f1 fd27 	bl	80006ac <__aeabi_l2d>
 800ec5e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ec62:	ec41 0b17 	vmov	d7, r0, r1
 800ec66:	ea49 090a 	orr.w	r9, r9, sl
 800ec6a:	ea59 0908 	orrs.w	r9, r9, r8
 800ec6e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ec72:	d03c      	beq.n	800ecee <_strtod_l+0xad6>
 800ec74:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ed20 <_strtod_l+0xb08>
 800ec78:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ec7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec80:	f53f acef 	bmi.w	800e662 <_strtod_l+0x44a>
 800ec84:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800ed28 <_strtod_l+0xb10>
 800ec88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ec8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec90:	dda4      	ble.n	800ebdc <_strtod_l+0x9c4>
 800ec92:	e4e6      	b.n	800e662 <_strtod_l+0x44a>
 800ec94:	9906      	ldr	r1, [sp, #24]
 800ec96:	b1e1      	cbz	r1, 800ecd2 <_strtod_l+0xaba>
 800ec98:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ec9c:	d819      	bhi.n	800ecd2 <_strtod_l+0xaba>
 800ec9e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800eca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca6:	d811      	bhi.n	800eccc <_strtod_l+0xab4>
 800eca8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ecac:	ee18 3a10 	vmov	r3, s16
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	bf38      	it	cc
 800ecb4:	2301      	movcc	r3, #1
 800ecb6:	ee08 3a10 	vmov	s16, r3
 800ecba:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ecbe:	f1b8 0f00 	cmp.w	r8, #0
 800ecc2:	d111      	bne.n	800ece8 <_strtod_l+0xad0>
 800ecc4:	eeb1 7b48 	vneg.f64	d7, d8
 800ecc8:	ec53 2b17 	vmov	r2, r3, d7
 800eccc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ecd0:	1bcb      	subs	r3, r1, r7
 800ecd2:	eeb0 0b49 	vmov.f64	d0, d9
 800ecd6:	ec43 2b1a 	vmov	d10, r2, r3
 800ecda:	f002 fe7d 	bl	80119d8 <__ulp>
 800ecde:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ece2:	ec5b ab19 	vmov	sl, fp, d9
 800ece6:	e7aa      	b.n	800ec3e <_strtod_l+0xa26>
 800ece8:	eeb0 7b48 	vmov.f64	d7, d8
 800ecec:	e7ec      	b.n	800ecc8 <_strtod_l+0xab0>
 800ecee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800ed30 <_strtod_l+0xb18>
 800ecf2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ecf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecfa:	f57f af6f 	bpl.w	800ebdc <_strtod_l+0x9c4>
 800ecfe:	e4b0      	b.n	800e662 <_strtod_l+0x44a>
 800ed00:	2300      	movs	r3, #0
 800ed02:	9308      	str	r3, [sp, #32]
 800ed04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed08:	6013      	str	r3, [r2, #0]
 800ed0a:	f7ff bac4 	b.w	800e296 <_strtod_l+0x7e>
 800ed0e:	2a65      	cmp	r2, #101	@ 0x65
 800ed10:	f43f abbf 	beq.w	800e492 <_strtod_l+0x27a>
 800ed14:	2a45      	cmp	r2, #69	@ 0x45
 800ed16:	f43f abbc 	beq.w	800e492 <_strtod_l+0x27a>
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	f7ff bbf4 	b.w	800e508 <_strtod_l+0x2f0>
 800ed20:	94a03595 	.word	0x94a03595
 800ed24:	3fdfffff 	.word	0x3fdfffff
 800ed28:	35afe535 	.word	0x35afe535
 800ed2c:	3fe00000 	.word	0x3fe00000
 800ed30:	94a03595 	.word	0x94a03595
 800ed34:	3fcfffff 	.word	0x3fcfffff
 800ed38:	000fffff 	.word	0x000fffff
 800ed3c:	7ff00000 	.word	0x7ff00000
 800ed40:	7fefffff 	.word	0x7fefffff
 800ed44:	7fe00000 	.word	0x7fe00000
 800ed48:	7c9fffff 	.word	0x7c9fffff

0800ed4c <_strtod_r>:
 800ed4c:	4b01      	ldr	r3, [pc, #4]	@ (800ed54 <_strtod_r+0x8>)
 800ed4e:	f7ff ba63 	b.w	800e218 <_strtod_l>
 800ed52:	bf00      	nop
 800ed54:	2400002c 	.word	0x2400002c

0800ed58 <__cvt>:
 800ed58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed5a:	ed2d 8b02 	vpush	{d8}
 800ed5e:	eeb0 8b40 	vmov.f64	d8, d0
 800ed62:	b085      	sub	sp, #20
 800ed64:	4617      	mov	r7, r2
 800ed66:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ed68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed6a:	ee18 2a90 	vmov	r2, s17
 800ed6e:	f025 0520 	bic.w	r5, r5, #32
 800ed72:	2a00      	cmp	r2, #0
 800ed74:	bfb6      	itet	lt
 800ed76:	222d      	movlt	r2, #45	@ 0x2d
 800ed78:	2200      	movge	r2, #0
 800ed7a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ed7e:	2d46      	cmp	r5, #70	@ 0x46
 800ed80:	460c      	mov	r4, r1
 800ed82:	701a      	strb	r2, [r3, #0]
 800ed84:	d004      	beq.n	800ed90 <__cvt+0x38>
 800ed86:	2d45      	cmp	r5, #69	@ 0x45
 800ed88:	d100      	bne.n	800ed8c <__cvt+0x34>
 800ed8a:	3401      	adds	r4, #1
 800ed8c:	2102      	movs	r1, #2
 800ed8e:	e000      	b.n	800ed92 <__cvt+0x3a>
 800ed90:	2103      	movs	r1, #3
 800ed92:	ab03      	add	r3, sp, #12
 800ed94:	9301      	str	r3, [sp, #4]
 800ed96:	ab02      	add	r3, sp, #8
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	4622      	mov	r2, r4
 800ed9c:	4633      	mov	r3, r6
 800ed9e:	eeb0 0b48 	vmov.f64	d0, d8
 800eda2:	f001 f9b9 	bl	8010118 <_dtoa_r>
 800eda6:	2d47      	cmp	r5, #71	@ 0x47
 800eda8:	d114      	bne.n	800edd4 <__cvt+0x7c>
 800edaa:	07fb      	lsls	r3, r7, #31
 800edac:	d50a      	bpl.n	800edc4 <__cvt+0x6c>
 800edae:	1902      	adds	r2, r0, r4
 800edb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800edb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb8:	bf08      	it	eq
 800edba:	9203      	streq	r2, [sp, #12]
 800edbc:	2130      	movs	r1, #48	@ 0x30
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d319      	bcc.n	800edf8 <__cvt+0xa0>
 800edc4:	9b03      	ldr	r3, [sp, #12]
 800edc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edc8:	1a1b      	subs	r3, r3, r0
 800edca:	6013      	str	r3, [r2, #0]
 800edcc:	b005      	add	sp, #20
 800edce:	ecbd 8b02 	vpop	{d8}
 800edd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd4:	2d46      	cmp	r5, #70	@ 0x46
 800edd6:	eb00 0204 	add.w	r2, r0, r4
 800edda:	d1e9      	bne.n	800edb0 <__cvt+0x58>
 800eddc:	7803      	ldrb	r3, [r0, #0]
 800edde:	2b30      	cmp	r3, #48	@ 0x30
 800ede0:	d107      	bne.n	800edf2 <__cvt+0x9a>
 800ede2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ede6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edea:	bf1c      	itt	ne
 800edec:	f1c4 0401 	rsbne	r4, r4, #1
 800edf0:	6034      	strne	r4, [r6, #0]
 800edf2:	6833      	ldr	r3, [r6, #0]
 800edf4:	441a      	add	r2, r3
 800edf6:	e7db      	b.n	800edb0 <__cvt+0x58>
 800edf8:	1c5c      	adds	r4, r3, #1
 800edfa:	9403      	str	r4, [sp, #12]
 800edfc:	7019      	strb	r1, [r3, #0]
 800edfe:	e7de      	b.n	800edbe <__cvt+0x66>

0800ee00 <__exponent>:
 800ee00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee02:	2900      	cmp	r1, #0
 800ee04:	bfba      	itte	lt
 800ee06:	4249      	neglt	r1, r1
 800ee08:	232d      	movlt	r3, #45	@ 0x2d
 800ee0a:	232b      	movge	r3, #43	@ 0x2b
 800ee0c:	2909      	cmp	r1, #9
 800ee0e:	7002      	strb	r2, [r0, #0]
 800ee10:	7043      	strb	r3, [r0, #1]
 800ee12:	dd29      	ble.n	800ee68 <__exponent+0x68>
 800ee14:	f10d 0307 	add.w	r3, sp, #7
 800ee18:	461d      	mov	r5, r3
 800ee1a:	270a      	movs	r7, #10
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ee22:	fb07 1416 	mls	r4, r7, r6, r1
 800ee26:	3430      	adds	r4, #48	@ 0x30
 800ee28:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee2c:	460c      	mov	r4, r1
 800ee2e:	2c63      	cmp	r4, #99	@ 0x63
 800ee30:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee34:	4631      	mov	r1, r6
 800ee36:	dcf1      	bgt.n	800ee1c <__exponent+0x1c>
 800ee38:	3130      	adds	r1, #48	@ 0x30
 800ee3a:	1e94      	subs	r4, r2, #2
 800ee3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee40:	1c41      	adds	r1, r0, #1
 800ee42:	4623      	mov	r3, r4
 800ee44:	42ab      	cmp	r3, r5
 800ee46:	d30a      	bcc.n	800ee5e <__exponent+0x5e>
 800ee48:	f10d 0309 	add.w	r3, sp, #9
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	42ac      	cmp	r4, r5
 800ee50:	bf88      	it	hi
 800ee52:	2300      	movhi	r3, #0
 800ee54:	3302      	adds	r3, #2
 800ee56:	4403      	add	r3, r0
 800ee58:	1a18      	subs	r0, r3, r0
 800ee5a:	b003      	add	sp, #12
 800ee5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee62:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee66:	e7ed      	b.n	800ee44 <__exponent+0x44>
 800ee68:	2330      	movs	r3, #48	@ 0x30
 800ee6a:	3130      	adds	r1, #48	@ 0x30
 800ee6c:	7083      	strb	r3, [r0, #2]
 800ee6e:	70c1      	strb	r1, [r0, #3]
 800ee70:	1d03      	adds	r3, r0, #4
 800ee72:	e7f1      	b.n	800ee58 <__exponent+0x58>
 800ee74:	0000      	movs	r0, r0
	...

0800ee78 <_printf_float>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	b08d      	sub	sp, #52	@ 0x34
 800ee7e:	460c      	mov	r4, r1
 800ee80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ee84:	4616      	mov	r6, r2
 800ee86:	461f      	mov	r7, r3
 800ee88:	4605      	mov	r5, r0
 800ee8a:	f001 f815 	bl	800feb8 <_localeconv_r>
 800ee8e:	f8d0 b000 	ldr.w	fp, [r0]
 800ee92:	4658      	mov	r0, fp
 800ee94:	f7f1 fa74 	bl	8000380 <strlen>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee9c:	f8d8 3000 	ldr.w	r3, [r8]
 800eea0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800eea4:	6822      	ldr	r2, [r4, #0]
 800eea6:	9005      	str	r0, [sp, #20]
 800eea8:	3307      	adds	r3, #7
 800eeaa:	f023 0307 	bic.w	r3, r3, #7
 800eeae:	f103 0108 	add.w	r1, r3, #8
 800eeb2:	f8c8 1000 	str.w	r1, [r8]
 800eeb6:	ed93 0b00 	vldr	d0, [r3]
 800eeba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f118 <_printf_float+0x2a0>
 800eebe:	eeb0 7bc0 	vabs.f64	d7, d0
 800eec2:	eeb4 7b46 	vcmp.f64	d7, d6
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800eece:	dd24      	ble.n	800ef1a <_printf_float+0xa2>
 800eed0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed8:	d502      	bpl.n	800eee0 <_printf_float+0x68>
 800eeda:	232d      	movs	r3, #45	@ 0x2d
 800eedc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eee0:	498f      	ldr	r1, [pc, #572]	@ (800f120 <_printf_float+0x2a8>)
 800eee2:	4b90      	ldr	r3, [pc, #576]	@ (800f124 <_printf_float+0x2ac>)
 800eee4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800eee8:	bf8c      	ite	hi
 800eeea:	4688      	movhi	r8, r1
 800eeec:	4698      	movls	r8, r3
 800eeee:	f022 0204 	bic.w	r2, r2, #4
 800eef2:	2303      	movs	r3, #3
 800eef4:	6123      	str	r3, [r4, #16]
 800eef6:	6022      	str	r2, [r4, #0]
 800eef8:	f04f 0a00 	mov.w	sl, #0
 800eefc:	9700      	str	r7, [sp, #0]
 800eefe:	4633      	mov	r3, r6
 800ef00:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef02:	4621      	mov	r1, r4
 800ef04:	4628      	mov	r0, r5
 800ef06:	f000 f9d1 	bl	800f2ac <_printf_common>
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	f040 8089 	bne.w	800f022 <_printf_float+0x1aa>
 800ef10:	f04f 30ff 	mov.w	r0, #4294967295
 800ef14:	b00d      	add	sp, #52	@ 0x34
 800ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ef1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef22:	d709      	bvc.n	800ef38 <_printf_float+0xc0>
 800ef24:	ee10 3a90 	vmov	r3, s1
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	bfbc      	itt	lt
 800ef2c:	232d      	movlt	r3, #45	@ 0x2d
 800ef2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef32:	497d      	ldr	r1, [pc, #500]	@ (800f128 <_printf_float+0x2b0>)
 800ef34:	4b7d      	ldr	r3, [pc, #500]	@ (800f12c <_printf_float+0x2b4>)
 800ef36:	e7d5      	b.n	800eee4 <_printf_float+0x6c>
 800ef38:	6863      	ldr	r3, [r4, #4]
 800ef3a:	1c59      	adds	r1, r3, #1
 800ef3c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ef40:	d139      	bne.n	800efb6 <_printf_float+0x13e>
 800ef42:	2306      	movs	r3, #6
 800ef44:	6063      	str	r3, [r4, #4]
 800ef46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	6022      	str	r2, [r4, #0]
 800ef4e:	9303      	str	r3, [sp, #12]
 800ef50:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ef56:	ab09      	add	r3, sp, #36	@ 0x24
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	6861      	ldr	r1, [r4, #4]
 800ef5c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ef60:	4628      	mov	r0, r5
 800ef62:	f7ff fef9 	bl	800ed58 <__cvt>
 800ef66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef6c:	4680      	mov	r8, r0
 800ef6e:	d129      	bne.n	800efc4 <_printf_float+0x14c>
 800ef70:	1cc8      	adds	r0, r1, #3
 800ef72:	db02      	blt.n	800ef7a <_printf_float+0x102>
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	4299      	cmp	r1, r3
 800ef78:	dd41      	ble.n	800effe <_printf_float+0x186>
 800ef7a:	f1a9 0902 	sub.w	r9, r9, #2
 800ef7e:	fa5f f989 	uxtb.w	r9, r9
 800ef82:	3901      	subs	r1, #1
 800ef84:	464a      	mov	r2, r9
 800ef86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ef8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef8c:	f7ff ff38 	bl	800ee00 <__exponent>
 800ef90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef92:	1813      	adds	r3, r2, r0
 800ef94:	2a01      	cmp	r2, #1
 800ef96:	4682      	mov	sl, r0
 800ef98:	6123      	str	r3, [r4, #16]
 800ef9a:	dc02      	bgt.n	800efa2 <_printf_float+0x12a>
 800ef9c:	6822      	ldr	r2, [r4, #0]
 800ef9e:	07d2      	lsls	r2, r2, #31
 800efa0:	d501      	bpl.n	800efa6 <_printf_float+0x12e>
 800efa2:	3301      	adds	r3, #1
 800efa4:	6123      	str	r3, [r4, #16]
 800efa6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0a6      	beq.n	800eefc <_printf_float+0x84>
 800efae:	232d      	movs	r3, #45	@ 0x2d
 800efb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efb4:	e7a2      	b.n	800eefc <_printf_float+0x84>
 800efb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800efba:	d1c4      	bne.n	800ef46 <_printf_float+0xce>
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1c2      	bne.n	800ef46 <_printf_float+0xce>
 800efc0:	2301      	movs	r3, #1
 800efc2:	e7bf      	b.n	800ef44 <_printf_float+0xcc>
 800efc4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800efc8:	d9db      	bls.n	800ef82 <_printf_float+0x10a>
 800efca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800efce:	d118      	bne.n	800f002 <_printf_float+0x18a>
 800efd0:	2900      	cmp	r1, #0
 800efd2:	6863      	ldr	r3, [r4, #4]
 800efd4:	dd0b      	ble.n	800efee <_printf_float+0x176>
 800efd6:	6121      	str	r1, [r4, #16]
 800efd8:	b913      	cbnz	r3, 800efe0 <_printf_float+0x168>
 800efda:	6822      	ldr	r2, [r4, #0]
 800efdc:	07d0      	lsls	r0, r2, #31
 800efde:	d502      	bpl.n	800efe6 <_printf_float+0x16e>
 800efe0:	3301      	adds	r3, #1
 800efe2:	440b      	add	r3, r1
 800efe4:	6123      	str	r3, [r4, #16]
 800efe6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800efe8:	f04f 0a00 	mov.w	sl, #0
 800efec:	e7db      	b.n	800efa6 <_printf_float+0x12e>
 800efee:	b913      	cbnz	r3, 800eff6 <_printf_float+0x17e>
 800eff0:	6822      	ldr	r2, [r4, #0]
 800eff2:	07d2      	lsls	r2, r2, #31
 800eff4:	d501      	bpl.n	800effa <_printf_float+0x182>
 800eff6:	3302      	adds	r3, #2
 800eff8:	e7f4      	b.n	800efe4 <_printf_float+0x16c>
 800effa:	2301      	movs	r3, #1
 800effc:	e7f2      	b.n	800efe4 <_printf_float+0x16c>
 800effe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f004:	4299      	cmp	r1, r3
 800f006:	db05      	blt.n	800f014 <_printf_float+0x19c>
 800f008:	6823      	ldr	r3, [r4, #0]
 800f00a:	6121      	str	r1, [r4, #16]
 800f00c:	07d8      	lsls	r0, r3, #31
 800f00e:	d5ea      	bpl.n	800efe6 <_printf_float+0x16e>
 800f010:	1c4b      	adds	r3, r1, #1
 800f012:	e7e7      	b.n	800efe4 <_printf_float+0x16c>
 800f014:	2900      	cmp	r1, #0
 800f016:	bfd4      	ite	le
 800f018:	f1c1 0202 	rsble	r2, r1, #2
 800f01c:	2201      	movgt	r2, #1
 800f01e:	4413      	add	r3, r2
 800f020:	e7e0      	b.n	800efe4 <_printf_float+0x16c>
 800f022:	6823      	ldr	r3, [r4, #0]
 800f024:	055a      	lsls	r2, r3, #21
 800f026:	d407      	bmi.n	800f038 <_printf_float+0x1c0>
 800f028:	6923      	ldr	r3, [r4, #16]
 800f02a:	4642      	mov	r2, r8
 800f02c:	4631      	mov	r1, r6
 800f02e:	4628      	mov	r0, r5
 800f030:	47b8      	blx	r7
 800f032:	3001      	adds	r0, #1
 800f034:	d12a      	bne.n	800f08c <_printf_float+0x214>
 800f036:	e76b      	b.n	800ef10 <_printf_float+0x98>
 800f038:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f03c:	f240 80e0 	bls.w	800f200 <_printf_float+0x388>
 800f040:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f044:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04c:	d133      	bne.n	800f0b6 <_printf_float+0x23e>
 800f04e:	4a38      	ldr	r2, [pc, #224]	@ (800f130 <_printf_float+0x2b8>)
 800f050:	2301      	movs	r3, #1
 800f052:	4631      	mov	r1, r6
 800f054:	4628      	mov	r0, r5
 800f056:	47b8      	blx	r7
 800f058:	3001      	adds	r0, #1
 800f05a:	f43f af59 	beq.w	800ef10 <_printf_float+0x98>
 800f05e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f062:	4543      	cmp	r3, r8
 800f064:	db02      	blt.n	800f06c <_printf_float+0x1f4>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	07d8      	lsls	r0, r3, #31
 800f06a:	d50f      	bpl.n	800f08c <_printf_float+0x214>
 800f06c:	9b05      	ldr	r3, [sp, #20]
 800f06e:	465a      	mov	r2, fp
 800f070:	4631      	mov	r1, r6
 800f072:	4628      	mov	r0, r5
 800f074:	47b8      	blx	r7
 800f076:	3001      	adds	r0, #1
 800f078:	f43f af4a 	beq.w	800ef10 <_printf_float+0x98>
 800f07c:	f04f 0900 	mov.w	r9, #0
 800f080:	f108 38ff 	add.w	r8, r8, #4294967295
 800f084:	f104 0a1a 	add.w	sl, r4, #26
 800f088:	45c8      	cmp	r8, r9
 800f08a:	dc09      	bgt.n	800f0a0 <_printf_float+0x228>
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	079b      	lsls	r3, r3, #30
 800f090:	f100 8107 	bmi.w	800f2a2 <_printf_float+0x42a>
 800f094:	68e0      	ldr	r0, [r4, #12]
 800f096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f098:	4298      	cmp	r0, r3
 800f09a:	bfb8      	it	lt
 800f09c:	4618      	movlt	r0, r3
 800f09e:	e739      	b.n	800ef14 <_printf_float+0x9c>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	47b8      	blx	r7
 800f0aa:	3001      	adds	r0, #1
 800f0ac:	f43f af30 	beq.w	800ef10 <_printf_float+0x98>
 800f0b0:	f109 0901 	add.w	r9, r9, #1
 800f0b4:	e7e8      	b.n	800f088 <_printf_float+0x210>
 800f0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dc3b      	bgt.n	800f134 <_printf_float+0x2bc>
 800f0bc:	4a1c      	ldr	r2, [pc, #112]	@ (800f130 <_printf_float+0x2b8>)
 800f0be:	2301      	movs	r3, #1
 800f0c0:	4631      	mov	r1, r6
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	47b8      	blx	r7
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	f43f af22 	beq.w	800ef10 <_printf_float+0x98>
 800f0cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f0d0:	ea59 0303 	orrs.w	r3, r9, r3
 800f0d4:	d102      	bne.n	800f0dc <_printf_float+0x264>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	07d9      	lsls	r1, r3, #31
 800f0da:	d5d7      	bpl.n	800f08c <_printf_float+0x214>
 800f0dc:	9b05      	ldr	r3, [sp, #20]
 800f0de:	465a      	mov	r2, fp
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	47b8      	blx	r7
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	f43f af12 	beq.w	800ef10 <_printf_float+0x98>
 800f0ec:	f04f 0a00 	mov.w	sl, #0
 800f0f0:	f104 0b1a 	add.w	fp, r4, #26
 800f0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0f6:	425b      	negs	r3, r3
 800f0f8:	4553      	cmp	r3, sl
 800f0fa:	dc01      	bgt.n	800f100 <_printf_float+0x288>
 800f0fc:	464b      	mov	r3, r9
 800f0fe:	e794      	b.n	800f02a <_printf_float+0x1b2>
 800f100:	2301      	movs	r3, #1
 800f102:	465a      	mov	r2, fp
 800f104:	4631      	mov	r1, r6
 800f106:	4628      	mov	r0, r5
 800f108:	47b8      	blx	r7
 800f10a:	3001      	adds	r0, #1
 800f10c:	f43f af00 	beq.w	800ef10 <_printf_float+0x98>
 800f110:	f10a 0a01 	add.w	sl, sl, #1
 800f114:	e7ee      	b.n	800f0f4 <_printf_float+0x27c>
 800f116:	bf00      	nop
 800f118:	ffffffff 	.word	0xffffffff
 800f11c:	7fefffff 	.word	0x7fefffff
 800f120:	08013046 	.word	0x08013046
 800f124:	08013042 	.word	0x08013042
 800f128:	0801304e 	.word	0x0801304e
 800f12c:	0801304a 	.word	0x0801304a
 800f130:	080131ee 	.word	0x080131ee
 800f134:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f136:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f13a:	4553      	cmp	r3, sl
 800f13c:	bfa8      	it	ge
 800f13e:	4653      	movge	r3, sl
 800f140:	2b00      	cmp	r3, #0
 800f142:	4699      	mov	r9, r3
 800f144:	dc37      	bgt.n	800f1b6 <_printf_float+0x33e>
 800f146:	2300      	movs	r3, #0
 800f148:	9307      	str	r3, [sp, #28]
 800f14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f14e:	f104 021a 	add.w	r2, r4, #26
 800f152:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f154:	9907      	ldr	r1, [sp, #28]
 800f156:	9306      	str	r3, [sp, #24]
 800f158:	eba3 0309 	sub.w	r3, r3, r9
 800f15c:	428b      	cmp	r3, r1
 800f15e:	dc31      	bgt.n	800f1c4 <_printf_float+0x34c>
 800f160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f162:	459a      	cmp	sl, r3
 800f164:	dc3b      	bgt.n	800f1de <_printf_float+0x366>
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	07da      	lsls	r2, r3, #31
 800f16a:	d438      	bmi.n	800f1de <_printf_float+0x366>
 800f16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f16e:	ebaa 0903 	sub.w	r9, sl, r3
 800f172:	9b06      	ldr	r3, [sp, #24]
 800f174:	ebaa 0303 	sub.w	r3, sl, r3
 800f178:	4599      	cmp	r9, r3
 800f17a:	bfa8      	it	ge
 800f17c:	4699      	movge	r9, r3
 800f17e:	f1b9 0f00 	cmp.w	r9, #0
 800f182:	dc34      	bgt.n	800f1ee <_printf_float+0x376>
 800f184:	f04f 0800 	mov.w	r8, #0
 800f188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f18c:	f104 0b1a 	add.w	fp, r4, #26
 800f190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f192:	ebaa 0303 	sub.w	r3, sl, r3
 800f196:	eba3 0309 	sub.w	r3, r3, r9
 800f19a:	4543      	cmp	r3, r8
 800f19c:	f77f af76 	ble.w	800f08c <_printf_float+0x214>
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	465a      	mov	r2, fp
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	47b8      	blx	r7
 800f1aa:	3001      	adds	r0, #1
 800f1ac:	f43f aeb0 	beq.w	800ef10 <_printf_float+0x98>
 800f1b0:	f108 0801 	add.w	r8, r8, #1
 800f1b4:	e7ec      	b.n	800f190 <_printf_float+0x318>
 800f1b6:	4642      	mov	r2, r8
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	47b8      	blx	r7
 800f1be:	3001      	adds	r0, #1
 800f1c0:	d1c1      	bne.n	800f146 <_printf_float+0x2ce>
 800f1c2:	e6a5      	b.n	800ef10 <_printf_float+0x98>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	4631      	mov	r1, r6
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	9206      	str	r2, [sp, #24]
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f ae9e 	beq.w	800ef10 <_printf_float+0x98>
 800f1d4:	9b07      	ldr	r3, [sp, #28]
 800f1d6:	9a06      	ldr	r2, [sp, #24]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	9307      	str	r3, [sp, #28]
 800f1dc:	e7b9      	b.n	800f152 <_printf_float+0x2da>
 800f1de:	9b05      	ldr	r3, [sp, #20]
 800f1e0:	465a      	mov	r2, fp
 800f1e2:	4631      	mov	r1, r6
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	47b8      	blx	r7
 800f1e8:	3001      	adds	r0, #1
 800f1ea:	d1bf      	bne.n	800f16c <_printf_float+0x2f4>
 800f1ec:	e690      	b.n	800ef10 <_printf_float+0x98>
 800f1ee:	9a06      	ldr	r2, [sp, #24]
 800f1f0:	464b      	mov	r3, r9
 800f1f2:	4442      	add	r2, r8
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	47b8      	blx	r7
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	d1c2      	bne.n	800f184 <_printf_float+0x30c>
 800f1fe:	e687      	b.n	800ef10 <_printf_float+0x98>
 800f200:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f204:	f1b9 0f01 	cmp.w	r9, #1
 800f208:	dc01      	bgt.n	800f20e <_printf_float+0x396>
 800f20a:	07db      	lsls	r3, r3, #31
 800f20c:	d536      	bpl.n	800f27c <_printf_float+0x404>
 800f20e:	2301      	movs	r3, #1
 800f210:	4642      	mov	r2, r8
 800f212:	4631      	mov	r1, r6
 800f214:	4628      	mov	r0, r5
 800f216:	47b8      	blx	r7
 800f218:	3001      	adds	r0, #1
 800f21a:	f43f ae79 	beq.w	800ef10 <_printf_float+0x98>
 800f21e:	9b05      	ldr	r3, [sp, #20]
 800f220:	465a      	mov	r2, fp
 800f222:	4631      	mov	r1, r6
 800f224:	4628      	mov	r0, r5
 800f226:	47b8      	blx	r7
 800f228:	3001      	adds	r0, #1
 800f22a:	f43f ae71 	beq.w	800ef10 <_printf_float+0x98>
 800f22e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f232:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f23e:	d018      	beq.n	800f272 <_printf_float+0x3fa>
 800f240:	464b      	mov	r3, r9
 800f242:	f108 0201 	add.w	r2, r8, #1
 800f246:	4631      	mov	r1, r6
 800f248:	4628      	mov	r0, r5
 800f24a:	47b8      	blx	r7
 800f24c:	3001      	adds	r0, #1
 800f24e:	d10c      	bne.n	800f26a <_printf_float+0x3f2>
 800f250:	e65e      	b.n	800ef10 <_printf_float+0x98>
 800f252:	2301      	movs	r3, #1
 800f254:	465a      	mov	r2, fp
 800f256:	4631      	mov	r1, r6
 800f258:	4628      	mov	r0, r5
 800f25a:	47b8      	blx	r7
 800f25c:	3001      	adds	r0, #1
 800f25e:	f43f ae57 	beq.w	800ef10 <_printf_float+0x98>
 800f262:	f108 0801 	add.w	r8, r8, #1
 800f266:	45c8      	cmp	r8, r9
 800f268:	dbf3      	blt.n	800f252 <_printf_float+0x3da>
 800f26a:	4653      	mov	r3, sl
 800f26c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f270:	e6dc      	b.n	800f02c <_printf_float+0x1b4>
 800f272:	f04f 0800 	mov.w	r8, #0
 800f276:	f104 0b1a 	add.w	fp, r4, #26
 800f27a:	e7f4      	b.n	800f266 <_printf_float+0x3ee>
 800f27c:	2301      	movs	r3, #1
 800f27e:	4642      	mov	r2, r8
 800f280:	e7e1      	b.n	800f246 <_printf_float+0x3ce>
 800f282:	2301      	movs	r3, #1
 800f284:	464a      	mov	r2, r9
 800f286:	4631      	mov	r1, r6
 800f288:	4628      	mov	r0, r5
 800f28a:	47b8      	blx	r7
 800f28c:	3001      	adds	r0, #1
 800f28e:	f43f ae3f 	beq.w	800ef10 <_printf_float+0x98>
 800f292:	f108 0801 	add.w	r8, r8, #1
 800f296:	68e3      	ldr	r3, [r4, #12]
 800f298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f29a:	1a5b      	subs	r3, r3, r1
 800f29c:	4543      	cmp	r3, r8
 800f29e:	dcf0      	bgt.n	800f282 <_printf_float+0x40a>
 800f2a0:	e6f8      	b.n	800f094 <_printf_float+0x21c>
 800f2a2:	f04f 0800 	mov.w	r8, #0
 800f2a6:	f104 0919 	add.w	r9, r4, #25
 800f2aa:	e7f4      	b.n	800f296 <_printf_float+0x41e>

0800f2ac <_printf_common>:
 800f2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b0:	4616      	mov	r6, r2
 800f2b2:	4698      	mov	r8, r3
 800f2b4:	688a      	ldr	r2, [r1, #8]
 800f2b6:	690b      	ldr	r3, [r1, #16]
 800f2b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	bfb8      	it	lt
 800f2c0:	4613      	movlt	r3, r2
 800f2c2:	6033      	str	r3, [r6, #0]
 800f2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2c8:	4607      	mov	r7, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	b10a      	cbz	r2, 800f2d2 <_printf_common+0x26>
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	6033      	str	r3, [r6, #0]
 800f2d2:	6823      	ldr	r3, [r4, #0]
 800f2d4:	0699      	lsls	r1, r3, #26
 800f2d6:	bf42      	ittt	mi
 800f2d8:	6833      	ldrmi	r3, [r6, #0]
 800f2da:	3302      	addmi	r3, #2
 800f2dc:	6033      	strmi	r3, [r6, #0]
 800f2de:	6825      	ldr	r5, [r4, #0]
 800f2e0:	f015 0506 	ands.w	r5, r5, #6
 800f2e4:	d106      	bne.n	800f2f4 <_printf_common+0x48>
 800f2e6:	f104 0a19 	add.w	sl, r4, #25
 800f2ea:	68e3      	ldr	r3, [r4, #12]
 800f2ec:	6832      	ldr	r2, [r6, #0]
 800f2ee:	1a9b      	subs	r3, r3, r2
 800f2f0:	42ab      	cmp	r3, r5
 800f2f2:	dc26      	bgt.n	800f342 <_printf_common+0x96>
 800f2f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2f8:	6822      	ldr	r2, [r4, #0]
 800f2fa:	3b00      	subs	r3, #0
 800f2fc:	bf18      	it	ne
 800f2fe:	2301      	movne	r3, #1
 800f300:	0692      	lsls	r2, r2, #26
 800f302:	d42b      	bmi.n	800f35c <_printf_common+0xb0>
 800f304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f308:	4641      	mov	r1, r8
 800f30a:	4638      	mov	r0, r7
 800f30c:	47c8      	blx	r9
 800f30e:	3001      	adds	r0, #1
 800f310:	d01e      	beq.n	800f350 <_printf_common+0xa4>
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	6922      	ldr	r2, [r4, #16]
 800f316:	f003 0306 	and.w	r3, r3, #6
 800f31a:	2b04      	cmp	r3, #4
 800f31c:	bf02      	ittt	eq
 800f31e:	68e5      	ldreq	r5, [r4, #12]
 800f320:	6833      	ldreq	r3, [r6, #0]
 800f322:	1aed      	subeq	r5, r5, r3
 800f324:	68a3      	ldr	r3, [r4, #8]
 800f326:	bf0c      	ite	eq
 800f328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f32c:	2500      	movne	r5, #0
 800f32e:	4293      	cmp	r3, r2
 800f330:	bfc4      	itt	gt
 800f332:	1a9b      	subgt	r3, r3, r2
 800f334:	18ed      	addgt	r5, r5, r3
 800f336:	2600      	movs	r6, #0
 800f338:	341a      	adds	r4, #26
 800f33a:	42b5      	cmp	r5, r6
 800f33c:	d11a      	bne.n	800f374 <_printf_common+0xc8>
 800f33e:	2000      	movs	r0, #0
 800f340:	e008      	b.n	800f354 <_printf_common+0xa8>
 800f342:	2301      	movs	r3, #1
 800f344:	4652      	mov	r2, sl
 800f346:	4641      	mov	r1, r8
 800f348:	4638      	mov	r0, r7
 800f34a:	47c8      	blx	r9
 800f34c:	3001      	adds	r0, #1
 800f34e:	d103      	bne.n	800f358 <_printf_common+0xac>
 800f350:	f04f 30ff 	mov.w	r0, #4294967295
 800f354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f358:	3501      	adds	r5, #1
 800f35a:	e7c6      	b.n	800f2ea <_printf_common+0x3e>
 800f35c:	18e1      	adds	r1, r4, r3
 800f35e:	1c5a      	adds	r2, r3, #1
 800f360:	2030      	movs	r0, #48	@ 0x30
 800f362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f366:	4422      	add	r2, r4
 800f368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f36c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f370:	3302      	adds	r3, #2
 800f372:	e7c7      	b.n	800f304 <_printf_common+0x58>
 800f374:	2301      	movs	r3, #1
 800f376:	4622      	mov	r2, r4
 800f378:	4641      	mov	r1, r8
 800f37a:	4638      	mov	r0, r7
 800f37c:	47c8      	blx	r9
 800f37e:	3001      	adds	r0, #1
 800f380:	d0e6      	beq.n	800f350 <_printf_common+0xa4>
 800f382:	3601      	adds	r6, #1
 800f384:	e7d9      	b.n	800f33a <_printf_common+0x8e>
	...

0800f388 <_printf_i>:
 800f388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f38c:	7e0f      	ldrb	r7, [r1, #24]
 800f38e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f390:	2f78      	cmp	r7, #120	@ 0x78
 800f392:	4691      	mov	r9, r2
 800f394:	4680      	mov	r8, r0
 800f396:	460c      	mov	r4, r1
 800f398:	469a      	mov	sl, r3
 800f39a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f39e:	d807      	bhi.n	800f3b0 <_printf_i+0x28>
 800f3a0:	2f62      	cmp	r7, #98	@ 0x62
 800f3a2:	d80a      	bhi.n	800f3ba <_printf_i+0x32>
 800f3a4:	2f00      	cmp	r7, #0
 800f3a6:	f000 80d1 	beq.w	800f54c <_printf_i+0x1c4>
 800f3aa:	2f58      	cmp	r7, #88	@ 0x58
 800f3ac:	f000 80b8 	beq.w	800f520 <_printf_i+0x198>
 800f3b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3b8:	e03a      	b.n	800f430 <_printf_i+0xa8>
 800f3ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3be:	2b15      	cmp	r3, #21
 800f3c0:	d8f6      	bhi.n	800f3b0 <_printf_i+0x28>
 800f3c2:	a101      	add	r1, pc, #4	@ (adr r1, 800f3c8 <_printf_i+0x40>)
 800f3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3c8:	0800f421 	.word	0x0800f421
 800f3cc:	0800f435 	.word	0x0800f435
 800f3d0:	0800f3b1 	.word	0x0800f3b1
 800f3d4:	0800f3b1 	.word	0x0800f3b1
 800f3d8:	0800f3b1 	.word	0x0800f3b1
 800f3dc:	0800f3b1 	.word	0x0800f3b1
 800f3e0:	0800f435 	.word	0x0800f435
 800f3e4:	0800f3b1 	.word	0x0800f3b1
 800f3e8:	0800f3b1 	.word	0x0800f3b1
 800f3ec:	0800f3b1 	.word	0x0800f3b1
 800f3f0:	0800f3b1 	.word	0x0800f3b1
 800f3f4:	0800f533 	.word	0x0800f533
 800f3f8:	0800f45f 	.word	0x0800f45f
 800f3fc:	0800f4ed 	.word	0x0800f4ed
 800f400:	0800f3b1 	.word	0x0800f3b1
 800f404:	0800f3b1 	.word	0x0800f3b1
 800f408:	0800f555 	.word	0x0800f555
 800f40c:	0800f3b1 	.word	0x0800f3b1
 800f410:	0800f45f 	.word	0x0800f45f
 800f414:	0800f3b1 	.word	0x0800f3b1
 800f418:	0800f3b1 	.word	0x0800f3b1
 800f41c:	0800f4f5 	.word	0x0800f4f5
 800f420:	6833      	ldr	r3, [r6, #0]
 800f422:	1d1a      	adds	r2, r3, #4
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6032      	str	r2, [r6, #0]
 800f428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f42c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f430:	2301      	movs	r3, #1
 800f432:	e09c      	b.n	800f56e <_printf_i+0x1e6>
 800f434:	6833      	ldr	r3, [r6, #0]
 800f436:	6820      	ldr	r0, [r4, #0]
 800f438:	1d19      	adds	r1, r3, #4
 800f43a:	6031      	str	r1, [r6, #0]
 800f43c:	0606      	lsls	r6, r0, #24
 800f43e:	d501      	bpl.n	800f444 <_printf_i+0xbc>
 800f440:	681d      	ldr	r5, [r3, #0]
 800f442:	e003      	b.n	800f44c <_printf_i+0xc4>
 800f444:	0645      	lsls	r5, r0, #25
 800f446:	d5fb      	bpl.n	800f440 <_printf_i+0xb8>
 800f448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f44c:	2d00      	cmp	r5, #0
 800f44e:	da03      	bge.n	800f458 <_printf_i+0xd0>
 800f450:	232d      	movs	r3, #45	@ 0x2d
 800f452:	426d      	negs	r5, r5
 800f454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f458:	4858      	ldr	r0, [pc, #352]	@ (800f5bc <_printf_i+0x234>)
 800f45a:	230a      	movs	r3, #10
 800f45c:	e011      	b.n	800f482 <_printf_i+0xfa>
 800f45e:	6821      	ldr	r1, [r4, #0]
 800f460:	6833      	ldr	r3, [r6, #0]
 800f462:	0608      	lsls	r0, r1, #24
 800f464:	f853 5b04 	ldr.w	r5, [r3], #4
 800f468:	d402      	bmi.n	800f470 <_printf_i+0xe8>
 800f46a:	0649      	lsls	r1, r1, #25
 800f46c:	bf48      	it	mi
 800f46e:	b2ad      	uxthmi	r5, r5
 800f470:	2f6f      	cmp	r7, #111	@ 0x6f
 800f472:	4852      	ldr	r0, [pc, #328]	@ (800f5bc <_printf_i+0x234>)
 800f474:	6033      	str	r3, [r6, #0]
 800f476:	bf14      	ite	ne
 800f478:	230a      	movne	r3, #10
 800f47a:	2308      	moveq	r3, #8
 800f47c:	2100      	movs	r1, #0
 800f47e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f482:	6866      	ldr	r6, [r4, #4]
 800f484:	60a6      	str	r6, [r4, #8]
 800f486:	2e00      	cmp	r6, #0
 800f488:	db05      	blt.n	800f496 <_printf_i+0x10e>
 800f48a:	6821      	ldr	r1, [r4, #0]
 800f48c:	432e      	orrs	r6, r5
 800f48e:	f021 0104 	bic.w	r1, r1, #4
 800f492:	6021      	str	r1, [r4, #0]
 800f494:	d04b      	beq.n	800f52e <_printf_i+0x1a6>
 800f496:	4616      	mov	r6, r2
 800f498:	fbb5 f1f3 	udiv	r1, r5, r3
 800f49c:	fb03 5711 	mls	r7, r3, r1, r5
 800f4a0:	5dc7      	ldrb	r7, [r0, r7]
 800f4a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4a6:	462f      	mov	r7, r5
 800f4a8:	42bb      	cmp	r3, r7
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	d9f4      	bls.n	800f498 <_printf_i+0x110>
 800f4ae:	2b08      	cmp	r3, #8
 800f4b0:	d10b      	bne.n	800f4ca <_printf_i+0x142>
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	07df      	lsls	r7, r3, #31
 800f4b6:	d508      	bpl.n	800f4ca <_printf_i+0x142>
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	6861      	ldr	r1, [r4, #4]
 800f4bc:	4299      	cmp	r1, r3
 800f4be:	bfde      	ittt	le
 800f4c0:	2330      	movle	r3, #48	@ 0x30
 800f4c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4ca:	1b92      	subs	r2, r2, r6
 800f4cc:	6122      	str	r2, [r4, #16]
 800f4ce:	f8cd a000 	str.w	sl, [sp]
 800f4d2:	464b      	mov	r3, r9
 800f4d4:	aa03      	add	r2, sp, #12
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	4640      	mov	r0, r8
 800f4da:	f7ff fee7 	bl	800f2ac <_printf_common>
 800f4de:	3001      	adds	r0, #1
 800f4e0:	d14a      	bne.n	800f578 <_printf_i+0x1f0>
 800f4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e6:	b004      	add	sp, #16
 800f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	f043 0320 	orr.w	r3, r3, #32
 800f4f2:	6023      	str	r3, [r4, #0]
 800f4f4:	4832      	ldr	r0, [pc, #200]	@ (800f5c0 <_printf_i+0x238>)
 800f4f6:	2778      	movs	r7, #120	@ 0x78
 800f4f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4fc:	6823      	ldr	r3, [r4, #0]
 800f4fe:	6831      	ldr	r1, [r6, #0]
 800f500:	061f      	lsls	r7, r3, #24
 800f502:	f851 5b04 	ldr.w	r5, [r1], #4
 800f506:	d402      	bmi.n	800f50e <_printf_i+0x186>
 800f508:	065f      	lsls	r7, r3, #25
 800f50a:	bf48      	it	mi
 800f50c:	b2ad      	uxthmi	r5, r5
 800f50e:	6031      	str	r1, [r6, #0]
 800f510:	07d9      	lsls	r1, r3, #31
 800f512:	bf44      	itt	mi
 800f514:	f043 0320 	orrmi.w	r3, r3, #32
 800f518:	6023      	strmi	r3, [r4, #0]
 800f51a:	b11d      	cbz	r5, 800f524 <_printf_i+0x19c>
 800f51c:	2310      	movs	r3, #16
 800f51e:	e7ad      	b.n	800f47c <_printf_i+0xf4>
 800f520:	4826      	ldr	r0, [pc, #152]	@ (800f5bc <_printf_i+0x234>)
 800f522:	e7e9      	b.n	800f4f8 <_printf_i+0x170>
 800f524:	6823      	ldr	r3, [r4, #0]
 800f526:	f023 0320 	bic.w	r3, r3, #32
 800f52a:	6023      	str	r3, [r4, #0]
 800f52c:	e7f6      	b.n	800f51c <_printf_i+0x194>
 800f52e:	4616      	mov	r6, r2
 800f530:	e7bd      	b.n	800f4ae <_printf_i+0x126>
 800f532:	6833      	ldr	r3, [r6, #0]
 800f534:	6825      	ldr	r5, [r4, #0]
 800f536:	6961      	ldr	r1, [r4, #20]
 800f538:	1d18      	adds	r0, r3, #4
 800f53a:	6030      	str	r0, [r6, #0]
 800f53c:	062e      	lsls	r6, r5, #24
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	d501      	bpl.n	800f546 <_printf_i+0x1be>
 800f542:	6019      	str	r1, [r3, #0]
 800f544:	e002      	b.n	800f54c <_printf_i+0x1c4>
 800f546:	0668      	lsls	r0, r5, #25
 800f548:	d5fb      	bpl.n	800f542 <_printf_i+0x1ba>
 800f54a:	8019      	strh	r1, [r3, #0]
 800f54c:	2300      	movs	r3, #0
 800f54e:	6123      	str	r3, [r4, #16]
 800f550:	4616      	mov	r6, r2
 800f552:	e7bc      	b.n	800f4ce <_printf_i+0x146>
 800f554:	6833      	ldr	r3, [r6, #0]
 800f556:	1d1a      	adds	r2, r3, #4
 800f558:	6032      	str	r2, [r6, #0]
 800f55a:	681e      	ldr	r6, [r3, #0]
 800f55c:	6862      	ldr	r2, [r4, #4]
 800f55e:	2100      	movs	r1, #0
 800f560:	4630      	mov	r0, r6
 800f562:	f7f0 febd 	bl	80002e0 <memchr>
 800f566:	b108      	cbz	r0, 800f56c <_printf_i+0x1e4>
 800f568:	1b80      	subs	r0, r0, r6
 800f56a:	6060      	str	r0, [r4, #4]
 800f56c:	6863      	ldr	r3, [r4, #4]
 800f56e:	6123      	str	r3, [r4, #16]
 800f570:	2300      	movs	r3, #0
 800f572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f576:	e7aa      	b.n	800f4ce <_printf_i+0x146>
 800f578:	6923      	ldr	r3, [r4, #16]
 800f57a:	4632      	mov	r2, r6
 800f57c:	4649      	mov	r1, r9
 800f57e:	4640      	mov	r0, r8
 800f580:	47d0      	blx	sl
 800f582:	3001      	adds	r0, #1
 800f584:	d0ad      	beq.n	800f4e2 <_printf_i+0x15a>
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	079b      	lsls	r3, r3, #30
 800f58a:	d413      	bmi.n	800f5b4 <_printf_i+0x22c>
 800f58c:	68e0      	ldr	r0, [r4, #12]
 800f58e:	9b03      	ldr	r3, [sp, #12]
 800f590:	4298      	cmp	r0, r3
 800f592:	bfb8      	it	lt
 800f594:	4618      	movlt	r0, r3
 800f596:	e7a6      	b.n	800f4e6 <_printf_i+0x15e>
 800f598:	2301      	movs	r3, #1
 800f59a:	4632      	mov	r2, r6
 800f59c:	4649      	mov	r1, r9
 800f59e:	4640      	mov	r0, r8
 800f5a0:	47d0      	blx	sl
 800f5a2:	3001      	adds	r0, #1
 800f5a4:	d09d      	beq.n	800f4e2 <_printf_i+0x15a>
 800f5a6:	3501      	adds	r5, #1
 800f5a8:	68e3      	ldr	r3, [r4, #12]
 800f5aa:	9903      	ldr	r1, [sp, #12]
 800f5ac:	1a5b      	subs	r3, r3, r1
 800f5ae:	42ab      	cmp	r3, r5
 800f5b0:	dcf2      	bgt.n	800f598 <_printf_i+0x210>
 800f5b2:	e7eb      	b.n	800f58c <_printf_i+0x204>
 800f5b4:	2500      	movs	r5, #0
 800f5b6:	f104 0619 	add.w	r6, r4, #25
 800f5ba:	e7f5      	b.n	800f5a8 <_printf_i+0x220>
 800f5bc:	08013052 	.word	0x08013052
 800f5c0:	08013063 	.word	0x08013063

0800f5c4 <_scanf_float>:
 800f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c8:	b087      	sub	sp, #28
 800f5ca:	4691      	mov	r9, r2
 800f5cc:	9303      	str	r3, [sp, #12]
 800f5ce:	688b      	ldr	r3, [r1, #8]
 800f5d0:	1e5a      	subs	r2, r3, #1
 800f5d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f5d6:	bf81      	itttt	hi
 800f5d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5dc:	eb03 0b05 	addhi.w	fp, r3, r5
 800f5e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5e4:	608b      	strhi	r3, [r1, #8]
 800f5e6:	680b      	ldr	r3, [r1, #0]
 800f5e8:	460a      	mov	r2, r1
 800f5ea:	f04f 0500 	mov.w	r5, #0
 800f5ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f5f2:	f842 3b1c 	str.w	r3, [r2], #28
 800f5f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f5fa:	4680      	mov	r8, r0
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	bf98      	it	ls
 800f600:	f04f 0b00 	movls.w	fp, #0
 800f604:	9201      	str	r2, [sp, #4]
 800f606:	4616      	mov	r6, r2
 800f608:	46aa      	mov	sl, r5
 800f60a:	462f      	mov	r7, r5
 800f60c:	9502      	str	r5, [sp, #8]
 800f60e:	68a2      	ldr	r2, [r4, #8]
 800f610:	b15a      	cbz	r2, 800f62a <_scanf_float+0x66>
 800f612:	f8d9 3000 	ldr.w	r3, [r9]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b4e      	cmp	r3, #78	@ 0x4e
 800f61a:	d863      	bhi.n	800f6e4 <_scanf_float+0x120>
 800f61c:	2b40      	cmp	r3, #64	@ 0x40
 800f61e:	d83b      	bhi.n	800f698 <_scanf_float+0xd4>
 800f620:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f624:	b2c8      	uxtb	r0, r1
 800f626:	280e      	cmp	r0, #14
 800f628:	d939      	bls.n	800f69e <_scanf_float+0xda>
 800f62a:	b11f      	cbz	r7, 800f634 <_scanf_float+0x70>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f632:	6023      	str	r3, [r4, #0]
 800f634:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f638:	f1ba 0f01 	cmp.w	sl, #1
 800f63c:	f200 8114 	bhi.w	800f868 <_scanf_float+0x2a4>
 800f640:	9b01      	ldr	r3, [sp, #4]
 800f642:	429e      	cmp	r6, r3
 800f644:	f200 8105 	bhi.w	800f852 <_scanf_float+0x28e>
 800f648:	2001      	movs	r0, #1
 800f64a:	b007      	add	sp, #28
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f654:	2a0d      	cmp	r2, #13
 800f656:	d8e8      	bhi.n	800f62a <_scanf_float+0x66>
 800f658:	a101      	add	r1, pc, #4	@ (adr r1, 800f660 <_scanf_float+0x9c>)
 800f65a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f65e:	bf00      	nop
 800f660:	0800f7a9 	.word	0x0800f7a9
 800f664:	0800f62b 	.word	0x0800f62b
 800f668:	0800f62b 	.word	0x0800f62b
 800f66c:	0800f62b 	.word	0x0800f62b
 800f670:	0800f805 	.word	0x0800f805
 800f674:	0800f7df 	.word	0x0800f7df
 800f678:	0800f62b 	.word	0x0800f62b
 800f67c:	0800f62b 	.word	0x0800f62b
 800f680:	0800f7b7 	.word	0x0800f7b7
 800f684:	0800f62b 	.word	0x0800f62b
 800f688:	0800f62b 	.word	0x0800f62b
 800f68c:	0800f62b 	.word	0x0800f62b
 800f690:	0800f62b 	.word	0x0800f62b
 800f694:	0800f773 	.word	0x0800f773
 800f698:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f69c:	e7da      	b.n	800f654 <_scanf_float+0x90>
 800f69e:	290e      	cmp	r1, #14
 800f6a0:	d8c3      	bhi.n	800f62a <_scanf_float+0x66>
 800f6a2:	a001      	add	r0, pc, #4	@ (adr r0, 800f6a8 <_scanf_float+0xe4>)
 800f6a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6a8:	0800f763 	.word	0x0800f763
 800f6ac:	0800f62b 	.word	0x0800f62b
 800f6b0:	0800f763 	.word	0x0800f763
 800f6b4:	0800f7f3 	.word	0x0800f7f3
 800f6b8:	0800f62b 	.word	0x0800f62b
 800f6bc:	0800f705 	.word	0x0800f705
 800f6c0:	0800f749 	.word	0x0800f749
 800f6c4:	0800f749 	.word	0x0800f749
 800f6c8:	0800f749 	.word	0x0800f749
 800f6cc:	0800f749 	.word	0x0800f749
 800f6d0:	0800f749 	.word	0x0800f749
 800f6d4:	0800f749 	.word	0x0800f749
 800f6d8:	0800f749 	.word	0x0800f749
 800f6dc:	0800f749 	.word	0x0800f749
 800f6e0:	0800f749 	.word	0x0800f749
 800f6e4:	2b6e      	cmp	r3, #110	@ 0x6e
 800f6e6:	d809      	bhi.n	800f6fc <_scanf_float+0x138>
 800f6e8:	2b60      	cmp	r3, #96	@ 0x60
 800f6ea:	d8b1      	bhi.n	800f650 <_scanf_float+0x8c>
 800f6ec:	2b54      	cmp	r3, #84	@ 0x54
 800f6ee:	d07b      	beq.n	800f7e8 <_scanf_float+0x224>
 800f6f0:	2b59      	cmp	r3, #89	@ 0x59
 800f6f2:	d19a      	bne.n	800f62a <_scanf_float+0x66>
 800f6f4:	2d07      	cmp	r5, #7
 800f6f6:	d198      	bne.n	800f62a <_scanf_float+0x66>
 800f6f8:	2508      	movs	r5, #8
 800f6fa:	e02f      	b.n	800f75c <_scanf_float+0x198>
 800f6fc:	2b74      	cmp	r3, #116	@ 0x74
 800f6fe:	d073      	beq.n	800f7e8 <_scanf_float+0x224>
 800f700:	2b79      	cmp	r3, #121	@ 0x79
 800f702:	e7f6      	b.n	800f6f2 <_scanf_float+0x12e>
 800f704:	6821      	ldr	r1, [r4, #0]
 800f706:	05c8      	lsls	r0, r1, #23
 800f708:	d51e      	bpl.n	800f748 <_scanf_float+0x184>
 800f70a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f70e:	6021      	str	r1, [r4, #0]
 800f710:	3701      	adds	r7, #1
 800f712:	f1bb 0f00 	cmp.w	fp, #0
 800f716:	d003      	beq.n	800f720 <_scanf_float+0x15c>
 800f718:	3201      	adds	r2, #1
 800f71a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f71e:	60a2      	str	r2, [r4, #8]
 800f720:	68a3      	ldr	r3, [r4, #8]
 800f722:	3b01      	subs	r3, #1
 800f724:	60a3      	str	r3, [r4, #8]
 800f726:	6923      	ldr	r3, [r4, #16]
 800f728:	3301      	adds	r3, #1
 800f72a:	6123      	str	r3, [r4, #16]
 800f72c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f730:	3b01      	subs	r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	f8c9 3004 	str.w	r3, [r9, #4]
 800f738:	f340 8082 	ble.w	800f840 <_scanf_float+0x27c>
 800f73c:	f8d9 3000 	ldr.w	r3, [r9]
 800f740:	3301      	adds	r3, #1
 800f742:	f8c9 3000 	str.w	r3, [r9]
 800f746:	e762      	b.n	800f60e <_scanf_float+0x4a>
 800f748:	eb1a 0105 	adds.w	r1, sl, r5
 800f74c:	f47f af6d 	bne.w	800f62a <_scanf_float+0x66>
 800f750:	6822      	ldr	r2, [r4, #0]
 800f752:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f756:	6022      	str	r2, [r4, #0]
 800f758:	460d      	mov	r5, r1
 800f75a:	468a      	mov	sl, r1
 800f75c:	f806 3b01 	strb.w	r3, [r6], #1
 800f760:	e7de      	b.n	800f720 <_scanf_float+0x15c>
 800f762:	6822      	ldr	r2, [r4, #0]
 800f764:	0610      	lsls	r0, r2, #24
 800f766:	f57f af60 	bpl.w	800f62a <_scanf_float+0x66>
 800f76a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f76e:	6022      	str	r2, [r4, #0]
 800f770:	e7f4      	b.n	800f75c <_scanf_float+0x198>
 800f772:	f1ba 0f00 	cmp.w	sl, #0
 800f776:	d10c      	bne.n	800f792 <_scanf_float+0x1ce>
 800f778:	b977      	cbnz	r7, 800f798 <_scanf_float+0x1d4>
 800f77a:	6822      	ldr	r2, [r4, #0]
 800f77c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f780:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f784:	d108      	bne.n	800f798 <_scanf_float+0x1d4>
 800f786:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f78a:	6022      	str	r2, [r4, #0]
 800f78c:	f04f 0a01 	mov.w	sl, #1
 800f790:	e7e4      	b.n	800f75c <_scanf_float+0x198>
 800f792:	f1ba 0f02 	cmp.w	sl, #2
 800f796:	d050      	beq.n	800f83a <_scanf_float+0x276>
 800f798:	2d01      	cmp	r5, #1
 800f79a:	d002      	beq.n	800f7a2 <_scanf_float+0x1de>
 800f79c:	2d04      	cmp	r5, #4
 800f79e:	f47f af44 	bne.w	800f62a <_scanf_float+0x66>
 800f7a2:	3501      	adds	r5, #1
 800f7a4:	b2ed      	uxtb	r5, r5
 800f7a6:	e7d9      	b.n	800f75c <_scanf_float+0x198>
 800f7a8:	f1ba 0f01 	cmp.w	sl, #1
 800f7ac:	f47f af3d 	bne.w	800f62a <_scanf_float+0x66>
 800f7b0:	f04f 0a02 	mov.w	sl, #2
 800f7b4:	e7d2      	b.n	800f75c <_scanf_float+0x198>
 800f7b6:	b975      	cbnz	r5, 800f7d6 <_scanf_float+0x212>
 800f7b8:	2f00      	cmp	r7, #0
 800f7ba:	f47f af37 	bne.w	800f62c <_scanf_float+0x68>
 800f7be:	6822      	ldr	r2, [r4, #0]
 800f7c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7c8:	f040 80fc 	bne.w	800f9c4 <_scanf_float+0x400>
 800f7cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7d0:	6022      	str	r2, [r4, #0]
 800f7d2:	2501      	movs	r5, #1
 800f7d4:	e7c2      	b.n	800f75c <_scanf_float+0x198>
 800f7d6:	2d03      	cmp	r5, #3
 800f7d8:	d0e3      	beq.n	800f7a2 <_scanf_float+0x1de>
 800f7da:	2d05      	cmp	r5, #5
 800f7dc:	e7df      	b.n	800f79e <_scanf_float+0x1da>
 800f7de:	2d02      	cmp	r5, #2
 800f7e0:	f47f af23 	bne.w	800f62a <_scanf_float+0x66>
 800f7e4:	2503      	movs	r5, #3
 800f7e6:	e7b9      	b.n	800f75c <_scanf_float+0x198>
 800f7e8:	2d06      	cmp	r5, #6
 800f7ea:	f47f af1e 	bne.w	800f62a <_scanf_float+0x66>
 800f7ee:	2507      	movs	r5, #7
 800f7f0:	e7b4      	b.n	800f75c <_scanf_float+0x198>
 800f7f2:	6822      	ldr	r2, [r4, #0]
 800f7f4:	0591      	lsls	r1, r2, #22
 800f7f6:	f57f af18 	bpl.w	800f62a <_scanf_float+0x66>
 800f7fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f7fe:	6022      	str	r2, [r4, #0]
 800f800:	9702      	str	r7, [sp, #8]
 800f802:	e7ab      	b.n	800f75c <_scanf_float+0x198>
 800f804:	6822      	ldr	r2, [r4, #0]
 800f806:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f80a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f80e:	d005      	beq.n	800f81c <_scanf_float+0x258>
 800f810:	0550      	lsls	r0, r2, #21
 800f812:	f57f af0a 	bpl.w	800f62a <_scanf_float+0x66>
 800f816:	2f00      	cmp	r7, #0
 800f818:	f000 80d4 	beq.w	800f9c4 <_scanf_float+0x400>
 800f81c:	0591      	lsls	r1, r2, #22
 800f81e:	bf58      	it	pl
 800f820:	9902      	ldrpl	r1, [sp, #8]
 800f822:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f826:	bf58      	it	pl
 800f828:	1a79      	subpl	r1, r7, r1
 800f82a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f82e:	bf58      	it	pl
 800f830:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f834:	6022      	str	r2, [r4, #0]
 800f836:	2700      	movs	r7, #0
 800f838:	e790      	b.n	800f75c <_scanf_float+0x198>
 800f83a:	f04f 0a03 	mov.w	sl, #3
 800f83e:	e78d      	b.n	800f75c <_scanf_float+0x198>
 800f840:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f844:	4649      	mov	r1, r9
 800f846:	4640      	mov	r0, r8
 800f848:	4798      	blx	r3
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f43f aedf 	beq.w	800f60e <_scanf_float+0x4a>
 800f850:	e6eb      	b.n	800f62a <_scanf_float+0x66>
 800f852:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f85a:	464a      	mov	r2, r9
 800f85c:	4640      	mov	r0, r8
 800f85e:	4798      	blx	r3
 800f860:	6923      	ldr	r3, [r4, #16]
 800f862:	3b01      	subs	r3, #1
 800f864:	6123      	str	r3, [r4, #16]
 800f866:	e6eb      	b.n	800f640 <_scanf_float+0x7c>
 800f868:	1e6b      	subs	r3, r5, #1
 800f86a:	2b06      	cmp	r3, #6
 800f86c:	d824      	bhi.n	800f8b8 <_scanf_float+0x2f4>
 800f86e:	2d02      	cmp	r5, #2
 800f870:	d836      	bhi.n	800f8e0 <_scanf_float+0x31c>
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	429e      	cmp	r6, r3
 800f876:	f67f aee7 	bls.w	800f648 <_scanf_float+0x84>
 800f87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f87e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f882:	464a      	mov	r2, r9
 800f884:	4640      	mov	r0, r8
 800f886:	4798      	blx	r3
 800f888:	6923      	ldr	r3, [r4, #16]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	e7f0      	b.n	800f872 <_scanf_float+0x2ae>
 800f890:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f894:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f898:	464a      	mov	r2, r9
 800f89a:	4640      	mov	r0, r8
 800f89c:	4798      	blx	r3
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	6123      	str	r3, [r4, #16]
 800f8a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8a8:	fa5f fa8a 	uxtb.w	sl, sl
 800f8ac:	f1ba 0f02 	cmp.w	sl, #2
 800f8b0:	d1ee      	bne.n	800f890 <_scanf_float+0x2cc>
 800f8b2:	3d03      	subs	r5, #3
 800f8b4:	b2ed      	uxtb	r5, r5
 800f8b6:	1b76      	subs	r6, r6, r5
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	05da      	lsls	r2, r3, #23
 800f8bc:	d530      	bpl.n	800f920 <_scanf_float+0x35c>
 800f8be:	055b      	lsls	r3, r3, #21
 800f8c0:	d511      	bpl.n	800f8e6 <_scanf_float+0x322>
 800f8c2:	9b01      	ldr	r3, [sp, #4]
 800f8c4:	429e      	cmp	r6, r3
 800f8c6:	f67f aebf 	bls.w	800f648 <_scanf_float+0x84>
 800f8ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8d2:	464a      	mov	r2, r9
 800f8d4:	4640      	mov	r0, r8
 800f8d6:	4798      	blx	r3
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	6123      	str	r3, [r4, #16]
 800f8de:	e7f0      	b.n	800f8c2 <_scanf_float+0x2fe>
 800f8e0:	46aa      	mov	sl, r5
 800f8e2:	46b3      	mov	fp, r6
 800f8e4:	e7de      	b.n	800f8a4 <_scanf_float+0x2e0>
 800f8e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f8ea:	6923      	ldr	r3, [r4, #16]
 800f8ec:	2965      	cmp	r1, #101	@ 0x65
 800f8ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800f8f6:	6123      	str	r3, [r4, #16]
 800f8f8:	d00c      	beq.n	800f914 <_scanf_float+0x350>
 800f8fa:	2945      	cmp	r1, #69	@ 0x45
 800f8fc:	d00a      	beq.n	800f914 <_scanf_float+0x350>
 800f8fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f902:	464a      	mov	r2, r9
 800f904:	4640      	mov	r0, r8
 800f906:	4798      	blx	r3
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f90e:	3b01      	subs	r3, #1
 800f910:	1eb5      	subs	r5, r6, #2
 800f912:	6123      	str	r3, [r4, #16]
 800f914:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f918:	464a      	mov	r2, r9
 800f91a:	4640      	mov	r0, r8
 800f91c:	4798      	blx	r3
 800f91e:	462e      	mov	r6, r5
 800f920:	6822      	ldr	r2, [r4, #0]
 800f922:	f012 0210 	ands.w	r2, r2, #16
 800f926:	d001      	beq.n	800f92c <_scanf_float+0x368>
 800f928:	2000      	movs	r0, #0
 800f92a:	e68e      	b.n	800f64a <_scanf_float+0x86>
 800f92c:	7032      	strb	r2, [r6, #0]
 800f92e:	6823      	ldr	r3, [r4, #0]
 800f930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f938:	d123      	bne.n	800f982 <_scanf_float+0x3be>
 800f93a:	9b02      	ldr	r3, [sp, #8]
 800f93c:	429f      	cmp	r7, r3
 800f93e:	d00a      	beq.n	800f956 <_scanf_float+0x392>
 800f940:	1bda      	subs	r2, r3, r7
 800f942:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f946:	429e      	cmp	r6, r3
 800f948:	bf28      	it	cs
 800f94a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f94e:	491e      	ldr	r1, [pc, #120]	@ (800f9c8 <_scanf_float+0x404>)
 800f950:	4630      	mov	r0, r6
 800f952:	f000 f96f 	bl	800fc34 <siprintf>
 800f956:	9901      	ldr	r1, [sp, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	4640      	mov	r0, r8
 800f95c:	f7ff f9f6 	bl	800ed4c <_strtod_r>
 800f960:	9b03      	ldr	r3, [sp, #12]
 800f962:	6821      	ldr	r1, [r4, #0]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f011 0f02 	tst.w	r1, #2
 800f96a:	f103 0204 	add.w	r2, r3, #4
 800f96e:	d015      	beq.n	800f99c <_scanf_float+0x3d8>
 800f970:	9903      	ldr	r1, [sp, #12]
 800f972:	600a      	str	r2, [r1, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	ed83 0b00 	vstr	d0, [r3]
 800f97a:	68e3      	ldr	r3, [r4, #12]
 800f97c:	3301      	adds	r3, #1
 800f97e:	60e3      	str	r3, [r4, #12]
 800f980:	e7d2      	b.n	800f928 <_scanf_float+0x364>
 800f982:	9b04      	ldr	r3, [sp, #16]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0e6      	beq.n	800f956 <_scanf_float+0x392>
 800f988:	9905      	ldr	r1, [sp, #20]
 800f98a:	230a      	movs	r3, #10
 800f98c:	3101      	adds	r1, #1
 800f98e:	4640      	mov	r0, r8
 800f990:	f002 f9e0 	bl	8011d54 <_strtol_r>
 800f994:	9b04      	ldr	r3, [sp, #16]
 800f996:	9e05      	ldr	r6, [sp, #20]
 800f998:	1ac2      	subs	r2, r0, r3
 800f99a:	e7d2      	b.n	800f942 <_scanf_float+0x37e>
 800f99c:	f011 0f04 	tst.w	r1, #4
 800f9a0:	9903      	ldr	r1, [sp, #12]
 800f9a2:	600a      	str	r2, [r1, #0]
 800f9a4:	d1e6      	bne.n	800f974 <_scanf_float+0x3b0>
 800f9a6:	eeb4 0b40 	vcmp.f64	d0, d0
 800f9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ae:	681d      	ldr	r5, [r3, #0]
 800f9b0:	d705      	bvc.n	800f9be <_scanf_float+0x3fa>
 800f9b2:	4806      	ldr	r0, [pc, #24]	@ (800f9cc <_scanf_float+0x408>)
 800f9b4:	f000 fb20 	bl	800fff8 <nanf>
 800f9b8:	ed85 0a00 	vstr	s0, [r5]
 800f9bc:	e7dd      	b.n	800f97a <_scanf_float+0x3b6>
 800f9be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f9c2:	e7f9      	b.n	800f9b8 <_scanf_float+0x3f4>
 800f9c4:	2700      	movs	r7, #0
 800f9c6:	e635      	b.n	800f634 <_scanf_float+0x70>
 800f9c8:	08013074 	.word	0x08013074
 800f9cc:	0801322e 	.word	0x0801322e

0800f9d0 <std>:
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800f9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9de:	6083      	str	r3, [r0, #8]
 800f9e0:	8181      	strh	r1, [r0, #12]
 800f9e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f9e4:	81c2      	strh	r2, [r0, #14]
 800f9e6:	6183      	str	r3, [r0, #24]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	2208      	movs	r2, #8
 800f9ec:	305c      	adds	r0, #92	@ 0x5c
 800f9ee:	f000 fa49 	bl	800fe84 <memset>
 800f9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800fa28 <std+0x58>)
 800f9f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800fa2c <std+0x5c>)
 800f9f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800fa30 <std+0x60>)
 800f9fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <std+0x64>)
 800fa00:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa02:	4b0d      	ldr	r3, [pc, #52]	@ (800fa38 <std+0x68>)
 800fa04:	6224      	str	r4, [r4, #32]
 800fa06:	429c      	cmp	r4, r3
 800fa08:	d006      	beq.n	800fa18 <std+0x48>
 800fa0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa0e:	4294      	cmp	r4, r2
 800fa10:	d002      	beq.n	800fa18 <std+0x48>
 800fa12:	33d0      	adds	r3, #208	@ 0xd0
 800fa14:	429c      	cmp	r4, r3
 800fa16:	d105      	bne.n	800fa24 <std+0x54>
 800fa18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa20:	f000 bace 	b.w	800ffc0 <__retarget_lock_init_recursive>
 800fa24:	bd10      	pop	{r4, pc}
 800fa26:	bf00      	nop
 800fa28:	0800fcd1 	.word	0x0800fcd1
 800fa2c:	0800fcf7 	.word	0x0800fcf7
 800fa30:	0800fd2f 	.word	0x0800fd2f
 800fa34:	0800fd53 	.word	0x0800fd53
 800fa38:	24004dc8 	.word	0x24004dc8

0800fa3c <stdio_exit_handler>:
 800fa3c:	4a02      	ldr	r2, [pc, #8]	@ (800fa48 <stdio_exit_handler+0xc>)
 800fa3e:	4903      	ldr	r1, [pc, #12]	@ (800fa4c <stdio_exit_handler+0x10>)
 800fa40:	4803      	ldr	r0, [pc, #12]	@ (800fa50 <stdio_exit_handler+0x14>)
 800fa42:	f000 b869 	b.w	800fb18 <_fwalk_sglue>
 800fa46:	bf00      	nop
 800fa48:	24000020 	.word	0x24000020
 800fa4c:	080129e9 	.word	0x080129e9
 800fa50:	2400019c 	.word	0x2400019c

0800fa54 <cleanup_stdio>:
 800fa54:	6841      	ldr	r1, [r0, #4]
 800fa56:	4b0c      	ldr	r3, [pc, #48]	@ (800fa88 <cleanup_stdio+0x34>)
 800fa58:	4299      	cmp	r1, r3
 800fa5a:	b510      	push	{r4, lr}
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	d001      	beq.n	800fa64 <cleanup_stdio+0x10>
 800fa60:	f002 ffc2 	bl	80129e8 <_fflush_r>
 800fa64:	68a1      	ldr	r1, [r4, #8]
 800fa66:	4b09      	ldr	r3, [pc, #36]	@ (800fa8c <cleanup_stdio+0x38>)
 800fa68:	4299      	cmp	r1, r3
 800fa6a:	d002      	beq.n	800fa72 <cleanup_stdio+0x1e>
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	f002 ffbb 	bl	80129e8 <_fflush_r>
 800fa72:	68e1      	ldr	r1, [r4, #12]
 800fa74:	4b06      	ldr	r3, [pc, #24]	@ (800fa90 <cleanup_stdio+0x3c>)
 800fa76:	4299      	cmp	r1, r3
 800fa78:	d004      	beq.n	800fa84 <cleanup_stdio+0x30>
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa80:	f002 bfb2 	b.w	80129e8 <_fflush_r>
 800fa84:	bd10      	pop	{r4, pc}
 800fa86:	bf00      	nop
 800fa88:	24004dc8 	.word	0x24004dc8
 800fa8c:	24004e30 	.word	0x24004e30
 800fa90:	24004e98 	.word	0x24004e98

0800fa94 <global_stdio_init.part.0>:
 800fa94:	b510      	push	{r4, lr}
 800fa96:	4b0b      	ldr	r3, [pc, #44]	@ (800fac4 <global_stdio_init.part.0+0x30>)
 800fa98:	4c0b      	ldr	r4, [pc, #44]	@ (800fac8 <global_stdio_init.part.0+0x34>)
 800fa9a:	4a0c      	ldr	r2, [pc, #48]	@ (800facc <global_stdio_init.part.0+0x38>)
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	4620      	mov	r0, r4
 800faa0:	2200      	movs	r2, #0
 800faa2:	2104      	movs	r1, #4
 800faa4:	f7ff ff94 	bl	800f9d0 <std>
 800faa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800faac:	2201      	movs	r2, #1
 800faae:	2109      	movs	r1, #9
 800fab0:	f7ff ff8e 	bl	800f9d0 <std>
 800fab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fab8:	2202      	movs	r2, #2
 800faba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fabe:	2112      	movs	r1, #18
 800fac0:	f7ff bf86 	b.w	800f9d0 <std>
 800fac4:	24004f00 	.word	0x24004f00
 800fac8:	24004dc8 	.word	0x24004dc8
 800facc:	0800fa3d 	.word	0x0800fa3d

0800fad0 <__sfp_lock_acquire>:
 800fad0:	4801      	ldr	r0, [pc, #4]	@ (800fad8 <__sfp_lock_acquire+0x8>)
 800fad2:	f000 ba76 	b.w	800ffc2 <__retarget_lock_acquire_recursive>
 800fad6:	bf00      	nop
 800fad8:	24004f09 	.word	0x24004f09

0800fadc <__sfp_lock_release>:
 800fadc:	4801      	ldr	r0, [pc, #4]	@ (800fae4 <__sfp_lock_release+0x8>)
 800fade:	f000 ba71 	b.w	800ffc4 <__retarget_lock_release_recursive>
 800fae2:	bf00      	nop
 800fae4:	24004f09 	.word	0x24004f09

0800fae8 <__sinit>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	4604      	mov	r4, r0
 800faec:	f7ff fff0 	bl	800fad0 <__sfp_lock_acquire>
 800faf0:	6a23      	ldr	r3, [r4, #32]
 800faf2:	b11b      	cbz	r3, 800fafc <__sinit+0x14>
 800faf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf8:	f7ff bff0 	b.w	800fadc <__sfp_lock_release>
 800fafc:	4b04      	ldr	r3, [pc, #16]	@ (800fb10 <__sinit+0x28>)
 800fafe:	6223      	str	r3, [r4, #32]
 800fb00:	4b04      	ldr	r3, [pc, #16]	@ (800fb14 <__sinit+0x2c>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1f5      	bne.n	800faf4 <__sinit+0xc>
 800fb08:	f7ff ffc4 	bl	800fa94 <global_stdio_init.part.0>
 800fb0c:	e7f2      	b.n	800faf4 <__sinit+0xc>
 800fb0e:	bf00      	nop
 800fb10:	0800fa55 	.word	0x0800fa55
 800fb14:	24004f00 	.word	0x24004f00

0800fb18 <_fwalk_sglue>:
 800fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb1c:	4607      	mov	r7, r0
 800fb1e:	4688      	mov	r8, r1
 800fb20:	4614      	mov	r4, r2
 800fb22:	2600      	movs	r6, #0
 800fb24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb28:	f1b9 0901 	subs.w	r9, r9, #1
 800fb2c:	d505      	bpl.n	800fb3a <_fwalk_sglue+0x22>
 800fb2e:	6824      	ldr	r4, [r4, #0]
 800fb30:	2c00      	cmp	r4, #0
 800fb32:	d1f7      	bne.n	800fb24 <_fwalk_sglue+0xc>
 800fb34:	4630      	mov	r0, r6
 800fb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3a:	89ab      	ldrh	r3, [r5, #12]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d907      	bls.n	800fb50 <_fwalk_sglue+0x38>
 800fb40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb44:	3301      	adds	r3, #1
 800fb46:	d003      	beq.n	800fb50 <_fwalk_sglue+0x38>
 800fb48:	4629      	mov	r1, r5
 800fb4a:	4638      	mov	r0, r7
 800fb4c:	47c0      	blx	r8
 800fb4e:	4306      	orrs	r6, r0
 800fb50:	3568      	adds	r5, #104	@ 0x68
 800fb52:	e7e9      	b.n	800fb28 <_fwalk_sglue+0x10>

0800fb54 <iprintf>:
 800fb54:	b40f      	push	{r0, r1, r2, r3}
 800fb56:	b507      	push	{r0, r1, r2, lr}
 800fb58:	4906      	ldr	r1, [pc, #24]	@ (800fb74 <iprintf+0x20>)
 800fb5a:	ab04      	add	r3, sp, #16
 800fb5c:	6808      	ldr	r0, [r1, #0]
 800fb5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb62:	6881      	ldr	r1, [r0, #8]
 800fb64:	9301      	str	r3, [sp, #4]
 800fb66:	f002 fc55 	bl	8012414 <_vfiprintf_r>
 800fb6a:	b003      	add	sp, #12
 800fb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb70:	b004      	add	sp, #16
 800fb72:	4770      	bx	lr
 800fb74:	24000198 	.word	0x24000198

0800fb78 <_puts_r>:
 800fb78:	6a03      	ldr	r3, [r0, #32]
 800fb7a:	b570      	push	{r4, r5, r6, lr}
 800fb7c:	6884      	ldr	r4, [r0, #8]
 800fb7e:	4605      	mov	r5, r0
 800fb80:	460e      	mov	r6, r1
 800fb82:	b90b      	cbnz	r3, 800fb88 <_puts_r+0x10>
 800fb84:	f7ff ffb0 	bl	800fae8 <__sinit>
 800fb88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb8a:	07db      	lsls	r3, r3, #31
 800fb8c:	d405      	bmi.n	800fb9a <_puts_r+0x22>
 800fb8e:	89a3      	ldrh	r3, [r4, #12]
 800fb90:	0598      	lsls	r0, r3, #22
 800fb92:	d402      	bmi.n	800fb9a <_puts_r+0x22>
 800fb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb96:	f000 fa14 	bl	800ffc2 <__retarget_lock_acquire_recursive>
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	0719      	lsls	r1, r3, #28
 800fb9e:	d502      	bpl.n	800fba6 <_puts_r+0x2e>
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d135      	bne.n	800fc12 <_puts_r+0x9a>
 800fba6:	4621      	mov	r1, r4
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f000 f915 	bl	800fdd8 <__swsetup_r>
 800fbae:	b380      	cbz	r0, 800fc12 <_puts_r+0x9a>
 800fbb0:	f04f 35ff 	mov.w	r5, #4294967295
 800fbb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbb6:	07da      	lsls	r2, r3, #31
 800fbb8:	d405      	bmi.n	800fbc6 <_puts_r+0x4e>
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	059b      	lsls	r3, r3, #22
 800fbbe:	d402      	bmi.n	800fbc6 <_puts_r+0x4e>
 800fbc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbc2:	f000 f9ff 	bl	800ffc4 <__retarget_lock_release_recursive>
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	bd70      	pop	{r4, r5, r6, pc}
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	da04      	bge.n	800fbd8 <_puts_r+0x60>
 800fbce:	69a2      	ldr	r2, [r4, #24]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	dc17      	bgt.n	800fc04 <_puts_r+0x8c>
 800fbd4:	290a      	cmp	r1, #10
 800fbd6:	d015      	beq.n	800fc04 <_puts_r+0x8c>
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	6022      	str	r2, [r4, #0]
 800fbde:	7019      	strb	r1, [r3, #0]
 800fbe0:	68a3      	ldr	r3, [r4, #8]
 800fbe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	60a3      	str	r3, [r4, #8]
 800fbea:	2900      	cmp	r1, #0
 800fbec:	d1ed      	bne.n	800fbca <_puts_r+0x52>
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	da11      	bge.n	800fc16 <_puts_r+0x9e>
 800fbf2:	4622      	mov	r2, r4
 800fbf4:	210a      	movs	r1, #10
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 f8af 	bl	800fd5a <__swbuf_r>
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	d0d7      	beq.n	800fbb0 <_puts_r+0x38>
 800fc00:	250a      	movs	r5, #10
 800fc02:	e7d7      	b.n	800fbb4 <_puts_r+0x3c>
 800fc04:	4622      	mov	r2, r4
 800fc06:	4628      	mov	r0, r5
 800fc08:	f000 f8a7 	bl	800fd5a <__swbuf_r>
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	d1e7      	bne.n	800fbe0 <_puts_r+0x68>
 800fc10:	e7ce      	b.n	800fbb0 <_puts_r+0x38>
 800fc12:	3e01      	subs	r6, #1
 800fc14:	e7e4      	b.n	800fbe0 <_puts_r+0x68>
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	1c5a      	adds	r2, r3, #1
 800fc1a:	6022      	str	r2, [r4, #0]
 800fc1c:	220a      	movs	r2, #10
 800fc1e:	701a      	strb	r2, [r3, #0]
 800fc20:	e7ee      	b.n	800fc00 <_puts_r+0x88>
	...

0800fc24 <puts>:
 800fc24:	4b02      	ldr	r3, [pc, #8]	@ (800fc30 <puts+0xc>)
 800fc26:	4601      	mov	r1, r0
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	f7ff bfa5 	b.w	800fb78 <_puts_r>
 800fc2e:	bf00      	nop
 800fc30:	24000198 	.word	0x24000198

0800fc34 <siprintf>:
 800fc34:	b40e      	push	{r1, r2, r3}
 800fc36:	b510      	push	{r4, lr}
 800fc38:	b09d      	sub	sp, #116	@ 0x74
 800fc3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fc3c:	9002      	str	r0, [sp, #8]
 800fc3e:	9006      	str	r0, [sp, #24]
 800fc40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc44:	480a      	ldr	r0, [pc, #40]	@ (800fc70 <siprintf+0x3c>)
 800fc46:	9107      	str	r1, [sp, #28]
 800fc48:	9104      	str	r1, [sp, #16]
 800fc4a:	490a      	ldr	r1, [pc, #40]	@ (800fc74 <siprintf+0x40>)
 800fc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc50:	9105      	str	r1, [sp, #20]
 800fc52:	2400      	movs	r4, #0
 800fc54:	a902      	add	r1, sp, #8
 800fc56:	6800      	ldr	r0, [r0, #0]
 800fc58:	9301      	str	r3, [sp, #4]
 800fc5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fc5c:	f002 f8e4 	bl	8011e28 <_svfiprintf_r>
 800fc60:	9b02      	ldr	r3, [sp, #8]
 800fc62:	701c      	strb	r4, [r3, #0]
 800fc64:	b01d      	add	sp, #116	@ 0x74
 800fc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6a:	b003      	add	sp, #12
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	24000198 	.word	0x24000198
 800fc74:	ffff0208 	.word	0xffff0208

0800fc78 <siscanf>:
 800fc78:	b40e      	push	{r1, r2, r3}
 800fc7a:	b570      	push	{r4, r5, r6, lr}
 800fc7c:	b09d      	sub	sp, #116	@ 0x74
 800fc7e:	ac21      	add	r4, sp, #132	@ 0x84
 800fc80:	2500      	movs	r5, #0
 800fc82:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fc86:	f854 6b04 	ldr.w	r6, [r4], #4
 800fc8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fc8e:	951b      	str	r5, [sp, #108]	@ 0x6c
 800fc90:	9002      	str	r0, [sp, #8]
 800fc92:	9006      	str	r0, [sp, #24]
 800fc94:	f7f0 fb74 	bl	8000380 <strlen>
 800fc98:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc8 <siscanf+0x50>)
 800fc9a:	9003      	str	r0, [sp, #12]
 800fc9c:	9007      	str	r0, [sp, #28]
 800fc9e:	480b      	ldr	r0, [pc, #44]	@ (800fccc <siscanf+0x54>)
 800fca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fca2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fca6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fcaa:	4632      	mov	r2, r6
 800fcac:	4623      	mov	r3, r4
 800fcae:	a902      	add	r1, sp, #8
 800fcb0:	6800      	ldr	r0, [r0, #0]
 800fcb2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800fcb4:	9514      	str	r5, [sp, #80]	@ 0x50
 800fcb6:	9401      	str	r4, [sp, #4]
 800fcb8:	f002 fa0c 	bl	80120d4 <__ssvfiscanf_r>
 800fcbc:	b01d      	add	sp, #116	@ 0x74
 800fcbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcc2:	b003      	add	sp, #12
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop
 800fcc8:	0800fcf3 	.word	0x0800fcf3
 800fccc:	24000198 	.word	0x24000198

0800fcd0 <__sread>:
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd8:	f000 f914 	bl	800ff04 <_read_r>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	bfab      	itete	ge
 800fce0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fce2:	89a3      	ldrhlt	r3, [r4, #12]
 800fce4:	181b      	addge	r3, r3, r0
 800fce6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fcea:	bfac      	ite	ge
 800fcec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fcee:	81a3      	strhlt	r3, [r4, #12]
 800fcf0:	bd10      	pop	{r4, pc}

0800fcf2 <__seofread>:
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	4770      	bx	lr

0800fcf6 <__swrite>:
 800fcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfa:	461f      	mov	r7, r3
 800fcfc:	898b      	ldrh	r3, [r1, #12]
 800fcfe:	05db      	lsls	r3, r3, #23
 800fd00:	4605      	mov	r5, r0
 800fd02:	460c      	mov	r4, r1
 800fd04:	4616      	mov	r6, r2
 800fd06:	d505      	bpl.n	800fd14 <__swrite+0x1e>
 800fd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd0c:	2302      	movs	r3, #2
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f000 f8e6 	bl	800fee0 <_lseek_r>
 800fd14:	89a3      	ldrh	r3, [r4, #12]
 800fd16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd1e:	81a3      	strh	r3, [r4, #12]
 800fd20:	4632      	mov	r2, r6
 800fd22:	463b      	mov	r3, r7
 800fd24:	4628      	mov	r0, r5
 800fd26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2a:	f000 b90d 	b.w	800ff48 <_write_r>

0800fd2e <__sseek>:
 800fd2e:	b510      	push	{r4, lr}
 800fd30:	460c      	mov	r4, r1
 800fd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd36:	f000 f8d3 	bl	800fee0 <_lseek_r>
 800fd3a:	1c43      	adds	r3, r0, #1
 800fd3c:	89a3      	ldrh	r3, [r4, #12]
 800fd3e:	bf15      	itete	ne
 800fd40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fd4a:	81a3      	strheq	r3, [r4, #12]
 800fd4c:	bf18      	it	ne
 800fd4e:	81a3      	strhne	r3, [r4, #12]
 800fd50:	bd10      	pop	{r4, pc}

0800fd52 <__sclose>:
 800fd52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd56:	f000 b8b3 	b.w	800fec0 <_close_r>

0800fd5a <__swbuf_r>:
 800fd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5c:	460e      	mov	r6, r1
 800fd5e:	4614      	mov	r4, r2
 800fd60:	4605      	mov	r5, r0
 800fd62:	b118      	cbz	r0, 800fd6c <__swbuf_r+0x12>
 800fd64:	6a03      	ldr	r3, [r0, #32]
 800fd66:	b90b      	cbnz	r3, 800fd6c <__swbuf_r+0x12>
 800fd68:	f7ff febe 	bl	800fae8 <__sinit>
 800fd6c:	69a3      	ldr	r3, [r4, #24]
 800fd6e:	60a3      	str	r3, [r4, #8]
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	071a      	lsls	r2, r3, #28
 800fd74:	d501      	bpl.n	800fd7a <__swbuf_r+0x20>
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	b943      	cbnz	r3, 800fd8c <__swbuf_r+0x32>
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	f000 f82b 	bl	800fdd8 <__swsetup_r>
 800fd82:	b118      	cbz	r0, 800fd8c <__swbuf_r+0x32>
 800fd84:	f04f 37ff 	mov.w	r7, #4294967295
 800fd88:	4638      	mov	r0, r7
 800fd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	6922      	ldr	r2, [r4, #16]
 800fd90:	1a98      	subs	r0, r3, r2
 800fd92:	6963      	ldr	r3, [r4, #20]
 800fd94:	b2f6      	uxtb	r6, r6
 800fd96:	4283      	cmp	r3, r0
 800fd98:	4637      	mov	r7, r6
 800fd9a:	dc05      	bgt.n	800fda8 <__swbuf_r+0x4e>
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f002 fe22 	bl	80129e8 <_fflush_r>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d1ed      	bne.n	800fd84 <__swbuf_r+0x2a>
 800fda8:	68a3      	ldr	r3, [r4, #8]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	60a3      	str	r3, [r4, #8]
 800fdae:	6823      	ldr	r3, [r4, #0]
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	6022      	str	r2, [r4, #0]
 800fdb4:	701e      	strb	r6, [r3, #0]
 800fdb6:	6962      	ldr	r2, [r4, #20]
 800fdb8:	1c43      	adds	r3, r0, #1
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d004      	beq.n	800fdc8 <__swbuf_r+0x6e>
 800fdbe:	89a3      	ldrh	r3, [r4, #12]
 800fdc0:	07db      	lsls	r3, r3, #31
 800fdc2:	d5e1      	bpl.n	800fd88 <__swbuf_r+0x2e>
 800fdc4:	2e0a      	cmp	r6, #10
 800fdc6:	d1df      	bne.n	800fd88 <__swbuf_r+0x2e>
 800fdc8:	4621      	mov	r1, r4
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f002 fe0c 	bl	80129e8 <_fflush_r>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d0d9      	beq.n	800fd88 <__swbuf_r+0x2e>
 800fdd4:	e7d6      	b.n	800fd84 <__swbuf_r+0x2a>
	...

0800fdd8 <__swsetup_r>:
 800fdd8:	b538      	push	{r3, r4, r5, lr}
 800fdda:	4b29      	ldr	r3, [pc, #164]	@ (800fe80 <__swsetup_r+0xa8>)
 800fddc:	4605      	mov	r5, r0
 800fdde:	6818      	ldr	r0, [r3, #0]
 800fde0:	460c      	mov	r4, r1
 800fde2:	b118      	cbz	r0, 800fdec <__swsetup_r+0x14>
 800fde4:	6a03      	ldr	r3, [r0, #32]
 800fde6:	b90b      	cbnz	r3, 800fdec <__swsetup_r+0x14>
 800fde8:	f7ff fe7e 	bl	800fae8 <__sinit>
 800fdec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf0:	0719      	lsls	r1, r3, #28
 800fdf2:	d422      	bmi.n	800fe3a <__swsetup_r+0x62>
 800fdf4:	06da      	lsls	r2, r3, #27
 800fdf6:	d407      	bmi.n	800fe08 <__swsetup_r+0x30>
 800fdf8:	2209      	movs	r2, #9
 800fdfa:	602a      	str	r2, [r5, #0]
 800fdfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe00:	81a3      	strh	r3, [r4, #12]
 800fe02:	f04f 30ff 	mov.w	r0, #4294967295
 800fe06:	e033      	b.n	800fe70 <__swsetup_r+0x98>
 800fe08:	0758      	lsls	r0, r3, #29
 800fe0a:	d512      	bpl.n	800fe32 <__swsetup_r+0x5a>
 800fe0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe0e:	b141      	cbz	r1, 800fe22 <__swsetup_r+0x4a>
 800fe10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe14:	4299      	cmp	r1, r3
 800fe16:	d002      	beq.n	800fe1e <__swsetup_r+0x46>
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f000 fedb 	bl	8010bd4 <_free_r>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fe28:	81a3      	strh	r3, [r4, #12]
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	6063      	str	r3, [r4, #4]
 800fe2e:	6923      	ldr	r3, [r4, #16]
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	89a3      	ldrh	r3, [r4, #12]
 800fe34:	f043 0308 	orr.w	r3, r3, #8
 800fe38:	81a3      	strh	r3, [r4, #12]
 800fe3a:	6923      	ldr	r3, [r4, #16]
 800fe3c:	b94b      	cbnz	r3, 800fe52 <__swsetup_r+0x7a>
 800fe3e:	89a3      	ldrh	r3, [r4, #12]
 800fe40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fe44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe48:	d003      	beq.n	800fe52 <__swsetup_r+0x7a>
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	f002 fe19 	bl	8012a84 <__smakebuf_r>
 800fe52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe56:	f013 0201 	ands.w	r2, r3, #1
 800fe5a:	d00a      	beq.n	800fe72 <__swsetup_r+0x9a>
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	60a2      	str	r2, [r4, #8]
 800fe60:	6962      	ldr	r2, [r4, #20]
 800fe62:	4252      	negs	r2, r2
 800fe64:	61a2      	str	r2, [r4, #24]
 800fe66:	6922      	ldr	r2, [r4, #16]
 800fe68:	b942      	cbnz	r2, 800fe7c <__swsetup_r+0xa4>
 800fe6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe6e:	d1c5      	bne.n	800fdfc <__swsetup_r+0x24>
 800fe70:	bd38      	pop	{r3, r4, r5, pc}
 800fe72:	0799      	lsls	r1, r3, #30
 800fe74:	bf58      	it	pl
 800fe76:	6962      	ldrpl	r2, [r4, #20]
 800fe78:	60a2      	str	r2, [r4, #8]
 800fe7a:	e7f4      	b.n	800fe66 <__swsetup_r+0x8e>
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	e7f7      	b.n	800fe70 <__swsetup_r+0x98>
 800fe80:	24000198 	.word	0x24000198

0800fe84 <memset>:
 800fe84:	4402      	add	r2, r0
 800fe86:	4603      	mov	r3, r0
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d100      	bne.n	800fe8e <memset+0xa>
 800fe8c:	4770      	bx	lr
 800fe8e:	f803 1b01 	strb.w	r1, [r3], #1
 800fe92:	e7f9      	b.n	800fe88 <memset+0x4>

0800fe94 <strncmp>:
 800fe94:	b510      	push	{r4, lr}
 800fe96:	b16a      	cbz	r2, 800feb4 <strncmp+0x20>
 800fe98:	3901      	subs	r1, #1
 800fe9a:	1884      	adds	r4, r0, r2
 800fe9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fea0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d103      	bne.n	800feb0 <strncmp+0x1c>
 800fea8:	42a0      	cmp	r0, r4
 800feaa:	d001      	beq.n	800feb0 <strncmp+0x1c>
 800feac:	2a00      	cmp	r2, #0
 800feae:	d1f5      	bne.n	800fe9c <strncmp+0x8>
 800feb0:	1ad0      	subs	r0, r2, r3
 800feb2:	bd10      	pop	{r4, pc}
 800feb4:	4610      	mov	r0, r2
 800feb6:	e7fc      	b.n	800feb2 <strncmp+0x1e>

0800feb8 <_localeconv_r>:
 800feb8:	4800      	ldr	r0, [pc, #0]	@ (800febc <_localeconv_r+0x4>)
 800feba:	4770      	bx	lr
 800febc:	2400011c 	.word	0x2400011c

0800fec0 <_close_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4d06      	ldr	r5, [pc, #24]	@ (800fedc <_close_r+0x1c>)
 800fec4:	2300      	movs	r3, #0
 800fec6:	4604      	mov	r4, r0
 800fec8:	4608      	mov	r0, r1
 800feca:	602b      	str	r3, [r5, #0]
 800fecc:	f7f2 fb88 	bl	80025e0 <_close>
 800fed0:	1c43      	adds	r3, r0, #1
 800fed2:	d102      	bne.n	800feda <_close_r+0x1a>
 800fed4:	682b      	ldr	r3, [r5, #0]
 800fed6:	b103      	cbz	r3, 800feda <_close_r+0x1a>
 800fed8:	6023      	str	r3, [r4, #0]
 800feda:	bd38      	pop	{r3, r4, r5, pc}
 800fedc:	24004f04 	.word	0x24004f04

0800fee0 <_lseek_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4d07      	ldr	r5, [pc, #28]	@ (800ff00 <_lseek_r+0x20>)
 800fee4:	4604      	mov	r4, r0
 800fee6:	4608      	mov	r0, r1
 800fee8:	4611      	mov	r1, r2
 800feea:	2200      	movs	r2, #0
 800feec:	602a      	str	r2, [r5, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	f7f2 fb9d 	bl	800262e <_lseek>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	d102      	bne.n	800fefe <_lseek_r+0x1e>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	b103      	cbz	r3, 800fefe <_lseek_r+0x1e>
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	24004f04 	.word	0x24004f04

0800ff04 <_read_r>:
 800ff04:	b538      	push	{r3, r4, r5, lr}
 800ff06:	4d07      	ldr	r5, [pc, #28]	@ (800ff24 <_read_r+0x20>)
 800ff08:	4604      	mov	r4, r0
 800ff0a:	4608      	mov	r0, r1
 800ff0c:	4611      	mov	r1, r2
 800ff0e:	2200      	movs	r2, #0
 800ff10:	602a      	str	r2, [r5, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	f7f2 fb2b 	bl	800256e <_read>
 800ff18:	1c43      	adds	r3, r0, #1
 800ff1a:	d102      	bne.n	800ff22 <_read_r+0x1e>
 800ff1c:	682b      	ldr	r3, [r5, #0]
 800ff1e:	b103      	cbz	r3, 800ff22 <_read_r+0x1e>
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	bd38      	pop	{r3, r4, r5, pc}
 800ff24:	24004f04 	.word	0x24004f04

0800ff28 <_sbrk_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	4d06      	ldr	r5, [pc, #24]	@ (800ff44 <_sbrk_r+0x1c>)
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	4604      	mov	r4, r0
 800ff30:	4608      	mov	r0, r1
 800ff32:	602b      	str	r3, [r5, #0]
 800ff34:	f7f2 fb88 	bl	8002648 <_sbrk>
 800ff38:	1c43      	adds	r3, r0, #1
 800ff3a:	d102      	bne.n	800ff42 <_sbrk_r+0x1a>
 800ff3c:	682b      	ldr	r3, [r5, #0]
 800ff3e:	b103      	cbz	r3, 800ff42 <_sbrk_r+0x1a>
 800ff40:	6023      	str	r3, [r4, #0]
 800ff42:	bd38      	pop	{r3, r4, r5, pc}
 800ff44:	24004f04 	.word	0x24004f04

0800ff48 <_write_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4d07      	ldr	r5, [pc, #28]	@ (800ff68 <_write_r+0x20>)
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	4608      	mov	r0, r1
 800ff50:	4611      	mov	r1, r2
 800ff52:	2200      	movs	r2, #0
 800ff54:	602a      	str	r2, [r5, #0]
 800ff56:	461a      	mov	r2, r3
 800ff58:	f7f2 fb26 	bl	80025a8 <_write>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	d102      	bne.n	800ff66 <_write_r+0x1e>
 800ff60:	682b      	ldr	r3, [r5, #0]
 800ff62:	b103      	cbz	r3, 800ff66 <_write_r+0x1e>
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
 800ff68:	24004f04 	.word	0x24004f04

0800ff6c <__errno>:
 800ff6c:	4b01      	ldr	r3, [pc, #4]	@ (800ff74 <__errno+0x8>)
 800ff6e:	6818      	ldr	r0, [r3, #0]
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	24000198 	.word	0x24000198

0800ff78 <__libc_init_array>:
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	4d0d      	ldr	r5, [pc, #52]	@ (800ffb0 <__libc_init_array+0x38>)
 800ff7c:	4c0d      	ldr	r4, [pc, #52]	@ (800ffb4 <__libc_init_array+0x3c>)
 800ff7e:	1b64      	subs	r4, r4, r5
 800ff80:	10a4      	asrs	r4, r4, #2
 800ff82:	2600      	movs	r6, #0
 800ff84:	42a6      	cmp	r6, r4
 800ff86:	d109      	bne.n	800ff9c <__libc_init_array+0x24>
 800ff88:	4d0b      	ldr	r5, [pc, #44]	@ (800ffb8 <__libc_init_array+0x40>)
 800ff8a:	4c0c      	ldr	r4, [pc, #48]	@ (800ffbc <__libc_init_array+0x44>)
 800ff8c:	f002 ff66 	bl	8012e5c <_init>
 800ff90:	1b64      	subs	r4, r4, r5
 800ff92:	10a4      	asrs	r4, r4, #2
 800ff94:	2600      	movs	r6, #0
 800ff96:	42a6      	cmp	r6, r4
 800ff98:	d105      	bne.n	800ffa6 <__libc_init_array+0x2e>
 800ff9a:	bd70      	pop	{r4, r5, r6, pc}
 800ff9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffa0:	4798      	blx	r3
 800ffa2:	3601      	adds	r6, #1
 800ffa4:	e7ee      	b.n	800ff84 <__libc_init_array+0xc>
 800ffa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffaa:	4798      	blx	r3
 800ffac:	3601      	adds	r6, #1
 800ffae:	e7f2      	b.n	800ff96 <__libc_init_array+0x1e>
 800ffb0:	08013488 	.word	0x08013488
 800ffb4:	08013488 	.word	0x08013488
 800ffb8:	08013488 	.word	0x08013488
 800ffbc:	0801348c 	.word	0x0801348c

0800ffc0 <__retarget_lock_init_recursive>:
 800ffc0:	4770      	bx	lr

0800ffc2 <__retarget_lock_acquire_recursive>:
 800ffc2:	4770      	bx	lr

0800ffc4 <__retarget_lock_release_recursive>:
 800ffc4:	4770      	bx	lr

0800ffc6 <memcpy>:
 800ffc6:	440a      	add	r2, r1
 800ffc8:	4291      	cmp	r1, r2
 800ffca:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffce:	d100      	bne.n	800ffd2 <memcpy+0xc>
 800ffd0:	4770      	bx	lr
 800ffd2:	b510      	push	{r4, lr}
 800ffd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffdc:	4291      	cmp	r1, r2
 800ffde:	d1f9      	bne.n	800ffd4 <memcpy+0xe>
 800ffe0:	bd10      	pop	{r4, pc}
 800ffe2:	0000      	movs	r0, r0
 800ffe4:	0000      	movs	r0, r0
	...

0800ffe8 <nan>:
 800ffe8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fff0 <nan+0x8>
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	00000000 	.word	0x00000000
 800fff4:	7ff80000 	.word	0x7ff80000

0800fff8 <nanf>:
 800fff8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010000 <nanf+0x8>
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	7fc00000 	.word	0x7fc00000

08010004 <quorem>:
 8010004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010008:	6903      	ldr	r3, [r0, #16]
 801000a:	690c      	ldr	r4, [r1, #16]
 801000c:	42a3      	cmp	r3, r4
 801000e:	4607      	mov	r7, r0
 8010010:	db7e      	blt.n	8010110 <quorem+0x10c>
 8010012:	3c01      	subs	r4, #1
 8010014:	f101 0814 	add.w	r8, r1, #20
 8010018:	00a3      	lsls	r3, r4, #2
 801001a:	f100 0514 	add.w	r5, r0, #20
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801002a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801002e:	3301      	adds	r3, #1
 8010030:	429a      	cmp	r2, r3
 8010032:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010036:	fbb2 f6f3 	udiv	r6, r2, r3
 801003a:	d32e      	bcc.n	801009a <quorem+0x96>
 801003c:	f04f 0a00 	mov.w	sl, #0
 8010040:	46c4      	mov	ip, r8
 8010042:	46ae      	mov	lr, r5
 8010044:	46d3      	mov	fp, sl
 8010046:	f85c 3b04 	ldr.w	r3, [ip], #4
 801004a:	b298      	uxth	r0, r3
 801004c:	fb06 a000 	mla	r0, r6, r0, sl
 8010050:	0c02      	lsrs	r2, r0, #16
 8010052:	0c1b      	lsrs	r3, r3, #16
 8010054:	fb06 2303 	mla	r3, r6, r3, r2
 8010058:	f8de 2000 	ldr.w	r2, [lr]
 801005c:	b280      	uxth	r0, r0
 801005e:	b292      	uxth	r2, r2
 8010060:	1a12      	subs	r2, r2, r0
 8010062:	445a      	add	r2, fp
 8010064:	f8de 0000 	ldr.w	r0, [lr]
 8010068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801006c:	b29b      	uxth	r3, r3
 801006e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010072:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010076:	b292      	uxth	r2, r2
 8010078:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801007c:	45e1      	cmp	r9, ip
 801007e:	f84e 2b04 	str.w	r2, [lr], #4
 8010082:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010086:	d2de      	bcs.n	8010046 <quorem+0x42>
 8010088:	9b00      	ldr	r3, [sp, #0]
 801008a:	58eb      	ldr	r3, [r5, r3]
 801008c:	b92b      	cbnz	r3, 801009a <quorem+0x96>
 801008e:	9b01      	ldr	r3, [sp, #4]
 8010090:	3b04      	subs	r3, #4
 8010092:	429d      	cmp	r5, r3
 8010094:	461a      	mov	r2, r3
 8010096:	d32f      	bcc.n	80100f8 <quorem+0xf4>
 8010098:	613c      	str	r4, [r7, #16]
 801009a:	4638      	mov	r0, r7
 801009c:	f001 fbec 	bl	8011878 <__mcmp>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	db25      	blt.n	80100f0 <quorem+0xec>
 80100a4:	4629      	mov	r1, r5
 80100a6:	2000      	movs	r0, #0
 80100a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80100ac:	f8d1 c000 	ldr.w	ip, [r1]
 80100b0:	fa1f fe82 	uxth.w	lr, r2
 80100b4:	fa1f f38c 	uxth.w	r3, ip
 80100b8:	eba3 030e 	sub.w	r3, r3, lr
 80100bc:	4403      	add	r3, r0
 80100be:	0c12      	lsrs	r2, r2, #16
 80100c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80100c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100ce:	45c1      	cmp	r9, r8
 80100d0:	f841 3b04 	str.w	r3, [r1], #4
 80100d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100d8:	d2e6      	bcs.n	80100a8 <quorem+0xa4>
 80100da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100e2:	b922      	cbnz	r2, 80100ee <quorem+0xea>
 80100e4:	3b04      	subs	r3, #4
 80100e6:	429d      	cmp	r5, r3
 80100e8:	461a      	mov	r2, r3
 80100ea:	d30b      	bcc.n	8010104 <quorem+0x100>
 80100ec:	613c      	str	r4, [r7, #16]
 80100ee:	3601      	adds	r6, #1
 80100f0:	4630      	mov	r0, r6
 80100f2:	b003      	add	sp, #12
 80100f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f8:	6812      	ldr	r2, [r2, #0]
 80100fa:	3b04      	subs	r3, #4
 80100fc:	2a00      	cmp	r2, #0
 80100fe:	d1cb      	bne.n	8010098 <quorem+0x94>
 8010100:	3c01      	subs	r4, #1
 8010102:	e7c6      	b.n	8010092 <quorem+0x8e>
 8010104:	6812      	ldr	r2, [r2, #0]
 8010106:	3b04      	subs	r3, #4
 8010108:	2a00      	cmp	r2, #0
 801010a:	d1ef      	bne.n	80100ec <quorem+0xe8>
 801010c:	3c01      	subs	r4, #1
 801010e:	e7ea      	b.n	80100e6 <quorem+0xe2>
 8010110:	2000      	movs	r0, #0
 8010112:	e7ee      	b.n	80100f2 <quorem+0xee>
 8010114:	0000      	movs	r0, r0
	...

08010118 <_dtoa_r>:
 8010118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011c:	ed2d 8b02 	vpush	{d8}
 8010120:	69c7      	ldr	r7, [r0, #28]
 8010122:	b091      	sub	sp, #68	@ 0x44
 8010124:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010128:	ec55 4b10 	vmov	r4, r5, d0
 801012c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801012e:	9107      	str	r1, [sp, #28]
 8010130:	4681      	mov	r9, r0
 8010132:	9209      	str	r2, [sp, #36]	@ 0x24
 8010134:	930d      	str	r3, [sp, #52]	@ 0x34
 8010136:	b97f      	cbnz	r7, 8010158 <_dtoa_r+0x40>
 8010138:	2010      	movs	r0, #16
 801013a:	f7fd ff5d 	bl	800dff8 <malloc>
 801013e:	4602      	mov	r2, r0
 8010140:	f8c9 001c 	str.w	r0, [r9, #28]
 8010144:	b920      	cbnz	r0, 8010150 <_dtoa_r+0x38>
 8010146:	4ba0      	ldr	r3, [pc, #640]	@ (80103c8 <_dtoa_r+0x2b0>)
 8010148:	21ef      	movs	r1, #239	@ 0xef
 801014a:	48a0      	ldr	r0, [pc, #640]	@ (80103cc <_dtoa_r+0x2b4>)
 801014c:	f002 fd86 	bl	8012c5c <__assert_func>
 8010150:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010154:	6007      	str	r7, [r0, #0]
 8010156:	60c7      	str	r7, [r0, #12]
 8010158:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801015c:	6819      	ldr	r1, [r3, #0]
 801015e:	b159      	cbz	r1, 8010178 <_dtoa_r+0x60>
 8010160:	685a      	ldr	r2, [r3, #4]
 8010162:	604a      	str	r2, [r1, #4]
 8010164:	2301      	movs	r3, #1
 8010166:	4093      	lsls	r3, r2
 8010168:	608b      	str	r3, [r1, #8]
 801016a:	4648      	mov	r0, r9
 801016c:	f001 f908 	bl	8011380 <_Bfree>
 8010170:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010174:	2200      	movs	r2, #0
 8010176:	601a      	str	r2, [r3, #0]
 8010178:	1e2b      	subs	r3, r5, #0
 801017a:	bfbb      	ittet	lt
 801017c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010180:	9303      	strlt	r3, [sp, #12]
 8010182:	2300      	movge	r3, #0
 8010184:	2201      	movlt	r2, #1
 8010186:	bfac      	ite	ge
 8010188:	6033      	strge	r3, [r6, #0]
 801018a:	6032      	strlt	r2, [r6, #0]
 801018c:	4b90      	ldr	r3, [pc, #576]	@ (80103d0 <_dtoa_r+0x2b8>)
 801018e:	9e03      	ldr	r6, [sp, #12]
 8010190:	43b3      	bics	r3, r6
 8010192:	d110      	bne.n	80101b6 <_dtoa_r+0x9e>
 8010194:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010196:	f242 730f 	movw	r3, #9999	@ 0x270f
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80101a0:	4323      	orrs	r3, r4
 80101a2:	f000 84e6 	beq.w	8010b72 <_dtoa_r+0xa5a>
 80101a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101a8:	4f8a      	ldr	r7, [pc, #552]	@ (80103d4 <_dtoa_r+0x2bc>)
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 84e8 	beq.w	8010b80 <_dtoa_r+0xa68>
 80101b0:	1cfb      	adds	r3, r7, #3
 80101b2:	f000 bce3 	b.w	8010b7c <_dtoa_r+0xa64>
 80101b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80101ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80101be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c2:	d10a      	bne.n	80101da <_dtoa_r+0xc2>
 80101c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80101c6:	2301      	movs	r3, #1
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101cc:	b113      	cbz	r3, 80101d4 <_dtoa_r+0xbc>
 80101ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80101d0:	4b81      	ldr	r3, [pc, #516]	@ (80103d8 <_dtoa_r+0x2c0>)
 80101d2:	6013      	str	r3, [r2, #0]
 80101d4:	4f81      	ldr	r7, [pc, #516]	@ (80103dc <_dtoa_r+0x2c4>)
 80101d6:	f000 bcd3 	b.w	8010b80 <_dtoa_r+0xa68>
 80101da:	aa0e      	add	r2, sp, #56	@ 0x38
 80101dc:	a90f      	add	r1, sp, #60	@ 0x3c
 80101de:	4648      	mov	r0, r9
 80101e0:	eeb0 0b48 	vmov.f64	d0, d8
 80101e4:	f001 fc68 	bl	8011ab8 <__d2b>
 80101e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80101ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101ee:	9001      	str	r0, [sp, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d045      	beq.n	8010280 <_dtoa_r+0x168>
 80101f4:	eeb0 7b48 	vmov.f64	d7, d8
 80101f8:	ee18 1a90 	vmov	r1, s17
 80101fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010200:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010204:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010208:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801020c:	2500      	movs	r5, #0
 801020e:	ee07 1a90 	vmov	s15, r1
 8010212:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010216:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103b0 <_dtoa_r+0x298>
 801021a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801021e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80103b8 <_dtoa_r+0x2a0>
 8010222:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010226:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103c0 <_dtoa_r+0x2a8>
 801022a:	ee07 3a90 	vmov	s15, r3
 801022e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010232:	eeb0 7b46 	vmov.f64	d7, d6
 8010236:	eea4 7b05 	vfma.f64	d7, d4, d5
 801023a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801023e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010246:	ee16 8a90 	vmov	r8, s13
 801024a:	d508      	bpl.n	801025e <_dtoa_r+0x146>
 801024c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010250:	eeb4 6b47 	vcmp.f64	d6, d7
 8010254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010258:	bf18      	it	ne
 801025a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801025e:	f1b8 0f16 	cmp.w	r8, #22
 8010262:	d82b      	bhi.n	80102bc <_dtoa_r+0x1a4>
 8010264:	495e      	ldr	r1, [pc, #376]	@ (80103e0 <_dtoa_r+0x2c8>)
 8010266:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801026a:	ed91 7b00 	vldr	d7, [r1]
 801026e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010276:	d501      	bpl.n	801027c <_dtoa_r+0x164>
 8010278:	f108 38ff 	add.w	r8, r8, #4294967295
 801027c:	2100      	movs	r1, #0
 801027e:	e01e      	b.n	80102be <_dtoa_r+0x1a6>
 8010280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010282:	4413      	add	r3, r2
 8010284:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010288:	2920      	cmp	r1, #32
 801028a:	bfc1      	itttt	gt
 801028c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010290:	408e      	lslgt	r6, r1
 8010292:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010296:	fa24 f101 	lsrgt.w	r1, r4, r1
 801029a:	bfd6      	itet	le
 801029c:	f1c1 0120 	rsble	r1, r1, #32
 80102a0:	4331      	orrgt	r1, r6
 80102a2:	fa04 f101 	lslle.w	r1, r4, r1
 80102a6:	ee07 1a90 	vmov	s15, r1
 80102aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80102ae:	3b01      	subs	r3, #1
 80102b0:	ee17 1a90 	vmov	r1, s15
 80102b4:	2501      	movs	r5, #1
 80102b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80102ba:	e7a8      	b.n	801020e <_dtoa_r+0xf6>
 80102bc:	2101      	movs	r1, #1
 80102be:	1ad2      	subs	r2, r2, r3
 80102c0:	1e53      	subs	r3, r2, #1
 80102c2:	9306      	str	r3, [sp, #24]
 80102c4:	bf45      	ittet	mi
 80102c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80102ca:	9304      	strmi	r3, [sp, #16]
 80102cc:	2300      	movpl	r3, #0
 80102ce:	2300      	movmi	r3, #0
 80102d0:	bf4c      	ite	mi
 80102d2:	9306      	strmi	r3, [sp, #24]
 80102d4:	9304      	strpl	r3, [sp, #16]
 80102d6:	f1b8 0f00 	cmp.w	r8, #0
 80102da:	910c      	str	r1, [sp, #48]	@ 0x30
 80102dc:	db18      	blt.n	8010310 <_dtoa_r+0x1f8>
 80102de:	9b06      	ldr	r3, [sp, #24]
 80102e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80102e4:	4443      	add	r3, r8
 80102e6:	9306      	str	r3, [sp, #24]
 80102e8:	2300      	movs	r3, #0
 80102ea:	9a07      	ldr	r2, [sp, #28]
 80102ec:	2a09      	cmp	r2, #9
 80102ee:	d845      	bhi.n	801037c <_dtoa_r+0x264>
 80102f0:	2a05      	cmp	r2, #5
 80102f2:	bfc4      	itt	gt
 80102f4:	3a04      	subgt	r2, #4
 80102f6:	9207      	strgt	r2, [sp, #28]
 80102f8:	9a07      	ldr	r2, [sp, #28]
 80102fa:	f1a2 0202 	sub.w	r2, r2, #2
 80102fe:	bfcc      	ite	gt
 8010300:	2400      	movgt	r4, #0
 8010302:	2401      	movle	r4, #1
 8010304:	2a03      	cmp	r2, #3
 8010306:	d844      	bhi.n	8010392 <_dtoa_r+0x27a>
 8010308:	e8df f002 	tbb	[pc, r2]
 801030c:	0b173634 	.word	0x0b173634
 8010310:	9b04      	ldr	r3, [sp, #16]
 8010312:	2200      	movs	r2, #0
 8010314:	eba3 0308 	sub.w	r3, r3, r8
 8010318:	9304      	str	r3, [sp, #16]
 801031a:	920a      	str	r2, [sp, #40]	@ 0x28
 801031c:	f1c8 0300 	rsb	r3, r8, #0
 8010320:	e7e3      	b.n	80102ea <_dtoa_r+0x1d2>
 8010322:	2201      	movs	r2, #1
 8010324:	9208      	str	r2, [sp, #32]
 8010326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010328:	eb08 0b02 	add.w	fp, r8, r2
 801032c:	f10b 0a01 	add.w	sl, fp, #1
 8010330:	4652      	mov	r2, sl
 8010332:	2a01      	cmp	r2, #1
 8010334:	bfb8      	it	lt
 8010336:	2201      	movlt	r2, #1
 8010338:	e006      	b.n	8010348 <_dtoa_r+0x230>
 801033a:	2201      	movs	r2, #1
 801033c:	9208      	str	r2, [sp, #32]
 801033e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010340:	2a00      	cmp	r2, #0
 8010342:	dd29      	ble.n	8010398 <_dtoa_r+0x280>
 8010344:	4693      	mov	fp, r2
 8010346:	4692      	mov	sl, r2
 8010348:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801034c:	2100      	movs	r1, #0
 801034e:	2004      	movs	r0, #4
 8010350:	f100 0614 	add.w	r6, r0, #20
 8010354:	4296      	cmp	r6, r2
 8010356:	d926      	bls.n	80103a6 <_dtoa_r+0x28e>
 8010358:	6079      	str	r1, [r7, #4]
 801035a:	4648      	mov	r0, r9
 801035c:	9305      	str	r3, [sp, #20]
 801035e:	f000 ffcf 	bl	8011300 <_Balloc>
 8010362:	9b05      	ldr	r3, [sp, #20]
 8010364:	4607      	mov	r7, r0
 8010366:	2800      	cmp	r0, #0
 8010368:	d13e      	bne.n	80103e8 <_dtoa_r+0x2d0>
 801036a:	4b1e      	ldr	r3, [pc, #120]	@ (80103e4 <_dtoa_r+0x2cc>)
 801036c:	4602      	mov	r2, r0
 801036e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010372:	e6ea      	b.n	801014a <_dtoa_r+0x32>
 8010374:	2200      	movs	r2, #0
 8010376:	e7e1      	b.n	801033c <_dtoa_r+0x224>
 8010378:	2200      	movs	r2, #0
 801037a:	e7d3      	b.n	8010324 <_dtoa_r+0x20c>
 801037c:	2401      	movs	r4, #1
 801037e:	2200      	movs	r2, #0
 8010380:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010384:	f04f 3bff 	mov.w	fp, #4294967295
 8010388:	2100      	movs	r1, #0
 801038a:	46da      	mov	sl, fp
 801038c:	2212      	movs	r2, #18
 801038e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010390:	e7da      	b.n	8010348 <_dtoa_r+0x230>
 8010392:	2201      	movs	r2, #1
 8010394:	9208      	str	r2, [sp, #32]
 8010396:	e7f5      	b.n	8010384 <_dtoa_r+0x26c>
 8010398:	f04f 0b01 	mov.w	fp, #1
 801039c:	46da      	mov	sl, fp
 801039e:	465a      	mov	r2, fp
 80103a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80103a4:	e7d0      	b.n	8010348 <_dtoa_r+0x230>
 80103a6:	3101      	adds	r1, #1
 80103a8:	0040      	lsls	r0, r0, #1
 80103aa:	e7d1      	b.n	8010350 <_dtoa_r+0x238>
 80103ac:	f3af 8000 	nop.w
 80103b0:	636f4361 	.word	0x636f4361
 80103b4:	3fd287a7 	.word	0x3fd287a7
 80103b8:	8b60c8b3 	.word	0x8b60c8b3
 80103bc:	3fc68a28 	.word	0x3fc68a28
 80103c0:	509f79fb 	.word	0x509f79fb
 80103c4:	3fd34413 	.word	0x3fd34413
 80103c8:	0801308e 	.word	0x0801308e
 80103cc:	080130a5 	.word	0x080130a5
 80103d0:	7ff00000 	.word	0x7ff00000
 80103d4:	0801308a 	.word	0x0801308a
 80103d8:	080131ef 	.word	0x080131ef
 80103dc:	080131ee 	.word	0x080131ee
 80103e0:	080133b8 	.word	0x080133b8
 80103e4:	080130fd 	.word	0x080130fd
 80103e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80103ec:	f1ba 0f0e 	cmp.w	sl, #14
 80103f0:	6010      	str	r0, [r2, #0]
 80103f2:	d86e      	bhi.n	80104d2 <_dtoa_r+0x3ba>
 80103f4:	2c00      	cmp	r4, #0
 80103f6:	d06c      	beq.n	80104d2 <_dtoa_r+0x3ba>
 80103f8:	f1b8 0f00 	cmp.w	r8, #0
 80103fc:	f340 80b4 	ble.w	8010568 <_dtoa_r+0x450>
 8010400:	4ac8      	ldr	r2, [pc, #800]	@ (8010724 <_dtoa_r+0x60c>)
 8010402:	f008 010f 	and.w	r1, r8, #15
 8010406:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801040a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801040e:	ed92 7b00 	vldr	d7, [r2]
 8010412:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010416:	f000 809b 	beq.w	8010550 <_dtoa_r+0x438>
 801041a:	4ac3      	ldr	r2, [pc, #780]	@ (8010728 <_dtoa_r+0x610>)
 801041c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010420:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010424:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010428:	f001 010f 	and.w	r1, r1, #15
 801042c:	2203      	movs	r2, #3
 801042e:	48be      	ldr	r0, [pc, #760]	@ (8010728 <_dtoa_r+0x610>)
 8010430:	2900      	cmp	r1, #0
 8010432:	f040 808f 	bne.w	8010554 <_dtoa_r+0x43c>
 8010436:	ed9d 6b02 	vldr	d6, [sp, #8]
 801043a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801043e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010442:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010448:	2900      	cmp	r1, #0
 801044a:	f000 80b3 	beq.w	80105b4 <_dtoa_r+0x49c>
 801044e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	f140 80ab 	bpl.w	80105b4 <_dtoa_r+0x49c>
 801045e:	f1ba 0f00 	cmp.w	sl, #0
 8010462:	f000 80a7 	beq.w	80105b4 <_dtoa_r+0x49c>
 8010466:	f1bb 0f00 	cmp.w	fp, #0
 801046a:	dd30      	ble.n	80104ce <_dtoa_r+0x3b6>
 801046c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010470:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010478:	f108 31ff 	add.w	r1, r8, #4294967295
 801047c:	9105      	str	r1, [sp, #20]
 801047e:	3201      	adds	r2, #1
 8010480:	465c      	mov	r4, fp
 8010482:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010486:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801048a:	ee07 2a90 	vmov	s15, r2
 801048e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010492:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010496:	ee15 2a90 	vmov	r2, s11
 801049a:	ec51 0b15 	vmov	r0, r1, d5
 801049e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80104a2:	2c00      	cmp	r4, #0
 80104a4:	f040 808a 	bne.w	80105bc <_dtoa_r+0x4a4>
 80104a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80104ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80104b0:	ec41 0b17 	vmov	d7, r0, r1
 80104b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104bc:	f300 826a 	bgt.w	8010994 <_dtoa_r+0x87c>
 80104c0:	eeb1 7b47 	vneg.f64	d7, d7
 80104c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104cc:	d423      	bmi.n	8010516 <_dtoa_r+0x3fe>
 80104ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 80104d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104d4:	2a00      	cmp	r2, #0
 80104d6:	f2c0 8129 	blt.w	801072c <_dtoa_r+0x614>
 80104da:	f1b8 0f0e 	cmp.w	r8, #14
 80104de:	f300 8125 	bgt.w	801072c <_dtoa_r+0x614>
 80104e2:	4b90      	ldr	r3, [pc, #576]	@ (8010724 <_dtoa_r+0x60c>)
 80104e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80104e8:	ed93 6b00 	vldr	d6, [r3]
 80104ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f280 80c8 	bge.w	8010684 <_dtoa_r+0x56c>
 80104f4:	f1ba 0f00 	cmp.w	sl, #0
 80104f8:	f300 80c4 	bgt.w	8010684 <_dtoa_r+0x56c>
 80104fc:	d10b      	bne.n	8010516 <_dtoa_r+0x3fe>
 80104fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010502:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010506:	ed9d 7b02 	vldr	d7, [sp, #8]
 801050a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010512:	f2c0 823c 	blt.w	801098e <_dtoa_r+0x876>
 8010516:	2400      	movs	r4, #0
 8010518:	4625      	mov	r5, r4
 801051a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801051c:	43db      	mvns	r3, r3
 801051e:	9305      	str	r3, [sp, #20]
 8010520:	463e      	mov	r6, r7
 8010522:	f04f 0800 	mov.w	r8, #0
 8010526:	4621      	mov	r1, r4
 8010528:	4648      	mov	r0, r9
 801052a:	f000 ff29 	bl	8011380 <_Bfree>
 801052e:	2d00      	cmp	r5, #0
 8010530:	f000 80a2 	beq.w	8010678 <_dtoa_r+0x560>
 8010534:	f1b8 0f00 	cmp.w	r8, #0
 8010538:	d005      	beq.n	8010546 <_dtoa_r+0x42e>
 801053a:	45a8      	cmp	r8, r5
 801053c:	d003      	beq.n	8010546 <_dtoa_r+0x42e>
 801053e:	4641      	mov	r1, r8
 8010540:	4648      	mov	r0, r9
 8010542:	f000 ff1d 	bl	8011380 <_Bfree>
 8010546:	4629      	mov	r1, r5
 8010548:	4648      	mov	r0, r9
 801054a:	f000 ff19 	bl	8011380 <_Bfree>
 801054e:	e093      	b.n	8010678 <_dtoa_r+0x560>
 8010550:	2202      	movs	r2, #2
 8010552:	e76c      	b.n	801042e <_dtoa_r+0x316>
 8010554:	07cc      	lsls	r4, r1, #31
 8010556:	d504      	bpl.n	8010562 <_dtoa_r+0x44a>
 8010558:	ed90 6b00 	vldr	d6, [r0]
 801055c:	3201      	adds	r2, #1
 801055e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010562:	1049      	asrs	r1, r1, #1
 8010564:	3008      	adds	r0, #8
 8010566:	e763      	b.n	8010430 <_dtoa_r+0x318>
 8010568:	d022      	beq.n	80105b0 <_dtoa_r+0x498>
 801056a:	f1c8 0100 	rsb	r1, r8, #0
 801056e:	4a6d      	ldr	r2, [pc, #436]	@ (8010724 <_dtoa_r+0x60c>)
 8010570:	f001 000f 	and.w	r0, r1, #15
 8010574:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010578:	ed92 7b00 	vldr	d7, [r2]
 801057c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010580:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010584:	4868      	ldr	r0, [pc, #416]	@ (8010728 <_dtoa_r+0x610>)
 8010586:	1109      	asrs	r1, r1, #4
 8010588:	2400      	movs	r4, #0
 801058a:	2202      	movs	r2, #2
 801058c:	b929      	cbnz	r1, 801059a <_dtoa_r+0x482>
 801058e:	2c00      	cmp	r4, #0
 8010590:	f43f af57 	beq.w	8010442 <_dtoa_r+0x32a>
 8010594:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010598:	e753      	b.n	8010442 <_dtoa_r+0x32a>
 801059a:	07ce      	lsls	r6, r1, #31
 801059c:	d505      	bpl.n	80105aa <_dtoa_r+0x492>
 801059e:	ed90 6b00 	vldr	d6, [r0]
 80105a2:	3201      	adds	r2, #1
 80105a4:	2401      	movs	r4, #1
 80105a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105aa:	1049      	asrs	r1, r1, #1
 80105ac:	3008      	adds	r0, #8
 80105ae:	e7ed      	b.n	801058c <_dtoa_r+0x474>
 80105b0:	2202      	movs	r2, #2
 80105b2:	e746      	b.n	8010442 <_dtoa_r+0x32a>
 80105b4:	f8cd 8014 	str.w	r8, [sp, #20]
 80105b8:	4654      	mov	r4, sl
 80105ba:	e762      	b.n	8010482 <_dtoa_r+0x36a>
 80105bc:	4a59      	ldr	r2, [pc, #356]	@ (8010724 <_dtoa_r+0x60c>)
 80105be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80105c2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80105c6:	9a08      	ldr	r2, [sp, #32]
 80105c8:	ec41 0b17 	vmov	d7, r0, r1
 80105cc:	443c      	add	r4, r7
 80105ce:	b34a      	cbz	r2, 8010624 <_dtoa_r+0x50c>
 80105d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80105d4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80105d8:	463e      	mov	r6, r7
 80105da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80105de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80105e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80105e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80105ea:	ee14 2a90 	vmov	r2, s9
 80105ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80105f2:	3230      	adds	r2, #48	@ 0x30
 80105f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80105f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010600:	f806 2b01 	strb.w	r2, [r6], #1
 8010604:	d438      	bmi.n	8010678 <_dtoa_r+0x560>
 8010606:	ee32 5b46 	vsub.f64	d5, d2, d6
 801060a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010612:	d46e      	bmi.n	80106f2 <_dtoa_r+0x5da>
 8010614:	42a6      	cmp	r6, r4
 8010616:	f43f af5a 	beq.w	80104ce <_dtoa_r+0x3b6>
 801061a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801061e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010622:	e7e0      	b.n	80105e6 <_dtoa_r+0x4ce>
 8010624:	4621      	mov	r1, r4
 8010626:	463e      	mov	r6, r7
 8010628:	ee27 7b04 	vmul.f64	d7, d7, d4
 801062c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010630:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010634:	ee14 2a90 	vmov	r2, s9
 8010638:	3230      	adds	r2, #48	@ 0x30
 801063a:	f806 2b01 	strb.w	r2, [r6], #1
 801063e:	42a6      	cmp	r6, r4
 8010640:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010644:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010648:	d119      	bne.n	801067e <_dtoa_r+0x566>
 801064a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801064e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010652:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065a:	dc4a      	bgt.n	80106f2 <_dtoa_r+0x5da>
 801065c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010660:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010668:	f57f af31 	bpl.w	80104ce <_dtoa_r+0x3b6>
 801066c:	460e      	mov	r6, r1
 801066e:	3901      	subs	r1, #1
 8010670:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010674:	2b30      	cmp	r3, #48	@ 0x30
 8010676:	d0f9      	beq.n	801066c <_dtoa_r+0x554>
 8010678:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801067c:	e027      	b.n	80106ce <_dtoa_r+0x5b6>
 801067e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010682:	e7d5      	b.n	8010630 <_dtoa_r+0x518>
 8010684:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010688:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801068c:	463e      	mov	r6, r7
 801068e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010692:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010696:	ee15 3a10 	vmov	r3, s10
 801069a:	3330      	adds	r3, #48	@ 0x30
 801069c:	f806 3b01 	strb.w	r3, [r6], #1
 80106a0:	1bf3      	subs	r3, r6, r7
 80106a2:	459a      	cmp	sl, r3
 80106a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106ac:	d132      	bne.n	8010714 <_dtoa_r+0x5fc>
 80106ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ba:	dc18      	bgt.n	80106ee <_dtoa_r+0x5d6>
 80106bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80106c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c4:	d103      	bne.n	80106ce <_dtoa_r+0x5b6>
 80106c6:	ee15 3a10 	vmov	r3, s10
 80106ca:	07db      	lsls	r3, r3, #31
 80106cc:	d40f      	bmi.n	80106ee <_dtoa_r+0x5d6>
 80106ce:	9901      	ldr	r1, [sp, #4]
 80106d0:	4648      	mov	r0, r9
 80106d2:	f000 fe55 	bl	8011380 <_Bfree>
 80106d6:	2300      	movs	r3, #0
 80106d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80106da:	7033      	strb	r3, [r6, #0]
 80106dc:	f108 0301 	add.w	r3, r8, #1
 80106e0:	6013      	str	r3, [r2, #0]
 80106e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f000 824b 	beq.w	8010b80 <_dtoa_r+0xa68>
 80106ea:	601e      	str	r6, [r3, #0]
 80106ec:	e248      	b.n	8010b80 <_dtoa_r+0xa68>
 80106ee:	f8cd 8014 	str.w	r8, [sp, #20]
 80106f2:	4633      	mov	r3, r6
 80106f4:	461e      	mov	r6, r3
 80106f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106fa:	2a39      	cmp	r2, #57	@ 0x39
 80106fc:	d106      	bne.n	801070c <_dtoa_r+0x5f4>
 80106fe:	429f      	cmp	r7, r3
 8010700:	d1f8      	bne.n	80106f4 <_dtoa_r+0x5dc>
 8010702:	9a05      	ldr	r2, [sp, #20]
 8010704:	3201      	adds	r2, #1
 8010706:	9205      	str	r2, [sp, #20]
 8010708:	2230      	movs	r2, #48	@ 0x30
 801070a:	703a      	strb	r2, [r7, #0]
 801070c:	781a      	ldrb	r2, [r3, #0]
 801070e:	3201      	adds	r2, #1
 8010710:	701a      	strb	r2, [r3, #0]
 8010712:	e7b1      	b.n	8010678 <_dtoa_r+0x560>
 8010714:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010718:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010720:	d1b5      	bne.n	801068e <_dtoa_r+0x576>
 8010722:	e7d4      	b.n	80106ce <_dtoa_r+0x5b6>
 8010724:	080133b8 	.word	0x080133b8
 8010728:	08013390 	.word	0x08013390
 801072c:	9908      	ldr	r1, [sp, #32]
 801072e:	2900      	cmp	r1, #0
 8010730:	f000 80e9 	beq.w	8010906 <_dtoa_r+0x7ee>
 8010734:	9907      	ldr	r1, [sp, #28]
 8010736:	2901      	cmp	r1, #1
 8010738:	f300 80cb 	bgt.w	80108d2 <_dtoa_r+0x7ba>
 801073c:	2d00      	cmp	r5, #0
 801073e:	f000 80c4 	beq.w	80108ca <_dtoa_r+0x7b2>
 8010742:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010746:	9e04      	ldr	r6, [sp, #16]
 8010748:	461c      	mov	r4, r3
 801074a:	9305      	str	r3, [sp, #20]
 801074c:	9b04      	ldr	r3, [sp, #16]
 801074e:	4413      	add	r3, r2
 8010750:	9304      	str	r3, [sp, #16]
 8010752:	9b06      	ldr	r3, [sp, #24]
 8010754:	2101      	movs	r1, #1
 8010756:	4413      	add	r3, r2
 8010758:	4648      	mov	r0, r9
 801075a:	9306      	str	r3, [sp, #24]
 801075c:	f000 ff0e 	bl	801157c <__i2b>
 8010760:	9b05      	ldr	r3, [sp, #20]
 8010762:	4605      	mov	r5, r0
 8010764:	b166      	cbz	r6, 8010780 <_dtoa_r+0x668>
 8010766:	9a06      	ldr	r2, [sp, #24]
 8010768:	2a00      	cmp	r2, #0
 801076a:	dd09      	ble.n	8010780 <_dtoa_r+0x668>
 801076c:	42b2      	cmp	r2, r6
 801076e:	9904      	ldr	r1, [sp, #16]
 8010770:	bfa8      	it	ge
 8010772:	4632      	movge	r2, r6
 8010774:	1a89      	subs	r1, r1, r2
 8010776:	9104      	str	r1, [sp, #16]
 8010778:	9906      	ldr	r1, [sp, #24]
 801077a:	1ab6      	subs	r6, r6, r2
 801077c:	1a8a      	subs	r2, r1, r2
 801077e:	9206      	str	r2, [sp, #24]
 8010780:	b30b      	cbz	r3, 80107c6 <_dtoa_r+0x6ae>
 8010782:	9a08      	ldr	r2, [sp, #32]
 8010784:	2a00      	cmp	r2, #0
 8010786:	f000 80c5 	beq.w	8010914 <_dtoa_r+0x7fc>
 801078a:	2c00      	cmp	r4, #0
 801078c:	f000 80bf 	beq.w	801090e <_dtoa_r+0x7f6>
 8010790:	4629      	mov	r1, r5
 8010792:	4622      	mov	r2, r4
 8010794:	4648      	mov	r0, r9
 8010796:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010798:	f000 ffa8 	bl	80116ec <__pow5mult>
 801079c:	9a01      	ldr	r2, [sp, #4]
 801079e:	4601      	mov	r1, r0
 80107a0:	4605      	mov	r5, r0
 80107a2:	4648      	mov	r0, r9
 80107a4:	f000 ff00 	bl	80115a8 <__multiply>
 80107a8:	9901      	ldr	r1, [sp, #4]
 80107aa:	9005      	str	r0, [sp, #20]
 80107ac:	4648      	mov	r0, r9
 80107ae:	f000 fde7 	bl	8011380 <_Bfree>
 80107b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107b4:	1b1b      	subs	r3, r3, r4
 80107b6:	f000 80b0 	beq.w	801091a <_dtoa_r+0x802>
 80107ba:	9905      	ldr	r1, [sp, #20]
 80107bc:	461a      	mov	r2, r3
 80107be:	4648      	mov	r0, r9
 80107c0:	f000 ff94 	bl	80116ec <__pow5mult>
 80107c4:	9001      	str	r0, [sp, #4]
 80107c6:	2101      	movs	r1, #1
 80107c8:	4648      	mov	r0, r9
 80107ca:	f000 fed7 	bl	801157c <__i2b>
 80107ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107d0:	4604      	mov	r4, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 81da 	beq.w	8010b8c <_dtoa_r+0xa74>
 80107d8:	461a      	mov	r2, r3
 80107da:	4601      	mov	r1, r0
 80107dc:	4648      	mov	r0, r9
 80107de:	f000 ff85 	bl	80116ec <__pow5mult>
 80107e2:	9b07      	ldr	r3, [sp, #28]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	4604      	mov	r4, r0
 80107e8:	f300 80a0 	bgt.w	801092c <_dtoa_r+0x814>
 80107ec:	9b02      	ldr	r3, [sp, #8]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f040 8096 	bne.w	8010920 <_dtoa_r+0x808>
 80107f4:	9b03      	ldr	r3, [sp, #12]
 80107f6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80107fa:	2a00      	cmp	r2, #0
 80107fc:	f040 8092 	bne.w	8010924 <_dtoa_r+0x80c>
 8010800:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010804:	0d12      	lsrs	r2, r2, #20
 8010806:	0512      	lsls	r2, r2, #20
 8010808:	2a00      	cmp	r2, #0
 801080a:	f000 808d 	beq.w	8010928 <_dtoa_r+0x810>
 801080e:	9b04      	ldr	r3, [sp, #16]
 8010810:	3301      	adds	r3, #1
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	9b06      	ldr	r3, [sp, #24]
 8010816:	3301      	adds	r3, #1
 8010818:	9306      	str	r3, [sp, #24]
 801081a:	2301      	movs	r3, #1
 801081c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801081e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 81b9 	beq.w	8010b98 <_dtoa_r+0xa80>
 8010826:	6922      	ldr	r2, [r4, #16]
 8010828:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801082c:	6910      	ldr	r0, [r2, #16]
 801082e:	f000 fe59 	bl	80114e4 <__hi0bits>
 8010832:	f1c0 0020 	rsb	r0, r0, #32
 8010836:	9b06      	ldr	r3, [sp, #24]
 8010838:	4418      	add	r0, r3
 801083a:	f010 001f 	ands.w	r0, r0, #31
 801083e:	f000 8081 	beq.w	8010944 <_dtoa_r+0x82c>
 8010842:	f1c0 0220 	rsb	r2, r0, #32
 8010846:	2a04      	cmp	r2, #4
 8010848:	dd73      	ble.n	8010932 <_dtoa_r+0x81a>
 801084a:	9b04      	ldr	r3, [sp, #16]
 801084c:	f1c0 001c 	rsb	r0, r0, #28
 8010850:	4403      	add	r3, r0
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	9b06      	ldr	r3, [sp, #24]
 8010856:	4406      	add	r6, r0
 8010858:	4403      	add	r3, r0
 801085a:	9306      	str	r3, [sp, #24]
 801085c:	9b04      	ldr	r3, [sp, #16]
 801085e:	2b00      	cmp	r3, #0
 8010860:	dd05      	ble.n	801086e <_dtoa_r+0x756>
 8010862:	9901      	ldr	r1, [sp, #4]
 8010864:	461a      	mov	r2, r3
 8010866:	4648      	mov	r0, r9
 8010868:	f000 ff9a 	bl	80117a0 <__lshift>
 801086c:	9001      	str	r0, [sp, #4]
 801086e:	9b06      	ldr	r3, [sp, #24]
 8010870:	2b00      	cmp	r3, #0
 8010872:	dd05      	ble.n	8010880 <_dtoa_r+0x768>
 8010874:	4621      	mov	r1, r4
 8010876:	461a      	mov	r2, r3
 8010878:	4648      	mov	r0, r9
 801087a:	f000 ff91 	bl	80117a0 <__lshift>
 801087e:	4604      	mov	r4, r0
 8010880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010882:	2b00      	cmp	r3, #0
 8010884:	d060      	beq.n	8010948 <_dtoa_r+0x830>
 8010886:	9801      	ldr	r0, [sp, #4]
 8010888:	4621      	mov	r1, r4
 801088a:	f000 fff5 	bl	8011878 <__mcmp>
 801088e:	2800      	cmp	r0, #0
 8010890:	da5a      	bge.n	8010948 <_dtoa_r+0x830>
 8010892:	f108 33ff 	add.w	r3, r8, #4294967295
 8010896:	9305      	str	r3, [sp, #20]
 8010898:	9901      	ldr	r1, [sp, #4]
 801089a:	2300      	movs	r3, #0
 801089c:	220a      	movs	r2, #10
 801089e:	4648      	mov	r0, r9
 80108a0:	f000 fd90 	bl	80113c4 <__multadd>
 80108a4:	9b08      	ldr	r3, [sp, #32]
 80108a6:	9001      	str	r0, [sp, #4]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f000 8177 	beq.w	8010b9c <_dtoa_r+0xa84>
 80108ae:	4629      	mov	r1, r5
 80108b0:	2300      	movs	r3, #0
 80108b2:	220a      	movs	r2, #10
 80108b4:	4648      	mov	r0, r9
 80108b6:	f000 fd85 	bl	80113c4 <__multadd>
 80108ba:	f1bb 0f00 	cmp.w	fp, #0
 80108be:	4605      	mov	r5, r0
 80108c0:	dc6e      	bgt.n	80109a0 <_dtoa_r+0x888>
 80108c2:	9b07      	ldr	r3, [sp, #28]
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	dc48      	bgt.n	801095a <_dtoa_r+0x842>
 80108c8:	e06a      	b.n	80109a0 <_dtoa_r+0x888>
 80108ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80108d0:	e739      	b.n	8010746 <_dtoa_r+0x62e>
 80108d2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80108d6:	42a3      	cmp	r3, r4
 80108d8:	db07      	blt.n	80108ea <_dtoa_r+0x7d2>
 80108da:	f1ba 0f00 	cmp.w	sl, #0
 80108de:	eba3 0404 	sub.w	r4, r3, r4
 80108e2:	db0b      	blt.n	80108fc <_dtoa_r+0x7e4>
 80108e4:	9e04      	ldr	r6, [sp, #16]
 80108e6:	4652      	mov	r2, sl
 80108e8:	e72f      	b.n	801074a <_dtoa_r+0x632>
 80108ea:	1ae2      	subs	r2, r4, r3
 80108ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108ee:	9e04      	ldr	r6, [sp, #16]
 80108f0:	4413      	add	r3, r2
 80108f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80108f4:	4652      	mov	r2, sl
 80108f6:	4623      	mov	r3, r4
 80108f8:	2400      	movs	r4, #0
 80108fa:	e726      	b.n	801074a <_dtoa_r+0x632>
 80108fc:	9a04      	ldr	r2, [sp, #16]
 80108fe:	eba2 060a 	sub.w	r6, r2, sl
 8010902:	2200      	movs	r2, #0
 8010904:	e721      	b.n	801074a <_dtoa_r+0x632>
 8010906:	9e04      	ldr	r6, [sp, #16]
 8010908:	9d08      	ldr	r5, [sp, #32]
 801090a:	461c      	mov	r4, r3
 801090c:	e72a      	b.n	8010764 <_dtoa_r+0x64c>
 801090e:	9a01      	ldr	r2, [sp, #4]
 8010910:	9205      	str	r2, [sp, #20]
 8010912:	e752      	b.n	80107ba <_dtoa_r+0x6a2>
 8010914:	9901      	ldr	r1, [sp, #4]
 8010916:	461a      	mov	r2, r3
 8010918:	e751      	b.n	80107be <_dtoa_r+0x6a6>
 801091a:	9b05      	ldr	r3, [sp, #20]
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	e752      	b.n	80107c6 <_dtoa_r+0x6ae>
 8010920:	2300      	movs	r3, #0
 8010922:	e77b      	b.n	801081c <_dtoa_r+0x704>
 8010924:	9b02      	ldr	r3, [sp, #8]
 8010926:	e779      	b.n	801081c <_dtoa_r+0x704>
 8010928:	920b      	str	r2, [sp, #44]	@ 0x2c
 801092a:	e778      	b.n	801081e <_dtoa_r+0x706>
 801092c:	2300      	movs	r3, #0
 801092e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010930:	e779      	b.n	8010826 <_dtoa_r+0x70e>
 8010932:	d093      	beq.n	801085c <_dtoa_r+0x744>
 8010934:	9b04      	ldr	r3, [sp, #16]
 8010936:	321c      	adds	r2, #28
 8010938:	4413      	add	r3, r2
 801093a:	9304      	str	r3, [sp, #16]
 801093c:	9b06      	ldr	r3, [sp, #24]
 801093e:	4416      	add	r6, r2
 8010940:	4413      	add	r3, r2
 8010942:	e78a      	b.n	801085a <_dtoa_r+0x742>
 8010944:	4602      	mov	r2, r0
 8010946:	e7f5      	b.n	8010934 <_dtoa_r+0x81c>
 8010948:	f1ba 0f00 	cmp.w	sl, #0
 801094c:	f8cd 8014 	str.w	r8, [sp, #20]
 8010950:	46d3      	mov	fp, sl
 8010952:	dc21      	bgt.n	8010998 <_dtoa_r+0x880>
 8010954:	9b07      	ldr	r3, [sp, #28]
 8010956:	2b02      	cmp	r3, #2
 8010958:	dd1e      	ble.n	8010998 <_dtoa_r+0x880>
 801095a:	f1bb 0f00 	cmp.w	fp, #0
 801095e:	f47f addc 	bne.w	801051a <_dtoa_r+0x402>
 8010962:	4621      	mov	r1, r4
 8010964:	465b      	mov	r3, fp
 8010966:	2205      	movs	r2, #5
 8010968:	4648      	mov	r0, r9
 801096a:	f000 fd2b 	bl	80113c4 <__multadd>
 801096e:	4601      	mov	r1, r0
 8010970:	4604      	mov	r4, r0
 8010972:	9801      	ldr	r0, [sp, #4]
 8010974:	f000 ff80 	bl	8011878 <__mcmp>
 8010978:	2800      	cmp	r0, #0
 801097a:	f77f adce 	ble.w	801051a <_dtoa_r+0x402>
 801097e:	463e      	mov	r6, r7
 8010980:	2331      	movs	r3, #49	@ 0x31
 8010982:	f806 3b01 	strb.w	r3, [r6], #1
 8010986:	9b05      	ldr	r3, [sp, #20]
 8010988:	3301      	adds	r3, #1
 801098a:	9305      	str	r3, [sp, #20]
 801098c:	e5c9      	b.n	8010522 <_dtoa_r+0x40a>
 801098e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010992:	4654      	mov	r4, sl
 8010994:	4625      	mov	r5, r4
 8010996:	e7f2      	b.n	801097e <_dtoa_r+0x866>
 8010998:	9b08      	ldr	r3, [sp, #32]
 801099a:	2b00      	cmp	r3, #0
 801099c:	f000 8102 	beq.w	8010ba4 <_dtoa_r+0xa8c>
 80109a0:	2e00      	cmp	r6, #0
 80109a2:	dd05      	ble.n	80109b0 <_dtoa_r+0x898>
 80109a4:	4629      	mov	r1, r5
 80109a6:	4632      	mov	r2, r6
 80109a8:	4648      	mov	r0, r9
 80109aa:	f000 fef9 	bl	80117a0 <__lshift>
 80109ae:	4605      	mov	r5, r0
 80109b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d058      	beq.n	8010a68 <_dtoa_r+0x950>
 80109b6:	6869      	ldr	r1, [r5, #4]
 80109b8:	4648      	mov	r0, r9
 80109ba:	f000 fca1 	bl	8011300 <_Balloc>
 80109be:	4606      	mov	r6, r0
 80109c0:	b928      	cbnz	r0, 80109ce <_dtoa_r+0x8b6>
 80109c2:	4b82      	ldr	r3, [pc, #520]	@ (8010bcc <_dtoa_r+0xab4>)
 80109c4:	4602      	mov	r2, r0
 80109c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80109ca:	f7ff bbbe 	b.w	801014a <_dtoa_r+0x32>
 80109ce:	692a      	ldr	r2, [r5, #16]
 80109d0:	3202      	adds	r2, #2
 80109d2:	0092      	lsls	r2, r2, #2
 80109d4:	f105 010c 	add.w	r1, r5, #12
 80109d8:	300c      	adds	r0, #12
 80109da:	f7ff faf4 	bl	800ffc6 <memcpy>
 80109de:	2201      	movs	r2, #1
 80109e0:	4631      	mov	r1, r6
 80109e2:	4648      	mov	r0, r9
 80109e4:	f000 fedc 	bl	80117a0 <__lshift>
 80109e8:	1c7b      	adds	r3, r7, #1
 80109ea:	9304      	str	r3, [sp, #16]
 80109ec:	eb07 030b 	add.w	r3, r7, fp
 80109f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80109f2:	9b02      	ldr	r3, [sp, #8]
 80109f4:	f003 0301 	and.w	r3, r3, #1
 80109f8:	46a8      	mov	r8, r5
 80109fa:	9308      	str	r3, [sp, #32]
 80109fc:	4605      	mov	r5, r0
 80109fe:	9b04      	ldr	r3, [sp, #16]
 8010a00:	9801      	ldr	r0, [sp, #4]
 8010a02:	4621      	mov	r1, r4
 8010a04:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a08:	f7ff fafc 	bl	8010004 <quorem>
 8010a0c:	4641      	mov	r1, r8
 8010a0e:	9002      	str	r0, [sp, #8]
 8010a10:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010a14:	9801      	ldr	r0, [sp, #4]
 8010a16:	f000 ff2f 	bl	8011878 <__mcmp>
 8010a1a:	462a      	mov	r2, r5
 8010a1c:	9006      	str	r0, [sp, #24]
 8010a1e:	4621      	mov	r1, r4
 8010a20:	4648      	mov	r0, r9
 8010a22:	f000 ff45 	bl	80118b0 <__mdiff>
 8010a26:	68c2      	ldr	r2, [r0, #12]
 8010a28:	4606      	mov	r6, r0
 8010a2a:	b9fa      	cbnz	r2, 8010a6c <_dtoa_r+0x954>
 8010a2c:	4601      	mov	r1, r0
 8010a2e:	9801      	ldr	r0, [sp, #4]
 8010a30:	f000 ff22 	bl	8011878 <__mcmp>
 8010a34:	4602      	mov	r2, r0
 8010a36:	4631      	mov	r1, r6
 8010a38:	4648      	mov	r0, r9
 8010a3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010a3c:	f000 fca0 	bl	8011380 <_Bfree>
 8010a40:	9b07      	ldr	r3, [sp, #28]
 8010a42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a44:	9e04      	ldr	r6, [sp, #16]
 8010a46:	ea42 0103 	orr.w	r1, r2, r3
 8010a4a:	9b08      	ldr	r3, [sp, #32]
 8010a4c:	4319      	orrs	r1, r3
 8010a4e:	d10f      	bne.n	8010a70 <_dtoa_r+0x958>
 8010a50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010a54:	d028      	beq.n	8010aa8 <_dtoa_r+0x990>
 8010a56:	9b06      	ldr	r3, [sp, #24]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	dd02      	ble.n	8010a62 <_dtoa_r+0x94a>
 8010a5c:	9b02      	ldr	r3, [sp, #8]
 8010a5e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010a62:	f88b a000 	strb.w	sl, [fp]
 8010a66:	e55e      	b.n	8010526 <_dtoa_r+0x40e>
 8010a68:	4628      	mov	r0, r5
 8010a6a:	e7bd      	b.n	80109e8 <_dtoa_r+0x8d0>
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	e7e2      	b.n	8010a36 <_dtoa_r+0x91e>
 8010a70:	9b06      	ldr	r3, [sp, #24]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	db04      	blt.n	8010a80 <_dtoa_r+0x968>
 8010a76:	9907      	ldr	r1, [sp, #28]
 8010a78:	430b      	orrs	r3, r1
 8010a7a:	9908      	ldr	r1, [sp, #32]
 8010a7c:	430b      	orrs	r3, r1
 8010a7e:	d120      	bne.n	8010ac2 <_dtoa_r+0x9aa>
 8010a80:	2a00      	cmp	r2, #0
 8010a82:	ddee      	ble.n	8010a62 <_dtoa_r+0x94a>
 8010a84:	9901      	ldr	r1, [sp, #4]
 8010a86:	2201      	movs	r2, #1
 8010a88:	4648      	mov	r0, r9
 8010a8a:	f000 fe89 	bl	80117a0 <__lshift>
 8010a8e:	4621      	mov	r1, r4
 8010a90:	9001      	str	r0, [sp, #4]
 8010a92:	f000 fef1 	bl	8011878 <__mcmp>
 8010a96:	2800      	cmp	r0, #0
 8010a98:	dc03      	bgt.n	8010aa2 <_dtoa_r+0x98a>
 8010a9a:	d1e2      	bne.n	8010a62 <_dtoa_r+0x94a>
 8010a9c:	f01a 0f01 	tst.w	sl, #1
 8010aa0:	d0df      	beq.n	8010a62 <_dtoa_r+0x94a>
 8010aa2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010aa6:	d1d9      	bne.n	8010a5c <_dtoa_r+0x944>
 8010aa8:	2339      	movs	r3, #57	@ 0x39
 8010aaa:	f88b 3000 	strb.w	r3, [fp]
 8010aae:	4633      	mov	r3, r6
 8010ab0:	461e      	mov	r6, r3
 8010ab2:	3b01      	subs	r3, #1
 8010ab4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ab8:	2a39      	cmp	r2, #57	@ 0x39
 8010aba:	d052      	beq.n	8010b62 <_dtoa_r+0xa4a>
 8010abc:	3201      	adds	r2, #1
 8010abe:	701a      	strb	r2, [r3, #0]
 8010ac0:	e531      	b.n	8010526 <_dtoa_r+0x40e>
 8010ac2:	2a00      	cmp	r2, #0
 8010ac4:	dd07      	ble.n	8010ad6 <_dtoa_r+0x9be>
 8010ac6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010aca:	d0ed      	beq.n	8010aa8 <_dtoa_r+0x990>
 8010acc:	f10a 0301 	add.w	r3, sl, #1
 8010ad0:	f88b 3000 	strb.w	r3, [fp]
 8010ad4:	e527      	b.n	8010526 <_dtoa_r+0x40e>
 8010ad6:	9b04      	ldr	r3, [sp, #16]
 8010ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ada:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d029      	beq.n	8010b36 <_dtoa_r+0xa1e>
 8010ae2:	9901      	ldr	r1, [sp, #4]
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	220a      	movs	r2, #10
 8010ae8:	4648      	mov	r0, r9
 8010aea:	f000 fc6b 	bl	80113c4 <__multadd>
 8010aee:	45a8      	cmp	r8, r5
 8010af0:	9001      	str	r0, [sp, #4]
 8010af2:	f04f 0300 	mov.w	r3, #0
 8010af6:	f04f 020a 	mov.w	r2, #10
 8010afa:	4641      	mov	r1, r8
 8010afc:	4648      	mov	r0, r9
 8010afe:	d107      	bne.n	8010b10 <_dtoa_r+0x9f8>
 8010b00:	f000 fc60 	bl	80113c4 <__multadd>
 8010b04:	4680      	mov	r8, r0
 8010b06:	4605      	mov	r5, r0
 8010b08:	9b04      	ldr	r3, [sp, #16]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	9304      	str	r3, [sp, #16]
 8010b0e:	e776      	b.n	80109fe <_dtoa_r+0x8e6>
 8010b10:	f000 fc58 	bl	80113c4 <__multadd>
 8010b14:	4629      	mov	r1, r5
 8010b16:	4680      	mov	r8, r0
 8010b18:	2300      	movs	r3, #0
 8010b1a:	220a      	movs	r2, #10
 8010b1c:	4648      	mov	r0, r9
 8010b1e:	f000 fc51 	bl	80113c4 <__multadd>
 8010b22:	4605      	mov	r5, r0
 8010b24:	e7f0      	b.n	8010b08 <_dtoa_r+0x9f0>
 8010b26:	f1bb 0f00 	cmp.w	fp, #0
 8010b2a:	bfcc      	ite	gt
 8010b2c:	465e      	movgt	r6, fp
 8010b2e:	2601      	movle	r6, #1
 8010b30:	443e      	add	r6, r7
 8010b32:	f04f 0800 	mov.w	r8, #0
 8010b36:	9901      	ldr	r1, [sp, #4]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	4648      	mov	r0, r9
 8010b3c:	f000 fe30 	bl	80117a0 <__lshift>
 8010b40:	4621      	mov	r1, r4
 8010b42:	9001      	str	r0, [sp, #4]
 8010b44:	f000 fe98 	bl	8011878 <__mcmp>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	dcb0      	bgt.n	8010aae <_dtoa_r+0x996>
 8010b4c:	d102      	bne.n	8010b54 <_dtoa_r+0xa3c>
 8010b4e:	f01a 0f01 	tst.w	sl, #1
 8010b52:	d1ac      	bne.n	8010aae <_dtoa_r+0x996>
 8010b54:	4633      	mov	r3, r6
 8010b56:	461e      	mov	r6, r3
 8010b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b5c:	2a30      	cmp	r2, #48	@ 0x30
 8010b5e:	d0fa      	beq.n	8010b56 <_dtoa_r+0xa3e>
 8010b60:	e4e1      	b.n	8010526 <_dtoa_r+0x40e>
 8010b62:	429f      	cmp	r7, r3
 8010b64:	d1a4      	bne.n	8010ab0 <_dtoa_r+0x998>
 8010b66:	9b05      	ldr	r3, [sp, #20]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	9305      	str	r3, [sp, #20]
 8010b6c:	2331      	movs	r3, #49	@ 0x31
 8010b6e:	703b      	strb	r3, [r7, #0]
 8010b70:	e4d9      	b.n	8010526 <_dtoa_r+0x40e>
 8010b72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010b74:	4f16      	ldr	r7, [pc, #88]	@ (8010bd0 <_dtoa_r+0xab8>)
 8010b76:	b11b      	cbz	r3, 8010b80 <_dtoa_r+0xa68>
 8010b78:	f107 0308 	add.w	r3, r7, #8
 8010b7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010b7e:	6013      	str	r3, [r2, #0]
 8010b80:	4638      	mov	r0, r7
 8010b82:	b011      	add	sp, #68	@ 0x44
 8010b84:	ecbd 8b02 	vpop	{d8}
 8010b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8c:	9b07      	ldr	r3, [sp, #28]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	f77f ae2c 	ble.w	80107ec <_dtoa_r+0x6d4>
 8010b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b98:	2001      	movs	r0, #1
 8010b9a:	e64c      	b.n	8010836 <_dtoa_r+0x71e>
 8010b9c:	f1bb 0f00 	cmp.w	fp, #0
 8010ba0:	f77f aed8 	ble.w	8010954 <_dtoa_r+0x83c>
 8010ba4:	463e      	mov	r6, r7
 8010ba6:	9801      	ldr	r0, [sp, #4]
 8010ba8:	4621      	mov	r1, r4
 8010baa:	f7ff fa2b 	bl	8010004 <quorem>
 8010bae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bb2:	f806 ab01 	strb.w	sl, [r6], #1
 8010bb6:	1bf2      	subs	r2, r6, r7
 8010bb8:	4593      	cmp	fp, r2
 8010bba:	ddb4      	ble.n	8010b26 <_dtoa_r+0xa0e>
 8010bbc:	9901      	ldr	r1, [sp, #4]
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	220a      	movs	r2, #10
 8010bc2:	4648      	mov	r0, r9
 8010bc4:	f000 fbfe 	bl	80113c4 <__multadd>
 8010bc8:	9001      	str	r0, [sp, #4]
 8010bca:	e7ec      	b.n	8010ba6 <_dtoa_r+0xa8e>
 8010bcc:	080130fd 	.word	0x080130fd
 8010bd0:	08013081 	.word	0x08013081

08010bd4 <_free_r>:
 8010bd4:	b538      	push	{r3, r4, r5, lr}
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	2900      	cmp	r1, #0
 8010bda:	d041      	beq.n	8010c60 <_free_r+0x8c>
 8010bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010be0:	1f0c      	subs	r4, r1, #4
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	bfb8      	it	lt
 8010be6:	18e4      	addlt	r4, r4, r3
 8010be8:	f7fd fab8 	bl	800e15c <__malloc_lock>
 8010bec:	4a1d      	ldr	r2, [pc, #116]	@ (8010c64 <_free_r+0x90>)
 8010bee:	6813      	ldr	r3, [r2, #0]
 8010bf0:	b933      	cbnz	r3, 8010c00 <_free_r+0x2c>
 8010bf2:	6063      	str	r3, [r4, #4]
 8010bf4:	6014      	str	r4, [r2, #0]
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bfc:	f7fd bab4 	b.w	800e168 <__malloc_unlock>
 8010c00:	42a3      	cmp	r3, r4
 8010c02:	d908      	bls.n	8010c16 <_free_r+0x42>
 8010c04:	6820      	ldr	r0, [r4, #0]
 8010c06:	1821      	adds	r1, r4, r0
 8010c08:	428b      	cmp	r3, r1
 8010c0a:	bf01      	itttt	eq
 8010c0c:	6819      	ldreq	r1, [r3, #0]
 8010c0e:	685b      	ldreq	r3, [r3, #4]
 8010c10:	1809      	addeq	r1, r1, r0
 8010c12:	6021      	streq	r1, [r4, #0]
 8010c14:	e7ed      	b.n	8010bf2 <_free_r+0x1e>
 8010c16:	461a      	mov	r2, r3
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	b10b      	cbz	r3, 8010c20 <_free_r+0x4c>
 8010c1c:	42a3      	cmp	r3, r4
 8010c1e:	d9fa      	bls.n	8010c16 <_free_r+0x42>
 8010c20:	6811      	ldr	r1, [r2, #0]
 8010c22:	1850      	adds	r0, r2, r1
 8010c24:	42a0      	cmp	r0, r4
 8010c26:	d10b      	bne.n	8010c40 <_free_r+0x6c>
 8010c28:	6820      	ldr	r0, [r4, #0]
 8010c2a:	4401      	add	r1, r0
 8010c2c:	1850      	adds	r0, r2, r1
 8010c2e:	4283      	cmp	r3, r0
 8010c30:	6011      	str	r1, [r2, #0]
 8010c32:	d1e0      	bne.n	8010bf6 <_free_r+0x22>
 8010c34:	6818      	ldr	r0, [r3, #0]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	6053      	str	r3, [r2, #4]
 8010c3a:	4408      	add	r0, r1
 8010c3c:	6010      	str	r0, [r2, #0]
 8010c3e:	e7da      	b.n	8010bf6 <_free_r+0x22>
 8010c40:	d902      	bls.n	8010c48 <_free_r+0x74>
 8010c42:	230c      	movs	r3, #12
 8010c44:	602b      	str	r3, [r5, #0]
 8010c46:	e7d6      	b.n	8010bf6 <_free_r+0x22>
 8010c48:	6820      	ldr	r0, [r4, #0]
 8010c4a:	1821      	adds	r1, r4, r0
 8010c4c:	428b      	cmp	r3, r1
 8010c4e:	bf04      	itt	eq
 8010c50:	6819      	ldreq	r1, [r3, #0]
 8010c52:	685b      	ldreq	r3, [r3, #4]
 8010c54:	6063      	str	r3, [r4, #4]
 8010c56:	bf04      	itt	eq
 8010c58:	1809      	addeq	r1, r1, r0
 8010c5a:	6021      	streq	r1, [r4, #0]
 8010c5c:	6054      	str	r4, [r2, #4]
 8010c5e:	e7ca      	b.n	8010bf6 <_free_r+0x22>
 8010c60:	bd38      	pop	{r3, r4, r5, pc}
 8010c62:	bf00      	nop
 8010c64:	24004dc4 	.word	0x24004dc4

08010c68 <rshift>:
 8010c68:	6903      	ldr	r3, [r0, #16]
 8010c6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c76:	f100 0414 	add.w	r4, r0, #20
 8010c7a:	dd45      	ble.n	8010d08 <rshift+0xa0>
 8010c7c:	f011 011f 	ands.w	r1, r1, #31
 8010c80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c88:	d10c      	bne.n	8010ca4 <rshift+0x3c>
 8010c8a:	f100 0710 	add.w	r7, r0, #16
 8010c8e:	4629      	mov	r1, r5
 8010c90:	42b1      	cmp	r1, r6
 8010c92:	d334      	bcc.n	8010cfe <rshift+0x96>
 8010c94:	1a9b      	subs	r3, r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	1eea      	subs	r2, r5, #3
 8010c9a:	4296      	cmp	r6, r2
 8010c9c:	bf38      	it	cc
 8010c9e:	2300      	movcc	r3, #0
 8010ca0:	4423      	add	r3, r4
 8010ca2:	e015      	b.n	8010cd0 <rshift+0x68>
 8010ca4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ca8:	f1c1 0820 	rsb	r8, r1, #32
 8010cac:	40cf      	lsrs	r7, r1
 8010cae:	f105 0e04 	add.w	lr, r5, #4
 8010cb2:	46a1      	mov	r9, r4
 8010cb4:	4576      	cmp	r6, lr
 8010cb6:	46f4      	mov	ip, lr
 8010cb8:	d815      	bhi.n	8010ce6 <rshift+0x7e>
 8010cba:	1a9a      	subs	r2, r3, r2
 8010cbc:	0092      	lsls	r2, r2, #2
 8010cbe:	3a04      	subs	r2, #4
 8010cc0:	3501      	adds	r5, #1
 8010cc2:	42ae      	cmp	r6, r5
 8010cc4:	bf38      	it	cc
 8010cc6:	2200      	movcc	r2, #0
 8010cc8:	18a3      	adds	r3, r4, r2
 8010cca:	50a7      	str	r7, [r4, r2]
 8010ccc:	b107      	cbz	r7, 8010cd0 <rshift+0x68>
 8010cce:	3304      	adds	r3, #4
 8010cd0:	1b1a      	subs	r2, r3, r4
 8010cd2:	42a3      	cmp	r3, r4
 8010cd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010cd8:	bf08      	it	eq
 8010cda:	2300      	moveq	r3, #0
 8010cdc:	6102      	str	r2, [r0, #16]
 8010cde:	bf08      	it	eq
 8010ce0:	6143      	streq	r3, [r0, #20]
 8010ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ce6:	f8dc c000 	ldr.w	ip, [ip]
 8010cea:	fa0c fc08 	lsl.w	ip, ip, r8
 8010cee:	ea4c 0707 	orr.w	r7, ip, r7
 8010cf2:	f849 7b04 	str.w	r7, [r9], #4
 8010cf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010cfa:	40cf      	lsrs	r7, r1
 8010cfc:	e7da      	b.n	8010cb4 <rshift+0x4c>
 8010cfe:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d02:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d06:	e7c3      	b.n	8010c90 <rshift+0x28>
 8010d08:	4623      	mov	r3, r4
 8010d0a:	e7e1      	b.n	8010cd0 <rshift+0x68>

08010d0c <__hexdig_fun>:
 8010d0c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010d10:	2b09      	cmp	r3, #9
 8010d12:	d802      	bhi.n	8010d1a <__hexdig_fun+0xe>
 8010d14:	3820      	subs	r0, #32
 8010d16:	b2c0      	uxtb	r0, r0
 8010d18:	4770      	bx	lr
 8010d1a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010d1e:	2b05      	cmp	r3, #5
 8010d20:	d801      	bhi.n	8010d26 <__hexdig_fun+0x1a>
 8010d22:	3847      	subs	r0, #71	@ 0x47
 8010d24:	e7f7      	b.n	8010d16 <__hexdig_fun+0xa>
 8010d26:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010d2a:	2b05      	cmp	r3, #5
 8010d2c:	d801      	bhi.n	8010d32 <__hexdig_fun+0x26>
 8010d2e:	3827      	subs	r0, #39	@ 0x27
 8010d30:	e7f1      	b.n	8010d16 <__hexdig_fun+0xa>
 8010d32:	2000      	movs	r0, #0
 8010d34:	4770      	bx	lr
	...

08010d38 <__gethex>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	b085      	sub	sp, #20
 8010d3e:	468a      	mov	sl, r1
 8010d40:	9302      	str	r3, [sp, #8]
 8010d42:	680b      	ldr	r3, [r1, #0]
 8010d44:	9001      	str	r0, [sp, #4]
 8010d46:	4690      	mov	r8, r2
 8010d48:	1c9c      	adds	r4, r3, #2
 8010d4a:	46a1      	mov	r9, r4
 8010d4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010d50:	2830      	cmp	r0, #48	@ 0x30
 8010d52:	d0fa      	beq.n	8010d4a <__gethex+0x12>
 8010d54:	eba9 0303 	sub.w	r3, r9, r3
 8010d58:	f1a3 0b02 	sub.w	fp, r3, #2
 8010d5c:	f7ff ffd6 	bl	8010d0c <__hexdig_fun>
 8010d60:	4605      	mov	r5, r0
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d168      	bne.n	8010e38 <__gethex+0x100>
 8010d66:	49a0      	ldr	r1, [pc, #640]	@ (8010fe8 <__gethex+0x2b0>)
 8010d68:	2201      	movs	r2, #1
 8010d6a:	4648      	mov	r0, r9
 8010d6c:	f7ff f892 	bl	800fe94 <strncmp>
 8010d70:	4607      	mov	r7, r0
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d167      	bne.n	8010e46 <__gethex+0x10e>
 8010d76:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010d7a:	4626      	mov	r6, r4
 8010d7c:	f7ff ffc6 	bl	8010d0c <__hexdig_fun>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d062      	beq.n	8010e4a <__gethex+0x112>
 8010d84:	4623      	mov	r3, r4
 8010d86:	7818      	ldrb	r0, [r3, #0]
 8010d88:	2830      	cmp	r0, #48	@ 0x30
 8010d8a:	4699      	mov	r9, r3
 8010d8c:	f103 0301 	add.w	r3, r3, #1
 8010d90:	d0f9      	beq.n	8010d86 <__gethex+0x4e>
 8010d92:	f7ff ffbb 	bl	8010d0c <__hexdig_fun>
 8010d96:	fab0 f580 	clz	r5, r0
 8010d9a:	096d      	lsrs	r5, r5, #5
 8010d9c:	f04f 0b01 	mov.w	fp, #1
 8010da0:	464a      	mov	r2, r9
 8010da2:	4616      	mov	r6, r2
 8010da4:	3201      	adds	r2, #1
 8010da6:	7830      	ldrb	r0, [r6, #0]
 8010da8:	f7ff ffb0 	bl	8010d0c <__hexdig_fun>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d1f8      	bne.n	8010da2 <__gethex+0x6a>
 8010db0:	498d      	ldr	r1, [pc, #564]	@ (8010fe8 <__gethex+0x2b0>)
 8010db2:	2201      	movs	r2, #1
 8010db4:	4630      	mov	r0, r6
 8010db6:	f7ff f86d 	bl	800fe94 <strncmp>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d13f      	bne.n	8010e3e <__gethex+0x106>
 8010dbe:	b944      	cbnz	r4, 8010dd2 <__gethex+0x9a>
 8010dc0:	1c74      	adds	r4, r6, #1
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	4616      	mov	r6, r2
 8010dc6:	3201      	adds	r2, #1
 8010dc8:	7830      	ldrb	r0, [r6, #0]
 8010dca:	f7ff ff9f 	bl	8010d0c <__hexdig_fun>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d1f8      	bne.n	8010dc4 <__gethex+0x8c>
 8010dd2:	1ba4      	subs	r4, r4, r6
 8010dd4:	00a7      	lsls	r7, r4, #2
 8010dd6:	7833      	ldrb	r3, [r6, #0]
 8010dd8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010ddc:	2b50      	cmp	r3, #80	@ 0x50
 8010dde:	d13e      	bne.n	8010e5e <__gethex+0x126>
 8010de0:	7873      	ldrb	r3, [r6, #1]
 8010de2:	2b2b      	cmp	r3, #43	@ 0x2b
 8010de4:	d033      	beq.n	8010e4e <__gethex+0x116>
 8010de6:	2b2d      	cmp	r3, #45	@ 0x2d
 8010de8:	d034      	beq.n	8010e54 <__gethex+0x11c>
 8010dea:	1c71      	adds	r1, r6, #1
 8010dec:	2400      	movs	r4, #0
 8010dee:	7808      	ldrb	r0, [r1, #0]
 8010df0:	f7ff ff8c 	bl	8010d0c <__hexdig_fun>
 8010df4:	1e43      	subs	r3, r0, #1
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	2b18      	cmp	r3, #24
 8010dfa:	d830      	bhi.n	8010e5e <__gethex+0x126>
 8010dfc:	f1a0 0210 	sub.w	r2, r0, #16
 8010e00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e04:	f7ff ff82 	bl	8010d0c <__hexdig_fun>
 8010e08:	f100 3cff 	add.w	ip, r0, #4294967295
 8010e0c:	fa5f fc8c 	uxtb.w	ip, ip
 8010e10:	f1bc 0f18 	cmp.w	ip, #24
 8010e14:	f04f 030a 	mov.w	r3, #10
 8010e18:	d91e      	bls.n	8010e58 <__gethex+0x120>
 8010e1a:	b104      	cbz	r4, 8010e1e <__gethex+0xe6>
 8010e1c:	4252      	negs	r2, r2
 8010e1e:	4417      	add	r7, r2
 8010e20:	f8ca 1000 	str.w	r1, [sl]
 8010e24:	b1ed      	cbz	r5, 8010e62 <__gethex+0x12a>
 8010e26:	f1bb 0f00 	cmp.w	fp, #0
 8010e2a:	bf0c      	ite	eq
 8010e2c:	2506      	moveq	r5, #6
 8010e2e:	2500      	movne	r5, #0
 8010e30:	4628      	mov	r0, r5
 8010e32:	b005      	add	sp, #20
 8010e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e38:	2500      	movs	r5, #0
 8010e3a:	462c      	mov	r4, r5
 8010e3c:	e7b0      	b.n	8010da0 <__gethex+0x68>
 8010e3e:	2c00      	cmp	r4, #0
 8010e40:	d1c7      	bne.n	8010dd2 <__gethex+0x9a>
 8010e42:	4627      	mov	r7, r4
 8010e44:	e7c7      	b.n	8010dd6 <__gethex+0x9e>
 8010e46:	464e      	mov	r6, r9
 8010e48:	462f      	mov	r7, r5
 8010e4a:	2501      	movs	r5, #1
 8010e4c:	e7c3      	b.n	8010dd6 <__gethex+0x9e>
 8010e4e:	2400      	movs	r4, #0
 8010e50:	1cb1      	adds	r1, r6, #2
 8010e52:	e7cc      	b.n	8010dee <__gethex+0xb6>
 8010e54:	2401      	movs	r4, #1
 8010e56:	e7fb      	b.n	8010e50 <__gethex+0x118>
 8010e58:	fb03 0002 	mla	r0, r3, r2, r0
 8010e5c:	e7ce      	b.n	8010dfc <__gethex+0xc4>
 8010e5e:	4631      	mov	r1, r6
 8010e60:	e7de      	b.n	8010e20 <__gethex+0xe8>
 8010e62:	eba6 0309 	sub.w	r3, r6, r9
 8010e66:	3b01      	subs	r3, #1
 8010e68:	4629      	mov	r1, r5
 8010e6a:	2b07      	cmp	r3, #7
 8010e6c:	dc0a      	bgt.n	8010e84 <__gethex+0x14c>
 8010e6e:	9801      	ldr	r0, [sp, #4]
 8010e70:	f000 fa46 	bl	8011300 <_Balloc>
 8010e74:	4604      	mov	r4, r0
 8010e76:	b940      	cbnz	r0, 8010e8a <__gethex+0x152>
 8010e78:	4b5c      	ldr	r3, [pc, #368]	@ (8010fec <__gethex+0x2b4>)
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	21e4      	movs	r1, #228	@ 0xe4
 8010e7e:	485c      	ldr	r0, [pc, #368]	@ (8010ff0 <__gethex+0x2b8>)
 8010e80:	f001 feec 	bl	8012c5c <__assert_func>
 8010e84:	3101      	adds	r1, #1
 8010e86:	105b      	asrs	r3, r3, #1
 8010e88:	e7ef      	b.n	8010e6a <__gethex+0x132>
 8010e8a:	f100 0a14 	add.w	sl, r0, #20
 8010e8e:	2300      	movs	r3, #0
 8010e90:	4655      	mov	r5, sl
 8010e92:	469b      	mov	fp, r3
 8010e94:	45b1      	cmp	r9, r6
 8010e96:	d337      	bcc.n	8010f08 <__gethex+0x1d0>
 8010e98:	f845 bb04 	str.w	fp, [r5], #4
 8010e9c:	eba5 050a 	sub.w	r5, r5, sl
 8010ea0:	10ad      	asrs	r5, r5, #2
 8010ea2:	6125      	str	r5, [r4, #16]
 8010ea4:	4658      	mov	r0, fp
 8010ea6:	f000 fb1d 	bl	80114e4 <__hi0bits>
 8010eaa:	016d      	lsls	r5, r5, #5
 8010eac:	f8d8 6000 	ldr.w	r6, [r8]
 8010eb0:	1a2d      	subs	r5, r5, r0
 8010eb2:	42b5      	cmp	r5, r6
 8010eb4:	dd54      	ble.n	8010f60 <__gethex+0x228>
 8010eb6:	1bad      	subs	r5, r5, r6
 8010eb8:	4629      	mov	r1, r5
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f000 fea6 	bl	8011c0c <__any_on>
 8010ec0:	4681      	mov	r9, r0
 8010ec2:	b178      	cbz	r0, 8010ee4 <__gethex+0x1ac>
 8010ec4:	1e6b      	subs	r3, r5, #1
 8010ec6:	1159      	asrs	r1, r3, #5
 8010ec8:	f003 021f 	and.w	r2, r3, #31
 8010ecc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010ed0:	f04f 0901 	mov.w	r9, #1
 8010ed4:	fa09 f202 	lsl.w	r2, r9, r2
 8010ed8:	420a      	tst	r2, r1
 8010eda:	d003      	beq.n	8010ee4 <__gethex+0x1ac>
 8010edc:	454b      	cmp	r3, r9
 8010ede:	dc36      	bgt.n	8010f4e <__gethex+0x216>
 8010ee0:	f04f 0902 	mov.w	r9, #2
 8010ee4:	4629      	mov	r1, r5
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f7ff febe 	bl	8010c68 <rshift>
 8010eec:	442f      	add	r7, r5
 8010eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ef2:	42bb      	cmp	r3, r7
 8010ef4:	da42      	bge.n	8010f7c <__gethex+0x244>
 8010ef6:	9801      	ldr	r0, [sp, #4]
 8010ef8:	4621      	mov	r1, r4
 8010efa:	f000 fa41 	bl	8011380 <_Bfree>
 8010efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f00:	2300      	movs	r3, #0
 8010f02:	6013      	str	r3, [r2, #0]
 8010f04:	25a3      	movs	r5, #163	@ 0xa3
 8010f06:	e793      	b.n	8010e30 <__gethex+0xf8>
 8010f08:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010f0c:	2a2e      	cmp	r2, #46	@ 0x2e
 8010f0e:	d012      	beq.n	8010f36 <__gethex+0x1fe>
 8010f10:	2b20      	cmp	r3, #32
 8010f12:	d104      	bne.n	8010f1e <__gethex+0x1e6>
 8010f14:	f845 bb04 	str.w	fp, [r5], #4
 8010f18:	f04f 0b00 	mov.w	fp, #0
 8010f1c:	465b      	mov	r3, fp
 8010f1e:	7830      	ldrb	r0, [r6, #0]
 8010f20:	9303      	str	r3, [sp, #12]
 8010f22:	f7ff fef3 	bl	8010d0c <__hexdig_fun>
 8010f26:	9b03      	ldr	r3, [sp, #12]
 8010f28:	f000 000f 	and.w	r0, r0, #15
 8010f2c:	4098      	lsls	r0, r3
 8010f2e:	ea4b 0b00 	orr.w	fp, fp, r0
 8010f32:	3304      	adds	r3, #4
 8010f34:	e7ae      	b.n	8010e94 <__gethex+0x15c>
 8010f36:	45b1      	cmp	r9, r6
 8010f38:	d8ea      	bhi.n	8010f10 <__gethex+0x1d8>
 8010f3a:	492b      	ldr	r1, [pc, #172]	@ (8010fe8 <__gethex+0x2b0>)
 8010f3c:	9303      	str	r3, [sp, #12]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	4630      	mov	r0, r6
 8010f42:	f7fe ffa7 	bl	800fe94 <strncmp>
 8010f46:	9b03      	ldr	r3, [sp, #12]
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	d1e1      	bne.n	8010f10 <__gethex+0x1d8>
 8010f4c:	e7a2      	b.n	8010e94 <__gethex+0x15c>
 8010f4e:	1ea9      	subs	r1, r5, #2
 8010f50:	4620      	mov	r0, r4
 8010f52:	f000 fe5b 	bl	8011c0c <__any_on>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d0c2      	beq.n	8010ee0 <__gethex+0x1a8>
 8010f5a:	f04f 0903 	mov.w	r9, #3
 8010f5e:	e7c1      	b.n	8010ee4 <__gethex+0x1ac>
 8010f60:	da09      	bge.n	8010f76 <__gethex+0x23e>
 8010f62:	1b75      	subs	r5, r6, r5
 8010f64:	4621      	mov	r1, r4
 8010f66:	9801      	ldr	r0, [sp, #4]
 8010f68:	462a      	mov	r2, r5
 8010f6a:	f000 fc19 	bl	80117a0 <__lshift>
 8010f6e:	1b7f      	subs	r7, r7, r5
 8010f70:	4604      	mov	r4, r0
 8010f72:	f100 0a14 	add.w	sl, r0, #20
 8010f76:	f04f 0900 	mov.w	r9, #0
 8010f7a:	e7b8      	b.n	8010eee <__gethex+0x1b6>
 8010f7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010f80:	42bd      	cmp	r5, r7
 8010f82:	dd6f      	ble.n	8011064 <__gethex+0x32c>
 8010f84:	1bed      	subs	r5, r5, r7
 8010f86:	42ae      	cmp	r6, r5
 8010f88:	dc34      	bgt.n	8010ff4 <__gethex+0x2bc>
 8010f8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d022      	beq.n	8010fd8 <__gethex+0x2a0>
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d024      	beq.n	8010fe0 <__gethex+0x2a8>
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d115      	bne.n	8010fc6 <__gethex+0x28e>
 8010f9a:	42ae      	cmp	r6, r5
 8010f9c:	d113      	bne.n	8010fc6 <__gethex+0x28e>
 8010f9e:	2e01      	cmp	r6, #1
 8010fa0:	d10b      	bne.n	8010fba <__gethex+0x282>
 8010fa2:	9a02      	ldr	r2, [sp, #8]
 8010fa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fa8:	6013      	str	r3, [r2, #0]
 8010faa:	2301      	movs	r3, #1
 8010fac:	6123      	str	r3, [r4, #16]
 8010fae:	f8ca 3000 	str.w	r3, [sl]
 8010fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fb4:	2562      	movs	r5, #98	@ 0x62
 8010fb6:	601c      	str	r4, [r3, #0]
 8010fb8:	e73a      	b.n	8010e30 <__gethex+0xf8>
 8010fba:	1e71      	subs	r1, r6, #1
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f000 fe25 	bl	8011c0c <__any_on>
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	d1ed      	bne.n	8010fa2 <__gethex+0x26a>
 8010fc6:	9801      	ldr	r0, [sp, #4]
 8010fc8:	4621      	mov	r1, r4
 8010fca:	f000 f9d9 	bl	8011380 <_Bfree>
 8010fce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	2550      	movs	r5, #80	@ 0x50
 8010fd6:	e72b      	b.n	8010e30 <__gethex+0xf8>
 8010fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1f3      	bne.n	8010fc6 <__gethex+0x28e>
 8010fde:	e7e0      	b.n	8010fa2 <__gethex+0x26a>
 8010fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1dd      	bne.n	8010fa2 <__gethex+0x26a>
 8010fe6:	e7ee      	b.n	8010fc6 <__gethex+0x28e>
 8010fe8:	08013040 	.word	0x08013040
 8010fec:	080130fd 	.word	0x080130fd
 8010ff0:	0801310e 	.word	0x0801310e
 8010ff4:	1e6f      	subs	r7, r5, #1
 8010ff6:	f1b9 0f00 	cmp.w	r9, #0
 8010ffa:	d130      	bne.n	801105e <__gethex+0x326>
 8010ffc:	b127      	cbz	r7, 8011008 <__gethex+0x2d0>
 8010ffe:	4639      	mov	r1, r7
 8011000:	4620      	mov	r0, r4
 8011002:	f000 fe03 	bl	8011c0c <__any_on>
 8011006:	4681      	mov	r9, r0
 8011008:	117a      	asrs	r2, r7, #5
 801100a:	2301      	movs	r3, #1
 801100c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011010:	f007 071f 	and.w	r7, r7, #31
 8011014:	40bb      	lsls	r3, r7
 8011016:	4213      	tst	r3, r2
 8011018:	4629      	mov	r1, r5
 801101a:	4620      	mov	r0, r4
 801101c:	bf18      	it	ne
 801101e:	f049 0902 	orrne.w	r9, r9, #2
 8011022:	f7ff fe21 	bl	8010c68 <rshift>
 8011026:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801102a:	1b76      	subs	r6, r6, r5
 801102c:	2502      	movs	r5, #2
 801102e:	f1b9 0f00 	cmp.w	r9, #0
 8011032:	d047      	beq.n	80110c4 <__gethex+0x38c>
 8011034:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011038:	2b02      	cmp	r3, #2
 801103a:	d015      	beq.n	8011068 <__gethex+0x330>
 801103c:	2b03      	cmp	r3, #3
 801103e:	d017      	beq.n	8011070 <__gethex+0x338>
 8011040:	2b01      	cmp	r3, #1
 8011042:	d109      	bne.n	8011058 <__gethex+0x320>
 8011044:	f019 0f02 	tst.w	r9, #2
 8011048:	d006      	beq.n	8011058 <__gethex+0x320>
 801104a:	f8da 3000 	ldr.w	r3, [sl]
 801104e:	ea49 0903 	orr.w	r9, r9, r3
 8011052:	f019 0f01 	tst.w	r9, #1
 8011056:	d10e      	bne.n	8011076 <__gethex+0x33e>
 8011058:	f045 0510 	orr.w	r5, r5, #16
 801105c:	e032      	b.n	80110c4 <__gethex+0x38c>
 801105e:	f04f 0901 	mov.w	r9, #1
 8011062:	e7d1      	b.n	8011008 <__gethex+0x2d0>
 8011064:	2501      	movs	r5, #1
 8011066:	e7e2      	b.n	801102e <__gethex+0x2f6>
 8011068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801106a:	f1c3 0301 	rsb	r3, r3, #1
 801106e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011072:	2b00      	cmp	r3, #0
 8011074:	d0f0      	beq.n	8011058 <__gethex+0x320>
 8011076:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801107a:	f104 0314 	add.w	r3, r4, #20
 801107e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011082:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011086:	f04f 0c00 	mov.w	ip, #0
 801108a:	4618      	mov	r0, r3
 801108c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011090:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011094:	d01b      	beq.n	80110ce <__gethex+0x396>
 8011096:	3201      	adds	r2, #1
 8011098:	6002      	str	r2, [r0, #0]
 801109a:	2d02      	cmp	r5, #2
 801109c:	f104 0314 	add.w	r3, r4, #20
 80110a0:	d13c      	bne.n	801111c <__gethex+0x3e4>
 80110a2:	f8d8 2000 	ldr.w	r2, [r8]
 80110a6:	3a01      	subs	r2, #1
 80110a8:	42b2      	cmp	r2, r6
 80110aa:	d109      	bne.n	80110c0 <__gethex+0x388>
 80110ac:	1171      	asrs	r1, r6, #5
 80110ae:	2201      	movs	r2, #1
 80110b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110b4:	f006 061f 	and.w	r6, r6, #31
 80110b8:	fa02 f606 	lsl.w	r6, r2, r6
 80110bc:	421e      	tst	r6, r3
 80110be:	d13a      	bne.n	8011136 <__gethex+0x3fe>
 80110c0:	f045 0520 	orr.w	r5, r5, #32
 80110c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110c6:	601c      	str	r4, [r3, #0]
 80110c8:	9b02      	ldr	r3, [sp, #8]
 80110ca:	601f      	str	r7, [r3, #0]
 80110cc:	e6b0      	b.n	8010e30 <__gethex+0xf8>
 80110ce:	4299      	cmp	r1, r3
 80110d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80110d4:	d8d9      	bhi.n	801108a <__gethex+0x352>
 80110d6:	68a3      	ldr	r3, [r4, #8]
 80110d8:	459b      	cmp	fp, r3
 80110da:	db17      	blt.n	801110c <__gethex+0x3d4>
 80110dc:	6861      	ldr	r1, [r4, #4]
 80110de:	9801      	ldr	r0, [sp, #4]
 80110e0:	3101      	adds	r1, #1
 80110e2:	f000 f90d 	bl	8011300 <_Balloc>
 80110e6:	4681      	mov	r9, r0
 80110e8:	b918      	cbnz	r0, 80110f2 <__gethex+0x3ba>
 80110ea:	4b1a      	ldr	r3, [pc, #104]	@ (8011154 <__gethex+0x41c>)
 80110ec:	4602      	mov	r2, r0
 80110ee:	2184      	movs	r1, #132	@ 0x84
 80110f0:	e6c5      	b.n	8010e7e <__gethex+0x146>
 80110f2:	6922      	ldr	r2, [r4, #16]
 80110f4:	3202      	adds	r2, #2
 80110f6:	f104 010c 	add.w	r1, r4, #12
 80110fa:	0092      	lsls	r2, r2, #2
 80110fc:	300c      	adds	r0, #12
 80110fe:	f7fe ff62 	bl	800ffc6 <memcpy>
 8011102:	4621      	mov	r1, r4
 8011104:	9801      	ldr	r0, [sp, #4]
 8011106:	f000 f93b 	bl	8011380 <_Bfree>
 801110a:	464c      	mov	r4, r9
 801110c:	6923      	ldr	r3, [r4, #16]
 801110e:	1c5a      	adds	r2, r3, #1
 8011110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011114:	6122      	str	r2, [r4, #16]
 8011116:	2201      	movs	r2, #1
 8011118:	615a      	str	r2, [r3, #20]
 801111a:	e7be      	b.n	801109a <__gethex+0x362>
 801111c:	6922      	ldr	r2, [r4, #16]
 801111e:	455a      	cmp	r2, fp
 8011120:	dd0b      	ble.n	801113a <__gethex+0x402>
 8011122:	2101      	movs	r1, #1
 8011124:	4620      	mov	r0, r4
 8011126:	f7ff fd9f 	bl	8010c68 <rshift>
 801112a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801112e:	3701      	adds	r7, #1
 8011130:	42bb      	cmp	r3, r7
 8011132:	f6ff aee0 	blt.w	8010ef6 <__gethex+0x1be>
 8011136:	2501      	movs	r5, #1
 8011138:	e7c2      	b.n	80110c0 <__gethex+0x388>
 801113a:	f016 061f 	ands.w	r6, r6, #31
 801113e:	d0fa      	beq.n	8011136 <__gethex+0x3fe>
 8011140:	4453      	add	r3, sl
 8011142:	f1c6 0620 	rsb	r6, r6, #32
 8011146:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801114a:	f000 f9cb 	bl	80114e4 <__hi0bits>
 801114e:	42b0      	cmp	r0, r6
 8011150:	dbe7      	blt.n	8011122 <__gethex+0x3ea>
 8011152:	e7f0      	b.n	8011136 <__gethex+0x3fe>
 8011154:	080130fd 	.word	0x080130fd

08011158 <L_shift>:
 8011158:	f1c2 0208 	rsb	r2, r2, #8
 801115c:	0092      	lsls	r2, r2, #2
 801115e:	b570      	push	{r4, r5, r6, lr}
 8011160:	f1c2 0620 	rsb	r6, r2, #32
 8011164:	6843      	ldr	r3, [r0, #4]
 8011166:	6804      	ldr	r4, [r0, #0]
 8011168:	fa03 f506 	lsl.w	r5, r3, r6
 801116c:	432c      	orrs	r4, r5
 801116e:	40d3      	lsrs	r3, r2
 8011170:	6004      	str	r4, [r0, #0]
 8011172:	f840 3f04 	str.w	r3, [r0, #4]!
 8011176:	4288      	cmp	r0, r1
 8011178:	d3f4      	bcc.n	8011164 <L_shift+0xc>
 801117a:	bd70      	pop	{r4, r5, r6, pc}

0801117c <__match>:
 801117c:	b530      	push	{r4, r5, lr}
 801117e:	6803      	ldr	r3, [r0, #0]
 8011180:	3301      	adds	r3, #1
 8011182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011186:	b914      	cbnz	r4, 801118e <__match+0x12>
 8011188:	6003      	str	r3, [r0, #0]
 801118a:	2001      	movs	r0, #1
 801118c:	bd30      	pop	{r4, r5, pc}
 801118e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011192:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011196:	2d19      	cmp	r5, #25
 8011198:	bf98      	it	ls
 801119a:	3220      	addls	r2, #32
 801119c:	42a2      	cmp	r2, r4
 801119e:	d0f0      	beq.n	8011182 <__match+0x6>
 80111a0:	2000      	movs	r0, #0
 80111a2:	e7f3      	b.n	801118c <__match+0x10>

080111a4 <__hexnan>:
 80111a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a8:	680b      	ldr	r3, [r1, #0]
 80111aa:	6801      	ldr	r1, [r0, #0]
 80111ac:	115e      	asrs	r6, r3, #5
 80111ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80111b2:	f013 031f 	ands.w	r3, r3, #31
 80111b6:	b087      	sub	sp, #28
 80111b8:	bf18      	it	ne
 80111ba:	3604      	addne	r6, #4
 80111bc:	2500      	movs	r5, #0
 80111be:	1f37      	subs	r7, r6, #4
 80111c0:	4682      	mov	sl, r0
 80111c2:	4690      	mov	r8, r2
 80111c4:	9301      	str	r3, [sp, #4]
 80111c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80111ca:	46b9      	mov	r9, r7
 80111cc:	463c      	mov	r4, r7
 80111ce:	9502      	str	r5, [sp, #8]
 80111d0:	46ab      	mov	fp, r5
 80111d2:	784a      	ldrb	r2, [r1, #1]
 80111d4:	1c4b      	adds	r3, r1, #1
 80111d6:	9303      	str	r3, [sp, #12]
 80111d8:	b342      	cbz	r2, 801122c <__hexnan+0x88>
 80111da:	4610      	mov	r0, r2
 80111dc:	9105      	str	r1, [sp, #20]
 80111de:	9204      	str	r2, [sp, #16]
 80111e0:	f7ff fd94 	bl	8010d0c <__hexdig_fun>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d151      	bne.n	801128c <__hexnan+0xe8>
 80111e8:	9a04      	ldr	r2, [sp, #16]
 80111ea:	9905      	ldr	r1, [sp, #20]
 80111ec:	2a20      	cmp	r2, #32
 80111ee:	d818      	bhi.n	8011222 <__hexnan+0x7e>
 80111f0:	9b02      	ldr	r3, [sp, #8]
 80111f2:	459b      	cmp	fp, r3
 80111f4:	dd13      	ble.n	801121e <__hexnan+0x7a>
 80111f6:	454c      	cmp	r4, r9
 80111f8:	d206      	bcs.n	8011208 <__hexnan+0x64>
 80111fa:	2d07      	cmp	r5, #7
 80111fc:	dc04      	bgt.n	8011208 <__hexnan+0x64>
 80111fe:	462a      	mov	r2, r5
 8011200:	4649      	mov	r1, r9
 8011202:	4620      	mov	r0, r4
 8011204:	f7ff ffa8 	bl	8011158 <L_shift>
 8011208:	4544      	cmp	r4, r8
 801120a:	d952      	bls.n	80112b2 <__hexnan+0x10e>
 801120c:	2300      	movs	r3, #0
 801120e:	f1a4 0904 	sub.w	r9, r4, #4
 8011212:	f844 3c04 	str.w	r3, [r4, #-4]
 8011216:	f8cd b008 	str.w	fp, [sp, #8]
 801121a:	464c      	mov	r4, r9
 801121c:	461d      	mov	r5, r3
 801121e:	9903      	ldr	r1, [sp, #12]
 8011220:	e7d7      	b.n	80111d2 <__hexnan+0x2e>
 8011222:	2a29      	cmp	r2, #41	@ 0x29
 8011224:	d157      	bne.n	80112d6 <__hexnan+0x132>
 8011226:	3102      	adds	r1, #2
 8011228:	f8ca 1000 	str.w	r1, [sl]
 801122c:	f1bb 0f00 	cmp.w	fp, #0
 8011230:	d051      	beq.n	80112d6 <__hexnan+0x132>
 8011232:	454c      	cmp	r4, r9
 8011234:	d206      	bcs.n	8011244 <__hexnan+0xa0>
 8011236:	2d07      	cmp	r5, #7
 8011238:	dc04      	bgt.n	8011244 <__hexnan+0xa0>
 801123a:	462a      	mov	r2, r5
 801123c:	4649      	mov	r1, r9
 801123e:	4620      	mov	r0, r4
 8011240:	f7ff ff8a 	bl	8011158 <L_shift>
 8011244:	4544      	cmp	r4, r8
 8011246:	d936      	bls.n	80112b6 <__hexnan+0x112>
 8011248:	f1a8 0204 	sub.w	r2, r8, #4
 801124c:	4623      	mov	r3, r4
 801124e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011252:	f842 1f04 	str.w	r1, [r2, #4]!
 8011256:	429f      	cmp	r7, r3
 8011258:	d2f9      	bcs.n	801124e <__hexnan+0xaa>
 801125a:	1b3b      	subs	r3, r7, r4
 801125c:	f023 0303 	bic.w	r3, r3, #3
 8011260:	3304      	adds	r3, #4
 8011262:	3401      	adds	r4, #1
 8011264:	3e03      	subs	r6, #3
 8011266:	42b4      	cmp	r4, r6
 8011268:	bf88      	it	hi
 801126a:	2304      	movhi	r3, #4
 801126c:	4443      	add	r3, r8
 801126e:	2200      	movs	r2, #0
 8011270:	f843 2b04 	str.w	r2, [r3], #4
 8011274:	429f      	cmp	r7, r3
 8011276:	d2fb      	bcs.n	8011270 <__hexnan+0xcc>
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	b91b      	cbnz	r3, 8011284 <__hexnan+0xe0>
 801127c:	4547      	cmp	r7, r8
 801127e:	d128      	bne.n	80112d2 <__hexnan+0x12e>
 8011280:	2301      	movs	r3, #1
 8011282:	603b      	str	r3, [r7, #0]
 8011284:	2005      	movs	r0, #5
 8011286:	b007      	add	sp, #28
 8011288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128c:	3501      	adds	r5, #1
 801128e:	2d08      	cmp	r5, #8
 8011290:	f10b 0b01 	add.w	fp, fp, #1
 8011294:	dd06      	ble.n	80112a4 <__hexnan+0x100>
 8011296:	4544      	cmp	r4, r8
 8011298:	d9c1      	bls.n	801121e <__hexnan+0x7a>
 801129a:	2300      	movs	r3, #0
 801129c:	f844 3c04 	str.w	r3, [r4, #-4]
 80112a0:	2501      	movs	r5, #1
 80112a2:	3c04      	subs	r4, #4
 80112a4:	6822      	ldr	r2, [r4, #0]
 80112a6:	f000 000f 	and.w	r0, r0, #15
 80112aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80112ae:	6020      	str	r0, [r4, #0]
 80112b0:	e7b5      	b.n	801121e <__hexnan+0x7a>
 80112b2:	2508      	movs	r5, #8
 80112b4:	e7b3      	b.n	801121e <__hexnan+0x7a>
 80112b6:	9b01      	ldr	r3, [sp, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d0dd      	beq.n	8011278 <__hexnan+0xd4>
 80112bc:	f1c3 0320 	rsb	r3, r3, #32
 80112c0:	f04f 32ff 	mov.w	r2, #4294967295
 80112c4:	40da      	lsrs	r2, r3
 80112c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80112ca:	4013      	ands	r3, r2
 80112cc:	f846 3c04 	str.w	r3, [r6, #-4]
 80112d0:	e7d2      	b.n	8011278 <__hexnan+0xd4>
 80112d2:	3f04      	subs	r7, #4
 80112d4:	e7d0      	b.n	8011278 <__hexnan+0xd4>
 80112d6:	2004      	movs	r0, #4
 80112d8:	e7d5      	b.n	8011286 <__hexnan+0xe2>

080112da <__ascii_mbtowc>:
 80112da:	b082      	sub	sp, #8
 80112dc:	b901      	cbnz	r1, 80112e0 <__ascii_mbtowc+0x6>
 80112de:	a901      	add	r1, sp, #4
 80112e0:	b142      	cbz	r2, 80112f4 <__ascii_mbtowc+0x1a>
 80112e2:	b14b      	cbz	r3, 80112f8 <__ascii_mbtowc+0x1e>
 80112e4:	7813      	ldrb	r3, [r2, #0]
 80112e6:	600b      	str	r3, [r1, #0]
 80112e8:	7812      	ldrb	r2, [r2, #0]
 80112ea:	1e10      	subs	r0, r2, #0
 80112ec:	bf18      	it	ne
 80112ee:	2001      	movne	r0, #1
 80112f0:	b002      	add	sp, #8
 80112f2:	4770      	bx	lr
 80112f4:	4610      	mov	r0, r2
 80112f6:	e7fb      	b.n	80112f0 <__ascii_mbtowc+0x16>
 80112f8:	f06f 0001 	mvn.w	r0, #1
 80112fc:	e7f8      	b.n	80112f0 <__ascii_mbtowc+0x16>
	...

08011300 <_Balloc>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	69c6      	ldr	r6, [r0, #28]
 8011304:	4604      	mov	r4, r0
 8011306:	460d      	mov	r5, r1
 8011308:	b976      	cbnz	r6, 8011328 <_Balloc+0x28>
 801130a:	2010      	movs	r0, #16
 801130c:	f7fc fe74 	bl	800dff8 <malloc>
 8011310:	4602      	mov	r2, r0
 8011312:	61e0      	str	r0, [r4, #28]
 8011314:	b920      	cbnz	r0, 8011320 <_Balloc+0x20>
 8011316:	4b18      	ldr	r3, [pc, #96]	@ (8011378 <_Balloc+0x78>)
 8011318:	4818      	ldr	r0, [pc, #96]	@ (801137c <_Balloc+0x7c>)
 801131a:	216b      	movs	r1, #107	@ 0x6b
 801131c:	f001 fc9e 	bl	8012c5c <__assert_func>
 8011320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011324:	6006      	str	r6, [r0, #0]
 8011326:	60c6      	str	r6, [r0, #12]
 8011328:	69e6      	ldr	r6, [r4, #28]
 801132a:	68f3      	ldr	r3, [r6, #12]
 801132c:	b183      	cbz	r3, 8011350 <_Balloc+0x50>
 801132e:	69e3      	ldr	r3, [r4, #28]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011336:	b9b8      	cbnz	r0, 8011368 <_Balloc+0x68>
 8011338:	2101      	movs	r1, #1
 801133a:	fa01 f605 	lsl.w	r6, r1, r5
 801133e:	1d72      	adds	r2, r6, #5
 8011340:	0092      	lsls	r2, r2, #2
 8011342:	4620      	mov	r0, r4
 8011344:	f001 fca8 	bl	8012c98 <_calloc_r>
 8011348:	b160      	cbz	r0, 8011364 <_Balloc+0x64>
 801134a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801134e:	e00e      	b.n	801136e <_Balloc+0x6e>
 8011350:	2221      	movs	r2, #33	@ 0x21
 8011352:	2104      	movs	r1, #4
 8011354:	4620      	mov	r0, r4
 8011356:	f001 fc9f 	bl	8012c98 <_calloc_r>
 801135a:	69e3      	ldr	r3, [r4, #28]
 801135c:	60f0      	str	r0, [r6, #12]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1e4      	bne.n	801132e <_Balloc+0x2e>
 8011364:	2000      	movs	r0, #0
 8011366:	bd70      	pop	{r4, r5, r6, pc}
 8011368:	6802      	ldr	r2, [r0, #0]
 801136a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801136e:	2300      	movs	r3, #0
 8011370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011374:	e7f7      	b.n	8011366 <_Balloc+0x66>
 8011376:	bf00      	nop
 8011378:	0801308e 	.word	0x0801308e
 801137c:	0801316e 	.word	0x0801316e

08011380 <_Bfree>:
 8011380:	b570      	push	{r4, r5, r6, lr}
 8011382:	69c6      	ldr	r6, [r0, #28]
 8011384:	4605      	mov	r5, r0
 8011386:	460c      	mov	r4, r1
 8011388:	b976      	cbnz	r6, 80113a8 <_Bfree+0x28>
 801138a:	2010      	movs	r0, #16
 801138c:	f7fc fe34 	bl	800dff8 <malloc>
 8011390:	4602      	mov	r2, r0
 8011392:	61e8      	str	r0, [r5, #28]
 8011394:	b920      	cbnz	r0, 80113a0 <_Bfree+0x20>
 8011396:	4b09      	ldr	r3, [pc, #36]	@ (80113bc <_Bfree+0x3c>)
 8011398:	4809      	ldr	r0, [pc, #36]	@ (80113c0 <_Bfree+0x40>)
 801139a:	218f      	movs	r1, #143	@ 0x8f
 801139c:	f001 fc5e 	bl	8012c5c <__assert_func>
 80113a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113a4:	6006      	str	r6, [r0, #0]
 80113a6:	60c6      	str	r6, [r0, #12]
 80113a8:	b13c      	cbz	r4, 80113ba <_Bfree+0x3a>
 80113aa:	69eb      	ldr	r3, [r5, #28]
 80113ac:	6862      	ldr	r2, [r4, #4]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113b4:	6021      	str	r1, [r4, #0]
 80113b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80113ba:	bd70      	pop	{r4, r5, r6, pc}
 80113bc:	0801308e 	.word	0x0801308e
 80113c0:	0801316e 	.word	0x0801316e

080113c4 <__multadd>:
 80113c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c8:	690d      	ldr	r5, [r1, #16]
 80113ca:	4607      	mov	r7, r0
 80113cc:	460c      	mov	r4, r1
 80113ce:	461e      	mov	r6, r3
 80113d0:	f101 0c14 	add.w	ip, r1, #20
 80113d4:	2000      	movs	r0, #0
 80113d6:	f8dc 3000 	ldr.w	r3, [ip]
 80113da:	b299      	uxth	r1, r3
 80113dc:	fb02 6101 	mla	r1, r2, r1, r6
 80113e0:	0c1e      	lsrs	r6, r3, #16
 80113e2:	0c0b      	lsrs	r3, r1, #16
 80113e4:	fb02 3306 	mla	r3, r2, r6, r3
 80113e8:	b289      	uxth	r1, r1
 80113ea:	3001      	adds	r0, #1
 80113ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113f0:	4285      	cmp	r5, r0
 80113f2:	f84c 1b04 	str.w	r1, [ip], #4
 80113f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113fa:	dcec      	bgt.n	80113d6 <__multadd+0x12>
 80113fc:	b30e      	cbz	r6, 8011442 <__multadd+0x7e>
 80113fe:	68a3      	ldr	r3, [r4, #8]
 8011400:	42ab      	cmp	r3, r5
 8011402:	dc19      	bgt.n	8011438 <__multadd+0x74>
 8011404:	6861      	ldr	r1, [r4, #4]
 8011406:	4638      	mov	r0, r7
 8011408:	3101      	adds	r1, #1
 801140a:	f7ff ff79 	bl	8011300 <_Balloc>
 801140e:	4680      	mov	r8, r0
 8011410:	b928      	cbnz	r0, 801141e <__multadd+0x5a>
 8011412:	4602      	mov	r2, r0
 8011414:	4b0c      	ldr	r3, [pc, #48]	@ (8011448 <__multadd+0x84>)
 8011416:	480d      	ldr	r0, [pc, #52]	@ (801144c <__multadd+0x88>)
 8011418:	21ba      	movs	r1, #186	@ 0xba
 801141a:	f001 fc1f 	bl	8012c5c <__assert_func>
 801141e:	6922      	ldr	r2, [r4, #16]
 8011420:	3202      	adds	r2, #2
 8011422:	f104 010c 	add.w	r1, r4, #12
 8011426:	0092      	lsls	r2, r2, #2
 8011428:	300c      	adds	r0, #12
 801142a:	f7fe fdcc 	bl	800ffc6 <memcpy>
 801142e:	4621      	mov	r1, r4
 8011430:	4638      	mov	r0, r7
 8011432:	f7ff ffa5 	bl	8011380 <_Bfree>
 8011436:	4644      	mov	r4, r8
 8011438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801143c:	3501      	adds	r5, #1
 801143e:	615e      	str	r6, [r3, #20]
 8011440:	6125      	str	r5, [r4, #16]
 8011442:	4620      	mov	r0, r4
 8011444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011448:	080130fd 	.word	0x080130fd
 801144c:	0801316e 	.word	0x0801316e

08011450 <__s2b>:
 8011450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011454:	460c      	mov	r4, r1
 8011456:	4615      	mov	r5, r2
 8011458:	461f      	mov	r7, r3
 801145a:	2209      	movs	r2, #9
 801145c:	3308      	adds	r3, #8
 801145e:	4606      	mov	r6, r0
 8011460:	fb93 f3f2 	sdiv	r3, r3, r2
 8011464:	2100      	movs	r1, #0
 8011466:	2201      	movs	r2, #1
 8011468:	429a      	cmp	r2, r3
 801146a:	db09      	blt.n	8011480 <__s2b+0x30>
 801146c:	4630      	mov	r0, r6
 801146e:	f7ff ff47 	bl	8011300 <_Balloc>
 8011472:	b940      	cbnz	r0, 8011486 <__s2b+0x36>
 8011474:	4602      	mov	r2, r0
 8011476:	4b19      	ldr	r3, [pc, #100]	@ (80114dc <__s2b+0x8c>)
 8011478:	4819      	ldr	r0, [pc, #100]	@ (80114e0 <__s2b+0x90>)
 801147a:	21d3      	movs	r1, #211	@ 0xd3
 801147c:	f001 fbee 	bl	8012c5c <__assert_func>
 8011480:	0052      	lsls	r2, r2, #1
 8011482:	3101      	adds	r1, #1
 8011484:	e7f0      	b.n	8011468 <__s2b+0x18>
 8011486:	9b08      	ldr	r3, [sp, #32]
 8011488:	6143      	str	r3, [r0, #20]
 801148a:	2d09      	cmp	r5, #9
 801148c:	f04f 0301 	mov.w	r3, #1
 8011490:	6103      	str	r3, [r0, #16]
 8011492:	dd16      	ble.n	80114c2 <__s2b+0x72>
 8011494:	f104 0909 	add.w	r9, r4, #9
 8011498:	46c8      	mov	r8, r9
 801149a:	442c      	add	r4, r5
 801149c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80114a0:	4601      	mov	r1, r0
 80114a2:	3b30      	subs	r3, #48	@ 0x30
 80114a4:	220a      	movs	r2, #10
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7ff ff8c 	bl	80113c4 <__multadd>
 80114ac:	45a0      	cmp	r8, r4
 80114ae:	d1f5      	bne.n	801149c <__s2b+0x4c>
 80114b0:	f1a5 0408 	sub.w	r4, r5, #8
 80114b4:	444c      	add	r4, r9
 80114b6:	1b2d      	subs	r5, r5, r4
 80114b8:	1963      	adds	r3, r4, r5
 80114ba:	42bb      	cmp	r3, r7
 80114bc:	db04      	blt.n	80114c8 <__s2b+0x78>
 80114be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114c2:	340a      	adds	r4, #10
 80114c4:	2509      	movs	r5, #9
 80114c6:	e7f6      	b.n	80114b6 <__s2b+0x66>
 80114c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80114cc:	4601      	mov	r1, r0
 80114ce:	3b30      	subs	r3, #48	@ 0x30
 80114d0:	220a      	movs	r2, #10
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7ff ff76 	bl	80113c4 <__multadd>
 80114d8:	e7ee      	b.n	80114b8 <__s2b+0x68>
 80114da:	bf00      	nop
 80114dc:	080130fd 	.word	0x080130fd
 80114e0:	0801316e 	.word	0x0801316e

080114e4 <__hi0bits>:
 80114e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80114e8:	4603      	mov	r3, r0
 80114ea:	bf36      	itet	cc
 80114ec:	0403      	lslcc	r3, r0, #16
 80114ee:	2000      	movcs	r0, #0
 80114f0:	2010      	movcc	r0, #16
 80114f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80114f6:	bf3c      	itt	cc
 80114f8:	021b      	lslcc	r3, r3, #8
 80114fa:	3008      	addcc	r0, #8
 80114fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011500:	bf3c      	itt	cc
 8011502:	011b      	lslcc	r3, r3, #4
 8011504:	3004      	addcc	r0, #4
 8011506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801150a:	bf3c      	itt	cc
 801150c:	009b      	lslcc	r3, r3, #2
 801150e:	3002      	addcc	r0, #2
 8011510:	2b00      	cmp	r3, #0
 8011512:	db05      	blt.n	8011520 <__hi0bits+0x3c>
 8011514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011518:	f100 0001 	add.w	r0, r0, #1
 801151c:	bf08      	it	eq
 801151e:	2020      	moveq	r0, #32
 8011520:	4770      	bx	lr

08011522 <__lo0bits>:
 8011522:	6803      	ldr	r3, [r0, #0]
 8011524:	4602      	mov	r2, r0
 8011526:	f013 0007 	ands.w	r0, r3, #7
 801152a:	d00b      	beq.n	8011544 <__lo0bits+0x22>
 801152c:	07d9      	lsls	r1, r3, #31
 801152e:	d421      	bmi.n	8011574 <__lo0bits+0x52>
 8011530:	0798      	lsls	r0, r3, #30
 8011532:	bf49      	itett	mi
 8011534:	085b      	lsrmi	r3, r3, #1
 8011536:	089b      	lsrpl	r3, r3, #2
 8011538:	2001      	movmi	r0, #1
 801153a:	6013      	strmi	r3, [r2, #0]
 801153c:	bf5c      	itt	pl
 801153e:	6013      	strpl	r3, [r2, #0]
 8011540:	2002      	movpl	r0, #2
 8011542:	4770      	bx	lr
 8011544:	b299      	uxth	r1, r3
 8011546:	b909      	cbnz	r1, 801154c <__lo0bits+0x2a>
 8011548:	0c1b      	lsrs	r3, r3, #16
 801154a:	2010      	movs	r0, #16
 801154c:	b2d9      	uxtb	r1, r3
 801154e:	b909      	cbnz	r1, 8011554 <__lo0bits+0x32>
 8011550:	3008      	adds	r0, #8
 8011552:	0a1b      	lsrs	r3, r3, #8
 8011554:	0719      	lsls	r1, r3, #28
 8011556:	bf04      	itt	eq
 8011558:	091b      	lsreq	r3, r3, #4
 801155a:	3004      	addeq	r0, #4
 801155c:	0799      	lsls	r1, r3, #30
 801155e:	bf04      	itt	eq
 8011560:	089b      	lsreq	r3, r3, #2
 8011562:	3002      	addeq	r0, #2
 8011564:	07d9      	lsls	r1, r3, #31
 8011566:	d403      	bmi.n	8011570 <__lo0bits+0x4e>
 8011568:	085b      	lsrs	r3, r3, #1
 801156a:	f100 0001 	add.w	r0, r0, #1
 801156e:	d003      	beq.n	8011578 <__lo0bits+0x56>
 8011570:	6013      	str	r3, [r2, #0]
 8011572:	4770      	bx	lr
 8011574:	2000      	movs	r0, #0
 8011576:	4770      	bx	lr
 8011578:	2020      	movs	r0, #32
 801157a:	4770      	bx	lr

0801157c <__i2b>:
 801157c:	b510      	push	{r4, lr}
 801157e:	460c      	mov	r4, r1
 8011580:	2101      	movs	r1, #1
 8011582:	f7ff febd 	bl	8011300 <_Balloc>
 8011586:	4602      	mov	r2, r0
 8011588:	b928      	cbnz	r0, 8011596 <__i2b+0x1a>
 801158a:	4b05      	ldr	r3, [pc, #20]	@ (80115a0 <__i2b+0x24>)
 801158c:	4805      	ldr	r0, [pc, #20]	@ (80115a4 <__i2b+0x28>)
 801158e:	f240 1145 	movw	r1, #325	@ 0x145
 8011592:	f001 fb63 	bl	8012c5c <__assert_func>
 8011596:	2301      	movs	r3, #1
 8011598:	6144      	str	r4, [r0, #20]
 801159a:	6103      	str	r3, [r0, #16]
 801159c:	bd10      	pop	{r4, pc}
 801159e:	bf00      	nop
 80115a0:	080130fd 	.word	0x080130fd
 80115a4:	0801316e 	.word	0x0801316e

080115a8 <__multiply>:
 80115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	4617      	mov	r7, r2
 80115ae:	690a      	ldr	r2, [r1, #16]
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	bfa8      	it	ge
 80115b6:	463b      	movge	r3, r7
 80115b8:	4689      	mov	r9, r1
 80115ba:	bfa4      	itt	ge
 80115bc:	460f      	movge	r7, r1
 80115be:	4699      	movge	r9, r3
 80115c0:	693d      	ldr	r5, [r7, #16]
 80115c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	6879      	ldr	r1, [r7, #4]
 80115ca:	eb05 060a 	add.w	r6, r5, sl
 80115ce:	42b3      	cmp	r3, r6
 80115d0:	b085      	sub	sp, #20
 80115d2:	bfb8      	it	lt
 80115d4:	3101      	addlt	r1, #1
 80115d6:	f7ff fe93 	bl	8011300 <_Balloc>
 80115da:	b930      	cbnz	r0, 80115ea <__multiply+0x42>
 80115dc:	4602      	mov	r2, r0
 80115de:	4b41      	ldr	r3, [pc, #260]	@ (80116e4 <__multiply+0x13c>)
 80115e0:	4841      	ldr	r0, [pc, #260]	@ (80116e8 <__multiply+0x140>)
 80115e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80115e6:	f001 fb39 	bl	8012c5c <__assert_func>
 80115ea:	f100 0414 	add.w	r4, r0, #20
 80115ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80115f2:	4623      	mov	r3, r4
 80115f4:	2200      	movs	r2, #0
 80115f6:	4573      	cmp	r3, lr
 80115f8:	d320      	bcc.n	801163c <__multiply+0x94>
 80115fa:	f107 0814 	add.w	r8, r7, #20
 80115fe:	f109 0114 	add.w	r1, r9, #20
 8011602:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011606:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801160a:	9302      	str	r3, [sp, #8]
 801160c:	1beb      	subs	r3, r5, r7
 801160e:	3b15      	subs	r3, #21
 8011610:	f023 0303 	bic.w	r3, r3, #3
 8011614:	3304      	adds	r3, #4
 8011616:	3715      	adds	r7, #21
 8011618:	42bd      	cmp	r5, r7
 801161a:	bf38      	it	cc
 801161c:	2304      	movcc	r3, #4
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	9b02      	ldr	r3, [sp, #8]
 8011622:	9103      	str	r1, [sp, #12]
 8011624:	428b      	cmp	r3, r1
 8011626:	d80c      	bhi.n	8011642 <__multiply+0x9a>
 8011628:	2e00      	cmp	r6, #0
 801162a:	dd03      	ble.n	8011634 <__multiply+0x8c>
 801162c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011630:	2b00      	cmp	r3, #0
 8011632:	d055      	beq.n	80116e0 <__multiply+0x138>
 8011634:	6106      	str	r6, [r0, #16]
 8011636:	b005      	add	sp, #20
 8011638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163c:	f843 2b04 	str.w	r2, [r3], #4
 8011640:	e7d9      	b.n	80115f6 <__multiply+0x4e>
 8011642:	f8b1 a000 	ldrh.w	sl, [r1]
 8011646:	f1ba 0f00 	cmp.w	sl, #0
 801164a:	d01f      	beq.n	801168c <__multiply+0xe4>
 801164c:	46c4      	mov	ip, r8
 801164e:	46a1      	mov	r9, r4
 8011650:	2700      	movs	r7, #0
 8011652:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011656:	f8d9 3000 	ldr.w	r3, [r9]
 801165a:	fa1f fb82 	uxth.w	fp, r2
 801165e:	b29b      	uxth	r3, r3
 8011660:	fb0a 330b 	mla	r3, sl, fp, r3
 8011664:	443b      	add	r3, r7
 8011666:	f8d9 7000 	ldr.w	r7, [r9]
 801166a:	0c12      	lsrs	r2, r2, #16
 801166c:	0c3f      	lsrs	r7, r7, #16
 801166e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011672:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011676:	b29b      	uxth	r3, r3
 8011678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801167c:	4565      	cmp	r5, ip
 801167e:	f849 3b04 	str.w	r3, [r9], #4
 8011682:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011686:	d8e4      	bhi.n	8011652 <__multiply+0xaa>
 8011688:	9b01      	ldr	r3, [sp, #4]
 801168a:	50e7      	str	r7, [r4, r3]
 801168c:	9b03      	ldr	r3, [sp, #12]
 801168e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011692:	3104      	adds	r1, #4
 8011694:	f1b9 0f00 	cmp.w	r9, #0
 8011698:	d020      	beq.n	80116dc <__multiply+0x134>
 801169a:	6823      	ldr	r3, [r4, #0]
 801169c:	4647      	mov	r7, r8
 801169e:	46a4      	mov	ip, r4
 80116a0:	f04f 0a00 	mov.w	sl, #0
 80116a4:	f8b7 b000 	ldrh.w	fp, [r7]
 80116a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80116ac:	fb09 220b 	mla	r2, r9, fp, r2
 80116b0:	4452      	add	r2, sl
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116b8:	f84c 3b04 	str.w	r3, [ip], #4
 80116bc:	f857 3b04 	ldr.w	r3, [r7], #4
 80116c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116c4:	f8bc 3000 	ldrh.w	r3, [ip]
 80116c8:	fb09 330a 	mla	r3, r9, sl, r3
 80116cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80116d0:	42bd      	cmp	r5, r7
 80116d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116d6:	d8e5      	bhi.n	80116a4 <__multiply+0xfc>
 80116d8:	9a01      	ldr	r2, [sp, #4]
 80116da:	50a3      	str	r3, [r4, r2]
 80116dc:	3404      	adds	r4, #4
 80116de:	e79f      	b.n	8011620 <__multiply+0x78>
 80116e0:	3e01      	subs	r6, #1
 80116e2:	e7a1      	b.n	8011628 <__multiply+0x80>
 80116e4:	080130fd 	.word	0x080130fd
 80116e8:	0801316e 	.word	0x0801316e

080116ec <__pow5mult>:
 80116ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f0:	4615      	mov	r5, r2
 80116f2:	f012 0203 	ands.w	r2, r2, #3
 80116f6:	4607      	mov	r7, r0
 80116f8:	460e      	mov	r6, r1
 80116fa:	d007      	beq.n	801170c <__pow5mult+0x20>
 80116fc:	4c25      	ldr	r4, [pc, #148]	@ (8011794 <__pow5mult+0xa8>)
 80116fe:	3a01      	subs	r2, #1
 8011700:	2300      	movs	r3, #0
 8011702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011706:	f7ff fe5d 	bl	80113c4 <__multadd>
 801170a:	4606      	mov	r6, r0
 801170c:	10ad      	asrs	r5, r5, #2
 801170e:	d03d      	beq.n	801178c <__pow5mult+0xa0>
 8011710:	69fc      	ldr	r4, [r7, #28]
 8011712:	b97c      	cbnz	r4, 8011734 <__pow5mult+0x48>
 8011714:	2010      	movs	r0, #16
 8011716:	f7fc fc6f 	bl	800dff8 <malloc>
 801171a:	4602      	mov	r2, r0
 801171c:	61f8      	str	r0, [r7, #28]
 801171e:	b928      	cbnz	r0, 801172c <__pow5mult+0x40>
 8011720:	4b1d      	ldr	r3, [pc, #116]	@ (8011798 <__pow5mult+0xac>)
 8011722:	481e      	ldr	r0, [pc, #120]	@ (801179c <__pow5mult+0xb0>)
 8011724:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011728:	f001 fa98 	bl	8012c5c <__assert_func>
 801172c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011730:	6004      	str	r4, [r0, #0]
 8011732:	60c4      	str	r4, [r0, #12]
 8011734:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801173c:	b94c      	cbnz	r4, 8011752 <__pow5mult+0x66>
 801173e:	f240 2171 	movw	r1, #625	@ 0x271
 8011742:	4638      	mov	r0, r7
 8011744:	f7ff ff1a 	bl	801157c <__i2b>
 8011748:	2300      	movs	r3, #0
 801174a:	f8c8 0008 	str.w	r0, [r8, #8]
 801174e:	4604      	mov	r4, r0
 8011750:	6003      	str	r3, [r0, #0]
 8011752:	f04f 0900 	mov.w	r9, #0
 8011756:	07eb      	lsls	r3, r5, #31
 8011758:	d50a      	bpl.n	8011770 <__pow5mult+0x84>
 801175a:	4631      	mov	r1, r6
 801175c:	4622      	mov	r2, r4
 801175e:	4638      	mov	r0, r7
 8011760:	f7ff ff22 	bl	80115a8 <__multiply>
 8011764:	4631      	mov	r1, r6
 8011766:	4680      	mov	r8, r0
 8011768:	4638      	mov	r0, r7
 801176a:	f7ff fe09 	bl	8011380 <_Bfree>
 801176e:	4646      	mov	r6, r8
 8011770:	106d      	asrs	r5, r5, #1
 8011772:	d00b      	beq.n	801178c <__pow5mult+0xa0>
 8011774:	6820      	ldr	r0, [r4, #0]
 8011776:	b938      	cbnz	r0, 8011788 <__pow5mult+0x9c>
 8011778:	4622      	mov	r2, r4
 801177a:	4621      	mov	r1, r4
 801177c:	4638      	mov	r0, r7
 801177e:	f7ff ff13 	bl	80115a8 <__multiply>
 8011782:	6020      	str	r0, [r4, #0]
 8011784:	f8c0 9000 	str.w	r9, [r0]
 8011788:	4604      	mov	r4, r0
 801178a:	e7e4      	b.n	8011756 <__pow5mult+0x6a>
 801178c:	4630      	mov	r0, r6
 801178e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011792:	bf00      	nop
 8011794:	08013384 	.word	0x08013384
 8011798:	0801308e 	.word	0x0801308e
 801179c:	0801316e 	.word	0x0801316e

080117a0 <__lshift>:
 80117a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a4:	460c      	mov	r4, r1
 80117a6:	6849      	ldr	r1, [r1, #4]
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117ae:	68a3      	ldr	r3, [r4, #8]
 80117b0:	4607      	mov	r7, r0
 80117b2:	4691      	mov	r9, r2
 80117b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117b8:	f108 0601 	add.w	r6, r8, #1
 80117bc:	42b3      	cmp	r3, r6
 80117be:	db0b      	blt.n	80117d8 <__lshift+0x38>
 80117c0:	4638      	mov	r0, r7
 80117c2:	f7ff fd9d 	bl	8011300 <_Balloc>
 80117c6:	4605      	mov	r5, r0
 80117c8:	b948      	cbnz	r0, 80117de <__lshift+0x3e>
 80117ca:	4602      	mov	r2, r0
 80117cc:	4b28      	ldr	r3, [pc, #160]	@ (8011870 <__lshift+0xd0>)
 80117ce:	4829      	ldr	r0, [pc, #164]	@ (8011874 <__lshift+0xd4>)
 80117d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80117d4:	f001 fa42 	bl	8012c5c <__assert_func>
 80117d8:	3101      	adds	r1, #1
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	e7ee      	b.n	80117bc <__lshift+0x1c>
 80117de:	2300      	movs	r3, #0
 80117e0:	f100 0114 	add.w	r1, r0, #20
 80117e4:	f100 0210 	add.w	r2, r0, #16
 80117e8:	4618      	mov	r0, r3
 80117ea:	4553      	cmp	r3, sl
 80117ec:	db33      	blt.n	8011856 <__lshift+0xb6>
 80117ee:	6920      	ldr	r0, [r4, #16]
 80117f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117f4:	f104 0314 	add.w	r3, r4, #20
 80117f8:	f019 091f 	ands.w	r9, r9, #31
 80117fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011804:	d02b      	beq.n	801185e <__lshift+0xbe>
 8011806:	f1c9 0e20 	rsb	lr, r9, #32
 801180a:	468a      	mov	sl, r1
 801180c:	2200      	movs	r2, #0
 801180e:	6818      	ldr	r0, [r3, #0]
 8011810:	fa00 f009 	lsl.w	r0, r0, r9
 8011814:	4310      	orrs	r0, r2
 8011816:	f84a 0b04 	str.w	r0, [sl], #4
 801181a:	f853 2b04 	ldr.w	r2, [r3], #4
 801181e:	459c      	cmp	ip, r3
 8011820:	fa22 f20e 	lsr.w	r2, r2, lr
 8011824:	d8f3      	bhi.n	801180e <__lshift+0x6e>
 8011826:	ebac 0304 	sub.w	r3, ip, r4
 801182a:	3b15      	subs	r3, #21
 801182c:	f023 0303 	bic.w	r3, r3, #3
 8011830:	3304      	adds	r3, #4
 8011832:	f104 0015 	add.w	r0, r4, #21
 8011836:	4560      	cmp	r0, ip
 8011838:	bf88      	it	hi
 801183a:	2304      	movhi	r3, #4
 801183c:	50ca      	str	r2, [r1, r3]
 801183e:	b10a      	cbz	r2, 8011844 <__lshift+0xa4>
 8011840:	f108 0602 	add.w	r6, r8, #2
 8011844:	3e01      	subs	r6, #1
 8011846:	4638      	mov	r0, r7
 8011848:	612e      	str	r6, [r5, #16]
 801184a:	4621      	mov	r1, r4
 801184c:	f7ff fd98 	bl	8011380 <_Bfree>
 8011850:	4628      	mov	r0, r5
 8011852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011856:	f842 0f04 	str.w	r0, [r2, #4]!
 801185a:	3301      	adds	r3, #1
 801185c:	e7c5      	b.n	80117ea <__lshift+0x4a>
 801185e:	3904      	subs	r1, #4
 8011860:	f853 2b04 	ldr.w	r2, [r3], #4
 8011864:	f841 2f04 	str.w	r2, [r1, #4]!
 8011868:	459c      	cmp	ip, r3
 801186a:	d8f9      	bhi.n	8011860 <__lshift+0xc0>
 801186c:	e7ea      	b.n	8011844 <__lshift+0xa4>
 801186e:	bf00      	nop
 8011870:	080130fd 	.word	0x080130fd
 8011874:	0801316e 	.word	0x0801316e

08011878 <__mcmp>:
 8011878:	690a      	ldr	r2, [r1, #16]
 801187a:	4603      	mov	r3, r0
 801187c:	6900      	ldr	r0, [r0, #16]
 801187e:	1a80      	subs	r0, r0, r2
 8011880:	b530      	push	{r4, r5, lr}
 8011882:	d10e      	bne.n	80118a2 <__mcmp+0x2a>
 8011884:	3314      	adds	r3, #20
 8011886:	3114      	adds	r1, #20
 8011888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801188c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011898:	4295      	cmp	r5, r2
 801189a:	d003      	beq.n	80118a4 <__mcmp+0x2c>
 801189c:	d205      	bcs.n	80118aa <__mcmp+0x32>
 801189e:	f04f 30ff 	mov.w	r0, #4294967295
 80118a2:	bd30      	pop	{r4, r5, pc}
 80118a4:	42a3      	cmp	r3, r4
 80118a6:	d3f3      	bcc.n	8011890 <__mcmp+0x18>
 80118a8:	e7fb      	b.n	80118a2 <__mcmp+0x2a>
 80118aa:	2001      	movs	r0, #1
 80118ac:	e7f9      	b.n	80118a2 <__mcmp+0x2a>
	...

080118b0 <__mdiff>:
 80118b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	4689      	mov	r9, r1
 80118b6:	4606      	mov	r6, r0
 80118b8:	4611      	mov	r1, r2
 80118ba:	4648      	mov	r0, r9
 80118bc:	4614      	mov	r4, r2
 80118be:	f7ff ffdb 	bl	8011878 <__mcmp>
 80118c2:	1e05      	subs	r5, r0, #0
 80118c4:	d112      	bne.n	80118ec <__mdiff+0x3c>
 80118c6:	4629      	mov	r1, r5
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ff fd19 	bl	8011300 <_Balloc>
 80118ce:	4602      	mov	r2, r0
 80118d0:	b928      	cbnz	r0, 80118de <__mdiff+0x2e>
 80118d2:	4b3f      	ldr	r3, [pc, #252]	@ (80119d0 <__mdiff+0x120>)
 80118d4:	f240 2137 	movw	r1, #567	@ 0x237
 80118d8:	483e      	ldr	r0, [pc, #248]	@ (80119d4 <__mdiff+0x124>)
 80118da:	f001 f9bf 	bl	8012c5c <__assert_func>
 80118de:	2301      	movs	r3, #1
 80118e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118e4:	4610      	mov	r0, r2
 80118e6:	b003      	add	sp, #12
 80118e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ec:	bfbc      	itt	lt
 80118ee:	464b      	movlt	r3, r9
 80118f0:	46a1      	movlt	r9, r4
 80118f2:	4630      	mov	r0, r6
 80118f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80118f8:	bfba      	itte	lt
 80118fa:	461c      	movlt	r4, r3
 80118fc:	2501      	movlt	r5, #1
 80118fe:	2500      	movge	r5, #0
 8011900:	f7ff fcfe 	bl	8011300 <_Balloc>
 8011904:	4602      	mov	r2, r0
 8011906:	b918      	cbnz	r0, 8011910 <__mdiff+0x60>
 8011908:	4b31      	ldr	r3, [pc, #196]	@ (80119d0 <__mdiff+0x120>)
 801190a:	f240 2145 	movw	r1, #581	@ 0x245
 801190e:	e7e3      	b.n	80118d8 <__mdiff+0x28>
 8011910:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011914:	6926      	ldr	r6, [r4, #16]
 8011916:	60c5      	str	r5, [r0, #12]
 8011918:	f109 0310 	add.w	r3, r9, #16
 801191c:	f109 0514 	add.w	r5, r9, #20
 8011920:	f104 0e14 	add.w	lr, r4, #20
 8011924:	f100 0b14 	add.w	fp, r0, #20
 8011928:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801192c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	46d9      	mov	r9, fp
 8011934:	f04f 0c00 	mov.w	ip, #0
 8011938:	9b01      	ldr	r3, [sp, #4]
 801193a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801193e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011942:	9301      	str	r3, [sp, #4]
 8011944:	fa1f f38a 	uxth.w	r3, sl
 8011948:	4619      	mov	r1, r3
 801194a:	b283      	uxth	r3, r0
 801194c:	1acb      	subs	r3, r1, r3
 801194e:	0c00      	lsrs	r0, r0, #16
 8011950:	4463      	add	r3, ip
 8011952:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011956:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801195a:	b29b      	uxth	r3, r3
 801195c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011960:	4576      	cmp	r6, lr
 8011962:	f849 3b04 	str.w	r3, [r9], #4
 8011966:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801196a:	d8e5      	bhi.n	8011938 <__mdiff+0x88>
 801196c:	1b33      	subs	r3, r6, r4
 801196e:	3b15      	subs	r3, #21
 8011970:	f023 0303 	bic.w	r3, r3, #3
 8011974:	3415      	adds	r4, #21
 8011976:	3304      	adds	r3, #4
 8011978:	42a6      	cmp	r6, r4
 801197a:	bf38      	it	cc
 801197c:	2304      	movcc	r3, #4
 801197e:	441d      	add	r5, r3
 8011980:	445b      	add	r3, fp
 8011982:	461e      	mov	r6, r3
 8011984:	462c      	mov	r4, r5
 8011986:	4544      	cmp	r4, r8
 8011988:	d30e      	bcc.n	80119a8 <__mdiff+0xf8>
 801198a:	f108 0103 	add.w	r1, r8, #3
 801198e:	1b49      	subs	r1, r1, r5
 8011990:	f021 0103 	bic.w	r1, r1, #3
 8011994:	3d03      	subs	r5, #3
 8011996:	45a8      	cmp	r8, r5
 8011998:	bf38      	it	cc
 801199a:	2100      	movcc	r1, #0
 801199c:	440b      	add	r3, r1
 801199e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119a2:	b191      	cbz	r1, 80119ca <__mdiff+0x11a>
 80119a4:	6117      	str	r7, [r2, #16]
 80119a6:	e79d      	b.n	80118e4 <__mdiff+0x34>
 80119a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80119ac:	46e6      	mov	lr, ip
 80119ae:	0c08      	lsrs	r0, r1, #16
 80119b0:	fa1c fc81 	uxtah	ip, ip, r1
 80119b4:	4471      	add	r1, lr
 80119b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80119ba:	b289      	uxth	r1, r1
 80119bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80119c0:	f846 1b04 	str.w	r1, [r6], #4
 80119c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119c8:	e7dd      	b.n	8011986 <__mdiff+0xd6>
 80119ca:	3f01      	subs	r7, #1
 80119cc:	e7e7      	b.n	801199e <__mdiff+0xee>
 80119ce:	bf00      	nop
 80119d0:	080130fd 	.word	0x080130fd
 80119d4:	0801316e 	.word	0x0801316e

080119d8 <__ulp>:
 80119d8:	b082      	sub	sp, #8
 80119da:	ed8d 0b00 	vstr	d0, [sp]
 80119de:	9a01      	ldr	r2, [sp, #4]
 80119e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011a20 <__ulp+0x48>)
 80119e2:	4013      	ands	r3, r2
 80119e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	dc08      	bgt.n	80119fe <__ulp+0x26>
 80119ec:	425b      	negs	r3, r3
 80119ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80119f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80119f6:	da04      	bge.n	8011a02 <__ulp+0x2a>
 80119f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80119fc:	4113      	asrs	r3, r2
 80119fe:	2200      	movs	r2, #0
 8011a00:	e008      	b.n	8011a14 <__ulp+0x3c>
 8011a02:	f1a2 0314 	sub.w	r3, r2, #20
 8011a06:	2b1e      	cmp	r3, #30
 8011a08:	bfda      	itte	le
 8011a0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011a0e:	40da      	lsrle	r2, r3
 8011a10:	2201      	movgt	r2, #1
 8011a12:	2300      	movs	r3, #0
 8011a14:	4619      	mov	r1, r3
 8011a16:	4610      	mov	r0, r2
 8011a18:	ec41 0b10 	vmov	d0, r0, r1
 8011a1c:	b002      	add	sp, #8
 8011a1e:	4770      	bx	lr
 8011a20:	7ff00000 	.word	0x7ff00000

08011a24 <__b2d>:
 8011a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a28:	6906      	ldr	r6, [r0, #16]
 8011a2a:	f100 0814 	add.w	r8, r0, #20
 8011a2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011a32:	1f37      	subs	r7, r6, #4
 8011a34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011a38:	4610      	mov	r0, r2
 8011a3a:	f7ff fd53 	bl	80114e4 <__hi0bits>
 8011a3e:	f1c0 0320 	rsb	r3, r0, #32
 8011a42:	280a      	cmp	r0, #10
 8011a44:	600b      	str	r3, [r1, #0]
 8011a46:	491b      	ldr	r1, [pc, #108]	@ (8011ab4 <__b2d+0x90>)
 8011a48:	dc15      	bgt.n	8011a76 <__b2d+0x52>
 8011a4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011a4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011a52:	45b8      	cmp	r8, r7
 8011a54:	ea43 0501 	orr.w	r5, r3, r1
 8011a58:	bf34      	ite	cc
 8011a5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a5e:	2300      	movcs	r3, #0
 8011a60:	3015      	adds	r0, #21
 8011a62:	fa02 f000 	lsl.w	r0, r2, r0
 8011a66:	fa23 f30c 	lsr.w	r3, r3, ip
 8011a6a:	4303      	orrs	r3, r0
 8011a6c:	461c      	mov	r4, r3
 8011a6e:	ec45 4b10 	vmov	d0, r4, r5
 8011a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a76:	45b8      	cmp	r8, r7
 8011a78:	bf3a      	itte	cc
 8011a7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011a82:	2300      	movcs	r3, #0
 8011a84:	380b      	subs	r0, #11
 8011a86:	d012      	beq.n	8011aae <__b2d+0x8a>
 8011a88:	f1c0 0120 	rsb	r1, r0, #32
 8011a8c:	fa23 f401 	lsr.w	r4, r3, r1
 8011a90:	4082      	lsls	r2, r0
 8011a92:	4322      	orrs	r2, r4
 8011a94:	4547      	cmp	r7, r8
 8011a96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011a9a:	bf8c      	ite	hi
 8011a9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011aa0:	2200      	movls	r2, #0
 8011aa2:	4083      	lsls	r3, r0
 8011aa4:	40ca      	lsrs	r2, r1
 8011aa6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011aaa:	4313      	orrs	r3, r2
 8011aac:	e7de      	b.n	8011a6c <__b2d+0x48>
 8011aae:	ea42 0501 	orr.w	r5, r2, r1
 8011ab2:	e7db      	b.n	8011a6c <__b2d+0x48>
 8011ab4:	3ff00000 	.word	0x3ff00000

08011ab8 <__d2b>:
 8011ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011abc:	460f      	mov	r7, r1
 8011abe:	2101      	movs	r1, #1
 8011ac0:	ec59 8b10 	vmov	r8, r9, d0
 8011ac4:	4616      	mov	r6, r2
 8011ac6:	f7ff fc1b 	bl	8011300 <_Balloc>
 8011aca:	4604      	mov	r4, r0
 8011acc:	b930      	cbnz	r0, 8011adc <__d2b+0x24>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	4b23      	ldr	r3, [pc, #140]	@ (8011b60 <__d2b+0xa8>)
 8011ad2:	4824      	ldr	r0, [pc, #144]	@ (8011b64 <__d2b+0xac>)
 8011ad4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011ad8:	f001 f8c0 	bl	8012c5c <__assert_func>
 8011adc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ae4:	b10d      	cbz	r5, 8011aea <__d2b+0x32>
 8011ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011aea:	9301      	str	r3, [sp, #4]
 8011aec:	f1b8 0300 	subs.w	r3, r8, #0
 8011af0:	d023      	beq.n	8011b3a <__d2b+0x82>
 8011af2:	4668      	mov	r0, sp
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	f7ff fd14 	bl	8011522 <__lo0bits>
 8011afa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011afe:	b1d0      	cbz	r0, 8011b36 <__d2b+0x7e>
 8011b00:	f1c0 0320 	rsb	r3, r0, #32
 8011b04:	fa02 f303 	lsl.w	r3, r2, r3
 8011b08:	430b      	orrs	r3, r1
 8011b0a:	40c2      	lsrs	r2, r0
 8011b0c:	6163      	str	r3, [r4, #20]
 8011b0e:	9201      	str	r2, [sp, #4]
 8011b10:	9b01      	ldr	r3, [sp, #4]
 8011b12:	61a3      	str	r3, [r4, #24]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	bf0c      	ite	eq
 8011b18:	2201      	moveq	r2, #1
 8011b1a:	2202      	movne	r2, #2
 8011b1c:	6122      	str	r2, [r4, #16]
 8011b1e:	b1a5      	cbz	r5, 8011b4a <__d2b+0x92>
 8011b20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b24:	4405      	add	r5, r0
 8011b26:	603d      	str	r5, [r7, #0]
 8011b28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011b2c:	6030      	str	r0, [r6, #0]
 8011b2e:	4620      	mov	r0, r4
 8011b30:	b003      	add	sp, #12
 8011b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b36:	6161      	str	r1, [r4, #20]
 8011b38:	e7ea      	b.n	8011b10 <__d2b+0x58>
 8011b3a:	a801      	add	r0, sp, #4
 8011b3c:	f7ff fcf1 	bl	8011522 <__lo0bits>
 8011b40:	9b01      	ldr	r3, [sp, #4]
 8011b42:	6163      	str	r3, [r4, #20]
 8011b44:	3020      	adds	r0, #32
 8011b46:	2201      	movs	r2, #1
 8011b48:	e7e8      	b.n	8011b1c <__d2b+0x64>
 8011b4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011b52:	6038      	str	r0, [r7, #0]
 8011b54:	6918      	ldr	r0, [r3, #16]
 8011b56:	f7ff fcc5 	bl	80114e4 <__hi0bits>
 8011b5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b5e:	e7e5      	b.n	8011b2c <__d2b+0x74>
 8011b60:	080130fd 	.word	0x080130fd
 8011b64:	0801316e 	.word	0x0801316e

08011b68 <__ratio>:
 8011b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6c:	4688      	mov	r8, r1
 8011b6e:	4669      	mov	r1, sp
 8011b70:	4681      	mov	r9, r0
 8011b72:	f7ff ff57 	bl	8011a24 <__b2d>
 8011b76:	a901      	add	r1, sp, #4
 8011b78:	4640      	mov	r0, r8
 8011b7a:	ec55 4b10 	vmov	r4, r5, d0
 8011b7e:	f7ff ff51 	bl	8011a24 <__b2d>
 8011b82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011b86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011b8a:	1ad2      	subs	r2, r2, r3
 8011b8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011b90:	1a5b      	subs	r3, r3, r1
 8011b92:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011b96:	ec57 6b10 	vmov	r6, r7, d0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	bfd6      	itet	le
 8011b9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ba2:	462a      	movgt	r2, r5
 8011ba4:	463a      	movle	r2, r7
 8011ba6:	46ab      	mov	fp, r5
 8011ba8:	46a2      	mov	sl, r4
 8011baa:	bfce      	itee	gt
 8011bac:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011bb0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011bb4:	ee00 3a90 	vmovle	s1, r3
 8011bb8:	ec4b ab17 	vmov	d7, sl, fp
 8011bbc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011bc0:	b003      	add	sp, #12
 8011bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bc6 <__copybits>:
 8011bc6:	3901      	subs	r1, #1
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	1149      	asrs	r1, r1, #5
 8011bcc:	6914      	ldr	r4, [r2, #16]
 8011bce:	3101      	adds	r1, #1
 8011bd0:	f102 0314 	add.w	r3, r2, #20
 8011bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011bd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011bdc:	1f05      	subs	r5, r0, #4
 8011bde:	42a3      	cmp	r3, r4
 8011be0:	d30c      	bcc.n	8011bfc <__copybits+0x36>
 8011be2:	1aa3      	subs	r3, r4, r2
 8011be4:	3b11      	subs	r3, #17
 8011be6:	f023 0303 	bic.w	r3, r3, #3
 8011bea:	3211      	adds	r2, #17
 8011bec:	42a2      	cmp	r2, r4
 8011bee:	bf88      	it	hi
 8011bf0:	2300      	movhi	r3, #0
 8011bf2:	4418      	add	r0, r3
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4288      	cmp	r0, r1
 8011bf8:	d305      	bcc.n	8011c06 <__copybits+0x40>
 8011bfa:	bd70      	pop	{r4, r5, r6, pc}
 8011bfc:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c00:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c04:	e7eb      	b.n	8011bde <__copybits+0x18>
 8011c06:	f840 3b04 	str.w	r3, [r0], #4
 8011c0a:	e7f4      	b.n	8011bf6 <__copybits+0x30>

08011c0c <__any_on>:
 8011c0c:	f100 0214 	add.w	r2, r0, #20
 8011c10:	6900      	ldr	r0, [r0, #16]
 8011c12:	114b      	asrs	r3, r1, #5
 8011c14:	4298      	cmp	r0, r3
 8011c16:	b510      	push	{r4, lr}
 8011c18:	db11      	blt.n	8011c3e <__any_on+0x32>
 8011c1a:	dd0a      	ble.n	8011c32 <__any_on+0x26>
 8011c1c:	f011 011f 	ands.w	r1, r1, #31
 8011c20:	d007      	beq.n	8011c32 <__any_on+0x26>
 8011c22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c26:	fa24 f001 	lsr.w	r0, r4, r1
 8011c2a:	fa00 f101 	lsl.w	r1, r0, r1
 8011c2e:	428c      	cmp	r4, r1
 8011c30:	d10b      	bne.n	8011c4a <__any_on+0x3e>
 8011c32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d803      	bhi.n	8011c42 <__any_on+0x36>
 8011c3a:	2000      	movs	r0, #0
 8011c3c:	bd10      	pop	{r4, pc}
 8011c3e:	4603      	mov	r3, r0
 8011c40:	e7f7      	b.n	8011c32 <__any_on+0x26>
 8011c42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c46:	2900      	cmp	r1, #0
 8011c48:	d0f5      	beq.n	8011c36 <__any_on+0x2a>
 8011c4a:	2001      	movs	r0, #1
 8011c4c:	e7f6      	b.n	8011c3c <__any_on+0x30>

08011c4e <_malloc_usable_size_r>:
 8011c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c52:	1f18      	subs	r0, r3, #4
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	bfbc      	itt	lt
 8011c58:	580b      	ldrlt	r3, [r1, r0]
 8011c5a:	18c0      	addlt	r0, r0, r3
 8011c5c:	4770      	bx	lr
	...

08011c60 <_strtol_l.isra.0>:
 8011c60:	2b24      	cmp	r3, #36	@ 0x24
 8011c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c66:	4686      	mov	lr, r0
 8011c68:	4690      	mov	r8, r2
 8011c6a:	d801      	bhi.n	8011c70 <_strtol_l.isra.0+0x10>
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d106      	bne.n	8011c7e <_strtol_l.isra.0+0x1e>
 8011c70:	f7fe f97c 	bl	800ff6c <__errno>
 8011c74:	2316      	movs	r3, #22
 8011c76:	6003      	str	r3, [r0, #0]
 8011c78:	2000      	movs	r0, #0
 8011c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c7e:	4834      	ldr	r0, [pc, #208]	@ (8011d50 <_strtol_l.isra.0+0xf0>)
 8011c80:	460d      	mov	r5, r1
 8011c82:	462a      	mov	r2, r5
 8011c84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c88:	5d06      	ldrb	r6, [r0, r4]
 8011c8a:	f016 0608 	ands.w	r6, r6, #8
 8011c8e:	d1f8      	bne.n	8011c82 <_strtol_l.isra.0+0x22>
 8011c90:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c92:	d110      	bne.n	8011cb6 <_strtol_l.isra.0+0x56>
 8011c94:	782c      	ldrb	r4, [r5, #0]
 8011c96:	2601      	movs	r6, #1
 8011c98:	1c95      	adds	r5, r2, #2
 8011c9a:	f033 0210 	bics.w	r2, r3, #16
 8011c9e:	d115      	bne.n	8011ccc <_strtol_l.isra.0+0x6c>
 8011ca0:	2c30      	cmp	r4, #48	@ 0x30
 8011ca2:	d10d      	bne.n	8011cc0 <_strtol_l.isra.0+0x60>
 8011ca4:	782a      	ldrb	r2, [r5, #0]
 8011ca6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011caa:	2a58      	cmp	r2, #88	@ 0x58
 8011cac:	d108      	bne.n	8011cc0 <_strtol_l.isra.0+0x60>
 8011cae:	786c      	ldrb	r4, [r5, #1]
 8011cb0:	3502      	adds	r5, #2
 8011cb2:	2310      	movs	r3, #16
 8011cb4:	e00a      	b.n	8011ccc <_strtol_l.isra.0+0x6c>
 8011cb6:	2c2b      	cmp	r4, #43	@ 0x2b
 8011cb8:	bf04      	itt	eq
 8011cba:	782c      	ldrbeq	r4, [r5, #0]
 8011cbc:	1c95      	addeq	r5, r2, #2
 8011cbe:	e7ec      	b.n	8011c9a <_strtol_l.isra.0+0x3a>
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d1f6      	bne.n	8011cb2 <_strtol_l.isra.0+0x52>
 8011cc4:	2c30      	cmp	r4, #48	@ 0x30
 8011cc6:	bf14      	ite	ne
 8011cc8:	230a      	movne	r3, #10
 8011cca:	2308      	moveq	r3, #8
 8011ccc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011cd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	fbbc f9f3 	udiv	r9, ip, r3
 8011cda:	4610      	mov	r0, r2
 8011cdc:	fb03 ca19 	mls	sl, r3, r9, ip
 8011ce0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011ce4:	2f09      	cmp	r7, #9
 8011ce6:	d80f      	bhi.n	8011d08 <_strtol_l.isra.0+0xa8>
 8011ce8:	463c      	mov	r4, r7
 8011cea:	42a3      	cmp	r3, r4
 8011cec:	dd1b      	ble.n	8011d26 <_strtol_l.isra.0+0xc6>
 8011cee:	1c57      	adds	r7, r2, #1
 8011cf0:	d007      	beq.n	8011d02 <_strtol_l.isra.0+0xa2>
 8011cf2:	4581      	cmp	r9, r0
 8011cf4:	d314      	bcc.n	8011d20 <_strtol_l.isra.0+0xc0>
 8011cf6:	d101      	bne.n	8011cfc <_strtol_l.isra.0+0x9c>
 8011cf8:	45a2      	cmp	sl, r4
 8011cfa:	db11      	blt.n	8011d20 <_strtol_l.isra.0+0xc0>
 8011cfc:	fb00 4003 	mla	r0, r0, r3, r4
 8011d00:	2201      	movs	r2, #1
 8011d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d06:	e7eb      	b.n	8011ce0 <_strtol_l.isra.0+0x80>
 8011d08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011d0c:	2f19      	cmp	r7, #25
 8011d0e:	d801      	bhi.n	8011d14 <_strtol_l.isra.0+0xb4>
 8011d10:	3c37      	subs	r4, #55	@ 0x37
 8011d12:	e7ea      	b.n	8011cea <_strtol_l.isra.0+0x8a>
 8011d14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011d18:	2f19      	cmp	r7, #25
 8011d1a:	d804      	bhi.n	8011d26 <_strtol_l.isra.0+0xc6>
 8011d1c:	3c57      	subs	r4, #87	@ 0x57
 8011d1e:	e7e4      	b.n	8011cea <_strtol_l.isra.0+0x8a>
 8011d20:	f04f 32ff 	mov.w	r2, #4294967295
 8011d24:	e7ed      	b.n	8011d02 <_strtol_l.isra.0+0xa2>
 8011d26:	1c53      	adds	r3, r2, #1
 8011d28:	d108      	bne.n	8011d3c <_strtol_l.isra.0+0xdc>
 8011d2a:	2322      	movs	r3, #34	@ 0x22
 8011d2c:	f8ce 3000 	str.w	r3, [lr]
 8011d30:	4660      	mov	r0, ip
 8011d32:	f1b8 0f00 	cmp.w	r8, #0
 8011d36:	d0a0      	beq.n	8011c7a <_strtol_l.isra.0+0x1a>
 8011d38:	1e69      	subs	r1, r5, #1
 8011d3a:	e006      	b.n	8011d4a <_strtol_l.isra.0+0xea>
 8011d3c:	b106      	cbz	r6, 8011d40 <_strtol_l.isra.0+0xe0>
 8011d3e:	4240      	negs	r0, r0
 8011d40:	f1b8 0f00 	cmp.w	r8, #0
 8011d44:	d099      	beq.n	8011c7a <_strtol_l.isra.0+0x1a>
 8011d46:	2a00      	cmp	r2, #0
 8011d48:	d1f6      	bne.n	8011d38 <_strtol_l.isra.0+0xd8>
 8011d4a:	f8c8 1000 	str.w	r1, [r8]
 8011d4e:	e794      	b.n	8011c7a <_strtol_l.isra.0+0x1a>
 8011d50:	08013281 	.word	0x08013281

08011d54 <_strtol_r>:
 8011d54:	f7ff bf84 	b.w	8011c60 <_strtol_l.isra.0>

08011d58 <__ascii_wctomb>:
 8011d58:	4603      	mov	r3, r0
 8011d5a:	4608      	mov	r0, r1
 8011d5c:	b141      	cbz	r1, 8011d70 <__ascii_wctomb+0x18>
 8011d5e:	2aff      	cmp	r2, #255	@ 0xff
 8011d60:	d904      	bls.n	8011d6c <__ascii_wctomb+0x14>
 8011d62:	228a      	movs	r2, #138	@ 0x8a
 8011d64:	601a      	str	r2, [r3, #0]
 8011d66:	f04f 30ff 	mov.w	r0, #4294967295
 8011d6a:	4770      	bx	lr
 8011d6c:	700a      	strb	r2, [r1, #0]
 8011d6e:	2001      	movs	r0, #1
 8011d70:	4770      	bx	lr

08011d72 <__ssputs_r>:
 8011d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d76:	688e      	ldr	r6, [r1, #8]
 8011d78:	461f      	mov	r7, r3
 8011d7a:	42be      	cmp	r6, r7
 8011d7c:	680b      	ldr	r3, [r1, #0]
 8011d7e:	4682      	mov	sl, r0
 8011d80:	460c      	mov	r4, r1
 8011d82:	4690      	mov	r8, r2
 8011d84:	d82d      	bhi.n	8011de2 <__ssputs_r+0x70>
 8011d86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011d8e:	d026      	beq.n	8011dde <__ssputs_r+0x6c>
 8011d90:	6965      	ldr	r5, [r4, #20]
 8011d92:	6909      	ldr	r1, [r1, #16]
 8011d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d98:	eba3 0901 	sub.w	r9, r3, r1
 8011d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011da0:	1c7b      	adds	r3, r7, #1
 8011da2:	444b      	add	r3, r9
 8011da4:	106d      	asrs	r5, r5, #1
 8011da6:	429d      	cmp	r5, r3
 8011da8:	bf38      	it	cc
 8011daa:	461d      	movcc	r5, r3
 8011dac:	0553      	lsls	r3, r2, #21
 8011dae:	d527      	bpl.n	8011e00 <__ssputs_r+0x8e>
 8011db0:	4629      	mov	r1, r5
 8011db2:	f7fc f953 	bl	800e05c <_malloc_r>
 8011db6:	4606      	mov	r6, r0
 8011db8:	b360      	cbz	r0, 8011e14 <__ssputs_r+0xa2>
 8011dba:	6921      	ldr	r1, [r4, #16]
 8011dbc:	464a      	mov	r2, r9
 8011dbe:	f7fe f902 	bl	800ffc6 <memcpy>
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	6126      	str	r6, [r4, #16]
 8011dd0:	6165      	str	r5, [r4, #20]
 8011dd2:	444e      	add	r6, r9
 8011dd4:	eba5 0509 	sub.w	r5, r5, r9
 8011dd8:	6026      	str	r6, [r4, #0]
 8011dda:	60a5      	str	r5, [r4, #8]
 8011ddc:	463e      	mov	r6, r7
 8011dde:	42be      	cmp	r6, r7
 8011de0:	d900      	bls.n	8011de4 <__ssputs_r+0x72>
 8011de2:	463e      	mov	r6, r7
 8011de4:	6820      	ldr	r0, [r4, #0]
 8011de6:	4632      	mov	r2, r6
 8011de8:	4641      	mov	r1, r8
 8011dea:	f000 fefa 	bl	8012be2 <memmove>
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	1b9b      	subs	r3, r3, r6
 8011df2:	60a3      	str	r3, [r4, #8]
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	4433      	add	r3, r6
 8011df8:	6023      	str	r3, [r4, #0]
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e00:	462a      	mov	r2, r5
 8011e02:	f7fc f9bf 	bl	800e184 <_realloc_r>
 8011e06:	4606      	mov	r6, r0
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d1e0      	bne.n	8011dce <__ssputs_r+0x5c>
 8011e0c:	6921      	ldr	r1, [r4, #16]
 8011e0e:	4650      	mov	r0, sl
 8011e10:	f7fe fee0 	bl	8010bd4 <_free_r>
 8011e14:	230c      	movs	r3, #12
 8011e16:	f8ca 3000 	str.w	r3, [sl]
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e20:	81a3      	strh	r3, [r4, #12]
 8011e22:	f04f 30ff 	mov.w	r0, #4294967295
 8011e26:	e7e9      	b.n	8011dfc <__ssputs_r+0x8a>

08011e28 <_svfiprintf_r>:
 8011e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	4698      	mov	r8, r3
 8011e2e:	898b      	ldrh	r3, [r1, #12]
 8011e30:	061b      	lsls	r3, r3, #24
 8011e32:	b09d      	sub	sp, #116	@ 0x74
 8011e34:	4607      	mov	r7, r0
 8011e36:	460d      	mov	r5, r1
 8011e38:	4614      	mov	r4, r2
 8011e3a:	d510      	bpl.n	8011e5e <_svfiprintf_r+0x36>
 8011e3c:	690b      	ldr	r3, [r1, #16]
 8011e3e:	b973      	cbnz	r3, 8011e5e <_svfiprintf_r+0x36>
 8011e40:	2140      	movs	r1, #64	@ 0x40
 8011e42:	f7fc f90b 	bl	800e05c <_malloc_r>
 8011e46:	6028      	str	r0, [r5, #0]
 8011e48:	6128      	str	r0, [r5, #16]
 8011e4a:	b930      	cbnz	r0, 8011e5a <_svfiprintf_r+0x32>
 8011e4c:	230c      	movs	r3, #12
 8011e4e:	603b      	str	r3, [r7, #0]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	b01d      	add	sp, #116	@ 0x74
 8011e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5a:	2340      	movs	r3, #64	@ 0x40
 8011e5c:	616b      	str	r3, [r5, #20]
 8011e5e:	2300      	movs	r3, #0
 8011e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e62:	2320      	movs	r3, #32
 8011e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e6c:	2330      	movs	r3, #48	@ 0x30
 8011e6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801200c <_svfiprintf_r+0x1e4>
 8011e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e76:	f04f 0901 	mov.w	r9, #1
 8011e7a:	4623      	mov	r3, r4
 8011e7c:	469a      	mov	sl, r3
 8011e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e82:	b10a      	cbz	r2, 8011e88 <_svfiprintf_r+0x60>
 8011e84:	2a25      	cmp	r2, #37	@ 0x25
 8011e86:	d1f9      	bne.n	8011e7c <_svfiprintf_r+0x54>
 8011e88:	ebba 0b04 	subs.w	fp, sl, r4
 8011e8c:	d00b      	beq.n	8011ea6 <_svfiprintf_r+0x7e>
 8011e8e:	465b      	mov	r3, fp
 8011e90:	4622      	mov	r2, r4
 8011e92:	4629      	mov	r1, r5
 8011e94:	4638      	mov	r0, r7
 8011e96:	f7ff ff6c 	bl	8011d72 <__ssputs_r>
 8011e9a:	3001      	adds	r0, #1
 8011e9c:	f000 80a7 	beq.w	8011fee <_svfiprintf_r+0x1c6>
 8011ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ea2:	445a      	add	r2, fp
 8011ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f000 809f 	beq.w	8011fee <_svfiprintf_r+0x1c6>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eba:	f10a 0a01 	add.w	sl, sl, #1
 8011ebe:	9304      	str	r3, [sp, #16]
 8011ec0:	9307      	str	r3, [sp, #28]
 8011ec2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ec6:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ec8:	4654      	mov	r4, sl
 8011eca:	2205      	movs	r2, #5
 8011ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed0:	484e      	ldr	r0, [pc, #312]	@ (801200c <_svfiprintf_r+0x1e4>)
 8011ed2:	f7ee fa05 	bl	80002e0 <memchr>
 8011ed6:	9a04      	ldr	r2, [sp, #16]
 8011ed8:	b9d8      	cbnz	r0, 8011f12 <_svfiprintf_r+0xea>
 8011eda:	06d0      	lsls	r0, r2, #27
 8011edc:	bf44      	itt	mi
 8011ede:	2320      	movmi	r3, #32
 8011ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ee4:	0711      	lsls	r1, r2, #28
 8011ee6:	bf44      	itt	mi
 8011ee8:	232b      	movmi	r3, #43	@ 0x2b
 8011eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011eee:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ef4:	d015      	beq.n	8011f22 <_svfiprintf_r+0xfa>
 8011ef6:	9a07      	ldr	r2, [sp, #28]
 8011ef8:	4654      	mov	r4, sl
 8011efa:	2000      	movs	r0, #0
 8011efc:	f04f 0c0a 	mov.w	ip, #10
 8011f00:	4621      	mov	r1, r4
 8011f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f06:	3b30      	subs	r3, #48	@ 0x30
 8011f08:	2b09      	cmp	r3, #9
 8011f0a:	d94b      	bls.n	8011fa4 <_svfiprintf_r+0x17c>
 8011f0c:	b1b0      	cbz	r0, 8011f3c <_svfiprintf_r+0x114>
 8011f0e:	9207      	str	r2, [sp, #28]
 8011f10:	e014      	b.n	8011f3c <_svfiprintf_r+0x114>
 8011f12:	eba0 0308 	sub.w	r3, r0, r8
 8011f16:	fa09 f303 	lsl.w	r3, r9, r3
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	46a2      	mov	sl, r4
 8011f20:	e7d2      	b.n	8011ec8 <_svfiprintf_r+0xa0>
 8011f22:	9b03      	ldr	r3, [sp, #12]
 8011f24:	1d19      	adds	r1, r3, #4
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	9103      	str	r1, [sp, #12]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	bfbb      	ittet	lt
 8011f2e:	425b      	neglt	r3, r3
 8011f30:	f042 0202 	orrlt.w	r2, r2, #2
 8011f34:	9307      	strge	r3, [sp, #28]
 8011f36:	9307      	strlt	r3, [sp, #28]
 8011f38:	bfb8      	it	lt
 8011f3a:	9204      	strlt	r2, [sp, #16]
 8011f3c:	7823      	ldrb	r3, [r4, #0]
 8011f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f40:	d10a      	bne.n	8011f58 <_svfiprintf_r+0x130>
 8011f42:	7863      	ldrb	r3, [r4, #1]
 8011f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f46:	d132      	bne.n	8011fae <_svfiprintf_r+0x186>
 8011f48:	9b03      	ldr	r3, [sp, #12]
 8011f4a:	1d1a      	adds	r2, r3, #4
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	9203      	str	r2, [sp, #12]
 8011f50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f54:	3402      	adds	r4, #2
 8011f56:	9305      	str	r3, [sp, #20]
 8011f58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801201c <_svfiprintf_r+0x1f4>
 8011f5c:	7821      	ldrb	r1, [r4, #0]
 8011f5e:	2203      	movs	r2, #3
 8011f60:	4650      	mov	r0, sl
 8011f62:	f7ee f9bd 	bl	80002e0 <memchr>
 8011f66:	b138      	cbz	r0, 8011f78 <_svfiprintf_r+0x150>
 8011f68:	9b04      	ldr	r3, [sp, #16]
 8011f6a:	eba0 000a 	sub.w	r0, r0, sl
 8011f6e:	2240      	movs	r2, #64	@ 0x40
 8011f70:	4082      	lsls	r2, r0
 8011f72:	4313      	orrs	r3, r2
 8011f74:	3401      	adds	r4, #1
 8011f76:	9304      	str	r3, [sp, #16]
 8011f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f7c:	4824      	ldr	r0, [pc, #144]	@ (8012010 <_svfiprintf_r+0x1e8>)
 8011f7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f82:	2206      	movs	r2, #6
 8011f84:	f7ee f9ac 	bl	80002e0 <memchr>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d036      	beq.n	8011ffa <_svfiprintf_r+0x1d2>
 8011f8c:	4b21      	ldr	r3, [pc, #132]	@ (8012014 <_svfiprintf_r+0x1ec>)
 8011f8e:	bb1b      	cbnz	r3, 8011fd8 <_svfiprintf_r+0x1b0>
 8011f90:	9b03      	ldr	r3, [sp, #12]
 8011f92:	3307      	adds	r3, #7
 8011f94:	f023 0307 	bic.w	r3, r3, #7
 8011f98:	3308      	adds	r3, #8
 8011f9a:	9303      	str	r3, [sp, #12]
 8011f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f9e:	4433      	add	r3, r6
 8011fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fa2:	e76a      	b.n	8011e7a <_svfiprintf_r+0x52>
 8011fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fa8:	460c      	mov	r4, r1
 8011faa:	2001      	movs	r0, #1
 8011fac:	e7a8      	b.n	8011f00 <_svfiprintf_r+0xd8>
 8011fae:	2300      	movs	r3, #0
 8011fb0:	3401      	adds	r4, #1
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	f04f 0c0a 	mov.w	ip, #10
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fc0:	3a30      	subs	r2, #48	@ 0x30
 8011fc2:	2a09      	cmp	r2, #9
 8011fc4:	d903      	bls.n	8011fce <_svfiprintf_r+0x1a6>
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d0c6      	beq.n	8011f58 <_svfiprintf_r+0x130>
 8011fca:	9105      	str	r1, [sp, #20]
 8011fcc:	e7c4      	b.n	8011f58 <_svfiprintf_r+0x130>
 8011fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e7f0      	b.n	8011fba <_svfiprintf_r+0x192>
 8011fd8:	ab03      	add	r3, sp, #12
 8011fda:	9300      	str	r3, [sp, #0]
 8011fdc:	462a      	mov	r2, r5
 8011fde:	4b0e      	ldr	r3, [pc, #56]	@ (8012018 <_svfiprintf_r+0x1f0>)
 8011fe0:	a904      	add	r1, sp, #16
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	f7fc ff48 	bl	800ee78 <_printf_float>
 8011fe8:	1c42      	adds	r2, r0, #1
 8011fea:	4606      	mov	r6, r0
 8011fec:	d1d6      	bne.n	8011f9c <_svfiprintf_r+0x174>
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	065b      	lsls	r3, r3, #25
 8011ff2:	f53f af2d 	bmi.w	8011e50 <_svfiprintf_r+0x28>
 8011ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ff8:	e72c      	b.n	8011e54 <_svfiprintf_r+0x2c>
 8011ffa:	ab03      	add	r3, sp, #12
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	462a      	mov	r2, r5
 8012000:	4b05      	ldr	r3, [pc, #20]	@ (8012018 <_svfiprintf_r+0x1f0>)
 8012002:	a904      	add	r1, sp, #16
 8012004:	4638      	mov	r0, r7
 8012006:	f7fd f9bf 	bl	800f388 <_printf_i>
 801200a:	e7ed      	b.n	8011fe8 <_svfiprintf_r+0x1c0>
 801200c:	080131c7 	.word	0x080131c7
 8012010:	080131d1 	.word	0x080131d1
 8012014:	0800ee79 	.word	0x0800ee79
 8012018:	08011d73 	.word	0x08011d73
 801201c:	080131cd 	.word	0x080131cd

08012020 <_sungetc_r>:
 8012020:	b538      	push	{r3, r4, r5, lr}
 8012022:	1c4b      	adds	r3, r1, #1
 8012024:	4614      	mov	r4, r2
 8012026:	d103      	bne.n	8012030 <_sungetc_r+0x10>
 8012028:	f04f 35ff 	mov.w	r5, #4294967295
 801202c:	4628      	mov	r0, r5
 801202e:	bd38      	pop	{r3, r4, r5, pc}
 8012030:	8993      	ldrh	r3, [r2, #12]
 8012032:	f023 0320 	bic.w	r3, r3, #32
 8012036:	8193      	strh	r3, [r2, #12]
 8012038:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801203a:	6852      	ldr	r2, [r2, #4]
 801203c:	b2cd      	uxtb	r5, r1
 801203e:	b18b      	cbz	r3, 8012064 <_sungetc_r+0x44>
 8012040:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012042:	4293      	cmp	r3, r2
 8012044:	dd08      	ble.n	8012058 <_sungetc_r+0x38>
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	1e5a      	subs	r2, r3, #1
 801204a:	6022      	str	r2, [r4, #0]
 801204c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012050:	6863      	ldr	r3, [r4, #4]
 8012052:	3301      	adds	r3, #1
 8012054:	6063      	str	r3, [r4, #4]
 8012056:	e7e9      	b.n	801202c <_sungetc_r+0xc>
 8012058:	4621      	mov	r1, r4
 801205a:	f000 fd88 	bl	8012b6e <__submore>
 801205e:	2800      	cmp	r0, #0
 8012060:	d0f1      	beq.n	8012046 <_sungetc_r+0x26>
 8012062:	e7e1      	b.n	8012028 <_sungetc_r+0x8>
 8012064:	6921      	ldr	r1, [r4, #16]
 8012066:	6823      	ldr	r3, [r4, #0]
 8012068:	b151      	cbz	r1, 8012080 <_sungetc_r+0x60>
 801206a:	4299      	cmp	r1, r3
 801206c:	d208      	bcs.n	8012080 <_sungetc_r+0x60>
 801206e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012072:	42a9      	cmp	r1, r5
 8012074:	d104      	bne.n	8012080 <_sungetc_r+0x60>
 8012076:	3b01      	subs	r3, #1
 8012078:	3201      	adds	r2, #1
 801207a:	6023      	str	r3, [r4, #0]
 801207c:	6062      	str	r2, [r4, #4]
 801207e:	e7d5      	b.n	801202c <_sungetc_r+0xc>
 8012080:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012088:	6363      	str	r3, [r4, #52]	@ 0x34
 801208a:	2303      	movs	r3, #3
 801208c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801208e:	4623      	mov	r3, r4
 8012090:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012094:	6023      	str	r3, [r4, #0]
 8012096:	2301      	movs	r3, #1
 8012098:	e7dc      	b.n	8012054 <_sungetc_r+0x34>

0801209a <__ssrefill_r>:
 801209a:	b510      	push	{r4, lr}
 801209c:	460c      	mov	r4, r1
 801209e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80120a0:	b169      	cbz	r1, 80120be <__ssrefill_r+0x24>
 80120a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120a6:	4299      	cmp	r1, r3
 80120a8:	d001      	beq.n	80120ae <__ssrefill_r+0x14>
 80120aa:	f7fe fd93 	bl	8010bd4 <_free_r>
 80120ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120b0:	6063      	str	r3, [r4, #4]
 80120b2:	2000      	movs	r0, #0
 80120b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80120b6:	b113      	cbz	r3, 80120be <__ssrefill_r+0x24>
 80120b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80120ba:	6023      	str	r3, [r4, #0]
 80120bc:	bd10      	pop	{r4, pc}
 80120be:	6923      	ldr	r3, [r4, #16]
 80120c0:	6023      	str	r3, [r4, #0]
 80120c2:	2300      	movs	r3, #0
 80120c4:	6063      	str	r3, [r4, #4]
 80120c6:	89a3      	ldrh	r3, [r4, #12]
 80120c8:	f043 0320 	orr.w	r3, r3, #32
 80120cc:	81a3      	strh	r3, [r4, #12]
 80120ce:	f04f 30ff 	mov.w	r0, #4294967295
 80120d2:	e7f3      	b.n	80120bc <__ssrefill_r+0x22>

080120d4 <__ssvfiscanf_r>:
 80120d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d8:	460c      	mov	r4, r1
 80120da:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80120de:	2100      	movs	r1, #0
 80120e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80120e4:	49a6      	ldr	r1, [pc, #664]	@ (8012380 <__ssvfiscanf_r+0x2ac>)
 80120e6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80120e8:	f10d 0804 	add.w	r8, sp, #4
 80120ec:	49a5      	ldr	r1, [pc, #660]	@ (8012384 <__ssvfiscanf_r+0x2b0>)
 80120ee:	4fa6      	ldr	r7, [pc, #664]	@ (8012388 <__ssvfiscanf_r+0x2b4>)
 80120f0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80120f4:	4606      	mov	r6, r0
 80120f6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80120f8:	9300      	str	r3, [sp, #0]
 80120fa:	f892 9000 	ldrb.w	r9, [r2]
 80120fe:	f1b9 0f00 	cmp.w	r9, #0
 8012102:	f000 8158 	beq.w	80123b6 <__ssvfiscanf_r+0x2e2>
 8012106:	f817 3009 	ldrb.w	r3, [r7, r9]
 801210a:	f013 0308 	ands.w	r3, r3, #8
 801210e:	f102 0501 	add.w	r5, r2, #1
 8012112:	d019      	beq.n	8012148 <__ssvfiscanf_r+0x74>
 8012114:	6863      	ldr	r3, [r4, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	dd0f      	ble.n	801213a <__ssvfiscanf_r+0x66>
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	781a      	ldrb	r2, [r3, #0]
 801211e:	5cba      	ldrb	r2, [r7, r2]
 8012120:	0712      	lsls	r2, r2, #28
 8012122:	d401      	bmi.n	8012128 <__ssvfiscanf_r+0x54>
 8012124:	462a      	mov	r2, r5
 8012126:	e7e8      	b.n	80120fa <__ssvfiscanf_r+0x26>
 8012128:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801212a:	3201      	adds	r2, #1
 801212c:	9245      	str	r2, [sp, #276]	@ 0x114
 801212e:	6862      	ldr	r2, [r4, #4]
 8012130:	3301      	adds	r3, #1
 8012132:	3a01      	subs	r2, #1
 8012134:	6062      	str	r2, [r4, #4]
 8012136:	6023      	str	r3, [r4, #0]
 8012138:	e7ec      	b.n	8012114 <__ssvfiscanf_r+0x40>
 801213a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801213c:	4621      	mov	r1, r4
 801213e:	4630      	mov	r0, r6
 8012140:	4798      	blx	r3
 8012142:	2800      	cmp	r0, #0
 8012144:	d0e9      	beq.n	801211a <__ssvfiscanf_r+0x46>
 8012146:	e7ed      	b.n	8012124 <__ssvfiscanf_r+0x50>
 8012148:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801214c:	f040 8085 	bne.w	801225a <__ssvfiscanf_r+0x186>
 8012150:	9341      	str	r3, [sp, #260]	@ 0x104
 8012152:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012154:	7853      	ldrb	r3, [r2, #1]
 8012156:	2b2a      	cmp	r3, #42	@ 0x2a
 8012158:	bf02      	ittt	eq
 801215a:	2310      	moveq	r3, #16
 801215c:	1c95      	addeq	r5, r2, #2
 801215e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012160:	220a      	movs	r2, #10
 8012162:	46aa      	mov	sl, r5
 8012164:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012168:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801216c:	2b09      	cmp	r3, #9
 801216e:	d91e      	bls.n	80121ae <__ssvfiscanf_r+0xda>
 8012170:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801238c <__ssvfiscanf_r+0x2b8>
 8012174:	2203      	movs	r2, #3
 8012176:	4658      	mov	r0, fp
 8012178:	f7ee f8b2 	bl	80002e0 <memchr>
 801217c:	b138      	cbz	r0, 801218e <__ssvfiscanf_r+0xba>
 801217e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012180:	eba0 000b 	sub.w	r0, r0, fp
 8012184:	2301      	movs	r3, #1
 8012186:	4083      	lsls	r3, r0
 8012188:	4313      	orrs	r3, r2
 801218a:	9341      	str	r3, [sp, #260]	@ 0x104
 801218c:	4655      	mov	r5, sl
 801218e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012192:	2b78      	cmp	r3, #120	@ 0x78
 8012194:	d806      	bhi.n	80121a4 <__ssvfiscanf_r+0xd0>
 8012196:	2b57      	cmp	r3, #87	@ 0x57
 8012198:	d810      	bhi.n	80121bc <__ssvfiscanf_r+0xe8>
 801219a:	2b25      	cmp	r3, #37	@ 0x25
 801219c:	d05d      	beq.n	801225a <__ssvfiscanf_r+0x186>
 801219e:	d857      	bhi.n	8012250 <__ssvfiscanf_r+0x17c>
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d075      	beq.n	8012290 <__ssvfiscanf_r+0x1bc>
 80121a4:	2303      	movs	r3, #3
 80121a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80121a8:	230a      	movs	r3, #10
 80121aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80121ac:	e088      	b.n	80122c0 <__ssvfiscanf_r+0x1ec>
 80121ae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80121b0:	fb02 1103 	mla	r1, r2, r3, r1
 80121b4:	3930      	subs	r1, #48	@ 0x30
 80121b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80121b8:	4655      	mov	r5, sl
 80121ba:	e7d2      	b.n	8012162 <__ssvfiscanf_r+0x8e>
 80121bc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80121c0:	2a20      	cmp	r2, #32
 80121c2:	d8ef      	bhi.n	80121a4 <__ssvfiscanf_r+0xd0>
 80121c4:	a101      	add	r1, pc, #4	@ (adr r1, 80121cc <__ssvfiscanf_r+0xf8>)
 80121c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80121ca:	bf00      	nop
 80121cc:	0801229f 	.word	0x0801229f
 80121d0:	080121a5 	.word	0x080121a5
 80121d4:	080121a5 	.word	0x080121a5
 80121d8:	080122f9 	.word	0x080122f9
 80121dc:	080121a5 	.word	0x080121a5
 80121e0:	080121a5 	.word	0x080121a5
 80121e4:	080121a5 	.word	0x080121a5
 80121e8:	080121a5 	.word	0x080121a5
 80121ec:	080121a5 	.word	0x080121a5
 80121f0:	080121a5 	.word	0x080121a5
 80121f4:	080121a5 	.word	0x080121a5
 80121f8:	0801230f 	.word	0x0801230f
 80121fc:	080122f5 	.word	0x080122f5
 8012200:	08012257 	.word	0x08012257
 8012204:	08012257 	.word	0x08012257
 8012208:	08012257 	.word	0x08012257
 801220c:	080121a5 	.word	0x080121a5
 8012210:	080122b1 	.word	0x080122b1
 8012214:	080121a5 	.word	0x080121a5
 8012218:	080121a5 	.word	0x080121a5
 801221c:	080121a5 	.word	0x080121a5
 8012220:	080121a5 	.word	0x080121a5
 8012224:	0801231f 	.word	0x0801231f
 8012228:	080122b9 	.word	0x080122b9
 801222c:	08012297 	.word	0x08012297
 8012230:	080121a5 	.word	0x080121a5
 8012234:	080121a5 	.word	0x080121a5
 8012238:	0801231b 	.word	0x0801231b
 801223c:	080121a5 	.word	0x080121a5
 8012240:	080122f5 	.word	0x080122f5
 8012244:	080121a5 	.word	0x080121a5
 8012248:	080121a5 	.word	0x080121a5
 801224c:	0801229f 	.word	0x0801229f
 8012250:	3b45      	subs	r3, #69	@ 0x45
 8012252:	2b02      	cmp	r3, #2
 8012254:	d8a6      	bhi.n	80121a4 <__ssvfiscanf_r+0xd0>
 8012256:	2305      	movs	r3, #5
 8012258:	e031      	b.n	80122be <__ssvfiscanf_r+0x1ea>
 801225a:	6863      	ldr	r3, [r4, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	dd0d      	ble.n	801227c <__ssvfiscanf_r+0x1a8>
 8012260:	6823      	ldr	r3, [r4, #0]
 8012262:	781a      	ldrb	r2, [r3, #0]
 8012264:	454a      	cmp	r2, r9
 8012266:	f040 80a6 	bne.w	80123b6 <__ssvfiscanf_r+0x2e2>
 801226a:	3301      	adds	r3, #1
 801226c:	6862      	ldr	r2, [r4, #4]
 801226e:	6023      	str	r3, [r4, #0]
 8012270:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012272:	3a01      	subs	r2, #1
 8012274:	3301      	adds	r3, #1
 8012276:	6062      	str	r2, [r4, #4]
 8012278:	9345      	str	r3, [sp, #276]	@ 0x114
 801227a:	e753      	b.n	8012124 <__ssvfiscanf_r+0x50>
 801227c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801227e:	4621      	mov	r1, r4
 8012280:	4630      	mov	r0, r6
 8012282:	4798      	blx	r3
 8012284:	2800      	cmp	r0, #0
 8012286:	d0eb      	beq.n	8012260 <__ssvfiscanf_r+0x18c>
 8012288:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801228a:	2800      	cmp	r0, #0
 801228c:	f040 808b 	bne.w	80123a6 <__ssvfiscanf_r+0x2d2>
 8012290:	f04f 30ff 	mov.w	r0, #4294967295
 8012294:	e08b      	b.n	80123ae <__ssvfiscanf_r+0x2da>
 8012296:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012298:	f042 0220 	orr.w	r2, r2, #32
 801229c:	9241      	str	r2, [sp, #260]	@ 0x104
 801229e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80122a6:	2210      	movs	r2, #16
 80122a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80122aa:	9242      	str	r2, [sp, #264]	@ 0x108
 80122ac:	d902      	bls.n	80122b4 <__ssvfiscanf_r+0x1e0>
 80122ae:	e005      	b.n	80122bc <__ssvfiscanf_r+0x1e8>
 80122b0:	2300      	movs	r3, #0
 80122b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80122b4:	2303      	movs	r3, #3
 80122b6:	e002      	b.n	80122be <__ssvfiscanf_r+0x1ea>
 80122b8:	2308      	movs	r3, #8
 80122ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80122bc:	2304      	movs	r3, #4
 80122be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	dd39      	ble.n	801233a <__ssvfiscanf_r+0x266>
 80122c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80122c8:	0659      	lsls	r1, r3, #25
 80122ca:	d404      	bmi.n	80122d6 <__ssvfiscanf_r+0x202>
 80122cc:	6823      	ldr	r3, [r4, #0]
 80122ce:	781a      	ldrb	r2, [r3, #0]
 80122d0:	5cba      	ldrb	r2, [r7, r2]
 80122d2:	0712      	lsls	r2, r2, #28
 80122d4:	d438      	bmi.n	8012348 <__ssvfiscanf_r+0x274>
 80122d6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80122d8:	2b02      	cmp	r3, #2
 80122da:	dc47      	bgt.n	801236c <__ssvfiscanf_r+0x298>
 80122dc:	466b      	mov	r3, sp
 80122de:	4622      	mov	r2, r4
 80122e0:	a941      	add	r1, sp, #260	@ 0x104
 80122e2:	4630      	mov	r0, r6
 80122e4:	f000 f9ae 	bl	8012644 <_scanf_chars>
 80122e8:	2801      	cmp	r0, #1
 80122ea:	d064      	beq.n	80123b6 <__ssvfiscanf_r+0x2e2>
 80122ec:	2802      	cmp	r0, #2
 80122ee:	f47f af19 	bne.w	8012124 <__ssvfiscanf_r+0x50>
 80122f2:	e7c9      	b.n	8012288 <__ssvfiscanf_r+0x1b4>
 80122f4:	220a      	movs	r2, #10
 80122f6:	e7d7      	b.n	80122a8 <__ssvfiscanf_r+0x1d4>
 80122f8:	4629      	mov	r1, r5
 80122fa:	4640      	mov	r0, r8
 80122fc:	f000 fbfe 	bl	8012afc <__sccl>
 8012300:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012306:	9341      	str	r3, [sp, #260]	@ 0x104
 8012308:	4605      	mov	r5, r0
 801230a:	2301      	movs	r3, #1
 801230c:	e7d7      	b.n	80122be <__ssvfiscanf_r+0x1ea>
 801230e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012314:	9341      	str	r3, [sp, #260]	@ 0x104
 8012316:	2300      	movs	r3, #0
 8012318:	e7d1      	b.n	80122be <__ssvfiscanf_r+0x1ea>
 801231a:	2302      	movs	r3, #2
 801231c:	e7cf      	b.n	80122be <__ssvfiscanf_r+0x1ea>
 801231e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012320:	06c3      	lsls	r3, r0, #27
 8012322:	f53f aeff 	bmi.w	8012124 <__ssvfiscanf_r+0x50>
 8012326:	9b00      	ldr	r3, [sp, #0]
 8012328:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801232a:	1d19      	adds	r1, r3, #4
 801232c:	9100      	str	r1, [sp, #0]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	07c0      	lsls	r0, r0, #31
 8012332:	bf4c      	ite	mi
 8012334:	801a      	strhmi	r2, [r3, #0]
 8012336:	601a      	strpl	r2, [r3, #0]
 8012338:	e6f4      	b.n	8012124 <__ssvfiscanf_r+0x50>
 801233a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801233c:	4621      	mov	r1, r4
 801233e:	4630      	mov	r0, r6
 8012340:	4798      	blx	r3
 8012342:	2800      	cmp	r0, #0
 8012344:	d0bf      	beq.n	80122c6 <__ssvfiscanf_r+0x1f2>
 8012346:	e79f      	b.n	8012288 <__ssvfiscanf_r+0x1b4>
 8012348:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801234a:	3201      	adds	r2, #1
 801234c:	9245      	str	r2, [sp, #276]	@ 0x114
 801234e:	6862      	ldr	r2, [r4, #4]
 8012350:	3a01      	subs	r2, #1
 8012352:	2a00      	cmp	r2, #0
 8012354:	6062      	str	r2, [r4, #4]
 8012356:	dd02      	ble.n	801235e <__ssvfiscanf_r+0x28a>
 8012358:	3301      	adds	r3, #1
 801235a:	6023      	str	r3, [r4, #0]
 801235c:	e7b6      	b.n	80122cc <__ssvfiscanf_r+0x1f8>
 801235e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012360:	4621      	mov	r1, r4
 8012362:	4630      	mov	r0, r6
 8012364:	4798      	blx	r3
 8012366:	2800      	cmp	r0, #0
 8012368:	d0b0      	beq.n	80122cc <__ssvfiscanf_r+0x1f8>
 801236a:	e78d      	b.n	8012288 <__ssvfiscanf_r+0x1b4>
 801236c:	2b04      	cmp	r3, #4
 801236e:	dc0f      	bgt.n	8012390 <__ssvfiscanf_r+0x2bc>
 8012370:	466b      	mov	r3, sp
 8012372:	4622      	mov	r2, r4
 8012374:	a941      	add	r1, sp, #260	@ 0x104
 8012376:	4630      	mov	r0, r6
 8012378:	f000 f9be 	bl	80126f8 <_scanf_i>
 801237c:	e7b4      	b.n	80122e8 <__ssvfiscanf_r+0x214>
 801237e:	bf00      	nop
 8012380:	08012021 	.word	0x08012021
 8012384:	0801209b 	.word	0x0801209b
 8012388:	08013281 	.word	0x08013281
 801238c:	080131cd 	.word	0x080131cd
 8012390:	4b0a      	ldr	r3, [pc, #40]	@ (80123bc <__ssvfiscanf_r+0x2e8>)
 8012392:	2b00      	cmp	r3, #0
 8012394:	f43f aec6 	beq.w	8012124 <__ssvfiscanf_r+0x50>
 8012398:	466b      	mov	r3, sp
 801239a:	4622      	mov	r2, r4
 801239c:	a941      	add	r1, sp, #260	@ 0x104
 801239e:	4630      	mov	r0, r6
 80123a0:	f7fd f910 	bl	800f5c4 <_scanf_float>
 80123a4:	e7a0      	b.n	80122e8 <__ssvfiscanf_r+0x214>
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	065b      	lsls	r3, r3, #25
 80123aa:	f53f af71 	bmi.w	8012290 <__ssvfiscanf_r+0x1bc>
 80123ae:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80123b8:	e7f9      	b.n	80123ae <__ssvfiscanf_r+0x2da>
 80123ba:	bf00      	nop
 80123bc:	0800f5c5 	.word	0x0800f5c5

080123c0 <__sfputc_r>:
 80123c0:	6893      	ldr	r3, [r2, #8]
 80123c2:	3b01      	subs	r3, #1
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	b410      	push	{r4}
 80123c8:	6093      	str	r3, [r2, #8]
 80123ca:	da08      	bge.n	80123de <__sfputc_r+0x1e>
 80123cc:	6994      	ldr	r4, [r2, #24]
 80123ce:	42a3      	cmp	r3, r4
 80123d0:	db01      	blt.n	80123d6 <__sfputc_r+0x16>
 80123d2:	290a      	cmp	r1, #10
 80123d4:	d103      	bne.n	80123de <__sfputc_r+0x1e>
 80123d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123da:	f7fd bcbe 	b.w	800fd5a <__swbuf_r>
 80123de:	6813      	ldr	r3, [r2, #0]
 80123e0:	1c58      	adds	r0, r3, #1
 80123e2:	6010      	str	r0, [r2, #0]
 80123e4:	7019      	strb	r1, [r3, #0]
 80123e6:	4608      	mov	r0, r1
 80123e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123ec:	4770      	bx	lr

080123ee <__sfputs_r>:
 80123ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f0:	4606      	mov	r6, r0
 80123f2:	460f      	mov	r7, r1
 80123f4:	4614      	mov	r4, r2
 80123f6:	18d5      	adds	r5, r2, r3
 80123f8:	42ac      	cmp	r4, r5
 80123fa:	d101      	bne.n	8012400 <__sfputs_r+0x12>
 80123fc:	2000      	movs	r0, #0
 80123fe:	e007      	b.n	8012410 <__sfputs_r+0x22>
 8012400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012404:	463a      	mov	r2, r7
 8012406:	4630      	mov	r0, r6
 8012408:	f7ff ffda 	bl	80123c0 <__sfputc_r>
 801240c:	1c43      	adds	r3, r0, #1
 801240e:	d1f3      	bne.n	80123f8 <__sfputs_r+0xa>
 8012410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012414 <_vfiprintf_r>:
 8012414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012418:	460d      	mov	r5, r1
 801241a:	b09d      	sub	sp, #116	@ 0x74
 801241c:	4614      	mov	r4, r2
 801241e:	4698      	mov	r8, r3
 8012420:	4606      	mov	r6, r0
 8012422:	b118      	cbz	r0, 801242c <_vfiprintf_r+0x18>
 8012424:	6a03      	ldr	r3, [r0, #32]
 8012426:	b90b      	cbnz	r3, 801242c <_vfiprintf_r+0x18>
 8012428:	f7fd fb5e 	bl	800fae8 <__sinit>
 801242c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801242e:	07d9      	lsls	r1, r3, #31
 8012430:	d405      	bmi.n	801243e <_vfiprintf_r+0x2a>
 8012432:	89ab      	ldrh	r3, [r5, #12]
 8012434:	059a      	lsls	r2, r3, #22
 8012436:	d402      	bmi.n	801243e <_vfiprintf_r+0x2a>
 8012438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801243a:	f7fd fdc2 	bl	800ffc2 <__retarget_lock_acquire_recursive>
 801243e:	89ab      	ldrh	r3, [r5, #12]
 8012440:	071b      	lsls	r3, r3, #28
 8012442:	d501      	bpl.n	8012448 <_vfiprintf_r+0x34>
 8012444:	692b      	ldr	r3, [r5, #16]
 8012446:	b99b      	cbnz	r3, 8012470 <_vfiprintf_r+0x5c>
 8012448:	4629      	mov	r1, r5
 801244a:	4630      	mov	r0, r6
 801244c:	f7fd fcc4 	bl	800fdd8 <__swsetup_r>
 8012450:	b170      	cbz	r0, 8012470 <_vfiprintf_r+0x5c>
 8012452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012454:	07dc      	lsls	r4, r3, #31
 8012456:	d504      	bpl.n	8012462 <_vfiprintf_r+0x4e>
 8012458:	f04f 30ff 	mov.w	r0, #4294967295
 801245c:	b01d      	add	sp, #116	@ 0x74
 801245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012462:	89ab      	ldrh	r3, [r5, #12]
 8012464:	0598      	lsls	r0, r3, #22
 8012466:	d4f7      	bmi.n	8012458 <_vfiprintf_r+0x44>
 8012468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801246a:	f7fd fdab 	bl	800ffc4 <__retarget_lock_release_recursive>
 801246e:	e7f3      	b.n	8012458 <_vfiprintf_r+0x44>
 8012470:	2300      	movs	r3, #0
 8012472:	9309      	str	r3, [sp, #36]	@ 0x24
 8012474:	2320      	movs	r3, #32
 8012476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801247a:	f8cd 800c 	str.w	r8, [sp, #12]
 801247e:	2330      	movs	r3, #48	@ 0x30
 8012480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012630 <_vfiprintf_r+0x21c>
 8012484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012488:	f04f 0901 	mov.w	r9, #1
 801248c:	4623      	mov	r3, r4
 801248e:	469a      	mov	sl, r3
 8012490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012494:	b10a      	cbz	r2, 801249a <_vfiprintf_r+0x86>
 8012496:	2a25      	cmp	r2, #37	@ 0x25
 8012498:	d1f9      	bne.n	801248e <_vfiprintf_r+0x7a>
 801249a:	ebba 0b04 	subs.w	fp, sl, r4
 801249e:	d00b      	beq.n	80124b8 <_vfiprintf_r+0xa4>
 80124a0:	465b      	mov	r3, fp
 80124a2:	4622      	mov	r2, r4
 80124a4:	4629      	mov	r1, r5
 80124a6:	4630      	mov	r0, r6
 80124a8:	f7ff ffa1 	bl	80123ee <__sfputs_r>
 80124ac:	3001      	adds	r0, #1
 80124ae:	f000 80a7 	beq.w	8012600 <_vfiprintf_r+0x1ec>
 80124b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124b4:	445a      	add	r2, fp
 80124b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80124b8:	f89a 3000 	ldrb.w	r3, [sl]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f000 809f 	beq.w	8012600 <_vfiprintf_r+0x1ec>
 80124c2:	2300      	movs	r3, #0
 80124c4:	f04f 32ff 	mov.w	r2, #4294967295
 80124c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124cc:	f10a 0a01 	add.w	sl, sl, #1
 80124d0:	9304      	str	r3, [sp, #16]
 80124d2:	9307      	str	r3, [sp, #28]
 80124d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80124da:	4654      	mov	r4, sl
 80124dc:	2205      	movs	r2, #5
 80124de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e2:	4853      	ldr	r0, [pc, #332]	@ (8012630 <_vfiprintf_r+0x21c>)
 80124e4:	f7ed fefc 	bl	80002e0 <memchr>
 80124e8:	9a04      	ldr	r2, [sp, #16]
 80124ea:	b9d8      	cbnz	r0, 8012524 <_vfiprintf_r+0x110>
 80124ec:	06d1      	lsls	r1, r2, #27
 80124ee:	bf44      	itt	mi
 80124f0:	2320      	movmi	r3, #32
 80124f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124f6:	0713      	lsls	r3, r2, #28
 80124f8:	bf44      	itt	mi
 80124fa:	232b      	movmi	r3, #43	@ 0x2b
 80124fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012500:	f89a 3000 	ldrb.w	r3, [sl]
 8012504:	2b2a      	cmp	r3, #42	@ 0x2a
 8012506:	d015      	beq.n	8012534 <_vfiprintf_r+0x120>
 8012508:	9a07      	ldr	r2, [sp, #28]
 801250a:	4654      	mov	r4, sl
 801250c:	2000      	movs	r0, #0
 801250e:	f04f 0c0a 	mov.w	ip, #10
 8012512:	4621      	mov	r1, r4
 8012514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012518:	3b30      	subs	r3, #48	@ 0x30
 801251a:	2b09      	cmp	r3, #9
 801251c:	d94b      	bls.n	80125b6 <_vfiprintf_r+0x1a2>
 801251e:	b1b0      	cbz	r0, 801254e <_vfiprintf_r+0x13a>
 8012520:	9207      	str	r2, [sp, #28]
 8012522:	e014      	b.n	801254e <_vfiprintf_r+0x13a>
 8012524:	eba0 0308 	sub.w	r3, r0, r8
 8012528:	fa09 f303 	lsl.w	r3, r9, r3
 801252c:	4313      	orrs	r3, r2
 801252e:	9304      	str	r3, [sp, #16]
 8012530:	46a2      	mov	sl, r4
 8012532:	e7d2      	b.n	80124da <_vfiprintf_r+0xc6>
 8012534:	9b03      	ldr	r3, [sp, #12]
 8012536:	1d19      	adds	r1, r3, #4
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	9103      	str	r1, [sp, #12]
 801253c:	2b00      	cmp	r3, #0
 801253e:	bfbb      	ittet	lt
 8012540:	425b      	neglt	r3, r3
 8012542:	f042 0202 	orrlt.w	r2, r2, #2
 8012546:	9307      	strge	r3, [sp, #28]
 8012548:	9307      	strlt	r3, [sp, #28]
 801254a:	bfb8      	it	lt
 801254c:	9204      	strlt	r2, [sp, #16]
 801254e:	7823      	ldrb	r3, [r4, #0]
 8012550:	2b2e      	cmp	r3, #46	@ 0x2e
 8012552:	d10a      	bne.n	801256a <_vfiprintf_r+0x156>
 8012554:	7863      	ldrb	r3, [r4, #1]
 8012556:	2b2a      	cmp	r3, #42	@ 0x2a
 8012558:	d132      	bne.n	80125c0 <_vfiprintf_r+0x1ac>
 801255a:	9b03      	ldr	r3, [sp, #12]
 801255c:	1d1a      	adds	r2, r3, #4
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	9203      	str	r2, [sp, #12]
 8012562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012566:	3402      	adds	r4, #2
 8012568:	9305      	str	r3, [sp, #20]
 801256a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012640 <_vfiprintf_r+0x22c>
 801256e:	7821      	ldrb	r1, [r4, #0]
 8012570:	2203      	movs	r2, #3
 8012572:	4650      	mov	r0, sl
 8012574:	f7ed feb4 	bl	80002e0 <memchr>
 8012578:	b138      	cbz	r0, 801258a <_vfiprintf_r+0x176>
 801257a:	9b04      	ldr	r3, [sp, #16]
 801257c:	eba0 000a 	sub.w	r0, r0, sl
 8012580:	2240      	movs	r2, #64	@ 0x40
 8012582:	4082      	lsls	r2, r0
 8012584:	4313      	orrs	r3, r2
 8012586:	3401      	adds	r4, #1
 8012588:	9304      	str	r3, [sp, #16]
 801258a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801258e:	4829      	ldr	r0, [pc, #164]	@ (8012634 <_vfiprintf_r+0x220>)
 8012590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012594:	2206      	movs	r2, #6
 8012596:	f7ed fea3 	bl	80002e0 <memchr>
 801259a:	2800      	cmp	r0, #0
 801259c:	d03f      	beq.n	801261e <_vfiprintf_r+0x20a>
 801259e:	4b26      	ldr	r3, [pc, #152]	@ (8012638 <_vfiprintf_r+0x224>)
 80125a0:	bb1b      	cbnz	r3, 80125ea <_vfiprintf_r+0x1d6>
 80125a2:	9b03      	ldr	r3, [sp, #12]
 80125a4:	3307      	adds	r3, #7
 80125a6:	f023 0307 	bic.w	r3, r3, #7
 80125aa:	3308      	adds	r3, #8
 80125ac:	9303      	str	r3, [sp, #12]
 80125ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125b0:	443b      	add	r3, r7
 80125b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125b4:	e76a      	b.n	801248c <_vfiprintf_r+0x78>
 80125b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80125ba:	460c      	mov	r4, r1
 80125bc:	2001      	movs	r0, #1
 80125be:	e7a8      	b.n	8012512 <_vfiprintf_r+0xfe>
 80125c0:	2300      	movs	r3, #0
 80125c2:	3401      	adds	r4, #1
 80125c4:	9305      	str	r3, [sp, #20]
 80125c6:	4619      	mov	r1, r3
 80125c8:	f04f 0c0a 	mov.w	ip, #10
 80125cc:	4620      	mov	r0, r4
 80125ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125d2:	3a30      	subs	r2, #48	@ 0x30
 80125d4:	2a09      	cmp	r2, #9
 80125d6:	d903      	bls.n	80125e0 <_vfiprintf_r+0x1cc>
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d0c6      	beq.n	801256a <_vfiprintf_r+0x156>
 80125dc:	9105      	str	r1, [sp, #20]
 80125de:	e7c4      	b.n	801256a <_vfiprintf_r+0x156>
 80125e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80125e4:	4604      	mov	r4, r0
 80125e6:	2301      	movs	r3, #1
 80125e8:	e7f0      	b.n	80125cc <_vfiprintf_r+0x1b8>
 80125ea:	ab03      	add	r3, sp, #12
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	462a      	mov	r2, r5
 80125f0:	4b12      	ldr	r3, [pc, #72]	@ (801263c <_vfiprintf_r+0x228>)
 80125f2:	a904      	add	r1, sp, #16
 80125f4:	4630      	mov	r0, r6
 80125f6:	f7fc fc3f 	bl	800ee78 <_printf_float>
 80125fa:	4607      	mov	r7, r0
 80125fc:	1c78      	adds	r0, r7, #1
 80125fe:	d1d6      	bne.n	80125ae <_vfiprintf_r+0x19a>
 8012600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012602:	07d9      	lsls	r1, r3, #31
 8012604:	d405      	bmi.n	8012612 <_vfiprintf_r+0x1fe>
 8012606:	89ab      	ldrh	r3, [r5, #12]
 8012608:	059a      	lsls	r2, r3, #22
 801260a:	d402      	bmi.n	8012612 <_vfiprintf_r+0x1fe>
 801260c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801260e:	f7fd fcd9 	bl	800ffc4 <__retarget_lock_release_recursive>
 8012612:	89ab      	ldrh	r3, [r5, #12]
 8012614:	065b      	lsls	r3, r3, #25
 8012616:	f53f af1f 	bmi.w	8012458 <_vfiprintf_r+0x44>
 801261a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801261c:	e71e      	b.n	801245c <_vfiprintf_r+0x48>
 801261e:	ab03      	add	r3, sp, #12
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	462a      	mov	r2, r5
 8012624:	4b05      	ldr	r3, [pc, #20]	@ (801263c <_vfiprintf_r+0x228>)
 8012626:	a904      	add	r1, sp, #16
 8012628:	4630      	mov	r0, r6
 801262a:	f7fc fead 	bl	800f388 <_printf_i>
 801262e:	e7e4      	b.n	80125fa <_vfiprintf_r+0x1e6>
 8012630:	080131c7 	.word	0x080131c7
 8012634:	080131d1 	.word	0x080131d1
 8012638:	0800ee79 	.word	0x0800ee79
 801263c:	080123ef 	.word	0x080123ef
 8012640:	080131cd 	.word	0x080131cd

08012644 <_scanf_chars>:
 8012644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012648:	4615      	mov	r5, r2
 801264a:	688a      	ldr	r2, [r1, #8]
 801264c:	4680      	mov	r8, r0
 801264e:	460c      	mov	r4, r1
 8012650:	b932      	cbnz	r2, 8012660 <_scanf_chars+0x1c>
 8012652:	698a      	ldr	r2, [r1, #24]
 8012654:	2a00      	cmp	r2, #0
 8012656:	bf14      	ite	ne
 8012658:	f04f 32ff 	movne.w	r2, #4294967295
 801265c:	2201      	moveq	r2, #1
 801265e:	608a      	str	r2, [r1, #8]
 8012660:	6822      	ldr	r2, [r4, #0]
 8012662:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80126f4 <_scanf_chars+0xb0>
 8012666:	06d1      	lsls	r1, r2, #27
 8012668:	bf5f      	itttt	pl
 801266a:	681a      	ldrpl	r2, [r3, #0]
 801266c:	1d11      	addpl	r1, r2, #4
 801266e:	6019      	strpl	r1, [r3, #0]
 8012670:	6816      	ldrpl	r6, [r2, #0]
 8012672:	2700      	movs	r7, #0
 8012674:	69a0      	ldr	r0, [r4, #24]
 8012676:	b188      	cbz	r0, 801269c <_scanf_chars+0x58>
 8012678:	2801      	cmp	r0, #1
 801267a:	d107      	bne.n	801268c <_scanf_chars+0x48>
 801267c:	682b      	ldr	r3, [r5, #0]
 801267e:	781a      	ldrb	r2, [r3, #0]
 8012680:	6963      	ldr	r3, [r4, #20]
 8012682:	5c9b      	ldrb	r3, [r3, r2]
 8012684:	b953      	cbnz	r3, 801269c <_scanf_chars+0x58>
 8012686:	2f00      	cmp	r7, #0
 8012688:	d031      	beq.n	80126ee <_scanf_chars+0xaa>
 801268a:	e022      	b.n	80126d2 <_scanf_chars+0x8e>
 801268c:	2802      	cmp	r0, #2
 801268e:	d120      	bne.n	80126d2 <_scanf_chars+0x8e>
 8012690:	682b      	ldr	r3, [r5, #0]
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012698:	071b      	lsls	r3, r3, #28
 801269a:	d41a      	bmi.n	80126d2 <_scanf_chars+0x8e>
 801269c:	6823      	ldr	r3, [r4, #0]
 801269e:	06da      	lsls	r2, r3, #27
 80126a0:	bf5e      	ittt	pl
 80126a2:	682b      	ldrpl	r3, [r5, #0]
 80126a4:	781b      	ldrbpl	r3, [r3, #0]
 80126a6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80126aa:	682a      	ldr	r2, [r5, #0]
 80126ac:	686b      	ldr	r3, [r5, #4]
 80126ae:	3201      	adds	r2, #1
 80126b0:	602a      	str	r2, [r5, #0]
 80126b2:	68a2      	ldr	r2, [r4, #8]
 80126b4:	3b01      	subs	r3, #1
 80126b6:	3a01      	subs	r2, #1
 80126b8:	606b      	str	r3, [r5, #4]
 80126ba:	3701      	adds	r7, #1
 80126bc:	60a2      	str	r2, [r4, #8]
 80126be:	b142      	cbz	r2, 80126d2 <_scanf_chars+0x8e>
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	dcd7      	bgt.n	8012674 <_scanf_chars+0x30>
 80126c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80126c8:	4629      	mov	r1, r5
 80126ca:	4640      	mov	r0, r8
 80126cc:	4798      	blx	r3
 80126ce:	2800      	cmp	r0, #0
 80126d0:	d0d0      	beq.n	8012674 <_scanf_chars+0x30>
 80126d2:	6823      	ldr	r3, [r4, #0]
 80126d4:	f013 0310 	ands.w	r3, r3, #16
 80126d8:	d105      	bne.n	80126e6 <_scanf_chars+0xa2>
 80126da:	68e2      	ldr	r2, [r4, #12]
 80126dc:	3201      	adds	r2, #1
 80126de:	60e2      	str	r2, [r4, #12]
 80126e0:	69a2      	ldr	r2, [r4, #24]
 80126e2:	b102      	cbz	r2, 80126e6 <_scanf_chars+0xa2>
 80126e4:	7033      	strb	r3, [r6, #0]
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	443b      	add	r3, r7
 80126ea:	6123      	str	r3, [r4, #16]
 80126ec:	2000      	movs	r0, #0
 80126ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126f2:	bf00      	nop
 80126f4:	08013281 	.word	0x08013281

080126f8 <_scanf_i>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	4698      	mov	r8, r3
 80126fe:	4b74      	ldr	r3, [pc, #464]	@ (80128d0 <_scanf_i+0x1d8>)
 8012700:	460c      	mov	r4, r1
 8012702:	4682      	mov	sl, r0
 8012704:	4616      	mov	r6, r2
 8012706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801270a:	b087      	sub	sp, #28
 801270c:	ab03      	add	r3, sp, #12
 801270e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012712:	4b70      	ldr	r3, [pc, #448]	@ (80128d4 <_scanf_i+0x1dc>)
 8012714:	69a1      	ldr	r1, [r4, #24]
 8012716:	4a70      	ldr	r2, [pc, #448]	@ (80128d8 <_scanf_i+0x1e0>)
 8012718:	2903      	cmp	r1, #3
 801271a:	bf08      	it	eq
 801271c:	461a      	moveq	r2, r3
 801271e:	68a3      	ldr	r3, [r4, #8]
 8012720:	9201      	str	r2, [sp, #4]
 8012722:	1e5a      	subs	r2, r3, #1
 8012724:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012728:	bf88      	it	hi
 801272a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801272e:	4627      	mov	r7, r4
 8012730:	bf82      	ittt	hi
 8012732:	eb03 0905 	addhi.w	r9, r3, r5
 8012736:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801273a:	60a3      	strhi	r3, [r4, #8]
 801273c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012740:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012744:	bf98      	it	ls
 8012746:	f04f 0900 	movls.w	r9, #0
 801274a:	6023      	str	r3, [r4, #0]
 801274c:	463d      	mov	r5, r7
 801274e:	f04f 0b00 	mov.w	fp, #0
 8012752:	6831      	ldr	r1, [r6, #0]
 8012754:	ab03      	add	r3, sp, #12
 8012756:	7809      	ldrb	r1, [r1, #0]
 8012758:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801275c:	2202      	movs	r2, #2
 801275e:	f7ed fdbf 	bl	80002e0 <memchr>
 8012762:	b328      	cbz	r0, 80127b0 <_scanf_i+0xb8>
 8012764:	f1bb 0f01 	cmp.w	fp, #1
 8012768:	d159      	bne.n	801281e <_scanf_i+0x126>
 801276a:	6862      	ldr	r2, [r4, #4]
 801276c:	b92a      	cbnz	r2, 801277a <_scanf_i+0x82>
 801276e:	6822      	ldr	r2, [r4, #0]
 8012770:	2108      	movs	r1, #8
 8012772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012776:	6061      	str	r1, [r4, #4]
 8012778:	6022      	str	r2, [r4, #0]
 801277a:	6822      	ldr	r2, [r4, #0]
 801277c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012780:	6022      	str	r2, [r4, #0]
 8012782:	68a2      	ldr	r2, [r4, #8]
 8012784:	1e51      	subs	r1, r2, #1
 8012786:	60a1      	str	r1, [r4, #8]
 8012788:	b192      	cbz	r2, 80127b0 <_scanf_i+0xb8>
 801278a:	6832      	ldr	r2, [r6, #0]
 801278c:	1c51      	adds	r1, r2, #1
 801278e:	6031      	str	r1, [r6, #0]
 8012790:	7812      	ldrb	r2, [r2, #0]
 8012792:	f805 2b01 	strb.w	r2, [r5], #1
 8012796:	6872      	ldr	r2, [r6, #4]
 8012798:	3a01      	subs	r2, #1
 801279a:	2a00      	cmp	r2, #0
 801279c:	6072      	str	r2, [r6, #4]
 801279e:	dc07      	bgt.n	80127b0 <_scanf_i+0xb8>
 80127a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80127a4:	4631      	mov	r1, r6
 80127a6:	4650      	mov	r0, sl
 80127a8:	4790      	blx	r2
 80127aa:	2800      	cmp	r0, #0
 80127ac:	f040 8085 	bne.w	80128ba <_scanf_i+0x1c2>
 80127b0:	f10b 0b01 	add.w	fp, fp, #1
 80127b4:	f1bb 0f03 	cmp.w	fp, #3
 80127b8:	d1cb      	bne.n	8012752 <_scanf_i+0x5a>
 80127ba:	6863      	ldr	r3, [r4, #4]
 80127bc:	b90b      	cbnz	r3, 80127c2 <_scanf_i+0xca>
 80127be:	230a      	movs	r3, #10
 80127c0:	6063      	str	r3, [r4, #4]
 80127c2:	6863      	ldr	r3, [r4, #4]
 80127c4:	4945      	ldr	r1, [pc, #276]	@ (80128dc <_scanf_i+0x1e4>)
 80127c6:	6960      	ldr	r0, [r4, #20]
 80127c8:	1ac9      	subs	r1, r1, r3
 80127ca:	f000 f997 	bl	8012afc <__sccl>
 80127ce:	f04f 0b00 	mov.w	fp, #0
 80127d2:	68a3      	ldr	r3, [r4, #8]
 80127d4:	6822      	ldr	r2, [r4, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d03d      	beq.n	8012856 <_scanf_i+0x15e>
 80127da:	6831      	ldr	r1, [r6, #0]
 80127dc:	6960      	ldr	r0, [r4, #20]
 80127de:	f891 c000 	ldrb.w	ip, [r1]
 80127e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d035      	beq.n	8012856 <_scanf_i+0x15e>
 80127ea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80127ee:	d124      	bne.n	801283a <_scanf_i+0x142>
 80127f0:	0510      	lsls	r0, r2, #20
 80127f2:	d522      	bpl.n	801283a <_scanf_i+0x142>
 80127f4:	f10b 0b01 	add.w	fp, fp, #1
 80127f8:	f1b9 0f00 	cmp.w	r9, #0
 80127fc:	d003      	beq.n	8012806 <_scanf_i+0x10e>
 80127fe:	3301      	adds	r3, #1
 8012800:	f109 39ff 	add.w	r9, r9, #4294967295
 8012804:	60a3      	str	r3, [r4, #8]
 8012806:	6873      	ldr	r3, [r6, #4]
 8012808:	3b01      	subs	r3, #1
 801280a:	2b00      	cmp	r3, #0
 801280c:	6073      	str	r3, [r6, #4]
 801280e:	dd1b      	ble.n	8012848 <_scanf_i+0x150>
 8012810:	6833      	ldr	r3, [r6, #0]
 8012812:	3301      	adds	r3, #1
 8012814:	6033      	str	r3, [r6, #0]
 8012816:	68a3      	ldr	r3, [r4, #8]
 8012818:	3b01      	subs	r3, #1
 801281a:	60a3      	str	r3, [r4, #8]
 801281c:	e7d9      	b.n	80127d2 <_scanf_i+0xda>
 801281e:	f1bb 0f02 	cmp.w	fp, #2
 8012822:	d1ae      	bne.n	8012782 <_scanf_i+0x8a>
 8012824:	6822      	ldr	r2, [r4, #0]
 8012826:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801282a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801282e:	d1c4      	bne.n	80127ba <_scanf_i+0xc2>
 8012830:	2110      	movs	r1, #16
 8012832:	6061      	str	r1, [r4, #4]
 8012834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012838:	e7a2      	b.n	8012780 <_scanf_i+0x88>
 801283a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801283e:	6022      	str	r2, [r4, #0]
 8012840:	780b      	ldrb	r3, [r1, #0]
 8012842:	f805 3b01 	strb.w	r3, [r5], #1
 8012846:	e7de      	b.n	8012806 <_scanf_i+0x10e>
 8012848:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801284c:	4631      	mov	r1, r6
 801284e:	4650      	mov	r0, sl
 8012850:	4798      	blx	r3
 8012852:	2800      	cmp	r0, #0
 8012854:	d0df      	beq.n	8012816 <_scanf_i+0x11e>
 8012856:	6823      	ldr	r3, [r4, #0]
 8012858:	05d9      	lsls	r1, r3, #23
 801285a:	d50d      	bpl.n	8012878 <_scanf_i+0x180>
 801285c:	42bd      	cmp	r5, r7
 801285e:	d909      	bls.n	8012874 <_scanf_i+0x17c>
 8012860:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012868:	4632      	mov	r2, r6
 801286a:	4650      	mov	r0, sl
 801286c:	4798      	blx	r3
 801286e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012872:	464d      	mov	r5, r9
 8012874:	42bd      	cmp	r5, r7
 8012876:	d028      	beq.n	80128ca <_scanf_i+0x1d2>
 8012878:	6822      	ldr	r2, [r4, #0]
 801287a:	f012 0210 	ands.w	r2, r2, #16
 801287e:	d113      	bne.n	80128a8 <_scanf_i+0x1b0>
 8012880:	702a      	strb	r2, [r5, #0]
 8012882:	6863      	ldr	r3, [r4, #4]
 8012884:	9e01      	ldr	r6, [sp, #4]
 8012886:	4639      	mov	r1, r7
 8012888:	4650      	mov	r0, sl
 801288a:	47b0      	blx	r6
 801288c:	f8d8 3000 	ldr.w	r3, [r8]
 8012890:	6821      	ldr	r1, [r4, #0]
 8012892:	1d1a      	adds	r2, r3, #4
 8012894:	f8c8 2000 	str.w	r2, [r8]
 8012898:	f011 0f20 	tst.w	r1, #32
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	d00f      	beq.n	80128c0 <_scanf_i+0x1c8>
 80128a0:	6018      	str	r0, [r3, #0]
 80128a2:	68e3      	ldr	r3, [r4, #12]
 80128a4:	3301      	adds	r3, #1
 80128a6:	60e3      	str	r3, [r4, #12]
 80128a8:	6923      	ldr	r3, [r4, #16]
 80128aa:	1bed      	subs	r5, r5, r7
 80128ac:	445d      	add	r5, fp
 80128ae:	442b      	add	r3, r5
 80128b0:	6123      	str	r3, [r4, #16]
 80128b2:	2000      	movs	r0, #0
 80128b4:	b007      	add	sp, #28
 80128b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ba:	f04f 0b00 	mov.w	fp, #0
 80128be:	e7ca      	b.n	8012856 <_scanf_i+0x15e>
 80128c0:	07ca      	lsls	r2, r1, #31
 80128c2:	bf4c      	ite	mi
 80128c4:	8018      	strhmi	r0, [r3, #0]
 80128c6:	6018      	strpl	r0, [r3, #0]
 80128c8:	e7eb      	b.n	80128a2 <_scanf_i+0x1aa>
 80128ca:	2001      	movs	r0, #1
 80128cc:	e7f2      	b.n	80128b4 <_scanf_i+0x1bc>
 80128ce:	bf00      	nop
 80128d0:	08012f90 	.word	0x08012f90
 80128d4:	08011d55 	.word	0x08011d55
 80128d8:	08012d9d 	.word	0x08012d9d
 80128dc:	080131e8 	.word	0x080131e8

080128e0 <__sflush_r>:
 80128e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e8:	0716      	lsls	r6, r2, #28
 80128ea:	4605      	mov	r5, r0
 80128ec:	460c      	mov	r4, r1
 80128ee:	d454      	bmi.n	801299a <__sflush_r+0xba>
 80128f0:	684b      	ldr	r3, [r1, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc02      	bgt.n	80128fc <__sflush_r+0x1c>
 80128f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	dd48      	ble.n	801298e <__sflush_r+0xae>
 80128fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128fe:	2e00      	cmp	r6, #0
 8012900:	d045      	beq.n	801298e <__sflush_r+0xae>
 8012902:	2300      	movs	r3, #0
 8012904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012908:	682f      	ldr	r7, [r5, #0]
 801290a:	6a21      	ldr	r1, [r4, #32]
 801290c:	602b      	str	r3, [r5, #0]
 801290e:	d030      	beq.n	8012972 <__sflush_r+0x92>
 8012910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012912:	89a3      	ldrh	r3, [r4, #12]
 8012914:	0759      	lsls	r1, r3, #29
 8012916:	d505      	bpl.n	8012924 <__sflush_r+0x44>
 8012918:	6863      	ldr	r3, [r4, #4]
 801291a:	1ad2      	subs	r2, r2, r3
 801291c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801291e:	b10b      	cbz	r3, 8012924 <__sflush_r+0x44>
 8012920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012922:	1ad2      	subs	r2, r2, r3
 8012924:	2300      	movs	r3, #0
 8012926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012928:	6a21      	ldr	r1, [r4, #32]
 801292a:	4628      	mov	r0, r5
 801292c:	47b0      	blx	r6
 801292e:	1c43      	adds	r3, r0, #1
 8012930:	89a3      	ldrh	r3, [r4, #12]
 8012932:	d106      	bne.n	8012942 <__sflush_r+0x62>
 8012934:	6829      	ldr	r1, [r5, #0]
 8012936:	291d      	cmp	r1, #29
 8012938:	d82b      	bhi.n	8012992 <__sflush_r+0xb2>
 801293a:	4a2a      	ldr	r2, [pc, #168]	@ (80129e4 <__sflush_r+0x104>)
 801293c:	40ca      	lsrs	r2, r1
 801293e:	07d6      	lsls	r6, r2, #31
 8012940:	d527      	bpl.n	8012992 <__sflush_r+0xb2>
 8012942:	2200      	movs	r2, #0
 8012944:	6062      	str	r2, [r4, #4]
 8012946:	04d9      	lsls	r1, r3, #19
 8012948:	6922      	ldr	r2, [r4, #16]
 801294a:	6022      	str	r2, [r4, #0]
 801294c:	d504      	bpl.n	8012958 <__sflush_r+0x78>
 801294e:	1c42      	adds	r2, r0, #1
 8012950:	d101      	bne.n	8012956 <__sflush_r+0x76>
 8012952:	682b      	ldr	r3, [r5, #0]
 8012954:	b903      	cbnz	r3, 8012958 <__sflush_r+0x78>
 8012956:	6560      	str	r0, [r4, #84]	@ 0x54
 8012958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801295a:	602f      	str	r7, [r5, #0]
 801295c:	b1b9      	cbz	r1, 801298e <__sflush_r+0xae>
 801295e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012962:	4299      	cmp	r1, r3
 8012964:	d002      	beq.n	801296c <__sflush_r+0x8c>
 8012966:	4628      	mov	r0, r5
 8012968:	f7fe f934 	bl	8010bd4 <_free_r>
 801296c:	2300      	movs	r3, #0
 801296e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012970:	e00d      	b.n	801298e <__sflush_r+0xae>
 8012972:	2301      	movs	r3, #1
 8012974:	4628      	mov	r0, r5
 8012976:	47b0      	blx	r6
 8012978:	4602      	mov	r2, r0
 801297a:	1c50      	adds	r0, r2, #1
 801297c:	d1c9      	bne.n	8012912 <__sflush_r+0x32>
 801297e:	682b      	ldr	r3, [r5, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d0c6      	beq.n	8012912 <__sflush_r+0x32>
 8012984:	2b1d      	cmp	r3, #29
 8012986:	d001      	beq.n	801298c <__sflush_r+0xac>
 8012988:	2b16      	cmp	r3, #22
 801298a:	d11e      	bne.n	80129ca <__sflush_r+0xea>
 801298c:	602f      	str	r7, [r5, #0]
 801298e:	2000      	movs	r0, #0
 8012990:	e022      	b.n	80129d8 <__sflush_r+0xf8>
 8012992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012996:	b21b      	sxth	r3, r3
 8012998:	e01b      	b.n	80129d2 <__sflush_r+0xf2>
 801299a:	690f      	ldr	r7, [r1, #16]
 801299c:	2f00      	cmp	r7, #0
 801299e:	d0f6      	beq.n	801298e <__sflush_r+0xae>
 80129a0:	0793      	lsls	r3, r2, #30
 80129a2:	680e      	ldr	r6, [r1, #0]
 80129a4:	bf08      	it	eq
 80129a6:	694b      	ldreq	r3, [r1, #20]
 80129a8:	600f      	str	r7, [r1, #0]
 80129aa:	bf18      	it	ne
 80129ac:	2300      	movne	r3, #0
 80129ae:	eba6 0807 	sub.w	r8, r6, r7
 80129b2:	608b      	str	r3, [r1, #8]
 80129b4:	f1b8 0f00 	cmp.w	r8, #0
 80129b8:	dde9      	ble.n	801298e <__sflush_r+0xae>
 80129ba:	6a21      	ldr	r1, [r4, #32]
 80129bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129be:	4643      	mov	r3, r8
 80129c0:	463a      	mov	r2, r7
 80129c2:	4628      	mov	r0, r5
 80129c4:	47b0      	blx	r6
 80129c6:	2800      	cmp	r0, #0
 80129c8:	dc08      	bgt.n	80129dc <__sflush_r+0xfc>
 80129ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129d2:	81a3      	strh	r3, [r4, #12]
 80129d4:	f04f 30ff 	mov.w	r0, #4294967295
 80129d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129dc:	4407      	add	r7, r0
 80129de:	eba8 0800 	sub.w	r8, r8, r0
 80129e2:	e7e7      	b.n	80129b4 <__sflush_r+0xd4>
 80129e4:	20400001 	.word	0x20400001

080129e8 <_fflush_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	690b      	ldr	r3, [r1, #16]
 80129ec:	4605      	mov	r5, r0
 80129ee:	460c      	mov	r4, r1
 80129f0:	b913      	cbnz	r3, 80129f8 <_fflush_r+0x10>
 80129f2:	2500      	movs	r5, #0
 80129f4:	4628      	mov	r0, r5
 80129f6:	bd38      	pop	{r3, r4, r5, pc}
 80129f8:	b118      	cbz	r0, 8012a02 <_fflush_r+0x1a>
 80129fa:	6a03      	ldr	r3, [r0, #32]
 80129fc:	b90b      	cbnz	r3, 8012a02 <_fflush_r+0x1a>
 80129fe:	f7fd f873 	bl	800fae8 <__sinit>
 8012a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d0f3      	beq.n	80129f2 <_fflush_r+0xa>
 8012a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a0c:	07d0      	lsls	r0, r2, #31
 8012a0e:	d404      	bmi.n	8012a1a <_fflush_r+0x32>
 8012a10:	0599      	lsls	r1, r3, #22
 8012a12:	d402      	bmi.n	8012a1a <_fflush_r+0x32>
 8012a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a16:	f7fd fad4 	bl	800ffc2 <__retarget_lock_acquire_recursive>
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	f7ff ff5f 	bl	80128e0 <__sflush_r>
 8012a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a24:	07da      	lsls	r2, r3, #31
 8012a26:	4605      	mov	r5, r0
 8012a28:	d4e4      	bmi.n	80129f4 <_fflush_r+0xc>
 8012a2a:	89a3      	ldrh	r3, [r4, #12]
 8012a2c:	059b      	lsls	r3, r3, #22
 8012a2e:	d4e1      	bmi.n	80129f4 <_fflush_r+0xc>
 8012a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a32:	f7fd fac7 	bl	800ffc4 <__retarget_lock_release_recursive>
 8012a36:	e7dd      	b.n	80129f4 <_fflush_r+0xc>

08012a38 <__swhatbuf_r>:
 8012a38:	b570      	push	{r4, r5, r6, lr}
 8012a3a:	460c      	mov	r4, r1
 8012a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a40:	2900      	cmp	r1, #0
 8012a42:	b096      	sub	sp, #88	@ 0x58
 8012a44:	4615      	mov	r5, r2
 8012a46:	461e      	mov	r6, r3
 8012a48:	da0d      	bge.n	8012a66 <__swhatbuf_r+0x2e>
 8012a4a:	89a3      	ldrh	r3, [r4, #12]
 8012a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a50:	f04f 0100 	mov.w	r1, #0
 8012a54:	bf14      	ite	ne
 8012a56:	2340      	movne	r3, #64	@ 0x40
 8012a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a5c:	2000      	movs	r0, #0
 8012a5e:	6031      	str	r1, [r6, #0]
 8012a60:	602b      	str	r3, [r5, #0]
 8012a62:	b016      	add	sp, #88	@ 0x58
 8012a64:	bd70      	pop	{r4, r5, r6, pc}
 8012a66:	466a      	mov	r2, sp
 8012a68:	f000 f8d6 	bl	8012c18 <_fstat_r>
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	dbec      	blt.n	8012a4a <__swhatbuf_r+0x12>
 8012a70:	9901      	ldr	r1, [sp, #4]
 8012a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a7a:	4259      	negs	r1, r3
 8012a7c:	4159      	adcs	r1, r3
 8012a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a82:	e7eb      	b.n	8012a5c <__swhatbuf_r+0x24>

08012a84 <__smakebuf_r>:
 8012a84:	898b      	ldrh	r3, [r1, #12]
 8012a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a88:	079d      	lsls	r5, r3, #30
 8012a8a:	4606      	mov	r6, r0
 8012a8c:	460c      	mov	r4, r1
 8012a8e:	d507      	bpl.n	8012aa0 <__smakebuf_r+0x1c>
 8012a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a94:	6023      	str	r3, [r4, #0]
 8012a96:	6123      	str	r3, [r4, #16]
 8012a98:	2301      	movs	r3, #1
 8012a9a:	6163      	str	r3, [r4, #20]
 8012a9c:	b003      	add	sp, #12
 8012a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aa0:	ab01      	add	r3, sp, #4
 8012aa2:	466a      	mov	r2, sp
 8012aa4:	f7ff ffc8 	bl	8012a38 <__swhatbuf_r>
 8012aa8:	9f00      	ldr	r7, [sp, #0]
 8012aaa:	4605      	mov	r5, r0
 8012aac:	4639      	mov	r1, r7
 8012aae:	4630      	mov	r0, r6
 8012ab0:	f7fb fad4 	bl	800e05c <_malloc_r>
 8012ab4:	b948      	cbnz	r0, 8012aca <__smakebuf_r+0x46>
 8012ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aba:	059a      	lsls	r2, r3, #22
 8012abc:	d4ee      	bmi.n	8012a9c <__smakebuf_r+0x18>
 8012abe:	f023 0303 	bic.w	r3, r3, #3
 8012ac2:	f043 0302 	orr.w	r3, r3, #2
 8012ac6:	81a3      	strh	r3, [r4, #12]
 8012ac8:	e7e2      	b.n	8012a90 <__smakebuf_r+0xc>
 8012aca:	89a3      	ldrh	r3, [r4, #12]
 8012acc:	6020      	str	r0, [r4, #0]
 8012ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ad2:	81a3      	strh	r3, [r4, #12]
 8012ad4:	9b01      	ldr	r3, [sp, #4]
 8012ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012ada:	b15b      	cbz	r3, 8012af4 <__smakebuf_r+0x70>
 8012adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f000 f8ab 	bl	8012c3c <_isatty_r>
 8012ae6:	b128      	cbz	r0, 8012af4 <__smakebuf_r+0x70>
 8012ae8:	89a3      	ldrh	r3, [r4, #12]
 8012aea:	f023 0303 	bic.w	r3, r3, #3
 8012aee:	f043 0301 	orr.w	r3, r3, #1
 8012af2:	81a3      	strh	r3, [r4, #12]
 8012af4:	89a3      	ldrh	r3, [r4, #12]
 8012af6:	431d      	orrs	r5, r3
 8012af8:	81a5      	strh	r5, [r4, #12]
 8012afa:	e7cf      	b.n	8012a9c <__smakebuf_r+0x18>

08012afc <__sccl>:
 8012afc:	b570      	push	{r4, r5, r6, lr}
 8012afe:	780b      	ldrb	r3, [r1, #0]
 8012b00:	4604      	mov	r4, r0
 8012b02:	2b5e      	cmp	r3, #94	@ 0x5e
 8012b04:	bf0b      	itete	eq
 8012b06:	784b      	ldrbeq	r3, [r1, #1]
 8012b08:	1c4a      	addne	r2, r1, #1
 8012b0a:	1c8a      	addeq	r2, r1, #2
 8012b0c:	2100      	movne	r1, #0
 8012b0e:	bf08      	it	eq
 8012b10:	2101      	moveq	r1, #1
 8012b12:	3801      	subs	r0, #1
 8012b14:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012b18:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012b1c:	42a8      	cmp	r0, r5
 8012b1e:	d1fb      	bne.n	8012b18 <__sccl+0x1c>
 8012b20:	b90b      	cbnz	r3, 8012b26 <__sccl+0x2a>
 8012b22:	1e50      	subs	r0, r2, #1
 8012b24:	bd70      	pop	{r4, r5, r6, pc}
 8012b26:	f081 0101 	eor.w	r1, r1, #1
 8012b2a:	54e1      	strb	r1, [r4, r3]
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	4602      	mov	r2, r0
 8012b30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012b34:	2d2d      	cmp	r5, #45	@ 0x2d
 8012b36:	d005      	beq.n	8012b44 <__sccl+0x48>
 8012b38:	2d5d      	cmp	r5, #93	@ 0x5d
 8012b3a:	d016      	beq.n	8012b6a <__sccl+0x6e>
 8012b3c:	2d00      	cmp	r5, #0
 8012b3e:	d0f1      	beq.n	8012b24 <__sccl+0x28>
 8012b40:	462b      	mov	r3, r5
 8012b42:	e7f2      	b.n	8012b2a <__sccl+0x2e>
 8012b44:	7846      	ldrb	r6, [r0, #1]
 8012b46:	2e5d      	cmp	r6, #93	@ 0x5d
 8012b48:	d0fa      	beq.n	8012b40 <__sccl+0x44>
 8012b4a:	42b3      	cmp	r3, r6
 8012b4c:	dcf8      	bgt.n	8012b40 <__sccl+0x44>
 8012b4e:	3002      	adds	r0, #2
 8012b50:	461a      	mov	r2, r3
 8012b52:	3201      	adds	r2, #1
 8012b54:	4296      	cmp	r6, r2
 8012b56:	54a1      	strb	r1, [r4, r2]
 8012b58:	dcfb      	bgt.n	8012b52 <__sccl+0x56>
 8012b5a:	1af2      	subs	r2, r6, r3
 8012b5c:	3a01      	subs	r2, #1
 8012b5e:	1c5d      	adds	r5, r3, #1
 8012b60:	42b3      	cmp	r3, r6
 8012b62:	bfa8      	it	ge
 8012b64:	2200      	movge	r2, #0
 8012b66:	18ab      	adds	r3, r5, r2
 8012b68:	e7e1      	b.n	8012b2e <__sccl+0x32>
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	e7da      	b.n	8012b24 <__sccl+0x28>

08012b6e <__submore>:
 8012b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b72:	460c      	mov	r4, r1
 8012b74:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b7a:	4299      	cmp	r1, r3
 8012b7c:	d11d      	bne.n	8012bba <__submore+0x4c>
 8012b7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012b82:	f7fb fa6b 	bl	800e05c <_malloc_r>
 8012b86:	b918      	cbnz	r0, 8012b90 <__submore+0x22>
 8012b88:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012b96:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012b9a:	6360      	str	r0, [r4, #52]	@ 0x34
 8012b9c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012ba0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012ba4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012ba8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012bac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012bb0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012bb4:	6020      	str	r0, [r4, #0]
 8012bb6:	2000      	movs	r0, #0
 8012bb8:	e7e8      	b.n	8012b8c <__submore+0x1e>
 8012bba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012bbc:	0077      	lsls	r7, r6, #1
 8012bbe:	463a      	mov	r2, r7
 8012bc0:	f7fb fae0 	bl	800e184 <_realloc_r>
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	d0de      	beq.n	8012b88 <__submore+0x1a>
 8012bca:	eb00 0806 	add.w	r8, r0, r6
 8012bce:	4601      	mov	r1, r0
 8012bd0:	4632      	mov	r2, r6
 8012bd2:	4640      	mov	r0, r8
 8012bd4:	f7fd f9f7 	bl	800ffc6 <memcpy>
 8012bd8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012bdc:	f8c4 8000 	str.w	r8, [r4]
 8012be0:	e7e9      	b.n	8012bb6 <__submore+0x48>

08012be2 <memmove>:
 8012be2:	4288      	cmp	r0, r1
 8012be4:	b510      	push	{r4, lr}
 8012be6:	eb01 0402 	add.w	r4, r1, r2
 8012bea:	d902      	bls.n	8012bf2 <memmove+0x10>
 8012bec:	4284      	cmp	r4, r0
 8012bee:	4623      	mov	r3, r4
 8012bf0:	d807      	bhi.n	8012c02 <memmove+0x20>
 8012bf2:	1e43      	subs	r3, r0, #1
 8012bf4:	42a1      	cmp	r1, r4
 8012bf6:	d008      	beq.n	8012c0a <memmove+0x28>
 8012bf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c00:	e7f8      	b.n	8012bf4 <memmove+0x12>
 8012c02:	4402      	add	r2, r0
 8012c04:	4601      	mov	r1, r0
 8012c06:	428a      	cmp	r2, r1
 8012c08:	d100      	bne.n	8012c0c <memmove+0x2a>
 8012c0a:	bd10      	pop	{r4, pc}
 8012c0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c14:	e7f7      	b.n	8012c06 <memmove+0x24>
	...

08012c18 <_fstat_r>:
 8012c18:	b538      	push	{r3, r4, r5, lr}
 8012c1a:	4d07      	ldr	r5, [pc, #28]	@ (8012c38 <_fstat_r+0x20>)
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4604      	mov	r4, r0
 8012c20:	4608      	mov	r0, r1
 8012c22:	4611      	mov	r1, r2
 8012c24:	602b      	str	r3, [r5, #0]
 8012c26:	f7ef fce7 	bl	80025f8 <_fstat>
 8012c2a:	1c43      	adds	r3, r0, #1
 8012c2c:	d102      	bne.n	8012c34 <_fstat_r+0x1c>
 8012c2e:	682b      	ldr	r3, [r5, #0]
 8012c30:	b103      	cbz	r3, 8012c34 <_fstat_r+0x1c>
 8012c32:	6023      	str	r3, [r4, #0]
 8012c34:	bd38      	pop	{r3, r4, r5, pc}
 8012c36:	bf00      	nop
 8012c38:	24004f04 	.word	0x24004f04

08012c3c <_isatty_r>:
 8012c3c:	b538      	push	{r3, r4, r5, lr}
 8012c3e:	4d06      	ldr	r5, [pc, #24]	@ (8012c58 <_isatty_r+0x1c>)
 8012c40:	2300      	movs	r3, #0
 8012c42:	4604      	mov	r4, r0
 8012c44:	4608      	mov	r0, r1
 8012c46:	602b      	str	r3, [r5, #0]
 8012c48:	f7ef fce6 	bl	8002618 <_isatty>
 8012c4c:	1c43      	adds	r3, r0, #1
 8012c4e:	d102      	bne.n	8012c56 <_isatty_r+0x1a>
 8012c50:	682b      	ldr	r3, [r5, #0]
 8012c52:	b103      	cbz	r3, 8012c56 <_isatty_r+0x1a>
 8012c54:	6023      	str	r3, [r4, #0]
 8012c56:	bd38      	pop	{r3, r4, r5, pc}
 8012c58:	24004f04 	.word	0x24004f04

08012c5c <__assert_func>:
 8012c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c5e:	4614      	mov	r4, r2
 8012c60:	461a      	mov	r2, r3
 8012c62:	4b09      	ldr	r3, [pc, #36]	@ (8012c88 <__assert_func+0x2c>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4605      	mov	r5, r0
 8012c68:	68d8      	ldr	r0, [r3, #12]
 8012c6a:	b14c      	cbz	r4, 8012c80 <__assert_func+0x24>
 8012c6c:	4b07      	ldr	r3, [pc, #28]	@ (8012c8c <__assert_func+0x30>)
 8012c6e:	9100      	str	r1, [sp, #0]
 8012c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c74:	4906      	ldr	r1, [pc, #24]	@ (8012c90 <__assert_func+0x34>)
 8012c76:	462b      	mov	r3, r5
 8012c78:	f000 f892 	bl	8012da0 <fiprintf>
 8012c7c:	f000 f8a2 	bl	8012dc4 <abort>
 8012c80:	4b04      	ldr	r3, [pc, #16]	@ (8012c94 <__assert_func+0x38>)
 8012c82:	461c      	mov	r4, r3
 8012c84:	e7f3      	b.n	8012c6e <__assert_func+0x12>
 8012c86:	bf00      	nop
 8012c88:	24000198 	.word	0x24000198
 8012c8c:	080131f3 	.word	0x080131f3
 8012c90:	08013200 	.word	0x08013200
 8012c94:	0801322e 	.word	0x0801322e

08012c98 <_calloc_r>:
 8012c98:	b570      	push	{r4, r5, r6, lr}
 8012c9a:	fba1 5402 	umull	r5, r4, r1, r2
 8012c9e:	b934      	cbnz	r4, 8012cae <_calloc_r+0x16>
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	f7fb f9db 	bl	800e05c <_malloc_r>
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	b928      	cbnz	r0, 8012cb6 <_calloc_r+0x1e>
 8012caa:	4630      	mov	r0, r6
 8012cac:	bd70      	pop	{r4, r5, r6, pc}
 8012cae:	220c      	movs	r2, #12
 8012cb0:	6002      	str	r2, [r0, #0]
 8012cb2:	2600      	movs	r6, #0
 8012cb4:	e7f9      	b.n	8012caa <_calloc_r+0x12>
 8012cb6:	462a      	mov	r2, r5
 8012cb8:	4621      	mov	r1, r4
 8012cba:	f7fd f8e3 	bl	800fe84 <memset>
 8012cbe:	e7f4      	b.n	8012caa <_calloc_r+0x12>

08012cc0 <_strtoul_l.isra.0>:
 8012cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cc4:	4e34      	ldr	r6, [pc, #208]	@ (8012d98 <_strtoul_l.isra.0+0xd8>)
 8012cc6:	4686      	mov	lr, r0
 8012cc8:	460d      	mov	r5, r1
 8012cca:	4628      	mov	r0, r5
 8012ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cd0:	5d37      	ldrb	r7, [r6, r4]
 8012cd2:	f017 0708 	ands.w	r7, r7, #8
 8012cd6:	d1f8      	bne.n	8012cca <_strtoul_l.isra.0+0xa>
 8012cd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8012cda:	d110      	bne.n	8012cfe <_strtoul_l.isra.0+0x3e>
 8012cdc:	782c      	ldrb	r4, [r5, #0]
 8012cde:	2701      	movs	r7, #1
 8012ce0:	1c85      	adds	r5, r0, #2
 8012ce2:	f033 0010 	bics.w	r0, r3, #16
 8012ce6:	d115      	bne.n	8012d14 <_strtoul_l.isra.0+0x54>
 8012ce8:	2c30      	cmp	r4, #48	@ 0x30
 8012cea:	d10d      	bne.n	8012d08 <_strtoul_l.isra.0+0x48>
 8012cec:	7828      	ldrb	r0, [r5, #0]
 8012cee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012cf2:	2858      	cmp	r0, #88	@ 0x58
 8012cf4:	d108      	bne.n	8012d08 <_strtoul_l.isra.0+0x48>
 8012cf6:	786c      	ldrb	r4, [r5, #1]
 8012cf8:	3502      	adds	r5, #2
 8012cfa:	2310      	movs	r3, #16
 8012cfc:	e00a      	b.n	8012d14 <_strtoul_l.isra.0+0x54>
 8012cfe:	2c2b      	cmp	r4, #43	@ 0x2b
 8012d00:	bf04      	itt	eq
 8012d02:	782c      	ldrbeq	r4, [r5, #0]
 8012d04:	1c85      	addeq	r5, r0, #2
 8012d06:	e7ec      	b.n	8012ce2 <_strtoul_l.isra.0+0x22>
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1f6      	bne.n	8012cfa <_strtoul_l.isra.0+0x3a>
 8012d0c:	2c30      	cmp	r4, #48	@ 0x30
 8012d0e:	bf14      	ite	ne
 8012d10:	230a      	movne	r3, #10
 8012d12:	2308      	moveq	r3, #8
 8012d14:	f04f 38ff 	mov.w	r8, #4294967295
 8012d18:	2600      	movs	r6, #0
 8012d1a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012d1e:	fb03 f908 	mul.w	r9, r3, r8
 8012d22:	ea6f 0909 	mvn.w	r9, r9
 8012d26:	4630      	mov	r0, r6
 8012d28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012d2c:	f1bc 0f09 	cmp.w	ip, #9
 8012d30:	d810      	bhi.n	8012d54 <_strtoul_l.isra.0+0x94>
 8012d32:	4664      	mov	r4, ip
 8012d34:	42a3      	cmp	r3, r4
 8012d36:	dd1e      	ble.n	8012d76 <_strtoul_l.isra.0+0xb6>
 8012d38:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012d3c:	d007      	beq.n	8012d4e <_strtoul_l.isra.0+0x8e>
 8012d3e:	4580      	cmp	r8, r0
 8012d40:	d316      	bcc.n	8012d70 <_strtoul_l.isra.0+0xb0>
 8012d42:	d101      	bne.n	8012d48 <_strtoul_l.isra.0+0x88>
 8012d44:	45a1      	cmp	r9, r4
 8012d46:	db13      	blt.n	8012d70 <_strtoul_l.isra.0+0xb0>
 8012d48:	fb00 4003 	mla	r0, r0, r3, r4
 8012d4c:	2601      	movs	r6, #1
 8012d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012d52:	e7e9      	b.n	8012d28 <_strtoul_l.isra.0+0x68>
 8012d54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012d58:	f1bc 0f19 	cmp.w	ip, #25
 8012d5c:	d801      	bhi.n	8012d62 <_strtoul_l.isra.0+0xa2>
 8012d5e:	3c37      	subs	r4, #55	@ 0x37
 8012d60:	e7e8      	b.n	8012d34 <_strtoul_l.isra.0+0x74>
 8012d62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012d66:	f1bc 0f19 	cmp.w	ip, #25
 8012d6a:	d804      	bhi.n	8012d76 <_strtoul_l.isra.0+0xb6>
 8012d6c:	3c57      	subs	r4, #87	@ 0x57
 8012d6e:	e7e1      	b.n	8012d34 <_strtoul_l.isra.0+0x74>
 8012d70:	f04f 36ff 	mov.w	r6, #4294967295
 8012d74:	e7eb      	b.n	8012d4e <_strtoul_l.isra.0+0x8e>
 8012d76:	1c73      	adds	r3, r6, #1
 8012d78:	d106      	bne.n	8012d88 <_strtoul_l.isra.0+0xc8>
 8012d7a:	2322      	movs	r3, #34	@ 0x22
 8012d7c:	f8ce 3000 	str.w	r3, [lr]
 8012d80:	4630      	mov	r0, r6
 8012d82:	b932      	cbnz	r2, 8012d92 <_strtoul_l.isra.0+0xd2>
 8012d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d88:	b107      	cbz	r7, 8012d8c <_strtoul_l.isra.0+0xcc>
 8012d8a:	4240      	negs	r0, r0
 8012d8c:	2a00      	cmp	r2, #0
 8012d8e:	d0f9      	beq.n	8012d84 <_strtoul_l.isra.0+0xc4>
 8012d90:	b106      	cbz	r6, 8012d94 <_strtoul_l.isra.0+0xd4>
 8012d92:	1e69      	subs	r1, r5, #1
 8012d94:	6011      	str	r1, [r2, #0]
 8012d96:	e7f5      	b.n	8012d84 <_strtoul_l.isra.0+0xc4>
 8012d98:	08013281 	.word	0x08013281

08012d9c <_strtoul_r>:
 8012d9c:	f7ff bf90 	b.w	8012cc0 <_strtoul_l.isra.0>

08012da0 <fiprintf>:
 8012da0:	b40e      	push	{r1, r2, r3}
 8012da2:	b503      	push	{r0, r1, lr}
 8012da4:	4601      	mov	r1, r0
 8012da6:	ab03      	add	r3, sp, #12
 8012da8:	4805      	ldr	r0, [pc, #20]	@ (8012dc0 <fiprintf+0x20>)
 8012daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dae:	6800      	ldr	r0, [r0, #0]
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	f7ff fb2f 	bl	8012414 <_vfiprintf_r>
 8012db6:	b002      	add	sp, #8
 8012db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dbc:	b003      	add	sp, #12
 8012dbe:	4770      	bx	lr
 8012dc0:	24000198 	.word	0x24000198

08012dc4 <abort>:
 8012dc4:	b508      	push	{r3, lr}
 8012dc6:	2006      	movs	r0, #6
 8012dc8:	f000 f82c 	bl	8012e24 <raise>
 8012dcc:	2001      	movs	r0, #1
 8012dce:	f7ef fbc3 	bl	8002558 <_exit>

08012dd2 <_raise_r>:
 8012dd2:	291f      	cmp	r1, #31
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4605      	mov	r5, r0
 8012dd8:	460c      	mov	r4, r1
 8012dda:	d904      	bls.n	8012de6 <_raise_r+0x14>
 8012ddc:	2316      	movs	r3, #22
 8012dde:	6003      	str	r3, [r0, #0]
 8012de0:	f04f 30ff 	mov.w	r0, #4294967295
 8012de4:	bd38      	pop	{r3, r4, r5, pc}
 8012de6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012de8:	b112      	cbz	r2, 8012df0 <_raise_r+0x1e>
 8012dea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012dee:	b94b      	cbnz	r3, 8012e04 <_raise_r+0x32>
 8012df0:	4628      	mov	r0, r5
 8012df2:	f000 f831 	bl	8012e58 <_getpid_r>
 8012df6:	4622      	mov	r2, r4
 8012df8:	4601      	mov	r1, r0
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e00:	f000 b818 	b.w	8012e34 <_kill_r>
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d00a      	beq.n	8012e1e <_raise_r+0x4c>
 8012e08:	1c59      	adds	r1, r3, #1
 8012e0a:	d103      	bne.n	8012e14 <_raise_r+0x42>
 8012e0c:	2316      	movs	r3, #22
 8012e0e:	6003      	str	r3, [r0, #0]
 8012e10:	2001      	movs	r0, #1
 8012e12:	e7e7      	b.n	8012de4 <_raise_r+0x12>
 8012e14:	2100      	movs	r1, #0
 8012e16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	4798      	blx	r3
 8012e1e:	2000      	movs	r0, #0
 8012e20:	e7e0      	b.n	8012de4 <_raise_r+0x12>
	...

08012e24 <raise>:
 8012e24:	4b02      	ldr	r3, [pc, #8]	@ (8012e30 <raise+0xc>)
 8012e26:	4601      	mov	r1, r0
 8012e28:	6818      	ldr	r0, [r3, #0]
 8012e2a:	f7ff bfd2 	b.w	8012dd2 <_raise_r>
 8012e2e:	bf00      	nop
 8012e30:	24000198 	.word	0x24000198

08012e34 <_kill_r>:
 8012e34:	b538      	push	{r3, r4, r5, lr}
 8012e36:	4d07      	ldr	r5, [pc, #28]	@ (8012e54 <_kill_r+0x20>)
 8012e38:	2300      	movs	r3, #0
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	4608      	mov	r0, r1
 8012e3e:	4611      	mov	r1, r2
 8012e40:	602b      	str	r3, [r5, #0]
 8012e42:	f7ef fb79 	bl	8002538 <_kill>
 8012e46:	1c43      	adds	r3, r0, #1
 8012e48:	d102      	bne.n	8012e50 <_kill_r+0x1c>
 8012e4a:	682b      	ldr	r3, [r5, #0]
 8012e4c:	b103      	cbz	r3, 8012e50 <_kill_r+0x1c>
 8012e4e:	6023      	str	r3, [r4, #0]
 8012e50:	bd38      	pop	{r3, r4, r5, pc}
 8012e52:	bf00      	nop
 8012e54:	24004f04 	.word	0x24004f04

08012e58 <_getpid_r>:
 8012e58:	f7ef bb66 	b.w	8002528 <_getpid>

08012e5c <_init>:
 8012e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e5e:	bf00      	nop
 8012e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e62:	bc08      	pop	{r3}
 8012e64:	469e      	mov	lr, r3
 8012e66:	4770      	bx	lr

08012e68 <_fini>:
 8012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6a:	bf00      	nop
 8012e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e6e:	bc08      	pop	{r3}
 8012e70:	469e      	mov	lr, r3
 8012e72:	4770      	bx	lr
