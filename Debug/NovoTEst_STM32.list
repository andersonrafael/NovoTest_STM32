
NovoTEst_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001120c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  080114b0  080114b0  000124b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011a40  08011a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011a48  08011a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011a4c  08011a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08011a50  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d28  240001dc  08011c2c  000131dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004f04  08011c2c  00013f04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024b8b  00000000  00000000  0001320a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049d5  00000000  00000000  00037d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bd0  00000000  00000000  0003c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001583  00000000  00000000  0003e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b119  00000000  00000000  0003f8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025d6b  00000000  00000000  0007a9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176e59  00000000  00000000  000a0747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002175a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008864  00000000  00000000  002175e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  0021fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011494 	.word	0x08011494

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08011494 	.word	0x08011494

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	200b      	movs	r0, #11
 8000ace:	f001 f90d 	bl	8001cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f001 f924 	bl	8001d20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2105      	movs	r1, #5
 8000adc:	200c      	movs	r0, #12
 8000ade:	f001 f905 	bl	8001cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f001 f91c 	bl	8001d20 <HAL_NVIC_EnableIRQ>

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58024400 	.word	0x58024400

08000af4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorDataQueue */
	sensorDataQueueHandle = osMessageQueueNew (10, sizeof(SensorData_t), &sensorDataQueue_attributes);
 8000af8:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <MX_FREERTOS_Init+0x48>)
 8000afa:	210c      	movs	r1, #12
 8000afc:	200a      	movs	r0, #10
 8000afe:	f009 fc56 	bl	800a3ae <osMessageQueueNew>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <MX_FREERTOS_Init+0x4c>)
 8000b06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b08:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <MX_FREERTOS_Init+0x50>)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_FREERTOS_Init+0x54>)
 8000b0e:	f009 fba1 	bl	800a254 <osThreadNew>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <MX_FREERTOS_Init+0x58>)
 8000b16:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <MX_FREERTOS_Init+0x5c>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_FREERTOS_Init+0x60>)
 8000b1e:	f009 fb99 	bl	800a254 <osThreadNew>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <MX_FREERTOS_Init+0x64>)
 8000b26:	6013      	str	r3, [r2, #0]

  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <MX_FREERTOS_Init+0x68>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <MX_FREERTOS_Init+0x6c>)
 8000b2e:	f009 fb91 	bl	800a254 <osThreadNew>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <MX_FREERTOS_Init+0x70>)
 8000b36:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	080115c0 	.word	0x080115c0
 8000b40:	24000204 	.word	0x24000204
 8000b44:	08011554 	.word	0x08011554
 8000b48:	08000b69 	.word	0x08000b69
 8000b4c:	240001f8 	.word	0x240001f8
 8000b50:	08011578 	.word	0x08011578
 8000b54:	08000b79 	.word	0x08000b79
 8000b58:	240001fc 	.word	0x240001fc
 8000b5c:	0801159c 	.word	0x0801159c
 8000b60:	08000bd1 	.word	0x08000bd1
 8000b64:	24000200 	.word	0x24000200

08000b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f009 fc01 	bl	800a378 <osDelay>
 8000b76:	e7fb      	b.n	8000b70 <StartDefaultTask+0x8>

08000b78 <StartProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // 1. Realiza a leitura filtrada do ADC
    sensor_data.raw_adc = get_filtered_reading();
 8000b80:	f000 f992 	bl	8000ea8 <get_filtered_reading>
 8000b84:	4603      	mov	r3, r0
 8000b86:	81bb      	strh	r3, [r7, #12]

    // 2. Converte o valor bruto para tensão
    sensor_data.voltage_mv = raw_to_voltage_mV(sensor_data.raw_adc);
 8000b88:	89bb      	ldrh	r3, [r7, #12]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f9b0 	bl	8000ef0 <raw_to_voltage_mV>
 8000b90:	eef0 7a40 	vmov.f32	s15, s0
 8000b94:	edc7 7a04 	vstr	s15, [r7, #16]

    // 3. Converte a tensão para corrente
    sensor_data.current_ma = voltage_to_current_mA(sensor_data.voltage_mv);
 8000b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba0:	f000 f9c4 	bl	8000f2c <voltage_to_current_mA>
 8000ba4:	eef0 7a40 	vmov.f32	s15, s0
 8000ba8:	edc7 7a05 	vstr	s15, [r7, #20]

    // 4. Envia a estrutura completa para a fila
    osMessageQueuePut(sensorDataQueueHandle, &sensor_data, 0U, osWaitForever);
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <StartProducerTask+0x54>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	f107 010c 	add.w	r1, r7, #12
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f009 fc6b 	bl	800a494 <osMessageQueuePut>

    // 5. Aguarda um tempo antes da próxima medição (ex: 1 segundo)
    osDelay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc2:	f009 fbd9 	bl	800a378 <osDelay>
    sensor_data.raw_adc = get_filtered_reading();
 8000bc6:	bf00      	nop
 8000bc8:	e7da      	b.n	8000b80 <StartProducerTask+0x8>
 8000bca:	bf00      	nop
 8000bcc:	24000204 	.word	0x24000204

08000bd0 <StartConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	4a54      	ldr	r2, [pc, #336]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0a:	4b52      	ldr	r3, [pc, #328]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c28:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a45      	ldr	r2, [pc, #276]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b43      	ldr	r3, [pc, #268]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a36      	ldr	r2, [pc, #216]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b34      	ldr	r3, [pc, #208]	@ (8000d54 <MX_GPIO_Init+0x170>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2110      	movs	r1, #16
 8000c94:	4830      	ldr	r0, [pc, #192]	@ (8000d58 <MX_GPIO_Init+0x174>)
 8000c96:	f003 fc9f 	bl	80045d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ca0:	482e      	ldr	r0, [pc, #184]	@ (8000d5c <MX_GPIO_Init+0x178>)
 8000ca2:	f003 fc99 	bl	80045d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cac:	482c      	ldr	r0, [pc, #176]	@ (8000d60 <MX_GPIO_Init+0x17c>)
 8000cae:	f003 fc93 	bl	80045d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <MX_GPIO_Init+0x180>)
 8000cb8:	f003 fc8e 	bl	80045d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4825      	ldr	r0, [pc, #148]	@ (8000d68 <MX_GPIO_Init+0x184>)
 8000cd4:	f003 fad0 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	481a      	ldr	r0, [pc, #104]	@ (8000d58 <MX_GPIO_Init+0x174>)
 8000cf0:	f003 fac2 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cf4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <MX_GPIO_Init+0x178>)
 8000d0e:	f003 fab3 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8000d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <MX_GPIO_Init+0x17c>)
 8000d2c:	f003 faa4 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d30:	2302      	movs	r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <MX_GPIO_Init+0x180>)
 8000d48:	f003 fa96 	bl	8004278 <HAL_GPIO_Init>

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	@ 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58020000 	.word	0x58020000
 8000d5c:	58020400 	.word	0x58020400
 8000d60:	58020c00 	.word	0x58020c00
 8000d64:	58021000 	.word	0x58021000
 8000d68:	58021400 	.word	0x58021400

08000d6c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d74:	1d39      	adds	r1, r7, #4
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <__io_putchar+0x20>)
 8000d7e:	f007 fc71 	bl	8008664 <HAL_UART_Transmit>
  return ch;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	240002e0 	.word	0x240002e0

08000d90 <AD7091R_Init>:

void AD7091R_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4816      	ldr	r0, [pc, #88]	@ (8000df4 <AD7091R_Init+0x64>)
 8000d9c:	f003 fc1c 	bl	80045d8 <HAL_GPIO_WritePin>
    uint16_t reset_cmd_tx = AD7091R_CMD_RESET;
 8000da0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000da4:	80fb      	strh	r3, [r7, #6]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&reset_cmd_tx, 2, HAL_MAX_DELAY);
 8000da6:	1db9      	adds	r1, r7, #6
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	2202      	movs	r2, #2
 8000dae:	4812      	ldr	r0, [pc, #72]	@ (8000df8 <AD7091R_Init+0x68>)
 8000db0:	f006 fbf8 	bl	80075a4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <AD7091R_Init+0x64>)
 8000dba:	f003 fc0d 	bl	80045d8 <HAL_GPIO_WritePin>
    HAL_Delay(1000); // HAL_Delay é aceitável aqui, pois é antes do RTOS iniciar
 8000dbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc2:	f000 feab 	bl	8001b1c <HAL_Delay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <AD7091R_Init+0x64>)
 8000dcc:	f003 fc04 	bl	80045d8 <HAL_GPIO_WritePin>
    uint16_t normal_cmd_tx = AD7091R_CMD_NORMAL;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	80bb      	strh	r3, [r7, #4]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY);
 8000dd4:	1d39      	adds	r1, r7, #4
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <AD7091R_Init+0x68>)
 8000dde:	f006 fbe1 	bl	80075a4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2110      	movs	r1, #16
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <AD7091R_Init+0x64>)
 8000de8:	f003 fbf6 	bl	80045d8 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	58020000 	.word	0x58020000
 8000df8:	24000208 	.word	0x24000208

08000dfc <AD7091R_ReadData>:

uint16_t AD7091R_ReadData(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    uint8_t rx_buf[2] = {0};
 8000e02:	2300      	movs	r3, #0
 8000e04:	803b      	strh	r3, [r7, #0]
    uint16_t adc_raw_16bits, adc_value_12bits;

    osDelay(10); // Pequena pausa com osDelay
 8000e06:	200a      	movs	r0, #10
 8000e08:	f009 fab6 	bl	800a378 <osDelay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2110      	movs	r1, #16
 8000e10:	4820      	ldr	r0, [pc, #128]	@ (8000e94 <AD7091R_ReadData+0x98>)
 8000e12:	f003 fbe1 	bl	80045d8 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8000e16:	4639      	mov	r1, r7
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	481e      	ldr	r0, [pc, #120]	@ (8000e98 <AD7091R_ReadData+0x9c>)
 8000e20:	f006 fdae 	bl	8007980 <HAL_SPI_Receive>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d016      	beq.n	8000e58 <AD7091R_ReadData+0x5c>
    {
        HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4819      	ldr	r0, [pc, #100]	@ (8000e94 <AD7091R_ReadData+0x98>)
 8000e30:	f003 fbd2 	bl	80045d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2102      	movs	r1, #2
 8000e38:	4818      	ldr	r0, [pc, #96]	@ (8000e9c <AD7091R_ReadData+0xa0>)
 8000e3a:	f003 fbcd 	bl	80045d8 <HAL_GPIO_WritePin>
        osDelay(100);
 8000e3e:	2064      	movs	r0, #100	@ 0x64
 8000e40:	f009 fa9a 	bl	800a378 <osDelay>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2102      	movs	r1, #2
 8000e48:	4814      	ldr	r0, [pc, #80]	@ (8000e9c <AD7091R_ReadData+0xa0>)
 8000e4a:	f003 fbc5 	bl	80045d8 <HAL_GPIO_WritePin>
        printf("Erro na comunicacao SPI!\r\n");
 8000e4e:	4814      	ldr	r0, [pc, #80]	@ (8000ea0 <AD7091R_ReadData+0xa4>)
 8000e50:	f00d fe36 	bl	800eac0 <puts>
        return 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e018      	b.n	8000e8a <AD7091R_ReadData+0x8e>
    }
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <AD7091R_ReadData+0x98>)
 8000e5e:	f003 fbbb 	bl	80045d8 <HAL_GPIO_WritePin>

    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e62:	2101      	movs	r1, #1
 8000e64:	480f      	ldr	r0, [pc, #60]	@ (8000ea4 <AD7091R_ReadData+0xa8>)
 8000e66:	f003 fbd0 	bl	800460a <HAL_GPIO_TogglePin>

    adc_raw_16bits = (rx_buf[0] << 8) | rx_buf[1];
 8000e6a:	783b      	ldrb	r3, [r7, #0]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	787b      	ldrb	r3, [r7, #1]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	80fb      	strh	r3, [r7, #6]
    adc_value_12bits = (adc_raw_16bits >> 2) & 0x0FFF;
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e86:	80bb      	strh	r3, [r7, #4]

    return adc_value_12bits;
 8000e88:	88bb      	ldrh	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	58020000 	.word	0x58020000
 8000e98:	24000208 	.word	0x24000208
 8000e9c:	58021000 	.word	0x58021000
 8000ea0:	080114ec 	.word	0x080114ec
 8000ea4:	58020400 	.word	0x58020400

08000ea8 <get_filtered_reading>:

uint16_t get_filtered_reading(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	e00c      	b.n	8000ed2 <get_filtered_reading+0x2a>
        sum += AD7091R_ReadData();
 8000eb8:	f7ff ffa0 	bl	8000dfc <AD7091R_ReadData>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	607b      	str	r3, [r7, #4]
        osDelay(10);
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f009 fa56 	bl	800a378 <osDelay>
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	70fb      	strb	r3, [r7, #3]
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	2b1d      	cmp	r3, #29
 8000ed6:	d9ef      	bls.n	8000eb8 <get_filtered_reading+0x10>
    }
    return (uint16_t)(sum / NUM_SAMPLES);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <get_filtered_reading+0x44>)
 8000edc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	b29b      	uxth	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	88888889 	.word	0x88888889

08000ef0 <raw_to_voltage_mV>:

float raw_to_voltage_mV(uint16_t raw_value)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
    return ((float)raw_value / ADC_MAX_VALUE) * VREF_MV;
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f04:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000f24 <raw_to_voltage_mV+0x34>
 8000f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000f28 <raw_to_voltage_mV+0x38>
 8000f10:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	457ff000 	.word	0x457ff000
 8000f28:	451c4000 	.word	0x451c4000

08000f2c <voltage_to_current_mA>:

float voltage_to_current_mA(float voltage_mv)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage_mv < MIN_VOLTAGE_ADC_MV) voltage_mv = MIN_VOLTAGE_ADC_MV;
 8000f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000f8c <voltage_to_current_mA+0x60>
 8000f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	d501      	bpl.n	8000f4c <voltage_to_current_mA+0x20>
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <voltage_to_current_mA+0x64>)
 8000f4a:	607b      	str	r3, [r7, #4]
    if (voltage_mv > MAX_VOLTAGE_ADC_MV) voltage_mv = MAX_VOLTAGE_ADC_MV;
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000f94 <voltage_to_current_mA+0x68>
 8000f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	dd01      	ble.n	8000f62 <voltage_to_current_mA+0x36>
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <voltage_to_current_mA+0x6c>)
 8000f60:	607b      	str	r3, [r7, #4]

    return 4.0f + ((voltage_mv - MIN_VOLTAGE_ADC_MV) * (16.0f / (MAX_VOLTAGE_ADC_MV - MIN_VOLTAGE_ADC_MV)));
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f8c <voltage_to_current_mA+0x60>
 8000f6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f6e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000f9c <voltage_to_current_mA+0x70>
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	42c80000 	.word	0x42c80000
 8000f90:	42c80000 	.word	0x42c80000
 8000f94:	45160000 	.word	0x45160000
 8000f98:	45160000 	.word	0x45160000
 8000f9c:	3be3f389 	.word	0x3be3f389

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fa4:	f000 f89c 	bl	80010e0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fd5c 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f81c 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff fe18 	bl	8000be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb4:	f7ff fd76 	bl	8000aa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000fb8:	f000 fc06 	bl	80017c8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000fbc:	f000 f8d4 	bl	8001168 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Inicializando ADC AD7091R...\r\n");
 8000fc0:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <main+0x40>)
 8000fc2:	f00d fd7d 	bl	800eac0 <puts>
  AD7091R_Init();
 8000fc6:	f7ff fee3 	bl	8000d90 <AD7091R_Init>
  printf("Sistema pronto.\r\n");
 8000fca:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <main+0x44>)
 8000fcc:	f00d fd78 	bl	800eac0 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000fd0:	f009 f8f6 	bl	800a1c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd4:	f7ff fd8e 	bl	8000af4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd8:	f009 f916 	bl	800a208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <main+0x3c>
 8000fe0:	08011508 	.word	0x08011508
 8000fe4:	08011528 	.word	0x08011528

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09c      	sub	sp, #112	@ 0x70
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00d fe64 	bl	800ecc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2220      	movs	r2, #32
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00d fe5e 	bl	800ecc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001008:	2002      	movs	r0, #2
 800100a:	f003 fb19 	bl	8004640 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b31      	ldr	r3, [pc, #196]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001016:	4a30      	ldr	r2, [pc, #192]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800101e:	4b2e      	ldr	r3, [pc, #184]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <SystemClock_Config+0xf4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <SystemClock_Config+0xf4>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <SystemClock_Config+0xf4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001044:	bf00      	nop
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <SystemClock_Config+0xf4>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001052:	d1f8      	bne.n	8001046 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001058:	2301      	movs	r3, #1
 800105a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105c:	2340      	movs	r3, #64	@ 0x40
 800105e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001064:	2300      	movs	r3, #0
 8001066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 800106c:	230a      	movs	r3, #10
 800106e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800107c:	230c      	movs	r3, #12
 800107e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001080:	2302      	movs	r3, #2
 8001082:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fb11 	bl	80046b4 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001098:	f000 f860 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	233f      	movs	r3, #63	@ 0x3f
 800109e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 ff51 	bl	8004f68 <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80010cc:	f000 f846 	bl	800115c <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3770      	adds	r7, #112	@ 0x70
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58000400 	.word	0x58000400
 80010dc:	58024800 	.word	0x58024800

080010e0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010f2:	f000 fe23 	bl	8001d3c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001102:	231f      	movs	r3, #31
 8001104:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001106:	2387      	movs	r3, #135	@ 0x87
 8001108:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800110a:	2300      	movs	r3, #0
 800110c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800110e:	2300      	movs	r3, #0
 8001110:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001122:	463b      	mov	r3, r7
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fe41 	bl	8001dac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800112a:	2004      	movs	r0, #4
 800112c:	f000 fe1e 	bl	8001d6c <HAL_MPU_Enable>

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800114a:	f000 fcc7 	bl	8001adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40001400 	.word	0x40001400

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <Error_Handler+0x8>

08001168 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <MX_SPI1_Init+0xa4>)
 800116e:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <MX_SPI1_Init+0xa8>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <MX_SPI1_Init+0xa4>)
 8001174:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <MX_SPI1_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_SPI1_Init+0xa4>)
 8001182:	220f      	movs	r2, #15
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_SPI1_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_SPI1_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_SPI1_Init+0xa4>)
 8001194:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_SPI1_Init+0xa4>)
 800119c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_SPI1_Init+0xa4>)
 80011fa:	f006 f8af 	bl	800735c <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001204:	f7ff ffaa 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	24000208 	.word	0x24000208
 8001210:	40013000 	.word	0x40013000

08001214 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0bc      	sub	sp, #240	@ 0xf0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	22c0      	movs	r2, #192	@ 0xc0
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00d fd45 	bl	800ecc4 <memset>
  if(spiHandle->Instance==SPI1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <HAL_SPI_MspInit+0x10c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d168      	bne.n	8001316 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001244:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001250:	2300      	movs	r3, #0
 8001252:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f004 fa53 	bl	8005704 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001264:	f7ff ff7a 	bl	800115c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 800126a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800126e:	4a2d      	ldr	r2, [pc, #180]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 8001270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001274:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 800127a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800127e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	4a25      	ldr	r2, [pc, #148]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <HAL_SPI_MspInit+0x110>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012c2:	2360      	movs	r3, #96	@ 0x60
 80012c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012da:	2305      	movs	r3, #5
 80012dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012e4:	4619      	mov	r1, r3
 80012e6:	4810      	ldr	r0, [pc, #64]	@ (8001328 <HAL_SPI_MspInit+0x114>)
 80012e8:	f002 ffc6 	bl	8004278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ec:	2320      	movs	r3, #32
 80012ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001304:	2305      	movs	r3, #5
 8001306:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800130e:	4619      	mov	r1, r3
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <HAL_SPI_MspInit+0x118>)
 8001312:	f002 ffb1 	bl	8004278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001316:	bf00      	nop
 8001318:	37f0      	adds	r7, #240	@ 0xf0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40013000 	.word	0x40013000
 8001324:	58024400 	.word	0x58024400
 8001328:	58020000 	.word	0x58020000
 800132c:	58020400 	.word	0x58020400

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x38>)
 8001338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800133c:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <HAL_MspInit+0x38>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <HAL_MspInit+0x38>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	210f      	movs	r1, #15
 8001358:	f06f 0001 	mvn.w	r0, #1
 800135c:	f000 fcc6 	bl	8001cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	58024400 	.word	0x58024400

0800136c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b090      	sub	sp, #64	@ 0x40
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d827      	bhi.n	80013ca <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800137a:	2200      	movs	r2, #0
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	2037      	movs	r0, #55	@ 0x37
 8001380:	f000 fcb4 	bl	8001cec <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001384:	2037      	movs	r0, #55	@ 0x37
 8001386:	f000 fccb 	bl	8001d20 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800138a:	4a29      	ldr	r2, [pc, #164]	@ (8001430 <HAL_InitTick+0xc4>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001390:	4b28      	ldr	r3, [pc, #160]	@ (8001434 <HAL_InitTick+0xc8>)
 8001392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001396:	4a27      	ldr	r2, [pc, #156]	@ (8001434 <HAL_InitTick+0xc8>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013a0:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_InitTick+0xc8>)
 80013a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ae:	f107 0210 	add.w	r2, r7, #16
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f961 	bl	8005680 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <HAL_InitTick+0x6a>
 80013c8:	e001      	b.n	80013ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e02b      	b.n	8001426 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ce:	f004 f92b 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 80013d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80013d4:	e004      	b.n	80013e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013d6:	f004 f927 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 80013da:	4603      	mov	r3, r0
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e2:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <HAL_InitTick+0xcc>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9b      	lsrs	r3, r3, #18
 80013ea:	3b01      	subs	r3, #1
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_InitTick+0xd0>)
 80013f0:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <HAL_InitTick+0xd4>)
 80013f2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_InitTick+0xd0>)
 80013f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013fa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_InitTick+0xd0>)
 80013fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001400:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_InitTick+0xd0>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_InitTick+0xd0>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800140e:	480b      	ldr	r0, [pc, #44]	@ (800143c <HAL_InitTick+0xd0>)
 8001410:	f006 fe11 	bl	8008036 <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d104      	bne.n	8001424 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800141a:	4808      	ldr	r0, [pc, #32]	@ (800143c <HAL_InitTick+0xd0>)
 800141c:	f006 fe6c 	bl	80080f8 <HAL_TIM_Base_Start_IT>
 8001420:	4603      	mov	r3, r0
 8001422:	e000      	b.n	8001426 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	3740      	adds	r7, #64	@ 0x40
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24000008 	.word	0x24000008
 8001434:	58024400 	.word	0x58024400
 8001438:	431bde83 	.word	0x431bde83
 800143c:	24000290 	.word	0x24000290
 8001440:	40001400 	.word	0x40001400

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA1_Stream0_IRQHandler+0x10>)
 8001482:	f001 fd93 	bl	8002fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	24000374 	.word	0x24000374

08001490 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001496:	f001 fd89 	bl	8002fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	240003ec 	.word	0x240003ec

080014a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <USART3_IRQHandler+0x10>)
 80014aa:	f007 f969 	bl	8008780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240002e0 	.word	0x240002e0

080014b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM7_IRQHandler+0x10>)
 80014be:	f006 fe93 	bl	80081e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000290 	.word	0x24000290

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_kill>:

int _kill(int pid, int sig)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e6:	f00d fc61 	bl	800edac <__errno>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2216      	movs	r2, #22
 80014ee:	601a      	str	r2, [r3, #0]
  return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_exit>:

void _exit (int status)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffe7 	bl	80014dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800150e:	bf00      	nop
 8001510:	e7fd      	b.n	800150e <_exit+0x12>

08001512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e00a      	b.n	800153a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001524:	f3af 8000 	nop.w
 8001528:	4601      	mov	r1, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	b2ca      	uxtb	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf0      	blt.n	8001524 <_read+0x12>
  }

  return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e009      	b.n	8001572 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fc00 	bl	8000d6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbf1      	blt.n	800155e <_write+0x12>
  }
  return len;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_close>:

int _close(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ac:	605a      	str	r2, [r3, #4]
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_isatty>:

int _isatty(int file)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f00d fbc6 	bl	800edac <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	24080000 	.word	0x24080000
 800164c:	00000400 	.word	0x00000400
 8001650:	240002dc 	.word	0x240002dc
 8001654:	24004f08 	.word	0x24004f08

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800165c:	4b43      	ldr	r3, [pc, #268]	@ (800176c <SystemInit+0x114>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001662:	4a42      	ldr	r2, [pc, #264]	@ (800176c <SystemInit+0x114>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800166c:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <SystemInit+0x118>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	2b06      	cmp	r3, #6
 8001676:	d807      	bhi.n	8001688 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001678:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <SystemInit+0x118>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 030f 	bic.w	r3, r3, #15
 8001680:	4a3b      	ldr	r2, [pc, #236]	@ (8001770 <SystemInit+0x118>)
 8001682:	f043 0307 	orr.w	r3, r3, #7
 8001686:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <SystemInit+0x11c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a39      	ldr	r2, [pc, #228]	@ (8001774 <SystemInit+0x11c>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <SystemInit+0x11c>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800169a:	4b36      	ldr	r3, [pc, #216]	@ (8001774 <SystemInit+0x11c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4935      	ldr	r1, [pc, #212]	@ (8001774 <SystemInit+0x11c>)
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <SystemInit+0x120>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016a6:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <SystemInit+0x118>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <SystemInit+0x118>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 030f 	bic.w	r3, r3, #15
 80016ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001770 <SystemInit+0x118>)
 80016bc:	f043 0307 	orr.w	r3, r3, #7
 80016c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001774 <SystemInit+0x11c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <SystemInit+0x11c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ce:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <SystemInit+0x11c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <SystemInit+0x11c>)
 80016d6:	4a29      	ldr	r2, [pc, #164]	@ (800177c <SystemInit+0x124>)
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <SystemInit+0x11c>)
 80016dc:	4a28      	ldr	r2, [pc, #160]	@ (8001780 <SystemInit+0x128>)
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016e0:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <SystemInit+0x11c>)
 80016e2:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <SystemInit+0x12c>)
 80016e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016e6:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <SystemInit+0x11c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <SystemInit+0x11c>)
 80016ee:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <SystemInit+0x12c>)
 80016f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <SystemInit+0x11c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <SystemInit+0x11c>)
 80016fa:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <SystemInit+0x12c>)
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <SystemInit+0x11c>)
 8001700:	2200      	movs	r2, #0
 8001702:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <SystemInit+0x11c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <SystemInit+0x11c>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800170e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <SystemInit+0x11c>)
 8001712:	2200      	movs	r2, #0
 8001714:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001716:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <SystemInit+0x130>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <SystemInit+0x134>)
 800171c:	4013      	ands	r3, r2
 800171e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001722:	d202      	bcs.n	800172a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <SystemInit+0x138>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <SystemInit+0x11c>)
 800172c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d113      	bne.n	8001760 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <SystemInit+0x11c>)
 800173a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800173e:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <SystemInit+0x11c>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001744:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <SystemInit+0x13c>)
 800174a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800174e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <SystemInit+0x11c>)
 8001752:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001756:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <SystemInit+0x11c>)
 8001758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800175c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	52002000 	.word	0x52002000
 8001774:	58024400 	.word	0x58024400
 8001778:	eaf6ed7f 	.word	0xeaf6ed7f
 800177c:	02020200 	.word	0x02020200
 8001780:	01ff0000 	.word	0x01ff0000
 8001784:	01010280 	.word	0x01010280
 8001788:	5c001000 	.word	0x5c001000
 800178c:	ffff0000 	.word	0xffff0000
 8001790:	51008108 	.word	0x51008108
 8001794:	52004000 	.word	0x52004000

08001798 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <ExitRun0Mode+0x2c>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <ExitRun0Mode+0x2c>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80017a8:	bf00      	nop
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <ExitRun0Mode+0x2c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f9      	beq.n	80017aa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	58024800 	.word	0x58024800

080017c8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017ce:	4a23      	ldr	r2, [pc, #140]	@ (800185c <MX_USART3_UART_Init+0x94>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001810:	4811      	ldr	r0, [pc, #68]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 8001812:	f006 fed7 	bl	80085c4 <HAL_UART_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800181c:	f7ff fc9e 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	480d      	ldr	r0, [pc, #52]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 8001824:	f008 fbbe 	bl	8009fa4 <HAL_UARTEx_SetTxFifoThreshold>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800182e:	f7ff fc95 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4808      	ldr	r0, [pc, #32]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 8001836:	f008 fbf3 	bl	800a020 <HAL_UARTEx_SetRxFifoThreshold>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001840:	f7ff fc8c 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	@ (8001858 <MX_USART3_UART_Init+0x90>)
 8001846:	f008 fb74 	bl	8009f32 <HAL_UARTEx_DisableFifoMode>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001850:	f7ff fc84 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	240002e0 	.word	0x240002e0
 800185c:	40004800 	.word	0x40004800

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ba      	sub	sp, #232	@ 0xe8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	22c0      	movs	r2, #192	@ 0xc0
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00d fa1f 	bl	800ecc4 <memset>
  if(uartHandle->Instance==USART3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a59      	ldr	r2, [pc, #356]	@ (80019f0 <HAL_UART_MspInit+0x190>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f040 80aa 	bne.w	80019e6 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001892:	f04f 0202 	mov.w	r2, #2
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 ff2b 	bl	8005704 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80018b4:	f7ff fc52 	bl	800115c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b8:	4b4e      	ldr	r3, [pc, #312]	@ (80019f4 <HAL_UART_MspInit+0x194>)
 80018ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018be:	4a4d      	ldr	r2, [pc, #308]	@ (80019f4 <HAL_UART_MspInit+0x194>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018c8:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <HAL_UART_MspInit+0x194>)
 80018ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <HAL_UART_MspInit+0x194>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018dc:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_UART_MspInit+0x194>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e6:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_UART_MspInit+0x194>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190e:	2307      	movs	r3, #7
 8001910:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001918:	4619      	mov	r1, r3
 800191a:	4837      	ldr	r0, [pc, #220]	@ (80019f8 <HAL_UART_MspInit+0x198>)
 800191c:	f002 fcac 	bl	8004278 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001920:	4b36      	ldr	r3, [pc, #216]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001922:	4a37      	ldr	r2, [pc, #220]	@ (8001a00 <HAL_UART_MspInit+0x1a0>)
 8001924:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001926:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001928:	222d      	movs	r2, #45	@ 0x2d
 800192a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192c:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b30      	ldr	r3, [pc, #192]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 800193a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800194c:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001958:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800195e:	4827      	ldr	r0, [pc, #156]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001960:	f000 fa64 	bl	8001e2c <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800196a:	f7ff fbf7 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a22      	ldr	r2, [pc, #136]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001976:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <HAL_UART_MspInit+0x19c>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 800197e:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <HAL_UART_MspInit+0x1a8>)
 8001980:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 8001984:	222e      	movs	r2, #46	@ 0x2e
 8001986:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 800198a:	2240      	movs	r2, #64	@ 0x40
 800198c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 8001996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019ba:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019bc:	f000 fa36 	bl	8001e2c <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80019c6:	f7ff fbc9 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a04 <HAL_UART_MspInit+0x1a4>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2105      	movs	r1, #5
 80019da:	2027      	movs	r0, #39	@ 0x27
 80019dc:	f000 f986 	bl	8001cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019e0:	2027      	movs	r0, #39	@ 0x27
 80019e2:	f000 f99d 	bl	8001d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019e6:	bf00      	nop
 80019e8:	37e8      	adds	r7, #232	@ 0xe8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40004800 	.word	0x40004800
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58020c00 	.word	0x58020c00
 80019fc:	24000374 	.word	0x24000374
 8001a00:	40020010 	.word	0x40020010
 8001a04:	240003ec 	.word	0x240003ec
 8001a08:	40020028 	.word	0x40020028

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a48 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a10:	f7ff fec2 	bl	8001798 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a14:	f7ff fe20 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f00d f9bb 	bl	800edb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff faad 	bl	8000fa0 <main>
  bx  lr
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a50:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001a54:	08011a50 	.word	0x08011a50
  ldr r2, =_sbss
 8001a58:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001a5c:	24004f04 	.word	0x24004f04

08001a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC3_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f933 	bl	8001cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a70:	f003 fc30 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_Init+0x68>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4913      	ldr	r1, [pc, #76]	@ (8001ad0 <HAL_Init+0x6c>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_Init+0x68>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad0 <HAL_Init+0x6c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_Init+0x70>)
 8001aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <HAL_Init+0x74>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f7ff fc5c 	bl	800136c <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e002      	b.n	8001ac4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fc37 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	080115d8 	.word	0x080115d8
 8001ad4:	24000004 	.word	0x24000004
 8001ad8:	24000000 	.word	0x24000000

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2400000c 	.word	0x2400000c
 8001b00:	24000464 	.word	0x24000464

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	24000464 	.word	0x24000464

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2400000c 	.word	0x2400000c

08001b64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetREVID+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	5c001000 	.word	0x5c001000

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x40>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x40>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	05fa0000 	.word	0x05fa0000

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff4c 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfa:	f7ff ff63 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001cfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	6978      	ldr	r0, [r7, #20]
 8001d06:	f7ff ffb3 	bl	8001c70 <NVIC_EncodePriority>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff82 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff56 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d40:	f3bf 8f5f 	dmb	sy
}
 8001d44:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <HAL_MPU_Disable+0x28>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <HAL_MPU_Disable+0x28>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d50:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_MPU_Disable+0x2c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	e000ed90 	.word	0xe000ed90

08001d6c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d74:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <HAL_MPU_Enable+0x38>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_MPU_Enable+0x3c>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <HAL_MPU_Enable+0x3c>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d88:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8a:	f3bf 8f4f 	dsb	sy
}
 8001d8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d90:	f3bf 8f6f 	isb	sy
}
 8001d94:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed90 	.word	0xe000ed90
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	785a      	ldrb	r2, [r3, #1]
 8001db8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <HAL_MPU_ConfigRegion+0x7c>)
 8001dba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <HAL_MPU_ConfigRegion+0x7c>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_MPU_ConfigRegion+0x7c>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001dc8:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <HAL_MPU_ConfigRegion+0x7c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
 8001dd4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7adb      	ldrb	r3, [r3, #11]
 8001dda:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7a9b      	ldrb	r3, [r3, #10]
 8001de2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7b5b      	ldrb	r3, [r3, #13]
 8001dea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7b9b      	ldrb	r3, [r3, #14]
 8001df2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001df4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7bdb      	ldrb	r3, [r3, #15]
 8001dfa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7a5b      	ldrb	r3, [r3, #9]
 8001e02:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7a1b      	ldrb	r3, [r3, #8]
 8001e0a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e0c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e16:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e18:	6113      	str	r3, [r2, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed90 	.word	0xe000ed90

08001e2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff fe66 	bl	8001b04 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e316      	b.n	8002472 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a66      	ldr	r2, [pc, #408]	@ (8001fe4 <HAL_DMA_Init+0x1b8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d04a      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a65      	ldr	r2, [pc, #404]	@ (8001fe8 <HAL_DMA_Init+0x1bc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d045      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a63      	ldr	r2, [pc, #396]	@ (8001fec <HAL_DMA_Init+0x1c0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d040      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a62      	ldr	r2, [pc, #392]	@ (8001ff0 <HAL_DMA_Init+0x1c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d03b      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a60      	ldr	r2, [pc, #384]	@ (8001ff4 <HAL_DMA_Init+0x1c8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d036      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ff8 <HAL_DMA_Init+0x1cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d031      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5d      	ldr	r2, [pc, #372]	@ (8001ffc <HAL_DMA_Init+0x1d0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d02c      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002000 <HAL_DMA_Init+0x1d4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d027      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5a      	ldr	r2, [pc, #360]	@ (8002004 <HAL_DMA_Init+0x1d8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d022      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a59      	ldr	r2, [pc, #356]	@ (8002008 <HAL_DMA_Init+0x1dc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d01d      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a57      	ldr	r2, [pc, #348]	@ (800200c <HAL_DMA_Init+0x1e0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d018      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a56      	ldr	r2, [pc, #344]	@ (8002010 <HAL_DMA_Init+0x1e4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a54      	ldr	r2, [pc, #336]	@ (8002014 <HAL_DMA_Init+0x1e8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00e      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a53      	ldr	r2, [pc, #332]	@ (8002018 <HAL_DMA_Init+0x1ec>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a51      	ldr	r2, [pc, #324]	@ (800201c <HAL_DMA_Init+0x1f0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_DMA_Init+0xb8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a50      	ldr	r2, [pc, #320]	@ (8002020 <HAL_DMA_Init+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_DMA_Init+0xbc>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_DMA_Init+0xbe>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 813b 	beq.w	8002166 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a37      	ldr	r2, [pc, #220]	@ (8001fe4 <HAL_DMA_Init+0x1b8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d04a      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a36      	ldr	r2, [pc, #216]	@ (8001fe8 <HAL_DMA_Init+0x1bc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d045      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a34      	ldr	r2, [pc, #208]	@ (8001fec <HAL_DMA_Init+0x1c0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d040      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a33      	ldr	r2, [pc, #204]	@ (8001ff0 <HAL_DMA_Init+0x1c4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d03b      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a31      	ldr	r2, [pc, #196]	@ (8001ff4 <HAL_DMA_Init+0x1c8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d036      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a30      	ldr	r2, [pc, #192]	@ (8001ff8 <HAL_DMA_Init+0x1cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d031      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2e      	ldr	r2, [pc, #184]	@ (8001ffc <HAL_DMA_Init+0x1d0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02c      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002000 <HAL_DMA_Init+0x1d4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d027      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	@ (8002004 <HAL_DMA_Init+0x1d8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d022      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002008 <HAL_DMA_Init+0x1dc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01d      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a28      	ldr	r2, [pc, #160]	@ (800200c <HAL_DMA_Init+0x1e0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d018      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a27      	ldr	r2, [pc, #156]	@ (8002010 <HAL_DMA_Init+0x1e4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a25      	ldr	r2, [pc, #148]	@ (8002014 <HAL_DMA_Init+0x1e8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00e      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a24      	ldr	r2, [pc, #144]	@ (8002018 <HAL_DMA_Init+0x1ec>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a22      	ldr	r2, [pc, #136]	@ (800201c <HAL_DMA_Init+0x1f0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Init+0x174>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <HAL_DMA_Init+0x1f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d108      	bne.n	8001fb2 <HAL_DMA_Init+0x186>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e007      	b.n	8001fc2 <HAL_DMA_Init+0x196>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fc2:	e02f      	b.n	8002024 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc4:	f7ff fd9e 	bl	8001b04 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d928      	bls.n	8002024 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e246      	b.n	8002472 <HAL_DMA_Init+0x646>
 8001fe4:	40020010 	.word	0x40020010
 8001fe8:	40020028 	.word	0x40020028
 8001fec:	40020040 	.word	0x40020040
 8001ff0:	40020058 	.word	0x40020058
 8001ff4:	40020070 	.word	0x40020070
 8001ff8:	40020088 	.word	0x40020088
 8001ffc:	400200a0 	.word	0x400200a0
 8002000:	400200b8 	.word	0x400200b8
 8002004:	40020410 	.word	0x40020410
 8002008:	40020428 	.word	0x40020428
 800200c:	40020440 	.word	0x40020440
 8002010:	40020458 	.word	0x40020458
 8002014:	40020470 	.word	0x40020470
 8002018:	40020488 	.word	0x40020488
 800201c:	400204a0 	.word	0x400204a0
 8002020:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1c8      	bne.n	8001fc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4b83      	ldr	r3, [pc, #524]	@ (800224c <HAL_DMA_Init+0x420>)
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800204a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	2b04      	cmp	r3, #4
 8002076:	d107      	bne.n	8002088 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	4313      	orrs	r3, r2
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002088:	4b71      	ldr	r3, [pc, #452]	@ (8002250 <HAL_DMA_Init+0x424>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b71      	ldr	r3, [pc, #452]	@ (8002254 <HAL_DMA_Init+0x428>)
 800208e:	4013      	ands	r3, r2
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002094:	d328      	bcc.n	80020e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b28      	cmp	r3, #40	@ 0x28
 800209c:	d903      	bls.n	80020a6 <HAL_DMA_Init+0x27a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80020a4:	d917      	bls.n	80020d6 <HAL_DMA_Init+0x2aa>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80020ac:	d903      	bls.n	80020b6 <HAL_DMA_Init+0x28a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b42      	cmp	r3, #66	@ 0x42
 80020b4:	d90f      	bls.n	80020d6 <HAL_DMA_Init+0x2aa>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b46      	cmp	r3, #70	@ 0x46
 80020bc:	d903      	bls.n	80020c6 <HAL_DMA_Init+0x29a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b48      	cmp	r3, #72	@ 0x48
 80020c4:	d907      	bls.n	80020d6 <HAL_DMA_Init+0x2aa>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80020cc:	d905      	bls.n	80020da <HAL_DMA_Init+0x2ae>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b52      	cmp	r3, #82	@ 0x52
 80020d4:	d801      	bhi.n	80020da <HAL_DMA_Init+0x2ae>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_DMA_Init+0x2b0>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f023 0307 	bic.w	r3, r3, #7
 80020fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b04      	cmp	r3, #4
 8002110:	d117      	bne.n	8002142 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 ff1d 	bl	8003f64 <DMA_CheckFifoParam>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2240      	movs	r2, #64	@ 0x40
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e197      	b.n	8002472 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f001 fe58 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 8002150:	4603      	mov	r3, r0
 8002152:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	223f      	movs	r2, #63	@ 0x3f
 800215e:	409a      	lsls	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	e0cd      	b.n	8002302 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a3b      	ldr	r2, [pc, #236]	@ (8002258 <HAL_DMA_Init+0x42c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a39      	ldr	r2, [pc, #228]	@ (800225c <HAL_DMA_Init+0x430>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01d      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a38      	ldr	r2, [pc, #224]	@ (8002260 <HAL_DMA_Init+0x434>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d018      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a36      	ldr	r2, [pc, #216]	@ (8002264 <HAL_DMA_Init+0x438>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a35      	ldr	r2, [pc, #212]	@ (8002268 <HAL_DMA_Init+0x43c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00e      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a33      	ldr	r2, [pc, #204]	@ (800226c <HAL_DMA_Init+0x440>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <HAL_DMA_Init+0x444>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d004      	beq.n	80021b6 <HAL_DMA_Init+0x38a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <HAL_DMA_Init+0x448>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_DMA_Init+0x38e>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_DMA_Init+0x390>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8097 	beq.w	80022f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <HAL_DMA_Init+0x42c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d021      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_DMA_Init+0x430>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01c      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_DMA_Init+0x434>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d017      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_DMA_Init+0x438>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d012      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_DMA_Init+0x43c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00d      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_DMA_Init+0x440>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d008      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_DMA_Init+0x444>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <HAL_DMA_Init+0x3e4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_DMA_Init+0x448>)
 800220e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_DMA_Init+0x44c>)
 800222c:	4013      	ands	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b40      	cmp	r3, #64	@ 0x40
 8002236:	d021      	beq.n	800227c <HAL_DMA_Init+0x450>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b80      	cmp	r3, #128	@ 0x80
 800223e:	d102      	bne.n	8002246 <HAL_DMA_Init+0x41a>
 8002240:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002244:	e01b      	b.n	800227e <HAL_DMA_Init+0x452>
 8002246:	2300      	movs	r3, #0
 8002248:	e019      	b.n	800227e <HAL_DMA_Init+0x452>
 800224a:	bf00      	nop
 800224c:	fe10803f 	.word	0xfe10803f
 8002250:	5c001000 	.word	0x5c001000
 8002254:	ffff0000 	.word	0xffff0000
 8002258:	58025408 	.word	0x58025408
 800225c:	5802541c 	.word	0x5802541c
 8002260:	58025430 	.word	0x58025430
 8002264:	58025444 	.word	0x58025444
 8002268:	58025458 	.word	0x58025458
 800226c:	5802546c 	.word	0x5802546c
 8002270:	58025480 	.word	0x58025480
 8002274:	58025494 	.word	0x58025494
 8002278:	fffe000f 	.word	0xfffe000f
 800227c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002284:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800228c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002294:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800229c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b6e      	ldr	r3, [pc, #440]	@ (800247c <HAL_DMA_Init+0x650>)
 80022c4:	4413      	add	r3, r2
 80022c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002480 <HAL_DMA_Init+0x654>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f001 fd93 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 80022da:	4603      	mov	r3, r0
 80022dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2201      	movs	r2, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	e008      	b.n	8002302 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	@ 0x40
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0b7      	b.n	8002472 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a5f      	ldr	r2, [pc, #380]	@ (8002484 <HAL_DMA_Init+0x658>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d072      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5d      	ldr	r2, [pc, #372]	@ (8002488 <HAL_DMA_Init+0x65c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d06d      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5c      	ldr	r2, [pc, #368]	@ (800248c <HAL_DMA_Init+0x660>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d068      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a5a      	ldr	r2, [pc, #360]	@ (8002490 <HAL_DMA_Init+0x664>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d063      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a59      	ldr	r2, [pc, #356]	@ (8002494 <HAL_DMA_Init+0x668>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d05e      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a57      	ldr	r2, [pc, #348]	@ (8002498 <HAL_DMA_Init+0x66c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d059      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a56      	ldr	r2, [pc, #344]	@ (800249c <HAL_DMA_Init+0x670>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d054      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a54      	ldr	r2, [pc, #336]	@ (80024a0 <HAL_DMA_Init+0x674>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d04f      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a53      	ldr	r2, [pc, #332]	@ (80024a4 <HAL_DMA_Init+0x678>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d04a      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a51      	ldr	r2, [pc, #324]	@ (80024a8 <HAL_DMA_Init+0x67c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d045      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a50      	ldr	r2, [pc, #320]	@ (80024ac <HAL_DMA_Init+0x680>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d040      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a4e      	ldr	r2, [pc, #312]	@ (80024b0 <HAL_DMA_Init+0x684>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d03b      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a4d      	ldr	r2, [pc, #308]	@ (80024b4 <HAL_DMA_Init+0x688>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d036      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a4b      	ldr	r2, [pc, #300]	@ (80024b8 <HAL_DMA_Init+0x68c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d031      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a4a      	ldr	r2, [pc, #296]	@ (80024bc <HAL_DMA_Init+0x690>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d02c      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a48      	ldr	r2, [pc, #288]	@ (80024c0 <HAL_DMA_Init+0x694>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d027      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a47      	ldr	r2, [pc, #284]	@ (80024c4 <HAL_DMA_Init+0x698>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a45      	ldr	r2, [pc, #276]	@ (80024c8 <HAL_DMA_Init+0x69c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01d      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a44      	ldr	r2, [pc, #272]	@ (80024cc <HAL_DMA_Init+0x6a0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d018      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a42      	ldr	r2, [pc, #264]	@ (80024d0 <HAL_DMA_Init+0x6a4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a41      	ldr	r2, [pc, #260]	@ (80024d4 <HAL_DMA_Init+0x6a8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00e      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3f      	ldr	r2, [pc, #252]	@ (80024d8 <HAL_DMA_Init+0x6ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d009      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a3e      	ldr	r2, [pc, #248]	@ (80024dc <HAL_DMA_Init+0x6b0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_DMA_Init+0x5c6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3c      	ldr	r2, [pc, #240]	@ (80024e0 <HAL_DMA_Init+0x6b4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_Init+0x5ca>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_Init+0x5cc>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d032      	beq.n	8002462 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f001 fe2d 	bl	800405c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b80      	cmp	r3, #128	@ 0x80
 8002408:	d102      	bne.n	8002410 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002424:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_DMA_Init+0x624>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d80c      	bhi.n	8002450 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f001 feaa 	bl	8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	e008      	b.n	8002462 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	a7fdabf8 	.word	0xa7fdabf8
 8002480:	cccccccd 	.word	0xcccccccd
 8002484:	40020010 	.word	0x40020010
 8002488:	40020028 	.word	0x40020028
 800248c:	40020040 	.word	0x40020040
 8002490:	40020058 	.word	0x40020058
 8002494:	40020070 	.word	0x40020070
 8002498:	40020088 	.word	0x40020088
 800249c:	400200a0 	.word	0x400200a0
 80024a0:	400200b8 	.word	0x400200b8
 80024a4:	40020410 	.word	0x40020410
 80024a8:	40020428 	.word	0x40020428
 80024ac:	40020440 	.word	0x40020440
 80024b0:	40020458 	.word	0x40020458
 80024b4:	40020470 	.word	0x40020470
 80024b8:	40020488 	.word	0x40020488
 80024bc:	400204a0 	.word	0x400204a0
 80024c0:	400204b8 	.word	0x400204b8
 80024c4:	58025408 	.word	0x58025408
 80024c8:	5802541c 	.word	0x5802541c
 80024cc:	58025430 	.word	0x58025430
 80024d0:	58025444 	.word	0x58025444
 80024d4:	58025458 	.word	0x58025458
 80024d8:	5802546c 	.word	0x5802546c
 80024dc:	58025480 	.word	0x58025480
 80024e0:	58025494 	.word	0x58025494

080024e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fb0a 	bl	8001b04 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e2dc      	b.n	8002ab6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d008      	beq.n	800251a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e2cd      	b.n	8002ab6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a76      	ldr	r2, [pc, #472]	@ (80026f8 <HAL_DMA_Abort+0x214>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d04a      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a74      	ldr	r2, [pc, #464]	@ (80026fc <HAL_DMA_Abort+0x218>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d045      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a73      	ldr	r2, [pc, #460]	@ (8002700 <HAL_DMA_Abort+0x21c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d040      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a71      	ldr	r2, [pc, #452]	@ (8002704 <HAL_DMA_Abort+0x220>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d03b      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a70      	ldr	r2, [pc, #448]	@ (8002708 <HAL_DMA_Abort+0x224>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d036      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6e      	ldr	r2, [pc, #440]	@ (800270c <HAL_DMA_Abort+0x228>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d031      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6d      	ldr	r2, [pc, #436]	@ (8002710 <HAL_DMA_Abort+0x22c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d02c      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6b      	ldr	r2, [pc, #428]	@ (8002714 <HAL_DMA_Abort+0x230>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d027      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6a      	ldr	r2, [pc, #424]	@ (8002718 <HAL_DMA_Abort+0x234>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d022      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a68      	ldr	r2, [pc, #416]	@ (800271c <HAL_DMA_Abort+0x238>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01d      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a67      	ldr	r2, [pc, #412]	@ (8002720 <HAL_DMA_Abort+0x23c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d018      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a65      	ldr	r2, [pc, #404]	@ (8002724 <HAL_DMA_Abort+0x240>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a64      	ldr	r2, [pc, #400]	@ (8002728 <HAL_DMA_Abort+0x244>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a62      	ldr	r2, [pc, #392]	@ (800272c <HAL_DMA_Abort+0x248>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a61      	ldr	r2, [pc, #388]	@ (8002730 <HAL_DMA_Abort+0x24c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_DMA_Abort+0xd6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002734 <HAL_DMA_Abort+0x250>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_DMA_Abort+0xda>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_DMA_Abort+0xdc>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 021e 	bic.w	r2, r2, #30
 80025d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e00a      	b.n	8002602 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 020e 	bic.w	r2, r2, #14
 80025fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3c      	ldr	r2, [pc, #240]	@ (80026f8 <HAL_DMA_Abort+0x214>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d072      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3a      	ldr	r2, [pc, #232]	@ (80026fc <HAL_DMA_Abort+0x218>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d06d      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a39      	ldr	r2, [pc, #228]	@ (8002700 <HAL_DMA_Abort+0x21c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d068      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a37      	ldr	r2, [pc, #220]	@ (8002704 <HAL_DMA_Abort+0x220>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d063      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a36      	ldr	r2, [pc, #216]	@ (8002708 <HAL_DMA_Abort+0x224>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d05e      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a34      	ldr	r2, [pc, #208]	@ (800270c <HAL_DMA_Abort+0x228>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d059      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <HAL_DMA_Abort+0x22c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d054      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <HAL_DMA_Abort+0x230>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04f      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a30      	ldr	r2, [pc, #192]	@ (8002718 <HAL_DMA_Abort+0x234>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d04a      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2e      	ldr	r2, [pc, #184]	@ (800271c <HAL_DMA_Abort+0x238>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d045      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2d      	ldr	r2, [pc, #180]	@ (8002720 <HAL_DMA_Abort+0x23c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d040      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2b      	ldr	r2, [pc, #172]	@ (8002724 <HAL_DMA_Abort+0x240>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d03b      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2a      	ldr	r2, [pc, #168]	@ (8002728 <HAL_DMA_Abort+0x244>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d036      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a28      	ldr	r2, [pc, #160]	@ (800272c <HAL_DMA_Abort+0x248>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d031      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <HAL_DMA_Abort+0x24c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d02c      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a25      	ldr	r2, [pc, #148]	@ (8002734 <HAL_DMA_Abort+0x250>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d027      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a24      	ldr	r2, [pc, #144]	@ (8002738 <HAL_DMA_Abort+0x254>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d022      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_DMA_Abort+0x258>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01d      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	@ (8002740 <HAL_DMA_Abort+0x25c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d018      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_DMA_Abort+0x260>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <HAL_DMA_Abort+0x264>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00e      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1c      	ldr	r2, [pc, #112]	@ (800274c <HAL_DMA_Abort+0x268>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <HAL_DMA_Abort+0x26c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	@ (8002754 <HAL_DMA_Abort+0x270>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d132      	bne.n	8002758 <HAL_DMA_Abort+0x274>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e031      	b.n	800275a <HAL_DMA_Abort+0x276>
 80026f6:	bf00      	nop
 80026f8:	40020010 	.word	0x40020010
 80026fc:	40020028 	.word	0x40020028
 8002700:	40020040 	.word	0x40020040
 8002704:	40020058 	.word	0x40020058
 8002708:	40020070 	.word	0x40020070
 800270c:	40020088 	.word	0x40020088
 8002710:	400200a0 	.word	0x400200a0
 8002714:	400200b8 	.word	0x400200b8
 8002718:	40020410 	.word	0x40020410
 800271c:	40020428 	.word	0x40020428
 8002720:	40020440 	.word	0x40020440
 8002724:	40020458 	.word	0x40020458
 8002728:	40020470 	.word	0x40020470
 800272c:	40020488 	.word	0x40020488
 8002730:	400204a0 	.word	0x400204a0
 8002734:	400204b8 	.word	0x400204b8
 8002738:	58025408 	.word	0x58025408
 800273c:	5802541c 	.word	0x5802541c
 8002740:	58025430 	.word	0x58025430
 8002744:	58025444 	.word	0x58025444
 8002748:	58025458 	.word	0x58025458
 800274c:	5802546c 	.word	0x5802546c
 8002750:	58025480 	.word	0x58025480
 8002754:	58025494 	.word	0x58025494
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6d      	ldr	r2, [pc, #436]	@ (8002928 <HAL_DMA_Abort+0x444>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6b      	ldr	r2, [pc, #428]	@ (800292c <HAL_DMA_Abort+0x448>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6a      	ldr	r2, [pc, #424]	@ (8002930 <HAL_DMA_Abort+0x44c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a68      	ldr	r2, [pc, #416]	@ (8002934 <HAL_DMA_Abort+0x450>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a67      	ldr	r2, [pc, #412]	@ (8002938 <HAL_DMA_Abort+0x454>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a65      	ldr	r2, [pc, #404]	@ (800293c <HAL_DMA_Abort+0x458>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a64      	ldr	r2, [pc, #400]	@ (8002940 <HAL_DMA_Abort+0x45c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a62      	ldr	r2, [pc, #392]	@ (8002944 <HAL_DMA_Abort+0x460>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a61      	ldr	r2, [pc, #388]	@ (8002948 <HAL_DMA_Abort+0x464>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5f      	ldr	r2, [pc, #380]	@ (800294c <HAL_DMA_Abort+0x468>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002950 <HAL_DMA_Abort+0x46c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002954 <HAL_DMA_Abort+0x470>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002958 <HAL_DMA_Abort+0x474>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a59      	ldr	r2, [pc, #356]	@ (800295c <HAL_DMA_Abort+0x478>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <HAL_DMA_Abort+0x47c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Abort+0x32a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a56      	ldr	r2, [pc, #344]	@ (8002964 <HAL_DMA_Abort+0x480>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <HAL_DMA_Abort+0x33c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e007      	b.n	8002830 <HAL_DMA_Abort+0x34c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002830:	e013      	b.n	800285a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002832:	f7ff f967 	bl	8001b04 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b05      	cmp	r3, #5
 800283e:	d90c      	bls.n	800285a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e12d      	b.n	8002ab6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e5      	bne.n	8002832 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2f      	ldr	r2, [pc, #188]	@ (8002928 <HAL_DMA_Abort+0x444>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04a      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <HAL_DMA_Abort+0x448>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d045      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2c      	ldr	r2, [pc, #176]	@ (8002930 <HAL_DMA_Abort+0x44c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d040      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2a      	ldr	r2, [pc, #168]	@ (8002934 <HAL_DMA_Abort+0x450>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d03b      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a29      	ldr	r2, [pc, #164]	@ (8002938 <HAL_DMA_Abort+0x454>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a27      	ldr	r2, [pc, #156]	@ (800293c <HAL_DMA_Abort+0x458>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <HAL_DMA_Abort+0x45c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d02c      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a24      	ldr	r2, [pc, #144]	@ (8002944 <HAL_DMA_Abort+0x460>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a23      	ldr	r2, [pc, #140]	@ (8002948 <HAL_DMA_Abort+0x464>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a21      	ldr	r2, [pc, #132]	@ (800294c <HAL_DMA_Abort+0x468>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a20      	ldr	r2, [pc, #128]	@ (8002950 <HAL_DMA_Abort+0x46c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <HAL_DMA_Abort+0x470>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <HAL_DMA_Abort+0x474>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <HAL_DMA_Abort+0x478>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <HAL_DMA_Abort+0x47c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort+0x422>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a18      	ldr	r2, [pc, #96]	@ (8002964 <HAL_DMA_Abort+0x480>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_DMA_Abort+0x426>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_DMA_Abort+0x428>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d02b      	beq.n	8002968 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002914:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	223f      	movs	r2, #63	@ 0x3f
 8002920:	409a      	lsls	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	e02a      	b.n	800297e <HAL_DMA_Abort+0x49a>
 8002928:	40020010 	.word	0x40020010
 800292c:	40020028 	.word	0x40020028
 8002930:	40020040 	.word	0x40020040
 8002934:	40020058 	.word	0x40020058
 8002938:	40020070 	.word	0x40020070
 800293c:	40020088 	.word	0x40020088
 8002940:	400200a0 	.word	0x400200a0
 8002944:	400200b8 	.word	0x400200b8
 8002948:	40020410 	.word	0x40020410
 800294c:	40020428 	.word	0x40020428
 8002950:	40020440 	.word	0x40020440
 8002954:	40020458 	.word	0x40020458
 8002958:	40020470 	.word	0x40020470
 800295c:	40020488 	.word	0x40020488
 8002960:	400204a0 	.word	0x400204a0
 8002964:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2201      	movs	r2, #1
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a4f      	ldr	r2, [pc, #316]	@ (8002ac0 <HAL_DMA_Abort+0x5dc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d072      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac4 <HAL_DMA_Abort+0x5e0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d06d      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac8 <HAL_DMA_Abort+0x5e4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d068      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <HAL_DMA_Abort+0x5e8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d063      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a49      	ldr	r2, [pc, #292]	@ (8002ad0 <HAL_DMA_Abort+0x5ec>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d05e      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a47      	ldr	r2, [pc, #284]	@ (8002ad4 <HAL_DMA_Abort+0x5f0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d059      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a46      	ldr	r2, [pc, #280]	@ (8002ad8 <HAL_DMA_Abort+0x5f4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d054      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a44      	ldr	r2, [pc, #272]	@ (8002adc <HAL_DMA_Abort+0x5f8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d04f      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a43      	ldr	r2, [pc, #268]	@ (8002ae0 <HAL_DMA_Abort+0x5fc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a41      	ldr	r2, [pc, #260]	@ (8002ae4 <HAL_DMA_Abort+0x600>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a40      	ldr	r2, [pc, #256]	@ (8002ae8 <HAL_DMA_Abort+0x604>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3e      	ldr	r2, [pc, #248]	@ (8002aec <HAL_DMA_Abort+0x608>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3d      	ldr	r2, [pc, #244]	@ (8002af0 <HAL_DMA_Abort+0x60c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_DMA_Abort+0x610>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a3a      	ldr	r2, [pc, #232]	@ (8002af8 <HAL_DMA_Abort+0x614>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a38      	ldr	r2, [pc, #224]	@ (8002afc <HAL_DMA_Abort+0x618>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a37      	ldr	r2, [pc, #220]	@ (8002b00 <HAL_DMA_Abort+0x61c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a35      	ldr	r2, [pc, #212]	@ (8002b04 <HAL_DMA_Abort+0x620>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a34      	ldr	r2, [pc, #208]	@ (8002b08 <HAL_DMA_Abort+0x624>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <HAL_DMA_Abort+0x628>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a31      	ldr	r2, [pc, #196]	@ (8002b10 <HAL_DMA_Abort+0x62c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2f      	ldr	r2, [pc, #188]	@ (8002b14 <HAL_DMA_Abort+0x630>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b18 <HAL_DMA_Abort+0x634>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	@ (8002b1c <HAL_DMA_Abort+0x638>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Abort+0x58e>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_DMA_Abort+0x590>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002aa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40020010 	.word	0x40020010
 8002ac4:	40020028 	.word	0x40020028
 8002ac8:	40020040 	.word	0x40020040
 8002acc:	40020058 	.word	0x40020058
 8002ad0:	40020070 	.word	0x40020070
 8002ad4:	40020088 	.word	0x40020088
 8002ad8:	400200a0 	.word	0x400200a0
 8002adc:	400200b8 	.word	0x400200b8
 8002ae0:	40020410 	.word	0x40020410
 8002ae4:	40020428 	.word	0x40020428
 8002ae8:	40020440 	.word	0x40020440
 8002aec:	40020458 	.word	0x40020458
 8002af0:	40020470 	.word	0x40020470
 8002af4:	40020488 	.word	0x40020488
 8002af8:	400204a0 	.word	0x400204a0
 8002afc:	400204b8 	.word	0x400204b8
 8002b00:	58025408 	.word	0x58025408
 8002b04:	5802541c 	.word	0x5802541c
 8002b08:	58025430 	.word	0x58025430
 8002b0c:	58025444 	.word	0x58025444
 8002b10:	58025458 	.word	0x58025458
 8002b14:	5802546c 	.word	0x5802546c
 8002b18:	58025480 	.word	0x58025480
 8002b1c:	58025494 	.word	0x58025494

08002b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e237      	b.n	8002fa2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d004      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e22c      	b.n	8002fa2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5c      	ldr	r2, [pc, #368]	@ (8002cc0 <HAL_DMA_Abort_IT+0x1a0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d04a      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5b      	ldr	r2, [pc, #364]	@ (8002cc4 <HAL_DMA_Abort_IT+0x1a4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d045      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a59      	ldr	r2, [pc, #356]	@ (8002cc8 <HAL_DMA_Abort_IT+0x1a8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d040      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a58      	ldr	r2, [pc, #352]	@ (8002ccc <HAL_DMA_Abort_IT+0x1ac>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d03b      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a56      	ldr	r2, [pc, #344]	@ (8002cd0 <HAL_DMA_Abort_IT+0x1b0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d036      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a55      	ldr	r2, [pc, #340]	@ (8002cd4 <HAL_DMA_Abort_IT+0x1b4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d031      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a53      	ldr	r2, [pc, #332]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1b8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02c      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a52      	ldr	r2, [pc, #328]	@ (8002cdc <HAL_DMA_Abort_IT+0x1bc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d027      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	@ (8002ce0 <HAL_DMA_Abort_IT+0x1c0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d022      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce4 <HAL_DMA_Abort_IT+0x1c4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d01d      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce8 <HAL_DMA_Abort_IT+0x1c8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d018      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4c      	ldr	r2, [pc, #304]	@ (8002cec <HAL_DMA_Abort_IT+0x1cc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf0 <HAL_DMA_Abort_IT+0x1d0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00e      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a49      	ldr	r2, [pc, #292]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1d4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1d8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Abort_IT+0xc8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a46      	ldr	r2, [pc, #280]	@ (8002cfc <HAL_DMA_Abort_IT+0x1dc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Abort_IT+0xcc>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_DMA_Abort_IT+0xce>
 8002bec:	2300      	movs	r3, #0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8086 	beq.w	8002d00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc0 <HAL_DMA_Abort_IT+0x1a0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d04a      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002cc4 <HAL_DMA_Abort_IT+0x1a4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d045      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc8 <HAL_DMA_Abort_IT+0x1a8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d040      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <HAL_DMA_Abort_IT+0x1ac>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d03b      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a29      	ldr	r2, [pc, #164]	@ (8002cd0 <HAL_DMA_Abort_IT+0x1b0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d036      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a28      	ldr	r2, [pc, #160]	@ (8002cd4 <HAL_DMA_Abort_IT+0x1b4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d031      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1b8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02c      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a25      	ldr	r2, [pc, #148]	@ (8002cdc <HAL_DMA_Abort_IT+0x1bc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d027      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	@ (8002ce0 <HAL_DMA_Abort_IT+0x1c0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a22      	ldr	r2, [pc, #136]	@ (8002ce4 <HAL_DMA_Abort_IT+0x1c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d01d      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a20      	ldr	r2, [pc, #128]	@ (8002ce8 <HAL_DMA_Abort_IT+0x1c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cec <HAL_DMA_Abort_IT+0x1cc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf0 <HAL_DMA_Abort_IT+0x1d0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00e      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1d4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1d8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x17c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a19      	ldr	r2, [pc, #100]	@ (8002cfc <HAL_DMA_Abort_IT+0x1dc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d108      	bne.n	8002cae <HAL_DMA_Abort_IT+0x18e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e178      	b.n	8002fa0 <HAL_DMA_Abort_IT+0x480>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e16f      	b.n	8002fa0 <HAL_DMA_Abort_IT+0x480>
 8002cc0:	40020010 	.word	0x40020010
 8002cc4:	40020028 	.word	0x40020028
 8002cc8:	40020040 	.word	0x40020040
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	40020070 	.word	0x40020070
 8002cd4:	40020088 	.word	0x40020088
 8002cd8:	400200a0 	.word	0x400200a0
 8002cdc:	400200b8 	.word	0x400200b8
 8002ce0:	40020410 	.word	0x40020410
 8002ce4:	40020428 	.word	0x40020428
 8002ce8:	40020440 	.word	0x40020440
 8002cec:	40020458 	.word	0x40020458
 8002cf0:	40020470 	.word	0x40020470
 8002cf4:	40020488 	.word	0x40020488
 8002cf8:	400204a0 	.word	0x400204a0
 8002cfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 020e 	bic.w	r2, r2, #14
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec8 <HAL_DMA_Abort_IT+0x3a8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04a      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8002ecc <HAL_DMA_Abort_IT+0x3ac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d045      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a69      	ldr	r2, [pc, #420]	@ (8002ed0 <HAL_DMA_Abort_IT+0x3b0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d040      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a68      	ldr	r2, [pc, #416]	@ (8002ed4 <HAL_DMA_Abort_IT+0x3b4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d03b      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a66      	ldr	r2, [pc, #408]	@ (8002ed8 <HAL_DMA_Abort_IT+0x3b8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d036      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_DMA_Abort_IT+0x3bc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d031      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a63      	ldr	r2, [pc, #396]	@ (8002ee0 <HAL_DMA_Abort_IT+0x3c0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02c      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a62      	ldr	r2, [pc, #392]	@ (8002ee4 <HAL_DMA_Abort_IT+0x3c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d027      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a60      	ldr	r2, [pc, #384]	@ (8002ee8 <HAL_DMA_Abort_IT+0x3c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002eec <HAL_DMA_Abort_IT+0x3cc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01d      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <HAL_DMA_Abort_IT+0x3d0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef4 <HAL_DMA_Abort_IT+0x3d4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef8 <HAL_DMA_Abort_IT+0x3d8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a59      	ldr	r2, [pc, #356]	@ (8002efc <HAL_DMA_Abort_IT+0x3dc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a57      	ldr	r2, [pc, #348]	@ (8002f00 <HAL_DMA_Abort_IT+0x3e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x290>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a56      	ldr	r2, [pc, #344]	@ (8002f04 <HAL_DMA_Abort_IT+0x3e4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <HAL_DMA_Abort_IT+0x2a2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e007      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x2b2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ec8 <HAL_DMA_Abort_IT+0x3a8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d072      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ecc <HAL_DMA_Abort_IT+0x3ac>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d06d      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a39      	ldr	r2, [pc, #228]	@ (8002ed0 <HAL_DMA_Abort_IT+0x3b0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d068      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a37      	ldr	r2, [pc, #220]	@ (8002ed4 <HAL_DMA_Abort_IT+0x3b4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d063      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <HAL_DMA_Abort_IT+0x3b8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d05e      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <HAL_DMA_Abort_IT+0x3bc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d059      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <HAL_DMA_Abort_IT+0x3c0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d054      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <HAL_DMA_Abort_IT+0x3c4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d04f      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_DMA_Abort_IT+0x3c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d04a      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_DMA_Abort_IT+0x3cc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d045      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_DMA_Abort_IT+0x3d0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d040      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef4 <HAL_DMA_Abort_IT+0x3d4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d03b      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_DMA_Abort_IT+0x3d8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d036      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <HAL_DMA_Abort_IT+0x3dc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d031      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <HAL_DMA_Abort_IT+0x3e0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d02c      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <HAL_DMA_Abort_IT+0x3e4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d027      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <HAL_DMA_Abort_IT+0x3e8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <HAL_DMA_Abort_IT+0x3ec>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01d      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <HAL_DMA_Abort_IT+0x3f0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1f      	ldr	r2, [pc, #124]	@ (8002f14 <HAL_DMA_Abort_IT+0x3f4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_DMA_Abort_IT+0x3f8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f1c <HAL_DMA_Abort_IT+0x3fc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <HAL_DMA_Abort_IT+0x400>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x3a2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <HAL_DMA_Abort_IT+0x404>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d132      	bne.n	8002f28 <HAL_DMA_Abort_IT+0x408>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e031      	b.n	8002f2a <HAL_DMA_Abort_IT+0x40a>
 8002ec6:	bf00      	nop
 8002ec8:	40020010 	.word	0x40020010
 8002ecc:	40020028 	.word	0x40020028
 8002ed0:	40020040 	.word	0x40020040
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	40020070 	.word	0x40020070
 8002edc:	40020088 	.word	0x40020088
 8002ee0:	400200a0 	.word	0x400200a0
 8002ee4:	400200b8 	.word	0x400200b8
 8002ee8:	40020410 	.word	0x40020410
 8002eec:	40020428 	.word	0x40020428
 8002ef0:	40020440 	.word	0x40020440
 8002ef4:	40020458 	.word	0x40020458
 8002ef8:	40020470 	.word	0x40020470
 8002efc:	40020488 	.word	0x40020488
 8002f00:	400204a0 	.word	0x400204a0
 8002f04:	400204b8 	.word	0x400204b8
 8002f08:	58025408 	.word	0x58025408
 8002f0c:	5802541c 	.word	0x5802541c
 8002f10:	58025430 	.word	0x58025430
 8002f14:	58025444 	.word	0x58025444
 8002f18:	58025458 	.word	0x58025458
 8002f1c:	5802546c 	.word	0x5802546c
 8002f20:	58025480 	.word	0x58025480
 8002f24:	58025494 	.word	0x58025494
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d028      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop

08002fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	@ 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb8:	4b67      	ldr	r3, [pc, #412]	@ (8003158 <HAL_DMA_IRQHandler+0x1ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	@ (800315c <HAL_DMA_IRQHandler+0x1b0>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5f      	ldr	r2, [pc, #380]	@ (8003160 <HAL_DMA_IRQHandler+0x1b4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d04a      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	@ (8003164 <HAL_DMA_IRQHandler+0x1b8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d045      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8003168 <HAL_DMA_IRQHandler+0x1bc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d040      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5a      	ldr	r2, [pc, #360]	@ (800316c <HAL_DMA_IRQHandler+0x1c0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d03b      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a59      	ldr	r2, [pc, #356]	@ (8003170 <HAL_DMA_IRQHandler+0x1c4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d036      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_DMA_IRQHandler+0x1c8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d031      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a56      	ldr	r2, [pc, #344]	@ (8003178 <HAL_DMA_IRQHandler+0x1cc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d02c      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a54      	ldr	r2, [pc, #336]	@ (800317c <HAL_DMA_IRQHandler+0x1d0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d027      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a53      	ldr	r2, [pc, #332]	@ (8003180 <HAL_DMA_IRQHandler+0x1d4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a51      	ldr	r2, [pc, #324]	@ (8003184 <HAL_DMA_IRQHandler+0x1d8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01d      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a50      	ldr	r2, [pc, #320]	@ (8003188 <HAL_DMA_IRQHandler+0x1dc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a4e      	ldr	r2, [pc, #312]	@ (800318c <HAL_DMA_IRQHandler+0x1e0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4d      	ldr	r2, [pc, #308]	@ (8003190 <HAL_DMA_IRQHandler+0x1e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4b      	ldr	r2, [pc, #300]	@ (8003194 <HAL_DMA_IRQHandler+0x1e8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_DMA_IRQHandler+0x1ec>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a48      	ldr	r2, [pc, #288]	@ (800319c <HAL_DMA_IRQHandler+0x1f0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_DMA_IRQHandler+0xd6>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_DMA_IRQHandler+0xd8>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 842b 	beq.w	80038e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2208      	movs	r2, #8
 8003094:	409a      	lsls	r2, r3
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80a2 	beq.w	80031e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003160 <HAL_DMA_IRQHandler+0x1b4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04a      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003164 <HAL_DMA_IRQHandler+0x1b8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d045      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <HAL_DMA_IRQHandler+0x1bc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d040      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2a      	ldr	r2, [pc, #168]	@ (800316c <HAL_DMA_IRQHandler+0x1c0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03b      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <HAL_DMA_IRQHandler+0x1c4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d036      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <HAL_DMA_IRQHandler+0x1c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d031      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a25      	ldr	r2, [pc, #148]	@ (8003178 <HAL_DMA_IRQHandler+0x1cc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02c      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a24      	ldr	r2, [pc, #144]	@ (800317c <HAL_DMA_IRQHandler+0x1d0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a22      	ldr	r2, [pc, #136]	@ (8003180 <HAL_DMA_IRQHandler+0x1d4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	@ (8003184 <HAL_DMA_IRQHandler+0x1d8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1f      	ldr	r2, [pc, #124]	@ (8003188 <HAL_DMA_IRQHandler+0x1dc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_DMA_IRQHandler+0x1e0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <HAL_DMA_IRQHandler+0x1e4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_DMA_IRQHandler+0x1e8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <HAL_DMA_IRQHandler+0x1ec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_DMA_IRQHandler+0x1f0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d12f      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x1f4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e02e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x208>
 8003156:	bf00      	nop
 8003158:	24000000 	.word	0x24000000
 800315c:	1b4e81b5 	.word	0x1b4e81b5
 8003160:	40020010 	.word	0x40020010
 8003164:	40020028 	.word	0x40020028
 8003168:	40020040 	.word	0x40020040
 800316c:	40020058 	.word	0x40020058
 8003170:	40020070 	.word	0x40020070
 8003174:	40020088 	.word	0x40020088
 8003178:	400200a0 	.word	0x400200a0
 800317c:	400200b8 	.word	0x400200b8
 8003180:	40020410 	.word	0x40020410
 8003184:	40020428 	.word	0x40020428
 8003188:	40020440 	.word	0x40020440
 800318c:	40020458 	.word	0x40020458
 8003190:	40020470 	.word	0x40020470
 8003194:	40020488 	.word	0x40020488
 8003198:	400204a0 	.word	0x400204a0
 800319c:	400204b8 	.word	0x400204b8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2208      	movs	r2, #8
 80031d2:	409a      	lsls	r2, r3
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06e      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a69      	ldr	r2, [pc, #420]	@ (80033a4 <HAL_DMA_IRQHandler+0x3f8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d04a      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a67      	ldr	r2, [pc, #412]	@ (80033a8 <HAL_DMA_IRQHandler+0x3fc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d045      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a66      	ldr	r2, [pc, #408]	@ (80033ac <HAL_DMA_IRQHandler+0x400>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d040      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a64      	ldr	r2, [pc, #400]	@ (80033b0 <HAL_DMA_IRQHandler+0x404>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d03b      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a63      	ldr	r2, [pc, #396]	@ (80033b4 <HAL_DMA_IRQHandler+0x408>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d036      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a61      	ldr	r2, [pc, #388]	@ (80033b8 <HAL_DMA_IRQHandler+0x40c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d031      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a60      	ldr	r2, [pc, #384]	@ (80033bc <HAL_DMA_IRQHandler+0x410>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d02c      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5e      	ldr	r2, [pc, #376]	@ (80033c0 <HAL_DMA_IRQHandler+0x414>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d027      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a5d      	ldr	r2, [pc, #372]	@ (80033c4 <HAL_DMA_IRQHandler+0x418>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d022      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5b      	ldr	r2, [pc, #364]	@ (80033c8 <HAL_DMA_IRQHandler+0x41c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01d      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5a      	ldr	r2, [pc, #360]	@ (80033cc <HAL_DMA_IRQHandler+0x420>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d018      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a58      	ldr	r2, [pc, #352]	@ (80033d0 <HAL_DMA_IRQHandler+0x424>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a57      	ldr	r2, [pc, #348]	@ (80033d4 <HAL_DMA_IRQHandler+0x428>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a55      	ldr	r2, [pc, #340]	@ (80033d8 <HAL_DMA_IRQHandler+0x42c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a54      	ldr	r2, [pc, #336]	@ (80033dc <HAL_DMA_IRQHandler+0x430>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_DMA_IRQHandler+0x434>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10a      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x304>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e003      	b.n	80032b8 <HAL_DMA_IRQHandler+0x30c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2204      	movs	r2, #4
 80032e2:	409a      	lsls	r2, r3
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808f 	beq.w	800340c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	@ (80033a4 <HAL_DMA_IRQHandler+0x3f8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_DMA_IRQHandler+0x3fc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_DMA_IRQHandler+0x400>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a27      	ldr	r2, [pc, #156]	@ (80033b0 <HAL_DMA_IRQHandler+0x404>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a26      	ldr	r2, [pc, #152]	@ (80033b4 <HAL_DMA_IRQHandler+0x408>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a24      	ldr	r2, [pc, #144]	@ (80033b8 <HAL_DMA_IRQHandler+0x40c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <HAL_DMA_IRQHandler+0x410>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a21      	ldr	r2, [pc, #132]	@ (80033c0 <HAL_DMA_IRQHandler+0x414>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a20      	ldr	r2, [pc, #128]	@ (80033c4 <HAL_DMA_IRQHandler+0x418>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <HAL_DMA_IRQHandler+0x41c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_DMA_IRQHandler+0x420>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_DMA_IRQHandler+0x424>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <HAL_DMA_IRQHandler+0x428>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_DMA_IRQHandler+0x42c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <HAL_DMA_IRQHandler+0x430>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <HAL_DMA_IRQHandler+0x434>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d12a      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x438>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e023      	b.n	80033ec <HAL_DMA_IRQHandler+0x440>
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2210      	movs	r2, #16
 8003416:	409a      	lsls	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a6 	beq.w	800356e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a85      	ldr	r2, [pc, #532]	@ (800363c <HAL_DMA_IRQHandler+0x690>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a83      	ldr	r2, [pc, #524]	@ (8003640 <HAL_DMA_IRQHandler+0x694>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a82      	ldr	r2, [pc, #520]	@ (8003644 <HAL_DMA_IRQHandler+0x698>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a80      	ldr	r2, [pc, #512]	@ (8003648 <HAL_DMA_IRQHandler+0x69c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7f      	ldr	r2, [pc, #508]	@ (800364c <HAL_DMA_IRQHandler+0x6a0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7d      	ldr	r2, [pc, #500]	@ (8003650 <HAL_DMA_IRQHandler+0x6a4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7c      	ldr	r2, [pc, #496]	@ (8003654 <HAL_DMA_IRQHandler+0x6a8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a7a      	ldr	r2, [pc, #488]	@ (8003658 <HAL_DMA_IRQHandler+0x6ac>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a79      	ldr	r2, [pc, #484]	@ (800365c <HAL_DMA_IRQHandler+0x6b0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a77      	ldr	r2, [pc, #476]	@ (8003660 <HAL_DMA_IRQHandler+0x6b4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a76      	ldr	r2, [pc, #472]	@ (8003664 <HAL_DMA_IRQHandler+0x6b8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a74      	ldr	r2, [pc, #464]	@ (8003668 <HAL_DMA_IRQHandler+0x6bc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a73      	ldr	r2, [pc, #460]	@ (800366c <HAL_DMA_IRQHandler+0x6c0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a71      	ldr	r2, [pc, #452]	@ (8003670 <HAL_DMA_IRQHandler+0x6c4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a70      	ldr	r2, [pc, #448]	@ (8003674 <HAL_DMA_IRQHandler+0x6c8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003678 <HAL_DMA_IRQHandler+0x6cc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10a      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x52c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e009      	b.n	80034ec <HAL_DMA_IRQHandler+0x540>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03e      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2210      	movs	r2, #16
 80034fa:	409a      	lsls	r2, r3
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d024      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
 800352c:	e01f      	b.n	800356e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01b      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
 800353e:	e016      	b.n	800356e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2220      	movs	r2, #32
 8003578:	409a      	lsls	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8110 	beq.w	80037a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2c      	ldr	r2, [pc, #176]	@ (800363c <HAL_DMA_IRQHandler+0x690>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2b      	ldr	r2, [pc, #172]	@ (8003640 <HAL_DMA_IRQHandler+0x694>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a29      	ldr	r2, [pc, #164]	@ (8003644 <HAL_DMA_IRQHandler+0x698>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a28      	ldr	r2, [pc, #160]	@ (8003648 <HAL_DMA_IRQHandler+0x69c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a26      	ldr	r2, [pc, #152]	@ (800364c <HAL_DMA_IRQHandler+0x6a0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a25      	ldr	r2, [pc, #148]	@ (8003650 <HAL_DMA_IRQHandler+0x6a4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a23      	ldr	r2, [pc, #140]	@ (8003654 <HAL_DMA_IRQHandler+0x6a8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a22      	ldr	r2, [pc, #136]	@ (8003658 <HAL_DMA_IRQHandler+0x6ac>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a20      	ldr	r2, [pc, #128]	@ (800365c <HAL_DMA_IRQHandler+0x6b0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_DMA_IRQHandler+0x6b4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_DMA_IRQHandler+0x6b8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <HAL_DMA_IRQHandler+0x6bc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <HAL_DMA_IRQHandler+0x6c0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_DMA_IRQHandler+0x6c4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <HAL_DMA_IRQHandler+0x6c8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a16      	ldr	r2, [pc, #88]	@ (8003678 <HAL_DMA_IRQHandler+0x6cc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d12b      	bne.n	800367c <HAL_DMA_IRQHandler+0x6d0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e02a      	b.n	8003690 <HAL_DMA_IRQHandler+0x6e4>
 800363a:	bf00      	nop
 800363c:	40020010 	.word	0x40020010
 8003640:	40020028 	.word	0x40020028
 8003644:	40020040 	.word	0x40020040
 8003648:	40020058 	.word	0x40020058
 800364c:	40020070 	.word	0x40020070
 8003650:	40020088 	.word	0x40020088
 8003654:	400200a0 	.word	0x400200a0
 8003658:	400200b8 	.word	0x400200b8
 800365c:	40020410 	.word	0x40020410
 8003660:	40020428 	.word	0x40020428
 8003664:	40020440 	.word	0x40020440
 8003668:	40020458 	.word	0x40020458
 800366c:	40020470 	.word	0x40020470
 8003670:	40020488 	.word	0x40020488
 8003674:	400204a0 	.word	0x400204a0
 8003678:	400204b8 	.word	0x400204b8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8087 	beq.w	80037a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2220      	movs	r2, #32
 80036a0:	409a      	lsls	r2, r3
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d139      	bne.n	8003726 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0216 	bic.w	r2, r2, #22
 80036c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_DMA_IRQHandler+0x736>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	223f      	movs	r2, #63	@ 0x3f
 80036fc:	409a      	lsls	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 834a 	beq.w	8003db0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
          }
          return;
 8003724:	e344      	b.n	8003db0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d018      	beq.n	8003766 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02c      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e027      	b.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e01e      	b.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10f      	bne.n	8003794 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0210 	bic.w	r2, r2, #16
 8003782:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8306 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8088 	beq.w	80038cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	@ (80039b4 <HAL_DMA_IRQHandler+0xa08>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	@ (80039b8 <HAL_DMA_IRQHandler+0xa0c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a77      	ldr	r2, [pc, #476]	@ (80039bc <HAL_DMA_IRQHandler+0xa10>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a76      	ldr	r2, [pc, #472]	@ (80039c0 <HAL_DMA_IRQHandler+0xa14>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	@ (80039c4 <HAL_DMA_IRQHandler+0xa18>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	@ (80039c8 <HAL_DMA_IRQHandler+0xa1c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a71      	ldr	r2, [pc, #452]	@ (80039cc <HAL_DMA_IRQHandler+0xa20>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	@ (80039d0 <HAL_DMA_IRQHandler+0xa24>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_DMA_IRQHandler+0xa28>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6d      	ldr	r2, [pc, #436]	@ (80039d8 <HAL_DMA_IRQHandler+0xa2c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6b      	ldr	r2, [pc, #428]	@ (80039dc <HAL_DMA_IRQHandler+0xa30>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6a      	ldr	r2, [pc, #424]	@ (80039e0 <HAL_DMA_IRQHandler+0xa34>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a68      	ldr	r2, [pc, #416]	@ (80039e4 <HAL_DMA_IRQHandler+0xa38>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a67      	ldr	r2, [pc, #412]	@ (80039e8 <HAL_DMA_IRQHandler+0xa3c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a65      	ldr	r2, [pc, #404]	@ (80039ec <HAL_DMA_IRQHandler+0xa40>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a64      	ldr	r2, [pc, #400]	@ (80039f0 <HAL_DMA_IRQHandler+0xa44>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <HAL_DMA_IRQHandler+0x8ca>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e007      	b.n	8003886 <HAL_DMA_IRQHandler+0x8da>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388e:	429a      	cmp	r2, r3
 8003890:	d307      	bcc.n	80038a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f2      	bne.n	8003886 <HAL_DMA_IRQHandler+0x8da>
 80038a0:	e000      	b.n	80038a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2203      	movs	r2, #3
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80038ba:	e003      	b.n	80038c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8272 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
 80038de:	e26c      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a43      	ldr	r2, [pc, #268]	@ (80039f4 <HAL_DMA_IRQHandler+0xa48>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a42      	ldr	r2, [pc, #264]	@ (80039f8 <HAL_DMA_IRQHandler+0xa4c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <HAL_DMA_IRQHandler+0xa50>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3f      	ldr	r2, [pc, #252]	@ (8003a00 <HAL_DMA_IRQHandler+0xa54>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a04 <HAL_DMA_IRQHandler+0xa58>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3c      	ldr	r2, [pc, #240]	@ (8003a08 <HAL_DMA_IRQHandler+0xa5c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3a      	ldr	r2, [pc, #232]	@ (8003a0c <HAL_DMA_IRQHandler+0xa60>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a39      	ldr	r2, [pc, #228]	@ (8003a10 <HAL_DMA_IRQHandler+0xa64>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_DMA_IRQHandler+0x988>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x98a>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 823f 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2204      	movs	r2, #4
 800394e:	409a      	lsls	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80cd 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xb48>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80c7 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2204      	movs	r2, #4
 8003970:	409a      	lsls	r2, r3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d049      	beq.n	8003a14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8210 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800399c:	e20a      	b.n	8003db4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8206 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b0:	e200      	b.n	8003db4 <HAL_DMA_IRQHandler+0xe08>
 80039b2:	bf00      	nop
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	58025408 	.word	0x58025408
 80039f8:	5802541c 	.word	0x5802541c
 80039fc:	58025430 	.word	0x58025430
 8003a00:	58025444 	.word	0x58025444
 8003a04:	58025458 	.word	0x58025458
 8003a08:	5802546c 	.word	0x5802546c
 8003a0c:	58025480 	.word	0x58025480
 8003a10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7f      	ldr	r2, [pc, #508]	@ (8003c20 <HAL_DMA_IRQHandler+0xc74>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04a      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c24 <HAL_DMA_IRQHandler+0xc78>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7c      	ldr	r2, [pc, #496]	@ (8003c28 <HAL_DMA_IRQHandler+0xc7c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d040      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7a      	ldr	r2, [pc, #488]	@ (8003c2c <HAL_DMA_IRQHandler+0xc80>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d03b      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a79      	ldr	r2, [pc, #484]	@ (8003c30 <HAL_DMA_IRQHandler+0xc84>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d036      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a77      	ldr	r2, [pc, #476]	@ (8003c34 <HAL_DMA_IRQHandler+0xc88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d031      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a76      	ldr	r2, [pc, #472]	@ (8003c38 <HAL_DMA_IRQHandler+0xc8c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02c      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a74      	ldr	r2, [pc, #464]	@ (8003c3c <HAL_DMA_IRQHandler+0xc90>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d027      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a73      	ldr	r2, [pc, #460]	@ (8003c40 <HAL_DMA_IRQHandler+0xc94>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a71      	ldr	r2, [pc, #452]	@ (8003c44 <HAL_DMA_IRQHandler+0xc98>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a70      	ldr	r2, [pc, #448]	@ (8003c48 <HAL_DMA_IRQHandler+0xc9c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6e      	ldr	r2, [pc, #440]	@ (8003c4c <HAL_DMA_IRQHandler+0xca0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c50 <HAL_DMA_IRQHandler+0xca4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c54 <HAL_DMA_IRQHandler+0xca8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6a      	ldr	r2, [pc, #424]	@ (8003c58 <HAL_DMA_IRQHandler+0xcac>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a68      	ldr	r2, [pc, #416]	@ (8003c5c <HAL_DMA_IRQHandler+0xcb0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0xb24>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0208 	bic.w	r2, r2, #8
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_DMA_IRQHandler+0xb34>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8165 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af2:	e15f      	b.n	8003db4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2202      	movs	r2, #2
 8003afe:	409a      	lsls	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80c5 	beq.w	8003c94 <HAL_DMA_IRQHandler+0xce8>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80bf 	beq.w	8003c94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2202      	movs	r2, #2
 8003b20:	409a      	lsls	r2, r3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 813a 	beq.w	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4c:	e134      	b.n	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8130 	beq.w	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b60:	e12a      	b.n	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 8089 	bne.w	8003c80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	@ (8003c20 <HAL_DMA_IRQHandler+0xc74>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <HAL_DMA_IRQHandler+0xc78>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d045      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a28      	ldr	r2, [pc, #160]	@ (8003c28 <HAL_DMA_IRQHandler+0xc7c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a26      	ldr	r2, [pc, #152]	@ (8003c2c <HAL_DMA_IRQHandler+0xc80>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	@ (8003c30 <HAL_DMA_IRQHandler+0xc84>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d036      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a23      	ldr	r2, [pc, #140]	@ (8003c34 <HAL_DMA_IRQHandler+0xc88>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a22      	ldr	r2, [pc, #136]	@ (8003c38 <HAL_DMA_IRQHandler+0xc8c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d02c      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_DMA_IRQHandler+0xc90>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d027      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_DMA_IRQHandler+0xc94>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c44 <HAL_DMA_IRQHandler+0xc98>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <HAL_DMA_IRQHandler+0xc9c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <HAL_DMA_IRQHandler+0xca0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a19      	ldr	r2, [pc, #100]	@ (8003c50 <HAL_DMA_IRQHandler+0xca4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <HAL_DMA_IRQHandler+0xca8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	@ (8003c58 <HAL_DMA_IRQHandler+0xcac>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a14      	ldr	r2, [pc, #80]	@ (8003c5c <HAL_DMA_IRQHandler+0xcb0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d128      	bne.n	8003c60 <HAL_DMA_IRQHandler+0xcb4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0214 	bic.w	r2, r2, #20
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e027      	b.n	8003c70 <HAL_DMA_IRQHandler+0xcc4>
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020a 	bic.w	r2, r2, #10
 8003c6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8097 	beq.w	8003db8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c92:	e091      	b.n	8003db8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8088 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8082 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a41      	ldr	r2, [pc, #260]	@ (8003dc0 <HAL_DMA_IRQHandler+0xe14>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04a      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc4 <HAL_DMA_IRQHandler+0xe18>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d045      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc8 <HAL_DMA_IRQHandler+0xe1c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d040      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dcc <HAL_DMA_IRQHandler+0xe20>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d03b      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd0 <HAL_DMA_IRQHandler+0xe24>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d036      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a39      	ldr	r2, [pc, #228]	@ (8003dd4 <HAL_DMA_IRQHandler+0xe28>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d031      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a38      	ldr	r2, [pc, #224]	@ (8003dd8 <HAL_DMA_IRQHandler+0xe2c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d02c      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a36      	ldr	r2, [pc, #216]	@ (8003ddc <HAL_DMA_IRQHandler+0xe30>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d027      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a35      	ldr	r2, [pc, #212]	@ (8003de0 <HAL_DMA_IRQHandler+0xe34>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a33      	ldr	r2, [pc, #204]	@ (8003de4 <HAL_DMA_IRQHandler+0xe38>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01d      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a32      	ldr	r2, [pc, #200]	@ (8003de8 <HAL_DMA_IRQHandler+0xe3c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d018      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a30      	ldr	r2, [pc, #192]	@ (8003dec <HAL_DMA_IRQHandler+0xe40>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2f      	ldr	r2, [pc, #188]	@ (8003df0 <HAL_DMA_IRQHandler+0xe44>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003df4 <HAL_DMA_IRQHandler+0xe48>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d009      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <HAL_DMA_IRQHandler+0xe4c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	@ (8003dfc <HAL_DMA_IRQHandler+0xe50>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <HAL_DMA_IRQHandler+0xdbc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 021c 	bic.w	r2, r2, #28
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e007      	b.n	8003d78 <HAL_DMA_IRQHandler+0xdcc>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020e 	bic.w	r2, r2, #14
 8003d76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	e004      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dba:	3728      	adds	r7, #40	@ 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8

08003e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a42      	ldr	r2, [pc, #264]	@ (8003f18 <DMA_CalcBaseAndBitshift+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a41      	ldr	r2, [pc, #260]	@ (8003f1c <DMA_CalcBaseAndBitshift+0x11c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3f      	ldr	r2, [pc, #252]	@ (8003f20 <DMA_CalcBaseAndBitshift+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f24 <DMA_CalcBaseAndBitshift+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	@ (8003f28 <DMA_CalcBaseAndBitshift+0x128>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f2c <DMA_CalcBaseAndBitshift+0x12c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a39      	ldr	r2, [pc, #228]	@ (8003f30 <DMA_CalcBaseAndBitshift+0x130>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	@ (8003f34 <DMA_CalcBaseAndBitshift+0x134>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	@ (8003f38 <DMA_CalcBaseAndBitshift+0x138>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <DMA_CalcBaseAndBitshift+0x13c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <DMA_CalcBaseAndBitshift+0x140>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a32      	ldr	r2, [pc, #200]	@ (8003f44 <DMA_CalcBaseAndBitshift+0x144>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <DMA_CalcBaseAndBitshift+0x148>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f4c <DMA_CalcBaseAndBitshift+0x14c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <DMA_CalcBaseAndBitshift+0x150>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f54 <DMA_CalcBaseAndBitshift+0x154>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <DMA_CalcBaseAndBitshift+0xac>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <DMA_CalcBaseAndBitshift+0xae>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d024      	beq.n	8003efc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3b10      	subs	r3, #16
 8003eba:	4a27      	ldr	r2, [pc, #156]	@ (8003f58 <DMA_CalcBaseAndBitshift+0x158>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	4a24      	ldr	r2, [pc, #144]	@ (8003f5c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d908      	bls.n	8003eec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <DMA_CalcBaseAndBitshift+0x160>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eea:	e00d      	b.n	8003f08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f60 <DMA_CalcBaseAndBitshift+0x160>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efa:	e005      	b.n	8003f08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
 8003f58:	aaaaaaab 	.word	0xaaaaaaab
 8003f5c:	080115e8 	.word	0x080115e8
 8003f60:	fffffc00 	.word	0xfffffc00

08003f64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d120      	bne.n	8003fba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d858      	bhi.n	8004032 <DMA_CheckFifoParam+0xce>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <DMA_CheckFifoParam+0x24>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fab 	.word	0x08003fab
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	08004033 	.word	0x08004033
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d048      	beq.n	8004036 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fa8:	e045      	b.n	8004036 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fb2:	d142      	bne.n	800403a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fb8:	e03f      	b.n	800403a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc2:	d123      	bne.n	800400c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d838      	bhi.n	800403e <DMA_CheckFifoParam+0xda>
 8003fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd4 <DMA_CheckFifoParam+0x70>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003feb 	.word	0x08003feb
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	08003ffd 	.word	0x08003ffd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe8:	e030      	b.n	800404c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d025      	beq.n	8004042 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ffa:	e022      	b.n	8004042 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004004:	d11f      	bne.n	8004046 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800400a:	e01c      	b.n	8004046 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	2b02      	cmp	r3, #2
 8004012:	d902      	bls.n	800401a <DMA_CheckFifoParam+0xb6>
 8004014:	2b03      	cmp	r3, #3
 8004016:	d003      	beq.n	8004020 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004018:	e018      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
        break;
 800401e:	e015      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
    break;
 8004030:	e00b      	b.n	800404a <DMA_CheckFifoParam+0xe6>
        break;
 8004032:	bf00      	nop
 8004034:	e00a      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 8004036:	bf00      	nop
 8004038:	e008      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 800403a:	bf00      	nop
 800403c:	e006      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 800403e:	bf00      	nop
 8004040:	e004      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <DMA_CheckFifoParam+0xe8>
    break;
 800404a:	bf00      	nop
    }
  }

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a38      	ldr	r2, [pc, #224]	@ (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a36      	ldr	r2, [pc, #216]	@ (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a35      	ldr	r2, [pc, #212]	@ (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a33      	ldr	r2, [pc, #204]	@ (800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a32      	ldr	r2, [pc, #200]	@ (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a30      	ldr	r2, [pc, #192]	@ (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2d      	ldr	r2, [pc, #180]	@ (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01a      	beq.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b08      	subs	r3, #8
 80040cc:	4a28      	ldr	r2, [pc, #160]	@ (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040f8:	e024      	b.n	8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3b10      	subs	r3, #16
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d806      	bhi.n	8004122 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d902      	bls.n	8004122 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3308      	adds	r3, #8
 8004120:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4b18      	ldr	r3, [pc, #96]	@ (8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	@ (800418c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004134:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2201      	movs	r2, #1
 800413e:	409a      	lsls	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	58025408 	.word	0x58025408
 8004154:	5802541c 	.word	0x5802541c
 8004158:	58025430 	.word	0x58025430
 800415c:	58025444 	.word	0x58025444
 8004160:	58025458 	.word	0x58025458
 8004164:	5802546c 	.word	0x5802546c
 8004168:	58025480 	.word	0x58025480
 800416c:	58025494 	.word	0x58025494
 8004170:	cccccccd 	.word	0xcccccccd
 8004174:	16009600 	.word	0x16009600
 8004178:	58025880 	.word	0x58025880
 800417c:	aaaaaaab 	.word	0xaaaaaaab
 8004180:	400204b8 	.word	0x400204b8
 8004184:	4002040f 	.word	0x4002040f
 8004188:	10008200 	.word	0x10008200
 800418c:	40020880 	.word	0x40020880

08004190 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04a      	beq.n	800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d847      	bhi.n	800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a25      	ldr	r2, [pc, #148]	@ (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a24      	ldr	r2, [pc, #144]	@ (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d01d      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	@ (8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004218:	671a      	str	r2, [r3, #112]	@ 0x70
 800421a:	e009      	b.n	8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800422e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	2201      	movs	r2, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	58025408 	.word	0x58025408
 800424c:	5802541c 	.word	0x5802541c
 8004250:	58025430 	.word	0x58025430
 8004254:	58025444 	.word	0x58025444
 8004258:	58025458 	.word	0x58025458
 800425c:	5802546c 	.word	0x5802546c
 8004260:	58025480 	.word	0x58025480
 8004264:	58025494 	.word	0x58025494
 8004268:	1600963f 	.word	0x1600963f
 800426c:	58025940 	.word	0x58025940
 8004270:	1000823f 	.word	0x1000823f
 8004274:	40020940 	.word	0x40020940

08004278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	@ 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004286:	4b89      	ldr	r3, [pc, #548]	@ (80044ac <HAL_GPIO_Init+0x234>)
 8004288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800428a:	e194      	b.n	80045b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8186 	beq.w	80045b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_GPIO_Init+0x44>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d130      	bne.n	800431e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f2:	2201      	movs	r2, #1
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0201 	and.w	r2, r3, #1
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b03      	cmp	r3, #3
 8004328:	d017      	beq.n	800435a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d123      	bne.n	80043ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	08da      	lsrs	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3208      	adds	r2, #8
 80043a8:	69b9      	ldr	r1, [r7, #24]
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80e0 	beq.w	80045b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f0:	4b2f      	ldr	r3, [pc, #188]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 80043f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043f6:	4a2e      	ldr	r2, [pc, #184]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004400:	4b2b      	ldr	r3, [pc, #172]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 8004402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440e:	4a29      	ldr	r2, [pc, #164]	@ (80044b4 <HAL_GPIO_Init+0x23c>)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <HAL_GPIO_Init+0x240>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d052      	beq.n	80044e0 <HAL_GPIO_Init+0x268>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_GPIO_Init+0x244>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_GPIO_Init+0x22e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_GPIO_Init+0x248>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02b      	beq.n	80044a2 <HAL_GPIO_Init+0x22a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <HAL_GPIO_Init+0x24c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d025      	beq.n	800449e <HAL_GPIO_Init+0x226>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <HAL_GPIO_Init+0x250>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <HAL_GPIO_Init+0x222>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <HAL_GPIO_Init+0x254>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d019      	beq.n	8004496 <HAL_GPIO_Init+0x21e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <HAL_GPIO_Init+0x258>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_GPIO_Init+0x21a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_GPIO_Init+0x25c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00d      	beq.n	800448e <HAL_GPIO_Init+0x216>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <HAL_GPIO_Init+0x260>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_GPIO_Init+0x212>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <HAL_GPIO_Init+0x264>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_GPIO_Init+0x20e>
 8004482:	2309      	movs	r3, #9
 8004484:	e02d      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004486:	230a      	movs	r3, #10
 8004488:	e02b      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800448a:	2308      	movs	r3, #8
 800448c:	e029      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800448e:	2307      	movs	r3, #7
 8004490:	e027      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004492:	2306      	movs	r3, #6
 8004494:	e025      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004496:	2305      	movs	r3, #5
 8004498:	e023      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800449a:	2304      	movs	r3, #4
 800449c:	e021      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800449e:	2303      	movs	r3, #3
 80044a0:	e01f      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e01d      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e01b      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044aa:	bf00      	nop
 80044ac:	58000080 	.word	0x58000080
 80044b0:	58024400 	.word	0x58024400
 80044b4:	58000400 	.word	0x58000400
 80044b8:	58020000 	.word	0x58020000
 80044bc:	58020400 	.word	0x58020400
 80044c0:	58020800 	.word	0x58020800
 80044c4:	58020c00 	.word	0x58020c00
 80044c8:	58021000 	.word	0x58021000
 80044cc:	58021400 	.word	0x58021400
 80044d0:	58021800 	.word	0x58021800
 80044d4:	58021c00 	.word	0x58021c00
 80044d8:	58022000 	.word	0x58022000
 80044dc:	58022400 	.word	0x58022400
 80044e0:	2300      	movs	r3, #0
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	f002 0203 	and.w	r2, r2, #3
 80044e8:	0092      	lsls	r2, r2, #2
 80044ea:	4093      	lsls	r3, r2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f2:	4938      	ldr	r1, [pc, #224]	@ (80045d4 <HAL_GPIO_Init+0x35c>)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f ae63 	bne.w	800428c <HAL_GPIO_Init+0x14>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	3724      	adds	r7, #36	@ 0x24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	58000400 	.word	0x58000400

080045d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
 80045e4:	4613      	mov	r3, r2
 80045e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045e8:	787b      	ldrb	r3, [r7, #1]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80045f4:	e003      	b.n	80045fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	041a      	lsls	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	619a      	str	r2, [r3, #24]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	041a      	lsls	r2, r3, #16
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43d9      	mvns	r1, r3
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	400b      	ands	r3, r1
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004648:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <HAL_PWREx_ConfigSupply+0x70>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d00a      	beq.n	800466a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004654:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <HAL_PWREx_ConfigSupply+0x70>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d001      	beq.n	8004666 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e01f      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e01d      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800466a:	4b11      	ldr	r3, [pc, #68]	@ (80046b0 <HAL_PWREx_ConfigSupply+0x70>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f023 0207 	bic.w	r2, r3, #7
 8004672:	490f      	ldr	r1, [pc, #60]	@ (80046b0 <HAL_PWREx_ConfigSupply+0x70>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4313      	orrs	r3, r2
 8004678:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800467a:	f7fd fa43 	bl	8001b04 <HAL_GetTick>
 800467e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004680:	e009      	b.n	8004696 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004682:	f7fd fa3f 	bl	8001b04 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004690:	d901      	bls.n	8004696 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e007      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_PWREx_ConfigSupply+0x70>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a2:	d1ee      	bne.n	8004682 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	58024800 	.word	0x58024800

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	@ 0x30
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f000 bc48 	b.w	8004f58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8088 	beq.w	80047e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d6:	4b99      	ldr	r3, [pc, #612]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046e0:	4b96      	ldr	r3, [pc, #600]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d007      	beq.n	80046fc <HAL_RCC_OscConfig+0x48>
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	2b18      	cmp	r3, #24
 80046f0:	d111      	bne.n	8004716 <HAL_RCC_OscConfig+0x62>
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d06d      	beq.n	80047e4 <HAL_RCC_OscConfig+0x130>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d169      	bne.n	80047e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f000 bc21 	b.w	8004f58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x7a>
 8004720:	4b86      	ldr	r3, [pc, #536]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a85      	ldr	r2, [pc, #532]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e02e      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x9c>
 8004736:	4b81      	ldr	r3, [pc, #516]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a80      	ldr	r2, [pc, #512]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800473c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b7e      	ldr	r3, [pc, #504]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7d      	ldr	r2, [pc, #500]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xc0>
 800475a:	4b78      	ldr	r3, [pc, #480]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a77      	ldr	r2, [pc, #476]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b75      	ldr	r3, [pc, #468]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a74      	ldr	r2, [pc, #464]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
 8004774:	4b71      	ldr	r3, [pc, #452]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a70      	ldr	r2, [pc, #448]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6e      	ldr	r3, [pc, #440]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6d      	ldr	r2, [pc, #436]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd f9b6 	bl	8001b04 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd f9b2 	bl	8001b04 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e3d4      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ae:	4b63      	ldr	r3, [pc, #396]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xe8>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd f9a2 	bl	8001b04 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd f99e 	bl	8001b04 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e3c0      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047d6:	4b59      	ldr	r3, [pc, #356]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x110>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80ca 	beq.w	8004988 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f4:	4b51      	ldr	r3, [pc, #324]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047fe:	4b4f      	ldr	r3, [pc, #316]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <HAL_RCC_OscConfig+0x166>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2b18      	cmp	r3, #24
 800480e:	d156      	bne.n	80048be <HAL_RCC_OscConfig+0x20a>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d151      	bne.n	80048be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481a:	4b48      	ldr	r3, [pc, #288]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_RCC_OscConfig+0x17e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e392      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004832:	4b42      	ldr	r3, [pc, #264]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 0219 	bic.w	r2, r3, #25
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	493f      	ldr	r1, [pc, #252]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd f95e 	bl	8001b04 <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7fd f95a 	bl	8001b04 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e37c      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800485e:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	f7fd f97b 	bl	8001b64 <HAL_GetREVID>
 800486e:	4603      	mov	r3, r0
 8004870:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004874:	4293      	cmp	r3, r2
 8004876:	d817      	bhi.n	80048a8 <HAL_RCC_OscConfig+0x1f4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d108      	bne.n	8004892 <HAL_RCC_OscConfig+0x1de>
 8004880:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004888:	4a2c      	ldr	r2, [pc, #176]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800488a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800488e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004890:	e07a      	b.n	8004988 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004892:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	031b      	lsls	r3, r3, #12
 80048a0:	4926      	ldr	r1, [pc, #152]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a6:	e06f      	b.n	8004988 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	4921      	ldr	r1, [pc, #132]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048bc:	e064      	b.n	8004988 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d047      	beq.n	8004956 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048c6:	4b1d      	ldr	r3, [pc, #116]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 0219 	bic.w	r2, r3, #25
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	491a      	ldr	r1, [pc, #104]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fd f914 	bl	8001b04 <HAL_GetTick>
 80048dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e0:	f7fd f910 	bl	8001b04 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e332      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048f2:	4b12      	ldr	r3, [pc, #72]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fe:	f7fd f931 	bl	8001b64 <HAL_GetREVID>
 8004902:	4603      	mov	r3, r0
 8004904:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004908:	4293      	cmp	r3, r2
 800490a:	d819      	bhi.n	8004940 <HAL_RCC_OscConfig+0x28c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d108      	bne.n	8004926 <HAL_RCC_OscConfig+0x272>
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800491c:	4a07      	ldr	r2, [pc, #28]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 800491e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004922:	6053      	str	r3, [r2, #4]
 8004924:	e030      	b.n	8004988 <HAL_RCC_OscConfig+0x2d4>
 8004926:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	031b      	lsls	r3, r3, #12
 8004934:	4901      	ldr	r1, [pc, #4]	@ (800493c <HAL_RCC_OscConfig+0x288>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
 800493a:	e025      	b.n	8004988 <HAL_RCC_OscConfig+0x2d4>
 800493c:	58024400 	.word	0x58024400
 8004940:	4b9a      	ldr	r3, [pc, #616]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	4997      	ldr	r1, [pc, #604]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
 8004954:	e018      	b.n	8004988 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004956:	4b95      	ldr	r3, [pc, #596]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a94      	ldr	r2, [pc, #592]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004962:	f7fd f8cf 	bl	8001b04 <HAL_GetTick>
 8004966:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496a:	f7fd f8cb 	bl	8001b04 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e2ed      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800497c:	4b8b      	ldr	r3, [pc, #556]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f0      	bne.n	800496a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a9 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004996:	4b85      	ldr	r3, [pc, #532]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800499e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049a0:	4b82      	ldr	r3, [pc, #520]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d007      	beq.n	80049bc <HAL_RCC_OscConfig+0x308>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b18      	cmp	r3, #24
 80049b0:	d13a      	bne.n	8004a28 <HAL_RCC_OscConfig+0x374>
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d135      	bne.n	8004a28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049bc:	4b7b      	ldr	r3, [pc, #492]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_OscConfig+0x320>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b80      	cmp	r3, #128	@ 0x80
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e2c1      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049d4:	f7fd f8c6 	bl	8001b64 <HAL_GetREVID>
 80049d8:	4603      	mov	r3, r0
 80049da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049de:	4293      	cmp	r3, r2
 80049e0:	d817      	bhi.n	8004a12 <HAL_RCC_OscConfig+0x35e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d108      	bne.n	80049fc <HAL_RCC_OscConfig+0x348>
 80049ea:	4b70      	ldr	r3, [pc, #448]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049f2:	4a6e      	ldr	r2, [pc, #440]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 80049f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049fa:	e075      	b.n	8004ae8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049fc:	4b6b      	ldr	r3, [pc, #428]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	069b      	lsls	r3, r3, #26
 8004a0a:	4968      	ldr	r1, [pc, #416]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a10:	e06a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a12:	4b66      	ldr	r3, [pc, #408]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	061b      	lsls	r3, r3, #24
 8004a20:	4962      	ldr	r1, [pc, #392]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a26:	e05f      	b.n	8004ae8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d042      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a30:	4b5e      	ldr	r3, [pc, #376]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a5d      	ldr	r2, [pc, #372]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd f862 	bl	8001b04 <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a44:	f7fd f85e 	bl	8001b04 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e280      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a56:	4b55      	ldr	r3, [pc, #340]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a62:	f7fd f87f 	bl	8001b64 <HAL_GetREVID>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d817      	bhi.n	8004aa0 <HAL_RCC_OscConfig+0x3ec>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d108      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3d6>
 8004a78:	4b4c      	ldr	r3, [pc, #304]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a80:	4a4a      	ldr	r2, [pc, #296]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a86:	6053      	str	r3, [r2, #4]
 8004a88:	e02e      	b.n	8004ae8 <HAL_RCC_OscConfig+0x434>
 8004a8a:	4b48      	ldr	r3, [pc, #288]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	069b      	lsls	r3, r3, #26
 8004a98:	4944      	ldr	r1, [pc, #272]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
 8004a9e:	e023      	b.n	8004ae8 <HAL_RCC_OscConfig+0x434>
 8004aa0:	4b42      	ldr	r3, [pc, #264]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	493f      	ldr	r1, [pc, #252]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60cb      	str	r3, [r1, #12]
 8004ab4:	e018      	b.n	8004ae8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3c      	ldr	r2, [pc, #240]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fd f81f 	bl	8001b04 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004aca:	f7fd f81b 	bl	8001b04 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e23d      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004adc:	4b33      	ldr	r3, [pc, #204]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f0      	bne.n	8004aca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d036      	beq.n	8004b62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d019      	beq.n	8004b30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afc:	4b2b      	ldr	r3, [pc, #172]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b00:	4a2a      	ldr	r2, [pc, #168]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fc fffc 	bl	8001b04 <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b10:	f7fc fff8 	bl	8001b04 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e21a      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b22:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x45c>
 8004b2e:	e018      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b30:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b34:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fc ffe2 	bl	8001b04 <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b44:	f7fc ffde 	bl	8001b04 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e200      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b56:	4b15      	ldr	r3, [pc, #84]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d039      	beq.n	8004be2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01c      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b82:	f7fc ffbf 	bl	8001b04 <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8a:	f7fc ffbb 	bl	8001b04 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e1dd      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b9c:	4b03      	ldr	r3, [pc, #12]	@ (8004bac <HAL_RCC_OscConfig+0x4f8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x4d6>
 8004ba8:	e01b      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bb0:	4b9b      	ldr	r3, [pc, #620]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a9a      	ldr	r2, [pc, #616]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bbc:	f7fc ffa2 	bl	8001b04 <HAL_GetTick>
 8004bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc4:	f7fc ff9e 	bl	8001b04 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e1c0      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bd6:	4b92      	ldr	r3, [pc, #584]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8081 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8004e24 <HAL_RCC_OscConfig+0x770>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a8b      	ldr	r2, [pc, #556]	@ (8004e24 <HAL_RCC_OscConfig+0x770>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc ff82 	bl	8001b04 <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fc ff7e 	bl	8001b04 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1a0      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c16:	4b83      	ldr	r3, [pc, #524]	@ (8004e24 <HAL_RCC_OscConfig+0x770>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x584>
 8004c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c36:	e02d      	b.n	8004c94 <HAL_RCC_OscConfig+0x5e0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCC_OscConfig+0x5a6>
 8004c40:	4b77      	ldr	r3, [pc, #476]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	4a76      	ldr	r2, [pc, #472]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4c:	4b74      	ldr	r3, [pc, #464]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	4a73      	ldr	r2, [pc, #460]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c58:	e01c      	b.n	8004c94 <HAL_RCC_OscConfig+0x5e0>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x5c8>
 8004c62:	4b6f      	ldr	r3, [pc, #444]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	4a6e      	ldr	r2, [pc, #440]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	4a6b      	ldr	r2, [pc, #428]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0x5e0>
 8004c7c:	4b68      	ldr	r3, [pc, #416]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c80:	4a67      	ldr	r2, [pc, #412]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c88:	4b65      	ldr	r3, [pc, #404]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	4a64      	ldr	r2, [pc, #400]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	f023 0304 	bic.w	r3, r3, #4
 8004c92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fc ff32 	bl	8001b04 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fc ff2e 	bl	8001b04 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e14e      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cba:	4b59      	ldr	r3, [pc, #356]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ee      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x5f0>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fc ff1c 	bl	8001b04 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fc ff18 	bl	8001b04 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e138      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ee      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 812d 	beq.w	8004f56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cfc:	4b48      	ldr	r3, [pc, #288]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d04:	2b18      	cmp	r3, #24
 8004d06:	f000 80bd 	beq.w	8004e84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	f040 809e 	bne.w	8004e50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d14:	4b42      	ldr	r3, [pc, #264]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a41      	ldr	r2, [pc, #260]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fc fef0 	bl	8001b04 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fc feec 	bl	8001b04 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e10e      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d3a:	4b39      	ldr	r3, [pc, #228]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d46:	4b36      	ldr	r3, [pc, #216]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d4a:	4b37      	ldr	r3, [pc, #220]	@ (8004e28 <HAL_RCC_OscConfig+0x774>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	4931      	ldr	r1, [pc, #196]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	025b      	lsls	r3, r3, #9
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d90:	4923      	ldr	r1, [pc, #140]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d96:	4b22      	ldr	r3, [pc, #136]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	4a21      	ldr	r2, [pc, #132]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004da2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da6:	4b21      	ldr	r3, [pc, #132]	@ (8004e2c <HAL_RCC_OscConfig+0x778>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dae:	00d2      	lsls	r2, r2, #3
 8004db0:	491b      	ldr	r1, [pc, #108]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004db6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	f023 020c 	bic.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	4917      	ldr	r1, [pc, #92]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	f023 0202 	bic.w	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd4:	4912      	ldr	r1, [pc, #72]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dda:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	4a10      	ldr	r2, [pc, #64]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004df2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a07      	ldr	r2, [pc, #28]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0a:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a04      	ldr	r2, [pc, #16]	@ (8004e20 <HAL_RCC_OscConfig+0x76c>)
 8004e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fc fe75 	bl	8001b04 <HAL_GetTick>
 8004e1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e1c:	e011      	b.n	8004e42 <HAL_RCC_OscConfig+0x78e>
 8004e1e:	bf00      	nop
 8004e20:	58024400 	.word	0x58024400
 8004e24:	58024800 	.word	0x58024800
 8004e28:	fffffc0c 	.word	0xfffffc0c
 8004e2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fc fe68 	bl	8001b04 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e08a      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x77c>
 8004e4e:	e082      	b.n	8004f56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b43      	ldr	r3, [pc, #268]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a42      	ldr	r2, [pc, #264]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fe52 	bl	8001b04 <HAL_GetTick>
 8004e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fc fe4e 	bl	8001b04 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e070      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e76:	4b3a      	ldr	r3, [pc, #232]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x7b0>
 8004e82:	e068      	b.n	8004f56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e84:	4b36      	ldr	r3, [pc, #216]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e8a:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d031      	beq.n	8004efc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f003 0203 	and.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d12a      	bne.n	8004efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d122      	bne.n	8004efc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d11a      	bne.n	8004efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	0a5b      	lsrs	r3, r3, #9
 8004eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d111      	bne.n	8004efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	0c1b      	lsrs	r3, r3, #16
 8004edc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d108      	bne.n	8004efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e02b      	b.n	8004f58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f00:	4b17      	ldr	r3, [pc, #92]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d01f      	beq.n	8004f56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	4a11      	ldr	r2, [pc, #68]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f22:	f7fc fdef 	bl	8001b04 <HAL_GetTick>
 8004f26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f28:	bf00      	nop
 8004f2a:	f7fc fdeb 	bl	8001b04 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d0f9      	beq.n	8004f2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f36:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <HAL_RCC_OscConfig+0x8b0>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f42:	00d2      	lsls	r2, r2, #3
 8004f44:	4906      	ldr	r1, [pc, #24]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f4a:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <HAL_RCC_OscConfig+0x8ac>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3730      	adds	r7, #48	@ 0x30
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	58024400 	.word	0x58024400
 8004f64:	ffff0007 	.word	0xffff0007

08004f68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e19c      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b8a      	ldr	r3, [pc, #552]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d910      	bls.n	8004fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b87      	ldr	r3, [pc, #540]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 020f 	bic.w	r2, r3, #15
 8004f92:	4985      	ldr	r1, [pc, #532]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b83      	ldr	r3, [pc, #524]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e184      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d908      	bls.n	8004fda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fc8:	4b78      	ldr	r3, [pc, #480]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4975      	ldr	r1, [pc, #468]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	4b70      	ldr	r3, [pc, #448]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d908      	bls.n	8005008 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	496a      	ldr	r1, [pc, #424]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005004:	4313      	orrs	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	4b64      	ldr	r3, [pc, #400]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005020:	429a      	cmp	r2, r3
 8005022:	d908      	bls.n	8005036 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005024:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	495e      	ldr	r1, [pc, #376]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005032:	4313      	orrs	r3, r2
 8005034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d010      	beq.n	8005064 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800504e:	429a      	cmp	r2, r3
 8005050:	d908      	bls.n	8005064 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005052:	4b56      	ldr	r3, [pc, #344]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4953      	ldr	r1, [pc, #332]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005060:	4313      	orrs	r3, r2
 8005062:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	4b4d      	ldr	r3, [pc, #308]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b4a      	ldr	r3, [pc, #296]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f023 020f 	bic.w	r2, r3, #15
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4947      	ldr	r1, [pc, #284]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 800508e:	4313      	orrs	r3, r2
 8005090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d055      	beq.n	800514a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800509e:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4940      	ldr	r1, [pc, #256]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050b8:	4b3c      	ldr	r3, [pc, #240]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d121      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0f6      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d0:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d115      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0ea      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050e8:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0de      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f8:	4b2c      	ldr	r3, [pc, #176]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0d6      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005108:	4b28      	ldr	r3, [pc, #160]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f023 0207 	bic.w	r2, r3, #7
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4925      	ldr	r1, [pc, #148]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005116:	4313      	orrs	r3, r2
 8005118:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fc fcf3 	bl	8001b04 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005120:	e00a      	b.n	8005138 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005122:	f7fc fcef 	bl	8001b04 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e0be      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005138:	4b1c      	ldr	r3, [pc, #112]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	429a      	cmp	r2, r3
 8005148:	d1eb      	bne.n	8005122 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	429a      	cmp	r2, r3
 8005164:	d208      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005166:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f023 020f 	bic.w	r2, r3, #15
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	490e      	ldr	r1, [pc, #56]	@ (80051ac <HAL_RCC_ClockConfig+0x244>)
 8005174:	4313      	orrs	r3, r2
 8005176:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d214      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 020f 	bic.w	r2, r3, #15
 800518e:	4906      	ldr	r1, [pc, #24]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b04      	ldr	r3, [pc, #16]	@ (80051a8 <HAL_RCC_ClockConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e086      	b.n	80052b6 <HAL_RCC_ClockConfig+0x34e>
 80051a8:	52002000 	.word	0x52002000
 80051ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	4b3f      	ldr	r3, [pc, #252]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d208      	bcs.n	80051de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051cc:	4b3c      	ldr	r3, [pc, #240]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	4939      	ldr	r1, [pc, #228]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d010      	beq.n	800520c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	4b34      	ldr	r3, [pc, #208]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d208      	bcs.n	800520c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051fa:	4b31      	ldr	r3, [pc, #196]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	492e      	ldr	r1, [pc, #184]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005208:	4313      	orrs	r3, r2
 800520a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699a      	ldr	r2, [r3, #24]
 800521c:	4b28      	ldr	r3, [pc, #160]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005224:	429a      	cmp	r2, r3
 8005226:	d208      	bcs.n	800523a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005228:	4b25      	ldr	r3, [pc, #148]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	4922      	ldr	r1, [pc, #136]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005236:	4313      	orrs	r3, r2
 8005238:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	4b1d      	ldr	r3, [pc, #116]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005252:	429a      	cmp	r2, r3
 8005254:	d208      	bcs.n	8005268 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005256:	4b1a      	ldr	r3, [pc, #104]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4917      	ldr	r1, [pc, #92]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005264:	4313      	orrs	r3, r2
 8005266:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005268:	f000 f834 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b14      	ldr	r3, [pc, #80]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	4912      	ldr	r1, [pc, #72]	@ (80052c4 <HAL_RCC_ClockConfig+0x35c>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
 8005284:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005286:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <HAL_RCC_ClockConfig+0x358>)
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <HAL_RCC_ClockConfig+0x35c>)
 8005290:	5cd3      	ldrb	r3, [r2, r3]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
 800529c:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <HAL_RCC_ClockConfig+0x360>)
 800529e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052a0:	4a0a      	ldr	r2, [pc, #40]	@ (80052cc <HAL_RCC_ClockConfig+0x364>)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052a6:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <HAL_RCC_ClockConfig+0x368>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fc f85e 	bl	800136c <HAL_InitTick>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	58024400 	.word	0x58024400
 80052c4:	080115d8 	.word	0x080115d8
 80052c8:	24000004 	.word	0x24000004
 80052cc:	24000000 	.word	0x24000000
 80052d0:	24000008 	.word	0x24000008

080052d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	@ 0x24
 80052d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052da:	4bb3      	ldr	r3, [pc, #716]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e2:	2b18      	cmp	r3, #24
 80052e4:	f200 8155 	bhi.w	8005592 <HAL_RCC_GetSysClockFreq+0x2be>
 80052e8:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005355 	.word	0x08005355
 80052f4:	08005593 	.word	0x08005593
 80052f8:	08005593 	.word	0x08005593
 80052fc:	08005593 	.word	0x08005593
 8005300:	08005593 	.word	0x08005593
 8005304:	08005593 	.word	0x08005593
 8005308:	08005593 	.word	0x08005593
 800530c:	08005593 	.word	0x08005593
 8005310:	0800537b 	.word	0x0800537b
 8005314:	08005593 	.word	0x08005593
 8005318:	08005593 	.word	0x08005593
 800531c:	08005593 	.word	0x08005593
 8005320:	08005593 	.word	0x08005593
 8005324:	08005593 	.word	0x08005593
 8005328:	08005593 	.word	0x08005593
 800532c:	08005593 	.word	0x08005593
 8005330:	08005381 	.word	0x08005381
 8005334:	08005593 	.word	0x08005593
 8005338:	08005593 	.word	0x08005593
 800533c:	08005593 	.word	0x08005593
 8005340:	08005593 	.word	0x08005593
 8005344:	08005593 	.word	0x08005593
 8005348:	08005593 	.word	0x08005593
 800534c:	08005593 	.word	0x08005593
 8005350:	08005387 	.word	0x08005387
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005354:	4b94      	ldr	r3, [pc, #592]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005360:	4b91      	ldr	r3, [pc, #580]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	4a90      	ldr	r2, [pc, #576]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005372:	e111      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005374:	4b8d      	ldr	r3, [pc, #564]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005376:	61bb      	str	r3, [r7, #24]
      break;
 8005378:	e10e      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800537a:	4b8d      	ldr	r3, [pc, #564]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800537c:	61bb      	str	r3, [r7, #24]
      break;
 800537e:	e10b      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005380:	4b8c      	ldr	r3, [pc, #560]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005382:	61bb      	str	r3, [r7, #24]
      break;
 8005384:	e108      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005386:	4b88      	ldr	r3, [pc, #544]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005390:	4b85      	ldr	r3, [pc, #532]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800539a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800539c:	4b82      	ldr	r3, [pc, #520]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053a6:	4b80      	ldr	r3, [pc, #512]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80e1 	beq.w	800558c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	f000 8083 	beq.w	80054d8 <HAL_RCC_GetSysClockFreq+0x204>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f200 80a1 	bhi.w	800551c <HAL_RCC_GetSysClockFreq+0x248>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x114>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d056      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x1c0>
 80053e6:	e099      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e8:	4b6f      	ldr	r3, [pc, #444]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02d      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053f4:	4b6c      	ldr	r3, [pc, #432]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	08db      	lsrs	r3, r3, #3
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	4a6b      	ldr	r2, [pc, #428]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b62      	ldr	r3, [pc, #392]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005432:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800544e:	e087      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80055bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b51      	ldr	r3, [pc, #324]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a02 	vldr	s12, [r7, #8]
 8005476:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005492:	e065      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80055c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b40      	ldr	r3, [pc, #256]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054d6:	e043      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80055c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b2f      	ldr	r3, [pc, #188]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800551a:	e021      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80055c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b1e      	ldr	r3, [pc, #120]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005542:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80055b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800555e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	0a5b      	lsrs	r3, r3, #9
 8005566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800556a:	3301      	adds	r3, #1
 800556c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005578:	edd7 6a07 	vldr	s13, [r7, #28]
 800557c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005584:	ee17 3a90 	vmov	r3, s15
 8005588:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800558a:	e005      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
      break;
 8005590:	e002      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005592:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005594:	61bb      	str	r3, [r7, #24]
      break;
 8005596:	bf00      	nop
  }

  return sysclockfreq;
 8005598:	69bb      	ldr	r3, [r7, #24]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	@ 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	58024400 	.word	0x58024400
 80055ac:	03d09000 	.word	0x03d09000
 80055b0:	003d0900 	.word	0x003d0900
 80055b4:	017d7840 	.word	0x017d7840
 80055b8:	46000000 	.word	0x46000000
 80055bc:	4c742400 	.word	0x4c742400
 80055c0:	4a742400 	.word	0x4a742400
 80055c4:	4bbebc20 	.word	0x4bbebc20

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055ce:	f7ff fe81 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b10      	ldr	r3, [pc, #64]	@ (8005618 <HAL_RCC_GetHCLKFreq+0x50>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	490f      	ldr	r1, [pc, #60]	@ (800561c <HAL_RCC_GetHCLKFreq+0x54>)
 80055e0:	5ccb      	ldrb	r3, [r1, r3]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <HAL_RCC_GetHCLKFreq+0x50>)
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	4a09      	ldr	r2, [pc, #36]	@ (800561c <HAL_RCC_GetHCLKFreq+0x54>)
 80055f6:	5cd3      	ldrb	r3, [r2, r3]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	4a07      	ldr	r2, [pc, #28]	@ (8005620 <HAL_RCC_GetHCLKFreq+0x58>)
 8005604:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005606:	4a07      	ldr	r2, [pc, #28]	@ (8005624 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <HAL_RCC_GetHCLKFreq+0x58>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58024400 	.word	0x58024400
 800561c:	080115d8 	.word	0x080115d8
 8005620:	24000004 	.word	0x24000004
 8005624:	24000000 	.word	0x24000000

08005628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800562c:	f7ff ffcc 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b06      	ldr	r3, [pc, #24]	@ (800564c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	4904      	ldr	r1, [pc, #16]	@ (8005650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	58024400 	.word	0x58024400
 8005650:	080115d8 	.word	0x080115d8

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005658:	f7ff ffb6 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4904      	ldr	r1, [pc, #16]	@ (800567c <HAL_RCC_GetPCLK2Freq+0x28>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd80      	pop	{r7, pc}
 8005678:	58024400 	.word	0x58024400
 800567c:	080115d8 	.word	0x080115d8

08005680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	223f      	movs	r2, #63	@ 0x3f
 800568e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005690:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0207 	and.w	r2, r3, #7
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800569c:	4b17      	ldr	r3, [pc, #92]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80056a8:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80056c0:	4b0e      	ldr	r3, [pc, #56]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80056d8:	4b08      	ldr	r3, [pc, #32]	@ (80056fc <HAL_RCC_GetClockConfig+0x7c>)
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <HAL_RCC_GetClockConfig+0x80>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	601a      	str	r2, [r3, #0]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	58024400 	.word	0x58024400
 8005700:	52002000 	.word	0x52002000

08005704 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005708:	b0ca      	sub	sp, #296	@ 0x128
 800570a:	af00      	add	r7, sp, #0
 800570c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005710:	2300      	movs	r3, #0
 8005712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005716:	2300      	movs	r3, #0
 8005718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005728:	2500      	movs	r5, #0
 800572a:	ea54 0305 	orrs.w	r3, r4, r5
 800572e:	d049      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005736:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800573a:	d02f      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800573c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005740:	d828      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005746:	d01a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800574c:	d822      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005756:	d007      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005758:	e01c      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575a:	4bb8      	ldr	r3, [pc, #736]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	4ab7      	ldr	r2, [pc, #732]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005764:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005766:	e01a      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576c:	3308      	adds	r3, #8
 800576e:	2102      	movs	r1, #2
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fc8f 	bl	8007094 <RCCEx_PLL2_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800577c:	e00f      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005782:	3328      	adds	r3, #40	@ 0x28
 8005784:	2102      	movs	r1, #2
 8005786:	4618      	mov	r0, r3
 8005788:	f001 fd36 	bl	80071f8 <RCCEx_PLL3_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005792:	e004      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800579a:	e000      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800579c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057a6:	4ba5      	ldr	r3, [pc, #660]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057b4:	4aa1      	ldr	r2, [pc, #644]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057b6:	430b      	orrs	r3, r1
 80057b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80057ba:	e003      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80057d0:	f04f 0900 	mov.w	r9, #0
 80057d4:	ea58 0309 	orrs.w	r3, r8, r9
 80057d8:	d047      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d82a      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057e4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005801 	.word	0x08005801
 80057f0:	0800580f 	.word	0x0800580f
 80057f4:	08005825 	.word	0x08005825
 80057f8:	08005843 	.word	0x08005843
 80057fc:	08005843 	.word	0x08005843
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005800:	4b8e      	ldr	r3, [pc, #568]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005804:	4a8d      	ldr	r2, [pc, #564]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800580c:	e01a      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	3308      	adds	r3, #8
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fc3c 	bl	8007094 <RCCEx_PLL2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005822:	e00f      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	3328      	adds	r3, #40	@ 0x28
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fce3 	bl	80071f8 <RCCEx_PLL3_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005838:	e004      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005840:	e000      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800584c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800584e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005850:	f023 0107 	bic.w	r1, r3, #7
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585a:	4a78      	ldr	r2, [pc, #480]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585c:	430b      	orrs	r3, r1
 800585e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005876:	f04f 0b00 	mov.w	fp, #0
 800587a:	ea5a 030b 	orrs.w	r3, sl, fp
 800587e:	d04c      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800588a:	d030      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800588c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005890:	d829      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005892:	2bc0      	cmp	r3, #192	@ 0xc0
 8005894:	d02d      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005896:	2bc0      	cmp	r3, #192	@ 0xc0
 8005898:	d825      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800589a:	2b80      	cmp	r3, #128	@ 0x80
 800589c:	d018      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800589e:	2b80      	cmp	r3, #128	@ 0x80
 80058a0:	d821      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80058a6:	2b40      	cmp	r3, #64	@ 0x40
 80058a8:	d007      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058aa:	e01c      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4b63      	ldr	r3, [pc, #396]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	4a62      	ldr	r2, [pc, #392]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058b8:	e01c      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058be:	3308      	adds	r3, #8
 80058c0:	2100      	movs	r1, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fbe6 	bl	8007094 <RCCEx_PLL2_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058ce:	e011      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	3328      	adds	r3, #40	@ 0x28
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 fc8d 	bl	80071f8 <RCCEx_PLL3_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058e4:	e006      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ec:	e002      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058fc:	4b4f      	ldr	r3, [pc, #316]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005900:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590a:	4a4c      	ldr	r2, [pc, #304]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800590c:	430b      	orrs	r3, r1
 800590e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005910:	e003      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005926:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005930:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d053      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005946:	d035      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800594c:	d82e      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800594e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005952:	d031      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005954:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005958:	d828      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800595a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800595e:	d01a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005964:	d822      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800596a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800596e:	d007      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005970:	e01c      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005972:	4b32      	ldr	r3, [pc, #200]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	4a31      	ldr	r2, [pc, #196]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800597e:	e01c      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005984:	3308      	adds	r3, #8
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f001 fb83 	bl	8007094 <RCCEx_PLL2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005994:	e011      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	3328      	adds	r3, #40	@ 0x28
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fc2a 	bl	80071f8 <RCCEx_PLL3_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059aa:	e006      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b2:	e002      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059c2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059d2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d4:	430b      	orrs	r3, r1
 80059d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80059d8:	e003      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059f2:	2300      	movs	r3, #0
 80059f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80059fc:	460b      	mov	r3, r1
 80059fe:	4313      	orrs	r3, r2
 8005a00:	d056      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a0e:	d038      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a14:	d831      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a1a:	d034      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a20:	d82b      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a26:	d01d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a2c:	d825      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a38:	e01f      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a3a:	bf00      	nop
 8005a3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a40:	4ba2      	ldr	r3, [pc, #648]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	4aa1      	ldr	r2, [pc, #644]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e01c      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	3308      	adds	r3, #8
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fb1c 	bl	8007094 <RCCEx_PLL2_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a62:	e011      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	3328      	adds	r3, #40	@ 0x28
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fbc3 	bl	80071f8 <RCCEx_PLL3_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a90:	4b8e      	ldr	r3, [pc, #568]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005aa0:	4a8a      	ldr	r2, [pc, #552]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aa6:	e003      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ac6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005aca:	460b      	mov	r3, r1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	d03a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad6:	2b30      	cmp	r3, #48	@ 0x30
 8005ad8:	d01f      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ada:	2b30      	cmp	r3, #48	@ 0x30
 8005adc:	d819      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d00c      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d815      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d019      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d111      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aee:	4b77      	ldr	r3, [pc, #476]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	4a76      	ldr	r2, [pc, #472]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005afa:	e011      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	3308      	adds	r3, #8
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fac5 	bl	8007094 <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b10:	e006      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b18:	e002      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b28:	4b68      	ldr	r3, [pc, #416]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b36:	4a65      	ldr	r2, [pc, #404]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b3c:	e003      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4313      	orrs	r3, r2
 8005b64:	d051      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b70:	d035      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b76:	d82e      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b7c:	d031      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b82:	d828      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b88:	d01a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b8e:	d822      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b98:	d007      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b9a:	e01c      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	3308      	adds	r3, #8
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fa6e 	bl	8007094 <RCCEx_PLL2_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bbe:	e011      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	3328      	adds	r3, #40	@ 0x28
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fb15 	bl	80071f8 <RCCEx_PLL3_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e006      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bec:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c00:	e003      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d056      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c34:	d033      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c3a:	d82c      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c40:	d02f      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c46:	d826      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c4c:	d02b      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c52:	d820      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c58:	d012      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c5e:	d81a      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d022      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c68:	d115      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	3308      	adds	r3, #8
 8005c70:	2101      	movs	r1, #1
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fa0e 	bl	8007094 <RCCEx_PLL2_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c7e:	e015      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	3328      	adds	r3, #40	@ 0x28
 8005c86:	2101      	movs	r1, #1
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fab5 	bl	80071f8 <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c94:	e00a      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c9c:	e006      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c9e:	bf00      	nop
 8005ca0:	e004      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10d      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc2:	4a02      	ldr	r2, [pc, #8]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	d055      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d04:	d033      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d0a:	d82c      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d10:	d02f      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d16:	d826      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d1c:	d02b      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d22:	d820      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d28:	d012      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d2e:	d81a      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d022      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d38:	d115      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	3308      	adds	r3, #8
 8005d40:	2101      	movs	r1, #1
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f9a6 	bl	8007094 <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e015      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	2101      	movs	r1, #1
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fa4d 	bl	80071f8 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d64:	e00a      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d6c:	e006      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e004      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d84:	4ba3      	ldr	r3, [pc, #652]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d94:	4a9f      	ldr	r2, [pc, #636]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d96:	430b      	orrs	r3, r1
 8005d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d9a:	e003      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005db0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	d037      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dce:	d00e      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dd4:	d816      	bhi.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dde:	d111      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de0:	4b8c      	ldr	r3, [pc, #560]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	4a8b      	ldr	r2, [pc, #556]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dec:	e00f      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	3308      	adds	r3, #8
 8005df4:	2101      	movs	r1, #1
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f94c 	bl	8007094 <RCCEx_PLL2_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e02:	e004      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e0a:	e000      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e16:	4b7f      	ldr	r3, [pc, #508]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e24:	4a7b      	ldr	r2, [pc, #492]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e26:	430b      	orrs	r3, r1
 8005e28:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d039      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d81c      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005ea1 	.word	0x08005ea1
 8005e68:	08005e75 	.word	0x08005e75
 8005e6c:	08005e83 	.word	0x08005e83
 8005e70:	08005ea1 	.word	0x08005ea1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e74:	4b67      	ldr	r3, [pc, #412]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	4a66      	ldr	r2, [pc, #408]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e80:	e00f      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e86:	3308      	adds	r3, #8
 8005e88:	2102      	movs	r1, #2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f902 	bl	8007094 <RCCEx_PLL2_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e96:	e004      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eae:	f023 0103 	bic.w	r1, r3, #3
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb8:	4a56      	ldr	r2, [pc, #344]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ebe:	e003      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ede:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f000 809f 	beq.w	8006028 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eea:	4b4b      	ldr	r3, [pc, #300]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a4a      	ldr	r2, [pc, #296]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ef6:	f7fb fe05 	bl	8001b04 <HAL_GetTick>
 8005efa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005efe:	e00b      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f00:	f7fb fe00 	bl	8001b04 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b64      	cmp	r3, #100	@ 0x64
 8005f0e:	d903      	bls.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f16:	e005      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f18:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ed      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d179      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f2c:	4b39      	ldr	r3, [pc, #228]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f38:	4053      	eors	r3, r2
 8005f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d015      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f42:	4b34      	ldr	r3, [pc, #208]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f4e:	4b31      	ldr	r3, [pc, #196]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f52:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f66:	4a2b      	ldr	r2, [pc, #172]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7a:	d118      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fb fdc2 	bl	8001b04 <HAL_GetTick>
 8005f80:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f84:	e00d      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fb fdbd 	bl	8001b04 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d903      	bls.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005fa0:	e005      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0eb      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d129      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc6:	d10e      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005fc8:	4b12      	ldr	r3, [pc, #72]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fd8:	091a      	lsrs	r2, r3, #4
 8005fda:	4b10      	ldr	r3, [pc, #64]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	4a0d      	ldr	r2, [pc, #52]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6113      	str	r3, [r2, #16]
 8005fe4:	e005      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	4a0a      	ldr	r2, [pc, #40]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ff0:	6113      	str	r3, [r2, #16]
 8005ff2:	4b08      	ldr	r3, [pc, #32]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006002:	4a04      	ldr	r2, [pc, #16]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006004:	430b      	orrs	r3, r1
 8006006:	6713      	str	r3, [r2, #112]	@ 0x70
 8006008:	e00e      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800600a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006012:	e009      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006014:	58024400 	.word	0x58024400
 8006018:	58024800 	.word	0x58024800
 800601c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f002 0301 	and.w	r3, r2, #1
 8006034:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800603e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	f000 8089 	beq.w	800615c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006050:	2b28      	cmp	r3, #40	@ 0x28
 8006052:	d86b      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006135 	.word	0x08006135
 8006060:	0800612d 	.word	0x0800612d
 8006064:	0800612d 	.word	0x0800612d
 8006068:	0800612d 	.word	0x0800612d
 800606c:	0800612d 	.word	0x0800612d
 8006070:	0800612d 	.word	0x0800612d
 8006074:	0800612d 	.word	0x0800612d
 8006078:	0800612d 	.word	0x0800612d
 800607c:	08006101 	.word	0x08006101
 8006080:	0800612d 	.word	0x0800612d
 8006084:	0800612d 	.word	0x0800612d
 8006088:	0800612d 	.word	0x0800612d
 800608c:	0800612d 	.word	0x0800612d
 8006090:	0800612d 	.word	0x0800612d
 8006094:	0800612d 	.word	0x0800612d
 8006098:	0800612d 	.word	0x0800612d
 800609c:	08006117 	.word	0x08006117
 80060a0:	0800612d 	.word	0x0800612d
 80060a4:	0800612d 	.word	0x0800612d
 80060a8:	0800612d 	.word	0x0800612d
 80060ac:	0800612d 	.word	0x0800612d
 80060b0:	0800612d 	.word	0x0800612d
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	0800612d 	.word	0x0800612d
 80060bc:	08006135 	.word	0x08006135
 80060c0:	0800612d 	.word	0x0800612d
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	0800612d 	.word	0x0800612d
 80060cc:	0800612d 	.word	0x0800612d
 80060d0:	0800612d 	.word	0x0800612d
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	08006135 	.word	0x08006135
 80060e0:	0800612d 	.word	0x0800612d
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	0800612d 	.word	0x0800612d
 80060ec:	0800612d 	.word	0x0800612d
 80060f0:	0800612d 	.word	0x0800612d
 80060f4:	0800612d 	.word	0x0800612d
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	08006135 	.word	0x08006135
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006104:	3308      	adds	r3, #8
 8006106:	2101      	movs	r1, #1
 8006108:	4618      	mov	r0, r3
 800610a:	f000 ffc3 	bl	8007094 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	3328      	adds	r3, #40	@ 0x28
 800611c:	2101      	movs	r1, #1
 800611e:	4618      	mov	r0, r3
 8006120:	f001 f86a 	bl	80071f8 <RCCEx_PLL3_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800613e:	4bbf      	ldr	r3, [pc, #764]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006142:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800614c:	4abb      	ldr	r2, [pc, #748]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800614e:	430b      	orrs	r3, r1
 8006150:	6553      	str	r3, [r2, #84]	@ 0x54
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 0302 	and.w	r3, r2, #2
 8006168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006172:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d041      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006182:	2b05      	cmp	r3, #5
 8006184:	d824      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061d9 	.word	0x080061d9
 8006190:	080061a5 	.word	0x080061a5
 8006194:	080061bb 	.word	0x080061bb
 8006198:	080061d9 	.word	0x080061d9
 800619c:	080061d9 	.word	0x080061d9
 80061a0:	080061d9 	.word	0x080061d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a8:	3308      	adds	r3, #8
 80061aa:	2101      	movs	r1, #1
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 ff71 	bl	8007094 <RCCEx_PLL2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061b8:	e00f      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	3328      	adds	r3, #40	@ 0x28
 80061c0:	2101      	movs	r1, #1
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f818 	bl	80071f8 <RCCEx_PLL3_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061ce:	e004      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061e2:	4b96      	ldr	r3, [pc, #600]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e6:	f023 0107 	bic.w	r1, r3, #7
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061f0:	4a92      	ldr	r2, [pc, #584]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f002 0304 	and.w	r3, r2, #4
 800620c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006216:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d044      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006228:	2b05      	cmp	r3, #5
 800622a:	d825      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800622c:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006281 	.word	0x08006281
 8006238:	0800624d 	.word	0x0800624d
 800623c:	08006263 	.word	0x08006263
 8006240:	08006281 	.word	0x08006281
 8006244:	08006281 	.word	0x08006281
 8006248:	08006281 	.word	0x08006281
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006250:	3308      	adds	r3, #8
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f000 ff1d 	bl	8007094 <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006260:	e00f      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	3328      	adds	r3, #40	@ 0x28
 8006268:	2101      	movs	r1, #1
 800626a:	4618      	mov	r0, r3
 800626c:	f000 ffc4 	bl	80071f8 <RCCEx_PLL3_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006276:	e004      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800628a:	4b6c      	ldr	r3, [pc, #432]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f023 0107 	bic.w	r1, r3, #7
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800629a:	4a68      	ldr	r2, [pc, #416]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6593      	str	r3, [r2, #88]	@ 0x58
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f002 0320 	and.w	r3, r2, #32
 80062b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062c4:	460b      	mov	r3, r1
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d055      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d6:	d033      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062dc:	d82c      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e2:	d02f      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e8:	d826      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062ee:	d02b      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80062f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062f4:	d820      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fa:	d012      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80062fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006300:	d81a      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d022      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800630a:	d115      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	3308      	adds	r3, #8
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f000 febd 	bl	8007094 <RCCEx_PLL2_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006320:	e015      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	3328      	adds	r3, #40	@ 0x28
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff64 	bl	80071f8 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006336:	e00a      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800633e:	e006      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006340:	bf00      	nop
 8006342:	e004      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006344:	bf00      	nop
 8006346:	e002      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006356:	4b39      	ldr	r3, [pc, #228]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	4a35      	ldr	r2, [pc, #212]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6553      	str	r3, [r2, #84]	@ 0x54
 800636c:	e003      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006386:	2300      	movs	r3, #0
 8006388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800638c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d058      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800639e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063a2:	d033      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80063a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063a8:	d82c      	bhi.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ae:	d02f      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b4:	d826      	bhi.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063ba:	d02b      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80063bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063c0:	d820      	bhi.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063c6:	d012      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80063c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063cc:	d81a      	bhi.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d022      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d115      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	3308      	adds	r3, #8
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fe57 	bl	8007094 <RCCEx_PLL2_Config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063ec:	e015      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f2:	3328      	adds	r3, #40	@ 0x28
 80063f4:	2102      	movs	r1, #2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fefe 	bl	80071f8 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006402:	e00a      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800640a:	e006      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800640c:	bf00      	nop
 800640e:	e004      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006410:	bf00      	nop
 8006412:	e002      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006414:	bf00      	nop
 8006416:	e000      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10e      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006422:	4b06      	ldr	r3, [pc, #24]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006426:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006432:	4a02      	ldr	r2, [pc, #8]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006434:	430b      	orrs	r3, r1
 8006436:	6593      	str	r3, [r2, #88]	@ 0x58
 8006438:	e006      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006458:	2300      	movs	r3, #0
 800645a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800645e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006462:	460b      	mov	r3, r1
 8006464:	4313      	orrs	r3, r2
 8006466:	d055      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006470:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006474:	d033      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006476:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800647a:	d82c      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006480:	d02f      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006486:	d826      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006488:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800648c:	d02b      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800648e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006492:	d820      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006498:	d012      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800649a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800649e:	d81a      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d022      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a8:	d115      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	3308      	adds	r3, #8
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fdee 	bl	8007094 <RCCEx_PLL2_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064be:	e015      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c4:	3328      	adds	r3, #40	@ 0x28
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fe95 	bl	80071f8 <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064d4:	e00a      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064dc:	e006      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064f4:	4ba1      	ldr	r3, [pc, #644]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006504:	4a9d      	ldr	r2, [pc, #628]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006506:	430b      	orrs	r3, r1
 8006508:	6593      	str	r3, [r2, #88]	@ 0x58
 800650a:	e003      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f002 0308 	and.w	r3, r2, #8
 8006520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006524:	2300      	movs	r3, #0
 8006526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800652a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800652e:	460b      	mov	r3, r1
 8006530:	4313      	orrs	r3, r2
 8006532:	d01e      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006540:	d10c      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006546:	3328      	adds	r3, #40	@ 0x28
 8006548:	2102      	movs	r1, #2
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fe54 	bl	80071f8 <RCCEx_PLL3_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800655c:	4b87      	ldr	r3, [pc, #540]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006560:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656c:	4a83      	ldr	r2, [pc, #524]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800656e:	430b      	orrs	r3, r1
 8006570:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f002 0310 	and.w	r3, r2, #16
 800657e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006588:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d01e      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659e:	d10c      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	3328      	adds	r3, #40	@ 0x28
 80065a6:	2102      	movs	r1, #2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fe25 	bl	80071f8 <RCCEx_PLL3_Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065ba:	4b70      	ldr	r3, [pc, #448]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ca:	4a6c      	ldr	r2, [pc, #432]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80065ea:	460b      	mov	r3, r1
 80065ec:	4313      	orrs	r3, r2
 80065ee:	d03e      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065fc:	d022      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80065fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006602:	d81b      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800660c:	d00b      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800660e:	e015      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	3308      	adds	r3, #8
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fd3b 	bl	8007094 <RCCEx_PLL2_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006624:	e00f      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	3328      	adds	r3, #40	@ 0x28
 800662c:	2102      	movs	r1, #2
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fde2 	bl	80071f8 <RCCEx_PLL3_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800663a:	e004      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006642:	e000      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800664e:	4b4b      	ldr	r3, [pc, #300]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006652:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800665e:	4a47      	ldr	r2, [pc, #284]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006660:	430b      	orrs	r3, r1
 8006662:	6593      	str	r3, [r2, #88]	@ 0x58
 8006664:	e003      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800667a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800667c:	2300      	movs	r3, #0
 800667e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006680:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d03b      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006696:	d01f      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006698:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800669c:	d818      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800669e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066a2:	d003      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80066a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066a8:	d007      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80066aa:	e011      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ac:	4b33      	ldr	r3, [pc, #204]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	4a32      	ldr	r2, [pc, #200]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066b8:	e00f      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3328      	adds	r3, #40	@ 0x28
 80066c0:	2101      	movs	r1, #1
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fd98 	bl	80071f8 <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066ce:	e004      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066e2:	4b26      	ldr	r3, [pc, #152]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f2:	4a22      	ldr	r2, [pc, #136]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800670e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006710:	2300      	movs	r3, #0
 8006712:	677b      	str	r3, [r7, #116]	@ 0x74
 8006714:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006718:	460b      	mov	r3, r1
 800671a:	4313      	orrs	r3, r2
 800671c:	d034      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672c:	d007      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800672e:	e011      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b12      	ldr	r3, [pc, #72]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	4a11      	ldr	r2, [pc, #68]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800673c:	e00e      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	3308      	adds	r3, #8
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fca4 	bl	8007094 <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006752:	e003      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800675a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800675c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10d      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006764:	4b05      	ldr	r3, [pc, #20]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006768:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006772:	4a02      	ldr	r2, [pc, #8]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006774:	430b      	orrs	r3, r1
 8006776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006778:	e006      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006796:	2300      	movs	r3, #0
 8006798:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800679a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	d00c      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	3328      	adds	r3, #40	@ 0x28
 80067aa:	2102      	movs	r1, #2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fd23 	bl	80071f8 <RCCEx_PLL3_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80067cc:	2300      	movs	r3, #0
 80067ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80067d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067d4:	460b      	mov	r3, r1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	d038      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067e6:	d018      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80067e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ec:	d811      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f2:	d014      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f8:	d80b      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d011      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006802:	d106      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006804:	4bc3      	ldr	r3, [pc, #780]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	4ac2      	ldr	r2, [pc, #776]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800680a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800680e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006810:	e008      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006818:	e004      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800682c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800682e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006830:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800683c:	4ab5      	ldr	r2, [pc, #724]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800683e:	430b      	orrs	r3, r1
 8006840:	6553      	str	r3, [r2, #84]	@ 0x54
 8006842:	e003      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006858:	65bb      	str	r3, [r7, #88]	@ 0x58
 800685a:	2300      	movs	r3, #0
 800685c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800685e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006868:	4baa      	ldr	r3, [pc, #680]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800686c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006876:	4aa7      	ldr	r2, [pc, #668]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006878:	430b      	orrs	r3, r1
 800687a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006888:	653b      	str	r3, [r7, #80]	@ 0x50
 800688a:	2300      	movs	r3, #0
 800688c:	657b      	str	r3, [r7, #84]	@ 0x54
 800688e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006898:	4b9e      	ldr	r3, [pc, #632]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068a8:	4a9a      	ldr	r2, [pc, #616]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068bc:	2300      	movs	r3, #0
 80068be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ca:	4b92      	ldr	r3, [pc, #584]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d8:	4a8e      	ldr	r2, [pc, #568]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068da:	430b      	orrs	r3, r1
 80068dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ec:	2300      	movs	r3, #0
 80068ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068f4:	460b      	mov	r3, r1
 80068f6:	4313      	orrs	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068fa:	4b86      	ldr	r3, [pc, #536]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	4a85      	ldr	r2, [pc, #532]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006900:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006904:	6113      	str	r3, [r2, #16]
 8006906:	4b83      	ldr	r3, [pc, #524]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006908:	6919      	ldr	r1, [r3, #16]
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006912:	4a80      	ldr	r2, [pc, #512]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006924:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006926:	2300      	movs	r3, #0
 8006928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800692a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006934:	4b77      	ldr	r3, [pc, #476]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006938:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800693c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	4a74      	ldr	r2, [pc, #464]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006944:	430b      	orrs	r3, r1
 8006946:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006954:	633b      	str	r3, [r7, #48]	@ 0x30
 8006956:	2300      	movs	r3, #0
 8006958:	637b      	str	r3, [r7, #52]	@ 0x34
 800695a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800695e:	460b      	mov	r3, r1
 8006960:	4313      	orrs	r3, r2
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006964:	4b6b      	ldr	r3, [pc, #428]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006968:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006974:	4a67      	ldr	r2, [pc, #412]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006976:	430b      	orrs	r3, r1
 8006978:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	2100      	movs	r1, #0
 8006984:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800698c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d011      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	3308      	adds	r3, #8
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fb78 	bl	8007094 <RCCEx_PLL2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	2100      	movs	r1, #0
 80069c4:	6239      	str	r1, [r7, #32]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80069cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069d0:	460b      	mov	r3, r1
 80069d2:	4313      	orrs	r3, r2
 80069d4:	d011      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	3308      	adds	r3, #8
 80069dc:	2101      	movs	r1, #1
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fb58 	bl	8007094 <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	2100      	movs	r1, #0
 8006a04:	61b9      	str	r1, [r7, #24]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	61fb      	str	r3, [r7, #28]
 8006a0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a10:	460b      	mov	r3, r1
 8006a12:	4313      	orrs	r3, r2
 8006a14:	d011      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb38 	bl	8007094 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	2100      	movs	r1, #0
 8006a44:	6139      	str	r1, [r7, #16]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a50:	460b      	mov	r3, r1
 8006a52:	4313      	orrs	r3, r2
 8006a54:	d011      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5a:	3328      	adds	r3, #40	@ 0x28
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fbca 	bl	80071f8 <RCCEx_PLL3_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	2100      	movs	r1, #0
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a90:	460b      	mov	r3, r1
 8006a92:	4313      	orrs	r3, r2
 8006a94:	d011      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	3328      	adds	r3, #40	@ 0x28
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fbaa 	bl	80071f8 <RCCEx_PLL3_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	6039      	str	r1, [r7, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	d011      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ada:	3328      	adds	r3, #40	@ 0x28
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fb8a 	bl	80071f8 <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006afa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b14:	58024400 	.word	0x58024400

08006b18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b1c:	f7fe fd54 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	4904      	ldr	r1, [pc, #16]	@ (8006b40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b2e:	5ccb      	ldrb	r3, [r1, r3]
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	080115d8 	.word	0x080115d8

08006b44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b089      	sub	sp, #36	@ 0x24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b4c:	4ba1      	ldr	r3, [pc, #644]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b56:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	0b1b      	lsrs	r3, r3, #12
 8006b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b62:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b6e:	4b99      	ldr	r3, [pc, #612]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8111 	beq.w	8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	f000 8083 	beq.w	8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	f200 80a1 	bhi.w	8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d056      	beq.n	8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006bae:	e099      	b.n	8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb0:	4b88      	ldr	r3, [pc, #544]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02d      	beq.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bbc:	4b85      	ldr	r3, [pc, #532]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	08db      	lsrs	r3, r3, #3
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	4a84      	ldr	r2, [pc, #528]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c16:	e087      	b.n	8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c5a:	e065      	b.n	8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6e:	4b59      	ldr	r3, [pc, #356]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9e:	e043      	b.n	8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb2:	4b48      	ldr	r3, [pc, #288]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce2:	e021      	b.n	8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf6:	4b37      	ldr	r3, [pc, #220]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d28:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	0a5b      	lsrs	r3, r3, #9
 8006d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4e:	ee17 2a90 	vmov	r2, s15
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d56:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5a:	0c1b      	lsrs	r3, r3, #16
 8006d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7c:	ee17 2a90 	vmov	r2, s15
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d84:	4b13      	ldr	r3, [pc, #76]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006daa:	ee17 2a90 	vmov	r2, s15
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006db2:	e008      	b.n	8006dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	609a      	str	r2, [r3, #8]
}
 8006dc6:	bf00      	nop
 8006dc8:	3724      	adds	r7, #36	@ 0x24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	58024400 	.word	0x58024400
 8006dd8:	03d09000 	.word	0x03d09000
 8006ddc:	46000000 	.word	0x46000000
 8006de0:	4c742400 	.word	0x4c742400
 8006de4:	4a742400 	.word	0x4a742400
 8006de8:	4bbebc20 	.word	0x4bbebc20

08006dec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b089      	sub	sp, #36	@ 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df4:	4ba1      	ldr	r3, [pc, #644]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dfe:	4b9f      	ldr	r3, [pc, #636]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e02:	0d1b      	lsrs	r3, r3, #20
 8006e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e0a:	4b9c      	ldr	r3, [pc, #624]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e16:	4b99      	ldr	r3, [pc, #612]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8111 	beq.w	800705c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	f000 8083 	beq.w	8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	f200 80a1 	bhi.w	8006f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d056      	beq.n	8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e56:	e099      	b.n	8006f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e58:	4b88      	ldr	r3, [pc, #544]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d02d      	beq.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e64:	4b85      	ldr	r3, [pc, #532]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	08db      	lsrs	r3, r3, #3
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	4a84      	ldr	r2, [pc, #528]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
 8006e74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	ee07 3a90 	vmov	s15, r3
 8006e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ebe:	e087      	b.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f02:	e065      	b.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f16:	4b59      	ldr	r3, [pc, #356]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f46:	e043      	b.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b48      	ldr	r3, [pc, #288]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8a:	e021      	b.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b37      	ldr	r3, [pc, #220]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff6:	ee17 2a90 	vmov	r2, s15
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007010:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007014:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007018:	edd7 6a07 	vldr	s13, [r7, #28]
 800701c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007024:	ee17 2a90 	vmov	r2, s15
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800702c:	4b13      	ldr	r3, [pc, #76]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007030:	0e1b      	lsrs	r3, r3, #24
 8007032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007046:	edd7 6a07 	vldr	s13, [r7, #28]
 800704a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007052:	ee17 2a90 	vmov	r2, s15
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800705a:	e008      	b.n	800706e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
}
 800706e:	bf00      	nop
 8007070:	3724      	adds	r7, #36	@ 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	03d09000 	.word	0x03d09000
 8007084:	46000000 	.word	0x46000000
 8007088:	4c742400 	.word	0x4c742400
 800708c:	4a742400 	.word	0x4a742400
 8007090:	4bbebc20 	.word	0x4bbebc20

08007094 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070a2:	4b53      	ldr	r3, [pc, #332]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d101      	bne.n	80070b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e099      	b.n	80071e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070b2:	4b4f      	ldr	r3, [pc, #316]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a4e      	ldr	r2, [pc, #312]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070be:	f7fa fd21 	bl	8001b04 <HAL_GetTick>
 80070c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070c4:	e008      	b.n	80070d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070c6:	f7fa fd1d 	bl	8001b04 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e086      	b.n	80071e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d8:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f0      	bne.n	80070c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070e4:	4b42      	ldr	r3, [pc, #264]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	031b      	lsls	r3, r3, #12
 80070f2:	493f      	ldr	r1, [pc, #252]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	3b01      	subs	r3, #1
 8007108:	025b      	lsls	r3, r3, #9
 800710a:	b29b      	uxth	r3, r3
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	3b01      	subs	r3, #1
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	3b01      	subs	r3, #1
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007128:	4931      	ldr	r1, [pc, #196]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800712e:	4b30      	ldr	r3, [pc, #192]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	492d      	ldr	r1, [pc, #180]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007140:	4b2b      	ldr	r3, [pc, #172]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	f023 0220 	bic.w	r2, r3, #32
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	4928      	ldr	r1, [pc, #160]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007152:	4b27      	ldr	r3, [pc, #156]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	4a26      	ldr	r2, [pc, #152]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007158:	f023 0310 	bic.w	r3, r3, #16
 800715c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800715e:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007162:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <RCCEx_PLL2_Config+0x160>)
 8007164:	4013      	ands	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	69d2      	ldr	r2, [r2, #28]
 800716a:	00d2      	lsls	r2, r2, #3
 800716c:	4920      	ldr	r1, [pc, #128]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007172:	4b1f      	ldr	r3, [pc, #124]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	4a1e      	ldr	r2, [pc, #120]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007178:	f043 0310 	orr.w	r3, r3, #16
 800717c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007184:	4b1a      	ldr	r3, [pc, #104]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007188:	4a19      	ldr	r2, [pc, #100]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800718a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800718e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007190:	e00f      	b.n	80071b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d106      	bne.n	80071a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007198:	4b15      	ldr	r3, [pc, #84]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	4a14      	ldr	r2, [pc, #80]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071a4:	e005      	b.n	80071b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071a6:	4b12      	ldr	r3, [pc, #72]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	4a11      	ldr	r2, [pc, #68]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071b2:	4b0f      	ldr	r3, [pc, #60]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071be:	f7fa fca1 	bl	8001b04 <HAL_GetTick>
 80071c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071c4:	e008      	b.n	80071d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071c6:	f7fa fc9d 	bl	8001b04 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e006      	b.n	80071e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	58024400 	.word	0x58024400
 80071f4:	ffff0007 	.word	0xffff0007

080071f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007206:	4b53      	ldr	r3, [pc, #332]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d101      	bne.n	8007216 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e099      	b.n	800734a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007216:	4b4f      	ldr	r3, [pc, #316]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a4e      	ldr	r2, [pc, #312]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007222:	f7fa fc6f 	bl	8001b04 <HAL_GetTick>
 8007226:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007228:	e008      	b.n	800723c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800722a:	f7fa fc6b 	bl	8001b04 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e086      	b.n	800734a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800723c:	4b45      	ldr	r3, [pc, #276]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f0      	bne.n	800722a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007248:	4b42      	ldr	r3, [pc, #264]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	493f      	ldr	r1, [pc, #252]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007258:	4313      	orrs	r3, r2
 800725a:	628b      	str	r3, [r1, #40]	@ 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	3b01      	subs	r3, #1
 8007262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	3b01      	subs	r3, #1
 800726c:	025b      	lsls	r3, r3, #9
 800726e:	b29b      	uxth	r3, r3
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	3b01      	subs	r3, #1
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	3b01      	subs	r3, #1
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800728c:	4931      	ldr	r1, [pc, #196]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800728e:	4313      	orrs	r3, r2
 8007290:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007292:	4b30      	ldr	r3, [pc, #192]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007296:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	492d      	ldr	r1, [pc, #180]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	4928      	ldr	r1, [pc, #160]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	4a26      	ldr	r2, [pc, #152]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072c2:	4b24      	ldr	r3, [pc, #144]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c6:	4b24      	ldr	r3, [pc, #144]	@ (8007358 <RCCEx_PLL3_Config+0x160>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	69d2      	ldr	r2, [r2, #28]
 80072ce:	00d2      	lsls	r2, r2, #3
 80072d0:	4920      	ldr	r1, [pc, #128]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	4a1e      	ldr	r2, [pc, #120]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	4a19      	ldr	r2, [pc, #100]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072f4:	e00f      	b.n	8007316 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d106      	bne.n	800730a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072fc:	4b15      	ldr	r3, [pc, #84]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	4a14      	ldr	r2, [pc, #80]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007302:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007308:	e005      	b.n	8007316 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800730a:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	4a11      	ldr	r2, [pc, #68]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007314:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a0e      	ldr	r2, [pc, #56]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800731c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007322:	f7fa fbef 	bl	8001b04 <HAL_GetTick>
 8007326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007328:	e008      	b.n	800733c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800732a:	f7fa fbeb 	bl	8001b04 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e006      	b.n	800734a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f0      	beq.n	800732a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	58024400 	.word	0x58024400
 8007358:	ffff0007 	.word	0xffff0007

0800735c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e10f      	b.n	800758e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a87      	ldr	r2, [pc, #540]	@ (8007598 <HAL_SPI_Init+0x23c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00f      	beq.n	800739e <HAL_SPI_Init+0x42>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a86      	ldr	r2, [pc, #536]	@ (800759c <HAL_SPI_Init+0x240>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00a      	beq.n	800739e <HAL_SPI_Init+0x42>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a84      	ldr	r2, [pc, #528]	@ (80075a0 <HAL_SPI_Init+0x244>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d005      	beq.n	800739e <HAL_SPI_Init+0x42>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	d901      	bls.n	800739e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e0f7      	b.n	800758e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fe2e 	bl	8008000 <SPI_GetPacketSize>
 80073a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007598 <HAL_SPI_Init+0x23c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00c      	beq.n	80073ca <HAL_SPI_Init+0x6e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a79      	ldr	r2, [pc, #484]	@ (800759c <HAL_SPI_Init+0x240>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <HAL_SPI_Init+0x6e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a78      	ldr	r2, [pc, #480]	@ (80075a0 <HAL_SPI_Init+0x244>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d002      	beq.n	80073ca <HAL_SPI_Init+0x6e>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d811      	bhi.n	80073ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073ce:	4a72      	ldr	r2, [pc, #456]	@ (8007598 <HAL_SPI_Init+0x23c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a70      	ldr	r2, [pc, #448]	@ (800759c <HAL_SPI_Init+0x240>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_SPI_Init+0x8c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a6f      	ldr	r2, [pc, #444]	@ (80075a0 <HAL_SPI_Init+0x244>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d104      	bne.n	80073f2 <HAL_SPI_Init+0x96>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d901      	bls.n	80073f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e0cd      	b.n	800758e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7f9 ff04 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800742e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007438:	d119      	bne.n	800746e <HAL_SPI_Init+0x112>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007442:	d103      	bne.n	800744c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10c      	bne.n	800746e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800745c:	d107      	bne.n	800746e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800746c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00f      	beq.n	800749a <HAL_SPI_Init+0x13e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d90b      	bls.n	800749a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e007      	b.n	80074aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69da      	ldr	r2, [r3, #28]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	431a      	orrs	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750a:	ea42 0103 	orr.w	r1, r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d113      	bne.n	800754a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007534:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007548:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40013000 	.word	0x40013000
 800759c:	40003800 	.word	0x40003800
 80075a0:	40003c00 	.word	0x40003c00

080075a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3320      	adds	r3, #32
 80075ba:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075bc:	f7fa faa2 	bl	8001b04 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
 80075d0:	e1d1      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0x3a>
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e1c9      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_SPI_Transmit+0x4c>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e1c2      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2203      	movs	r2, #3
 80075fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007648:	d108      	bne.n	800765c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e009      	b.n	8007670 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800766e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b96      	ldr	r3, [pc, #600]	@ (80078d0 <HAL_SPI_Transmit+0x32c>)
 8007678:	4013      	ands	r3, r2
 800767a:	88f9      	ldrh	r1, [r7, #6]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	430b      	orrs	r3, r1
 8007682:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800769c:	d107      	bne.n	80076ae <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d947      	bls.n	8007746 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80076b6:	e03f      	b.n	8007738 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d114      	bne.n	80076f0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d6:	1d1a      	adds	r2, r3, #4
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076ee:	e023      	b.n	8007738 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f0:	f7fa fa08 	bl	8001b04 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d803      	bhi.n	8007708 <HAL_SPI_Transmit+0x164>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d102      	bne.n	800770e <HAL_SPI_Transmit+0x16a>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d114      	bne.n	8007738 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fba8 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800771a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e11e      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1b9      	bne.n	80076b8 <HAL_SPI_Transmit+0x114>
 8007744:	e0f1      	b.n	800792a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2b07      	cmp	r3, #7
 800774c:	f240 80e6 	bls.w	800791c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007750:	e05d      	b.n	800780e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d132      	bne.n	80077c6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d918      	bls.n	800779e <HAL_SPI_Transmit+0x1fa>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d014      	beq.n	800779e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007784:	1d1a      	adds	r2, r3, #4
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b02      	subs	r3, #2
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800779c:	e037      	b.n	800780e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077c4:	e023      	b.n	800780e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c6:	f7fa f99d 	bl	8001b04 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d803      	bhi.n	80077de <HAL_SPI_Transmit+0x23a>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d102      	bne.n	80077e4 <HAL_SPI_Transmit+0x240>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d114      	bne.n	800780e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fb3d 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e0b3      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d19b      	bne.n	8007752 <HAL_SPI_Transmit+0x1ae>
 800781a:	e086      	b.n	800792a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d154      	bne.n	80078d4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d918      	bls.n	8007868 <HAL_SPI_Transmit+0x2c4>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783a:	2b40      	cmp	r3, #64	@ 0x40
 800783c:	d914      	bls.n	8007868 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b04      	subs	r3, #4
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007866:	e059      	b.n	800791c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d917      	bls.n	80078a4 <HAL_SPI_Transmit+0x300>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d013      	beq.n	80078a4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007880:	881a      	ldrh	r2, [r3, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788a:	1c9a      	adds	r2, r3, #2
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b02      	subs	r3, #2
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078a2:	e03b      	b.n	800791c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3320      	adds	r3, #32
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078ce:	e025      	b.n	800791c <HAL_SPI_Transmit+0x378>
 80078d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d4:	f7fa f916 	bl	8001b04 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d803      	bhi.n	80078ec <HAL_SPI_Transmit+0x348>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_Transmit+0x34e>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d114      	bne.n	800791c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fab6 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e02c      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	f47f af79 	bne.w	800781c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	2108      	movs	r1, #8
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fb35 	bl	8007fa4 <SPI_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fa87 	bl	8007e64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007974:	2300      	movs	r3, #0
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop

08007980 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	b29b      	uxth	r3, r3
 8007998:	3301      	adds	r3, #1
 800799a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3330      	adds	r3, #48	@ 0x30
 80079a2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079a4:	f7fa f8ae 	bl	8001b04 <HAL_GetTick>
 80079a8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d001      	beq.n	80079ba <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
 80079b8:	e250      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_Receive+0x46>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e248      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_SPI_Receive+0x58>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e241      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2204      	movs	r2, #4
 80079e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	88fa      	ldrh	r2, [r7, #6]
 8007a02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a30:	d108      	bne.n	8007a44 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e009      	b.n	8007a58 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007a56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4b95      	ldr	r3, [pc, #596]	@ (8007cb4 <HAL_SPI_Receive+0x334>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	88f9      	ldrh	r1, [r7, #6]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a84:	d107      	bne.n	8007a96 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d96c      	bls.n	8007b78 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007a9e:	e064      	b.n	8007b6a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d114      	bne.n	8007ae0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007abe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ac0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ade:	e044      	b.n	8007b6a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8bfa      	ldrh	r2, [r7, #30]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d919      	bls.n	8007b22 <HAL_SPI_Receive+0x1a2>
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d014      	beq.n	8007b22 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b02:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b20:	e023      	b.n	8007b6a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b22:	f7f9 ffef 	bl	8001b04 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d803      	bhi.n	8007b3a <HAL_SPI_Receive+0x1ba>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b38:	d102      	bne.n	8007b40 <HAL_SPI_Receive+0x1c0>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d114      	bne.n	8007b6a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f98f 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e178      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d194      	bne.n	8007aa0 <HAL_SPI_Receive+0x120>
 8007b76:	e15e      	b.n	8007e36 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b07      	cmp	r3, #7
 8007b7e:	f240 8153 	bls.w	8007e28 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007b82:	e08f      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d114      	bne.n	8007bc4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	8812      	ldrh	r2, [r2, #0]
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007baa:	1c9a      	adds	r2, r3, #2
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bc2:	e06f      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8bfa      	ldrh	r2, [r7, #30]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d924      	bls.n	8007c1c <HAL_SPI_Receive+0x29c>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01f      	beq.n	8007c1c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	8812      	ldrh	r2, [r2, #0]
 8007be4:	b292      	uxth	r2, r2
 8007be6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	8812      	ldrh	r2, [r2, #0]
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b02      	subs	r3, #2
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c1a:	e043      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d119      	bne.n	8007c5c <HAL_SPI_Receive+0x2dc>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d014      	beq.n	8007c5c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	8812      	ldrh	r2, [r2, #0]
 8007c3a:	b292      	uxth	r2, r2
 8007c3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c42:	1c9a      	adds	r2, r3, #2
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c5a:	e023      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c5c:	f7f9 ff52 	bl	8001b04 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d803      	bhi.n	8007c74 <HAL_SPI_Receive+0x2f4>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d102      	bne.n	8007c7a <HAL_SPI_Receive+0x2fa>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d114      	bne.n	8007ca4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f8f2 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e0db      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f47f af69 	bne.w	8007b84 <HAL_SPI_Receive+0x204>
 8007cb2:	e0c0      	b.n	8007e36 <HAL_SPI_Receive+0x4b6>
 8007cb4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d117      	bne.n	8007cfe <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cfc:	e094      	b.n	8007e28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8bfa      	ldrh	r2, [r7, #30]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d946      	bls.n	8007d9a <HAL_SPI_Receive+0x41a>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d041      	beq.n	8007d9a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d5a:	7812      	ldrb	r2, [r2, #0]
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b04      	subs	r3, #4
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d98:	e046      	b.n	8007e28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d81c      	bhi.n	8007de0 <HAL_SPI_Receive+0x460>
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dde:	e023      	b.n	8007e28 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007de0:	f7f9 fe90 	bl	8001b04 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d803      	bhi.n	8007df8 <HAL_SPI_Receive+0x478>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d102      	bne.n	8007dfe <HAL_SPI_Receive+0x47e>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d114      	bne.n	8007e28 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f830 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e019      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f47f af41 	bne.w	8007cb8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f814 	bl	8007e64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3720      	adds	r7, #32
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0208 	orr.w	r2, r2, #8
 8007e82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0210 	orr.w	r2, r2, #16
 8007e92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6919      	ldr	r1, [r3, #16]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa0 <SPI_CloseTransfer+0x13c>)
 8007eb0:	400b      	ands	r3, r1
 8007eb2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ec2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d014      	beq.n	8007efa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00f      	beq.n	8007efa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0220 	orr.w	r2, r2, #32
 8007ef8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d014      	beq.n	8007f30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f40:	f043 0201 	orr.w	r2, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f6a:	f043 0208 	orr.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	fffffc90 	.word	0xfffffc90

08007fa4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007fb4:	e010      	b.n	8007fd8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb6:	f7f9 fda5 	bl	8001b04 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d803      	bhi.n	8007fce <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d102      	bne.n	8007fd4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e00f      	b.n	8007ff8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2301      	moveq	r3, #1
 8007fea:	2300      	movne	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d0df      	beq.n	8007fb6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	3301      	adds	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	3307      	adds	r3, #7
 800801e:	08db      	lsrs	r3, r3, #3
 8008020:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	fb02 f303 	mul.w	r3, r2, r3
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e049      	b.n	80080dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f841 	bl	80080e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f000 f9e7 	bl	8008448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b01      	cmp	r3, #1
 800810a:	d001      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e054      	b.n	80081ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a26      	ldr	r2, [pc, #152]	@ (80081c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d022      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813a:	d01d      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a22      	ldr	r2, [pc, #136]	@ (80081cc <HAL_TIM_Base_Start_IT+0xd4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d018      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a21      	ldr	r2, [pc, #132]	@ (80081d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1f      	ldr	r2, [pc, #124]	@ (80081d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00e      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d009      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1c      	ldr	r2, [pc, #112]	@ (80081dc <HAL_TIM_Base_Start_IT+0xe4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d004      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1b      	ldr	r2, [pc, #108]	@ (80081e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d115      	bne.n	80081a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	4b19      	ldr	r3, [pc, #100]	@ (80081e4 <HAL_TIM_Base_Start_IT+0xec>)
 8008180:	4013      	ands	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b06      	cmp	r3, #6
 8008188:	d015      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0xbe>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008190:	d011      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0201 	orr.w	r2, r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	e008      	b.n	80081b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0201 	orr.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e000      	b.n	80081b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40001800 	.word	0x40001800
 80081e0:	40014000 	.word	0x40014000
 80081e4:	00010007 	.word	0x00010007

080081e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d020      	beq.n	800824c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01b      	beq.n	800824c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0202 	mvn.w	r2, #2
 800821c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f8e9 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8db 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f8ec 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d020      	beq.n	8008298 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01b      	beq.n	8008298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0204 	mvn.w	r2, #4
 8008268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f8c3 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 8008284:	e005      	b.n	8008292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f8b5 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f8c6 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d020      	beq.n	80082e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01b      	beq.n	80082e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0208 	mvn.w	r2, #8
 80082b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f89d 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f88f 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f8a0 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 0310 	and.w	r3, r3, #16
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d020      	beq.n	8008330 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01b      	beq.n	8008330 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0210 	mvn.w	r2, #16
 8008300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2208      	movs	r2, #8
 8008306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f877 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f869 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f87a 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00c      	beq.n	8008354 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0201 	mvn.w	r2, #1
 800834c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7f8 fef2 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00c      	beq.n	8008382 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800837a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f90d 	bl	800859c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800839e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f905 	bl	80085b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f834 	bl	8008432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00c      	beq.n	80083ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d007      	beq.n	80083ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f06f 0220 	mvn.w	r2, #32
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f8cd 	bl	8008588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a43      	ldr	r2, [pc, #268]	@ (8008568 <TIM_Base_SetConfig+0x120>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d013      	beq.n	8008488 <TIM_Base_SetConfig+0x40>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008466:	d00f      	beq.n	8008488 <TIM_Base_SetConfig+0x40>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a40      	ldr	r2, [pc, #256]	@ (800856c <TIM_Base_SetConfig+0x124>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00b      	beq.n	8008488 <TIM_Base_SetConfig+0x40>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a3f      	ldr	r2, [pc, #252]	@ (8008570 <TIM_Base_SetConfig+0x128>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d007      	beq.n	8008488 <TIM_Base_SetConfig+0x40>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a3e      	ldr	r2, [pc, #248]	@ (8008574 <TIM_Base_SetConfig+0x12c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d003      	beq.n	8008488 <TIM_Base_SetConfig+0x40>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a3d      	ldr	r2, [pc, #244]	@ (8008578 <TIM_Base_SetConfig+0x130>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d108      	bne.n	800849a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a32      	ldr	r2, [pc, #200]	@ (8008568 <TIM_Base_SetConfig+0x120>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d01f      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a8:	d01b      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a2f      	ldr	r2, [pc, #188]	@ (800856c <TIM_Base_SetConfig+0x124>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d017      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008570 <TIM_Base_SetConfig+0x128>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d013      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a2d      	ldr	r2, [pc, #180]	@ (8008574 <TIM_Base_SetConfig+0x12c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00f      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a2c      	ldr	r2, [pc, #176]	@ (8008578 <TIM_Base_SetConfig+0x130>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a2b      	ldr	r2, [pc, #172]	@ (800857c <TIM_Base_SetConfig+0x134>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d007      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008580 <TIM_Base_SetConfig+0x138>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <TIM_Base_SetConfig+0x9a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a29      	ldr	r2, [pc, #164]	@ (8008584 <TIM_Base_SetConfig+0x13c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d108      	bne.n	80084f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a14      	ldr	r2, [pc, #80]	@ (8008568 <TIM_Base_SetConfig+0x120>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_Base_SetConfig+0xf2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a16      	ldr	r2, [pc, #88]	@ (8008578 <TIM_Base_SetConfig+0x130>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_Base_SetConfig+0xf2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a15      	ldr	r2, [pc, #84]	@ (800857c <TIM_Base_SetConfig+0x134>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_Base_SetConfig+0xf2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a14      	ldr	r2, [pc, #80]	@ (8008580 <TIM_Base_SetConfig+0x138>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_Base_SetConfig+0xf2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a13      	ldr	r2, [pc, #76]	@ (8008584 <TIM_Base_SetConfig+0x13c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d103      	bne.n	8008542 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	691a      	ldr	r2, [r3, #16]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f043 0204 	orr.w	r2, r3, #4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]
}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40010000 	.word	0x40010000
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40000c00 	.word	0x40000c00
 8008578:	40010400 	.word	0x40010400
 800857c:	40014000 	.word	0x40014000
 8008580:	40014400 	.word	0x40014400
 8008584:	40014800 	.word	0x40014800

08008588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e042      	b.n	800865c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d106      	bne.n	80085ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7f9 f939 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2224      	movs	r2, #36	@ 0x24
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0201 	bic.w	r2, r2, #1
 8008604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fa14 	bl	8009a3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fca9 	bl	8008f6c <UART_SetConfig>
 800861a:	4603      	mov	r3, r0
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e01b      	b.n	800865c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fa93 	bl	8009b80 <UART_CheckIdleState>
 800865a:	4603      	mov	r3, r0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08a      	sub	sp, #40	@ 0x28
 8008668:	af02      	add	r7, sp, #8
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	4613      	mov	r3, r2
 8008672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800867a:	2b20      	cmp	r3, #32
 800867c:	d17b      	bne.n	8008776 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_UART_Transmit+0x26>
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e074      	b.n	8008778 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2221      	movs	r2, #33	@ 0x21
 800869a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800869e:	f7f9 fa31 	bl	8001b04 <HAL_GetTick>
 80086a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	88fa      	ldrh	r2, [r7, #6]
 80086a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	88fa      	ldrh	r2, [r7, #6]
 80086b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086bc:	d108      	bne.n	80086d0 <HAL_UART_Transmit+0x6c>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d104      	bne.n	80086d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	e003      	b.n	80086d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086d8:	e030      	b.n	800873c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2200      	movs	r2, #0
 80086e2:	2180      	movs	r1, #128	@ 0x80
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f001 faf5 	bl	8009cd4 <UART_WaitOnFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e03d      	b.n	8008778 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10b      	bne.n	800871a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008710:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	3302      	adds	r3, #2
 8008716:	61bb      	str	r3, [r7, #24]
 8008718:	e007      	b.n	800872a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1c8      	bne.n	80086da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	2140      	movs	r1, #64	@ 0x40
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f001 fabe 	bl	8009cd4 <UART_WaitOnFlagUntilTimeout>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d005      	beq.n	800876a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2220      	movs	r2, #32
 8008762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e006      	b.n	8008778 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e000      	b.n	8008778 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008776:	2302      	movs	r3, #2
  }
}
 8008778:	4618      	mov	r0, r3
 800877a:	3720      	adds	r7, #32
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b0ba      	sub	sp, #232	@ 0xe8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80087aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80087ae:	4013      	ands	r3, r2
 80087b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80087b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11b      	bne.n	80087f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d015      	beq.n	80087f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8393 	beq.w	8008f10 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	4798      	blx	r3
      }
      return;
 80087f2:	e38d      	b.n	8008f10 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8123 	beq.w	8008a44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008802:	4b8d      	ldr	r3, [pc, #564]	@ (8008a38 <HAL_UART_IRQHandler+0x2b8>)
 8008804:	4013      	ands	r3, r2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800880a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800880e:	4b8b      	ldr	r3, [pc, #556]	@ (8008a3c <HAL_UART_IRQHandler+0x2bc>)
 8008810:	4013      	ands	r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 8116 	beq.w	8008a44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d011      	beq.n	8008848 <HAL_UART_IRQHandler+0xc8>
 8008824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2201      	movs	r2, #1
 8008836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883e:	f043 0201 	orr.w	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d011      	beq.n	8008878 <HAL_UART_IRQHandler+0xf8>
 8008854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2202      	movs	r2, #2
 8008866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800886e:	f043 0204 	orr.w	r2, r3, #4
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d011      	beq.n	80088a8 <HAL_UART_IRQHandler+0x128>
 8008884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2204      	movs	r2, #4
 8008896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800889e:	f043 0202 	orr.w	r2, r3, #2
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008a38 <HAL_UART_IRQHandler+0x2b8>)
 80088c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2208      	movs	r2, #8
 80088d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088da:	f043 0208 	orr.w	r2, r3, #8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d012      	beq.n	8008916 <HAL_UART_IRQHandler+0x196>
 80088f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00c      	beq.n	8008916 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800890c:	f043 0220 	orr.w	r2, r3, #32
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 82f9 	beq.w	8008f14 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800892e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800893a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800893e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800895c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	d005      	beq.n	800897a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800896e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008976:	2b00      	cmp	r3, #0
 8008978:	d054      	beq.n	8008a24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 fa18 	bl	8009db0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800898a:	2b40      	cmp	r3, #64	@ 0x40
 800898c:	d146      	bne.n	8008a1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1d9      	bne.n	800898e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d017      	beq.n	8008a14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ea:	4a15      	ldr	r2, [pc, #84]	@ (8008a40 <HAL_UART_IRQHandler+0x2c0>)
 80089ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fa f893 	bl	8002b20 <HAL_DMA_Abort_IT>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d019      	beq.n	8008a34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a12:	e00f      	b.n	8008a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fa93 	bl	8008f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1a:	e00b      	b.n	8008a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fa8f 	bl	8008f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a22:	e007      	b.n	8008a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fa8b 	bl	8008f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a32:	e26f      	b.n	8008f14 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a34:	bf00      	nop
    return;
 8008a36:	e26d      	b.n	8008f14 <HAL_UART_IRQHandler+0x794>
 8008a38:	10000001 	.word	0x10000001
 8008a3c:	04000120 	.word	0x04000120
 8008a40:	08009e7d 	.word	0x08009e7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	f040 8203 	bne.w	8008e54 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a52:	f003 0310 	and.w	r3, r3, #16
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 81fc 	beq.w	8008e54 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 81f5 	beq.w	8008e54 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2210      	movs	r2, #16
 8008a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a7c:	2b40      	cmp	r3, #64	@ 0x40
 8008a7e:	f040 816d 	bne.w	8008d5c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4aa4      	ldr	r2, [pc, #656]	@ (8008d1c <HAL_UART_IRQHandler+0x59c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d068      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4aa1      	ldr	r2, [pc, #644]	@ (8008d20 <HAL_UART_IRQHandler+0x5a0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d061      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a9f      	ldr	r2, [pc, #636]	@ (8008d24 <HAL_UART_IRQHandler+0x5a4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d05a      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a9c      	ldr	r2, [pc, #624]	@ (8008d28 <HAL_UART_IRQHandler+0x5a8>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d053      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8008d2c <HAL_UART_IRQHandler+0x5ac>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d04c      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a97      	ldr	r2, [pc, #604]	@ (8008d30 <HAL_UART_IRQHandler+0x5b0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d045      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a95      	ldr	r2, [pc, #596]	@ (8008d34 <HAL_UART_IRQHandler+0x5b4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d03e      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a92      	ldr	r2, [pc, #584]	@ (8008d38 <HAL_UART_IRQHandler+0x5b8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d037      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a90      	ldr	r2, [pc, #576]	@ (8008d3c <HAL_UART_IRQHandler+0x5bc>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d030      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a8d      	ldr	r2, [pc, #564]	@ (8008d40 <HAL_UART_IRQHandler+0x5c0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d029      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a8b      	ldr	r2, [pc, #556]	@ (8008d44 <HAL_UART_IRQHandler+0x5c4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d022      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a88      	ldr	r2, [pc, #544]	@ (8008d48 <HAL_UART_IRQHandler+0x5c8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d01b      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a86      	ldr	r2, [pc, #536]	@ (8008d4c <HAL_UART_IRQHandler+0x5cc>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d014      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a83      	ldr	r2, [pc, #524]	@ (8008d50 <HAL_UART_IRQHandler+0x5d0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00d      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a81      	ldr	r2, [pc, #516]	@ (8008d54 <HAL_UART_IRQHandler+0x5d4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d006      	beq.n	8008b62 <HAL_UART_IRQHandler+0x3e2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a7e      	ldr	r2, [pc, #504]	@ (8008d58 <HAL_UART_IRQHandler+0x5d8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d106      	bne.n	8008b70 <HAL_UART_IRQHandler+0x3f0>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	e005      	b.n	8008b7c <HAL_UART_IRQHandler+0x3fc>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80ad 	beq.w	8008ce4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b94:	429a      	cmp	r2, r3
 8008b96:	f080 80a5 	bcs.w	8008ce4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bb0:	f000 8087 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008be2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1da      	bne.n	8008bb4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3308      	adds	r3, #8
 8008c04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008c0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008c22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e1      	bne.n	8008bfe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e3      	bne.n	8008c3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c90:	f023 0310 	bic.w	r3, r3, #16
 8008c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ca4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e4      	bne.n	8008c80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7f9 fc11 	bl	80024e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f939 	bl	8008f54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008ce2:	e119      	b.n	8008f18 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	f040 8112 	bne.w	8008f18 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d00:	f040 810a 	bne.w	8008f18 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f91e 	bl	8008f54 <HAL_UARTEx_RxEventCallback>
      return;
 8008d18:	e0fe      	b.n	8008f18 <HAL_UART_IRQHandler+0x798>
 8008d1a:	bf00      	nop
 8008d1c:	40020010 	.word	0x40020010
 8008d20:	40020028 	.word	0x40020028
 8008d24:	40020040 	.word	0x40020040
 8008d28:	40020058 	.word	0x40020058
 8008d2c:	40020070 	.word	0x40020070
 8008d30:	40020088 	.word	0x40020088
 8008d34:	400200a0 	.word	0x400200a0
 8008d38:	400200b8 	.word	0x400200b8
 8008d3c:	40020410 	.word	0x40020410
 8008d40:	40020428 	.word	0x40020428
 8008d44:	40020440 	.word	0x40020440
 8008d48:	40020458 	.word	0x40020458
 8008d4c:	40020470 	.word	0x40020470
 8008d50:	40020488 	.word	0x40020488
 8008d54:	400204a0 	.word	0x400204a0
 8008d58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 80cf 	beq.w	8008f1c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008d7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80ca 	beq.w	8008f1c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e4      	bne.n	8008d88 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dce:	6a3a      	ldr	r2, [r7, #32]
 8008dd0:	4b55      	ldr	r3, [pc, #340]	@ (8008f28 <HAL_UART_IRQHandler+0x7a8>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008de2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e3      	bne.n	8008dbe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0310 	bic.w	r3, r3, #16
 8008e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	69b9      	ldr	r1, [r7, #24]
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	617b      	str	r3, [r7, #20]
   return(result);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e4      	bne.n	8008e0a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f881 	bl	8008f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e52:	e063      	b.n	8008f1c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00e      	beq.n	8008e7e <HAL_UART_IRQHandler+0x6fe>
 8008e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d008      	beq.n	8008e7e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 f83d 	bl	8009ef6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e7c:	e051      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d014      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d105      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d03a      	beq.n	8008f20 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
    }
    return;
 8008eb2:	e035      	b.n	8008f20 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x754>
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 ffe7 	bl	8009ea0 <UART_EndTransmit_IT>
    return;
 8008ed2:	e026      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x774>
 8008ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f816 	bl	8009f1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ef2:	e016      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d010      	beq.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
 8008f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	da0c      	bge.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fffe 	bl	8009f0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f0e:	e008      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008f10:	bf00      	nop
 8008f12:	e006      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008f14:	bf00      	nop
 8008f16:	e004      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008f18:	bf00      	nop
 8008f1a:	e002      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008f1c:	bf00      	nop
 8008f1e:	e000      	b.n	8008f22 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008f20:	bf00      	nop
  }
}
 8008f22:	37e8      	adds	r7, #232	@ 0xe8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	effffffe 	.word	0xeffffffe

08008f2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f70:	b092      	sub	sp, #72	@ 0x48
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4bbe      	ldr	r3, [pc, #760]	@ (8009294 <UART_SetConfig+0x328>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4ab3      	ldr	r2, [pc, #716]	@ (8009298 <UART_SetConfig+0x32c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	4baf      	ldr	r3, [pc, #700]	@ (800929c <UART_SetConfig+0x330>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	6812      	ldr	r2, [r2, #0]
 8008fe6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	f023 010f 	bic.w	r1, r3, #15
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4aa6      	ldr	r2, [pc, #664]	@ (80092a0 <UART_SetConfig+0x334>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d177      	bne.n	80090fc <UART_SetConfig+0x190>
 800900c:	4ba5      	ldr	r3, [pc, #660]	@ (80092a4 <UART_SetConfig+0x338>)
 800900e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009014:	2b28      	cmp	r3, #40	@ 0x28
 8009016:	d86d      	bhi.n	80090f4 <UART_SetConfig+0x188>
 8009018:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <UART_SetConfig+0xb4>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	080090c5 	.word	0x080090c5
 8009024:	080090f5 	.word	0x080090f5
 8009028:	080090f5 	.word	0x080090f5
 800902c:	080090f5 	.word	0x080090f5
 8009030:	080090f5 	.word	0x080090f5
 8009034:	080090f5 	.word	0x080090f5
 8009038:	080090f5 	.word	0x080090f5
 800903c:	080090f5 	.word	0x080090f5
 8009040:	080090cd 	.word	0x080090cd
 8009044:	080090f5 	.word	0x080090f5
 8009048:	080090f5 	.word	0x080090f5
 800904c:	080090f5 	.word	0x080090f5
 8009050:	080090f5 	.word	0x080090f5
 8009054:	080090f5 	.word	0x080090f5
 8009058:	080090f5 	.word	0x080090f5
 800905c:	080090f5 	.word	0x080090f5
 8009060:	080090d5 	.word	0x080090d5
 8009064:	080090f5 	.word	0x080090f5
 8009068:	080090f5 	.word	0x080090f5
 800906c:	080090f5 	.word	0x080090f5
 8009070:	080090f5 	.word	0x080090f5
 8009074:	080090f5 	.word	0x080090f5
 8009078:	080090f5 	.word	0x080090f5
 800907c:	080090f5 	.word	0x080090f5
 8009080:	080090dd 	.word	0x080090dd
 8009084:	080090f5 	.word	0x080090f5
 8009088:	080090f5 	.word	0x080090f5
 800908c:	080090f5 	.word	0x080090f5
 8009090:	080090f5 	.word	0x080090f5
 8009094:	080090f5 	.word	0x080090f5
 8009098:	080090f5 	.word	0x080090f5
 800909c:	080090f5 	.word	0x080090f5
 80090a0:	080090e5 	.word	0x080090e5
 80090a4:	080090f5 	.word	0x080090f5
 80090a8:	080090f5 	.word	0x080090f5
 80090ac:	080090f5 	.word	0x080090f5
 80090b0:	080090f5 	.word	0x080090f5
 80090b4:	080090f5 	.word	0x080090f5
 80090b8:	080090f5 	.word	0x080090f5
 80090bc:	080090f5 	.word	0x080090f5
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e222      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090cc:	2304      	movs	r3, #4
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e21e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090d4:	2308      	movs	r3, #8
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e21a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090dc:	2310      	movs	r3, #16
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e216      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090e4:	2320      	movs	r3, #32
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ea:	e212      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090ec:	2340      	movs	r3, #64	@ 0x40
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f2:	e20e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090f4:	2380      	movs	r3, #128	@ 0x80
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fa:	e20a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a69      	ldr	r2, [pc, #420]	@ (80092a8 <UART_SetConfig+0x33c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d130      	bne.n	8009168 <UART_SetConfig+0x1fc>
 8009106:	4b67      	ldr	r3, [pc, #412]	@ (80092a4 <UART_SetConfig+0x338>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b05      	cmp	r3, #5
 8009110:	d826      	bhi.n	8009160 <UART_SetConfig+0x1f4>
 8009112:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <UART_SetConfig+0x1ac>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009131 	.word	0x08009131
 800911c:	08009139 	.word	0x08009139
 8009120:	08009141 	.word	0x08009141
 8009124:	08009149 	.word	0x08009149
 8009128:	08009151 	.word	0x08009151
 800912c:	08009159 	.word	0x08009159
 8009130:	2300      	movs	r3, #0
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e1ec      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009138:	2304      	movs	r3, #4
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e1e8      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009140:	2308      	movs	r3, #8
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e1e4      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009148:	2310      	movs	r3, #16
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914e:	e1e0      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009150:	2320      	movs	r3, #32
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009156:	e1dc      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915e:	e1d8      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009160:	2380      	movs	r3, #128	@ 0x80
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009166:	e1d4      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a4f      	ldr	r2, [pc, #316]	@ (80092ac <UART_SetConfig+0x340>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d130      	bne.n	80091d4 <UART_SetConfig+0x268>
 8009172:	4b4c      	ldr	r3, [pc, #304]	@ (80092a4 <UART_SetConfig+0x338>)
 8009174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b05      	cmp	r3, #5
 800917c:	d826      	bhi.n	80091cc <UART_SetConfig+0x260>
 800917e:	a201      	add	r2, pc, #4	@ (adr r2, 8009184 <UART_SetConfig+0x218>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	0800919d 	.word	0x0800919d
 8009188:	080091a5 	.word	0x080091a5
 800918c:	080091ad 	.word	0x080091ad
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091c5 	.word	0x080091c5
 800919c:	2300      	movs	r3, #0
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e1b6      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e1b2      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b2:	e1ae      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ba:	e1aa      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091bc:	2320      	movs	r3, #32
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c2:	e1a6      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091c4:	2340      	movs	r3, #64	@ 0x40
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e1a2      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091cc:	2380      	movs	r3, #128	@ 0x80
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e19e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a35      	ldr	r2, [pc, #212]	@ (80092b0 <UART_SetConfig+0x344>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d130      	bne.n	8009240 <UART_SetConfig+0x2d4>
 80091de:	4b31      	ldr	r3, [pc, #196]	@ (80092a4 <UART_SetConfig+0x338>)
 80091e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d826      	bhi.n	8009238 <UART_SetConfig+0x2cc>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <UART_SetConfig+0x284>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009209 	.word	0x08009209
 80091f4:	08009211 	.word	0x08009211
 80091f8:	08009219 	.word	0x08009219
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009229 	.word	0x08009229
 8009204:	08009231 	.word	0x08009231
 8009208:	2300      	movs	r3, #0
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e180      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009210:	2304      	movs	r3, #4
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e17c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009218:	2308      	movs	r3, #8
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e178      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009220:	2310      	movs	r3, #16
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009226:	e174      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922e:	e170      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009230:	2340      	movs	r3, #64	@ 0x40
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e16c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009238:	2380      	movs	r3, #128	@ 0x80
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e168      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1b      	ldr	r2, [pc, #108]	@ (80092b4 <UART_SetConfig+0x348>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d142      	bne.n	80092d0 <UART_SetConfig+0x364>
 800924a:	4b16      	ldr	r3, [pc, #88]	@ (80092a4 <UART_SetConfig+0x338>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b05      	cmp	r3, #5
 8009254:	d838      	bhi.n	80092c8 <UART_SetConfig+0x35c>
 8009256:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <UART_SetConfig+0x2f0>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009275 	.word	0x08009275
 8009260:	0800927d 	.word	0x0800927d
 8009264:	08009285 	.word	0x08009285
 8009268:	0800928d 	.word	0x0800928d
 800926c:	080092b9 	.word	0x080092b9
 8009270:	080092c1 	.word	0x080092c1
 8009274:	2300      	movs	r3, #0
 8009276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927a:	e14a      	b.n	8009512 <UART_SetConfig+0x5a6>
 800927c:	2304      	movs	r3, #4
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009282:	e146      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009284:	2308      	movs	r3, #8
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928a:	e142      	b.n	8009512 <UART_SetConfig+0x5a6>
 800928c:	2310      	movs	r3, #16
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009292:	e13e      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009294:	cfff69f3 	.word	0xcfff69f3
 8009298:	58000c00 	.word	0x58000c00
 800929c:	11fff4ff 	.word	0x11fff4ff
 80092a0:	40011000 	.word	0x40011000
 80092a4:	58024400 	.word	0x58024400
 80092a8:	40004400 	.word	0x40004400
 80092ac:	40004800 	.word	0x40004800
 80092b0:	40004c00 	.word	0x40004c00
 80092b4:	40005000 	.word	0x40005000
 80092b8:	2320      	movs	r3, #32
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092be:	e128      	b.n	8009512 <UART_SetConfig+0x5a6>
 80092c0:	2340      	movs	r3, #64	@ 0x40
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c6:	e124      	b.n	8009512 <UART_SetConfig+0x5a6>
 80092c8:	2380      	movs	r3, #128	@ 0x80
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ce:	e120      	b.n	8009512 <UART_SetConfig+0x5a6>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4acb      	ldr	r2, [pc, #812]	@ (8009604 <UART_SetConfig+0x698>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d176      	bne.n	80093c8 <UART_SetConfig+0x45c>
 80092da:	4bcb      	ldr	r3, [pc, #812]	@ (8009608 <UART_SetConfig+0x69c>)
 80092dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092e2:	2b28      	cmp	r3, #40	@ 0x28
 80092e4:	d86c      	bhi.n	80093c0 <UART_SetConfig+0x454>
 80092e6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ec <UART_SetConfig+0x380>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009391 	.word	0x08009391
 80092f0:	080093c1 	.word	0x080093c1
 80092f4:	080093c1 	.word	0x080093c1
 80092f8:	080093c1 	.word	0x080093c1
 80092fc:	080093c1 	.word	0x080093c1
 8009300:	080093c1 	.word	0x080093c1
 8009304:	080093c1 	.word	0x080093c1
 8009308:	080093c1 	.word	0x080093c1
 800930c:	08009399 	.word	0x08009399
 8009310:	080093c1 	.word	0x080093c1
 8009314:	080093c1 	.word	0x080093c1
 8009318:	080093c1 	.word	0x080093c1
 800931c:	080093c1 	.word	0x080093c1
 8009320:	080093c1 	.word	0x080093c1
 8009324:	080093c1 	.word	0x080093c1
 8009328:	080093c1 	.word	0x080093c1
 800932c:	080093a1 	.word	0x080093a1
 8009330:	080093c1 	.word	0x080093c1
 8009334:	080093c1 	.word	0x080093c1
 8009338:	080093c1 	.word	0x080093c1
 800933c:	080093c1 	.word	0x080093c1
 8009340:	080093c1 	.word	0x080093c1
 8009344:	080093c1 	.word	0x080093c1
 8009348:	080093c1 	.word	0x080093c1
 800934c:	080093a9 	.word	0x080093a9
 8009350:	080093c1 	.word	0x080093c1
 8009354:	080093c1 	.word	0x080093c1
 8009358:	080093c1 	.word	0x080093c1
 800935c:	080093c1 	.word	0x080093c1
 8009360:	080093c1 	.word	0x080093c1
 8009364:	080093c1 	.word	0x080093c1
 8009368:	080093c1 	.word	0x080093c1
 800936c:	080093b1 	.word	0x080093b1
 8009370:	080093c1 	.word	0x080093c1
 8009374:	080093c1 	.word	0x080093c1
 8009378:	080093c1 	.word	0x080093c1
 800937c:	080093c1 	.word	0x080093c1
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093c1 	.word	0x080093c1
 8009388:	080093c1 	.word	0x080093c1
 800938c:	080093b9 	.word	0x080093b9
 8009390:	2301      	movs	r3, #1
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e0bc      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e0b8      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e0b4      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e0b0      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093b0:	2320      	movs	r3, #32
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e0ac      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093b8:	2340      	movs	r3, #64	@ 0x40
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e0a8      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093c0:	2380      	movs	r3, #128	@ 0x80
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e0a4      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a8f      	ldr	r2, [pc, #572]	@ (800960c <UART_SetConfig+0x6a0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d130      	bne.n	8009434 <UART_SetConfig+0x4c8>
 80093d2:	4b8d      	ldr	r3, [pc, #564]	@ (8009608 <UART_SetConfig+0x69c>)
 80093d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b05      	cmp	r3, #5
 80093dc:	d826      	bhi.n	800942c <UART_SetConfig+0x4c0>
 80093de:	a201      	add	r2, pc, #4	@ (adr r2, 80093e4 <UART_SetConfig+0x478>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	080093fd 	.word	0x080093fd
 80093e8:	08009405 	.word	0x08009405
 80093ec:	0800940d 	.word	0x0800940d
 80093f0:	08009415 	.word	0x08009415
 80093f4:	0800941d 	.word	0x0800941d
 80093f8:	08009425 	.word	0x08009425
 80093fc:	2300      	movs	r3, #0
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e086      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009404:	2304      	movs	r3, #4
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940a:	e082      	b.n	8009512 <UART_SetConfig+0x5a6>
 800940c:	2308      	movs	r3, #8
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009412:	e07e      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009414:	2310      	movs	r3, #16
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941a:	e07a      	b.n	8009512 <UART_SetConfig+0x5a6>
 800941c:	2320      	movs	r3, #32
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e076      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009424:	2340      	movs	r3, #64	@ 0x40
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942a:	e072      	b.n	8009512 <UART_SetConfig+0x5a6>
 800942c:	2380      	movs	r3, #128	@ 0x80
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e06e      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a75      	ldr	r2, [pc, #468]	@ (8009610 <UART_SetConfig+0x6a4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d130      	bne.n	80094a0 <UART_SetConfig+0x534>
 800943e:	4b72      	ldr	r3, [pc, #456]	@ (8009608 <UART_SetConfig+0x69c>)
 8009440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009442:	f003 0307 	and.w	r3, r3, #7
 8009446:	2b05      	cmp	r3, #5
 8009448:	d826      	bhi.n	8009498 <UART_SetConfig+0x52c>
 800944a:	a201      	add	r2, pc, #4	@ (adr r2, 8009450 <UART_SetConfig+0x4e4>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	08009469 	.word	0x08009469
 8009454:	08009471 	.word	0x08009471
 8009458:	08009479 	.word	0x08009479
 800945c:	08009481 	.word	0x08009481
 8009460:	08009489 	.word	0x08009489
 8009464:	08009491 	.word	0x08009491
 8009468:	2300      	movs	r3, #0
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946e:	e050      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009470:	2304      	movs	r3, #4
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009476:	e04c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009478:	2308      	movs	r3, #8
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947e:	e048      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009480:	2310      	movs	r3, #16
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009486:	e044      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009488:	2320      	movs	r3, #32
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e040      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009490:	2340      	movs	r3, #64	@ 0x40
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009496:	e03c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009498:	2380      	movs	r3, #128	@ 0x80
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e038      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a5b      	ldr	r2, [pc, #364]	@ (8009614 <UART_SetConfig+0x6a8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d130      	bne.n	800950c <UART_SetConfig+0x5a0>
 80094aa:	4b57      	ldr	r3, [pc, #348]	@ (8009608 <UART_SetConfig+0x69c>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d826      	bhi.n	8009504 <UART_SetConfig+0x598>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <UART_SetConfig+0x550>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094dd 	.word	0x080094dd
 80094c4:	080094e5 	.word	0x080094e5
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	080094f5 	.word	0x080094f5
 80094d0:	080094fd 	.word	0x080094fd
 80094d4:	2302      	movs	r3, #2
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e01a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094dc:	2304      	movs	r3, #4
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e016      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094e4:	2308      	movs	r3, #8
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ea:	e012      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094ec:	2310      	movs	r3, #16
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e00e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094f4:	2320      	movs	r3, #32
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e00a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094fc:	2340      	movs	r3, #64	@ 0x40
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e006      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009504:	2380      	movs	r3, #128	@ 0x80
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e002      	b.n	8009512 <UART_SetConfig+0x5a6>
 800950c:	2380      	movs	r3, #128	@ 0x80
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a3f      	ldr	r2, [pc, #252]	@ (8009614 <UART_SetConfig+0x6a8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	f040 80f8 	bne.w	800970e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800951e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009522:	2b20      	cmp	r3, #32
 8009524:	dc46      	bgt.n	80095b4 <UART_SetConfig+0x648>
 8009526:	2b02      	cmp	r3, #2
 8009528:	f2c0 8082 	blt.w	8009630 <UART_SetConfig+0x6c4>
 800952c:	3b02      	subs	r3, #2
 800952e:	2b1e      	cmp	r3, #30
 8009530:	d87e      	bhi.n	8009630 <UART_SetConfig+0x6c4>
 8009532:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <UART_SetConfig+0x5cc>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	080095bb 	.word	0x080095bb
 800953c:	08009631 	.word	0x08009631
 8009540:	080095c3 	.word	0x080095c3
 8009544:	08009631 	.word	0x08009631
 8009548:	08009631 	.word	0x08009631
 800954c:	08009631 	.word	0x08009631
 8009550:	080095d3 	.word	0x080095d3
 8009554:	08009631 	.word	0x08009631
 8009558:	08009631 	.word	0x08009631
 800955c:	08009631 	.word	0x08009631
 8009560:	08009631 	.word	0x08009631
 8009564:	08009631 	.word	0x08009631
 8009568:	08009631 	.word	0x08009631
 800956c:	08009631 	.word	0x08009631
 8009570:	080095e3 	.word	0x080095e3
 8009574:	08009631 	.word	0x08009631
 8009578:	08009631 	.word	0x08009631
 800957c:	08009631 	.word	0x08009631
 8009580:	08009631 	.word	0x08009631
 8009584:	08009631 	.word	0x08009631
 8009588:	08009631 	.word	0x08009631
 800958c:	08009631 	.word	0x08009631
 8009590:	08009631 	.word	0x08009631
 8009594:	08009631 	.word	0x08009631
 8009598:	08009631 	.word	0x08009631
 800959c:	08009631 	.word	0x08009631
 80095a0:	08009631 	.word	0x08009631
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009623 	.word	0x08009623
 80095b4:	2b40      	cmp	r3, #64	@ 0x40
 80095b6:	d037      	beq.n	8009628 <UART_SetConfig+0x6bc>
 80095b8:	e03a      	b.n	8009630 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80095ba:	f7fd faad 	bl	8006b18 <HAL_RCCEx_GetD3PCLK1Freq>
 80095be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c0:	e03c      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fd fabc 	bl	8006b44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d0:	e034      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d2:	f107 0318 	add.w	r3, r7, #24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd fc08 	bl	8006dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e0:	e02c      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e2:	4b09      	ldr	r3, [pc, #36]	@ (8009608 <UART_SetConfig+0x69c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d016      	beq.n	800961c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095ee:	4b06      	ldr	r3, [pc, #24]	@ (8009608 <UART_SetConfig+0x69c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	4a07      	ldr	r2, [pc, #28]	@ (8009618 <UART_SetConfig+0x6ac>)
 80095fa:	fa22 f303 	lsr.w	r3, r2, r3
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009600:	e01c      	b.n	800963c <UART_SetConfig+0x6d0>
 8009602:	bf00      	nop
 8009604:	40011400 	.word	0x40011400
 8009608:	58024400 	.word	0x58024400
 800960c:	40007800 	.word	0x40007800
 8009610:	40007c00 	.word	0x40007c00
 8009614:	58000c00 	.word	0x58000c00
 8009618:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800961c:	4b9d      	ldr	r3, [pc, #628]	@ (8009894 <UART_SetConfig+0x928>)
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009620:	e00c      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009622:	4b9d      	ldr	r3, [pc, #628]	@ (8009898 <UART_SetConfig+0x92c>)
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009626:	e009      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962e:	e005      	b.n	800963c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800963a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800963c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 81de 	beq.w	8009a00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009648:	4a94      	ldr	r2, [pc, #592]	@ (800989c <UART_SetConfig+0x930>)
 800964a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800964e:	461a      	mov	r2, r3
 8009650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009652:	fbb3 f3f2 	udiv	r3, r3, r2
 8009656:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	4613      	mov	r3, r2
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	4413      	add	r3, r2
 8009662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009664:	429a      	cmp	r2, r3
 8009666:	d305      	bcc.n	8009674 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800966e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800967a:	e1c1      	b.n	8009a00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800967c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800967e:	2200      	movs	r2, #0
 8009680:	60bb      	str	r3, [r7, #8]
 8009682:	60fa      	str	r2, [r7, #12]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009688:	4a84      	ldr	r2, [pc, #528]	@ (800989c <UART_SetConfig+0x930>)
 800968a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800968e:	b29b      	uxth	r3, r3
 8009690:	2200      	movs	r2, #0
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800969a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800969e:	f7f7 f833 	bl	8000708 <__aeabi_uldivmod>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	020b      	lsls	r3, r1, #8
 80096b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096b8:	0202      	lsls	r2, r0, #8
 80096ba:	6979      	ldr	r1, [r7, #20]
 80096bc:	6849      	ldr	r1, [r1, #4]
 80096be:	0849      	lsrs	r1, r1, #1
 80096c0:	2000      	movs	r0, #0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4605      	mov	r5, r0
 80096c6:	eb12 0804 	adds.w	r8, r2, r4
 80096ca:	eb43 0905 	adc.w	r9, r3, r5
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	469a      	mov	sl, r3
 80096d6:	4693      	mov	fp, r2
 80096d8:	4652      	mov	r2, sl
 80096da:	465b      	mov	r3, fp
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f7 f812 	bl	8000708 <__aeabi_uldivmod>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4613      	mov	r3, r2
 80096ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096f2:	d308      	bcc.n	8009706 <UART_SetConfig+0x79a>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096fa:	d204      	bcs.n	8009706 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009702:	60da      	str	r2, [r3, #12]
 8009704:	e17c      	b.n	8009a00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800970c:	e178      	b.n	8009a00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009716:	f040 80c5 	bne.w	80098a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800971a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800971e:	2b20      	cmp	r3, #32
 8009720:	dc48      	bgt.n	80097b4 <UART_SetConfig+0x848>
 8009722:	2b00      	cmp	r3, #0
 8009724:	db7b      	blt.n	800981e <UART_SetConfig+0x8b2>
 8009726:	2b20      	cmp	r3, #32
 8009728:	d879      	bhi.n	800981e <UART_SetConfig+0x8b2>
 800972a:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <UART_SetConfig+0x7c4>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	080097bb 	.word	0x080097bb
 8009734:	080097c3 	.word	0x080097c3
 8009738:	0800981f 	.word	0x0800981f
 800973c:	0800981f 	.word	0x0800981f
 8009740:	080097cb 	.word	0x080097cb
 8009744:	0800981f 	.word	0x0800981f
 8009748:	0800981f 	.word	0x0800981f
 800974c:	0800981f 	.word	0x0800981f
 8009750:	080097db 	.word	0x080097db
 8009754:	0800981f 	.word	0x0800981f
 8009758:	0800981f 	.word	0x0800981f
 800975c:	0800981f 	.word	0x0800981f
 8009760:	0800981f 	.word	0x0800981f
 8009764:	0800981f 	.word	0x0800981f
 8009768:	0800981f 	.word	0x0800981f
 800976c:	0800981f 	.word	0x0800981f
 8009770:	080097eb 	.word	0x080097eb
 8009774:	0800981f 	.word	0x0800981f
 8009778:	0800981f 	.word	0x0800981f
 800977c:	0800981f 	.word	0x0800981f
 8009780:	0800981f 	.word	0x0800981f
 8009784:	0800981f 	.word	0x0800981f
 8009788:	0800981f 	.word	0x0800981f
 800978c:	0800981f 	.word	0x0800981f
 8009790:	0800981f 	.word	0x0800981f
 8009794:	0800981f 	.word	0x0800981f
 8009798:	0800981f 	.word	0x0800981f
 800979c:	0800981f 	.word	0x0800981f
 80097a0:	0800981f 	.word	0x0800981f
 80097a4:	0800981f 	.word	0x0800981f
 80097a8:	0800981f 	.word	0x0800981f
 80097ac:	0800981f 	.word	0x0800981f
 80097b0:	08009811 	.word	0x08009811
 80097b4:	2b40      	cmp	r3, #64	@ 0x40
 80097b6:	d02e      	beq.n	8009816 <UART_SetConfig+0x8aa>
 80097b8:	e031      	b.n	800981e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ba:	f7fb ff35 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 80097be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097c0:	e033      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097c2:	f7fb ff47 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 80097c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097c8:	e02f      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fd f9b8 	bl	8006b44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d8:	e027      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fd fb04 	bl	8006dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e8:	e01f      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ea:	4b2d      	ldr	r3, [pc, #180]	@ (80098a0 <UART_SetConfig+0x934>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097f6:	4b2a      	ldr	r3, [pc, #168]	@ (80098a0 <UART_SetConfig+0x934>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	08db      	lsrs	r3, r3, #3
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	4a24      	ldr	r2, [pc, #144]	@ (8009894 <UART_SetConfig+0x928>)
 8009802:	fa22 f303 	lsr.w	r3, r2, r3
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009808:	e00f      	b.n	800982a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800980a:	4b22      	ldr	r3, [pc, #136]	@ (8009894 <UART_SetConfig+0x928>)
 800980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800980e:	e00c      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009810:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <UART_SetConfig+0x92c>)
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009814:	e009      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800981a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800981c:	e005      	b.n	800982a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800982a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80e7 	beq.w	8009a00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009836:	4a19      	ldr	r2, [pc, #100]	@ (800989c <UART_SetConfig+0x930>)
 8009838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983c:	461a      	mov	r2, r3
 800983e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009840:	fbb3 f3f2 	udiv	r3, r3, r2
 8009844:	005a      	lsls	r2, r3, #1
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	085b      	lsrs	r3, r3, #1
 800984c:	441a      	add	r2, r3
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	fbb2 f3f3 	udiv	r3, r2, r3
 8009856:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985a:	2b0f      	cmp	r3, #15
 800985c:	d916      	bls.n	800988c <UART_SetConfig+0x920>
 800985e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009864:	d212      	bcs.n	800988c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009868:	b29b      	uxth	r3, r3
 800986a:	f023 030f 	bic.w	r3, r3, #15
 800986e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	b29b      	uxth	r3, r3
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	b29a      	uxth	r2, r3
 800987c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800987e:	4313      	orrs	r3, r2
 8009880:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009888:	60da      	str	r2, [r3, #12]
 800988a:	e0b9      	b.n	8009a00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009892:	e0b5      	b.n	8009a00 <UART_SetConfig+0xa94>
 8009894:	03d09000 	.word	0x03d09000
 8009898:	003d0900 	.word	0x003d0900
 800989c:	080115f0 	.word	0x080115f0
 80098a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80098a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	dc49      	bgt.n	8009940 <UART_SetConfig+0x9d4>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	db7c      	blt.n	80099aa <UART_SetConfig+0xa3e>
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d87a      	bhi.n	80099aa <UART_SetConfig+0xa3e>
 80098b4:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <UART_SetConfig+0x950>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	08009947 	.word	0x08009947
 80098c0:	0800994f 	.word	0x0800994f
 80098c4:	080099ab 	.word	0x080099ab
 80098c8:	080099ab 	.word	0x080099ab
 80098cc:	08009957 	.word	0x08009957
 80098d0:	080099ab 	.word	0x080099ab
 80098d4:	080099ab 	.word	0x080099ab
 80098d8:	080099ab 	.word	0x080099ab
 80098dc:	08009967 	.word	0x08009967
 80098e0:	080099ab 	.word	0x080099ab
 80098e4:	080099ab 	.word	0x080099ab
 80098e8:	080099ab 	.word	0x080099ab
 80098ec:	080099ab 	.word	0x080099ab
 80098f0:	080099ab 	.word	0x080099ab
 80098f4:	080099ab 	.word	0x080099ab
 80098f8:	080099ab 	.word	0x080099ab
 80098fc:	08009977 	.word	0x08009977
 8009900:	080099ab 	.word	0x080099ab
 8009904:	080099ab 	.word	0x080099ab
 8009908:	080099ab 	.word	0x080099ab
 800990c:	080099ab 	.word	0x080099ab
 8009910:	080099ab 	.word	0x080099ab
 8009914:	080099ab 	.word	0x080099ab
 8009918:	080099ab 	.word	0x080099ab
 800991c:	080099ab 	.word	0x080099ab
 8009920:	080099ab 	.word	0x080099ab
 8009924:	080099ab 	.word	0x080099ab
 8009928:	080099ab 	.word	0x080099ab
 800992c:	080099ab 	.word	0x080099ab
 8009930:	080099ab 	.word	0x080099ab
 8009934:	080099ab 	.word	0x080099ab
 8009938:	080099ab 	.word	0x080099ab
 800993c:	0800999d 	.word	0x0800999d
 8009940:	2b40      	cmp	r3, #64	@ 0x40
 8009942:	d02e      	beq.n	80099a2 <UART_SetConfig+0xa36>
 8009944:	e031      	b.n	80099aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009946:	f7fb fe6f 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 800994a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800994c:	e033      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800994e:	f7fb fe81 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8009952:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009954:	e02f      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800995a:	4618      	mov	r0, r3
 800995c:	f7fd f8f2 	bl	8006b44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009964:	e027      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009966:	f107 0318 	add.w	r3, r7, #24
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd fa3e 	bl	8006dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e01f      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009976:	4b2d      	ldr	r3, [pc, #180]	@ (8009a2c <UART_SetConfig+0xac0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009982:	4b2a      	ldr	r3, [pc, #168]	@ (8009a2c <UART_SetConfig+0xac0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	08db      	lsrs	r3, r3, #3
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	4a28      	ldr	r2, [pc, #160]	@ (8009a30 <UART_SetConfig+0xac4>)
 800998e:	fa22 f303 	lsr.w	r3, r2, r3
 8009992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009994:	e00f      	b.n	80099b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009996:	4b26      	ldr	r3, [pc, #152]	@ (8009a30 <UART_SetConfig+0xac4>)
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800999a:	e00c      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800999c:	4b25      	ldr	r3, [pc, #148]	@ (8009a34 <UART_SetConfig+0xac8>)
 800999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a0:	e009      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a8:	e005      	b.n	80099b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80099b4:	bf00      	nop
    }

    if (pclk != 0U)
 80099b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d021      	beq.n	8009a00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a38 <UART_SetConfig+0xacc>)
 80099c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	fbb2 f3f3 	udiv	r3, r2, r3
 80099de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d909      	bls.n	80099fa <UART_SetConfig+0xa8e>
 80099e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ec:	d205      	bcs.n	80099fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60da      	str	r2, [r3, #12]
 80099f8:	e002      	b.n	8009a00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2200      	movs	r2, #0
 8009a14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a1c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3748      	adds	r7, #72	@ 0x48
 8009a24:	46bd      	mov	sp, r7
 8009a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a2a:	bf00      	nop
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	03d09000 	.word	0x03d09000
 8009a34:	003d0900 	.word	0x003d0900
 8009a38:	080115f0 	.word	0x080115f0

08009a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	f003 0308 	and.w	r3, r3, #8
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00a      	beq.n	8009a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00a      	beq.n	8009aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad0:	f003 0310 	and.w	r3, r3, #16
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00a      	beq.n	8009aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00a      	beq.n	8009b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01a      	beq.n	8009b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b3a:	d10a      	bne.n	8009b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b098      	sub	sp, #96	@ 0x60
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b90:	f7f7 ffb8 	bl	8001b04 <HAL_GetTick>
 8009b94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d12f      	bne.n	8009c04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bac:	2200      	movs	r2, #0
 8009bae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f88e 	bl	8009cd4 <UART_WaitOnFlagUntilTimeout>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d022      	beq.n	8009c04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009be4:	e841 2300 	strex	r3, r2, [r1]
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e6      	bne.n	8009bbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e063      	b.n	8009ccc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0304 	and.w	r3, r3, #4
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d149      	bne.n	8009ca6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f857 	bl	8009cd4 <UART_WaitOnFlagUntilTimeout>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d03c      	beq.n	8009ca6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	623b      	str	r3, [r7, #32]
   return(result);
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e6      	bne.n	8009c2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f023 0301 	bic.w	r3, r3, #1
 8009c74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c7e:	61fa      	str	r2, [r7, #28]
 8009c80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	69b9      	ldr	r1, [r7, #24]
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e5      	bne.n	8009c5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e012      	b.n	8009ccc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3758      	adds	r7, #88	@ 0x58
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	603b      	str	r3, [r7, #0]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce4:	e04f      	b.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d04b      	beq.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cee:	f7f7 ff09 	bl	8001b04 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d302      	bcc.n	8009d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e04e      	b.n	8009da6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d037      	beq.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2b80      	cmp	r3, #128	@ 0x80
 8009d1a:	d034      	beq.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b40      	cmp	r3, #64	@ 0x40
 8009d20:	d031      	beq.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d110      	bne.n	8009d52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2208      	movs	r2, #8
 8009d36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f839 	bl	8009db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2208      	movs	r2, #8
 8009d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e029      	b.n	8009da6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d60:	d111      	bne.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f81f 	bl	8009db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e00f      	b.n	8009da6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69da      	ldr	r2, [r3, #28]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4013      	ands	r3, r2
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	bf0c      	ite	eq
 8009d96:	2301      	moveq	r3, #1
 8009d98:	2300      	movne	r3, #0
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d0a0      	beq.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b095      	sub	sp, #84	@ 0x54
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e6      	bne.n	8009db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3308      	adds	r3, #8
 8009df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8009e78 <UART_EndRxTransfer+0xc8>)
 8009dfe:	4013      	ands	r3, r2
 8009e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3308      	adds	r3, #8
 8009e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e5      	bne.n	8009dea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d118      	bne.n	8009e58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f023 0310 	bic.w	r3, r3, #16
 8009e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	6979      	ldr	r1, [r7, #20]
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	613b      	str	r3, [r7, #16]
   return(result);
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e6      	bne.n	8009e26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2220      	movs	r2, #32
 8009e5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e6c:	bf00      	nop
 8009e6e:	3754      	adds	r7, #84	@ 0x54
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	effffffe 	.word	0xeffffffe

08009e7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f7ff f854 	bl	8008f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e98:	bf00      	nop
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	e853 3f00 	ldrex	r3, [r3]
 8009eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ebc:	61fb      	str	r3, [r7, #28]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	61bb      	str	r3, [r7, #24]
 8009ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	6979      	ldr	r1, [r7, #20]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e6      	bne.n	8009ea8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff f81f 	bl	8008f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eee:	bf00      	nop
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f12:	bf00      	nop
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e027      	b.n	8009f98 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2224      	movs	r2, #36	@ 0x24
 8009f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0201 	bic.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d101      	bne.n	8009fbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e02d      	b.n	800a018 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2224      	movs	r2, #36	@ 0x24
 8009fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0201 	bic.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f84f 	bl	800a09c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a030:	2b01      	cmp	r3, #1
 800a032:	d101      	bne.n	800a038 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a034:	2302      	movs	r3, #2
 800a036:	e02d      	b.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2224      	movs	r2, #36	@ 0x24
 800a044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f022 0201 	bic.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f811 	bl	800a09c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d108      	bne.n	800a0be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0bc:	e031      	b.n	800a122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0be:	2310      	movs	r3, #16
 800a0c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0c2:	2310      	movs	r3, #16
 800a0c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	0e5b      	lsrs	r3, r3, #25
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	f003 0307 	and.w	r3, r3, #7
 800a0d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	0f5b      	lsrs	r3, r3, #29
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 0307 	and.w	r3, r3, #7
 800a0e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	7b3a      	ldrb	r2, [r7, #12]
 800a0ea:	4911      	ldr	r1, [pc, #68]	@ (800a130 <UARTEx_SetNbDataToProcess+0x94>)
 800a0ec:	5c8a      	ldrb	r2, [r1, r2]
 800a0ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0f2:	7b3a      	ldrb	r2, [r7, #12]
 800a0f4:	490f      	ldr	r1, [pc, #60]	@ (800a134 <UARTEx_SetNbDataToProcess+0x98>)
 800a0f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	7b7a      	ldrb	r2, [r7, #13]
 800a108:	4909      	ldr	r1, [pc, #36]	@ (800a130 <UARTEx_SetNbDataToProcess+0x94>)
 800a10a:	5c8a      	ldrb	r2, [r1, r2]
 800a10c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a110:	7b7a      	ldrb	r2, [r7, #13]
 800a112:	4908      	ldr	r1, [pc, #32]	@ (800a134 <UARTEx_SetNbDataToProcess+0x98>)
 800a114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a116:	fb93 f3f2 	sdiv	r3, r3, r2
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	08011608 	.word	0x08011608
 800a134:	08011610 	.word	0x08011610

0800a138 <__NVIC_SetPriority>:
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	6039      	str	r1, [r7, #0]
 800a142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	db0a      	blt.n	800a162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	490c      	ldr	r1, [pc, #48]	@ (800a184 <__NVIC_SetPriority+0x4c>)
 800a152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a156:	0112      	lsls	r2, r2, #4
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	440b      	add	r3, r1
 800a15c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a160:	e00a      	b.n	800a178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	b2da      	uxtb	r2, r3
 800a166:	4908      	ldr	r1, [pc, #32]	@ (800a188 <__NVIC_SetPriority+0x50>)
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	3b04      	subs	r3, #4
 800a170:	0112      	lsls	r2, r2, #4
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	440b      	add	r3, r1
 800a176:	761a      	strb	r2, [r3, #24]
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	e000e100 	.word	0xe000e100
 800a188:	e000ed00 	.word	0xe000ed00

0800a18c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a190:	4b05      	ldr	r3, [pc, #20]	@ (800a1a8 <SysTick_Handler+0x1c>)
 800a192:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a194:	f001 fe26 	bl	800bde4 <xTaskGetSchedulerState>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d001      	beq.n	800a1a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a19e:	f002 fc1b 	bl	800c9d8 <xPortSysTickHandler>
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	e000e010 	.word	0xe000e010

0800a1ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	f06f 0004 	mvn.w	r0, #4
 800a1b6:	f7ff ffbf 	bl	800a138 <__NVIC_SetPriority>
#endif
}
 800a1ba:	bf00      	nop
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c6:	f3ef 8305 	mrs	r3, IPSR
 800a1ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a1cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1d2:	f06f 0305 	mvn.w	r3, #5
 800a1d6:	607b      	str	r3, [r7, #4]
 800a1d8:	e00c      	b.n	800a1f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1da:	4b0a      	ldr	r3, [pc, #40]	@ (800a204 <osKernelInitialize+0x44>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d105      	bne.n	800a1ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1e2:	4b08      	ldr	r3, [pc, #32]	@ (800a204 <osKernelInitialize+0x44>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	e002      	b.n	800a1f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1f4:	687b      	ldr	r3, [r7, #4]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	24000468 	.word	0x24000468

0800a208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a20e:	f3ef 8305 	mrs	r3, IPSR
 800a212:	603b      	str	r3, [r7, #0]
  return(result);
 800a214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a21a:	f06f 0305 	mvn.w	r3, #5
 800a21e:	607b      	str	r3, [r7, #4]
 800a220:	e010      	b.n	800a244 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <osKernelStart+0x48>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d109      	bne.n	800a23e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a22a:	f7ff ffbf 	bl	800a1ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a22e:	4b08      	ldr	r3, [pc, #32]	@ (800a250 <osKernelStart+0x48>)
 800a230:	2202      	movs	r2, #2
 800a232:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a234:	f001 f988 	bl	800b548 <vTaskStartScheduler>
      stat = osOK;
 800a238:	2300      	movs	r3, #0
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e002      	b.n	800a244 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a23e:	f04f 33ff 	mov.w	r3, #4294967295
 800a242:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a244:	687b      	ldr	r3, [r7, #4]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	24000468 	.word	0x24000468

0800a254 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a254:	b580      	push	{r7, lr}
 800a256:	b08e      	sub	sp, #56	@ 0x38
 800a258:	af04      	add	r7, sp, #16
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a264:	f3ef 8305 	mrs	r3, IPSR
 800a268:	617b      	str	r3, [r7, #20]
  return(result);
 800a26a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d17e      	bne.n	800a36e <osThreadNew+0x11a>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d07b      	beq.n	800a36e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a276:	2380      	movs	r3, #128	@ 0x80
 800a278:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a27a:	2318      	movs	r3, #24
 800a27c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a282:	f04f 33ff 	mov.w	r3, #4294967295
 800a286:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d045      	beq.n	800a31a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <osThreadNew+0x48>
        name = attr->name;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d008      	beq.n	800a2c2 <osThreadNew+0x6e>
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	2b38      	cmp	r3, #56	@ 0x38
 800a2b4:	d805      	bhi.n	800a2c2 <osThreadNew+0x6e>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <osThreadNew+0x72>
        return (NULL);
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e054      	b.n	800a370 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	089b      	lsrs	r3, r3, #2
 800a2d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00e      	beq.n	800a2fc <osThreadNew+0xa8>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	2b5b      	cmp	r3, #91	@ 0x5b
 800a2e4:	d90a      	bls.n	800a2fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d006      	beq.n	800a2fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <osThreadNew+0xa8>
        mem = 1;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	e010      	b.n	800a31e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10c      	bne.n	800a31e <osThreadNew+0xca>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <osThreadNew+0xca>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d104      	bne.n	800a31e <osThreadNew+0xca>
          mem = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	61bb      	str	r3, [r7, #24]
 800a318:	e001      	b.n	800a31e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d110      	bne.n	800a346 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a32c:	9202      	str	r2, [sp, #8]
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6a3a      	ldr	r2, [r7, #32]
 800a338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 ff28 	bl	800b190 <xTaskCreateStatic>
 800a340:	4603      	mov	r3, r0
 800a342:	613b      	str	r3, [r7, #16]
 800a344:	e013      	b.n	800a36e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d110      	bne.n	800a36e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	b29a      	uxth	r2, r3
 800a350:	f107 0310 	add.w	r3, r7, #16
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 ff76 	bl	800b250 <xTaskCreate>
 800a364:	4603      	mov	r3, r0
 800a366:	2b01      	cmp	r3, #1
 800a368:	d001      	beq.n	800a36e <osThreadNew+0x11a>
            hTask = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a36e:	693b      	ldr	r3, [r7, #16]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3728      	adds	r7, #40	@ 0x28
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a380:	f3ef 8305 	mrs	r3, IPSR
 800a384:	60bb      	str	r3, [r7, #8]
  return(result);
 800a386:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <osDelay+0x1c>
    stat = osErrorISR;
 800a38c:	f06f 0305 	mvn.w	r3, #5
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e007      	b.n	800a3a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 f89c 	bl	800b4dc <vTaskDelay>
    }
  }

  return (stat);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b08a      	sub	sp, #40	@ 0x28
 800a3b2:	af02      	add	r7, sp, #8
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3be:	f3ef 8305 	mrs	r3, IPSR
 800a3c2:	613b      	str	r3, [r7, #16]
  return(result);
 800a3c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d15f      	bne.n	800a48a <osMessageQueueNew+0xdc>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d05c      	beq.n	800a48a <osMessageQueueNew+0xdc>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d059      	beq.n	800a48a <osMessageQueueNew+0xdc>
    mem = -1;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d029      	beq.n	800a436 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <osMessageQueueNew+0x62>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	2b4f      	cmp	r3, #79	@ 0x4f
 800a3f0:	d90e      	bls.n	800a410 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695a      	ldr	r2, [r3, #20]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <osMessageQueueNew+0x62>
        mem = 1;
 800a40a:	2301      	movs	r3, #1
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	e014      	b.n	800a43a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d110      	bne.n	800a43a <osMessageQueueNew+0x8c>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10c      	bne.n	800a43a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a424:	2b00      	cmp	r3, #0
 800a426:	d108      	bne.n	800a43a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d104      	bne.n	800a43a <osMessageQueueNew+0x8c>
          mem = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	61bb      	str	r3, [r7, #24]
 800a434:	e001      	b.n	800a43a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d10b      	bne.n	800a458 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	691a      	ldr	r2, [r3, #16]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	2100      	movs	r1, #0
 800a44a:	9100      	str	r1, [sp, #0]
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 f9d2 	bl	800a7f8 <xQueueGenericCreateStatic>
 800a454:	61f8      	str	r0, [r7, #28]
 800a456:	e008      	b.n	800a46a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d105      	bne.n	800a46a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a45e:	2200      	movs	r2, #0
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fa45 	bl	800a8f2 <xQueueGenericCreate>
 800a468:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00c      	beq.n	800a48a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <osMessageQueueNew+0xd0>
        name = attr->name;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	e001      	b.n	800a482 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a482:	6979      	ldr	r1, [r7, #20]
 800a484:	69f8      	ldr	r0, [r7, #28]
 800a486:	f000 fe25 	bl	800b0d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a48a:	69fb      	ldr	r3, [r7, #28]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4ac:	f3ef 8305 	mrs	r3, IPSR
 800a4b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a4b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d028      	beq.n	800a50a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <osMessageQueuePut+0x36>
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <osMessageQueuePut+0x36>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a4ca:	f06f 0303 	mvn.w	r3, #3
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	e038      	b.n	800a544 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a4d6:	f107 0210 	add.w	r2, r7, #16
 800a4da:	2300      	movs	r3, #0
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	69b8      	ldr	r0, [r7, #24]
 800a4e0:	f000 fb68 	bl	800abb4 <xQueueGenericSendFromISR>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d003      	beq.n	800a4f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a4ea:	f06f 0302 	mvn.w	r3, #2
 800a4ee:	61fb      	str	r3, [r7, #28]
 800a4f0:	e028      	b.n	800a544 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d025      	beq.n	800a544 <osMessageQueuePut+0xb0>
 800a4f8:	4b15      	ldr	r3, [pc, #84]	@ (800a550 <osMessageQueuePut+0xbc>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	e01c      	b.n	800a544 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <osMessageQueuePut+0x82>
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d103      	bne.n	800a51e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a516:	f06f 0303 	mvn.w	r3, #3
 800a51a:	61fb      	str	r3, [r7, #28]
 800a51c:	e012      	b.n	800a544 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a51e:	2300      	movs	r3, #0
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	69b8      	ldr	r0, [r7, #24]
 800a526:	f000 fa43 	bl	800a9b0 <xQueueGenericSend>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d009      	beq.n	800a544 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a536:	f06f 0301 	mvn.w	r3, #1
 800a53a:	61fb      	str	r3, [r7, #28]
 800a53c:	e002      	b.n	800a544 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a53e:	f06f 0302 	mvn.w	r3, #2
 800a542:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a544:	69fb      	ldr	r3, [r7, #28]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3720      	adds	r7, #32
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4a07      	ldr	r2, [pc, #28]	@ (800a580 <vApplicationGetIdleTaskMemory+0x2c>)
 800a564:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	4a06      	ldr	r2, [pc, #24]	@ (800a584 <vApplicationGetIdleTaskMemory+0x30>)
 800a56a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2280      	movs	r2, #128	@ 0x80
 800a570:	601a      	str	r2, [r3, #0]
}
 800a572:	bf00      	nop
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	2400046c 	.word	0x2400046c
 800a584:	240004c8 	.word	0x240004c8

0800a588 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4a07      	ldr	r2, [pc, #28]	@ (800a5b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a598:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4a06      	ldr	r2, [pc, #24]	@ (800a5b8 <vApplicationGetTimerTaskMemory+0x30>)
 800a59e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5a6:	601a      	str	r2, [r3, #0]
}
 800a5a8:	bf00      	nop
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	240006c8 	.word	0x240006c8
 800a5b8:	24000724 	.word	0x24000724

0800a5bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f103 0208 	add.w	r2, r3, #8
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f103 0208 	add.w	r2, r3, #8
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f103 0208 	add.w	r2, r3, #8
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	601a      	str	r2, [r3, #0]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d103      	bne.n	800a67e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e00c      	b.n	800a698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3308      	adds	r3, #8
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e002      	b.n	800a68c <vListInsert+0x2e>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	429a      	cmp	r2, r3
 800a696:	d2f6      	bcs.n	800a686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6892      	ldr	r2, [r2, #8]
 800a6e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6852      	ldr	r2, [r2, #4]
 800a6f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d103      	bne.n	800a704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689a      	ldr	r2, [r3, #8]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	1e5a      	subs	r2, r3, #1
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10b      	bne.n	800a750 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	e7fd      	b.n	800a74c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a750:	f002 f8b2 	bl	800c8b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a760:	fb01 f303 	mul.w	r3, r1, r3
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a780:	3b01      	subs	r3, #1
 800a782:	68f9      	ldr	r1, [r7, #12]
 800a784:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a786:	fb01 f303 	mul.w	r3, r1, r3
 800a78a:	441a      	add	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	22ff      	movs	r2, #255	@ 0xff
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	22ff      	movs	r2, #255	@ 0xff
 800a79c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d114      	bne.n	800a7d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d01a      	beq.n	800a7e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3310      	adds	r3, #16
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 f956 	bl	800ba64 <xTaskRemoveFromEventList>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d012      	beq.n	800a7e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7be:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <xQueueGenericReset+0xd0>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	e009      	b.n	800a7e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3310      	adds	r3, #16
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fef1 	bl	800a5bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3324      	adds	r3, #36	@ 0x24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff feec 	bl	800a5bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7e4:	f002 f89a 	bl	800c91c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7e8:	2301      	movs	r3, #1
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	e000ed04 	.word	0xe000ed04

0800a7f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08e      	sub	sp, #56	@ 0x38
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10b      	bne.n	800a824 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a81e:	bf00      	nop
 800a820:	bf00      	nop
 800a822:	e7fd      	b.n	800a820 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <xQueueGenericCreateStatic+0x56>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <xQueueGenericCreateStatic+0x5a>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueGenericCreateStatic+0x5c>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10b      	bne.n	800a870 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	623b      	str	r3, [r7, #32]
}
 800a86a:	bf00      	nop
 800a86c:	bf00      	nop
 800a86e:	e7fd      	b.n	800a86c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <xQueueGenericCreateStatic+0x84>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <xQueueGenericCreateStatic+0x88>
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <xQueueGenericCreateStatic+0x8a>
 800a880:	2300      	movs	r3, #0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10b      	bne.n	800a89e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	61fb      	str	r3, [r7, #28]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a89e:	2350      	movs	r3, #80	@ 0x50
 800a8a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b50      	cmp	r3, #80	@ 0x50
 800a8a6:	d00b      	beq.n	800a8c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	61bb      	str	r3, [r7, #24]
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	e7fd      	b.n	800a8bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00d      	beq.n	800a8e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f840 	bl	800a968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3730      	adds	r7, #48	@ 0x30
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b08a      	sub	sp, #40	@ 0x28
 800a8f6:	af02      	add	r7, sp, #8
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10b      	bne.n	800a91e <xQueueGenericCreate+0x2c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	613b      	str	r3, [r7, #16]
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	3350      	adds	r3, #80	@ 0x50
 800a92c:	4618      	mov	r0, r3
 800a92e:	f002 f8e5 	bl	800cafc <pvPortMalloc>
 800a932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d011      	beq.n	800a95e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	3350      	adds	r3, #80	@ 0x50
 800a942:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a94c:	79fa      	ldrb	r2, [r7, #7]
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	4613      	mov	r3, r2
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 f805 	bl	800a968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a95e:	69bb      	ldr	r3, [r7, #24]
	}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e002      	b.n	800a98a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a996:	2101      	movs	r1, #1
 800a998:	69b8      	ldr	r0, [r7, #24]
 800a99a:	f7ff fec3 	bl	800a724 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08e      	sub	sp, #56	@ 0x38
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10b      	bne.n	800a9e4 <xQueueGenericSend+0x34>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a9de:	bf00      	nop
 800a9e0:	bf00      	nop
 800a9e2:	e7fd      	b.n	800a9e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <xQueueGenericSend+0x42>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <xQueueGenericSend+0x46>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <xQueueGenericSend+0x48>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10b      	bne.n	800aa14 <xQueueGenericSend+0x64>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa0e:	bf00      	nop
 800aa10:	bf00      	nop
 800aa12:	e7fd      	b.n	800aa10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d103      	bne.n	800aa22 <xQueueGenericSend+0x72>
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d101      	bne.n	800aa26 <xQueueGenericSend+0x76>
 800aa22:	2301      	movs	r3, #1
 800aa24:	e000      	b.n	800aa28 <xQueueGenericSend+0x78>
 800aa26:	2300      	movs	r3, #0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10b      	bne.n	800aa44 <xQueueGenericSend+0x94>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	623b      	str	r3, [r7, #32]
}
 800aa3e:	bf00      	nop
 800aa40:	bf00      	nop
 800aa42:	e7fd      	b.n	800aa40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa44:	f001 f9ce 	bl	800bde4 <xTaskGetSchedulerState>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <xQueueGenericSend+0xa4>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <xQueueGenericSend+0xa8>
 800aa54:	2301      	movs	r3, #1
 800aa56:	e000      	b.n	800aa5a <xQueueGenericSend+0xaa>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10b      	bne.n	800aa76 <xQueueGenericSend+0xc6>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	61fb      	str	r3, [r7, #28]
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa76:	f001 ff1f 	bl	800c8b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d302      	bcc.n	800aa8c <xQueueGenericSend+0xdc>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d129      	bne.n	800aae0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa92:	f000 fa0f 	bl	800aeb4 <prvCopyDataToQueue>
 800aa96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d010      	beq.n	800aac2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa2:	3324      	adds	r3, #36	@ 0x24
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 ffdd 	bl	800ba64 <xTaskRemoveFromEventList>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d013      	beq.n	800aad8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aab0:	4b3f      	ldr	r3, [pc, #252]	@ (800abb0 <xQueueGenericSend+0x200>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	e00a      	b.n	800aad8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d007      	beq.n	800aad8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aac8:	4b39      	ldr	r3, [pc, #228]	@ (800abb0 <xQueueGenericSend+0x200>)
 800aaca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aad8:	f001 ff20 	bl	800c91c <vPortExitCritical>
				return pdPASS;
 800aadc:	2301      	movs	r3, #1
 800aade:	e063      	b.n	800aba8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aae6:	f001 ff19 	bl	800c91c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e05c      	b.n	800aba8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d106      	bne.n	800ab02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f001 f817 	bl	800bb2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aafe:	2301      	movs	r3, #1
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab02:	f001 ff0b 	bl	800c91c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab06:	f000 fd87 	bl	800b618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab0a:	f001 fed5 	bl	800c8b8 <vPortEnterCritical>
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab14:	b25b      	sxtb	r3, r3
 800ab16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1a:	d103      	bne.n	800ab24 <xQueueGenericSend+0x174>
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab2a:	b25b      	sxtb	r3, r3
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d103      	bne.n	800ab3a <xQueueGenericSend+0x18a>
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab3a:	f001 feef 	bl	800c91c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab3e:	1d3a      	adds	r2, r7, #4
 800ab40:	f107 0314 	add.w	r3, r7, #20
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 f806 	bl	800bb58 <xTaskCheckForTimeOut>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d124      	bne.n	800ab9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab54:	f000 faa6 	bl	800b0a4 <prvIsQueueFull>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d018      	beq.n	800ab90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	3310      	adds	r3, #16
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4611      	mov	r1, r2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 ff2a 	bl	800b9c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab6e:	f000 fa31 	bl	800afd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab72:	f000 fd5f 	bl	800b634 <xTaskResumeAll>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f47f af7c 	bne.w	800aa76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ab7e:	4b0c      	ldr	r3, [pc, #48]	@ (800abb0 <xQueueGenericSend+0x200>)
 800ab80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	e772      	b.n	800aa76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab92:	f000 fa1f 	bl	800afd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab96:	f000 fd4d 	bl	800b634 <xTaskResumeAll>
 800ab9a:	e76c      	b.n	800aa76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab9e:	f000 fa19 	bl	800afd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aba2:	f000 fd47 	bl	800b634 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3738      	adds	r7, #56	@ 0x38
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	e000ed04 	.word	0xe000ed04

0800abb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b090      	sub	sp, #64	@ 0x40
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10b      	bne.n	800abe4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	e7fd      	b.n	800abe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d103      	bne.n	800abf2 <xQueueGenericSendFromISR+0x3e>
 800abea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <xQueueGenericSendFromISR+0x42>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e000      	b.n	800abf8 <xQueueGenericSendFromISR+0x44>
 800abf6:	2300      	movs	r3, #0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10b      	bne.n	800ac14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	e7fd      	b.n	800ac10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d103      	bne.n	800ac22 <xQueueGenericSendFromISR+0x6e>
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d101      	bne.n	800ac26 <xQueueGenericSendFromISR+0x72>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <xQueueGenericSendFromISR+0x74>
 800ac26:	2300      	movs	r3, #0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10b      	bne.n	800ac44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	623b      	str	r3, [r7, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	e7fd      	b.n	800ac40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac44:	f001 ff18 	bl	800ca78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac48:	f3ef 8211 	mrs	r2, BASEPRI
 800ac4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	61fa      	str	r2, [r7, #28]
 800ac5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d302      	bcc.n	800ac76 <xQueueGenericSendFromISR+0xc2>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d12f      	bne.n	800acd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	68b9      	ldr	r1, [r7, #8]
 800ac8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac8c:	f000 f912 	bl	800aeb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac98:	d112      	bne.n	800acc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d016      	beq.n	800acd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca4:	3324      	adds	r3, #36	@ 0x24
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fedc 	bl	800ba64 <xTaskRemoveFromEventList>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00e      	beq.n	800acd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00b      	beq.n	800acd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e007      	b.n	800acd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800acc4:	3301      	adds	r3, #1
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	b25a      	sxtb	r2, r3
 800acca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800accc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800acd0:	2301      	movs	r3, #1
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800acd4:	e001      	b.n	800acda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ace4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ace6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3740      	adds	r7, #64	@ 0x40
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08c      	sub	sp, #48	@ 0x30
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800acfc:	2300      	movs	r3, #0
 800acfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10b      	bne.n	800ad22 <xQueueReceive+0x32>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	623b      	str	r3, [r7, #32]
}
 800ad1c:	bf00      	nop
 800ad1e:	bf00      	nop
 800ad20:	e7fd      	b.n	800ad1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <xQueueReceive+0x40>
 800ad28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <xQueueReceive+0x44>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e000      	b.n	800ad36 <xQueueReceive+0x46>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10b      	bne.n	800ad52 <xQueueReceive+0x62>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	61fb      	str	r3, [r7, #28]
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	e7fd      	b.n	800ad4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad52:	f001 f847 	bl	800bde4 <xTaskGetSchedulerState>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <xQueueReceive+0x72>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <xQueueReceive+0x76>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueReceive+0x78>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10b      	bne.n	800ad84 <xQueueReceive+0x94>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61bb      	str	r3, [r7, #24]
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	e7fd      	b.n	800ad80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad84:	f001 fd98 	bl	800c8b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d01f      	beq.n	800add4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad98:	f000 f8f6 	bl	800af88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9e:	1e5a      	subs	r2, r3, #1
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00f      	beq.n	800adcc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	3310      	adds	r3, #16
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fe57 	bl	800ba64 <xTaskRemoveFromEventList>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d007      	beq.n	800adcc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adbc:	4b3c      	ldr	r3, [pc, #240]	@ (800aeb0 <xQueueReceive+0x1c0>)
 800adbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adcc:	f001 fda6 	bl	800c91c <vPortExitCritical>
				return pdPASS;
 800add0:	2301      	movs	r3, #1
 800add2:	e069      	b.n	800aea8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d103      	bne.n	800ade2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adda:	f001 fd9f 	bl	800c91c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adde:	2300      	movs	r3, #0
 800ade0:	e062      	b.n	800aea8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ade2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d106      	bne.n	800adf6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ade8:	f107 0310 	add.w	r3, r7, #16
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fe9d 	bl	800bb2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adf2:	2301      	movs	r3, #1
 800adf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adf6:	f001 fd91 	bl	800c91c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adfa:	f000 fc0d 	bl	800b618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adfe:	f001 fd5b 	bl	800c8b8 <vPortEnterCritical>
 800ae02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae08:	b25b      	sxtb	r3, r3
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0e:	d103      	bne.n	800ae18 <xQueueReceive+0x128>
 800ae10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae1e:	b25b      	sxtb	r3, r3
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae24:	d103      	bne.n	800ae2e <xQueueReceive+0x13e>
 800ae26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae2e:	f001 fd75 	bl	800c91c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae32:	1d3a      	adds	r2, r7, #4
 800ae34:	f107 0310 	add.w	r3, r7, #16
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fe8c 	bl	800bb58 <xTaskCheckForTimeOut>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d123      	bne.n	800ae8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae48:	f000 f916 	bl	800b078 <prvIsQueueEmpty>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d017      	beq.n	800ae82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae54:	3324      	adds	r3, #36	@ 0x24
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fdb0 	bl	800b9c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae62:	f000 f8b7 	bl	800afd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae66:	f000 fbe5 	bl	800b634 <xTaskResumeAll>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d189      	bne.n	800ad84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae70:	4b0f      	ldr	r3, [pc, #60]	@ (800aeb0 <xQueueReceive+0x1c0>)
 800ae72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	e780      	b.n	800ad84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae84:	f000 f8a6 	bl	800afd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae88:	f000 fbd4 	bl	800b634 <xTaskResumeAll>
 800ae8c:	e77a      	b.n	800ad84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae90:	f000 f8a0 	bl	800afd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae94:	f000 fbce 	bl	800b634 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae9a:	f000 f8ed 	bl	800b078 <prvIsQueueEmpty>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f43f af6f 	beq.w	800ad84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aea6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3730      	adds	r7, #48	@ 0x30
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10d      	bne.n	800aeee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d14d      	bne.n	800af76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 ff9e 	bl	800be20 <xTaskPriorityDisinherit>
 800aee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	609a      	str	r2, [r3, #8]
 800aeec:	e043      	b.n	800af76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d119      	bne.n	800af28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6858      	ldr	r0, [r3, #4]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefc:	461a      	mov	r2, r3
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	f003 ff81 	bl	800ee06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af0c:	441a      	add	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d32b      	bcc.n	800af76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	e026      	b.n	800af76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	68d8      	ldr	r0, [r3, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af30:	461a      	mov	r2, r3
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	f003 ff67 	bl	800ee06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af40:	425b      	negs	r3, r3
 800af42:	441a      	add	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d207      	bcs.n	800af64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	689a      	ldr	r2, [r3, #8]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5c:	425b      	negs	r3, r3
 800af5e:	441a      	add	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b02      	cmp	r3, #2
 800af68:	d105      	bne.n	800af76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	3b01      	subs	r3, #1
 800af74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af7e:	697b      	ldr	r3, [r7, #20]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d018      	beq.n	800afcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68da      	ldr	r2, [r3, #12]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa2:	441a      	add	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d303      	bcc.n	800afbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68d9      	ldr	r1, [r3, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc4:	461a      	mov	r2, r3
 800afc6:	6838      	ldr	r0, [r7, #0]
 800afc8:	f003 ff1d 	bl	800ee06 <memcpy>
	}
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afdc:	f001 fc6c 	bl	800c8b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afe8:	e011      	b.n	800b00e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d012      	beq.n	800b018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3324      	adds	r3, #36	@ 0x24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fd34 	bl	800ba64 <xTaskRemoveFromEventList>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b002:	f000 fe0d 	bl	800bc20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	3b01      	subs	r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b012:	2b00      	cmp	r3, #0
 800b014:	dce9      	bgt.n	800afea <prvUnlockQueue+0x16>
 800b016:	e000      	b.n	800b01a <prvUnlockQueue+0x46>
					break;
 800b018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	22ff      	movs	r2, #255	@ 0xff
 800b01e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b022:	f001 fc7b 	bl	800c91c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b026:	f001 fc47 	bl	800c8b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b032:	e011      	b.n	800b058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d012      	beq.n	800b062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3310      	adds	r3, #16
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fd0f 	bl	800ba64 <xTaskRemoveFromEventList>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b04c:	f000 fde8 	bl	800bc20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	3b01      	subs	r3, #1
 800b054:	b2db      	uxtb	r3, r3
 800b056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dce9      	bgt.n	800b034 <prvUnlockQueue+0x60>
 800b060:	e000      	b.n	800b064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	22ff      	movs	r2, #255	@ 0xff
 800b068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b06c:	f001 fc56 	bl	800c91c <vPortExitCritical>
}
 800b070:	bf00      	nop
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b080:	f001 fc1a 	bl	800c8b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e001      	b.n	800b096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b096:	f001 fc41 	bl	800c91c <vPortExitCritical>

	return xReturn;
 800b09a:	68fb      	ldr	r3, [r7, #12]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0ac:	f001 fc04 	bl	800c8b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d102      	bne.n	800b0c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e001      	b.n	800b0c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c6:	f001 fc29 	bl	800c91c <vPortExitCritical>

	return xReturn;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e014      	b.n	800b10e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b124 <vQueueAddToRegistry+0x50>)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10b      	bne.n	800b108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0f0:	490c      	ldr	r1, [pc, #48]	@ (800b124 <vQueueAddToRegistry+0x50>)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0fa:	4a0a      	ldr	r2, [pc, #40]	@ (800b124 <vQueueAddToRegistry+0x50>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	4413      	add	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b106:	e006      	b.n	800b116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3301      	adds	r3, #1
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b07      	cmp	r3, #7
 800b112:	d9e7      	bls.n	800b0e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	24000b24 	.word	0x24000b24

0800b128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b138:	f001 fbbe 	bl	800c8b8 <vPortEnterCritical>
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b142:	b25b      	sxtb	r3, r3
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b148:	d103      	bne.n	800b152 <vQueueWaitForMessageRestricted+0x2a>
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b158:	b25b      	sxtb	r3, r3
 800b15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15e:	d103      	bne.n	800b168 <vQueueWaitForMessageRestricted+0x40>
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b168:	f001 fbd8 	bl	800c91c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b170:	2b00      	cmp	r3, #0
 800b172:	d106      	bne.n	800b182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	3324      	adds	r3, #36	@ 0x24
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	68b9      	ldr	r1, [r7, #8]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fc45 	bl	800ba0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b182:	6978      	ldr	r0, [r7, #20]
 800b184:	f7ff ff26 	bl	800afd4 <prvUnlockQueue>
	}
 800b188:	bf00      	nop
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08e      	sub	sp, #56	@ 0x38
 800b194:	af04      	add	r7, sp, #16
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <xTaskCreateStatic+0x2c>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	bf00      	nop
 800b1ba:	e7fd      	b.n	800b1b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10b      	bne.n	800b1da <xTaskCreateStatic+0x4a>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	61fb      	str	r3, [r7, #28]
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop
 800b1d8:	e7fd      	b.n	800b1d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1da:	235c      	movs	r3, #92	@ 0x5c
 800b1dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1e2:	d00b      	beq.n	800b1fc <xTaskCreateStatic+0x6c>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	61bb      	str	r3, [r7, #24]
}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	e7fd      	b.n	800b1f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01e      	beq.n	800b242 <xTaskCreateStatic+0xb2>
 800b204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01b      	beq.n	800b242 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b212:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b216:	2202      	movs	r2, #2
 800b218:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b21c:	2300      	movs	r3, #0
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f850 	bl	800b2da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b23a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b23c:	f000 f8de 	bl	800b3fc <prvAddNewTaskToReadyList>
 800b240:	e001      	b.n	800b246 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b246:	697b      	ldr	r3, [r7, #20]
	}
 800b248:	4618      	mov	r0, r3
 800b24a:	3728      	adds	r7, #40	@ 0x28
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08c      	sub	sp, #48	@ 0x30
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	4613      	mov	r3, r2
 800b25e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4618      	mov	r0, r3
 800b266:	f001 fc49 	bl	800cafc <pvPortMalloc>
 800b26a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b272:	205c      	movs	r0, #92	@ 0x5c
 800b274:	f001 fc42 	bl	800cafc <pvPortMalloc>
 800b278:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	631a      	str	r2, [r3, #48]	@ 0x30
 800b286:	e005      	b.n	800b294 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b288:	6978      	ldr	r0, [r7, #20]
 800b28a:	f001 fd05 	bl	800cc98 <vPortFree>
 800b28e:	e001      	b.n	800b294 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d017      	beq.n	800b2ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2a2:	88fa      	ldrh	r2, [r7, #6]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9303      	str	r3, [sp, #12]
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	9302      	str	r3, [sp, #8]
 800b2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 f80e 	bl	800b2da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2be:	69f8      	ldr	r0, [r7, #28]
 800b2c0:	f000 f89c 	bl	800b3fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	e002      	b.n	800b2d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2d0:	69bb      	ldr	r3, [r7, #24]
	}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3720      	adds	r7, #32
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b088      	sub	sp, #32
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	21a5      	movs	r1, #165	@ 0xa5
 800b2f4:	f003 fce6 	bl	800ecc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b302:	440b      	add	r3, r1
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	f023 0307 	bic.w	r3, r3, #7
 800b310:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	f003 0307 	and.w	r3, r3, #7
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	617b      	str	r3, [r7, #20]
}
 800b32e:	bf00      	nop
 800b330:	bf00      	nop
 800b332:	e7fd      	b.n	800b330 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d01f      	beq.n	800b37a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b33a:	2300      	movs	r3, #0
 800b33c:	61fb      	str	r3, [r7, #28]
 800b33e:	e012      	b.n	800b366 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	4413      	add	r3, r2
 800b346:	7819      	ldrb	r1, [r3, #0]
 800b348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	3334      	adds	r3, #52	@ 0x34
 800b350:	460a      	mov	r2, r1
 800b352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	4413      	add	r3, r2
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d006      	beq.n	800b36e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	3301      	adds	r3, #1
 800b364:	61fb      	str	r3, [r7, #28]
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	2b0f      	cmp	r3, #15
 800b36a:	d9e9      	bls.n	800b340 <prvInitialiseNewTask+0x66>
 800b36c:	e000      	b.n	800b370 <prvInitialiseNewTask+0x96>
			{
				break;
 800b36e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b378:	e003      	b.n	800b382 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b384:	2b37      	cmp	r3, #55	@ 0x37
 800b386:	d901      	bls.n	800b38c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b388:	2337      	movs	r3, #55	@ 0x37
 800b38a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b390:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b396:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff f92a 	bl	800a5fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3aa:	3318      	adds	r3, #24
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff f925 	bl	800a5fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	68f9      	ldr	r1, [r7, #12]
 800b3da:	69b8      	ldr	r0, [r7, #24]
 800b3dc:	f001 f93e 	bl	800c65c <pxPortInitialiseStack>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3f2:	bf00      	nop
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b404:	f001 fa58 	bl	800c8b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b408:	4b2d      	ldr	r3, [pc, #180]	@ (800b4c0 <prvAddNewTaskToReadyList+0xc4>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	4a2c      	ldr	r2, [pc, #176]	@ (800b4c0 <prvAddNewTaskToReadyList+0xc4>)
 800b410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b412:	4b2c      	ldr	r3, [pc, #176]	@ (800b4c4 <prvAddNewTaskToReadyList+0xc8>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b41a:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c4 <prvAddNewTaskToReadyList+0xc8>)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b420:	4b27      	ldr	r3, [pc, #156]	@ (800b4c0 <prvAddNewTaskToReadyList+0xc4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d110      	bne.n	800b44a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b428:	f000 fc1e 	bl	800bc68 <prvInitialiseTaskLists>
 800b42c:	e00d      	b.n	800b44a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b42e:	4b26      	ldr	r3, [pc, #152]	@ (800b4c8 <prvAddNewTaskToReadyList+0xcc>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b436:	4b23      	ldr	r3, [pc, #140]	@ (800b4c4 <prvAddNewTaskToReadyList+0xc8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b440:	429a      	cmp	r2, r3
 800b442:	d802      	bhi.n	800b44a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b444:	4a1f      	ldr	r2, [pc, #124]	@ (800b4c4 <prvAddNewTaskToReadyList+0xc8>)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b44a:	4b20      	ldr	r3, [pc, #128]	@ (800b4cc <prvAddNewTaskToReadyList+0xd0>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	4a1e      	ldr	r2, [pc, #120]	@ (800b4cc <prvAddNewTaskToReadyList+0xd0>)
 800b452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b454:	4b1d      	ldr	r3, [pc, #116]	@ (800b4cc <prvAddNewTaskToReadyList+0xd0>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b460:	4b1b      	ldr	r3, [pc, #108]	@ (800b4d0 <prvAddNewTaskToReadyList+0xd4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d903      	bls.n	800b470 <prvAddNewTaskToReadyList+0x74>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46c:	4a18      	ldr	r2, [pc, #96]	@ (800b4d0 <prvAddNewTaskToReadyList+0xd4>)
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4a15      	ldr	r2, [pc, #84]	@ (800b4d4 <prvAddNewTaskToReadyList+0xd8>)
 800b47e:	441a      	add	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3304      	adds	r3, #4
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	f7ff f8c5 	bl	800a616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b48c:	f001 fa46 	bl	800c91c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b490:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c8 <prvAddNewTaskToReadyList+0xcc>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00e      	beq.n	800b4b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b498:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c4 <prvAddNewTaskToReadyList+0xc8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d207      	bcs.n	800b4b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <prvAddNewTaskToReadyList+0xdc>)
 800b4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	24001038 	.word	0x24001038
 800b4c4:	24000b64 	.word	0x24000b64
 800b4c8:	24001044 	.word	0x24001044
 800b4cc:	24001054 	.word	0x24001054
 800b4d0:	24001040 	.word	0x24001040
 800b4d4:	24000b68 	.word	0x24000b68
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d018      	beq.n	800b520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4ee:	4b14      	ldr	r3, [pc, #80]	@ (800b540 <vTaskDelay+0x64>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00b      	beq.n	800b50e <vTaskDelay+0x32>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60bb      	str	r3, [r7, #8]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b50e:	f000 f883 	bl	800b618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b512:	2100      	movs	r1, #0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fcf3 	bl	800bf00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b51a:	f000 f88b 	bl	800b634 <xTaskResumeAll>
 800b51e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d107      	bne.n	800b536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b526:	4b07      	ldr	r3, [pc, #28]	@ (800b544 <vTaskDelay+0x68>)
 800b528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	24001060 	.word	0x24001060
 800b544:	e000ed04 	.word	0xe000ed04

0800b548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08a      	sub	sp, #40	@ 0x28
 800b54c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b556:	463a      	mov	r2, r7
 800b558:	1d39      	adds	r1, r7, #4
 800b55a:	f107 0308 	add.w	r3, r7, #8
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fff8 	bl	800a554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	9202      	str	r2, [sp, #8]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	2300      	movs	r3, #0
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	2300      	movs	r3, #0
 800b574:	460a      	mov	r2, r1
 800b576:	4922      	ldr	r1, [pc, #136]	@ (800b600 <vTaskStartScheduler+0xb8>)
 800b578:	4822      	ldr	r0, [pc, #136]	@ (800b604 <vTaskStartScheduler+0xbc>)
 800b57a:	f7ff fe09 	bl	800b190 <xTaskCreateStatic>
 800b57e:	4603      	mov	r3, r0
 800b580:	4a21      	ldr	r2, [pc, #132]	@ (800b608 <vTaskStartScheduler+0xc0>)
 800b582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b584:	4b20      	ldr	r3, [pc, #128]	@ (800b608 <vTaskStartScheduler+0xc0>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b58c:	2301      	movs	r3, #1
 800b58e:	617b      	str	r3, [r7, #20]
 800b590:	e001      	b.n	800b596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d102      	bne.n	800b5a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b59c:	f000 fd04 	bl	800bfa8 <xTimerCreateTimerTask>
 800b5a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d116      	bne.n	800b5d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	613b      	str	r3, [r7, #16]
}
 800b5ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5bc:	4b13      	ldr	r3, [pc, #76]	@ (800b60c <vTaskStartScheduler+0xc4>)
 800b5be:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5c4:	4b12      	ldr	r3, [pc, #72]	@ (800b610 <vTaskStartScheduler+0xc8>)
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5ca:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <vTaskStartScheduler+0xcc>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5d0:	f001 f8ce 	bl	800c770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5d4:	e00f      	b.n	800b5f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5dc:	d10b      	bne.n	800b5f6 <vTaskStartScheduler+0xae>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	e7fd      	b.n	800b5f2 <vTaskStartScheduler+0xaa>
}
 800b5f6:	bf00      	nop
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	0801153c 	.word	0x0801153c
 800b604:	0800bc39 	.word	0x0800bc39
 800b608:	2400105c 	.word	0x2400105c
 800b60c:	24001058 	.word	0x24001058
 800b610:	24001044 	.word	0x24001044
 800b614:	2400103c 	.word	0x2400103c

0800b618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b61c:	4b04      	ldr	r3, [pc, #16]	@ (800b630 <vTaskSuspendAll+0x18>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3301      	adds	r3, #1
 800b622:	4a03      	ldr	r2, [pc, #12]	@ (800b630 <vTaskSuspendAll+0x18>)
 800b624:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b626:	bf00      	nop
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	24001060 	.word	0x24001060

0800b634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b642:	4b42      	ldr	r3, [pc, #264]	@ (800b74c <xTaskResumeAll+0x118>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10b      	bne.n	800b662 <xTaskResumeAll+0x2e>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	603b      	str	r3, [r7, #0]
}
 800b65c:	bf00      	nop
 800b65e:	bf00      	nop
 800b660:	e7fd      	b.n	800b65e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b662:	f001 f929 	bl	800c8b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b666:	4b39      	ldr	r3, [pc, #228]	@ (800b74c <xTaskResumeAll+0x118>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4a37      	ldr	r2, [pc, #220]	@ (800b74c <xTaskResumeAll+0x118>)
 800b66e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b670:	4b36      	ldr	r3, [pc, #216]	@ (800b74c <xTaskResumeAll+0x118>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d162      	bne.n	800b73e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b678:	4b35      	ldr	r3, [pc, #212]	@ (800b750 <xTaskResumeAll+0x11c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d05e      	beq.n	800b73e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b680:	e02f      	b.n	800b6e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b682:	4b34      	ldr	r3, [pc, #208]	@ (800b754 <xTaskResumeAll+0x120>)
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3318      	adds	r3, #24
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff f81e 	bl	800a6d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3304      	adds	r3, #4
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff f819 	bl	800a6d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b758 <xTaskResumeAll+0x124>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d903      	bls.n	800b6b2 <xTaskResumeAll+0x7e>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b758 <xTaskResumeAll+0x124>)
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4a27      	ldr	r2, [pc, #156]	@ (800b75c <xTaskResumeAll+0x128>)
 800b6c0:	441a      	add	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	f7fe ffa4 	bl	800a616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d2:	4b23      	ldr	r3, [pc, #140]	@ (800b760 <xTaskResumeAll+0x12c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d302      	bcc.n	800b6e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b6dc:	4b21      	ldr	r3, [pc, #132]	@ (800b764 <xTaskResumeAll+0x130>)
 800b6de:	2201      	movs	r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6e2:	4b1c      	ldr	r3, [pc, #112]	@ (800b754 <xTaskResumeAll+0x120>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1cb      	bne.n	800b682 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6f0:	f000 fb58 	bl	800bda4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b768 <xTaskResumeAll+0x134>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d010      	beq.n	800b722 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b700:	f000 f846 	bl	800b790 <xTaskIncrementTick>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b70a:	4b16      	ldr	r3, [pc, #88]	@ (800b764 <xTaskResumeAll+0x130>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3b01      	subs	r3, #1
 800b714:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f1      	bne.n	800b700 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b71c:	4b12      	ldr	r3, [pc, #72]	@ (800b768 <xTaskResumeAll+0x134>)
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b722:	4b10      	ldr	r3, [pc, #64]	@ (800b764 <xTaskResumeAll+0x130>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b72a:	2301      	movs	r3, #1
 800b72c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b72e:	4b0f      	ldr	r3, [pc, #60]	@ (800b76c <xTaskResumeAll+0x138>)
 800b730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b73e:	f001 f8ed 	bl	800c91c <vPortExitCritical>

	return xAlreadyYielded;
 800b742:	68bb      	ldr	r3, [r7, #8]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	24001060 	.word	0x24001060
 800b750:	24001038 	.word	0x24001038
 800b754:	24000ff8 	.word	0x24000ff8
 800b758:	24001040 	.word	0x24001040
 800b75c:	24000b68 	.word	0x24000b68
 800b760:	24000b64 	.word	0x24000b64
 800b764:	2400104c 	.word	0x2400104c
 800b768:	24001048 	.word	0x24001048
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b776:	4b05      	ldr	r3, [pc, #20]	@ (800b78c <xTaskGetTickCount+0x1c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b77c:	687b      	ldr	r3, [r7, #4]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	2400103c 	.word	0x2400103c

0800b790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b79a:	4b4f      	ldr	r3, [pc, #316]	@ (800b8d8 <xTaskIncrementTick+0x148>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f040 8090 	bne.w	800b8c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b8dc <xTaskIncrementTick+0x14c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7ac:	4a4b      	ldr	r2, [pc, #300]	@ (800b8dc <xTaskIncrementTick+0x14c>)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d121      	bne.n	800b7fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7b8:	4b49      	ldr	r3, [pc, #292]	@ (800b8e0 <xTaskIncrementTick+0x150>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00b      	beq.n	800b7da <xTaskIncrementTick+0x4a>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	603b      	str	r3, [r7, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	e7fd      	b.n	800b7d6 <xTaskIncrementTick+0x46>
 800b7da:	4b41      	ldr	r3, [pc, #260]	@ (800b8e0 <xTaskIncrementTick+0x150>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60fb      	str	r3, [r7, #12]
 800b7e0:	4b40      	ldr	r3, [pc, #256]	@ (800b8e4 <xTaskIncrementTick+0x154>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a3e      	ldr	r2, [pc, #248]	@ (800b8e0 <xTaskIncrementTick+0x150>)
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	4a3e      	ldr	r2, [pc, #248]	@ (800b8e4 <xTaskIncrementTick+0x154>)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	4b3e      	ldr	r3, [pc, #248]	@ (800b8e8 <xTaskIncrementTick+0x158>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a3c      	ldr	r2, [pc, #240]	@ (800b8e8 <xTaskIncrementTick+0x158>)
 800b7f6:	6013      	str	r3, [r2, #0]
 800b7f8:	f000 fad4 	bl	800bda4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7fc:	4b3b      	ldr	r3, [pc, #236]	@ (800b8ec <xTaskIncrementTick+0x15c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	429a      	cmp	r2, r3
 800b804:	d349      	bcc.n	800b89a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b806:	4b36      	ldr	r3, [pc, #216]	@ (800b8e0 <xTaskIncrementTick+0x150>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d104      	bne.n	800b81a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b810:	4b36      	ldr	r3, [pc, #216]	@ (800b8ec <xTaskIncrementTick+0x15c>)
 800b812:	f04f 32ff 	mov.w	r2, #4294967295
 800b816:	601a      	str	r2, [r3, #0]
					break;
 800b818:	e03f      	b.n	800b89a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b81a:	4b31      	ldr	r3, [pc, #196]	@ (800b8e0 <xTaskIncrementTick+0x150>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d203      	bcs.n	800b83a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b832:	4a2e      	ldr	r2, [pc, #184]	@ (800b8ec <xTaskIncrementTick+0x15c>)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b838:	e02f      	b.n	800b89a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe ff46 	bl	800a6d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d004      	beq.n	800b856 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	3318      	adds	r3, #24
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe ff3d 	bl	800a6d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b85a:	4b25      	ldr	r3, [pc, #148]	@ (800b8f0 <xTaskIncrementTick+0x160>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d903      	bls.n	800b86a <xTaskIncrementTick+0xda>
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b866:	4a22      	ldr	r2, [pc, #136]	@ (800b8f0 <xTaskIncrementTick+0x160>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4a1f      	ldr	r2, [pc, #124]	@ (800b8f4 <xTaskIncrementTick+0x164>)
 800b878:	441a      	add	r2, r3
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3304      	adds	r3, #4
 800b87e:	4619      	mov	r1, r3
 800b880:	4610      	mov	r0, r2
 800b882:	f7fe fec8 	bl	800a616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88a:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f8 <xTaskIncrementTick+0x168>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	429a      	cmp	r2, r3
 800b892:	d3b8      	bcc.n	800b806 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b894:	2301      	movs	r3, #1
 800b896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b898:	e7b5      	b.n	800b806 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b89a:	4b17      	ldr	r3, [pc, #92]	@ (800b8f8 <xTaskIncrementTick+0x168>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a0:	4914      	ldr	r1, [pc, #80]	@ (800b8f4 <xTaskIncrementTick+0x164>)
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d901      	bls.n	800b8b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b8b6:	4b11      	ldr	r3, [pc, #68]	@ (800b8fc <xTaskIncrementTick+0x16c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e004      	b.n	800b8ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b900 <xTaskIncrementTick+0x170>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	4a0d      	ldr	r2, [pc, #52]	@ (800b900 <xTaskIncrementTick+0x170>)
 800b8cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b8ce:	697b      	ldr	r3, [r7, #20]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	24001060 	.word	0x24001060
 800b8dc:	2400103c 	.word	0x2400103c
 800b8e0:	24000ff0 	.word	0x24000ff0
 800b8e4:	24000ff4 	.word	0x24000ff4
 800b8e8:	24001050 	.word	0x24001050
 800b8ec:	24001058 	.word	0x24001058
 800b8f0:	24001040 	.word	0x24001040
 800b8f4:	24000b68 	.word	0x24000b68
 800b8f8:	24000b64 	.word	0x24000b64
 800b8fc:	2400104c 	.word	0x2400104c
 800b900:	24001048 	.word	0x24001048

0800b904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b90a:	4b28      	ldr	r3, [pc, #160]	@ (800b9ac <vTaskSwitchContext+0xa8>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b912:	4b27      	ldr	r3, [pc, #156]	@ (800b9b0 <vTaskSwitchContext+0xac>)
 800b914:	2201      	movs	r2, #1
 800b916:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b918:	e042      	b.n	800b9a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b91a:	4b25      	ldr	r3, [pc, #148]	@ (800b9b0 <vTaskSwitchContext+0xac>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b920:	4b24      	ldr	r3, [pc, #144]	@ (800b9b4 <vTaskSwitchContext+0xb0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	e011      	b.n	800b94c <vTaskSwitchContext+0x48>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10b      	bne.n	800b946 <vTaskSwitchContext+0x42>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <vTaskSwitchContext+0x3e>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3b01      	subs	r3, #1
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	491a      	ldr	r1, [pc, #104]	@ (800b9b8 <vTaskSwitchContext+0xb4>)
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	4613      	mov	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	440b      	add	r3, r1
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0e3      	beq.n	800b928 <vTaskSwitchContext+0x24>
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4613      	mov	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4a13      	ldr	r2, [pc, #76]	@ (800b9b8 <vTaskSwitchContext+0xb4>)
 800b96c:	4413      	add	r3, r2
 800b96e:	60bb      	str	r3, [r7, #8]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	605a      	str	r2, [r3, #4]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	3308      	adds	r3, #8
 800b982:	429a      	cmp	r2, r3
 800b984:	d104      	bne.n	800b990 <vTaskSwitchContext+0x8c>
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	605a      	str	r2, [r3, #4]
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	4a09      	ldr	r2, [pc, #36]	@ (800b9bc <vTaskSwitchContext+0xb8>)
 800b998:	6013      	str	r3, [r2, #0]
 800b99a:	4a06      	ldr	r2, [pc, #24]	@ (800b9b4 <vTaskSwitchContext+0xb0>)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6013      	str	r3, [r2, #0]
}
 800b9a0:	bf00      	nop
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	24001060 	.word	0x24001060
 800b9b0:	2400104c 	.word	0x2400104c
 800b9b4:	24001040 	.word	0x24001040
 800b9b8:	24000b68 	.word	0x24000b68
 800b9bc:	24000b64 	.word	0x24000b64

0800b9c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10b      	bne.n	800b9e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	60fb      	str	r3, [r7, #12]
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9e8:	4b07      	ldr	r3, [pc, #28]	@ (800ba08 <vTaskPlaceOnEventList+0x48>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3318      	adds	r3, #24
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7fe fe34 	bl	800a65e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	6838      	ldr	r0, [r7, #0]
 800b9fa:	f000 fa81 	bl	800bf00 <prvAddCurrentTaskToDelayedList>
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	24000b64 	.word	0x24000b64

0800ba0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10b      	bne.n	800ba36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	617b      	str	r3, [r7, #20]
}
 800ba30:	bf00      	nop
 800ba32:	bf00      	nop
 800ba34:	e7fd      	b.n	800ba32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba36:	4b0a      	ldr	r3, [pc, #40]	@ (800ba60 <vTaskPlaceOnEventListRestricted+0x54>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3318      	adds	r3, #24
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7fe fde9 	bl	800a616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f000 fa54 	bl	800bf00 <prvAddCurrentTaskToDelayedList>
	}
 800ba58:	bf00      	nop
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	24000b64 	.word	0x24000b64

0800ba64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10b      	bne.n	800ba92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	60fb      	str	r3, [r7, #12]
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	e7fd      	b.n	800ba8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3318      	adds	r3, #24
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe fe1a 	bl	800a6d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba9c:	4b1d      	ldr	r3, [pc, #116]	@ (800bb14 <xTaskRemoveFromEventList+0xb0>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d11d      	bne.n	800bae0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fe11 	bl	800a6d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab2:	4b19      	ldr	r3, [pc, #100]	@ (800bb18 <xTaskRemoveFromEventList+0xb4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d903      	bls.n	800bac2 <xTaskRemoveFromEventList+0x5e>
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babe:	4a16      	ldr	r2, [pc, #88]	@ (800bb18 <xTaskRemoveFromEventList+0xb4>)
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac6:	4613      	mov	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4413      	add	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4a13      	ldr	r2, [pc, #76]	@ (800bb1c <xTaskRemoveFromEventList+0xb8>)
 800bad0:	441a      	add	r2, r3
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	3304      	adds	r3, #4
 800bad6:	4619      	mov	r1, r3
 800bad8:	4610      	mov	r0, r2
 800bada:	f7fe fd9c 	bl	800a616 <vListInsertEnd>
 800bade:	e005      	b.n	800baec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	3318      	adds	r3, #24
 800bae4:	4619      	mov	r1, r3
 800bae6:	480e      	ldr	r0, [pc, #56]	@ (800bb20 <xTaskRemoveFromEventList+0xbc>)
 800bae8:	f7fe fd95 	bl	800a616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf0:	4b0c      	ldr	r3, [pc, #48]	@ (800bb24 <xTaskRemoveFromEventList+0xc0>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d905      	bls.n	800bb06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bafa:	2301      	movs	r3, #1
 800bafc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bafe:	4b0a      	ldr	r3, [pc, #40]	@ (800bb28 <xTaskRemoveFromEventList+0xc4>)
 800bb00:	2201      	movs	r2, #1
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e001      	b.n	800bb0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb0a:	697b      	ldr	r3, [r7, #20]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	24001060 	.word	0x24001060
 800bb18:	24001040 	.word	0x24001040
 800bb1c:	24000b68 	.word	0x24000b68
 800bb20:	24000ff8 	.word	0x24000ff8
 800bb24:	24000b64 	.word	0x24000b64
 800bb28:	2400104c 	.word	0x2400104c

0800bb2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb34:	4b06      	ldr	r3, [pc, #24]	@ (800bb50 <vTaskInternalSetTimeOutState+0x24>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb3c:	4b05      	ldr	r3, [pc, #20]	@ (800bb54 <vTaskInternalSetTimeOutState+0x28>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	605a      	str	r2, [r3, #4]
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	24001050 	.word	0x24001050
 800bb54:	2400103c 	.word	0x2400103c

0800bb58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10b      	bne.n	800bb80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	613b      	str	r3, [r7, #16]
}
 800bb7a:	bf00      	nop
 800bb7c:	bf00      	nop
 800bb7e:	e7fd      	b.n	800bb7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10b      	bne.n	800bb9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60fb      	str	r3, [r7, #12]
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop
 800bb9c:	e7fd      	b.n	800bb9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bb9e:	f000 fe8b 	bl	800c8b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bba2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc18 <xTaskCheckForTimeOut+0xc0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	69ba      	ldr	r2, [r7, #24]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d102      	bne.n	800bbc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	61fb      	str	r3, [r7, #28]
 800bbc0:	e023      	b.n	800bc0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	4b15      	ldr	r3, [pc, #84]	@ (800bc1c <xTaskCheckForTimeOut+0xc4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d007      	beq.n	800bbde <xTaskCheckForTimeOut+0x86>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	69ba      	ldr	r2, [r7, #24]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d302      	bcc.n	800bbde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	61fb      	str	r3, [r7, #28]
 800bbdc:	e015      	b.n	800bc0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d20b      	bcs.n	800bc00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff ff99 	bl	800bb2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61fb      	str	r3, [r7, #28]
 800bbfe:	e004      	b.n	800bc0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc06:	2301      	movs	r3, #1
 800bc08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc0a:	f000 fe87 	bl	800c91c <vPortExitCritical>

	return xReturn;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	2400103c 	.word	0x2400103c
 800bc1c:	24001050 	.word	0x24001050

0800bc20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc24:	4b03      	ldr	r3, [pc, #12]	@ (800bc34 <vTaskMissedYield+0x14>)
 800bc26:	2201      	movs	r2, #1
 800bc28:	601a      	str	r2, [r3, #0]
}
 800bc2a:	bf00      	nop
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	2400104c 	.word	0x2400104c

0800bc38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc40:	f000 f852 	bl	800bce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc44:	4b06      	ldr	r3, [pc, #24]	@ (800bc60 <prvIdleTask+0x28>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d9f9      	bls.n	800bc40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc4c:	4b05      	ldr	r3, [pc, #20]	@ (800bc64 <prvIdleTask+0x2c>)
 800bc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc5c:	e7f0      	b.n	800bc40 <prvIdleTask+0x8>
 800bc5e:	bf00      	nop
 800bc60:	24000b68 	.word	0x24000b68
 800bc64:	e000ed04 	.word	0xe000ed04

0800bc68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc6e:	2300      	movs	r3, #0
 800bc70:	607b      	str	r3, [r7, #4]
 800bc72:	e00c      	b.n	800bc8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4a12      	ldr	r2, [pc, #72]	@ (800bcc8 <prvInitialiseTaskLists+0x60>)
 800bc80:	4413      	add	r3, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fc9a 	bl	800a5bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	607b      	str	r3, [r7, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b37      	cmp	r3, #55	@ 0x37
 800bc92:	d9ef      	bls.n	800bc74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc94:	480d      	ldr	r0, [pc, #52]	@ (800bccc <prvInitialiseTaskLists+0x64>)
 800bc96:	f7fe fc91 	bl	800a5bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc9a:	480d      	ldr	r0, [pc, #52]	@ (800bcd0 <prvInitialiseTaskLists+0x68>)
 800bc9c:	f7fe fc8e 	bl	800a5bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bca0:	480c      	ldr	r0, [pc, #48]	@ (800bcd4 <prvInitialiseTaskLists+0x6c>)
 800bca2:	f7fe fc8b 	bl	800a5bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bca6:	480c      	ldr	r0, [pc, #48]	@ (800bcd8 <prvInitialiseTaskLists+0x70>)
 800bca8:	f7fe fc88 	bl	800a5bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcac:	480b      	ldr	r0, [pc, #44]	@ (800bcdc <prvInitialiseTaskLists+0x74>)
 800bcae:	f7fe fc85 	bl	800a5bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	@ (800bce0 <prvInitialiseTaskLists+0x78>)
 800bcb4:	4a05      	ldr	r2, [pc, #20]	@ (800bccc <prvInitialiseTaskLists+0x64>)
 800bcb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bce4 <prvInitialiseTaskLists+0x7c>)
 800bcba:	4a05      	ldr	r2, [pc, #20]	@ (800bcd0 <prvInitialiseTaskLists+0x68>)
 800bcbc:	601a      	str	r2, [r3, #0]
}
 800bcbe:	bf00      	nop
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	24000b68 	.word	0x24000b68
 800bccc:	24000fc8 	.word	0x24000fc8
 800bcd0:	24000fdc 	.word	0x24000fdc
 800bcd4:	24000ff8 	.word	0x24000ff8
 800bcd8:	2400100c 	.word	0x2400100c
 800bcdc:	24001024 	.word	0x24001024
 800bce0:	24000ff0 	.word	0x24000ff0
 800bce4:	24000ff4 	.word	0x24000ff4

0800bce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcee:	e019      	b.n	800bd24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bcf0:	f000 fde2 	bl	800c8b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf4:	4b10      	ldr	r3, [pc, #64]	@ (800bd38 <prvCheckTasksWaitingTermination+0x50>)
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe fce5 	bl	800a6d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd06:	4b0d      	ldr	r3, [pc, #52]	@ (800bd3c <prvCheckTasksWaitingTermination+0x54>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	4a0b      	ldr	r2, [pc, #44]	@ (800bd3c <prvCheckTasksWaitingTermination+0x54>)
 800bd0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd10:	4b0b      	ldr	r3, [pc, #44]	@ (800bd40 <prvCheckTasksWaitingTermination+0x58>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	4a0a      	ldr	r2, [pc, #40]	@ (800bd40 <prvCheckTasksWaitingTermination+0x58>)
 800bd18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd1a:	f000 fdff 	bl	800c91c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f810 	bl	800bd44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd24:	4b06      	ldr	r3, [pc, #24]	@ (800bd40 <prvCheckTasksWaitingTermination+0x58>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e1      	bne.n	800bcf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd2c:	bf00      	nop
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	2400100c 	.word	0x2400100c
 800bd3c:	24001038 	.word	0x24001038
 800bd40:	24001020 	.word	0x24001020

0800bd44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d108      	bne.n	800bd68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 ff9c 	bl	800cc98 <vPortFree>
				vPortFree( pxTCB );
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 ff99 	bl	800cc98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd66:	e019      	b.n	800bd9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d103      	bne.n	800bd7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 ff90 	bl	800cc98 <vPortFree>
	}
 800bd78:	e010      	b.n	800bd9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d00b      	beq.n	800bd9c <prvDeleteTCB+0x58>
	__asm volatile
 800bd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	60fb      	str	r3, [r7, #12]
}
 800bd96:	bf00      	nop
 800bd98:	bf00      	nop
 800bd9a:	e7fd      	b.n	800bd98 <prvDeleteTCB+0x54>
	}
 800bd9c:	bf00      	nop
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdaa:	4b0c      	ldr	r3, [pc, #48]	@ (800bddc <prvResetNextTaskUnblockTime+0x38>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d104      	bne.n	800bdbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bde0 <prvResetNextTaskUnblockTime+0x3c>)
 800bdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdbc:	e008      	b.n	800bdd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdbe:	4b07      	ldr	r3, [pc, #28]	@ (800bddc <prvResetNextTaskUnblockTime+0x38>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	4a04      	ldr	r2, [pc, #16]	@ (800bde0 <prvResetNextTaskUnblockTime+0x3c>)
 800bdce:	6013      	str	r3, [r2, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	24000ff0 	.word	0x24000ff0
 800bde0:	24001058 	.word	0x24001058

0800bde4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bdea:	4b0b      	ldr	r3, [pc, #44]	@ (800be18 <xTaskGetSchedulerState+0x34>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d102      	bne.n	800bdf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	607b      	str	r3, [r7, #4]
 800bdf6:	e008      	b.n	800be0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdf8:	4b08      	ldr	r3, [pc, #32]	@ (800be1c <xTaskGetSchedulerState+0x38>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be00:	2302      	movs	r3, #2
 800be02:	607b      	str	r3, [r7, #4]
 800be04:	e001      	b.n	800be0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be06:	2300      	movs	r3, #0
 800be08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be0a:	687b      	ldr	r3, [r7, #4]
	}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	24001044 	.word	0x24001044
 800be1c:	24001060 	.word	0x24001060

0800be20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be2c:	2300      	movs	r3, #0
 800be2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d058      	beq.n	800bee8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be36:	4b2f      	ldr	r3, [pc, #188]	@ (800bef4 <xTaskPriorityDisinherit+0xd4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d00b      	beq.n	800be58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	60fb      	str	r3, [r7, #12]
}
 800be52:	bf00      	nop
 800be54:	bf00      	nop
 800be56:	e7fd      	b.n	800be54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10b      	bne.n	800be78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	60bb      	str	r3, [r7, #8]
}
 800be72:	bf00      	nop
 800be74:	bf00      	nop
 800be76:	e7fd      	b.n	800be74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be7c:	1e5a      	subs	r2, r3, #1
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d02c      	beq.n	800bee8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be92:	2b00      	cmp	r3, #0
 800be94:	d128      	bne.n	800bee8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	3304      	adds	r3, #4
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe fc18 	bl	800a6d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb8:	4b0f      	ldr	r3, [pc, #60]	@ (800bef8 <xTaskPriorityDisinherit+0xd8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d903      	bls.n	800bec8 <xTaskPriorityDisinherit+0xa8>
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec4:	4a0c      	ldr	r2, [pc, #48]	@ (800bef8 <xTaskPriorityDisinherit+0xd8>)
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4a09      	ldr	r2, [pc, #36]	@ (800befc <xTaskPriorityDisinherit+0xdc>)
 800bed6:	441a      	add	r2, r3
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	3304      	adds	r3, #4
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	f7fe fb99 	bl	800a616 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bee4:	2301      	movs	r3, #1
 800bee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bee8:	697b      	ldr	r3, [r7, #20]
	}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	24000b64 	.word	0x24000b64
 800bef8:	24001040 	.word	0x24001040
 800befc:	24000b68 	.word	0x24000b68

0800bf00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf0a:	4b21      	ldr	r3, [pc, #132]	@ (800bf90 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf10:	4b20      	ldr	r3, [pc, #128]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fbda 	bl	800a6d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf22:	d10a      	bne.n	800bf3a <prvAddCurrentTaskToDelayedList+0x3a>
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d007      	beq.n	800bf3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4619      	mov	r1, r3
 800bf32:	4819      	ldr	r0, [pc, #100]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf34:	f7fe fb6f 	bl	800a616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf38:	e026      	b.n	800bf88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4413      	add	r3, r2
 800bf40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf42:	4b14      	ldr	r3, [pc, #80]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d209      	bcs.n	800bf66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf52:	4b12      	ldr	r3, [pc, #72]	@ (800bf9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	4b0f      	ldr	r3, [pc, #60]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fe fb7d 	bl	800a65e <vListInsert>
}
 800bf64:	e010      	b.n	800bf88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf66:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7fe fb73 	bl	800a65e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf78:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d202      	bcs.n	800bf88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf82:	4a08      	ldr	r2, [pc, #32]	@ (800bfa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	6013      	str	r3, [r2, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	2400103c 	.word	0x2400103c
 800bf94:	24000b64 	.word	0x24000b64
 800bf98:	24001024 	.word	0x24001024
 800bf9c:	24000ff4 	.word	0x24000ff4
 800bfa0:	24000ff0 	.word	0x24000ff0
 800bfa4:	24001058 	.word	0x24001058

0800bfa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	@ 0x28
 800bfac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfb2:	f000 fb13 	bl	800c5dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfb6:	4b1d      	ldr	r3, [pc, #116]	@ (800c02c <xTimerCreateTimerTask+0x84>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d021      	beq.n	800c002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfc6:	1d3a      	adds	r2, r7, #4
 800bfc8:	f107 0108 	add.w	r1, r7, #8
 800bfcc:	f107 030c 	add.w	r3, r7, #12
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe fad9 	bl	800a588 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	9202      	str	r2, [sp, #8]
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	460a      	mov	r2, r1
 800bfe8:	4911      	ldr	r1, [pc, #68]	@ (800c030 <xTimerCreateTimerTask+0x88>)
 800bfea:	4812      	ldr	r0, [pc, #72]	@ (800c034 <xTimerCreateTimerTask+0x8c>)
 800bfec:	f7ff f8d0 	bl	800b190 <xTaskCreateStatic>
 800bff0:	4603      	mov	r3, r0
 800bff2:	4a11      	ldr	r2, [pc, #68]	@ (800c038 <xTimerCreateTimerTask+0x90>)
 800bff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bff6:	4b10      	ldr	r3, [pc, #64]	@ (800c038 <xTimerCreateTimerTask+0x90>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bffe:	2301      	movs	r3, #1
 800c000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10b      	bne.n	800c020 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	613b      	str	r3, [r7, #16]
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	e7fd      	b.n	800c01c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c020:	697b      	ldr	r3, [r7, #20]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	24001094 	.word	0x24001094
 800c030:	08011544 	.word	0x08011544
 800c034:	0800c175 	.word	0x0800c175
 800c038:	24001098 	.word	0x24001098

0800c03c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	@ 0x28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10b      	bne.n	800c06c <xTimerGenericCommand+0x30>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	623b      	str	r3, [r7, #32]
}
 800c066:	bf00      	nop
 800c068:	bf00      	nop
 800c06a:	e7fd      	b.n	800c068 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c06c:	4b19      	ldr	r3, [pc, #100]	@ (800c0d4 <xTimerGenericCommand+0x98>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d02a      	beq.n	800c0ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b05      	cmp	r3, #5
 800c084:	dc18      	bgt.n	800c0b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c086:	f7ff fead 	bl	800bde4 <xTaskGetSchedulerState>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d109      	bne.n	800c0a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c090:	4b10      	ldr	r3, [pc, #64]	@ (800c0d4 <xTimerGenericCommand+0x98>)
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	f107 0110 	add.w	r1, r7, #16
 800c098:	2300      	movs	r3, #0
 800c09a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c09c:	f7fe fc88 	bl	800a9b0 <xQueueGenericSend>
 800c0a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0a2:	e012      	b.n	800c0ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d4 <xTimerGenericCommand+0x98>)
 800c0a6:	6818      	ldr	r0, [r3, #0]
 800c0a8:	f107 0110 	add.w	r1, r7, #16
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f7fe fc7e 	bl	800a9b0 <xQueueGenericSend>
 800c0b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0b6:	e008      	b.n	800c0ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0b8:	4b06      	ldr	r3, [pc, #24]	@ (800c0d4 <xTimerGenericCommand+0x98>)
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	f107 0110 	add.w	r1, r7, #16
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	f7fe fd76 	bl	800abb4 <xQueueGenericSendFromISR>
 800c0c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3728      	adds	r7, #40	@ 0x28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	24001094 	.word	0x24001094

0800c0d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b088      	sub	sp, #32
 800c0dc:	af02      	add	r7, sp, #8
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e2:	4b23      	ldr	r3, [pc, #140]	@ (800c170 <prvProcessExpiredTimer+0x98>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe faed 	bl	800a6d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0fc:	f003 0304 	and.w	r3, r3, #4
 800c100:	2b00      	cmp	r3, #0
 800c102:	d023      	beq.n	800c14c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	699a      	ldr	r2, [r3, #24]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	18d1      	adds	r1, r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	6978      	ldr	r0, [r7, #20]
 800c112:	f000 f8d5 	bl	800c2c0 <prvInsertTimerInActiveList>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d020      	beq.n	800c15e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c11c:	2300      	movs	r3, #0
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2300      	movs	r3, #0
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	2100      	movs	r1, #0
 800c126:	6978      	ldr	r0, [r7, #20]
 800c128:	f7ff ff88 	bl	800c03c <xTimerGenericCommand>
 800c12c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d114      	bne.n	800c15e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	60fb      	str	r3, [r7, #12]
}
 800c146:	bf00      	nop
 800c148:	bf00      	nop
 800c14a:	e7fd      	b.n	800c148 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c152:	f023 0301 	bic.w	r3, r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	6a1b      	ldr	r3, [r3, #32]
 800c162:	6978      	ldr	r0, [r7, #20]
 800c164:	4798      	blx	r3
}
 800c166:	bf00      	nop
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	2400108c 	.word	0x2400108c

0800c174 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c17c:	f107 0308 	add.w	r3, r7, #8
 800c180:	4618      	mov	r0, r3
 800c182:	f000 f859 	bl	800c238 <prvGetNextExpireTime>
 800c186:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	4619      	mov	r1, r3
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f000 f805 	bl	800c19c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c192:	f000 f8d7 	bl	800c344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c196:	bf00      	nop
 800c198:	e7f0      	b.n	800c17c <prvTimerTask+0x8>
	...

0800c19c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1a6:	f7ff fa37 	bl	800b618 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1aa:	f107 0308 	add.w	r3, r7, #8
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f866 	bl	800c280 <prvSampleTimeNow>
 800c1b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d130      	bne.n	800c21e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10a      	bne.n	800c1d8 <prvProcessTimerOrBlockTask+0x3c>
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d806      	bhi.n	800c1d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1ca:	f7ff fa33 	bl	800b634 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1ce:	68f9      	ldr	r1, [r7, #12]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff ff81 	bl	800c0d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1d6:	e024      	b.n	800c222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d008      	beq.n	800c1f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1de:	4b13      	ldr	r3, [pc, #76]	@ (800c22c <prvProcessTimerOrBlockTask+0x90>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <prvProcessTimerOrBlockTask+0x50>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <prvProcessTimerOrBlockTask+0x52>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c230 <prvProcessTimerOrBlockTask+0x94>)
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	f7fe ff93 	bl	800b128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c202:	f7ff fa17 	bl	800b634 <xTaskResumeAll>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c20c:	4b09      	ldr	r3, [pc, #36]	@ (800c234 <prvProcessTimerOrBlockTask+0x98>)
 800c20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	f3bf 8f6f 	isb	sy
}
 800c21c:	e001      	b.n	800c222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c21e:	f7ff fa09 	bl	800b634 <xTaskResumeAll>
}
 800c222:	bf00      	nop
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	24001090 	.word	0x24001090
 800c230:	24001094 	.word	0x24001094
 800c234:	e000ed04 	.word	0xe000ed04

0800c238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c240:	4b0e      	ldr	r3, [pc, #56]	@ (800c27c <prvGetNextExpireTime+0x44>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <prvGetNextExpireTime+0x16>
 800c24a:	2201      	movs	r2, #1
 800c24c:	e000      	b.n	800c250 <prvGetNextExpireTime+0x18>
 800c24e:	2200      	movs	r2, #0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d105      	bne.n	800c268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c25c:	4b07      	ldr	r3, [pc, #28]	@ (800c27c <prvGetNextExpireTime+0x44>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e001      	b.n	800c26c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c26c:	68fb      	ldr	r3, [r7, #12]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	2400108c 	.word	0x2400108c

0800c280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c288:	f7ff fa72 	bl	800b770 <xTaskGetTickCount>
 800c28c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c28e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2bc <prvSampleTimeNow+0x3c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	429a      	cmp	r2, r3
 800c296:	d205      	bcs.n	800c2a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c298:	f000 f93a 	bl	800c510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	e002      	b.n	800c2aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2aa:	4a04      	ldr	r2, [pc, #16]	@ (800c2bc <prvSampleTimeNow+0x3c>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	2400109c 	.word	0x2400109c

0800c2c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d812      	bhi.n	800c30c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	1ad2      	subs	r2, r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d302      	bcc.n	800c2fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	e01b      	b.n	800c332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2fa:	4b10      	ldr	r3, [pc, #64]	@ (800c33c <prvInsertTimerInActiveList+0x7c>)
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3304      	adds	r3, #4
 800c302:	4619      	mov	r1, r3
 800c304:	4610      	mov	r0, r2
 800c306:	f7fe f9aa 	bl	800a65e <vListInsert>
 800c30a:	e012      	b.n	800c332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	d206      	bcs.n	800c322 <prvInsertTimerInActiveList+0x62>
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d302      	bcc.n	800c322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c31c:	2301      	movs	r3, #1
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	e007      	b.n	800c332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c322:	4b07      	ldr	r3, [pc, #28]	@ (800c340 <prvInsertTimerInActiveList+0x80>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3304      	adds	r3, #4
 800c32a:	4619      	mov	r1, r3
 800c32c:	4610      	mov	r0, r2
 800c32e:	f7fe f996 	bl	800a65e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c332:	697b      	ldr	r3, [r7, #20]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	24001090 	.word	0x24001090
 800c340:	2400108c 	.word	0x2400108c

0800c344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	@ 0x38
 800c348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c34a:	e0ce      	b.n	800c4ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da19      	bge.n	800c386 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c352:	1d3b      	adds	r3, r7, #4
 800c354:	3304      	adds	r3, #4
 800c356:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10b      	bne.n	800c376 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	61fb      	str	r3, [r7, #28]
}
 800c370:	bf00      	nop
 800c372:	bf00      	nop
 800c374:	e7fd      	b.n	800c372 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c37c:	6850      	ldr	r0, [r2, #4]
 800c37e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c380:	6892      	ldr	r2, [r2, #8]
 800c382:	4611      	mov	r1, r2
 800c384:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f2c0 80ae 	blt.w	800c4ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d004      	beq.n	800c3a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39c:	3304      	adds	r3, #4
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe f996 	bl	800a6d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3a4:	463b      	mov	r3, r7
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ff6a 	bl	800c280 <prvSampleTimeNow>
 800c3ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b09      	cmp	r3, #9
 800c3b2:	f200 8097 	bhi.w	800c4e4 <prvProcessReceivedCommands+0x1a0>
 800c3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3bc <prvProcessReceivedCommands+0x78>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3e5 	.word	0x0800c3e5
 800c3c0:	0800c3e5 	.word	0x0800c3e5
 800c3c4:	0800c3e5 	.word	0x0800c3e5
 800c3c8:	0800c45b 	.word	0x0800c45b
 800c3cc:	0800c46f 	.word	0x0800c46f
 800c3d0:	0800c4bb 	.word	0x0800c4bb
 800c3d4:	0800c3e5 	.word	0x0800c3e5
 800c3d8:	0800c3e5 	.word	0x0800c3e5
 800c3dc:	0800c45b 	.word	0x0800c45b
 800c3e0:	0800c46f 	.word	0x0800c46f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	18d1      	adds	r1, r2, r3
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c404:	f7ff ff5c 	bl	800c2c0 <prvInsertTimerInActiveList>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d06c      	beq.n	800c4e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b00      	cmp	r3, #0
 800c422:	d061      	beq.n	800c4e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c428:	699b      	ldr	r3, [r3, #24]
 800c42a:	441a      	add	r2, r3
 800c42c:	2300      	movs	r3, #0
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	2300      	movs	r3, #0
 800c432:	2100      	movs	r1, #0
 800c434:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c436:	f7ff fe01 	bl	800c03c <xTimerGenericCommand>
 800c43a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d152      	bne.n	800c4e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	61bb      	str	r3, [r7, #24]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c460:	f023 0301 	bic.w	r3, r3, #1
 800c464:	b2da      	uxtb	r2, r3
 800c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c46c:	e03d      	b.n	800c4ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c474:	f043 0301 	orr.w	r3, r3, #1
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c484:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c488:	699b      	ldr	r3, [r3, #24]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10b      	bne.n	800c4a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	617b      	str	r3, [r7, #20]
}
 800c4a0:	bf00      	nop
 800c4a2:	bf00      	nop
 800c4a4:	e7fd      	b.n	800c4a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	18d1      	adds	r1, r2, r3
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4b4:	f7ff ff04 	bl	800c2c0 <prvInsertTimerInActiveList>
					break;
 800c4b8:	e017      	b.n	800c4ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d103      	bne.n	800c4d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c4c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ca:	f000 fbe5 	bl	800cc98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4ce:	e00c      	b.n	800c4ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4d6:	f023 0301 	bic.w	r3, r3, #1
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4e2:	e002      	b.n	800c4ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c4e4:	bf00      	nop
 800c4e6:	e000      	b.n	800c4ea <prvProcessReceivedCommands+0x1a6>
					break;
 800c4e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4ea:	4b08      	ldr	r3, [pc, #32]	@ (800c50c <prvProcessReceivedCommands+0x1c8>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	1d39      	adds	r1, r7, #4
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fe fbfc 	bl	800acf0 <xQueueReceive>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f47f af26 	bne.w	800c34c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c500:	bf00      	nop
 800c502:	bf00      	nop
 800c504:	3730      	adds	r7, #48	@ 0x30
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	24001094 	.word	0x24001094

0800c510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c516:	e049      	b.n	800c5ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c518:	4b2e      	ldr	r3, [pc, #184]	@ (800c5d4 <prvSwitchTimerLists+0xc4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c522:	4b2c      	ldr	r3, [pc, #176]	@ (800c5d4 <prvSwitchTimerLists+0xc4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3304      	adds	r3, #4
 800c530:	4618      	mov	r0, r3
 800c532:	f7fe f8cd 	bl	800a6d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d02f      	beq.n	800c5ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4413      	add	r3, r2
 800c554:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d90e      	bls.n	800c57c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c56a:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d4 <prvSwitchTimerLists+0xc4>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3304      	adds	r3, #4
 800c572:	4619      	mov	r1, r3
 800c574:	4610      	mov	r0, r2
 800c576:	f7fe f872 	bl	800a65e <vListInsert>
 800c57a:	e017      	b.n	800c5ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c57c:	2300      	movs	r3, #0
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	2300      	movs	r3, #0
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	2100      	movs	r1, #0
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fd58 	bl	800c03c <xTimerGenericCommand>
 800c58c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10b      	bne.n	800c5ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	603b      	str	r3, [r7, #0]
}
 800c5a6:	bf00      	nop
 800c5a8:	bf00      	nop
 800c5aa:	e7fd      	b.n	800c5a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5ac:	4b09      	ldr	r3, [pc, #36]	@ (800c5d4 <prvSwitchTimerLists+0xc4>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1b0      	bne.n	800c518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5b6:	4b07      	ldr	r3, [pc, #28]	@ (800c5d4 <prvSwitchTimerLists+0xc4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5bc:	4b06      	ldr	r3, [pc, #24]	@ (800c5d8 <prvSwitchTimerLists+0xc8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a04      	ldr	r2, [pc, #16]	@ (800c5d4 <prvSwitchTimerLists+0xc4>)
 800c5c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5c4:	4a04      	ldr	r2, [pc, #16]	@ (800c5d8 <prvSwitchTimerLists+0xc8>)
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	6013      	str	r3, [r2, #0]
}
 800c5ca:	bf00      	nop
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	2400108c 	.word	0x2400108c
 800c5d8:	24001090 	.word	0x24001090

0800c5dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5e2:	f000 f969 	bl	800c8b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5e6:	4b15      	ldr	r3, [pc, #84]	@ (800c63c <prvCheckForValidListAndQueue+0x60>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d120      	bne.n	800c630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5ee:	4814      	ldr	r0, [pc, #80]	@ (800c640 <prvCheckForValidListAndQueue+0x64>)
 800c5f0:	f7fd ffe4 	bl	800a5bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5f4:	4813      	ldr	r0, [pc, #76]	@ (800c644 <prvCheckForValidListAndQueue+0x68>)
 800c5f6:	f7fd ffe1 	bl	800a5bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5fa:	4b13      	ldr	r3, [pc, #76]	@ (800c648 <prvCheckForValidListAndQueue+0x6c>)
 800c5fc:	4a10      	ldr	r2, [pc, #64]	@ (800c640 <prvCheckForValidListAndQueue+0x64>)
 800c5fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c600:	4b12      	ldr	r3, [pc, #72]	@ (800c64c <prvCheckForValidListAndQueue+0x70>)
 800c602:	4a10      	ldr	r2, [pc, #64]	@ (800c644 <prvCheckForValidListAndQueue+0x68>)
 800c604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c606:	2300      	movs	r3, #0
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	4b11      	ldr	r3, [pc, #68]	@ (800c650 <prvCheckForValidListAndQueue+0x74>)
 800c60c:	4a11      	ldr	r2, [pc, #68]	@ (800c654 <prvCheckForValidListAndQueue+0x78>)
 800c60e:	2110      	movs	r1, #16
 800c610:	200a      	movs	r0, #10
 800c612:	f7fe f8f1 	bl	800a7f8 <xQueueGenericCreateStatic>
 800c616:	4603      	mov	r3, r0
 800c618:	4a08      	ldr	r2, [pc, #32]	@ (800c63c <prvCheckForValidListAndQueue+0x60>)
 800c61a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c61c:	4b07      	ldr	r3, [pc, #28]	@ (800c63c <prvCheckForValidListAndQueue+0x60>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d005      	beq.n	800c630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c624:	4b05      	ldr	r3, [pc, #20]	@ (800c63c <prvCheckForValidListAndQueue+0x60>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	490b      	ldr	r1, [pc, #44]	@ (800c658 <prvCheckForValidListAndQueue+0x7c>)
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fd52 	bl	800b0d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c630:	f000 f974 	bl	800c91c <vPortExitCritical>
}
 800c634:	bf00      	nop
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	24001094 	.word	0x24001094
 800c640:	24001064 	.word	0x24001064
 800c644:	24001078 	.word	0x24001078
 800c648:	2400108c 	.word	0x2400108c
 800c64c:	24001090 	.word	0x24001090
 800c650:	24001140 	.word	0x24001140
 800c654:	240010a0 	.word	0x240010a0
 800c658:	0801154c 	.word	0x0801154c

0800c65c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3b04      	subs	r3, #4
 800c66c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	3b04      	subs	r3, #4
 800c67a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f023 0201 	bic.w	r2, r3, #1
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3b04      	subs	r3, #4
 800c68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c68c:	4a0c      	ldr	r2, [pc, #48]	@ (800c6c0 <pxPortInitialiseStack+0x64>)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3b14      	subs	r3, #20
 800c696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3b04      	subs	r3, #4
 800c6a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f06f 0202 	mvn.w	r2, #2
 800c6aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	3b20      	subs	r3, #32
 800c6b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	0800c6c5 	.word	0x0800c6c5

0800c6c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6ce:	4b13      	ldr	r3, [pc, #76]	@ (800c71c <prvTaskExitError+0x58>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d6:	d00b      	beq.n	800c6f0 <prvTaskExitError+0x2c>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	60fb      	str	r3, [r7, #12]
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <prvTaskExitError+0x28>
	__asm volatile
 800c6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	60bb      	str	r3, [r7, #8]
}
 800c702:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c704:	bf00      	nop
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d0fc      	beq.n	800c706 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	24000010 	.word	0x24000010

0800c720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c720:	4b07      	ldr	r3, [pc, #28]	@ (800c740 <pxCurrentTCBConst2>)
 800c722:	6819      	ldr	r1, [r3, #0]
 800c724:	6808      	ldr	r0, [r1, #0]
 800c726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72a:	f380 8809 	msr	PSP, r0
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8811 	msr	BASEPRI, r0
 800c73a:	4770      	bx	lr
 800c73c:	f3af 8000 	nop.w

0800c740 <pxCurrentTCBConst2>:
 800c740:	24000b64 	.word	0x24000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop

0800c748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c748:	4808      	ldr	r0, [pc, #32]	@ (800c76c <prvPortStartFirstTask+0x24>)
 800c74a:	6800      	ldr	r0, [r0, #0]
 800c74c:	6800      	ldr	r0, [r0, #0]
 800c74e:	f380 8808 	msr	MSP, r0
 800c752:	f04f 0000 	mov.w	r0, #0
 800c756:	f380 8814 	msr	CONTROL, r0
 800c75a:	b662      	cpsie	i
 800c75c:	b661      	cpsie	f
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	df00      	svc	0
 800c768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c76a:	bf00      	nop
 800c76c:	e000ed08 	.word	0xe000ed08

0800c770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c776:	4b47      	ldr	r3, [pc, #284]	@ (800c894 <xPortStartScheduler+0x124>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a47      	ldr	r2, [pc, #284]	@ (800c898 <xPortStartScheduler+0x128>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d10b      	bne.n	800c798 <xPortStartScheduler+0x28>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	60fb      	str	r3, [r7, #12]
}
 800c792:	bf00      	nop
 800c794:	bf00      	nop
 800c796:	e7fd      	b.n	800c794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c798:	4b3e      	ldr	r3, [pc, #248]	@ (800c894 <xPortStartScheduler+0x124>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a3f      	ldr	r2, [pc, #252]	@ (800c89c <xPortStartScheduler+0x12c>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d10b      	bne.n	800c7ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	613b      	str	r3, [r7, #16]
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	e7fd      	b.n	800c7b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7ba:	4b39      	ldr	r3, [pc, #228]	@ (800c8a0 <xPortStartScheduler+0x130>)
 800c7bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	22ff      	movs	r2, #255	@ 0xff
 800c7ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7d4:	78fb      	ldrb	r3, [r7, #3]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	4b31      	ldr	r3, [pc, #196]	@ (800c8a4 <xPortStartScheduler+0x134>)
 800c7e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7e2:	4b31      	ldr	r3, [pc, #196]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c7e4:	2207      	movs	r2, #7
 800c7e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7e8:	e009      	b.n	800c7fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c7ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c7f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7f4:	78fb      	ldrb	r3, [r7, #3]
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c806:	2b80      	cmp	r3, #128	@ 0x80
 800c808:	d0ef      	beq.n	800c7ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c80a:	4b27      	ldr	r3, [pc, #156]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f1c3 0307 	rsb	r3, r3, #7
 800c812:	2b04      	cmp	r3, #4
 800c814:	d00b      	beq.n	800c82e <xPortStartScheduler+0xbe>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60bb      	str	r3, [r7, #8]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c82e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	4a1c      	ldr	r2, [pc, #112]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c838:	4b1b      	ldr	r3, [pc, #108]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c840:	4a19      	ldr	r2, [pc, #100]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	b2da      	uxtb	r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c84c:	4b17      	ldr	r3, [pc, #92]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a16      	ldr	r2, [pc, #88]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c858:	4b14      	ldr	r3, [pc, #80]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a13      	ldr	r2, [pc, #76]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c85e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c864:	f000 f8da 	bl	800ca1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c868:	4b11      	ldr	r3, [pc, #68]	@ (800c8b0 <xPortStartScheduler+0x140>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c86e:	f000 f8f9 	bl	800ca64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c872:	4b10      	ldr	r3, [pc, #64]	@ (800c8b4 <xPortStartScheduler+0x144>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a0f      	ldr	r2, [pc, #60]	@ (800c8b4 <xPortStartScheduler+0x144>)
 800c878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c87c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c87e:	f7ff ff63 	bl	800c748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c882:	f7ff f83f 	bl	800b904 <vTaskSwitchContext>
	prvTaskExitError();
 800c886:	f7ff ff1d 	bl	800c6c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	e000ed00 	.word	0xe000ed00
 800c898:	410fc271 	.word	0x410fc271
 800c89c:	410fc270 	.word	0x410fc270
 800c8a0:	e000e400 	.word	0xe000e400
 800c8a4:	24001190 	.word	0x24001190
 800c8a8:	24001194 	.word	0x24001194
 800c8ac:	e000ed20 	.word	0xe000ed20
 800c8b0:	24000010 	.word	0x24000010
 800c8b4:	e000ef34 	.word	0xe000ef34

0800c8b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	607b      	str	r3, [r7, #4]
}
 800c8d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8d2:	4b10      	ldr	r3, [pc, #64]	@ (800c914 <vPortEnterCritical+0x5c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c914 <vPortEnterCritical+0x5c>)
 800c8da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c914 <vPortEnterCritical+0x5c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d110      	bne.n	800c906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c918 <vPortEnterCritical+0x60>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <vPortEnterCritical+0x4e>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	603b      	str	r3, [r7, #0]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <vPortEnterCritical+0x4a>
	}
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	24000010 	.word	0x24000010
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c922:	4b12      	ldr	r3, [pc, #72]	@ (800c96c <vPortExitCritical+0x50>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10b      	bne.n	800c942 <vPortExitCritical+0x26>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	607b      	str	r3, [r7, #4]
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	e7fd      	b.n	800c93e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c942:	4b0a      	ldr	r3, [pc, #40]	@ (800c96c <vPortExitCritical+0x50>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3b01      	subs	r3, #1
 800c948:	4a08      	ldr	r2, [pc, #32]	@ (800c96c <vPortExitCritical+0x50>)
 800c94a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c94c:	4b07      	ldr	r3, [pc, #28]	@ (800c96c <vPortExitCritical+0x50>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d105      	bne.n	800c960 <vPortExitCritical+0x44>
 800c954:	2300      	movs	r3, #0
 800c956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	f383 8811 	msr	BASEPRI, r3
}
 800c95e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	24000010 	.word	0x24000010

0800c970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c970:	f3ef 8009 	mrs	r0, PSP
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	4b15      	ldr	r3, [pc, #84]	@ (800c9d0 <pxCurrentTCBConst>)
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	f01e 0f10 	tst.w	lr, #16
 800c980:	bf08      	it	eq
 800c982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98a:	6010      	str	r0, [r2, #0]
 800c98c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c994:	f380 8811 	msr	BASEPRI, r0
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f7fe ffb0 	bl	800b904 <vTaskSwitchContext>
 800c9a4:	f04f 0000 	mov.w	r0, #0
 800c9a8:	f380 8811 	msr	BASEPRI, r0
 800c9ac:	bc09      	pop	{r0, r3}
 800c9ae:	6819      	ldr	r1, [r3, #0]
 800c9b0:	6808      	ldr	r0, [r1, #0]
 800c9b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b6:	f01e 0f10 	tst.w	lr, #16
 800c9ba:	bf08      	it	eq
 800c9bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9c0:	f380 8809 	msr	PSP, r0
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	f3af 8000 	nop.w

0800c9d0 <pxCurrentTCBConst>:
 800c9d0:	24000b64 	.word	0x24000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop

0800c9d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	607b      	str	r3, [r7, #4]
}
 800c9f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9f2:	f7fe fecd 	bl	800b790 <xTaskIncrementTick>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9fc:	4b06      	ldr	r3, [pc, #24]	@ (800ca18 <xPortSysTickHandler+0x40>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	2300      	movs	r3, #0
 800ca06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	f383 8811 	msr	BASEPRI, r3
}
 800ca0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca20:	4b0b      	ldr	r3, [pc, #44]	@ (800ca50 <vPortSetupTimerInterrupt+0x34>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca26:	4b0b      	ldr	r3, [pc, #44]	@ (800ca54 <vPortSetupTimerInterrupt+0x38>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca58 <vPortSetupTimerInterrupt+0x3c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a0a      	ldr	r2, [pc, #40]	@ (800ca5c <vPortSetupTimerInterrupt+0x40>)
 800ca32:	fba2 2303 	umull	r2, r3, r2, r3
 800ca36:	099b      	lsrs	r3, r3, #6
 800ca38:	4a09      	ldr	r2, [pc, #36]	@ (800ca60 <vPortSetupTimerInterrupt+0x44>)
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca3e:	4b04      	ldr	r3, [pc, #16]	@ (800ca50 <vPortSetupTimerInterrupt+0x34>)
 800ca40:	2207      	movs	r2, #7
 800ca42:	601a      	str	r2, [r3, #0]
}
 800ca44:	bf00      	nop
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	e000e010 	.word	0xe000e010
 800ca54:	e000e018 	.word	0xe000e018
 800ca58:	24000000 	.word	0x24000000
 800ca5c:	10624dd3 	.word	0x10624dd3
 800ca60:	e000e014 	.word	0xe000e014

0800ca64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca74 <vPortEnableVFP+0x10>
 800ca68:	6801      	ldr	r1, [r0, #0]
 800ca6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca6e:	6001      	str	r1, [r0, #0]
 800ca70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca72:	bf00      	nop
 800ca74:	e000ed88 	.word	0xe000ed88

0800ca78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca7e:	f3ef 8305 	mrs	r3, IPSR
 800ca82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d915      	bls.n	800cab6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca8a:	4a18      	ldr	r2, [pc, #96]	@ (800caec <vPortValidateInterruptPriority+0x74>)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4413      	add	r3, r2
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca94:	4b16      	ldr	r3, [pc, #88]	@ (800caf0 <vPortValidateInterruptPriority+0x78>)
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	7afa      	ldrb	r2, [r7, #11]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d20b      	bcs.n	800cab6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	607b      	str	r3, [r7, #4]
}
 800cab0:	bf00      	nop
 800cab2:	bf00      	nop
 800cab4:	e7fd      	b.n	800cab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cab6:	4b0f      	ldr	r3, [pc, #60]	@ (800caf4 <vPortValidateInterruptPriority+0x7c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cabe:	4b0e      	ldr	r3, [pc, #56]	@ (800caf8 <vPortValidateInterruptPriority+0x80>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d90b      	bls.n	800cade <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	603b      	str	r3, [r7, #0]
}
 800cad8:	bf00      	nop
 800cada:	bf00      	nop
 800cadc:	e7fd      	b.n	800cada <vPortValidateInterruptPriority+0x62>
	}
 800cade:	bf00      	nop
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	e000e3f0 	.word	0xe000e3f0
 800caf0:	24001190 	.word	0x24001190
 800caf4:	e000ed0c 	.word	0xe000ed0c
 800caf8:	24001194 	.word	0x24001194

0800cafc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	@ 0x28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb08:	f7fe fd86 	bl	800b618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb0c:	4b5c      	ldr	r3, [pc, #368]	@ (800cc80 <pvPortMalloc+0x184>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb14:	f000 f924 	bl	800cd60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb18:	4b5a      	ldr	r3, [pc, #360]	@ (800cc84 <pvPortMalloc+0x188>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4013      	ands	r3, r2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f040 8095 	bne.w	800cc50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d01e      	beq.n	800cb6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb2c:	2208      	movs	r2, #8
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4413      	add	r3, r2
 800cb32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f003 0307 	and.w	r3, r3, #7
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d015      	beq.n	800cb6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f023 0307 	bic.w	r3, r3, #7
 800cb44:	3308      	adds	r3, #8
 800cb46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00b      	beq.n	800cb6a <pvPortMalloc+0x6e>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	617b      	str	r3, [r7, #20]
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	e7fd      	b.n	800cb66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d06f      	beq.n	800cc50 <pvPortMalloc+0x154>
 800cb70:	4b45      	ldr	r3, [pc, #276]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d86a      	bhi.n	800cc50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb7a:	4b44      	ldr	r3, [pc, #272]	@ (800cc8c <pvPortMalloc+0x190>)
 800cb7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb7e:	4b43      	ldr	r3, [pc, #268]	@ (800cc8c <pvPortMalloc+0x190>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb84:	e004      	b.n	800cb90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d903      	bls.n	800cba2 <pvPortMalloc+0xa6>
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1f1      	bne.n	800cb86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cba2:	4b37      	ldr	r3, [pc, #220]	@ (800cc80 <pvPortMalloc+0x184>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d051      	beq.n	800cc50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	4413      	add	r3, r2
 800cbb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	1ad2      	subs	r2, r2, r3
 800cbc6:	2308      	movs	r3, #8
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d920      	bls.n	800cc10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	f003 0307 	and.w	r3, r3, #7
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00b      	beq.n	800cbf8 <pvPortMalloc+0xfc>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	613b      	str	r3, [r7, #16]
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	e7fd      	b.n	800cbf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	1ad2      	subs	r2, r2, r3
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc0a:	69b8      	ldr	r0, [r7, #24]
 800cc0c:	f000 f90a 	bl	800ce24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc10:	4b1d      	ldr	r3, [pc, #116]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc1e:	4b1a      	ldr	r3, [pc, #104]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	4b1b      	ldr	r3, [pc, #108]	@ (800cc90 <pvPortMalloc+0x194>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d203      	bcs.n	800cc32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc2a:	4b17      	ldr	r3, [pc, #92]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a18      	ldr	r2, [pc, #96]	@ (800cc90 <pvPortMalloc+0x194>)
 800cc30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	4b13      	ldr	r3, [pc, #76]	@ (800cc84 <pvPortMalloc+0x188>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc46:	4b13      	ldr	r3, [pc, #76]	@ (800cc94 <pvPortMalloc+0x198>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	4a11      	ldr	r2, [pc, #68]	@ (800cc94 <pvPortMalloc+0x198>)
 800cc4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc50:	f7fe fcf0 	bl	800b634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <pvPortMalloc+0x17a>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	60fb      	str	r3, [r7, #12]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <pvPortMalloc+0x176>
	return pvReturn;
 800cc76:	69fb      	ldr	r3, [r7, #28]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3728      	adds	r7, #40	@ 0x28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	24004da0 	.word	0x24004da0
 800cc84:	24004db4 	.word	0x24004db4
 800cc88:	24004da4 	.word	0x24004da4
 800cc8c:	24004d98 	.word	0x24004d98
 800cc90:	24004da8 	.word	0x24004da8
 800cc94:	24004dac 	.word	0x24004dac

0800cc98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d04f      	beq.n	800cd4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccaa:	2308      	movs	r3, #8
 800ccac:	425b      	negs	r3, r3
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	4b25      	ldr	r3, [pc, #148]	@ (800cd54 <vPortFree+0xbc>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <vPortFree+0x46>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	60fb      	str	r3, [r7, #12]
}
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
 800ccdc:	e7fd      	b.n	800ccda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00b      	beq.n	800ccfe <vPortFree+0x66>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	60bb      	str	r3, [r7, #8]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	4b14      	ldr	r3, [pc, #80]	@ (800cd54 <vPortFree+0xbc>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4013      	ands	r3, r2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01e      	beq.n	800cd4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d11a      	bne.n	800cd4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	4b0e      	ldr	r3, [pc, #56]	@ (800cd54 <vPortFree+0xbc>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	43db      	mvns	r3, r3
 800cd1e:	401a      	ands	r2, r3
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd24:	f7fe fc78 	bl	800b618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd58 <vPortFree+0xc0>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4413      	add	r3, r2
 800cd32:	4a09      	ldr	r2, [pc, #36]	@ (800cd58 <vPortFree+0xc0>)
 800cd34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd36:	6938      	ldr	r0, [r7, #16]
 800cd38:	f000 f874 	bl	800ce24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd3c:	4b07      	ldr	r3, [pc, #28]	@ (800cd5c <vPortFree+0xc4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	4a06      	ldr	r2, [pc, #24]	@ (800cd5c <vPortFree+0xc4>)
 800cd44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd46:	f7fe fc75 	bl	800b634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd4a:	bf00      	nop
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	24004db4 	.word	0x24004db4
 800cd58:	24004da4 	.word	0x24004da4
 800cd5c:	24004db0 	.word	0x24004db0

0800cd60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cd6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd6c:	4b27      	ldr	r3, [pc, #156]	@ (800ce0c <prvHeapInit+0xac>)
 800cd6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00c      	beq.n	800cd94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f023 0307 	bic.w	r3, r3, #7
 800cd86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ce0c <prvHeapInit+0xac>)
 800cd90:	4413      	add	r3, r2
 800cd92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd98:	4a1d      	ldr	r2, [pc, #116]	@ (800ce10 <prvHeapInit+0xb0>)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ce10 <prvHeapInit+0xb0>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4413      	add	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdac:	2208      	movs	r2, #8
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	1a9b      	subs	r3, r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f023 0307 	bic.w	r3, r3, #7
 800cdba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4a15      	ldr	r2, [pc, #84]	@ (800ce14 <prvHeapInit+0xb4>)
 800cdc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdc2:	4b14      	ldr	r3, [pc, #80]	@ (800ce14 <prvHeapInit+0xb4>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdca:	4b12      	ldr	r3, [pc, #72]	@ (800ce14 <prvHeapInit+0xb4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	1ad2      	subs	r2, r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cde0:	4b0c      	ldr	r3, [pc, #48]	@ (800ce14 <prvHeapInit+0xb4>)
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4a0a      	ldr	r2, [pc, #40]	@ (800ce18 <prvHeapInit+0xb8>)
 800cdee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	4a09      	ldr	r2, [pc, #36]	@ (800ce1c <prvHeapInit+0xbc>)
 800cdf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdf8:	4b09      	ldr	r3, [pc, #36]	@ (800ce20 <prvHeapInit+0xc0>)
 800cdfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdfe:	601a      	str	r2, [r3, #0]
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	24001198 	.word	0x24001198
 800ce10:	24004d98 	.word	0x24004d98
 800ce14:	24004da0 	.word	0x24004da0
 800ce18:	24004da8 	.word	0x24004da8
 800ce1c:	24004da4 	.word	0x24004da4
 800ce20:	24004db4 	.word	0x24004db4

0800ce24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce2c:	4b28      	ldr	r3, [pc, #160]	@ (800ced0 <prvInsertBlockIntoFreeList+0xac>)
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	e002      	b.n	800ce38 <prvInsertBlockIntoFreeList+0x14>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d8f7      	bhi.n	800ce32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d108      	bne.n	800ce66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	441a      	add	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	441a      	add	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d118      	bne.n	800ceac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	4b15      	ldr	r3, [pc, #84]	@ (800ced4 <prvInsertBlockIntoFreeList+0xb0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d00d      	beq.n	800cea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685a      	ldr	r2, [r3, #4]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	441a      	add	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	e008      	b.n	800ceb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cea2:	4b0c      	ldr	r3, [pc, #48]	@ (800ced4 <prvInsertBlockIntoFreeList+0xb0>)
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e003      	b.n	800ceb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d002      	beq.n	800cec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cec2:	bf00      	nop
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	24004d98 	.word	0x24004d98
 800ced4:	24004da0 	.word	0x24004da0

0800ced8 <malloc>:
 800ced8:	4b02      	ldr	r3, [pc, #8]	@ (800cee4 <malloc+0xc>)
 800ceda:	4601      	mov	r1, r0
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	f000 b825 	b.w	800cf2c <_malloc_r>
 800cee2:	bf00      	nop
 800cee4:	2400018c 	.word	0x2400018c

0800cee8 <sbrk_aligned>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	4e0f      	ldr	r6, [pc, #60]	@ (800cf28 <sbrk_aligned+0x40>)
 800ceec:	460c      	mov	r4, r1
 800ceee:	6831      	ldr	r1, [r6, #0]
 800cef0:	4605      	mov	r5, r0
 800cef2:	b911      	cbnz	r1, 800cefa <sbrk_aligned+0x12>
 800cef4:	f001 ff38 	bl	800ed68 <_sbrk_r>
 800cef8:	6030      	str	r0, [r6, #0]
 800cefa:	4621      	mov	r1, r4
 800cefc:	4628      	mov	r0, r5
 800cefe:	f001 ff33 	bl	800ed68 <_sbrk_r>
 800cf02:	1c43      	adds	r3, r0, #1
 800cf04:	d103      	bne.n	800cf0e <sbrk_aligned+0x26>
 800cf06:	f04f 34ff 	mov.w	r4, #4294967295
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
 800cf0e:	1cc4      	adds	r4, r0, #3
 800cf10:	f024 0403 	bic.w	r4, r4, #3
 800cf14:	42a0      	cmp	r0, r4
 800cf16:	d0f8      	beq.n	800cf0a <sbrk_aligned+0x22>
 800cf18:	1a21      	subs	r1, r4, r0
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f001 ff24 	bl	800ed68 <_sbrk_r>
 800cf20:	3001      	adds	r0, #1
 800cf22:	d1f2      	bne.n	800cf0a <sbrk_aligned+0x22>
 800cf24:	e7ef      	b.n	800cf06 <sbrk_aligned+0x1e>
 800cf26:	bf00      	nop
 800cf28:	24004db8 	.word	0x24004db8

0800cf2c <_malloc_r>:
 800cf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf30:	1ccd      	adds	r5, r1, #3
 800cf32:	f025 0503 	bic.w	r5, r5, #3
 800cf36:	3508      	adds	r5, #8
 800cf38:	2d0c      	cmp	r5, #12
 800cf3a:	bf38      	it	cc
 800cf3c:	250c      	movcc	r5, #12
 800cf3e:	2d00      	cmp	r5, #0
 800cf40:	4606      	mov	r6, r0
 800cf42:	db01      	blt.n	800cf48 <_malloc_r+0x1c>
 800cf44:	42a9      	cmp	r1, r5
 800cf46:	d904      	bls.n	800cf52 <_malloc_r+0x26>
 800cf48:	230c      	movs	r3, #12
 800cf4a:	6033      	str	r3, [r6, #0]
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d028 <_malloc_r+0xfc>
 800cf56:	f000 f869 	bl	800d02c <__malloc_lock>
 800cf5a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf5e:	461c      	mov	r4, r3
 800cf60:	bb44      	cbnz	r4, 800cfb4 <_malloc_r+0x88>
 800cf62:	4629      	mov	r1, r5
 800cf64:	4630      	mov	r0, r6
 800cf66:	f7ff ffbf 	bl	800cee8 <sbrk_aligned>
 800cf6a:	1c43      	adds	r3, r0, #1
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	d158      	bne.n	800d022 <_malloc_r+0xf6>
 800cf70:	f8d8 4000 	ldr.w	r4, [r8]
 800cf74:	4627      	mov	r7, r4
 800cf76:	2f00      	cmp	r7, #0
 800cf78:	d143      	bne.n	800d002 <_malloc_r+0xd6>
 800cf7a:	2c00      	cmp	r4, #0
 800cf7c:	d04b      	beq.n	800d016 <_malloc_r+0xea>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	4639      	mov	r1, r7
 800cf82:	4630      	mov	r0, r6
 800cf84:	eb04 0903 	add.w	r9, r4, r3
 800cf88:	f001 feee 	bl	800ed68 <_sbrk_r>
 800cf8c:	4581      	cmp	r9, r0
 800cf8e:	d142      	bne.n	800d016 <_malloc_r+0xea>
 800cf90:	6821      	ldr	r1, [r4, #0]
 800cf92:	1a6d      	subs	r5, r5, r1
 800cf94:	4629      	mov	r1, r5
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7ff ffa6 	bl	800cee8 <sbrk_aligned>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d03a      	beq.n	800d016 <_malloc_r+0xea>
 800cfa0:	6823      	ldr	r3, [r4, #0]
 800cfa2:	442b      	add	r3, r5
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	f8d8 3000 	ldr.w	r3, [r8]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	bb62      	cbnz	r2, 800d008 <_malloc_r+0xdc>
 800cfae:	f8c8 7000 	str.w	r7, [r8]
 800cfb2:	e00f      	b.n	800cfd4 <_malloc_r+0xa8>
 800cfb4:	6822      	ldr	r2, [r4, #0]
 800cfb6:	1b52      	subs	r2, r2, r5
 800cfb8:	d420      	bmi.n	800cffc <_malloc_r+0xd0>
 800cfba:	2a0b      	cmp	r2, #11
 800cfbc:	d917      	bls.n	800cfee <_malloc_r+0xc2>
 800cfbe:	1961      	adds	r1, r4, r5
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	6025      	str	r5, [r4, #0]
 800cfc4:	bf18      	it	ne
 800cfc6:	6059      	strne	r1, [r3, #4]
 800cfc8:	6863      	ldr	r3, [r4, #4]
 800cfca:	bf08      	it	eq
 800cfcc:	f8c8 1000 	streq.w	r1, [r8]
 800cfd0:	5162      	str	r2, [r4, r5]
 800cfd2:	604b      	str	r3, [r1, #4]
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f000 f82f 	bl	800d038 <__malloc_unlock>
 800cfda:	f104 000b 	add.w	r0, r4, #11
 800cfde:	1d23      	adds	r3, r4, #4
 800cfe0:	f020 0007 	bic.w	r0, r0, #7
 800cfe4:	1ac2      	subs	r2, r0, r3
 800cfe6:	bf1c      	itt	ne
 800cfe8:	1a1b      	subne	r3, r3, r0
 800cfea:	50a3      	strne	r3, [r4, r2]
 800cfec:	e7af      	b.n	800cf4e <_malloc_r+0x22>
 800cfee:	6862      	ldr	r2, [r4, #4]
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	bf0c      	ite	eq
 800cff4:	f8c8 2000 	streq.w	r2, [r8]
 800cff8:	605a      	strne	r2, [r3, #4]
 800cffa:	e7eb      	b.n	800cfd4 <_malloc_r+0xa8>
 800cffc:	4623      	mov	r3, r4
 800cffe:	6864      	ldr	r4, [r4, #4]
 800d000:	e7ae      	b.n	800cf60 <_malloc_r+0x34>
 800d002:	463c      	mov	r4, r7
 800d004:	687f      	ldr	r7, [r7, #4]
 800d006:	e7b6      	b.n	800cf76 <_malloc_r+0x4a>
 800d008:	461a      	mov	r2, r3
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	d1fb      	bne.n	800d008 <_malloc_r+0xdc>
 800d010:	2300      	movs	r3, #0
 800d012:	6053      	str	r3, [r2, #4]
 800d014:	e7de      	b.n	800cfd4 <_malloc_r+0xa8>
 800d016:	230c      	movs	r3, #12
 800d018:	6033      	str	r3, [r6, #0]
 800d01a:	4630      	mov	r0, r6
 800d01c:	f000 f80c 	bl	800d038 <__malloc_unlock>
 800d020:	e794      	b.n	800cf4c <_malloc_r+0x20>
 800d022:	6005      	str	r5, [r0, #0]
 800d024:	e7d6      	b.n	800cfd4 <_malloc_r+0xa8>
 800d026:	bf00      	nop
 800d028:	24004dbc 	.word	0x24004dbc

0800d02c <__malloc_lock>:
 800d02c:	4801      	ldr	r0, [pc, #4]	@ (800d034 <__malloc_lock+0x8>)
 800d02e:	f001 bee8 	b.w	800ee02 <__retarget_lock_acquire_recursive>
 800d032:	bf00      	nop
 800d034:	24004f00 	.word	0x24004f00

0800d038 <__malloc_unlock>:
 800d038:	4801      	ldr	r0, [pc, #4]	@ (800d040 <__malloc_unlock+0x8>)
 800d03a:	f001 bee3 	b.w	800ee04 <__retarget_lock_release_recursive>
 800d03e:	bf00      	nop
 800d040:	24004f00 	.word	0x24004f00

0800d044 <_realloc_r>:
 800d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	4607      	mov	r7, r0
 800d04a:	4614      	mov	r4, r2
 800d04c:	460d      	mov	r5, r1
 800d04e:	b921      	cbnz	r1, 800d05a <_realloc_r+0x16>
 800d050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	4611      	mov	r1, r2
 800d056:	f7ff bf69 	b.w	800cf2c <_malloc_r>
 800d05a:	b92a      	cbnz	r2, 800d068 <_realloc_r+0x24>
 800d05c:	f002 fcda 	bl	800fa14 <_free_r>
 800d060:	4625      	mov	r5, r4
 800d062:	4628      	mov	r0, r5
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	f003 fd11 	bl	8010a8e <_malloc_usable_size_r>
 800d06c:	4284      	cmp	r4, r0
 800d06e:	4606      	mov	r6, r0
 800d070:	d802      	bhi.n	800d078 <_realloc_r+0x34>
 800d072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d076:	d8f4      	bhi.n	800d062 <_realloc_r+0x1e>
 800d078:	4621      	mov	r1, r4
 800d07a:	4638      	mov	r0, r7
 800d07c:	f7ff ff56 	bl	800cf2c <_malloc_r>
 800d080:	4680      	mov	r8, r0
 800d082:	b908      	cbnz	r0, 800d088 <_realloc_r+0x44>
 800d084:	4645      	mov	r5, r8
 800d086:	e7ec      	b.n	800d062 <_realloc_r+0x1e>
 800d088:	42b4      	cmp	r4, r6
 800d08a:	4622      	mov	r2, r4
 800d08c:	4629      	mov	r1, r5
 800d08e:	bf28      	it	cs
 800d090:	4632      	movcs	r2, r6
 800d092:	f001 feb8 	bl	800ee06 <memcpy>
 800d096:	4629      	mov	r1, r5
 800d098:	4638      	mov	r0, r7
 800d09a:	f002 fcbb 	bl	800fa14 <_free_r>
 800d09e:	e7f1      	b.n	800d084 <_realloc_r+0x40>

0800d0a0 <sulp>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	4616      	mov	r6, r2
 800d0a8:	ec45 4b10 	vmov	d0, r4, r5
 800d0ac:	f003 fbb4 	bl	8010818 <__ulp>
 800d0b0:	b17e      	cbz	r6, 800d0d2 <sulp+0x32>
 800d0b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d0b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dd09      	ble.n	800d0d2 <sulp+0x32>
 800d0be:	051b      	lsls	r3, r3, #20
 800d0c0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d0ca:	ec41 0b17 	vmov	d7, r0, r1
 800d0ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d0d2:	bd70      	pop	{r4, r5, r6, pc}
 800d0d4:	0000      	movs	r0, r0
	...

0800d0d8 <_strtod_l>:
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	ed2d 8b0a 	vpush	{d8-d12}
 800d0e0:	b097      	sub	sp, #92	@ 0x5c
 800d0e2:	4688      	mov	r8, r1
 800d0e4:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	9212      	str	r2, [sp, #72]	@ 0x48
 800d0ea:	9005      	str	r0, [sp, #20]
 800d0ec:	f04f 0a00 	mov.w	sl, #0
 800d0f0:	f04f 0b00 	mov.w	fp, #0
 800d0f4:	460a      	mov	r2, r1
 800d0f6:	9211      	str	r2, [sp, #68]	@ 0x44
 800d0f8:	7811      	ldrb	r1, [r2, #0]
 800d0fa:	292b      	cmp	r1, #43	@ 0x2b
 800d0fc:	d04c      	beq.n	800d198 <_strtod_l+0xc0>
 800d0fe:	d839      	bhi.n	800d174 <_strtod_l+0x9c>
 800d100:	290d      	cmp	r1, #13
 800d102:	d833      	bhi.n	800d16c <_strtod_l+0x94>
 800d104:	2908      	cmp	r1, #8
 800d106:	d833      	bhi.n	800d170 <_strtod_l+0x98>
 800d108:	2900      	cmp	r1, #0
 800d10a:	d03c      	beq.n	800d186 <_strtod_l+0xae>
 800d10c:	2200      	movs	r2, #0
 800d10e:	9208      	str	r2, [sp, #32]
 800d110:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d112:	782a      	ldrb	r2, [r5, #0]
 800d114:	2a30      	cmp	r2, #48	@ 0x30
 800d116:	f040 80b7 	bne.w	800d288 <_strtod_l+0x1b0>
 800d11a:	786a      	ldrb	r2, [r5, #1]
 800d11c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d120:	2a58      	cmp	r2, #88	@ 0x58
 800d122:	d170      	bne.n	800d206 <_strtod_l+0x12e>
 800d124:	9302      	str	r3, [sp, #8]
 800d126:	9b08      	ldr	r3, [sp, #32]
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	ab12      	add	r3, sp, #72	@ 0x48
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	4a90      	ldr	r2, [pc, #576]	@ (800d370 <_strtod_l+0x298>)
 800d130:	9805      	ldr	r0, [sp, #20]
 800d132:	ab13      	add	r3, sp, #76	@ 0x4c
 800d134:	a911      	add	r1, sp, #68	@ 0x44
 800d136:	f002 fd1f 	bl	800fb78 <__gethex>
 800d13a:	f010 060f 	ands.w	r6, r0, #15
 800d13e:	4604      	mov	r4, r0
 800d140:	d005      	beq.n	800d14e <_strtod_l+0x76>
 800d142:	2e06      	cmp	r6, #6
 800d144:	d12a      	bne.n	800d19c <_strtod_l+0xc4>
 800d146:	3501      	adds	r5, #1
 800d148:	2300      	movs	r3, #0
 800d14a:	9511      	str	r5, [sp, #68]	@ 0x44
 800d14c:	9308      	str	r3, [sp, #32]
 800d14e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d150:	2b00      	cmp	r3, #0
 800d152:	f040 8537 	bne.w	800dbc4 <_strtod_l+0xaec>
 800d156:	9b08      	ldr	r3, [sp, #32]
 800d158:	ec4b ab10 	vmov	d0, sl, fp
 800d15c:	b1cb      	cbz	r3, 800d192 <_strtod_l+0xba>
 800d15e:	eeb1 0b40 	vneg.f64	d0, d0
 800d162:	b017      	add	sp, #92	@ 0x5c
 800d164:	ecbd 8b0a 	vpop	{d8-d12}
 800d168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16c:	2920      	cmp	r1, #32
 800d16e:	d1cd      	bne.n	800d10c <_strtod_l+0x34>
 800d170:	3201      	adds	r2, #1
 800d172:	e7c0      	b.n	800d0f6 <_strtod_l+0x1e>
 800d174:	292d      	cmp	r1, #45	@ 0x2d
 800d176:	d1c9      	bne.n	800d10c <_strtod_l+0x34>
 800d178:	2101      	movs	r1, #1
 800d17a:	9108      	str	r1, [sp, #32]
 800d17c:	1c51      	adds	r1, r2, #1
 800d17e:	9111      	str	r1, [sp, #68]	@ 0x44
 800d180:	7852      	ldrb	r2, [r2, #1]
 800d182:	2a00      	cmp	r2, #0
 800d184:	d1c4      	bne.n	800d110 <_strtod_l+0x38>
 800d186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d188:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f040 8517 	bne.w	800dbc0 <_strtod_l+0xae8>
 800d192:	ec4b ab10 	vmov	d0, sl, fp
 800d196:	e7e4      	b.n	800d162 <_strtod_l+0x8a>
 800d198:	2100      	movs	r1, #0
 800d19a:	e7ee      	b.n	800d17a <_strtod_l+0xa2>
 800d19c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d19e:	b13a      	cbz	r2, 800d1b0 <_strtod_l+0xd8>
 800d1a0:	2135      	movs	r1, #53	@ 0x35
 800d1a2:	a814      	add	r0, sp, #80	@ 0x50
 800d1a4:	f003 fc2f 	bl	8010a06 <__copybits>
 800d1a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d1aa:	9805      	ldr	r0, [sp, #20]
 800d1ac:	f003 f808 	bl	80101c0 <_Bfree>
 800d1b0:	1e73      	subs	r3, r6, #1
 800d1b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	d806      	bhi.n	800d1c6 <_strtod_l+0xee>
 800d1b8:	e8df f003 	tbb	[pc, r3]
 800d1bc:	201d0314 	.word	0x201d0314
 800d1c0:	14          	.byte	0x14
 800d1c1:	00          	.byte	0x00
 800d1c2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d1c6:	05e3      	lsls	r3, r4, #23
 800d1c8:	bf48      	it	mi
 800d1ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1d2:	0d1b      	lsrs	r3, r3, #20
 800d1d4:	051b      	lsls	r3, r3, #20
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1b9      	bne.n	800d14e <_strtod_l+0x76>
 800d1da:	f001 fde7 	bl	800edac <__errno>
 800d1de:	2322      	movs	r3, #34	@ 0x22
 800d1e0:	6003      	str	r3, [r0, #0]
 800d1e2:	e7b4      	b.n	800d14e <_strtod_l+0x76>
 800d1e4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d1e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d1ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d1f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d1f4:	e7e7      	b.n	800d1c6 <_strtod_l+0xee>
 800d1f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d378 <_strtod_l+0x2a0>
 800d1fa:	e7e4      	b.n	800d1c6 <_strtod_l+0xee>
 800d1fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d200:	f04f 3aff 	mov.w	sl, #4294967295
 800d204:	e7df      	b.n	800d1c6 <_strtod_l+0xee>
 800d206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d20c:	785b      	ldrb	r3, [r3, #1]
 800d20e:	2b30      	cmp	r3, #48	@ 0x30
 800d210:	d0f9      	beq.n	800d206 <_strtod_l+0x12e>
 800d212:	2b00      	cmp	r3, #0
 800d214:	d09b      	beq.n	800d14e <_strtod_l+0x76>
 800d216:	2301      	movs	r3, #1
 800d218:	9307      	str	r3, [sp, #28]
 800d21a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d21c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d21e:	2300      	movs	r3, #0
 800d220:	9306      	str	r3, [sp, #24]
 800d222:	4699      	mov	r9, r3
 800d224:	461d      	mov	r5, r3
 800d226:	220a      	movs	r2, #10
 800d228:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d22a:	7804      	ldrb	r4, [r0, #0]
 800d22c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d230:	b2d9      	uxtb	r1, r3
 800d232:	2909      	cmp	r1, #9
 800d234:	d92a      	bls.n	800d28c <_strtod_l+0x1b4>
 800d236:	494f      	ldr	r1, [pc, #316]	@ (800d374 <_strtod_l+0x29c>)
 800d238:	2201      	movs	r2, #1
 800d23a:	f001 fd4b 	bl	800ecd4 <strncmp>
 800d23e:	b398      	cbz	r0, 800d2a8 <_strtod_l+0x1d0>
 800d240:	2000      	movs	r0, #0
 800d242:	4622      	mov	r2, r4
 800d244:	462b      	mov	r3, r5
 800d246:	4607      	mov	r7, r0
 800d248:	4601      	mov	r1, r0
 800d24a:	2a65      	cmp	r2, #101	@ 0x65
 800d24c:	d001      	beq.n	800d252 <_strtod_l+0x17a>
 800d24e:	2a45      	cmp	r2, #69	@ 0x45
 800d250:	d118      	bne.n	800d284 <_strtod_l+0x1ac>
 800d252:	b91b      	cbnz	r3, 800d25c <_strtod_l+0x184>
 800d254:	9b07      	ldr	r3, [sp, #28]
 800d256:	4303      	orrs	r3, r0
 800d258:	d095      	beq.n	800d186 <_strtod_l+0xae>
 800d25a:	2300      	movs	r3, #0
 800d25c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d260:	f108 0201 	add.w	r2, r8, #1
 800d264:	9211      	str	r2, [sp, #68]	@ 0x44
 800d266:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d26a:	2a2b      	cmp	r2, #43	@ 0x2b
 800d26c:	d074      	beq.n	800d358 <_strtod_l+0x280>
 800d26e:	2a2d      	cmp	r2, #45	@ 0x2d
 800d270:	d07a      	beq.n	800d368 <_strtod_l+0x290>
 800d272:	f04f 0e00 	mov.w	lr, #0
 800d276:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d27a:	2c09      	cmp	r4, #9
 800d27c:	f240 8082 	bls.w	800d384 <_strtod_l+0x2ac>
 800d280:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d284:	2400      	movs	r4, #0
 800d286:	e09d      	b.n	800d3c4 <_strtod_l+0x2ec>
 800d288:	2300      	movs	r3, #0
 800d28a:	e7c5      	b.n	800d218 <_strtod_l+0x140>
 800d28c:	2d08      	cmp	r5, #8
 800d28e:	bfc8      	it	gt
 800d290:	9906      	ldrgt	r1, [sp, #24]
 800d292:	f100 0001 	add.w	r0, r0, #1
 800d296:	bfca      	itet	gt
 800d298:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d29c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d2a0:	9306      	strgt	r3, [sp, #24]
 800d2a2:	3501      	adds	r5, #1
 800d2a4:	9011      	str	r0, [sp, #68]	@ 0x44
 800d2a6:	e7bf      	b.n	800d228 <_strtod_l+0x150>
 800d2a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	9211      	str	r2, [sp, #68]	@ 0x44
 800d2ae:	785a      	ldrb	r2, [r3, #1]
 800d2b0:	b3bd      	cbz	r5, 800d322 <_strtod_l+0x24a>
 800d2b2:	4607      	mov	r7, r0
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d2ba:	2909      	cmp	r1, #9
 800d2bc:	d912      	bls.n	800d2e4 <_strtod_l+0x20c>
 800d2be:	2101      	movs	r1, #1
 800d2c0:	e7c3      	b.n	800d24a <_strtod_l+0x172>
 800d2c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	9211      	str	r2, [sp, #68]	@ 0x44
 800d2c8:	785a      	ldrb	r2, [r3, #1]
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	2a30      	cmp	r2, #48	@ 0x30
 800d2ce:	d0f8      	beq.n	800d2c2 <_strtod_l+0x1ea>
 800d2d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d2d4:	2b08      	cmp	r3, #8
 800d2d6:	f200 847a 	bhi.w	800dbce <_strtod_l+0xaf6>
 800d2da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2de:	4607      	mov	r7, r0
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	3a30      	subs	r2, #48	@ 0x30
 800d2e6:	f100 0101 	add.w	r1, r0, #1
 800d2ea:	d014      	beq.n	800d316 <_strtod_l+0x23e>
 800d2ec:	440f      	add	r7, r1
 800d2ee:	469c      	mov	ip, r3
 800d2f0:	f04f 0e0a 	mov.w	lr, #10
 800d2f4:	f10c 0401 	add.w	r4, ip, #1
 800d2f8:	1ae6      	subs	r6, r4, r3
 800d2fa:	42b1      	cmp	r1, r6
 800d2fc:	dc13      	bgt.n	800d326 <_strtod_l+0x24e>
 800d2fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d302:	1819      	adds	r1, r3, r0
 800d304:	2908      	cmp	r1, #8
 800d306:	f103 0301 	add.w	r3, r3, #1
 800d30a:	4403      	add	r3, r0
 800d30c:	dc19      	bgt.n	800d342 <_strtod_l+0x26a>
 800d30e:	210a      	movs	r1, #10
 800d310:	fb01 2909 	mla	r9, r1, r9, r2
 800d314:	2100      	movs	r1, #0
 800d316:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d318:	1c50      	adds	r0, r2, #1
 800d31a:	9011      	str	r0, [sp, #68]	@ 0x44
 800d31c:	7852      	ldrb	r2, [r2, #1]
 800d31e:	4608      	mov	r0, r1
 800d320:	e7c9      	b.n	800d2b6 <_strtod_l+0x1de>
 800d322:	4628      	mov	r0, r5
 800d324:	e7d2      	b.n	800d2cc <_strtod_l+0x1f4>
 800d326:	f1bc 0f08 	cmp.w	ip, #8
 800d32a:	dc03      	bgt.n	800d334 <_strtod_l+0x25c>
 800d32c:	fb0e f909 	mul.w	r9, lr, r9
 800d330:	46a4      	mov	ip, r4
 800d332:	e7df      	b.n	800d2f4 <_strtod_l+0x21c>
 800d334:	2c10      	cmp	r4, #16
 800d336:	bfde      	ittt	le
 800d338:	9e06      	ldrle	r6, [sp, #24]
 800d33a:	fb0e f606 	mulle.w	r6, lr, r6
 800d33e:	9606      	strle	r6, [sp, #24]
 800d340:	e7f6      	b.n	800d330 <_strtod_l+0x258>
 800d342:	290f      	cmp	r1, #15
 800d344:	bfdf      	itttt	le
 800d346:	9806      	ldrle	r0, [sp, #24]
 800d348:	210a      	movle	r1, #10
 800d34a:	fb01 2200 	mlale	r2, r1, r0, r2
 800d34e:	9206      	strle	r2, [sp, #24]
 800d350:	e7e0      	b.n	800d314 <_strtod_l+0x23c>
 800d352:	2700      	movs	r7, #0
 800d354:	2101      	movs	r1, #1
 800d356:	e77d      	b.n	800d254 <_strtod_l+0x17c>
 800d358:	f04f 0e00 	mov.w	lr, #0
 800d35c:	f108 0202 	add.w	r2, r8, #2
 800d360:	9211      	str	r2, [sp, #68]	@ 0x44
 800d362:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d366:	e786      	b.n	800d276 <_strtod_l+0x19e>
 800d368:	f04f 0e01 	mov.w	lr, #1
 800d36c:	e7f6      	b.n	800d35c <_strtod_l+0x284>
 800d36e:	bf00      	nop
 800d370:	08011804 	.word	0x08011804
 800d374:	08011618 	.word	0x08011618
 800d378:	7ff00000 	.word	0x7ff00000
 800d37c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d37e:	1c54      	adds	r4, r2, #1
 800d380:	9411      	str	r4, [sp, #68]	@ 0x44
 800d382:	7852      	ldrb	r2, [r2, #1]
 800d384:	2a30      	cmp	r2, #48	@ 0x30
 800d386:	d0f9      	beq.n	800d37c <_strtod_l+0x2a4>
 800d388:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d38c:	2c08      	cmp	r4, #8
 800d38e:	f63f af79 	bhi.w	800d284 <_strtod_l+0x1ac>
 800d392:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d396:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d398:	9209      	str	r2, [sp, #36]	@ 0x24
 800d39a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d39c:	1c54      	adds	r4, r2, #1
 800d39e:	9411      	str	r4, [sp, #68]	@ 0x44
 800d3a0:	7852      	ldrb	r2, [r2, #1]
 800d3a2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800d3a6:	2e09      	cmp	r6, #9
 800d3a8:	d937      	bls.n	800d41a <_strtod_l+0x342>
 800d3aa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d3ac:	1ba4      	subs	r4, r4, r6
 800d3ae:	2c08      	cmp	r4, #8
 800d3b0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d3b4:	dc02      	bgt.n	800d3bc <_strtod_l+0x2e4>
 800d3b6:	4564      	cmp	r4, ip
 800d3b8:	bfa8      	it	ge
 800d3ba:	4664      	movge	r4, ip
 800d3bc:	f1be 0f00 	cmp.w	lr, #0
 800d3c0:	d000      	beq.n	800d3c4 <_strtod_l+0x2ec>
 800d3c2:	4264      	negs	r4, r4
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d14d      	bne.n	800d464 <_strtod_l+0x38c>
 800d3c8:	9b07      	ldr	r3, [sp, #28]
 800d3ca:	4318      	orrs	r0, r3
 800d3cc:	f47f aebf 	bne.w	800d14e <_strtod_l+0x76>
 800d3d0:	2900      	cmp	r1, #0
 800d3d2:	f47f aed8 	bne.w	800d186 <_strtod_l+0xae>
 800d3d6:	2a69      	cmp	r2, #105	@ 0x69
 800d3d8:	d027      	beq.n	800d42a <_strtod_l+0x352>
 800d3da:	dc24      	bgt.n	800d426 <_strtod_l+0x34e>
 800d3dc:	2a49      	cmp	r2, #73	@ 0x49
 800d3de:	d024      	beq.n	800d42a <_strtod_l+0x352>
 800d3e0:	2a4e      	cmp	r2, #78	@ 0x4e
 800d3e2:	f47f aed0 	bne.w	800d186 <_strtod_l+0xae>
 800d3e6:	4997      	ldr	r1, [pc, #604]	@ (800d644 <_strtod_l+0x56c>)
 800d3e8:	a811      	add	r0, sp, #68	@ 0x44
 800d3ea:	f002 fde7 	bl	800ffbc <__match>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f aec9 	beq.w	800d186 <_strtod_l+0xae>
 800d3f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b28      	cmp	r3, #40	@ 0x28
 800d3fa:	d12d      	bne.n	800d458 <_strtod_l+0x380>
 800d3fc:	4992      	ldr	r1, [pc, #584]	@ (800d648 <_strtod_l+0x570>)
 800d3fe:	aa14      	add	r2, sp, #80	@ 0x50
 800d400:	a811      	add	r0, sp, #68	@ 0x44
 800d402:	f002 fdef 	bl	800ffe4 <__hexnan>
 800d406:	2805      	cmp	r0, #5
 800d408:	d126      	bne.n	800d458 <_strtod_l+0x380>
 800d40a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d40c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d410:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d414:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d418:	e699      	b.n	800d14e <_strtod_l+0x76>
 800d41a:	240a      	movs	r4, #10
 800d41c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d420:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d424:	e7b9      	b.n	800d39a <_strtod_l+0x2c2>
 800d426:	2a6e      	cmp	r2, #110	@ 0x6e
 800d428:	e7db      	b.n	800d3e2 <_strtod_l+0x30a>
 800d42a:	4988      	ldr	r1, [pc, #544]	@ (800d64c <_strtod_l+0x574>)
 800d42c:	a811      	add	r0, sp, #68	@ 0x44
 800d42e:	f002 fdc5 	bl	800ffbc <__match>
 800d432:	2800      	cmp	r0, #0
 800d434:	f43f aea7 	beq.w	800d186 <_strtod_l+0xae>
 800d438:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d43a:	4985      	ldr	r1, [pc, #532]	@ (800d650 <_strtod_l+0x578>)
 800d43c:	3b01      	subs	r3, #1
 800d43e:	a811      	add	r0, sp, #68	@ 0x44
 800d440:	9311      	str	r3, [sp, #68]	@ 0x44
 800d442:	f002 fdbb 	bl	800ffbc <__match>
 800d446:	b910      	cbnz	r0, 800d44e <_strtod_l+0x376>
 800d448:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d44a:	3301      	adds	r3, #1
 800d44c:	9311      	str	r3, [sp, #68]	@ 0x44
 800d44e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d664 <_strtod_l+0x58c>
 800d452:	f04f 0a00 	mov.w	sl, #0
 800d456:	e67a      	b.n	800d14e <_strtod_l+0x76>
 800d458:	487e      	ldr	r0, [pc, #504]	@ (800d654 <_strtod_l+0x57c>)
 800d45a:	f001 fce5 	bl	800ee28 <nan>
 800d45e:	ec5b ab10 	vmov	sl, fp, d0
 800d462:	e674      	b.n	800d14e <_strtod_l+0x76>
 800d464:	ee07 9a90 	vmov	s15, r9
 800d468:	1be2      	subs	r2, r4, r7
 800d46a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d46e:	2d00      	cmp	r5, #0
 800d470:	bf08      	it	eq
 800d472:	461d      	moveq	r5, r3
 800d474:	2b10      	cmp	r3, #16
 800d476:	9209      	str	r2, [sp, #36]	@ 0x24
 800d478:	461a      	mov	r2, r3
 800d47a:	bfa8      	it	ge
 800d47c:	2210      	movge	r2, #16
 800d47e:	2b09      	cmp	r3, #9
 800d480:	ec5b ab17 	vmov	sl, fp, d7
 800d484:	dc15      	bgt.n	800d4b2 <_strtod_l+0x3da>
 800d486:	1be1      	subs	r1, r4, r7
 800d488:	2900      	cmp	r1, #0
 800d48a:	f43f ae60 	beq.w	800d14e <_strtod_l+0x76>
 800d48e:	eba4 0107 	sub.w	r1, r4, r7
 800d492:	dd72      	ble.n	800d57a <_strtod_l+0x4a2>
 800d494:	2916      	cmp	r1, #22
 800d496:	dc59      	bgt.n	800d54c <_strtod_l+0x474>
 800d498:	4b6f      	ldr	r3, [pc, #444]	@ (800d658 <_strtod_l+0x580>)
 800d49a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d49c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4a0:	ed93 7b00 	vldr	d7, [r3]
 800d4a4:	ec4b ab16 	vmov	d6, sl, fp
 800d4a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4ac:	ec5b ab17 	vmov	sl, fp, d7
 800d4b0:	e64d      	b.n	800d14e <_strtod_l+0x76>
 800d4b2:	4969      	ldr	r1, [pc, #420]	@ (800d658 <_strtod_l+0x580>)
 800d4b4:	eddd 6a06 	vldr	s13, [sp, #24]
 800d4b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d4bc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d4c0:	2b0f      	cmp	r3, #15
 800d4c2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d4c6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d4ca:	ec5b ab16 	vmov	sl, fp, d6
 800d4ce:	ddda      	ble.n	800d486 <_strtod_l+0x3ae>
 800d4d0:	1a9a      	subs	r2, r3, r2
 800d4d2:	1be1      	subs	r1, r4, r7
 800d4d4:	440a      	add	r2, r1
 800d4d6:	2a00      	cmp	r2, #0
 800d4d8:	f340 8094 	ble.w	800d604 <_strtod_l+0x52c>
 800d4dc:	f012 000f 	ands.w	r0, r2, #15
 800d4e0:	d00a      	beq.n	800d4f8 <_strtod_l+0x420>
 800d4e2:	495d      	ldr	r1, [pc, #372]	@ (800d658 <_strtod_l+0x580>)
 800d4e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d4e8:	ed91 7b00 	vldr	d7, [r1]
 800d4ec:	ec4b ab16 	vmov	d6, sl, fp
 800d4f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4f4:	ec5b ab17 	vmov	sl, fp, d7
 800d4f8:	f032 020f 	bics.w	r2, r2, #15
 800d4fc:	d073      	beq.n	800d5e6 <_strtod_l+0x50e>
 800d4fe:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d502:	dd47      	ble.n	800d594 <_strtod_l+0x4bc>
 800d504:	2400      	movs	r4, #0
 800d506:	4625      	mov	r5, r4
 800d508:	9407      	str	r4, [sp, #28]
 800d50a:	4626      	mov	r6, r4
 800d50c:	9a05      	ldr	r2, [sp, #20]
 800d50e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d664 <_strtod_l+0x58c>
 800d512:	2322      	movs	r3, #34	@ 0x22
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	f04f 0a00 	mov.w	sl, #0
 800d51a:	9b07      	ldr	r3, [sp, #28]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f43f ae16 	beq.w	800d14e <_strtod_l+0x76>
 800d522:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d524:	9805      	ldr	r0, [sp, #20]
 800d526:	f002 fe4b 	bl	80101c0 <_Bfree>
 800d52a:	9805      	ldr	r0, [sp, #20]
 800d52c:	4631      	mov	r1, r6
 800d52e:	f002 fe47 	bl	80101c0 <_Bfree>
 800d532:	9805      	ldr	r0, [sp, #20]
 800d534:	4629      	mov	r1, r5
 800d536:	f002 fe43 	bl	80101c0 <_Bfree>
 800d53a:	9907      	ldr	r1, [sp, #28]
 800d53c:	9805      	ldr	r0, [sp, #20]
 800d53e:	f002 fe3f 	bl	80101c0 <_Bfree>
 800d542:	9805      	ldr	r0, [sp, #20]
 800d544:	4621      	mov	r1, r4
 800d546:	f002 fe3b 	bl	80101c0 <_Bfree>
 800d54a:	e600      	b.n	800d14e <_strtod_l+0x76>
 800d54c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d550:	1be0      	subs	r0, r4, r7
 800d552:	4281      	cmp	r1, r0
 800d554:	dbbc      	blt.n	800d4d0 <_strtod_l+0x3f8>
 800d556:	4a40      	ldr	r2, [pc, #256]	@ (800d658 <_strtod_l+0x580>)
 800d558:	f1c3 030f 	rsb	r3, r3, #15
 800d55c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d560:	ed91 7b00 	vldr	d7, [r1]
 800d564:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d566:	ec4b ab16 	vmov	d6, sl, fp
 800d56a:	1acb      	subs	r3, r1, r3
 800d56c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d570:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d574:	ed92 6b00 	vldr	d6, [r2]
 800d578:	e796      	b.n	800d4a8 <_strtod_l+0x3d0>
 800d57a:	3116      	adds	r1, #22
 800d57c:	dba8      	blt.n	800d4d0 <_strtod_l+0x3f8>
 800d57e:	4b36      	ldr	r3, [pc, #216]	@ (800d658 <_strtod_l+0x580>)
 800d580:	1b3c      	subs	r4, r7, r4
 800d582:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d586:	ed94 7b00 	vldr	d7, [r4]
 800d58a:	ec4b ab16 	vmov	d6, sl, fp
 800d58e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d592:	e78b      	b.n	800d4ac <_strtod_l+0x3d4>
 800d594:	2000      	movs	r0, #0
 800d596:	ec4b ab17 	vmov	d7, sl, fp
 800d59a:	4e30      	ldr	r6, [pc, #192]	@ (800d65c <_strtod_l+0x584>)
 800d59c:	1112      	asrs	r2, r2, #4
 800d59e:	4601      	mov	r1, r0
 800d5a0:	2a01      	cmp	r2, #1
 800d5a2:	dc23      	bgt.n	800d5ec <_strtod_l+0x514>
 800d5a4:	b108      	cbz	r0, 800d5aa <_strtod_l+0x4d2>
 800d5a6:	ec5b ab17 	vmov	sl, fp, d7
 800d5aa:	4a2c      	ldr	r2, [pc, #176]	@ (800d65c <_strtod_l+0x584>)
 800d5ac:	482c      	ldr	r0, [pc, #176]	@ (800d660 <_strtod_l+0x588>)
 800d5ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d5b2:	ed92 7b00 	vldr	d7, [r2]
 800d5b6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d5ba:	ec4b ab16 	vmov	d6, sl, fp
 800d5be:	4a29      	ldr	r2, [pc, #164]	@ (800d664 <_strtod_l+0x58c>)
 800d5c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5c4:	ee17 1a90 	vmov	r1, s15
 800d5c8:	400a      	ands	r2, r1
 800d5ca:	4282      	cmp	r2, r0
 800d5cc:	ec5b ab17 	vmov	sl, fp, d7
 800d5d0:	d898      	bhi.n	800d504 <_strtod_l+0x42c>
 800d5d2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d5d6:	4282      	cmp	r2, r0
 800d5d8:	bf86      	itte	hi
 800d5da:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d668 <_strtod_l+0x590>
 800d5de:	f04f 3aff 	movhi.w	sl, #4294967295
 800d5e2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	9206      	str	r2, [sp, #24]
 800d5ea:	e076      	b.n	800d6da <_strtod_l+0x602>
 800d5ec:	f012 0f01 	tst.w	r2, #1
 800d5f0:	d004      	beq.n	800d5fc <_strtod_l+0x524>
 800d5f2:	ed96 6b00 	vldr	d6, [r6]
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5fc:	3101      	adds	r1, #1
 800d5fe:	1052      	asrs	r2, r2, #1
 800d600:	3608      	adds	r6, #8
 800d602:	e7cd      	b.n	800d5a0 <_strtod_l+0x4c8>
 800d604:	d0ef      	beq.n	800d5e6 <_strtod_l+0x50e>
 800d606:	4252      	negs	r2, r2
 800d608:	f012 000f 	ands.w	r0, r2, #15
 800d60c:	d00a      	beq.n	800d624 <_strtod_l+0x54c>
 800d60e:	4912      	ldr	r1, [pc, #72]	@ (800d658 <_strtod_l+0x580>)
 800d610:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d614:	ed91 7b00 	vldr	d7, [r1]
 800d618:	ec4b ab16 	vmov	d6, sl, fp
 800d61c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d620:	ec5b ab17 	vmov	sl, fp, d7
 800d624:	1112      	asrs	r2, r2, #4
 800d626:	d0de      	beq.n	800d5e6 <_strtod_l+0x50e>
 800d628:	2a1f      	cmp	r2, #31
 800d62a:	dd1f      	ble.n	800d66c <_strtod_l+0x594>
 800d62c:	2400      	movs	r4, #0
 800d62e:	4625      	mov	r5, r4
 800d630:	9407      	str	r4, [sp, #28]
 800d632:	4626      	mov	r6, r4
 800d634:	9a05      	ldr	r2, [sp, #20]
 800d636:	2322      	movs	r3, #34	@ 0x22
 800d638:	f04f 0a00 	mov.w	sl, #0
 800d63c:	f04f 0b00 	mov.w	fp, #0
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	e76a      	b.n	800d51a <_strtod_l+0x442>
 800d644:	08011627 	.word	0x08011627
 800d648:	080117f0 	.word	0x080117f0
 800d64c:	0801161f 	.word	0x0801161f
 800d650:	0801165e 	.word	0x0801165e
 800d654:	080117ed 	.word	0x080117ed
 800d658:	08011978 	.word	0x08011978
 800d65c:	08011950 	.word	0x08011950
 800d660:	7ca00000 	.word	0x7ca00000
 800d664:	7ff00000 	.word	0x7ff00000
 800d668:	7fefffff 	.word	0x7fefffff
 800d66c:	f012 0110 	ands.w	r1, r2, #16
 800d670:	bf18      	it	ne
 800d672:	216a      	movne	r1, #106	@ 0x6a
 800d674:	9106      	str	r1, [sp, #24]
 800d676:	ec4b ab17 	vmov	d7, sl, fp
 800d67a:	49af      	ldr	r1, [pc, #700]	@ (800d938 <_strtod_l+0x860>)
 800d67c:	2000      	movs	r0, #0
 800d67e:	07d6      	lsls	r6, r2, #31
 800d680:	d504      	bpl.n	800d68c <_strtod_l+0x5b4>
 800d682:	ed91 6b00 	vldr	d6, [r1]
 800d686:	2001      	movs	r0, #1
 800d688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d68c:	1052      	asrs	r2, r2, #1
 800d68e:	f101 0108 	add.w	r1, r1, #8
 800d692:	d1f4      	bne.n	800d67e <_strtod_l+0x5a6>
 800d694:	b108      	cbz	r0, 800d69a <_strtod_l+0x5c2>
 800d696:	ec5b ab17 	vmov	sl, fp, d7
 800d69a:	9a06      	ldr	r2, [sp, #24]
 800d69c:	b1b2      	cbz	r2, 800d6cc <_strtod_l+0x5f4>
 800d69e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d6a2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d6a6:	2a00      	cmp	r2, #0
 800d6a8:	4658      	mov	r0, fp
 800d6aa:	dd0f      	ble.n	800d6cc <_strtod_l+0x5f4>
 800d6ac:	2a1f      	cmp	r2, #31
 800d6ae:	dd55      	ble.n	800d75c <_strtod_l+0x684>
 800d6b0:	2a34      	cmp	r2, #52	@ 0x34
 800d6b2:	bfde      	ittt	le
 800d6b4:	f04f 32ff 	movle.w	r2, #4294967295
 800d6b8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d6bc:	408a      	lslle	r2, r1
 800d6be:	f04f 0a00 	mov.w	sl, #0
 800d6c2:	bfcc      	ite	gt
 800d6c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d6c8:	ea02 0b00 	andle.w	fp, r2, r0
 800d6cc:	ec4b ab17 	vmov	d7, sl, fp
 800d6d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d8:	d0a8      	beq.n	800d62c <_strtod_l+0x554>
 800d6da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6dc:	9805      	ldr	r0, [sp, #20]
 800d6de:	f8cd 9000 	str.w	r9, [sp]
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	f002 fdd4 	bl	8010290 <__s2b>
 800d6e8:	9007      	str	r0, [sp, #28]
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	f43f af0a 	beq.w	800d504 <_strtod_l+0x42c>
 800d6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f2:	1b3f      	subs	r7, r7, r4
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bfb4      	ite	lt
 800d6f8:	463b      	movlt	r3, r7
 800d6fa:	2300      	movge	r3, #0
 800d6fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800d928 <_strtod_l+0x850>
 800d704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d708:	2400      	movs	r4, #0
 800d70a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d70c:	4625      	mov	r5, r4
 800d70e:	9b07      	ldr	r3, [sp, #28]
 800d710:	9805      	ldr	r0, [sp, #20]
 800d712:	6859      	ldr	r1, [r3, #4]
 800d714:	f002 fd14 	bl	8010140 <_Balloc>
 800d718:	4606      	mov	r6, r0
 800d71a:	2800      	cmp	r0, #0
 800d71c:	f43f aef6 	beq.w	800d50c <_strtod_l+0x434>
 800d720:	9b07      	ldr	r3, [sp, #28]
 800d722:	691a      	ldr	r2, [r3, #16]
 800d724:	ec4b ab19 	vmov	d9, sl, fp
 800d728:	3202      	adds	r2, #2
 800d72a:	f103 010c 	add.w	r1, r3, #12
 800d72e:	0092      	lsls	r2, r2, #2
 800d730:	300c      	adds	r0, #12
 800d732:	f001 fb68 	bl	800ee06 <memcpy>
 800d736:	eeb0 0b49 	vmov.f64	d0, d9
 800d73a:	9805      	ldr	r0, [sp, #20]
 800d73c:	aa14      	add	r2, sp, #80	@ 0x50
 800d73e:	a913      	add	r1, sp, #76	@ 0x4c
 800d740:	f003 f8da 	bl	80108f8 <__d2b>
 800d744:	9012      	str	r0, [sp, #72]	@ 0x48
 800d746:	2800      	cmp	r0, #0
 800d748:	f43f aee0 	beq.w	800d50c <_strtod_l+0x434>
 800d74c:	9805      	ldr	r0, [sp, #20]
 800d74e:	2101      	movs	r1, #1
 800d750:	f002 fe34 	bl	80103bc <__i2b>
 800d754:	4605      	mov	r5, r0
 800d756:	b940      	cbnz	r0, 800d76a <_strtod_l+0x692>
 800d758:	2500      	movs	r5, #0
 800d75a:	e6d7      	b.n	800d50c <_strtod_l+0x434>
 800d75c:	f04f 31ff 	mov.w	r1, #4294967295
 800d760:	fa01 f202 	lsl.w	r2, r1, r2
 800d764:	ea02 0a0a 	and.w	sl, r2, sl
 800d768:	e7b0      	b.n	800d6cc <_strtod_l+0x5f4>
 800d76a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d76c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d76e:	2f00      	cmp	r7, #0
 800d770:	bfab      	itete	ge
 800d772:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d774:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d776:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d77a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d77e:	bfac      	ite	ge
 800d780:	eb07 0903 	addge.w	r9, r7, r3
 800d784:	eba3 0807 	sublt.w	r8, r3, r7
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	1aff      	subs	r7, r7, r3
 800d78c:	4417      	add	r7, r2
 800d78e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d792:	4a6a      	ldr	r2, [pc, #424]	@ (800d93c <_strtod_l+0x864>)
 800d794:	3f01      	subs	r7, #1
 800d796:	4297      	cmp	r7, r2
 800d798:	da51      	bge.n	800d83e <_strtod_l+0x766>
 800d79a:	1bd1      	subs	r1, r2, r7
 800d79c:	291f      	cmp	r1, #31
 800d79e:	eba3 0301 	sub.w	r3, r3, r1
 800d7a2:	f04f 0201 	mov.w	r2, #1
 800d7a6:	dc3e      	bgt.n	800d826 <_strtod_l+0x74e>
 800d7a8:	408a      	lsls	r2, r1
 800d7aa:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d7b0:	eb09 0703 	add.w	r7, r9, r3
 800d7b4:	4498      	add	r8, r3
 800d7b6:	9b06      	ldr	r3, [sp, #24]
 800d7b8:	45b9      	cmp	r9, r7
 800d7ba:	4498      	add	r8, r3
 800d7bc:	464b      	mov	r3, r9
 800d7be:	bfa8      	it	ge
 800d7c0:	463b      	movge	r3, r7
 800d7c2:	4543      	cmp	r3, r8
 800d7c4:	bfa8      	it	ge
 800d7c6:	4643      	movge	r3, r8
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	bfc2      	ittt	gt
 800d7cc:	1aff      	subgt	r7, r7, r3
 800d7ce:	eba8 0803 	subgt.w	r8, r8, r3
 800d7d2:	eba9 0903 	subgt.w	r9, r9, r3
 800d7d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	dd16      	ble.n	800d80a <_strtod_l+0x732>
 800d7dc:	4629      	mov	r1, r5
 800d7de:	9805      	ldr	r0, [sp, #20]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	f002 fea3 	bl	801052c <__pow5mult>
 800d7e6:	4605      	mov	r5, r0
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0b5      	beq.n	800d758 <_strtod_l+0x680>
 800d7ec:	4601      	mov	r1, r0
 800d7ee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d7f0:	9805      	ldr	r0, [sp, #20]
 800d7f2:	f002 fdf9 	bl	80103e8 <__multiply>
 800d7f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	f43f ae87 	beq.w	800d50c <_strtod_l+0x434>
 800d7fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d800:	9805      	ldr	r0, [sp, #20]
 800d802:	f002 fcdd 	bl	80101c0 <_Bfree>
 800d806:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d808:	9312      	str	r3, [sp, #72]	@ 0x48
 800d80a:	2f00      	cmp	r7, #0
 800d80c:	dc1b      	bgt.n	800d846 <_strtod_l+0x76e>
 800d80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d810:	2b00      	cmp	r3, #0
 800d812:	dd21      	ble.n	800d858 <_strtod_l+0x780>
 800d814:	4631      	mov	r1, r6
 800d816:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d818:	9805      	ldr	r0, [sp, #20]
 800d81a:	f002 fe87 	bl	801052c <__pow5mult>
 800d81e:	4606      	mov	r6, r0
 800d820:	b9d0      	cbnz	r0, 800d858 <_strtod_l+0x780>
 800d822:	2600      	movs	r6, #0
 800d824:	e672      	b.n	800d50c <_strtod_l+0x434>
 800d826:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d82a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d82e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d832:	37e2      	adds	r7, #226	@ 0xe2
 800d834:	fa02 f107 	lsl.w	r1, r2, r7
 800d838:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d83a:	920c      	str	r2, [sp, #48]	@ 0x30
 800d83c:	e7b8      	b.n	800d7b0 <_strtod_l+0x6d8>
 800d83e:	2200      	movs	r2, #0
 800d840:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d842:	2201      	movs	r2, #1
 800d844:	e7f9      	b.n	800d83a <_strtod_l+0x762>
 800d846:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d848:	9805      	ldr	r0, [sp, #20]
 800d84a:	463a      	mov	r2, r7
 800d84c:	f002 fec8 	bl	80105e0 <__lshift>
 800d850:	9012      	str	r0, [sp, #72]	@ 0x48
 800d852:	2800      	cmp	r0, #0
 800d854:	d1db      	bne.n	800d80e <_strtod_l+0x736>
 800d856:	e659      	b.n	800d50c <_strtod_l+0x434>
 800d858:	f1b8 0f00 	cmp.w	r8, #0
 800d85c:	dd07      	ble.n	800d86e <_strtod_l+0x796>
 800d85e:	4631      	mov	r1, r6
 800d860:	9805      	ldr	r0, [sp, #20]
 800d862:	4642      	mov	r2, r8
 800d864:	f002 febc 	bl	80105e0 <__lshift>
 800d868:	4606      	mov	r6, r0
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d0d9      	beq.n	800d822 <_strtod_l+0x74a>
 800d86e:	f1b9 0f00 	cmp.w	r9, #0
 800d872:	dd08      	ble.n	800d886 <_strtod_l+0x7ae>
 800d874:	4629      	mov	r1, r5
 800d876:	9805      	ldr	r0, [sp, #20]
 800d878:	464a      	mov	r2, r9
 800d87a:	f002 feb1 	bl	80105e0 <__lshift>
 800d87e:	4605      	mov	r5, r0
 800d880:	2800      	cmp	r0, #0
 800d882:	f43f ae43 	beq.w	800d50c <_strtod_l+0x434>
 800d886:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d888:	9805      	ldr	r0, [sp, #20]
 800d88a:	4632      	mov	r2, r6
 800d88c:	f002 ff30 	bl	80106f0 <__mdiff>
 800d890:	4604      	mov	r4, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	f43f ae3a 	beq.w	800d50c <_strtod_l+0x434>
 800d898:	2300      	movs	r3, #0
 800d89a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d89e:	60c3      	str	r3, [r0, #12]
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f002 ff09 	bl	80106b8 <__mcmp>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	da4c      	bge.n	800d944 <_strtod_l+0x86c>
 800d8aa:	ea58 080a 	orrs.w	r8, r8, sl
 800d8ae:	d172      	bne.n	800d996 <_strtod_l+0x8be>
 800d8b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d16e      	bne.n	800d996 <_strtod_l+0x8be>
 800d8b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8bc:	0d1b      	lsrs	r3, r3, #20
 800d8be:	051b      	lsls	r3, r3, #20
 800d8c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d8c4:	d967      	bls.n	800d996 <_strtod_l+0x8be>
 800d8c6:	6963      	ldr	r3, [r4, #20]
 800d8c8:	b913      	cbnz	r3, 800d8d0 <_strtod_l+0x7f8>
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	dd62      	ble.n	800d996 <_strtod_l+0x8be>
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	9805      	ldr	r0, [sp, #20]
 800d8d6:	f002 fe83 	bl	80105e0 <__lshift>
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4604      	mov	r4, r0
 800d8de:	f002 feeb 	bl	80106b8 <__mcmp>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	dd57      	ble.n	800d996 <_strtod_l+0x8be>
 800d8e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8ea:	9a06      	ldr	r2, [sp, #24]
 800d8ec:	0d1b      	lsrs	r3, r3, #20
 800d8ee:	051b      	lsls	r3, r3, #20
 800d8f0:	2a00      	cmp	r2, #0
 800d8f2:	d06e      	beq.n	800d9d2 <_strtod_l+0x8fa>
 800d8f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d8f8:	d86b      	bhi.n	800d9d2 <_strtod_l+0x8fa>
 800d8fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d8fe:	f67f ae99 	bls.w	800d634 <_strtod_l+0x55c>
 800d902:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800d930 <_strtod_l+0x858>
 800d906:	ec4b ab16 	vmov	d6, sl, fp
 800d90a:	4b0d      	ldr	r3, [pc, #52]	@ (800d940 <_strtod_l+0x868>)
 800d90c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d910:	ee17 2a90 	vmov	r2, s15
 800d914:	4013      	ands	r3, r2
 800d916:	ec5b ab17 	vmov	sl, fp, d7
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f47f ae01 	bne.w	800d522 <_strtod_l+0x44a>
 800d920:	9a05      	ldr	r2, [sp, #20]
 800d922:	2322      	movs	r3, #34	@ 0x22
 800d924:	6013      	str	r3, [r2, #0]
 800d926:	e5fc      	b.n	800d522 <_strtod_l+0x44a>
 800d928:	ffc00000 	.word	0xffc00000
 800d92c:	41dfffff 	.word	0x41dfffff
 800d930:	00000000 	.word	0x00000000
 800d934:	39500000 	.word	0x39500000
 800d938:	08011818 	.word	0x08011818
 800d93c:	fffffc02 	.word	0xfffffc02
 800d940:	7ff00000 	.word	0x7ff00000
 800d944:	46d9      	mov	r9, fp
 800d946:	d15d      	bne.n	800da04 <_strtod_l+0x92c>
 800d948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d94c:	f1b8 0f00 	cmp.w	r8, #0
 800d950:	d02a      	beq.n	800d9a8 <_strtod_l+0x8d0>
 800d952:	4aa9      	ldr	r2, [pc, #676]	@ (800dbf8 <_strtod_l+0xb20>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d12a      	bne.n	800d9ae <_strtod_l+0x8d6>
 800d958:	9b06      	ldr	r3, [sp, #24]
 800d95a:	4652      	mov	r2, sl
 800d95c:	b1fb      	cbz	r3, 800d99e <_strtod_l+0x8c6>
 800d95e:	4ba7      	ldr	r3, [pc, #668]	@ (800dbfc <_strtod_l+0xb24>)
 800d960:	ea0b 0303 	and.w	r3, fp, r3
 800d964:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d968:	f04f 31ff 	mov.w	r1, #4294967295
 800d96c:	d81a      	bhi.n	800d9a4 <_strtod_l+0x8cc>
 800d96e:	0d1b      	lsrs	r3, r3, #20
 800d970:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d974:	fa01 f303 	lsl.w	r3, r1, r3
 800d978:	429a      	cmp	r2, r3
 800d97a:	d118      	bne.n	800d9ae <_strtod_l+0x8d6>
 800d97c:	4ba0      	ldr	r3, [pc, #640]	@ (800dc00 <_strtod_l+0xb28>)
 800d97e:	4599      	cmp	r9, r3
 800d980:	d102      	bne.n	800d988 <_strtod_l+0x8b0>
 800d982:	3201      	adds	r2, #1
 800d984:	f43f adc2 	beq.w	800d50c <_strtod_l+0x434>
 800d988:	4b9c      	ldr	r3, [pc, #624]	@ (800dbfc <_strtod_l+0xb24>)
 800d98a:	ea09 0303 	and.w	r3, r9, r3
 800d98e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d992:	f04f 0a00 	mov.w	sl, #0
 800d996:	9b06      	ldr	r3, [sp, #24]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1b2      	bne.n	800d902 <_strtod_l+0x82a>
 800d99c:	e5c1      	b.n	800d522 <_strtod_l+0x44a>
 800d99e:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a2:	e7e9      	b.n	800d978 <_strtod_l+0x8a0>
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	e7e7      	b.n	800d978 <_strtod_l+0x8a0>
 800d9a8:	ea53 030a 	orrs.w	r3, r3, sl
 800d9ac:	d09b      	beq.n	800d8e6 <_strtod_l+0x80e>
 800d9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9b0:	b1c3      	cbz	r3, 800d9e4 <_strtod_l+0x90c>
 800d9b2:	ea13 0f09 	tst.w	r3, r9
 800d9b6:	d0ee      	beq.n	800d996 <_strtod_l+0x8be>
 800d9b8:	9a06      	ldr	r2, [sp, #24]
 800d9ba:	4650      	mov	r0, sl
 800d9bc:	4659      	mov	r1, fp
 800d9be:	f1b8 0f00 	cmp.w	r8, #0
 800d9c2:	d013      	beq.n	800d9ec <_strtod_l+0x914>
 800d9c4:	f7ff fb6c 	bl	800d0a0 <sulp>
 800d9c8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d9cc:	ec5b ab17 	vmov	sl, fp, d7
 800d9d0:	e7e1      	b.n	800d996 <_strtod_l+0x8be>
 800d9d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d9d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d9da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d9de:	f04f 3aff 	mov.w	sl, #4294967295
 800d9e2:	e7d8      	b.n	800d996 <_strtod_l+0x8be>
 800d9e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9e6:	ea13 0f0a 	tst.w	r3, sl
 800d9ea:	e7e4      	b.n	800d9b6 <_strtod_l+0x8de>
 800d9ec:	f7ff fb58 	bl	800d0a0 <sulp>
 800d9f0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d9f4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fc:	ec5b ab10 	vmov	sl, fp, d0
 800da00:	d1c9      	bne.n	800d996 <_strtod_l+0x8be>
 800da02:	e617      	b.n	800d634 <_strtod_l+0x55c>
 800da04:	4629      	mov	r1, r5
 800da06:	4620      	mov	r0, r4
 800da08:	f002 ffce 	bl	80109a8 <__ratio>
 800da0c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800da10:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800da14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da18:	d85d      	bhi.n	800dad6 <_strtod_l+0x9fe>
 800da1a:	f1b8 0f00 	cmp.w	r8, #0
 800da1e:	d164      	bne.n	800daea <_strtod_l+0xa12>
 800da20:	f1ba 0f00 	cmp.w	sl, #0
 800da24:	d14b      	bne.n	800dabe <_strtod_l+0x9e6>
 800da26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da2a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d160      	bne.n	800daf4 <_strtod_l+0xa1c>
 800da32:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800da36:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800da3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3e:	d401      	bmi.n	800da44 <_strtod_l+0x96c>
 800da40:	ee20 8b08 	vmul.f64	d8, d0, d8
 800da44:	eeb1 ab48 	vneg.f64	d10, d8
 800da48:	486c      	ldr	r0, [pc, #432]	@ (800dbfc <_strtod_l+0xb24>)
 800da4a:	496e      	ldr	r1, [pc, #440]	@ (800dc04 <_strtod_l+0xb2c>)
 800da4c:	ea09 0700 	and.w	r7, r9, r0
 800da50:	428f      	cmp	r7, r1
 800da52:	ec53 2b1a 	vmov	r2, r3, d10
 800da56:	d17d      	bne.n	800db54 <_strtod_l+0xa7c>
 800da58:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800da5c:	ec4b ab1c 	vmov	d12, sl, fp
 800da60:	eeb0 0b4c 	vmov.f64	d0, d12
 800da64:	f002 fed8 	bl	8010818 <__ulp>
 800da68:	4864      	ldr	r0, [pc, #400]	@ (800dbfc <_strtod_l+0xb24>)
 800da6a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800da6e:	ee1c 3a90 	vmov	r3, s25
 800da72:	4a65      	ldr	r2, [pc, #404]	@ (800dc08 <_strtod_l+0xb30>)
 800da74:	ea03 0100 	and.w	r1, r3, r0
 800da78:	4291      	cmp	r1, r2
 800da7a:	ec5b ab1c 	vmov	sl, fp, d12
 800da7e:	d93c      	bls.n	800dafa <_strtod_l+0xa22>
 800da80:	ee19 2a90 	vmov	r2, s19
 800da84:	4b5e      	ldr	r3, [pc, #376]	@ (800dc00 <_strtod_l+0xb28>)
 800da86:	429a      	cmp	r2, r3
 800da88:	d104      	bne.n	800da94 <_strtod_l+0x9bc>
 800da8a:	ee19 3a10 	vmov	r3, s18
 800da8e:	3301      	adds	r3, #1
 800da90:	f43f ad3c 	beq.w	800d50c <_strtod_l+0x434>
 800da94:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800dc00 <_strtod_l+0xb28>
 800da98:	f04f 3aff 	mov.w	sl, #4294967295
 800da9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800da9e:	9805      	ldr	r0, [sp, #20]
 800daa0:	f002 fb8e 	bl	80101c0 <_Bfree>
 800daa4:	9805      	ldr	r0, [sp, #20]
 800daa6:	4631      	mov	r1, r6
 800daa8:	f002 fb8a 	bl	80101c0 <_Bfree>
 800daac:	9805      	ldr	r0, [sp, #20]
 800daae:	4629      	mov	r1, r5
 800dab0:	f002 fb86 	bl	80101c0 <_Bfree>
 800dab4:	9805      	ldr	r0, [sp, #20]
 800dab6:	4621      	mov	r1, r4
 800dab8:	f002 fb82 	bl	80101c0 <_Bfree>
 800dabc:	e627      	b.n	800d70e <_strtod_l+0x636>
 800dabe:	f1ba 0f01 	cmp.w	sl, #1
 800dac2:	d103      	bne.n	800dacc <_strtod_l+0x9f4>
 800dac4:	f1bb 0f00 	cmp.w	fp, #0
 800dac8:	f43f adb4 	beq.w	800d634 <_strtod_l+0x55c>
 800dacc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dad0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800dad4:	e7b8      	b.n	800da48 <_strtod_l+0x970>
 800dad6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800dada:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dade:	f1b8 0f00 	cmp.w	r8, #0
 800dae2:	d0af      	beq.n	800da44 <_strtod_l+0x96c>
 800dae4:	eeb0 ab48 	vmov.f64	d10, d8
 800dae8:	e7ae      	b.n	800da48 <_strtod_l+0x970>
 800daea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800daee:	eeb0 8b4a 	vmov.f64	d8, d10
 800daf2:	e7a9      	b.n	800da48 <_strtod_l+0x970>
 800daf4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800daf8:	e7a6      	b.n	800da48 <_strtod_l+0x970>
 800dafa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dafe:	9b06      	ldr	r3, [sp, #24]
 800db00:	46d9      	mov	r9, fp
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1ca      	bne.n	800da9c <_strtod_l+0x9c4>
 800db06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db0a:	0d1b      	lsrs	r3, r3, #20
 800db0c:	051b      	lsls	r3, r3, #20
 800db0e:	429f      	cmp	r7, r3
 800db10:	d1c4      	bne.n	800da9c <_strtod_l+0x9c4>
 800db12:	ec51 0b18 	vmov	r0, r1, d8
 800db16:	f7f2 fe0f 	bl	8000738 <__aeabi_d2lz>
 800db1a:	f7f2 fdc7 	bl	80006ac <__aeabi_l2d>
 800db1e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800db22:	ec41 0b17 	vmov	d7, r0, r1
 800db26:	ea49 090a 	orr.w	r9, r9, sl
 800db2a:	ea59 0908 	orrs.w	r9, r9, r8
 800db2e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800db32:	d03c      	beq.n	800dbae <_strtod_l+0xad6>
 800db34:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800dbe0 <_strtod_l+0xb08>
 800db38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800db3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db40:	f53f acef 	bmi.w	800d522 <_strtod_l+0x44a>
 800db44:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800dbe8 <_strtod_l+0xb10>
 800db48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	dda4      	ble.n	800da9c <_strtod_l+0x9c4>
 800db52:	e4e6      	b.n	800d522 <_strtod_l+0x44a>
 800db54:	9906      	ldr	r1, [sp, #24]
 800db56:	b1e1      	cbz	r1, 800db92 <_strtod_l+0xaba>
 800db58:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800db5c:	d819      	bhi.n	800db92 <_strtod_l+0xaba>
 800db5e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800db62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db66:	d811      	bhi.n	800db8c <_strtod_l+0xab4>
 800db68:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800db6c:	ee18 3a10 	vmov	r3, s16
 800db70:	2b01      	cmp	r3, #1
 800db72:	bf38      	it	cc
 800db74:	2301      	movcc	r3, #1
 800db76:	ee08 3a10 	vmov	s16, r3
 800db7a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800db7e:	f1b8 0f00 	cmp.w	r8, #0
 800db82:	d111      	bne.n	800dba8 <_strtod_l+0xad0>
 800db84:	eeb1 7b48 	vneg.f64	d7, d8
 800db88:	ec53 2b17 	vmov	r2, r3, d7
 800db8c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800db90:	1bcb      	subs	r3, r1, r7
 800db92:	eeb0 0b49 	vmov.f64	d0, d9
 800db96:	ec43 2b1a 	vmov	d10, r2, r3
 800db9a:	f002 fe3d 	bl	8010818 <__ulp>
 800db9e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800dba2:	ec5b ab19 	vmov	sl, fp, d9
 800dba6:	e7aa      	b.n	800dafe <_strtod_l+0xa26>
 800dba8:	eeb0 7b48 	vmov.f64	d7, d8
 800dbac:	e7ec      	b.n	800db88 <_strtod_l+0xab0>
 800dbae:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800dbf0 <_strtod_l+0xb18>
 800dbb2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbba:	f57f af6f 	bpl.w	800da9c <_strtod_l+0x9c4>
 800dbbe:	e4b0      	b.n	800d522 <_strtod_l+0x44a>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9308      	str	r3, [sp, #32]
 800dbc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbc8:	6013      	str	r3, [r2, #0]
 800dbca:	f7ff bac4 	b.w	800d156 <_strtod_l+0x7e>
 800dbce:	2a65      	cmp	r2, #101	@ 0x65
 800dbd0:	f43f abbf 	beq.w	800d352 <_strtod_l+0x27a>
 800dbd4:	2a45      	cmp	r2, #69	@ 0x45
 800dbd6:	f43f abbc 	beq.w	800d352 <_strtod_l+0x27a>
 800dbda:	2101      	movs	r1, #1
 800dbdc:	f7ff bbf4 	b.w	800d3c8 <_strtod_l+0x2f0>
 800dbe0:	94a03595 	.word	0x94a03595
 800dbe4:	3fdfffff 	.word	0x3fdfffff
 800dbe8:	35afe535 	.word	0x35afe535
 800dbec:	3fe00000 	.word	0x3fe00000
 800dbf0:	94a03595 	.word	0x94a03595
 800dbf4:	3fcfffff 	.word	0x3fcfffff
 800dbf8:	000fffff 	.word	0x000fffff
 800dbfc:	7ff00000 	.word	0x7ff00000
 800dc00:	7fefffff 	.word	0x7fefffff
 800dc04:	7fe00000 	.word	0x7fe00000
 800dc08:	7c9fffff 	.word	0x7c9fffff

0800dc0c <_strtod_r>:
 800dc0c:	4b01      	ldr	r3, [pc, #4]	@ (800dc14 <_strtod_r+0x8>)
 800dc0e:	f7ff ba63 	b.w	800d0d8 <_strtod_l>
 800dc12:	bf00      	nop
 800dc14:	24000020 	.word	0x24000020

0800dc18 <__cvt>:
 800dc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc1a:	ed2d 8b02 	vpush	{d8}
 800dc1e:	eeb0 8b40 	vmov.f64	d8, d0
 800dc22:	b085      	sub	sp, #20
 800dc24:	4617      	mov	r7, r2
 800dc26:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dc28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc2a:	ee18 2a90 	vmov	r2, s17
 800dc2e:	f025 0520 	bic.w	r5, r5, #32
 800dc32:	2a00      	cmp	r2, #0
 800dc34:	bfb6      	itet	lt
 800dc36:	222d      	movlt	r2, #45	@ 0x2d
 800dc38:	2200      	movge	r2, #0
 800dc3a:	eeb1 8b40 	vneglt.f64	d8, d0
 800dc3e:	2d46      	cmp	r5, #70	@ 0x46
 800dc40:	460c      	mov	r4, r1
 800dc42:	701a      	strb	r2, [r3, #0]
 800dc44:	d004      	beq.n	800dc50 <__cvt+0x38>
 800dc46:	2d45      	cmp	r5, #69	@ 0x45
 800dc48:	d100      	bne.n	800dc4c <__cvt+0x34>
 800dc4a:	3401      	adds	r4, #1
 800dc4c:	2102      	movs	r1, #2
 800dc4e:	e000      	b.n	800dc52 <__cvt+0x3a>
 800dc50:	2103      	movs	r1, #3
 800dc52:	ab03      	add	r3, sp, #12
 800dc54:	9301      	str	r3, [sp, #4]
 800dc56:	ab02      	add	r3, sp, #8
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	4622      	mov	r2, r4
 800dc5c:	4633      	mov	r3, r6
 800dc5e:	eeb0 0b48 	vmov.f64	d0, d8
 800dc62:	f001 f979 	bl	800ef58 <_dtoa_r>
 800dc66:	2d47      	cmp	r5, #71	@ 0x47
 800dc68:	d114      	bne.n	800dc94 <__cvt+0x7c>
 800dc6a:	07fb      	lsls	r3, r7, #31
 800dc6c:	d50a      	bpl.n	800dc84 <__cvt+0x6c>
 800dc6e:	1902      	adds	r2, r0, r4
 800dc70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc78:	bf08      	it	eq
 800dc7a:	9203      	streq	r2, [sp, #12]
 800dc7c:	2130      	movs	r1, #48	@ 0x30
 800dc7e:	9b03      	ldr	r3, [sp, #12]
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d319      	bcc.n	800dcb8 <__cvt+0xa0>
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc88:	1a1b      	subs	r3, r3, r0
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	b005      	add	sp, #20
 800dc8e:	ecbd 8b02 	vpop	{d8}
 800dc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc94:	2d46      	cmp	r5, #70	@ 0x46
 800dc96:	eb00 0204 	add.w	r2, r0, r4
 800dc9a:	d1e9      	bne.n	800dc70 <__cvt+0x58>
 800dc9c:	7803      	ldrb	r3, [r0, #0]
 800dc9e:	2b30      	cmp	r3, #48	@ 0x30
 800dca0:	d107      	bne.n	800dcb2 <__cvt+0x9a>
 800dca2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcaa:	bf1c      	itt	ne
 800dcac:	f1c4 0401 	rsbne	r4, r4, #1
 800dcb0:	6034      	strne	r4, [r6, #0]
 800dcb2:	6833      	ldr	r3, [r6, #0]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	e7db      	b.n	800dc70 <__cvt+0x58>
 800dcb8:	1c5c      	adds	r4, r3, #1
 800dcba:	9403      	str	r4, [sp, #12]
 800dcbc:	7019      	strb	r1, [r3, #0]
 800dcbe:	e7de      	b.n	800dc7e <__cvt+0x66>

0800dcc0 <__exponent>:
 800dcc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcc2:	2900      	cmp	r1, #0
 800dcc4:	bfba      	itte	lt
 800dcc6:	4249      	neglt	r1, r1
 800dcc8:	232d      	movlt	r3, #45	@ 0x2d
 800dcca:	232b      	movge	r3, #43	@ 0x2b
 800dccc:	2909      	cmp	r1, #9
 800dcce:	7002      	strb	r2, [r0, #0]
 800dcd0:	7043      	strb	r3, [r0, #1]
 800dcd2:	dd29      	ble.n	800dd28 <__exponent+0x68>
 800dcd4:	f10d 0307 	add.w	r3, sp, #7
 800dcd8:	461d      	mov	r5, r3
 800dcda:	270a      	movs	r7, #10
 800dcdc:	461a      	mov	r2, r3
 800dcde:	fbb1 f6f7 	udiv	r6, r1, r7
 800dce2:	fb07 1416 	mls	r4, r7, r6, r1
 800dce6:	3430      	adds	r4, #48	@ 0x30
 800dce8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dcec:	460c      	mov	r4, r1
 800dcee:	2c63      	cmp	r4, #99	@ 0x63
 800dcf0:	f103 33ff 	add.w	r3, r3, #4294967295
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	dcf1      	bgt.n	800dcdc <__exponent+0x1c>
 800dcf8:	3130      	adds	r1, #48	@ 0x30
 800dcfa:	1e94      	subs	r4, r2, #2
 800dcfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd00:	1c41      	adds	r1, r0, #1
 800dd02:	4623      	mov	r3, r4
 800dd04:	42ab      	cmp	r3, r5
 800dd06:	d30a      	bcc.n	800dd1e <__exponent+0x5e>
 800dd08:	f10d 0309 	add.w	r3, sp, #9
 800dd0c:	1a9b      	subs	r3, r3, r2
 800dd0e:	42ac      	cmp	r4, r5
 800dd10:	bf88      	it	hi
 800dd12:	2300      	movhi	r3, #0
 800dd14:	3302      	adds	r3, #2
 800dd16:	4403      	add	r3, r0
 800dd18:	1a18      	subs	r0, r3, r0
 800dd1a:	b003      	add	sp, #12
 800dd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dd22:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dd26:	e7ed      	b.n	800dd04 <__exponent+0x44>
 800dd28:	2330      	movs	r3, #48	@ 0x30
 800dd2a:	3130      	adds	r1, #48	@ 0x30
 800dd2c:	7083      	strb	r3, [r0, #2]
 800dd2e:	70c1      	strb	r1, [r0, #3]
 800dd30:	1d03      	adds	r3, r0, #4
 800dd32:	e7f1      	b.n	800dd18 <__exponent+0x58>
 800dd34:	0000      	movs	r0, r0
	...

0800dd38 <_printf_float>:
 800dd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3c:	b08d      	sub	sp, #52	@ 0x34
 800dd3e:	460c      	mov	r4, r1
 800dd40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dd44:	4616      	mov	r6, r2
 800dd46:	461f      	mov	r7, r3
 800dd48:	4605      	mov	r5, r0
 800dd4a:	f000 ffd5 	bl	800ecf8 <_localeconv_r>
 800dd4e:	f8d0 b000 	ldr.w	fp, [r0]
 800dd52:	4658      	mov	r0, fp
 800dd54:	f7f2 fb14 	bl	8000380 <strlen>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd5c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd60:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dd64:	6822      	ldr	r2, [r4, #0]
 800dd66:	9005      	str	r0, [sp, #20]
 800dd68:	3307      	adds	r3, #7
 800dd6a:	f023 0307 	bic.w	r3, r3, #7
 800dd6e:	f103 0108 	add.w	r1, r3, #8
 800dd72:	f8c8 1000 	str.w	r1, [r8]
 800dd76:	ed93 0b00 	vldr	d0, [r3]
 800dd7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800dfd8 <_printf_float+0x2a0>
 800dd7e:	eeb0 7bc0 	vabs.f64	d7, d0
 800dd82:	eeb4 7b46 	vcmp.f64	d7, d6
 800dd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800dd8e:	dd24      	ble.n	800ddda <_printf_float+0xa2>
 800dd90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd98:	d502      	bpl.n	800dda0 <_printf_float+0x68>
 800dd9a:	232d      	movs	r3, #45	@ 0x2d
 800dd9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dda0:	498f      	ldr	r1, [pc, #572]	@ (800dfe0 <_printf_float+0x2a8>)
 800dda2:	4b90      	ldr	r3, [pc, #576]	@ (800dfe4 <_printf_float+0x2ac>)
 800dda4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800dda8:	bf8c      	ite	hi
 800ddaa:	4688      	movhi	r8, r1
 800ddac:	4698      	movls	r8, r3
 800ddae:	f022 0204 	bic.w	r2, r2, #4
 800ddb2:	2303      	movs	r3, #3
 800ddb4:	6123      	str	r3, [r4, #16]
 800ddb6:	6022      	str	r2, [r4, #0]
 800ddb8:	f04f 0a00 	mov.w	sl, #0
 800ddbc:	9700      	str	r7, [sp, #0]
 800ddbe:	4633      	mov	r3, r6
 800ddc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	f000 f9d1 	bl	800e16c <_printf_common>
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f040 8089 	bne.w	800dee2 <_printf_float+0x1aa>
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd4:	b00d      	add	sp, #52	@ 0x34
 800ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddda:	eeb4 0b40 	vcmp.f64	d0, d0
 800ddde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde2:	d709      	bvc.n	800ddf8 <_printf_float+0xc0>
 800dde4:	ee10 3a90 	vmov	r3, s1
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	bfbc      	itt	lt
 800ddec:	232d      	movlt	r3, #45	@ 0x2d
 800ddee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ddf2:	497d      	ldr	r1, [pc, #500]	@ (800dfe8 <_printf_float+0x2b0>)
 800ddf4:	4b7d      	ldr	r3, [pc, #500]	@ (800dfec <_printf_float+0x2b4>)
 800ddf6:	e7d5      	b.n	800dda4 <_printf_float+0x6c>
 800ddf8:	6863      	ldr	r3, [r4, #4]
 800ddfa:	1c59      	adds	r1, r3, #1
 800ddfc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800de00:	d139      	bne.n	800de76 <_printf_float+0x13e>
 800de02:	2306      	movs	r3, #6
 800de04:	6063      	str	r3, [r4, #4]
 800de06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800de0a:	2300      	movs	r3, #0
 800de0c:	6022      	str	r2, [r4, #0]
 800de0e:	9303      	str	r3, [sp, #12]
 800de10:	ab0a      	add	r3, sp, #40	@ 0x28
 800de12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800de16:	ab09      	add	r3, sp, #36	@ 0x24
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	6861      	ldr	r1, [r4, #4]
 800de1c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800de20:	4628      	mov	r0, r5
 800de22:	f7ff fef9 	bl	800dc18 <__cvt>
 800de26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de2c:	4680      	mov	r8, r0
 800de2e:	d129      	bne.n	800de84 <_printf_float+0x14c>
 800de30:	1cc8      	adds	r0, r1, #3
 800de32:	db02      	blt.n	800de3a <_printf_float+0x102>
 800de34:	6863      	ldr	r3, [r4, #4]
 800de36:	4299      	cmp	r1, r3
 800de38:	dd41      	ble.n	800debe <_printf_float+0x186>
 800de3a:	f1a9 0902 	sub.w	r9, r9, #2
 800de3e:	fa5f f989 	uxtb.w	r9, r9
 800de42:	3901      	subs	r1, #1
 800de44:	464a      	mov	r2, r9
 800de46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800de4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800de4c:	f7ff ff38 	bl	800dcc0 <__exponent>
 800de50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de52:	1813      	adds	r3, r2, r0
 800de54:	2a01      	cmp	r2, #1
 800de56:	4682      	mov	sl, r0
 800de58:	6123      	str	r3, [r4, #16]
 800de5a:	dc02      	bgt.n	800de62 <_printf_float+0x12a>
 800de5c:	6822      	ldr	r2, [r4, #0]
 800de5e:	07d2      	lsls	r2, r2, #31
 800de60:	d501      	bpl.n	800de66 <_printf_float+0x12e>
 800de62:	3301      	adds	r3, #1
 800de64:	6123      	str	r3, [r4, #16]
 800de66:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d0a6      	beq.n	800ddbc <_printf_float+0x84>
 800de6e:	232d      	movs	r3, #45	@ 0x2d
 800de70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de74:	e7a2      	b.n	800ddbc <_printf_float+0x84>
 800de76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de7a:	d1c4      	bne.n	800de06 <_printf_float+0xce>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d1c2      	bne.n	800de06 <_printf_float+0xce>
 800de80:	2301      	movs	r3, #1
 800de82:	e7bf      	b.n	800de04 <_printf_float+0xcc>
 800de84:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800de88:	d9db      	bls.n	800de42 <_printf_float+0x10a>
 800de8a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800de8e:	d118      	bne.n	800dec2 <_printf_float+0x18a>
 800de90:	2900      	cmp	r1, #0
 800de92:	6863      	ldr	r3, [r4, #4]
 800de94:	dd0b      	ble.n	800deae <_printf_float+0x176>
 800de96:	6121      	str	r1, [r4, #16]
 800de98:	b913      	cbnz	r3, 800dea0 <_printf_float+0x168>
 800de9a:	6822      	ldr	r2, [r4, #0]
 800de9c:	07d0      	lsls	r0, r2, #31
 800de9e:	d502      	bpl.n	800dea6 <_printf_float+0x16e>
 800dea0:	3301      	adds	r3, #1
 800dea2:	440b      	add	r3, r1
 800dea4:	6123      	str	r3, [r4, #16]
 800dea6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dea8:	f04f 0a00 	mov.w	sl, #0
 800deac:	e7db      	b.n	800de66 <_printf_float+0x12e>
 800deae:	b913      	cbnz	r3, 800deb6 <_printf_float+0x17e>
 800deb0:	6822      	ldr	r2, [r4, #0]
 800deb2:	07d2      	lsls	r2, r2, #31
 800deb4:	d501      	bpl.n	800deba <_printf_float+0x182>
 800deb6:	3302      	adds	r3, #2
 800deb8:	e7f4      	b.n	800dea4 <_printf_float+0x16c>
 800deba:	2301      	movs	r3, #1
 800debc:	e7f2      	b.n	800dea4 <_printf_float+0x16c>
 800debe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800dec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dec4:	4299      	cmp	r1, r3
 800dec6:	db05      	blt.n	800ded4 <_printf_float+0x19c>
 800dec8:	6823      	ldr	r3, [r4, #0]
 800deca:	6121      	str	r1, [r4, #16]
 800decc:	07d8      	lsls	r0, r3, #31
 800dece:	d5ea      	bpl.n	800dea6 <_printf_float+0x16e>
 800ded0:	1c4b      	adds	r3, r1, #1
 800ded2:	e7e7      	b.n	800dea4 <_printf_float+0x16c>
 800ded4:	2900      	cmp	r1, #0
 800ded6:	bfd4      	ite	le
 800ded8:	f1c1 0202 	rsble	r2, r1, #2
 800dedc:	2201      	movgt	r2, #1
 800dede:	4413      	add	r3, r2
 800dee0:	e7e0      	b.n	800dea4 <_printf_float+0x16c>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	055a      	lsls	r2, r3, #21
 800dee6:	d407      	bmi.n	800def8 <_printf_float+0x1c0>
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	4642      	mov	r2, r8
 800deec:	4631      	mov	r1, r6
 800deee:	4628      	mov	r0, r5
 800def0:	47b8      	blx	r7
 800def2:	3001      	adds	r0, #1
 800def4:	d12a      	bne.n	800df4c <_printf_float+0x214>
 800def6:	e76b      	b.n	800ddd0 <_printf_float+0x98>
 800def8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800defc:	f240 80e0 	bls.w	800e0c0 <_printf_float+0x388>
 800df00:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800df04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0c:	d133      	bne.n	800df76 <_printf_float+0x23e>
 800df0e:	4a38      	ldr	r2, [pc, #224]	@ (800dff0 <_printf_float+0x2b8>)
 800df10:	2301      	movs	r3, #1
 800df12:	4631      	mov	r1, r6
 800df14:	4628      	mov	r0, r5
 800df16:	47b8      	blx	r7
 800df18:	3001      	adds	r0, #1
 800df1a:	f43f af59 	beq.w	800ddd0 <_printf_float+0x98>
 800df1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800df22:	4543      	cmp	r3, r8
 800df24:	db02      	blt.n	800df2c <_printf_float+0x1f4>
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	07d8      	lsls	r0, r3, #31
 800df2a:	d50f      	bpl.n	800df4c <_printf_float+0x214>
 800df2c:	9b05      	ldr	r3, [sp, #20]
 800df2e:	465a      	mov	r2, fp
 800df30:	4631      	mov	r1, r6
 800df32:	4628      	mov	r0, r5
 800df34:	47b8      	blx	r7
 800df36:	3001      	adds	r0, #1
 800df38:	f43f af4a 	beq.w	800ddd0 <_printf_float+0x98>
 800df3c:	f04f 0900 	mov.w	r9, #0
 800df40:	f108 38ff 	add.w	r8, r8, #4294967295
 800df44:	f104 0a1a 	add.w	sl, r4, #26
 800df48:	45c8      	cmp	r8, r9
 800df4a:	dc09      	bgt.n	800df60 <_printf_float+0x228>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	079b      	lsls	r3, r3, #30
 800df50:	f100 8107 	bmi.w	800e162 <_printf_float+0x42a>
 800df54:	68e0      	ldr	r0, [r4, #12]
 800df56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df58:	4298      	cmp	r0, r3
 800df5a:	bfb8      	it	lt
 800df5c:	4618      	movlt	r0, r3
 800df5e:	e739      	b.n	800ddd4 <_printf_float+0x9c>
 800df60:	2301      	movs	r3, #1
 800df62:	4652      	mov	r2, sl
 800df64:	4631      	mov	r1, r6
 800df66:	4628      	mov	r0, r5
 800df68:	47b8      	blx	r7
 800df6a:	3001      	adds	r0, #1
 800df6c:	f43f af30 	beq.w	800ddd0 <_printf_float+0x98>
 800df70:	f109 0901 	add.w	r9, r9, #1
 800df74:	e7e8      	b.n	800df48 <_printf_float+0x210>
 800df76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df78:	2b00      	cmp	r3, #0
 800df7a:	dc3b      	bgt.n	800dff4 <_printf_float+0x2bc>
 800df7c:	4a1c      	ldr	r2, [pc, #112]	@ (800dff0 <_printf_float+0x2b8>)
 800df7e:	2301      	movs	r3, #1
 800df80:	4631      	mov	r1, r6
 800df82:	4628      	mov	r0, r5
 800df84:	47b8      	blx	r7
 800df86:	3001      	adds	r0, #1
 800df88:	f43f af22 	beq.w	800ddd0 <_printf_float+0x98>
 800df8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800df90:	ea59 0303 	orrs.w	r3, r9, r3
 800df94:	d102      	bne.n	800df9c <_printf_float+0x264>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	07d9      	lsls	r1, r3, #31
 800df9a:	d5d7      	bpl.n	800df4c <_printf_float+0x214>
 800df9c:	9b05      	ldr	r3, [sp, #20]
 800df9e:	465a      	mov	r2, fp
 800dfa0:	4631      	mov	r1, r6
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	47b8      	blx	r7
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	f43f af12 	beq.w	800ddd0 <_printf_float+0x98>
 800dfac:	f04f 0a00 	mov.w	sl, #0
 800dfb0:	f104 0b1a 	add.w	fp, r4, #26
 800dfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb6:	425b      	negs	r3, r3
 800dfb8:	4553      	cmp	r3, sl
 800dfba:	dc01      	bgt.n	800dfc0 <_printf_float+0x288>
 800dfbc:	464b      	mov	r3, r9
 800dfbe:	e794      	b.n	800deea <_printf_float+0x1b2>
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	465a      	mov	r2, fp
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	47b8      	blx	r7
 800dfca:	3001      	adds	r0, #1
 800dfcc:	f43f af00 	beq.w	800ddd0 <_printf_float+0x98>
 800dfd0:	f10a 0a01 	add.w	sl, sl, #1
 800dfd4:	e7ee      	b.n	800dfb4 <_printf_float+0x27c>
 800dfd6:	bf00      	nop
 800dfd8:	ffffffff 	.word	0xffffffff
 800dfdc:	7fefffff 	.word	0x7fefffff
 800dfe0:	0801161e 	.word	0x0801161e
 800dfe4:	0801161a 	.word	0x0801161a
 800dfe8:	08011626 	.word	0x08011626
 800dfec:	08011622 	.word	0x08011622
 800dff0:	0801162a 	.word	0x0801162a
 800dff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dff6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dffa:	4553      	cmp	r3, sl
 800dffc:	bfa8      	it	ge
 800dffe:	4653      	movge	r3, sl
 800e000:	2b00      	cmp	r3, #0
 800e002:	4699      	mov	r9, r3
 800e004:	dc37      	bgt.n	800e076 <_printf_float+0x33e>
 800e006:	2300      	movs	r3, #0
 800e008:	9307      	str	r3, [sp, #28]
 800e00a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e00e:	f104 021a 	add.w	r2, r4, #26
 800e012:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e014:	9907      	ldr	r1, [sp, #28]
 800e016:	9306      	str	r3, [sp, #24]
 800e018:	eba3 0309 	sub.w	r3, r3, r9
 800e01c:	428b      	cmp	r3, r1
 800e01e:	dc31      	bgt.n	800e084 <_printf_float+0x34c>
 800e020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e022:	459a      	cmp	sl, r3
 800e024:	dc3b      	bgt.n	800e09e <_printf_float+0x366>
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	07da      	lsls	r2, r3, #31
 800e02a:	d438      	bmi.n	800e09e <_printf_float+0x366>
 800e02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e02e:	ebaa 0903 	sub.w	r9, sl, r3
 800e032:	9b06      	ldr	r3, [sp, #24]
 800e034:	ebaa 0303 	sub.w	r3, sl, r3
 800e038:	4599      	cmp	r9, r3
 800e03a:	bfa8      	it	ge
 800e03c:	4699      	movge	r9, r3
 800e03e:	f1b9 0f00 	cmp.w	r9, #0
 800e042:	dc34      	bgt.n	800e0ae <_printf_float+0x376>
 800e044:	f04f 0800 	mov.w	r8, #0
 800e048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e04c:	f104 0b1a 	add.w	fp, r4, #26
 800e050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e052:	ebaa 0303 	sub.w	r3, sl, r3
 800e056:	eba3 0309 	sub.w	r3, r3, r9
 800e05a:	4543      	cmp	r3, r8
 800e05c:	f77f af76 	ble.w	800df4c <_printf_float+0x214>
 800e060:	2301      	movs	r3, #1
 800e062:	465a      	mov	r2, fp
 800e064:	4631      	mov	r1, r6
 800e066:	4628      	mov	r0, r5
 800e068:	47b8      	blx	r7
 800e06a:	3001      	adds	r0, #1
 800e06c:	f43f aeb0 	beq.w	800ddd0 <_printf_float+0x98>
 800e070:	f108 0801 	add.w	r8, r8, #1
 800e074:	e7ec      	b.n	800e050 <_printf_float+0x318>
 800e076:	4642      	mov	r2, r8
 800e078:	4631      	mov	r1, r6
 800e07a:	4628      	mov	r0, r5
 800e07c:	47b8      	blx	r7
 800e07e:	3001      	adds	r0, #1
 800e080:	d1c1      	bne.n	800e006 <_printf_float+0x2ce>
 800e082:	e6a5      	b.n	800ddd0 <_printf_float+0x98>
 800e084:	2301      	movs	r3, #1
 800e086:	4631      	mov	r1, r6
 800e088:	4628      	mov	r0, r5
 800e08a:	9206      	str	r2, [sp, #24]
 800e08c:	47b8      	blx	r7
 800e08e:	3001      	adds	r0, #1
 800e090:	f43f ae9e 	beq.w	800ddd0 <_printf_float+0x98>
 800e094:	9b07      	ldr	r3, [sp, #28]
 800e096:	9a06      	ldr	r2, [sp, #24]
 800e098:	3301      	adds	r3, #1
 800e09a:	9307      	str	r3, [sp, #28]
 800e09c:	e7b9      	b.n	800e012 <_printf_float+0x2da>
 800e09e:	9b05      	ldr	r3, [sp, #20]
 800e0a0:	465a      	mov	r2, fp
 800e0a2:	4631      	mov	r1, r6
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	47b8      	blx	r7
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	d1bf      	bne.n	800e02c <_printf_float+0x2f4>
 800e0ac:	e690      	b.n	800ddd0 <_printf_float+0x98>
 800e0ae:	9a06      	ldr	r2, [sp, #24]
 800e0b0:	464b      	mov	r3, r9
 800e0b2:	4442      	add	r2, r8
 800e0b4:	4631      	mov	r1, r6
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	47b8      	blx	r7
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	d1c2      	bne.n	800e044 <_printf_float+0x30c>
 800e0be:	e687      	b.n	800ddd0 <_printf_float+0x98>
 800e0c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e0c4:	f1b9 0f01 	cmp.w	r9, #1
 800e0c8:	dc01      	bgt.n	800e0ce <_printf_float+0x396>
 800e0ca:	07db      	lsls	r3, r3, #31
 800e0cc:	d536      	bpl.n	800e13c <_printf_float+0x404>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	4642      	mov	r2, r8
 800e0d2:	4631      	mov	r1, r6
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	47b8      	blx	r7
 800e0d8:	3001      	adds	r0, #1
 800e0da:	f43f ae79 	beq.w	800ddd0 <_printf_float+0x98>
 800e0de:	9b05      	ldr	r3, [sp, #20]
 800e0e0:	465a      	mov	r2, fp
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	47b8      	blx	r7
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	f43f ae71 	beq.w	800ddd0 <_printf_float+0x98>
 800e0ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e0f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0fe:	d018      	beq.n	800e132 <_printf_float+0x3fa>
 800e100:	464b      	mov	r3, r9
 800e102:	f108 0201 	add.w	r2, r8, #1
 800e106:	4631      	mov	r1, r6
 800e108:	4628      	mov	r0, r5
 800e10a:	47b8      	blx	r7
 800e10c:	3001      	adds	r0, #1
 800e10e:	d10c      	bne.n	800e12a <_printf_float+0x3f2>
 800e110:	e65e      	b.n	800ddd0 <_printf_float+0x98>
 800e112:	2301      	movs	r3, #1
 800e114:	465a      	mov	r2, fp
 800e116:	4631      	mov	r1, r6
 800e118:	4628      	mov	r0, r5
 800e11a:	47b8      	blx	r7
 800e11c:	3001      	adds	r0, #1
 800e11e:	f43f ae57 	beq.w	800ddd0 <_printf_float+0x98>
 800e122:	f108 0801 	add.w	r8, r8, #1
 800e126:	45c8      	cmp	r8, r9
 800e128:	dbf3      	blt.n	800e112 <_printf_float+0x3da>
 800e12a:	4653      	mov	r3, sl
 800e12c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e130:	e6dc      	b.n	800deec <_printf_float+0x1b4>
 800e132:	f04f 0800 	mov.w	r8, #0
 800e136:	f104 0b1a 	add.w	fp, r4, #26
 800e13a:	e7f4      	b.n	800e126 <_printf_float+0x3ee>
 800e13c:	2301      	movs	r3, #1
 800e13e:	4642      	mov	r2, r8
 800e140:	e7e1      	b.n	800e106 <_printf_float+0x3ce>
 800e142:	2301      	movs	r3, #1
 800e144:	464a      	mov	r2, r9
 800e146:	4631      	mov	r1, r6
 800e148:	4628      	mov	r0, r5
 800e14a:	47b8      	blx	r7
 800e14c:	3001      	adds	r0, #1
 800e14e:	f43f ae3f 	beq.w	800ddd0 <_printf_float+0x98>
 800e152:	f108 0801 	add.w	r8, r8, #1
 800e156:	68e3      	ldr	r3, [r4, #12]
 800e158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e15a:	1a5b      	subs	r3, r3, r1
 800e15c:	4543      	cmp	r3, r8
 800e15e:	dcf0      	bgt.n	800e142 <_printf_float+0x40a>
 800e160:	e6f8      	b.n	800df54 <_printf_float+0x21c>
 800e162:	f04f 0800 	mov.w	r8, #0
 800e166:	f104 0919 	add.w	r9, r4, #25
 800e16a:	e7f4      	b.n	800e156 <_printf_float+0x41e>

0800e16c <_printf_common>:
 800e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e170:	4616      	mov	r6, r2
 800e172:	4698      	mov	r8, r3
 800e174:	688a      	ldr	r2, [r1, #8]
 800e176:	690b      	ldr	r3, [r1, #16]
 800e178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e17c:	4293      	cmp	r3, r2
 800e17e:	bfb8      	it	lt
 800e180:	4613      	movlt	r3, r2
 800e182:	6033      	str	r3, [r6, #0]
 800e184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e188:	4607      	mov	r7, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	b10a      	cbz	r2, 800e192 <_printf_common+0x26>
 800e18e:	3301      	adds	r3, #1
 800e190:	6033      	str	r3, [r6, #0]
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	0699      	lsls	r1, r3, #26
 800e196:	bf42      	ittt	mi
 800e198:	6833      	ldrmi	r3, [r6, #0]
 800e19a:	3302      	addmi	r3, #2
 800e19c:	6033      	strmi	r3, [r6, #0]
 800e19e:	6825      	ldr	r5, [r4, #0]
 800e1a0:	f015 0506 	ands.w	r5, r5, #6
 800e1a4:	d106      	bne.n	800e1b4 <_printf_common+0x48>
 800e1a6:	f104 0a19 	add.w	sl, r4, #25
 800e1aa:	68e3      	ldr	r3, [r4, #12]
 800e1ac:	6832      	ldr	r2, [r6, #0]
 800e1ae:	1a9b      	subs	r3, r3, r2
 800e1b0:	42ab      	cmp	r3, r5
 800e1b2:	dc26      	bgt.n	800e202 <_printf_common+0x96>
 800e1b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1b8:	6822      	ldr	r2, [r4, #0]
 800e1ba:	3b00      	subs	r3, #0
 800e1bc:	bf18      	it	ne
 800e1be:	2301      	movne	r3, #1
 800e1c0:	0692      	lsls	r2, r2, #26
 800e1c2:	d42b      	bmi.n	800e21c <_printf_common+0xb0>
 800e1c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1c8:	4641      	mov	r1, r8
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	47c8      	blx	r9
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	d01e      	beq.n	800e210 <_printf_common+0xa4>
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	6922      	ldr	r2, [r4, #16]
 800e1d6:	f003 0306 	and.w	r3, r3, #6
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	bf02      	ittt	eq
 800e1de:	68e5      	ldreq	r5, [r4, #12]
 800e1e0:	6833      	ldreq	r3, [r6, #0]
 800e1e2:	1aed      	subeq	r5, r5, r3
 800e1e4:	68a3      	ldr	r3, [r4, #8]
 800e1e6:	bf0c      	ite	eq
 800e1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1ec:	2500      	movne	r5, #0
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	bfc4      	itt	gt
 800e1f2:	1a9b      	subgt	r3, r3, r2
 800e1f4:	18ed      	addgt	r5, r5, r3
 800e1f6:	2600      	movs	r6, #0
 800e1f8:	341a      	adds	r4, #26
 800e1fa:	42b5      	cmp	r5, r6
 800e1fc:	d11a      	bne.n	800e234 <_printf_common+0xc8>
 800e1fe:	2000      	movs	r0, #0
 800e200:	e008      	b.n	800e214 <_printf_common+0xa8>
 800e202:	2301      	movs	r3, #1
 800e204:	4652      	mov	r2, sl
 800e206:	4641      	mov	r1, r8
 800e208:	4638      	mov	r0, r7
 800e20a:	47c8      	blx	r9
 800e20c:	3001      	adds	r0, #1
 800e20e:	d103      	bne.n	800e218 <_printf_common+0xac>
 800e210:	f04f 30ff 	mov.w	r0, #4294967295
 800e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e218:	3501      	adds	r5, #1
 800e21a:	e7c6      	b.n	800e1aa <_printf_common+0x3e>
 800e21c:	18e1      	adds	r1, r4, r3
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	2030      	movs	r0, #48	@ 0x30
 800e222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e226:	4422      	add	r2, r4
 800e228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e22c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e230:	3302      	adds	r3, #2
 800e232:	e7c7      	b.n	800e1c4 <_printf_common+0x58>
 800e234:	2301      	movs	r3, #1
 800e236:	4622      	mov	r2, r4
 800e238:	4641      	mov	r1, r8
 800e23a:	4638      	mov	r0, r7
 800e23c:	47c8      	blx	r9
 800e23e:	3001      	adds	r0, #1
 800e240:	d0e6      	beq.n	800e210 <_printf_common+0xa4>
 800e242:	3601      	adds	r6, #1
 800e244:	e7d9      	b.n	800e1fa <_printf_common+0x8e>
	...

0800e248 <_printf_i>:
 800e248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e24c:	7e0f      	ldrb	r7, [r1, #24]
 800e24e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e250:	2f78      	cmp	r7, #120	@ 0x78
 800e252:	4691      	mov	r9, r2
 800e254:	4680      	mov	r8, r0
 800e256:	460c      	mov	r4, r1
 800e258:	469a      	mov	sl, r3
 800e25a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e25e:	d807      	bhi.n	800e270 <_printf_i+0x28>
 800e260:	2f62      	cmp	r7, #98	@ 0x62
 800e262:	d80a      	bhi.n	800e27a <_printf_i+0x32>
 800e264:	2f00      	cmp	r7, #0
 800e266:	f000 80d1 	beq.w	800e40c <_printf_i+0x1c4>
 800e26a:	2f58      	cmp	r7, #88	@ 0x58
 800e26c:	f000 80b8 	beq.w	800e3e0 <_printf_i+0x198>
 800e270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e278:	e03a      	b.n	800e2f0 <_printf_i+0xa8>
 800e27a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e27e:	2b15      	cmp	r3, #21
 800e280:	d8f6      	bhi.n	800e270 <_printf_i+0x28>
 800e282:	a101      	add	r1, pc, #4	@ (adr r1, 800e288 <_printf_i+0x40>)
 800e284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e288:	0800e2e1 	.word	0x0800e2e1
 800e28c:	0800e2f5 	.word	0x0800e2f5
 800e290:	0800e271 	.word	0x0800e271
 800e294:	0800e271 	.word	0x0800e271
 800e298:	0800e271 	.word	0x0800e271
 800e29c:	0800e271 	.word	0x0800e271
 800e2a0:	0800e2f5 	.word	0x0800e2f5
 800e2a4:	0800e271 	.word	0x0800e271
 800e2a8:	0800e271 	.word	0x0800e271
 800e2ac:	0800e271 	.word	0x0800e271
 800e2b0:	0800e271 	.word	0x0800e271
 800e2b4:	0800e3f3 	.word	0x0800e3f3
 800e2b8:	0800e31f 	.word	0x0800e31f
 800e2bc:	0800e3ad 	.word	0x0800e3ad
 800e2c0:	0800e271 	.word	0x0800e271
 800e2c4:	0800e271 	.word	0x0800e271
 800e2c8:	0800e415 	.word	0x0800e415
 800e2cc:	0800e271 	.word	0x0800e271
 800e2d0:	0800e31f 	.word	0x0800e31f
 800e2d4:	0800e271 	.word	0x0800e271
 800e2d8:	0800e271 	.word	0x0800e271
 800e2dc:	0800e3b5 	.word	0x0800e3b5
 800e2e0:	6833      	ldr	r3, [r6, #0]
 800e2e2:	1d1a      	adds	r2, r3, #4
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6032      	str	r2, [r6, #0]
 800e2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e09c      	b.n	800e42e <_printf_i+0x1e6>
 800e2f4:	6833      	ldr	r3, [r6, #0]
 800e2f6:	6820      	ldr	r0, [r4, #0]
 800e2f8:	1d19      	adds	r1, r3, #4
 800e2fa:	6031      	str	r1, [r6, #0]
 800e2fc:	0606      	lsls	r6, r0, #24
 800e2fe:	d501      	bpl.n	800e304 <_printf_i+0xbc>
 800e300:	681d      	ldr	r5, [r3, #0]
 800e302:	e003      	b.n	800e30c <_printf_i+0xc4>
 800e304:	0645      	lsls	r5, r0, #25
 800e306:	d5fb      	bpl.n	800e300 <_printf_i+0xb8>
 800e308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e30c:	2d00      	cmp	r5, #0
 800e30e:	da03      	bge.n	800e318 <_printf_i+0xd0>
 800e310:	232d      	movs	r3, #45	@ 0x2d
 800e312:	426d      	negs	r5, r5
 800e314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e318:	4858      	ldr	r0, [pc, #352]	@ (800e47c <_printf_i+0x234>)
 800e31a:	230a      	movs	r3, #10
 800e31c:	e011      	b.n	800e342 <_printf_i+0xfa>
 800e31e:	6821      	ldr	r1, [r4, #0]
 800e320:	6833      	ldr	r3, [r6, #0]
 800e322:	0608      	lsls	r0, r1, #24
 800e324:	f853 5b04 	ldr.w	r5, [r3], #4
 800e328:	d402      	bmi.n	800e330 <_printf_i+0xe8>
 800e32a:	0649      	lsls	r1, r1, #25
 800e32c:	bf48      	it	mi
 800e32e:	b2ad      	uxthmi	r5, r5
 800e330:	2f6f      	cmp	r7, #111	@ 0x6f
 800e332:	4852      	ldr	r0, [pc, #328]	@ (800e47c <_printf_i+0x234>)
 800e334:	6033      	str	r3, [r6, #0]
 800e336:	bf14      	ite	ne
 800e338:	230a      	movne	r3, #10
 800e33a:	2308      	moveq	r3, #8
 800e33c:	2100      	movs	r1, #0
 800e33e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e342:	6866      	ldr	r6, [r4, #4]
 800e344:	60a6      	str	r6, [r4, #8]
 800e346:	2e00      	cmp	r6, #0
 800e348:	db05      	blt.n	800e356 <_printf_i+0x10e>
 800e34a:	6821      	ldr	r1, [r4, #0]
 800e34c:	432e      	orrs	r6, r5
 800e34e:	f021 0104 	bic.w	r1, r1, #4
 800e352:	6021      	str	r1, [r4, #0]
 800e354:	d04b      	beq.n	800e3ee <_printf_i+0x1a6>
 800e356:	4616      	mov	r6, r2
 800e358:	fbb5 f1f3 	udiv	r1, r5, r3
 800e35c:	fb03 5711 	mls	r7, r3, r1, r5
 800e360:	5dc7      	ldrb	r7, [r0, r7]
 800e362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e366:	462f      	mov	r7, r5
 800e368:	42bb      	cmp	r3, r7
 800e36a:	460d      	mov	r5, r1
 800e36c:	d9f4      	bls.n	800e358 <_printf_i+0x110>
 800e36e:	2b08      	cmp	r3, #8
 800e370:	d10b      	bne.n	800e38a <_printf_i+0x142>
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	07df      	lsls	r7, r3, #31
 800e376:	d508      	bpl.n	800e38a <_printf_i+0x142>
 800e378:	6923      	ldr	r3, [r4, #16]
 800e37a:	6861      	ldr	r1, [r4, #4]
 800e37c:	4299      	cmp	r1, r3
 800e37e:	bfde      	ittt	le
 800e380:	2330      	movle	r3, #48	@ 0x30
 800e382:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e386:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e38a:	1b92      	subs	r2, r2, r6
 800e38c:	6122      	str	r2, [r4, #16]
 800e38e:	f8cd a000 	str.w	sl, [sp]
 800e392:	464b      	mov	r3, r9
 800e394:	aa03      	add	r2, sp, #12
 800e396:	4621      	mov	r1, r4
 800e398:	4640      	mov	r0, r8
 800e39a:	f7ff fee7 	bl	800e16c <_printf_common>
 800e39e:	3001      	adds	r0, #1
 800e3a0:	d14a      	bne.n	800e438 <_printf_i+0x1f0>
 800e3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a6:	b004      	add	sp, #16
 800e3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ac:	6823      	ldr	r3, [r4, #0]
 800e3ae:	f043 0320 	orr.w	r3, r3, #32
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	4832      	ldr	r0, [pc, #200]	@ (800e480 <_printf_i+0x238>)
 800e3b6:	2778      	movs	r7, #120	@ 0x78
 800e3b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	6831      	ldr	r1, [r6, #0]
 800e3c0:	061f      	lsls	r7, r3, #24
 800e3c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3c6:	d402      	bmi.n	800e3ce <_printf_i+0x186>
 800e3c8:	065f      	lsls	r7, r3, #25
 800e3ca:	bf48      	it	mi
 800e3cc:	b2ad      	uxthmi	r5, r5
 800e3ce:	6031      	str	r1, [r6, #0]
 800e3d0:	07d9      	lsls	r1, r3, #31
 800e3d2:	bf44      	itt	mi
 800e3d4:	f043 0320 	orrmi.w	r3, r3, #32
 800e3d8:	6023      	strmi	r3, [r4, #0]
 800e3da:	b11d      	cbz	r5, 800e3e4 <_printf_i+0x19c>
 800e3dc:	2310      	movs	r3, #16
 800e3de:	e7ad      	b.n	800e33c <_printf_i+0xf4>
 800e3e0:	4826      	ldr	r0, [pc, #152]	@ (800e47c <_printf_i+0x234>)
 800e3e2:	e7e9      	b.n	800e3b8 <_printf_i+0x170>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	f023 0320 	bic.w	r3, r3, #32
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	e7f6      	b.n	800e3dc <_printf_i+0x194>
 800e3ee:	4616      	mov	r6, r2
 800e3f0:	e7bd      	b.n	800e36e <_printf_i+0x126>
 800e3f2:	6833      	ldr	r3, [r6, #0]
 800e3f4:	6825      	ldr	r5, [r4, #0]
 800e3f6:	6961      	ldr	r1, [r4, #20]
 800e3f8:	1d18      	adds	r0, r3, #4
 800e3fa:	6030      	str	r0, [r6, #0]
 800e3fc:	062e      	lsls	r6, r5, #24
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	d501      	bpl.n	800e406 <_printf_i+0x1be>
 800e402:	6019      	str	r1, [r3, #0]
 800e404:	e002      	b.n	800e40c <_printf_i+0x1c4>
 800e406:	0668      	lsls	r0, r5, #25
 800e408:	d5fb      	bpl.n	800e402 <_printf_i+0x1ba>
 800e40a:	8019      	strh	r1, [r3, #0]
 800e40c:	2300      	movs	r3, #0
 800e40e:	6123      	str	r3, [r4, #16]
 800e410:	4616      	mov	r6, r2
 800e412:	e7bc      	b.n	800e38e <_printf_i+0x146>
 800e414:	6833      	ldr	r3, [r6, #0]
 800e416:	1d1a      	adds	r2, r3, #4
 800e418:	6032      	str	r2, [r6, #0]
 800e41a:	681e      	ldr	r6, [r3, #0]
 800e41c:	6862      	ldr	r2, [r4, #4]
 800e41e:	2100      	movs	r1, #0
 800e420:	4630      	mov	r0, r6
 800e422:	f7f1 ff5d 	bl	80002e0 <memchr>
 800e426:	b108      	cbz	r0, 800e42c <_printf_i+0x1e4>
 800e428:	1b80      	subs	r0, r0, r6
 800e42a:	6060      	str	r0, [r4, #4]
 800e42c:	6863      	ldr	r3, [r4, #4]
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	2300      	movs	r3, #0
 800e432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e436:	e7aa      	b.n	800e38e <_printf_i+0x146>
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	4632      	mov	r2, r6
 800e43c:	4649      	mov	r1, r9
 800e43e:	4640      	mov	r0, r8
 800e440:	47d0      	blx	sl
 800e442:	3001      	adds	r0, #1
 800e444:	d0ad      	beq.n	800e3a2 <_printf_i+0x15a>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	079b      	lsls	r3, r3, #30
 800e44a:	d413      	bmi.n	800e474 <_printf_i+0x22c>
 800e44c:	68e0      	ldr	r0, [r4, #12]
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	4298      	cmp	r0, r3
 800e452:	bfb8      	it	lt
 800e454:	4618      	movlt	r0, r3
 800e456:	e7a6      	b.n	800e3a6 <_printf_i+0x15e>
 800e458:	2301      	movs	r3, #1
 800e45a:	4632      	mov	r2, r6
 800e45c:	4649      	mov	r1, r9
 800e45e:	4640      	mov	r0, r8
 800e460:	47d0      	blx	sl
 800e462:	3001      	adds	r0, #1
 800e464:	d09d      	beq.n	800e3a2 <_printf_i+0x15a>
 800e466:	3501      	adds	r5, #1
 800e468:	68e3      	ldr	r3, [r4, #12]
 800e46a:	9903      	ldr	r1, [sp, #12]
 800e46c:	1a5b      	subs	r3, r3, r1
 800e46e:	42ab      	cmp	r3, r5
 800e470:	dcf2      	bgt.n	800e458 <_printf_i+0x210>
 800e472:	e7eb      	b.n	800e44c <_printf_i+0x204>
 800e474:	2500      	movs	r5, #0
 800e476:	f104 0619 	add.w	r6, r4, #25
 800e47a:	e7f5      	b.n	800e468 <_printf_i+0x220>
 800e47c:	0801162c 	.word	0x0801162c
 800e480:	0801163d 	.word	0x0801163d

0800e484 <_scanf_float>:
 800e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e488:	b087      	sub	sp, #28
 800e48a:	4691      	mov	r9, r2
 800e48c:	9303      	str	r3, [sp, #12]
 800e48e:	688b      	ldr	r3, [r1, #8]
 800e490:	1e5a      	subs	r2, r3, #1
 800e492:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e496:	bf81      	itttt	hi
 800e498:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e49c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e4a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e4a4:	608b      	strhi	r3, [r1, #8]
 800e4a6:	680b      	ldr	r3, [r1, #0]
 800e4a8:	460a      	mov	r2, r1
 800e4aa:	f04f 0500 	mov.w	r5, #0
 800e4ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e4b2:	f842 3b1c 	str.w	r3, [r2], #28
 800e4b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	460c      	mov	r4, r1
 800e4be:	bf98      	it	ls
 800e4c0:	f04f 0b00 	movls.w	fp, #0
 800e4c4:	9201      	str	r2, [sp, #4]
 800e4c6:	4616      	mov	r6, r2
 800e4c8:	46aa      	mov	sl, r5
 800e4ca:	462f      	mov	r7, r5
 800e4cc:	9502      	str	r5, [sp, #8]
 800e4ce:	68a2      	ldr	r2, [r4, #8]
 800e4d0:	b15a      	cbz	r2, 800e4ea <_scanf_float+0x66>
 800e4d2:	f8d9 3000 	ldr.w	r3, [r9]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b4e      	cmp	r3, #78	@ 0x4e
 800e4da:	d863      	bhi.n	800e5a4 <_scanf_float+0x120>
 800e4dc:	2b40      	cmp	r3, #64	@ 0x40
 800e4de:	d83b      	bhi.n	800e558 <_scanf_float+0xd4>
 800e4e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e4e4:	b2c8      	uxtb	r0, r1
 800e4e6:	280e      	cmp	r0, #14
 800e4e8:	d939      	bls.n	800e55e <_scanf_float+0xda>
 800e4ea:	b11f      	cbz	r7, 800e4f4 <_scanf_float+0x70>
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4f8:	f1ba 0f01 	cmp.w	sl, #1
 800e4fc:	f200 8114 	bhi.w	800e728 <_scanf_float+0x2a4>
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	429e      	cmp	r6, r3
 800e504:	f200 8105 	bhi.w	800e712 <_scanf_float+0x28e>
 800e508:	2001      	movs	r0, #1
 800e50a:	b007      	add	sp, #28
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e514:	2a0d      	cmp	r2, #13
 800e516:	d8e8      	bhi.n	800e4ea <_scanf_float+0x66>
 800e518:	a101      	add	r1, pc, #4	@ (adr r1, 800e520 <_scanf_float+0x9c>)
 800e51a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e51e:	bf00      	nop
 800e520:	0800e669 	.word	0x0800e669
 800e524:	0800e4eb 	.word	0x0800e4eb
 800e528:	0800e4eb 	.word	0x0800e4eb
 800e52c:	0800e4eb 	.word	0x0800e4eb
 800e530:	0800e6c5 	.word	0x0800e6c5
 800e534:	0800e69f 	.word	0x0800e69f
 800e538:	0800e4eb 	.word	0x0800e4eb
 800e53c:	0800e4eb 	.word	0x0800e4eb
 800e540:	0800e677 	.word	0x0800e677
 800e544:	0800e4eb 	.word	0x0800e4eb
 800e548:	0800e4eb 	.word	0x0800e4eb
 800e54c:	0800e4eb 	.word	0x0800e4eb
 800e550:	0800e4eb 	.word	0x0800e4eb
 800e554:	0800e633 	.word	0x0800e633
 800e558:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e55c:	e7da      	b.n	800e514 <_scanf_float+0x90>
 800e55e:	290e      	cmp	r1, #14
 800e560:	d8c3      	bhi.n	800e4ea <_scanf_float+0x66>
 800e562:	a001      	add	r0, pc, #4	@ (adr r0, 800e568 <_scanf_float+0xe4>)
 800e564:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e568:	0800e623 	.word	0x0800e623
 800e56c:	0800e4eb 	.word	0x0800e4eb
 800e570:	0800e623 	.word	0x0800e623
 800e574:	0800e6b3 	.word	0x0800e6b3
 800e578:	0800e4eb 	.word	0x0800e4eb
 800e57c:	0800e5c5 	.word	0x0800e5c5
 800e580:	0800e609 	.word	0x0800e609
 800e584:	0800e609 	.word	0x0800e609
 800e588:	0800e609 	.word	0x0800e609
 800e58c:	0800e609 	.word	0x0800e609
 800e590:	0800e609 	.word	0x0800e609
 800e594:	0800e609 	.word	0x0800e609
 800e598:	0800e609 	.word	0x0800e609
 800e59c:	0800e609 	.word	0x0800e609
 800e5a0:	0800e609 	.word	0x0800e609
 800e5a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800e5a6:	d809      	bhi.n	800e5bc <_scanf_float+0x138>
 800e5a8:	2b60      	cmp	r3, #96	@ 0x60
 800e5aa:	d8b1      	bhi.n	800e510 <_scanf_float+0x8c>
 800e5ac:	2b54      	cmp	r3, #84	@ 0x54
 800e5ae:	d07b      	beq.n	800e6a8 <_scanf_float+0x224>
 800e5b0:	2b59      	cmp	r3, #89	@ 0x59
 800e5b2:	d19a      	bne.n	800e4ea <_scanf_float+0x66>
 800e5b4:	2d07      	cmp	r5, #7
 800e5b6:	d198      	bne.n	800e4ea <_scanf_float+0x66>
 800e5b8:	2508      	movs	r5, #8
 800e5ba:	e02f      	b.n	800e61c <_scanf_float+0x198>
 800e5bc:	2b74      	cmp	r3, #116	@ 0x74
 800e5be:	d073      	beq.n	800e6a8 <_scanf_float+0x224>
 800e5c0:	2b79      	cmp	r3, #121	@ 0x79
 800e5c2:	e7f6      	b.n	800e5b2 <_scanf_float+0x12e>
 800e5c4:	6821      	ldr	r1, [r4, #0]
 800e5c6:	05c8      	lsls	r0, r1, #23
 800e5c8:	d51e      	bpl.n	800e608 <_scanf_float+0x184>
 800e5ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e5ce:	6021      	str	r1, [r4, #0]
 800e5d0:	3701      	adds	r7, #1
 800e5d2:	f1bb 0f00 	cmp.w	fp, #0
 800e5d6:	d003      	beq.n	800e5e0 <_scanf_float+0x15c>
 800e5d8:	3201      	adds	r2, #1
 800e5da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e5de:	60a2      	str	r2, [r4, #8]
 800e5e0:	68a3      	ldr	r3, [r4, #8]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	60a3      	str	r3, [r4, #8]
 800e5e6:	6923      	ldr	r3, [r4, #16]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	6123      	str	r3, [r4, #16]
 800e5ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f8c9 3004 	str.w	r3, [r9, #4]
 800e5f8:	f340 8082 	ble.w	800e700 <_scanf_float+0x27c>
 800e5fc:	f8d9 3000 	ldr.w	r3, [r9]
 800e600:	3301      	adds	r3, #1
 800e602:	f8c9 3000 	str.w	r3, [r9]
 800e606:	e762      	b.n	800e4ce <_scanf_float+0x4a>
 800e608:	eb1a 0105 	adds.w	r1, sl, r5
 800e60c:	f47f af6d 	bne.w	800e4ea <_scanf_float+0x66>
 800e610:	6822      	ldr	r2, [r4, #0]
 800e612:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e616:	6022      	str	r2, [r4, #0]
 800e618:	460d      	mov	r5, r1
 800e61a:	468a      	mov	sl, r1
 800e61c:	f806 3b01 	strb.w	r3, [r6], #1
 800e620:	e7de      	b.n	800e5e0 <_scanf_float+0x15c>
 800e622:	6822      	ldr	r2, [r4, #0]
 800e624:	0610      	lsls	r0, r2, #24
 800e626:	f57f af60 	bpl.w	800e4ea <_scanf_float+0x66>
 800e62a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e62e:	6022      	str	r2, [r4, #0]
 800e630:	e7f4      	b.n	800e61c <_scanf_float+0x198>
 800e632:	f1ba 0f00 	cmp.w	sl, #0
 800e636:	d10c      	bne.n	800e652 <_scanf_float+0x1ce>
 800e638:	b977      	cbnz	r7, 800e658 <_scanf_float+0x1d4>
 800e63a:	6822      	ldr	r2, [r4, #0]
 800e63c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e640:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e644:	d108      	bne.n	800e658 <_scanf_float+0x1d4>
 800e646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e64a:	6022      	str	r2, [r4, #0]
 800e64c:	f04f 0a01 	mov.w	sl, #1
 800e650:	e7e4      	b.n	800e61c <_scanf_float+0x198>
 800e652:	f1ba 0f02 	cmp.w	sl, #2
 800e656:	d050      	beq.n	800e6fa <_scanf_float+0x276>
 800e658:	2d01      	cmp	r5, #1
 800e65a:	d002      	beq.n	800e662 <_scanf_float+0x1de>
 800e65c:	2d04      	cmp	r5, #4
 800e65e:	f47f af44 	bne.w	800e4ea <_scanf_float+0x66>
 800e662:	3501      	adds	r5, #1
 800e664:	b2ed      	uxtb	r5, r5
 800e666:	e7d9      	b.n	800e61c <_scanf_float+0x198>
 800e668:	f1ba 0f01 	cmp.w	sl, #1
 800e66c:	f47f af3d 	bne.w	800e4ea <_scanf_float+0x66>
 800e670:	f04f 0a02 	mov.w	sl, #2
 800e674:	e7d2      	b.n	800e61c <_scanf_float+0x198>
 800e676:	b975      	cbnz	r5, 800e696 <_scanf_float+0x212>
 800e678:	2f00      	cmp	r7, #0
 800e67a:	f47f af37 	bne.w	800e4ec <_scanf_float+0x68>
 800e67e:	6822      	ldr	r2, [r4, #0]
 800e680:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e684:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e688:	f040 80fc 	bne.w	800e884 <_scanf_float+0x400>
 800e68c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e690:	6022      	str	r2, [r4, #0]
 800e692:	2501      	movs	r5, #1
 800e694:	e7c2      	b.n	800e61c <_scanf_float+0x198>
 800e696:	2d03      	cmp	r5, #3
 800e698:	d0e3      	beq.n	800e662 <_scanf_float+0x1de>
 800e69a:	2d05      	cmp	r5, #5
 800e69c:	e7df      	b.n	800e65e <_scanf_float+0x1da>
 800e69e:	2d02      	cmp	r5, #2
 800e6a0:	f47f af23 	bne.w	800e4ea <_scanf_float+0x66>
 800e6a4:	2503      	movs	r5, #3
 800e6a6:	e7b9      	b.n	800e61c <_scanf_float+0x198>
 800e6a8:	2d06      	cmp	r5, #6
 800e6aa:	f47f af1e 	bne.w	800e4ea <_scanf_float+0x66>
 800e6ae:	2507      	movs	r5, #7
 800e6b0:	e7b4      	b.n	800e61c <_scanf_float+0x198>
 800e6b2:	6822      	ldr	r2, [r4, #0]
 800e6b4:	0591      	lsls	r1, r2, #22
 800e6b6:	f57f af18 	bpl.w	800e4ea <_scanf_float+0x66>
 800e6ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e6be:	6022      	str	r2, [r4, #0]
 800e6c0:	9702      	str	r7, [sp, #8]
 800e6c2:	e7ab      	b.n	800e61c <_scanf_float+0x198>
 800e6c4:	6822      	ldr	r2, [r4, #0]
 800e6c6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e6ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e6ce:	d005      	beq.n	800e6dc <_scanf_float+0x258>
 800e6d0:	0550      	lsls	r0, r2, #21
 800e6d2:	f57f af0a 	bpl.w	800e4ea <_scanf_float+0x66>
 800e6d6:	2f00      	cmp	r7, #0
 800e6d8:	f000 80d4 	beq.w	800e884 <_scanf_float+0x400>
 800e6dc:	0591      	lsls	r1, r2, #22
 800e6de:	bf58      	it	pl
 800e6e0:	9902      	ldrpl	r1, [sp, #8]
 800e6e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e6e6:	bf58      	it	pl
 800e6e8:	1a79      	subpl	r1, r7, r1
 800e6ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e6ee:	bf58      	it	pl
 800e6f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e6f4:	6022      	str	r2, [r4, #0]
 800e6f6:	2700      	movs	r7, #0
 800e6f8:	e790      	b.n	800e61c <_scanf_float+0x198>
 800e6fa:	f04f 0a03 	mov.w	sl, #3
 800e6fe:	e78d      	b.n	800e61c <_scanf_float+0x198>
 800e700:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e704:	4649      	mov	r1, r9
 800e706:	4640      	mov	r0, r8
 800e708:	4798      	blx	r3
 800e70a:	2800      	cmp	r0, #0
 800e70c:	f43f aedf 	beq.w	800e4ce <_scanf_float+0x4a>
 800e710:	e6eb      	b.n	800e4ea <_scanf_float+0x66>
 800e712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e71a:	464a      	mov	r2, r9
 800e71c:	4640      	mov	r0, r8
 800e71e:	4798      	blx	r3
 800e720:	6923      	ldr	r3, [r4, #16]
 800e722:	3b01      	subs	r3, #1
 800e724:	6123      	str	r3, [r4, #16]
 800e726:	e6eb      	b.n	800e500 <_scanf_float+0x7c>
 800e728:	1e6b      	subs	r3, r5, #1
 800e72a:	2b06      	cmp	r3, #6
 800e72c:	d824      	bhi.n	800e778 <_scanf_float+0x2f4>
 800e72e:	2d02      	cmp	r5, #2
 800e730:	d836      	bhi.n	800e7a0 <_scanf_float+0x31c>
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	429e      	cmp	r6, r3
 800e736:	f67f aee7 	bls.w	800e508 <_scanf_float+0x84>
 800e73a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e73e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e742:	464a      	mov	r2, r9
 800e744:	4640      	mov	r0, r8
 800e746:	4798      	blx	r3
 800e748:	6923      	ldr	r3, [r4, #16]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	6123      	str	r3, [r4, #16]
 800e74e:	e7f0      	b.n	800e732 <_scanf_float+0x2ae>
 800e750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e754:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e758:	464a      	mov	r2, r9
 800e75a:	4640      	mov	r0, r8
 800e75c:	4798      	blx	r3
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	3b01      	subs	r3, #1
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e768:	fa5f fa8a 	uxtb.w	sl, sl
 800e76c:	f1ba 0f02 	cmp.w	sl, #2
 800e770:	d1ee      	bne.n	800e750 <_scanf_float+0x2cc>
 800e772:	3d03      	subs	r5, #3
 800e774:	b2ed      	uxtb	r5, r5
 800e776:	1b76      	subs	r6, r6, r5
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	05da      	lsls	r2, r3, #23
 800e77c:	d530      	bpl.n	800e7e0 <_scanf_float+0x35c>
 800e77e:	055b      	lsls	r3, r3, #21
 800e780:	d511      	bpl.n	800e7a6 <_scanf_float+0x322>
 800e782:	9b01      	ldr	r3, [sp, #4]
 800e784:	429e      	cmp	r6, r3
 800e786:	f67f aebf 	bls.w	800e508 <_scanf_float+0x84>
 800e78a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e78e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e792:	464a      	mov	r2, r9
 800e794:	4640      	mov	r0, r8
 800e796:	4798      	blx	r3
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	3b01      	subs	r3, #1
 800e79c:	6123      	str	r3, [r4, #16]
 800e79e:	e7f0      	b.n	800e782 <_scanf_float+0x2fe>
 800e7a0:	46aa      	mov	sl, r5
 800e7a2:	46b3      	mov	fp, r6
 800e7a4:	e7de      	b.n	800e764 <_scanf_float+0x2e0>
 800e7a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	2965      	cmp	r1, #101	@ 0x65
 800e7ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800e7b6:	6123      	str	r3, [r4, #16]
 800e7b8:	d00c      	beq.n	800e7d4 <_scanf_float+0x350>
 800e7ba:	2945      	cmp	r1, #69	@ 0x45
 800e7bc:	d00a      	beq.n	800e7d4 <_scanf_float+0x350>
 800e7be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7c2:	464a      	mov	r2, r9
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	4798      	blx	r3
 800e7c8:	6923      	ldr	r3, [r4, #16]
 800e7ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	1eb5      	subs	r5, r6, #2
 800e7d2:	6123      	str	r3, [r4, #16]
 800e7d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7d8:	464a      	mov	r2, r9
 800e7da:	4640      	mov	r0, r8
 800e7dc:	4798      	blx	r3
 800e7de:	462e      	mov	r6, r5
 800e7e0:	6822      	ldr	r2, [r4, #0]
 800e7e2:	f012 0210 	ands.w	r2, r2, #16
 800e7e6:	d001      	beq.n	800e7ec <_scanf_float+0x368>
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e68e      	b.n	800e50a <_scanf_float+0x86>
 800e7ec:	7032      	strb	r2, [r6, #0]
 800e7ee:	6823      	ldr	r3, [r4, #0]
 800e7f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e7f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7f8:	d123      	bne.n	800e842 <_scanf_float+0x3be>
 800e7fa:	9b02      	ldr	r3, [sp, #8]
 800e7fc:	429f      	cmp	r7, r3
 800e7fe:	d00a      	beq.n	800e816 <_scanf_float+0x392>
 800e800:	1bda      	subs	r2, r3, r7
 800e802:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e806:	429e      	cmp	r6, r3
 800e808:	bf28      	it	cs
 800e80a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e80e:	491e      	ldr	r1, [pc, #120]	@ (800e888 <_scanf_float+0x404>)
 800e810:	4630      	mov	r0, r6
 800e812:	f000 f95d 	bl	800ead0 <siprintf>
 800e816:	9901      	ldr	r1, [sp, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	4640      	mov	r0, r8
 800e81c:	f7ff f9f6 	bl	800dc0c <_strtod_r>
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	6821      	ldr	r1, [r4, #0]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f011 0f02 	tst.w	r1, #2
 800e82a:	f103 0204 	add.w	r2, r3, #4
 800e82e:	d015      	beq.n	800e85c <_scanf_float+0x3d8>
 800e830:	9903      	ldr	r1, [sp, #12]
 800e832:	600a      	str	r2, [r1, #0]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	ed83 0b00 	vstr	d0, [r3]
 800e83a:	68e3      	ldr	r3, [r4, #12]
 800e83c:	3301      	adds	r3, #1
 800e83e:	60e3      	str	r3, [r4, #12]
 800e840:	e7d2      	b.n	800e7e8 <_scanf_float+0x364>
 800e842:	9b04      	ldr	r3, [sp, #16]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d0e6      	beq.n	800e816 <_scanf_float+0x392>
 800e848:	9905      	ldr	r1, [sp, #20]
 800e84a:	230a      	movs	r3, #10
 800e84c:	3101      	adds	r1, #1
 800e84e:	4640      	mov	r0, r8
 800e850:	f002 f9a0 	bl	8010b94 <_strtol_r>
 800e854:	9b04      	ldr	r3, [sp, #16]
 800e856:	9e05      	ldr	r6, [sp, #20]
 800e858:	1ac2      	subs	r2, r0, r3
 800e85a:	e7d2      	b.n	800e802 <_scanf_float+0x37e>
 800e85c:	f011 0f04 	tst.w	r1, #4
 800e860:	9903      	ldr	r1, [sp, #12]
 800e862:	600a      	str	r2, [r1, #0]
 800e864:	d1e6      	bne.n	800e834 <_scanf_float+0x3b0>
 800e866:	eeb4 0b40 	vcmp.f64	d0, d0
 800e86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86e:	681d      	ldr	r5, [r3, #0]
 800e870:	d705      	bvc.n	800e87e <_scanf_float+0x3fa>
 800e872:	4806      	ldr	r0, [pc, #24]	@ (800e88c <_scanf_float+0x408>)
 800e874:	f000 fae0 	bl	800ee38 <nanf>
 800e878:	ed85 0a00 	vstr	s0, [r5]
 800e87c:	e7dd      	b.n	800e83a <_scanf_float+0x3b6>
 800e87e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e882:	e7f9      	b.n	800e878 <_scanf_float+0x3f4>
 800e884:	2700      	movs	r7, #0
 800e886:	e635      	b.n	800e4f4 <_scanf_float+0x70>
 800e888:	0801164e 	.word	0x0801164e
 800e88c:	080117ed 	.word	0x080117ed

0800e890 <std>:
 800e890:	2300      	movs	r3, #0
 800e892:	b510      	push	{r4, lr}
 800e894:	4604      	mov	r4, r0
 800e896:	e9c0 3300 	strd	r3, r3, [r0]
 800e89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e89e:	6083      	str	r3, [r0, #8]
 800e8a0:	8181      	strh	r1, [r0, #12]
 800e8a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e8a4:	81c2      	strh	r2, [r0, #14]
 800e8a6:	6183      	str	r3, [r0, #24]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	305c      	adds	r0, #92	@ 0x5c
 800e8ae:	f000 fa09 	bl	800ecc4 <memset>
 800e8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e8e8 <std+0x58>)
 800e8b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e8b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e8ec <std+0x5c>)
 800e8b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f0 <std+0x60>)
 800e8bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e8be:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f4 <std+0x64>)
 800e8c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f8 <std+0x68>)
 800e8c4:	6224      	str	r4, [r4, #32]
 800e8c6:	429c      	cmp	r4, r3
 800e8c8:	d006      	beq.n	800e8d8 <std+0x48>
 800e8ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e8ce:	4294      	cmp	r4, r2
 800e8d0:	d002      	beq.n	800e8d8 <std+0x48>
 800e8d2:	33d0      	adds	r3, #208	@ 0xd0
 800e8d4:	429c      	cmp	r4, r3
 800e8d6:	d105      	bne.n	800e8e4 <std+0x54>
 800e8d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8e0:	f000 ba8e 	b.w	800ee00 <__retarget_lock_init_recursive>
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	bf00      	nop
 800e8e8:	0800eb15 	.word	0x0800eb15
 800e8ec:	0800eb37 	.word	0x0800eb37
 800e8f0:	0800eb6f 	.word	0x0800eb6f
 800e8f4:	0800eb93 	.word	0x0800eb93
 800e8f8:	24004dc0 	.word	0x24004dc0

0800e8fc <stdio_exit_handler>:
 800e8fc:	4a02      	ldr	r2, [pc, #8]	@ (800e908 <stdio_exit_handler+0xc>)
 800e8fe:	4903      	ldr	r1, [pc, #12]	@ (800e90c <stdio_exit_handler+0x10>)
 800e900:	4803      	ldr	r0, [pc, #12]	@ (800e910 <stdio_exit_handler+0x14>)
 800e902:	f000 b869 	b.w	800e9d8 <_fwalk_sglue>
 800e906:	bf00      	nop
 800e908:	24000014 	.word	0x24000014
 800e90c:	08010f69 	.word	0x08010f69
 800e910:	24000190 	.word	0x24000190

0800e914 <cleanup_stdio>:
 800e914:	6841      	ldr	r1, [r0, #4]
 800e916:	4b0c      	ldr	r3, [pc, #48]	@ (800e948 <cleanup_stdio+0x34>)
 800e918:	4299      	cmp	r1, r3
 800e91a:	b510      	push	{r4, lr}
 800e91c:	4604      	mov	r4, r0
 800e91e:	d001      	beq.n	800e924 <cleanup_stdio+0x10>
 800e920:	f002 fb22 	bl	8010f68 <_fflush_r>
 800e924:	68a1      	ldr	r1, [r4, #8]
 800e926:	4b09      	ldr	r3, [pc, #36]	@ (800e94c <cleanup_stdio+0x38>)
 800e928:	4299      	cmp	r1, r3
 800e92a:	d002      	beq.n	800e932 <cleanup_stdio+0x1e>
 800e92c:	4620      	mov	r0, r4
 800e92e:	f002 fb1b 	bl	8010f68 <_fflush_r>
 800e932:	68e1      	ldr	r1, [r4, #12]
 800e934:	4b06      	ldr	r3, [pc, #24]	@ (800e950 <cleanup_stdio+0x3c>)
 800e936:	4299      	cmp	r1, r3
 800e938:	d004      	beq.n	800e944 <cleanup_stdio+0x30>
 800e93a:	4620      	mov	r0, r4
 800e93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e940:	f002 bb12 	b.w	8010f68 <_fflush_r>
 800e944:	bd10      	pop	{r4, pc}
 800e946:	bf00      	nop
 800e948:	24004dc0 	.word	0x24004dc0
 800e94c:	24004e28 	.word	0x24004e28
 800e950:	24004e90 	.word	0x24004e90

0800e954 <global_stdio_init.part.0>:
 800e954:	b510      	push	{r4, lr}
 800e956:	4b0b      	ldr	r3, [pc, #44]	@ (800e984 <global_stdio_init.part.0+0x30>)
 800e958:	4c0b      	ldr	r4, [pc, #44]	@ (800e988 <global_stdio_init.part.0+0x34>)
 800e95a:	4a0c      	ldr	r2, [pc, #48]	@ (800e98c <global_stdio_init.part.0+0x38>)
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	4620      	mov	r0, r4
 800e960:	2200      	movs	r2, #0
 800e962:	2104      	movs	r1, #4
 800e964:	f7ff ff94 	bl	800e890 <std>
 800e968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e96c:	2201      	movs	r2, #1
 800e96e:	2109      	movs	r1, #9
 800e970:	f7ff ff8e 	bl	800e890 <std>
 800e974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e978:	2202      	movs	r2, #2
 800e97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e97e:	2112      	movs	r1, #18
 800e980:	f7ff bf86 	b.w	800e890 <std>
 800e984:	24004ef8 	.word	0x24004ef8
 800e988:	24004dc0 	.word	0x24004dc0
 800e98c:	0800e8fd 	.word	0x0800e8fd

0800e990 <__sfp_lock_acquire>:
 800e990:	4801      	ldr	r0, [pc, #4]	@ (800e998 <__sfp_lock_acquire+0x8>)
 800e992:	f000 ba36 	b.w	800ee02 <__retarget_lock_acquire_recursive>
 800e996:	bf00      	nop
 800e998:	24004f01 	.word	0x24004f01

0800e99c <__sfp_lock_release>:
 800e99c:	4801      	ldr	r0, [pc, #4]	@ (800e9a4 <__sfp_lock_release+0x8>)
 800e99e:	f000 ba31 	b.w	800ee04 <__retarget_lock_release_recursive>
 800e9a2:	bf00      	nop
 800e9a4:	24004f01 	.word	0x24004f01

0800e9a8 <__sinit>:
 800e9a8:	b510      	push	{r4, lr}
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	f7ff fff0 	bl	800e990 <__sfp_lock_acquire>
 800e9b0:	6a23      	ldr	r3, [r4, #32]
 800e9b2:	b11b      	cbz	r3, 800e9bc <__sinit+0x14>
 800e9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9b8:	f7ff bff0 	b.w	800e99c <__sfp_lock_release>
 800e9bc:	4b04      	ldr	r3, [pc, #16]	@ (800e9d0 <__sinit+0x28>)
 800e9be:	6223      	str	r3, [r4, #32]
 800e9c0:	4b04      	ldr	r3, [pc, #16]	@ (800e9d4 <__sinit+0x2c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1f5      	bne.n	800e9b4 <__sinit+0xc>
 800e9c8:	f7ff ffc4 	bl	800e954 <global_stdio_init.part.0>
 800e9cc:	e7f2      	b.n	800e9b4 <__sinit+0xc>
 800e9ce:	bf00      	nop
 800e9d0:	0800e915 	.word	0x0800e915
 800e9d4:	24004ef8 	.word	0x24004ef8

0800e9d8 <_fwalk_sglue>:
 800e9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9dc:	4607      	mov	r7, r0
 800e9de:	4688      	mov	r8, r1
 800e9e0:	4614      	mov	r4, r2
 800e9e2:	2600      	movs	r6, #0
 800e9e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9e8:	f1b9 0901 	subs.w	r9, r9, #1
 800e9ec:	d505      	bpl.n	800e9fa <_fwalk_sglue+0x22>
 800e9ee:	6824      	ldr	r4, [r4, #0]
 800e9f0:	2c00      	cmp	r4, #0
 800e9f2:	d1f7      	bne.n	800e9e4 <_fwalk_sglue+0xc>
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9fa:	89ab      	ldrh	r3, [r5, #12]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d907      	bls.n	800ea10 <_fwalk_sglue+0x38>
 800ea00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea04:	3301      	adds	r3, #1
 800ea06:	d003      	beq.n	800ea10 <_fwalk_sglue+0x38>
 800ea08:	4629      	mov	r1, r5
 800ea0a:	4638      	mov	r0, r7
 800ea0c:	47c0      	blx	r8
 800ea0e:	4306      	orrs	r6, r0
 800ea10:	3568      	adds	r5, #104	@ 0x68
 800ea12:	e7e9      	b.n	800e9e8 <_fwalk_sglue+0x10>

0800ea14 <_puts_r>:
 800ea14:	6a03      	ldr	r3, [r0, #32]
 800ea16:	b570      	push	{r4, r5, r6, lr}
 800ea18:	6884      	ldr	r4, [r0, #8]
 800ea1a:	4605      	mov	r5, r0
 800ea1c:	460e      	mov	r6, r1
 800ea1e:	b90b      	cbnz	r3, 800ea24 <_puts_r+0x10>
 800ea20:	f7ff ffc2 	bl	800e9a8 <__sinit>
 800ea24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea26:	07db      	lsls	r3, r3, #31
 800ea28:	d405      	bmi.n	800ea36 <_puts_r+0x22>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	0598      	lsls	r0, r3, #22
 800ea2e:	d402      	bmi.n	800ea36 <_puts_r+0x22>
 800ea30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea32:	f000 f9e6 	bl	800ee02 <__retarget_lock_acquire_recursive>
 800ea36:	89a3      	ldrh	r3, [r4, #12]
 800ea38:	0719      	lsls	r1, r3, #28
 800ea3a:	d502      	bpl.n	800ea42 <_puts_r+0x2e>
 800ea3c:	6923      	ldr	r3, [r4, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d135      	bne.n	800eaae <_puts_r+0x9a>
 800ea42:	4621      	mov	r1, r4
 800ea44:	4628      	mov	r0, r5
 800ea46:	f000 f8e7 	bl	800ec18 <__swsetup_r>
 800ea4a:	b380      	cbz	r0, 800eaae <_puts_r+0x9a>
 800ea4c:	f04f 35ff 	mov.w	r5, #4294967295
 800ea50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea52:	07da      	lsls	r2, r3, #31
 800ea54:	d405      	bmi.n	800ea62 <_puts_r+0x4e>
 800ea56:	89a3      	ldrh	r3, [r4, #12]
 800ea58:	059b      	lsls	r3, r3, #22
 800ea5a:	d402      	bmi.n	800ea62 <_puts_r+0x4e>
 800ea5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea5e:	f000 f9d1 	bl	800ee04 <__retarget_lock_release_recursive>
 800ea62:	4628      	mov	r0, r5
 800ea64:	bd70      	pop	{r4, r5, r6, pc}
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	da04      	bge.n	800ea74 <_puts_r+0x60>
 800ea6a:	69a2      	ldr	r2, [r4, #24]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	dc17      	bgt.n	800eaa0 <_puts_r+0x8c>
 800ea70:	290a      	cmp	r1, #10
 800ea72:	d015      	beq.n	800eaa0 <_puts_r+0x8c>
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	6022      	str	r2, [r4, #0]
 800ea7a:	7019      	strb	r1, [r3, #0]
 800ea7c:	68a3      	ldr	r3, [r4, #8]
 800ea7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea82:	3b01      	subs	r3, #1
 800ea84:	60a3      	str	r3, [r4, #8]
 800ea86:	2900      	cmp	r1, #0
 800ea88:	d1ed      	bne.n	800ea66 <_puts_r+0x52>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	da11      	bge.n	800eab2 <_puts_r+0x9e>
 800ea8e:	4622      	mov	r2, r4
 800ea90:	210a      	movs	r1, #10
 800ea92:	4628      	mov	r0, r5
 800ea94:	f000 f881 	bl	800eb9a <__swbuf_r>
 800ea98:	3001      	adds	r0, #1
 800ea9a:	d0d7      	beq.n	800ea4c <_puts_r+0x38>
 800ea9c:	250a      	movs	r5, #10
 800ea9e:	e7d7      	b.n	800ea50 <_puts_r+0x3c>
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	f000 f879 	bl	800eb9a <__swbuf_r>
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	d1e7      	bne.n	800ea7c <_puts_r+0x68>
 800eaac:	e7ce      	b.n	800ea4c <_puts_r+0x38>
 800eaae:	3e01      	subs	r6, #1
 800eab0:	e7e4      	b.n	800ea7c <_puts_r+0x68>
 800eab2:	6823      	ldr	r3, [r4, #0]
 800eab4:	1c5a      	adds	r2, r3, #1
 800eab6:	6022      	str	r2, [r4, #0]
 800eab8:	220a      	movs	r2, #10
 800eaba:	701a      	strb	r2, [r3, #0]
 800eabc:	e7ee      	b.n	800ea9c <_puts_r+0x88>
	...

0800eac0 <puts>:
 800eac0:	4b02      	ldr	r3, [pc, #8]	@ (800eacc <puts+0xc>)
 800eac2:	4601      	mov	r1, r0
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	f7ff bfa5 	b.w	800ea14 <_puts_r>
 800eaca:	bf00      	nop
 800eacc:	2400018c 	.word	0x2400018c

0800ead0 <siprintf>:
 800ead0:	b40e      	push	{r1, r2, r3}
 800ead2:	b510      	push	{r4, lr}
 800ead4:	b09d      	sub	sp, #116	@ 0x74
 800ead6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ead8:	9002      	str	r0, [sp, #8]
 800eada:	9006      	str	r0, [sp, #24]
 800eadc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eae0:	480a      	ldr	r0, [pc, #40]	@ (800eb0c <siprintf+0x3c>)
 800eae2:	9107      	str	r1, [sp, #28]
 800eae4:	9104      	str	r1, [sp, #16]
 800eae6:	490a      	ldr	r1, [pc, #40]	@ (800eb10 <siprintf+0x40>)
 800eae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaec:	9105      	str	r1, [sp, #20]
 800eaee:	2400      	movs	r4, #0
 800eaf0:	a902      	add	r1, sp, #8
 800eaf2:	6800      	ldr	r0, [r0, #0]
 800eaf4:	9301      	str	r3, [sp, #4]
 800eaf6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eaf8:	f002 f8b6 	bl	8010c68 <_svfiprintf_r>
 800eafc:	9b02      	ldr	r3, [sp, #8]
 800eafe:	701c      	strb	r4, [r3, #0]
 800eb00:	b01d      	add	sp, #116	@ 0x74
 800eb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb06:	b003      	add	sp, #12
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop
 800eb0c:	2400018c 	.word	0x2400018c
 800eb10:	ffff0208 	.word	0xffff0208

0800eb14 <__sread>:
 800eb14:	b510      	push	{r4, lr}
 800eb16:	460c      	mov	r4, r1
 800eb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1c:	f000 f912 	bl	800ed44 <_read_r>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	bfab      	itete	ge
 800eb24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb26:	89a3      	ldrhlt	r3, [r4, #12]
 800eb28:	181b      	addge	r3, r3, r0
 800eb2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb2e:	bfac      	ite	ge
 800eb30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb32:	81a3      	strhlt	r3, [r4, #12]
 800eb34:	bd10      	pop	{r4, pc}

0800eb36 <__swrite>:
 800eb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	461f      	mov	r7, r3
 800eb3c:	898b      	ldrh	r3, [r1, #12]
 800eb3e:	05db      	lsls	r3, r3, #23
 800eb40:	4605      	mov	r5, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	4616      	mov	r6, r2
 800eb46:	d505      	bpl.n	800eb54 <__swrite+0x1e>
 800eb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f000 f8e6 	bl	800ed20 <_lseek_r>
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb5e:	81a3      	strh	r3, [r4, #12]
 800eb60:	4632      	mov	r2, r6
 800eb62:	463b      	mov	r3, r7
 800eb64:	4628      	mov	r0, r5
 800eb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6a:	f000 b90d 	b.w	800ed88 <_write_r>

0800eb6e <__sseek>:
 800eb6e:	b510      	push	{r4, lr}
 800eb70:	460c      	mov	r4, r1
 800eb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb76:	f000 f8d3 	bl	800ed20 <_lseek_r>
 800eb7a:	1c43      	adds	r3, r0, #1
 800eb7c:	89a3      	ldrh	r3, [r4, #12]
 800eb7e:	bf15      	itete	ne
 800eb80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb8a:	81a3      	strheq	r3, [r4, #12]
 800eb8c:	bf18      	it	ne
 800eb8e:	81a3      	strhne	r3, [r4, #12]
 800eb90:	bd10      	pop	{r4, pc}

0800eb92 <__sclose>:
 800eb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb96:	f000 b8b3 	b.w	800ed00 <_close_r>

0800eb9a <__swbuf_r>:
 800eb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9c:	460e      	mov	r6, r1
 800eb9e:	4614      	mov	r4, r2
 800eba0:	4605      	mov	r5, r0
 800eba2:	b118      	cbz	r0, 800ebac <__swbuf_r+0x12>
 800eba4:	6a03      	ldr	r3, [r0, #32]
 800eba6:	b90b      	cbnz	r3, 800ebac <__swbuf_r+0x12>
 800eba8:	f7ff fefe 	bl	800e9a8 <__sinit>
 800ebac:	69a3      	ldr	r3, [r4, #24]
 800ebae:	60a3      	str	r3, [r4, #8]
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	071a      	lsls	r2, r3, #28
 800ebb4:	d501      	bpl.n	800ebba <__swbuf_r+0x20>
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	b943      	cbnz	r3, 800ebcc <__swbuf_r+0x32>
 800ebba:	4621      	mov	r1, r4
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f000 f82b 	bl	800ec18 <__swsetup_r>
 800ebc2:	b118      	cbz	r0, 800ebcc <__swbuf_r+0x32>
 800ebc4:	f04f 37ff 	mov.w	r7, #4294967295
 800ebc8:	4638      	mov	r0, r7
 800ebca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	6922      	ldr	r2, [r4, #16]
 800ebd0:	1a98      	subs	r0, r3, r2
 800ebd2:	6963      	ldr	r3, [r4, #20]
 800ebd4:	b2f6      	uxtb	r6, r6
 800ebd6:	4283      	cmp	r3, r0
 800ebd8:	4637      	mov	r7, r6
 800ebda:	dc05      	bgt.n	800ebe8 <__swbuf_r+0x4e>
 800ebdc:	4621      	mov	r1, r4
 800ebde:	4628      	mov	r0, r5
 800ebe0:	f002 f9c2 	bl	8010f68 <_fflush_r>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d1ed      	bne.n	800ebc4 <__swbuf_r+0x2a>
 800ebe8:	68a3      	ldr	r3, [r4, #8]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	60a3      	str	r3, [r4, #8]
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	6022      	str	r2, [r4, #0]
 800ebf4:	701e      	strb	r6, [r3, #0]
 800ebf6:	6962      	ldr	r2, [r4, #20]
 800ebf8:	1c43      	adds	r3, r0, #1
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d004      	beq.n	800ec08 <__swbuf_r+0x6e>
 800ebfe:	89a3      	ldrh	r3, [r4, #12]
 800ec00:	07db      	lsls	r3, r3, #31
 800ec02:	d5e1      	bpl.n	800ebc8 <__swbuf_r+0x2e>
 800ec04:	2e0a      	cmp	r6, #10
 800ec06:	d1df      	bne.n	800ebc8 <__swbuf_r+0x2e>
 800ec08:	4621      	mov	r1, r4
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f002 f9ac 	bl	8010f68 <_fflush_r>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d0d9      	beq.n	800ebc8 <__swbuf_r+0x2e>
 800ec14:	e7d6      	b.n	800ebc4 <__swbuf_r+0x2a>
	...

0800ec18 <__swsetup_r>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	4b29      	ldr	r3, [pc, #164]	@ (800ecc0 <__swsetup_r+0xa8>)
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	460c      	mov	r4, r1
 800ec22:	b118      	cbz	r0, 800ec2c <__swsetup_r+0x14>
 800ec24:	6a03      	ldr	r3, [r0, #32]
 800ec26:	b90b      	cbnz	r3, 800ec2c <__swsetup_r+0x14>
 800ec28:	f7ff febe 	bl	800e9a8 <__sinit>
 800ec2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec30:	0719      	lsls	r1, r3, #28
 800ec32:	d422      	bmi.n	800ec7a <__swsetup_r+0x62>
 800ec34:	06da      	lsls	r2, r3, #27
 800ec36:	d407      	bmi.n	800ec48 <__swsetup_r+0x30>
 800ec38:	2209      	movs	r2, #9
 800ec3a:	602a      	str	r2, [r5, #0]
 800ec3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec40:	81a3      	strh	r3, [r4, #12]
 800ec42:	f04f 30ff 	mov.w	r0, #4294967295
 800ec46:	e033      	b.n	800ecb0 <__swsetup_r+0x98>
 800ec48:	0758      	lsls	r0, r3, #29
 800ec4a:	d512      	bpl.n	800ec72 <__swsetup_r+0x5a>
 800ec4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec4e:	b141      	cbz	r1, 800ec62 <__swsetup_r+0x4a>
 800ec50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec54:	4299      	cmp	r1, r3
 800ec56:	d002      	beq.n	800ec5e <__swsetup_r+0x46>
 800ec58:	4628      	mov	r0, r5
 800ec5a:	f000 fedb 	bl	800fa14 <_free_r>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	6063      	str	r3, [r4, #4]
 800ec6e:	6923      	ldr	r3, [r4, #16]
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	f043 0308 	orr.w	r3, r3, #8
 800ec78:	81a3      	strh	r3, [r4, #12]
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	b94b      	cbnz	r3, 800ec92 <__swsetup_r+0x7a>
 800ec7e:	89a3      	ldrh	r3, [r4, #12]
 800ec80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec88:	d003      	beq.n	800ec92 <__swsetup_r+0x7a>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	f002 f9b9 	bl	8011004 <__smakebuf_r>
 800ec92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec96:	f013 0201 	ands.w	r2, r3, #1
 800ec9a:	d00a      	beq.n	800ecb2 <__swsetup_r+0x9a>
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	60a2      	str	r2, [r4, #8]
 800eca0:	6962      	ldr	r2, [r4, #20]
 800eca2:	4252      	negs	r2, r2
 800eca4:	61a2      	str	r2, [r4, #24]
 800eca6:	6922      	ldr	r2, [r4, #16]
 800eca8:	b942      	cbnz	r2, 800ecbc <__swsetup_r+0xa4>
 800ecaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecae:	d1c5      	bne.n	800ec3c <__swsetup_r+0x24>
 800ecb0:	bd38      	pop	{r3, r4, r5, pc}
 800ecb2:	0799      	lsls	r1, r3, #30
 800ecb4:	bf58      	it	pl
 800ecb6:	6962      	ldrpl	r2, [r4, #20]
 800ecb8:	60a2      	str	r2, [r4, #8]
 800ecba:	e7f4      	b.n	800eca6 <__swsetup_r+0x8e>
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	e7f7      	b.n	800ecb0 <__swsetup_r+0x98>
 800ecc0:	2400018c 	.word	0x2400018c

0800ecc4 <memset>:
 800ecc4:	4402      	add	r2, r0
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d100      	bne.n	800ecce <memset+0xa>
 800eccc:	4770      	bx	lr
 800ecce:	f803 1b01 	strb.w	r1, [r3], #1
 800ecd2:	e7f9      	b.n	800ecc8 <memset+0x4>

0800ecd4 <strncmp>:
 800ecd4:	b510      	push	{r4, lr}
 800ecd6:	b16a      	cbz	r2, 800ecf4 <strncmp+0x20>
 800ecd8:	3901      	subs	r1, #1
 800ecda:	1884      	adds	r4, r0, r2
 800ecdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ece0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d103      	bne.n	800ecf0 <strncmp+0x1c>
 800ece8:	42a0      	cmp	r0, r4
 800ecea:	d001      	beq.n	800ecf0 <strncmp+0x1c>
 800ecec:	2a00      	cmp	r2, #0
 800ecee:	d1f5      	bne.n	800ecdc <strncmp+0x8>
 800ecf0:	1ad0      	subs	r0, r2, r3
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	e7fc      	b.n	800ecf2 <strncmp+0x1e>

0800ecf8 <_localeconv_r>:
 800ecf8:	4800      	ldr	r0, [pc, #0]	@ (800ecfc <_localeconv_r+0x4>)
 800ecfa:	4770      	bx	lr
 800ecfc:	24000110 	.word	0x24000110

0800ed00 <_close_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d06      	ldr	r5, [pc, #24]	@ (800ed1c <_close_r+0x1c>)
 800ed04:	2300      	movs	r3, #0
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	602b      	str	r3, [r5, #0]
 800ed0c:	f7f2 fc3a 	bl	8001584 <_close>
 800ed10:	1c43      	adds	r3, r0, #1
 800ed12:	d102      	bne.n	800ed1a <_close_r+0x1a>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	b103      	cbz	r3, 800ed1a <_close_r+0x1a>
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	24004efc 	.word	0x24004efc

0800ed20 <_lseek_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d07      	ldr	r5, [pc, #28]	@ (800ed40 <_lseek_r+0x20>)
 800ed24:	4604      	mov	r4, r0
 800ed26:	4608      	mov	r0, r1
 800ed28:	4611      	mov	r1, r2
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	602a      	str	r2, [r5, #0]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	f7f2 fc4f 	bl	80015d2 <_lseek>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	d102      	bne.n	800ed3e <_lseek_r+0x1e>
 800ed38:	682b      	ldr	r3, [r5, #0]
 800ed3a:	b103      	cbz	r3, 800ed3e <_lseek_r+0x1e>
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	bd38      	pop	{r3, r4, r5, pc}
 800ed40:	24004efc 	.word	0x24004efc

0800ed44 <_read_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	@ (800ed64 <_read_r+0x20>)
 800ed48:	4604      	mov	r4, r0
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	2200      	movs	r2, #0
 800ed50:	602a      	str	r2, [r5, #0]
 800ed52:	461a      	mov	r2, r3
 800ed54:	f7f2 fbdd 	bl	8001512 <_read>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_read_r+0x1e>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_read_r+0x1e>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	24004efc 	.word	0x24004efc

0800ed68 <_sbrk_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	@ (800ed84 <_sbrk_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f2 fc3a 	bl	80015ec <_sbrk>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_sbrk_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_sbrk_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	24004efc 	.word	0x24004efc

0800ed88 <_write_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d07      	ldr	r5, [pc, #28]	@ (800eda8 <_write_r+0x20>)
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	4608      	mov	r0, r1
 800ed90:	4611      	mov	r1, r2
 800ed92:	2200      	movs	r2, #0
 800ed94:	602a      	str	r2, [r5, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	f7f2 fbd8 	bl	800154c <_write>
 800ed9c:	1c43      	adds	r3, r0, #1
 800ed9e:	d102      	bne.n	800eda6 <_write_r+0x1e>
 800eda0:	682b      	ldr	r3, [r5, #0]
 800eda2:	b103      	cbz	r3, 800eda6 <_write_r+0x1e>
 800eda4:	6023      	str	r3, [r4, #0]
 800eda6:	bd38      	pop	{r3, r4, r5, pc}
 800eda8:	24004efc 	.word	0x24004efc

0800edac <__errno>:
 800edac:	4b01      	ldr	r3, [pc, #4]	@ (800edb4 <__errno+0x8>)
 800edae:	6818      	ldr	r0, [r3, #0]
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	2400018c 	.word	0x2400018c

0800edb8 <__libc_init_array>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	4d0d      	ldr	r5, [pc, #52]	@ (800edf0 <__libc_init_array+0x38>)
 800edbc:	4c0d      	ldr	r4, [pc, #52]	@ (800edf4 <__libc_init_array+0x3c>)
 800edbe:	1b64      	subs	r4, r4, r5
 800edc0:	10a4      	asrs	r4, r4, #2
 800edc2:	2600      	movs	r6, #0
 800edc4:	42a6      	cmp	r6, r4
 800edc6:	d109      	bne.n	800eddc <__libc_init_array+0x24>
 800edc8:	4d0b      	ldr	r5, [pc, #44]	@ (800edf8 <__libc_init_array+0x40>)
 800edca:	4c0c      	ldr	r4, [pc, #48]	@ (800edfc <__libc_init_array+0x44>)
 800edcc:	f002 fb62 	bl	8011494 <_init>
 800edd0:	1b64      	subs	r4, r4, r5
 800edd2:	10a4      	asrs	r4, r4, #2
 800edd4:	2600      	movs	r6, #0
 800edd6:	42a6      	cmp	r6, r4
 800edd8:	d105      	bne.n	800ede6 <__libc_init_array+0x2e>
 800edda:	bd70      	pop	{r4, r5, r6, pc}
 800eddc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ede0:	4798      	blx	r3
 800ede2:	3601      	adds	r6, #1
 800ede4:	e7ee      	b.n	800edc4 <__libc_init_array+0xc>
 800ede6:	f855 3b04 	ldr.w	r3, [r5], #4
 800edea:	4798      	blx	r3
 800edec:	3601      	adds	r6, #1
 800edee:	e7f2      	b.n	800edd6 <__libc_init_array+0x1e>
 800edf0:	08011a48 	.word	0x08011a48
 800edf4:	08011a48 	.word	0x08011a48
 800edf8:	08011a48 	.word	0x08011a48
 800edfc:	08011a4c 	.word	0x08011a4c

0800ee00 <__retarget_lock_init_recursive>:
 800ee00:	4770      	bx	lr

0800ee02 <__retarget_lock_acquire_recursive>:
 800ee02:	4770      	bx	lr

0800ee04 <__retarget_lock_release_recursive>:
 800ee04:	4770      	bx	lr

0800ee06 <memcpy>:
 800ee06:	440a      	add	r2, r1
 800ee08:	4291      	cmp	r1, r2
 800ee0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee0e:	d100      	bne.n	800ee12 <memcpy+0xc>
 800ee10:	4770      	bx	lr
 800ee12:	b510      	push	{r4, lr}
 800ee14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee1c:	4291      	cmp	r1, r2
 800ee1e:	d1f9      	bne.n	800ee14 <memcpy+0xe>
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	0000      	movs	r0, r0
 800ee24:	0000      	movs	r0, r0
	...

0800ee28 <nan>:
 800ee28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ee30 <nan+0x8>
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	00000000 	.word	0x00000000
 800ee34:	7ff80000 	.word	0x7ff80000

0800ee38 <nanf>:
 800ee38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ee40 <nanf+0x8>
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	7fc00000 	.word	0x7fc00000

0800ee44 <quorem>:
 800ee44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	6903      	ldr	r3, [r0, #16]
 800ee4a:	690c      	ldr	r4, [r1, #16]
 800ee4c:	42a3      	cmp	r3, r4
 800ee4e:	4607      	mov	r7, r0
 800ee50:	db7e      	blt.n	800ef50 <quorem+0x10c>
 800ee52:	3c01      	subs	r4, #1
 800ee54:	f101 0814 	add.w	r8, r1, #20
 800ee58:	00a3      	lsls	r3, r4, #2
 800ee5a:	f100 0514 	add.w	r5, r0, #20
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	429a      	cmp	r2, r3
 800ee72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee76:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee7a:	d32e      	bcc.n	800eeda <quorem+0x96>
 800ee7c:	f04f 0a00 	mov.w	sl, #0
 800ee80:	46c4      	mov	ip, r8
 800ee82:	46ae      	mov	lr, r5
 800ee84:	46d3      	mov	fp, sl
 800ee86:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee8a:	b298      	uxth	r0, r3
 800ee8c:	fb06 a000 	mla	r0, r6, r0, sl
 800ee90:	0c02      	lsrs	r2, r0, #16
 800ee92:	0c1b      	lsrs	r3, r3, #16
 800ee94:	fb06 2303 	mla	r3, r6, r3, r2
 800ee98:	f8de 2000 	ldr.w	r2, [lr]
 800ee9c:	b280      	uxth	r0, r0
 800ee9e:	b292      	uxth	r2, r2
 800eea0:	1a12      	subs	r2, r2, r0
 800eea2:	445a      	add	r2, fp
 800eea4:	f8de 0000 	ldr.w	r0, [lr]
 800eea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eeb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eeb6:	b292      	uxth	r2, r2
 800eeb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eebc:	45e1      	cmp	r9, ip
 800eebe:	f84e 2b04 	str.w	r2, [lr], #4
 800eec2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eec6:	d2de      	bcs.n	800ee86 <quorem+0x42>
 800eec8:	9b00      	ldr	r3, [sp, #0]
 800eeca:	58eb      	ldr	r3, [r5, r3]
 800eecc:	b92b      	cbnz	r3, 800eeda <quorem+0x96>
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	3b04      	subs	r3, #4
 800eed2:	429d      	cmp	r5, r3
 800eed4:	461a      	mov	r2, r3
 800eed6:	d32f      	bcc.n	800ef38 <quorem+0xf4>
 800eed8:	613c      	str	r4, [r7, #16]
 800eeda:	4638      	mov	r0, r7
 800eedc:	f001 fbec 	bl	80106b8 <__mcmp>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	db25      	blt.n	800ef30 <quorem+0xec>
 800eee4:	4629      	mov	r1, r5
 800eee6:	2000      	movs	r0, #0
 800eee8:	f858 2b04 	ldr.w	r2, [r8], #4
 800eeec:	f8d1 c000 	ldr.w	ip, [r1]
 800eef0:	fa1f fe82 	uxth.w	lr, r2
 800eef4:	fa1f f38c 	uxth.w	r3, ip
 800eef8:	eba3 030e 	sub.w	r3, r3, lr
 800eefc:	4403      	add	r3, r0
 800eefe:	0c12      	lsrs	r2, r2, #16
 800ef00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef0e:	45c1      	cmp	r9, r8
 800ef10:	f841 3b04 	str.w	r3, [r1], #4
 800ef14:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef18:	d2e6      	bcs.n	800eee8 <quorem+0xa4>
 800ef1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef22:	b922      	cbnz	r2, 800ef2e <quorem+0xea>
 800ef24:	3b04      	subs	r3, #4
 800ef26:	429d      	cmp	r5, r3
 800ef28:	461a      	mov	r2, r3
 800ef2a:	d30b      	bcc.n	800ef44 <quorem+0x100>
 800ef2c:	613c      	str	r4, [r7, #16]
 800ef2e:	3601      	adds	r6, #1
 800ef30:	4630      	mov	r0, r6
 800ef32:	b003      	add	sp, #12
 800ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef38:	6812      	ldr	r2, [r2, #0]
 800ef3a:	3b04      	subs	r3, #4
 800ef3c:	2a00      	cmp	r2, #0
 800ef3e:	d1cb      	bne.n	800eed8 <quorem+0x94>
 800ef40:	3c01      	subs	r4, #1
 800ef42:	e7c6      	b.n	800eed2 <quorem+0x8e>
 800ef44:	6812      	ldr	r2, [r2, #0]
 800ef46:	3b04      	subs	r3, #4
 800ef48:	2a00      	cmp	r2, #0
 800ef4a:	d1ef      	bne.n	800ef2c <quorem+0xe8>
 800ef4c:	3c01      	subs	r4, #1
 800ef4e:	e7ea      	b.n	800ef26 <quorem+0xe2>
 800ef50:	2000      	movs	r0, #0
 800ef52:	e7ee      	b.n	800ef32 <quorem+0xee>
 800ef54:	0000      	movs	r0, r0
	...

0800ef58 <_dtoa_r>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	ed2d 8b02 	vpush	{d8}
 800ef60:	69c7      	ldr	r7, [r0, #28]
 800ef62:	b091      	sub	sp, #68	@ 0x44
 800ef64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef68:	ec55 4b10 	vmov	r4, r5, d0
 800ef6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ef6e:	9107      	str	r1, [sp, #28]
 800ef70:	4681      	mov	r9, r0
 800ef72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef74:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef76:	b97f      	cbnz	r7, 800ef98 <_dtoa_r+0x40>
 800ef78:	2010      	movs	r0, #16
 800ef7a:	f7fd ffad 	bl	800ced8 <malloc>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	f8c9 001c 	str.w	r0, [r9, #28]
 800ef84:	b920      	cbnz	r0, 800ef90 <_dtoa_r+0x38>
 800ef86:	4ba0      	ldr	r3, [pc, #640]	@ (800f208 <_dtoa_r+0x2b0>)
 800ef88:	21ef      	movs	r1, #239	@ 0xef
 800ef8a:	48a0      	ldr	r0, [pc, #640]	@ (800f20c <_dtoa_r+0x2b4>)
 800ef8c:	f002 f8b2 	bl	80110f4 <__assert_func>
 800ef90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ef94:	6007      	str	r7, [r0, #0]
 800ef96:	60c7      	str	r7, [r0, #12]
 800ef98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef9c:	6819      	ldr	r1, [r3, #0]
 800ef9e:	b159      	cbz	r1, 800efb8 <_dtoa_r+0x60>
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	604a      	str	r2, [r1, #4]
 800efa4:	2301      	movs	r3, #1
 800efa6:	4093      	lsls	r3, r2
 800efa8:	608b      	str	r3, [r1, #8]
 800efaa:	4648      	mov	r0, r9
 800efac:	f001 f908 	bl	80101c0 <_Bfree>
 800efb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]
 800efb8:	1e2b      	subs	r3, r5, #0
 800efba:	bfbb      	ittet	lt
 800efbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800efc0:	9303      	strlt	r3, [sp, #12]
 800efc2:	2300      	movge	r3, #0
 800efc4:	2201      	movlt	r2, #1
 800efc6:	bfac      	ite	ge
 800efc8:	6033      	strge	r3, [r6, #0]
 800efca:	6032      	strlt	r2, [r6, #0]
 800efcc:	4b90      	ldr	r3, [pc, #576]	@ (800f210 <_dtoa_r+0x2b8>)
 800efce:	9e03      	ldr	r6, [sp, #12]
 800efd0:	43b3      	bics	r3, r6
 800efd2:	d110      	bne.n	800eff6 <_dtoa_r+0x9e>
 800efd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800efd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800efe0:	4323      	orrs	r3, r4
 800efe2:	f000 84e6 	beq.w	800f9b2 <_dtoa_r+0xa5a>
 800efe6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800efe8:	4f8a      	ldr	r7, [pc, #552]	@ (800f214 <_dtoa_r+0x2bc>)
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 84e8 	beq.w	800f9c0 <_dtoa_r+0xa68>
 800eff0:	1cfb      	adds	r3, r7, #3
 800eff2:	f000 bce3 	b.w	800f9bc <_dtoa_r+0xa64>
 800eff6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800effa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800effe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f002:	d10a      	bne.n	800f01a <_dtoa_r+0xc2>
 800f004:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f006:	2301      	movs	r3, #1
 800f008:	6013      	str	r3, [r2, #0]
 800f00a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f00c:	b113      	cbz	r3, 800f014 <_dtoa_r+0xbc>
 800f00e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f010:	4b81      	ldr	r3, [pc, #516]	@ (800f218 <_dtoa_r+0x2c0>)
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	4f81      	ldr	r7, [pc, #516]	@ (800f21c <_dtoa_r+0x2c4>)
 800f016:	f000 bcd3 	b.w	800f9c0 <_dtoa_r+0xa68>
 800f01a:	aa0e      	add	r2, sp, #56	@ 0x38
 800f01c:	a90f      	add	r1, sp, #60	@ 0x3c
 800f01e:	4648      	mov	r0, r9
 800f020:	eeb0 0b48 	vmov.f64	d0, d8
 800f024:	f001 fc68 	bl	80108f8 <__d2b>
 800f028:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f02e:	9001      	str	r0, [sp, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d045      	beq.n	800f0c0 <_dtoa_r+0x168>
 800f034:	eeb0 7b48 	vmov.f64	d7, d8
 800f038:	ee18 1a90 	vmov	r1, s17
 800f03c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f040:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f044:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f048:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f04c:	2500      	movs	r5, #0
 800f04e:	ee07 1a90 	vmov	s15, r1
 800f052:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f056:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f1f0 <_dtoa_r+0x298>
 800f05a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f05e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f1f8 <_dtoa_r+0x2a0>
 800f062:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f066:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f200 <_dtoa_r+0x2a8>
 800f06a:	ee07 3a90 	vmov	s15, r3
 800f06e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f072:	eeb0 7b46 	vmov.f64	d7, d6
 800f076:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f07a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f07e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f086:	ee16 8a90 	vmov	r8, s13
 800f08a:	d508      	bpl.n	800f09e <_dtoa_r+0x146>
 800f08c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f090:	eeb4 6b47 	vcmp.f64	d6, d7
 800f094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f098:	bf18      	it	ne
 800f09a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f09e:	f1b8 0f16 	cmp.w	r8, #22
 800f0a2:	d82b      	bhi.n	800f0fc <_dtoa_r+0x1a4>
 800f0a4:	495e      	ldr	r1, [pc, #376]	@ (800f220 <_dtoa_r+0x2c8>)
 800f0a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f0aa:	ed91 7b00 	vldr	d7, [r1]
 800f0ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b6:	d501      	bpl.n	800f0bc <_dtoa_r+0x164>
 800f0b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0bc:	2100      	movs	r1, #0
 800f0be:	e01e      	b.n	800f0fe <_dtoa_r+0x1a6>
 800f0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f0c8:	2920      	cmp	r1, #32
 800f0ca:	bfc1      	itttt	gt
 800f0cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f0d0:	408e      	lslgt	r6, r1
 800f0d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f0d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f0da:	bfd6      	itet	le
 800f0dc:	f1c1 0120 	rsble	r1, r1, #32
 800f0e0:	4331      	orrgt	r1, r6
 800f0e2:	fa04 f101 	lslle.w	r1, r4, r1
 800f0e6:	ee07 1a90 	vmov	s15, r1
 800f0ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	ee17 1a90 	vmov	r1, s15
 800f0f4:	2501      	movs	r5, #1
 800f0f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f0fa:	e7a8      	b.n	800f04e <_dtoa_r+0xf6>
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	1ad2      	subs	r2, r2, r3
 800f100:	1e53      	subs	r3, r2, #1
 800f102:	9306      	str	r3, [sp, #24]
 800f104:	bf45      	ittet	mi
 800f106:	f1c2 0301 	rsbmi	r3, r2, #1
 800f10a:	9304      	strmi	r3, [sp, #16]
 800f10c:	2300      	movpl	r3, #0
 800f10e:	2300      	movmi	r3, #0
 800f110:	bf4c      	ite	mi
 800f112:	9306      	strmi	r3, [sp, #24]
 800f114:	9304      	strpl	r3, [sp, #16]
 800f116:	f1b8 0f00 	cmp.w	r8, #0
 800f11a:	910c      	str	r1, [sp, #48]	@ 0x30
 800f11c:	db18      	blt.n	800f150 <_dtoa_r+0x1f8>
 800f11e:	9b06      	ldr	r3, [sp, #24]
 800f120:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f124:	4443      	add	r3, r8
 800f126:	9306      	str	r3, [sp, #24]
 800f128:	2300      	movs	r3, #0
 800f12a:	9a07      	ldr	r2, [sp, #28]
 800f12c:	2a09      	cmp	r2, #9
 800f12e:	d845      	bhi.n	800f1bc <_dtoa_r+0x264>
 800f130:	2a05      	cmp	r2, #5
 800f132:	bfc4      	itt	gt
 800f134:	3a04      	subgt	r2, #4
 800f136:	9207      	strgt	r2, [sp, #28]
 800f138:	9a07      	ldr	r2, [sp, #28]
 800f13a:	f1a2 0202 	sub.w	r2, r2, #2
 800f13e:	bfcc      	ite	gt
 800f140:	2400      	movgt	r4, #0
 800f142:	2401      	movle	r4, #1
 800f144:	2a03      	cmp	r2, #3
 800f146:	d844      	bhi.n	800f1d2 <_dtoa_r+0x27a>
 800f148:	e8df f002 	tbb	[pc, r2]
 800f14c:	0b173634 	.word	0x0b173634
 800f150:	9b04      	ldr	r3, [sp, #16]
 800f152:	2200      	movs	r2, #0
 800f154:	eba3 0308 	sub.w	r3, r3, r8
 800f158:	9304      	str	r3, [sp, #16]
 800f15a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f15c:	f1c8 0300 	rsb	r3, r8, #0
 800f160:	e7e3      	b.n	800f12a <_dtoa_r+0x1d2>
 800f162:	2201      	movs	r2, #1
 800f164:	9208      	str	r2, [sp, #32]
 800f166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f168:	eb08 0b02 	add.w	fp, r8, r2
 800f16c:	f10b 0a01 	add.w	sl, fp, #1
 800f170:	4652      	mov	r2, sl
 800f172:	2a01      	cmp	r2, #1
 800f174:	bfb8      	it	lt
 800f176:	2201      	movlt	r2, #1
 800f178:	e006      	b.n	800f188 <_dtoa_r+0x230>
 800f17a:	2201      	movs	r2, #1
 800f17c:	9208      	str	r2, [sp, #32]
 800f17e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f180:	2a00      	cmp	r2, #0
 800f182:	dd29      	ble.n	800f1d8 <_dtoa_r+0x280>
 800f184:	4693      	mov	fp, r2
 800f186:	4692      	mov	sl, r2
 800f188:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f18c:	2100      	movs	r1, #0
 800f18e:	2004      	movs	r0, #4
 800f190:	f100 0614 	add.w	r6, r0, #20
 800f194:	4296      	cmp	r6, r2
 800f196:	d926      	bls.n	800f1e6 <_dtoa_r+0x28e>
 800f198:	6079      	str	r1, [r7, #4]
 800f19a:	4648      	mov	r0, r9
 800f19c:	9305      	str	r3, [sp, #20]
 800f19e:	f000 ffcf 	bl	8010140 <_Balloc>
 800f1a2:	9b05      	ldr	r3, [sp, #20]
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d13e      	bne.n	800f228 <_dtoa_r+0x2d0>
 800f1aa:	4b1e      	ldr	r3, [pc, #120]	@ (800f224 <_dtoa_r+0x2cc>)
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800f1b2:	e6ea      	b.n	800ef8a <_dtoa_r+0x32>
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	e7e1      	b.n	800f17c <_dtoa_r+0x224>
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	e7d3      	b.n	800f164 <_dtoa_r+0x20c>
 800f1bc:	2401      	movs	r4, #1
 800f1be:	2200      	movs	r2, #0
 800f1c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f1c4:	f04f 3bff 	mov.w	fp, #4294967295
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	46da      	mov	sl, fp
 800f1cc:	2212      	movs	r2, #18
 800f1ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800f1d0:	e7da      	b.n	800f188 <_dtoa_r+0x230>
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	9208      	str	r2, [sp, #32]
 800f1d6:	e7f5      	b.n	800f1c4 <_dtoa_r+0x26c>
 800f1d8:	f04f 0b01 	mov.w	fp, #1
 800f1dc:	46da      	mov	sl, fp
 800f1de:	465a      	mov	r2, fp
 800f1e0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f1e4:	e7d0      	b.n	800f188 <_dtoa_r+0x230>
 800f1e6:	3101      	adds	r1, #1
 800f1e8:	0040      	lsls	r0, r0, #1
 800f1ea:	e7d1      	b.n	800f190 <_dtoa_r+0x238>
 800f1ec:	f3af 8000 	nop.w
 800f1f0:	636f4361 	.word	0x636f4361
 800f1f4:	3fd287a7 	.word	0x3fd287a7
 800f1f8:	8b60c8b3 	.word	0x8b60c8b3
 800f1fc:	3fc68a28 	.word	0x3fc68a28
 800f200:	509f79fb 	.word	0x509f79fb
 800f204:	3fd34413 	.word	0x3fd34413
 800f208:	08011668 	.word	0x08011668
 800f20c:	0801167f 	.word	0x0801167f
 800f210:	7ff00000 	.word	0x7ff00000
 800f214:	08011664 	.word	0x08011664
 800f218:	0801162b 	.word	0x0801162b
 800f21c:	0801162a 	.word	0x0801162a
 800f220:	08011978 	.word	0x08011978
 800f224:	080116d7 	.word	0x080116d7
 800f228:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f22c:	f1ba 0f0e 	cmp.w	sl, #14
 800f230:	6010      	str	r0, [r2, #0]
 800f232:	d86e      	bhi.n	800f312 <_dtoa_r+0x3ba>
 800f234:	2c00      	cmp	r4, #0
 800f236:	d06c      	beq.n	800f312 <_dtoa_r+0x3ba>
 800f238:	f1b8 0f00 	cmp.w	r8, #0
 800f23c:	f340 80b4 	ble.w	800f3a8 <_dtoa_r+0x450>
 800f240:	4ac8      	ldr	r2, [pc, #800]	@ (800f564 <_dtoa_r+0x60c>)
 800f242:	f008 010f 	and.w	r1, r8, #15
 800f246:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f24a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f24e:	ed92 7b00 	vldr	d7, [r2]
 800f252:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f256:	f000 809b 	beq.w	800f390 <_dtoa_r+0x438>
 800f25a:	4ac3      	ldr	r2, [pc, #780]	@ (800f568 <_dtoa_r+0x610>)
 800f25c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f260:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f264:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f268:	f001 010f 	and.w	r1, r1, #15
 800f26c:	2203      	movs	r2, #3
 800f26e:	48be      	ldr	r0, [pc, #760]	@ (800f568 <_dtoa_r+0x610>)
 800f270:	2900      	cmp	r1, #0
 800f272:	f040 808f 	bne.w	800f394 <_dtoa_r+0x43c>
 800f276:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f27a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f27e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f282:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f284:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f288:	2900      	cmp	r1, #0
 800f28a:	f000 80b3 	beq.w	800f3f4 <_dtoa_r+0x49c>
 800f28e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f292:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f29a:	f140 80ab 	bpl.w	800f3f4 <_dtoa_r+0x49c>
 800f29e:	f1ba 0f00 	cmp.w	sl, #0
 800f2a2:	f000 80a7 	beq.w	800f3f4 <_dtoa_r+0x49c>
 800f2a6:	f1bb 0f00 	cmp.w	fp, #0
 800f2aa:	dd30      	ble.n	800f30e <_dtoa_r+0x3b6>
 800f2ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f2b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2b8:	f108 31ff 	add.w	r1, r8, #4294967295
 800f2bc:	9105      	str	r1, [sp, #20]
 800f2be:	3201      	adds	r2, #1
 800f2c0:	465c      	mov	r4, fp
 800f2c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f2c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f2ca:	ee07 2a90 	vmov	s15, r2
 800f2ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f2d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f2d6:	ee15 2a90 	vmov	r2, s11
 800f2da:	ec51 0b15 	vmov	r0, r1, d5
 800f2de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f2e2:	2c00      	cmp	r4, #0
 800f2e4:	f040 808a 	bne.w	800f3fc <_dtoa_r+0x4a4>
 800f2e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f2ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f2f0:	ec41 0b17 	vmov	d7, r0, r1
 800f2f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2fc:	f300 826a 	bgt.w	800f7d4 <_dtoa_r+0x87c>
 800f300:	eeb1 7b47 	vneg.f64	d7, d7
 800f304:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30c:	d423      	bmi.n	800f356 <_dtoa_r+0x3fe>
 800f30e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f312:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f314:	2a00      	cmp	r2, #0
 800f316:	f2c0 8129 	blt.w	800f56c <_dtoa_r+0x614>
 800f31a:	f1b8 0f0e 	cmp.w	r8, #14
 800f31e:	f300 8125 	bgt.w	800f56c <_dtoa_r+0x614>
 800f322:	4b90      	ldr	r3, [pc, #576]	@ (800f564 <_dtoa_r+0x60c>)
 800f324:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f328:	ed93 6b00 	vldr	d6, [r3]
 800f32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f280 80c8 	bge.w	800f4c4 <_dtoa_r+0x56c>
 800f334:	f1ba 0f00 	cmp.w	sl, #0
 800f338:	f300 80c4 	bgt.w	800f4c4 <_dtoa_r+0x56c>
 800f33c:	d10b      	bne.n	800f356 <_dtoa_r+0x3fe>
 800f33e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f342:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f346:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f34a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f352:	f2c0 823c 	blt.w	800f7ce <_dtoa_r+0x876>
 800f356:	2400      	movs	r4, #0
 800f358:	4625      	mov	r5, r4
 800f35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f35c:	43db      	mvns	r3, r3
 800f35e:	9305      	str	r3, [sp, #20]
 800f360:	463e      	mov	r6, r7
 800f362:	f04f 0800 	mov.w	r8, #0
 800f366:	4621      	mov	r1, r4
 800f368:	4648      	mov	r0, r9
 800f36a:	f000 ff29 	bl	80101c0 <_Bfree>
 800f36e:	2d00      	cmp	r5, #0
 800f370:	f000 80a2 	beq.w	800f4b8 <_dtoa_r+0x560>
 800f374:	f1b8 0f00 	cmp.w	r8, #0
 800f378:	d005      	beq.n	800f386 <_dtoa_r+0x42e>
 800f37a:	45a8      	cmp	r8, r5
 800f37c:	d003      	beq.n	800f386 <_dtoa_r+0x42e>
 800f37e:	4641      	mov	r1, r8
 800f380:	4648      	mov	r0, r9
 800f382:	f000 ff1d 	bl	80101c0 <_Bfree>
 800f386:	4629      	mov	r1, r5
 800f388:	4648      	mov	r0, r9
 800f38a:	f000 ff19 	bl	80101c0 <_Bfree>
 800f38e:	e093      	b.n	800f4b8 <_dtoa_r+0x560>
 800f390:	2202      	movs	r2, #2
 800f392:	e76c      	b.n	800f26e <_dtoa_r+0x316>
 800f394:	07cc      	lsls	r4, r1, #31
 800f396:	d504      	bpl.n	800f3a2 <_dtoa_r+0x44a>
 800f398:	ed90 6b00 	vldr	d6, [r0]
 800f39c:	3201      	adds	r2, #1
 800f39e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3a2:	1049      	asrs	r1, r1, #1
 800f3a4:	3008      	adds	r0, #8
 800f3a6:	e763      	b.n	800f270 <_dtoa_r+0x318>
 800f3a8:	d022      	beq.n	800f3f0 <_dtoa_r+0x498>
 800f3aa:	f1c8 0100 	rsb	r1, r8, #0
 800f3ae:	4a6d      	ldr	r2, [pc, #436]	@ (800f564 <_dtoa_r+0x60c>)
 800f3b0:	f001 000f 	and.w	r0, r1, #15
 800f3b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f3b8:	ed92 7b00 	vldr	d7, [r2]
 800f3bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f3c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3c4:	4868      	ldr	r0, [pc, #416]	@ (800f568 <_dtoa_r+0x610>)
 800f3c6:	1109      	asrs	r1, r1, #4
 800f3c8:	2400      	movs	r4, #0
 800f3ca:	2202      	movs	r2, #2
 800f3cc:	b929      	cbnz	r1, 800f3da <_dtoa_r+0x482>
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	f43f af57 	beq.w	800f282 <_dtoa_r+0x32a>
 800f3d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3d8:	e753      	b.n	800f282 <_dtoa_r+0x32a>
 800f3da:	07ce      	lsls	r6, r1, #31
 800f3dc:	d505      	bpl.n	800f3ea <_dtoa_r+0x492>
 800f3de:	ed90 6b00 	vldr	d6, [r0]
 800f3e2:	3201      	adds	r2, #1
 800f3e4:	2401      	movs	r4, #1
 800f3e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3ea:	1049      	asrs	r1, r1, #1
 800f3ec:	3008      	adds	r0, #8
 800f3ee:	e7ed      	b.n	800f3cc <_dtoa_r+0x474>
 800f3f0:	2202      	movs	r2, #2
 800f3f2:	e746      	b.n	800f282 <_dtoa_r+0x32a>
 800f3f4:	f8cd 8014 	str.w	r8, [sp, #20]
 800f3f8:	4654      	mov	r4, sl
 800f3fa:	e762      	b.n	800f2c2 <_dtoa_r+0x36a>
 800f3fc:	4a59      	ldr	r2, [pc, #356]	@ (800f564 <_dtoa_r+0x60c>)
 800f3fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f402:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f406:	9a08      	ldr	r2, [sp, #32]
 800f408:	ec41 0b17 	vmov	d7, r0, r1
 800f40c:	443c      	add	r4, r7
 800f40e:	b34a      	cbz	r2, 800f464 <_dtoa_r+0x50c>
 800f410:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f414:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f418:	463e      	mov	r6, r7
 800f41a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f41e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f422:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f426:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f42a:	ee14 2a90 	vmov	r2, s9
 800f42e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f432:	3230      	adds	r2, #48	@ 0x30
 800f434:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f438:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	f806 2b01 	strb.w	r2, [r6], #1
 800f444:	d438      	bmi.n	800f4b8 <_dtoa_r+0x560>
 800f446:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f44a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f452:	d46e      	bmi.n	800f532 <_dtoa_r+0x5da>
 800f454:	42a6      	cmp	r6, r4
 800f456:	f43f af5a 	beq.w	800f30e <_dtoa_r+0x3b6>
 800f45a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f45e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f462:	e7e0      	b.n	800f426 <_dtoa_r+0x4ce>
 800f464:	4621      	mov	r1, r4
 800f466:	463e      	mov	r6, r7
 800f468:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f46c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f470:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f474:	ee14 2a90 	vmov	r2, s9
 800f478:	3230      	adds	r2, #48	@ 0x30
 800f47a:	f806 2b01 	strb.w	r2, [r6], #1
 800f47e:	42a6      	cmp	r6, r4
 800f480:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f484:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f488:	d119      	bne.n	800f4be <_dtoa_r+0x566>
 800f48a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f48e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f492:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49a:	dc4a      	bgt.n	800f532 <_dtoa_r+0x5da>
 800f49c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f4a0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a8:	f57f af31 	bpl.w	800f30e <_dtoa_r+0x3b6>
 800f4ac:	460e      	mov	r6, r1
 800f4ae:	3901      	subs	r1, #1
 800f4b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f4b4:	2b30      	cmp	r3, #48	@ 0x30
 800f4b6:	d0f9      	beq.n	800f4ac <_dtoa_r+0x554>
 800f4b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f4bc:	e027      	b.n	800f50e <_dtoa_r+0x5b6>
 800f4be:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f4c2:	e7d5      	b.n	800f470 <_dtoa_r+0x518>
 800f4c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4c8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f4cc:	463e      	mov	r6, r7
 800f4ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f4d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f4d6:	ee15 3a10 	vmov	r3, s10
 800f4da:	3330      	adds	r3, #48	@ 0x30
 800f4dc:	f806 3b01 	strb.w	r3, [r6], #1
 800f4e0:	1bf3      	subs	r3, r6, r7
 800f4e2:	459a      	cmp	sl, r3
 800f4e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f4e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f4ec:	d132      	bne.n	800f554 <_dtoa_r+0x5fc>
 800f4ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f4f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fa:	dc18      	bgt.n	800f52e <_dtoa_r+0x5d6>
 800f4fc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f504:	d103      	bne.n	800f50e <_dtoa_r+0x5b6>
 800f506:	ee15 3a10 	vmov	r3, s10
 800f50a:	07db      	lsls	r3, r3, #31
 800f50c:	d40f      	bmi.n	800f52e <_dtoa_r+0x5d6>
 800f50e:	9901      	ldr	r1, [sp, #4]
 800f510:	4648      	mov	r0, r9
 800f512:	f000 fe55 	bl	80101c0 <_Bfree>
 800f516:	2300      	movs	r3, #0
 800f518:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f51a:	7033      	strb	r3, [r6, #0]
 800f51c:	f108 0301 	add.w	r3, r8, #1
 800f520:	6013      	str	r3, [r2, #0]
 800f522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 824b 	beq.w	800f9c0 <_dtoa_r+0xa68>
 800f52a:	601e      	str	r6, [r3, #0]
 800f52c:	e248      	b.n	800f9c0 <_dtoa_r+0xa68>
 800f52e:	f8cd 8014 	str.w	r8, [sp, #20]
 800f532:	4633      	mov	r3, r6
 800f534:	461e      	mov	r6, r3
 800f536:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f53a:	2a39      	cmp	r2, #57	@ 0x39
 800f53c:	d106      	bne.n	800f54c <_dtoa_r+0x5f4>
 800f53e:	429f      	cmp	r7, r3
 800f540:	d1f8      	bne.n	800f534 <_dtoa_r+0x5dc>
 800f542:	9a05      	ldr	r2, [sp, #20]
 800f544:	3201      	adds	r2, #1
 800f546:	9205      	str	r2, [sp, #20]
 800f548:	2230      	movs	r2, #48	@ 0x30
 800f54a:	703a      	strb	r2, [r7, #0]
 800f54c:	781a      	ldrb	r2, [r3, #0]
 800f54e:	3201      	adds	r2, #1
 800f550:	701a      	strb	r2, [r3, #0]
 800f552:	e7b1      	b.n	800f4b8 <_dtoa_r+0x560>
 800f554:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f558:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	d1b5      	bne.n	800f4ce <_dtoa_r+0x576>
 800f562:	e7d4      	b.n	800f50e <_dtoa_r+0x5b6>
 800f564:	08011978 	.word	0x08011978
 800f568:	08011950 	.word	0x08011950
 800f56c:	9908      	ldr	r1, [sp, #32]
 800f56e:	2900      	cmp	r1, #0
 800f570:	f000 80e9 	beq.w	800f746 <_dtoa_r+0x7ee>
 800f574:	9907      	ldr	r1, [sp, #28]
 800f576:	2901      	cmp	r1, #1
 800f578:	f300 80cb 	bgt.w	800f712 <_dtoa_r+0x7ba>
 800f57c:	2d00      	cmp	r5, #0
 800f57e:	f000 80c4 	beq.w	800f70a <_dtoa_r+0x7b2>
 800f582:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f586:	9e04      	ldr	r6, [sp, #16]
 800f588:	461c      	mov	r4, r3
 800f58a:	9305      	str	r3, [sp, #20]
 800f58c:	9b04      	ldr	r3, [sp, #16]
 800f58e:	4413      	add	r3, r2
 800f590:	9304      	str	r3, [sp, #16]
 800f592:	9b06      	ldr	r3, [sp, #24]
 800f594:	2101      	movs	r1, #1
 800f596:	4413      	add	r3, r2
 800f598:	4648      	mov	r0, r9
 800f59a:	9306      	str	r3, [sp, #24]
 800f59c:	f000 ff0e 	bl	80103bc <__i2b>
 800f5a0:	9b05      	ldr	r3, [sp, #20]
 800f5a2:	4605      	mov	r5, r0
 800f5a4:	b166      	cbz	r6, 800f5c0 <_dtoa_r+0x668>
 800f5a6:	9a06      	ldr	r2, [sp, #24]
 800f5a8:	2a00      	cmp	r2, #0
 800f5aa:	dd09      	ble.n	800f5c0 <_dtoa_r+0x668>
 800f5ac:	42b2      	cmp	r2, r6
 800f5ae:	9904      	ldr	r1, [sp, #16]
 800f5b0:	bfa8      	it	ge
 800f5b2:	4632      	movge	r2, r6
 800f5b4:	1a89      	subs	r1, r1, r2
 800f5b6:	9104      	str	r1, [sp, #16]
 800f5b8:	9906      	ldr	r1, [sp, #24]
 800f5ba:	1ab6      	subs	r6, r6, r2
 800f5bc:	1a8a      	subs	r2, r1, r2
 800f5be:	9206      	str	r2, [sp, #24]
 800f5c0:	b30b      	cbz	r3, 800f606 <_dtoa_r+0x6ae>
 800f5c2:	9a08      	ldr	r2, [sp, #32]
 800f5c4:	2a00      	cmp	r2, #0
 800f5c6:	f000 80c5 	beq.w	800f754 <_dtoa_r+0x7fc>
 800f5ca:	2c00      	cmp	r4, #0
 800f5cc:	f000 80bf 	beq.w	800f74e <_dtoa_r+0x7f6>
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	4648      	mov	r0, r9
 800f5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5d8:	f000 ffa8 	bl	801052c <__pow5mult>
 800f5dc:	9a01      	ldr	r2, [sp, #4]
 800f5de:	4601      	mov	r1, r0
 800f5e0:	4605      	mov	r5, r0
 800f5e2:	4648      	mov	r0, r9
 800f5e4:	f000 ff00 	bl	80103e8 <__multiply>
 800f5e8:	9901      	ldr	r1, [sp, #4]
 800f5ea:	9005      	str	r0, [sp, #20]
 800f5ec:	4648      	mov	r0, r9
 800f5ee:	f000 fde7 	bl	80101c0 <_Bfree>
 800f5f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5f4:	1b1b      	subs	r3, r3, r4
 800f5f6:	f000 80b0 	beq.w	800f75a <_dtoa_r+0x802>
 800f5fa:	9905      	ldr	r1, [sp, #20]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	4648      	mov	r0, r9
 800f600:	f000 ff94 	bl	801052c <__pow5mult>
 800f604:	9001      	str	r0, [sp, #4]
 800f606:	2101      	movs	r1, #1
 800f608:	4648      	mov	r0, r9
 800f60a:	f000 fed7 	bl	80103bc <__i2b>
 800f60e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f610:	4604      	mov	r4, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	f000 81da 	beq.w	800f9cc <_dtoa_r+0xa74>
 800f618:	461a      	mov	r2, r3
 800f61a:	4601      	mov	r1, r0
 800f61c:	4648      	mov	r0, r9
 800f61e:	f000 ff85 	bl	801052c <__pow5mult>
 800f622:	9b07      	ldr	r3, [sp, #28]
 800f624:	2b01      	cmp	r3, #1
 800f626:	4604      	mov	r4, r0
 800f628:	f300 80a0 	bgt.w	800f76c <_dtoa_r+0x814>
 800f62c:	9b02      	ldr	r3, [sp, #8]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f040 8096 	bne.w	800f760 <_dtoa_r+0x808>
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f63a:	2a00      	cmp	r2, #0
 800f63c:	f040 8092 	bne.w	800f764 <_dtoa_r+0x80c>
 800f640:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f644:	0d12      	lsrs	r2, r2, #20
 800f646:	0512      	lsls	r2, r2, #20
 800f648:	2a00      	cmp	r2, #0
 800f64a:	f000 808d 	beq.w	800f768 <_dtoa_r+0x810>
 800f64e:	9b04      	ldr	r3, [sp, #16]
 800f650:	3301      	adds	r3, #1
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	9b06      	ldr	r3, [sp, #24]
 800f656:	3301      	adds	r3, #1
 800f658:	9306      	str	r3, [sp, #24]
 800f65a:	2301      	movs	r3, #1
 800f65c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f65e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f660:	2b00      	cmp	r3, #0
 800f662:	f000 81b9 	beq.w	800f9d8 <_dtoa_r+0xa80>
 800f666:	6922      	ldr	r2, [r4, #16]
 800f668:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f66c:	6910      	ldr	r0, [r2, #16]
 800f66e:	f000 fe59 	bl	8010324 <__hi0bits>
 800f672:	f1c0 0020 	rsb	r0, r0, #32
 800f676:	9b06      	ldr	r3, [sp, #24]
 800f678:	4418      	add	r0, r3
 800f67a:	f010 001f 	ands.w	r0, r0, #31
 800f67e:	f000 8081 	beq.w	800f784 <_dtoa_r+0x82c>
 800f682:	f1c0 0220 	rsb	r2, r0, #32
 800f686:	2a04      	cmp	r2, #4
 800f688:	dd73      	ble.n	800f772 <_dtoa_r+0x81a>
 800f68a:	9b04      	ldr	r3, [sp, #16]
 800f68c:	f1c0 001c 	rsb	r0, r0, #28
 800f690:	4403      	add	r3, r0
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	9b06      	ldr	r3, [sp, #24]
 800f696:	4406      	add	r6, r0
 800f698:	4403      	add	r3, r0
 800f69a:	9306      	str	r3, [sp, #24]
 800f69c:	9b04      	ldr	r3, [sp, #16]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	dd05      	ble.n	800f6ae <_dtoa_r+0x756>
 800f6a2:	9901      	ldr	r1, [sp, #4]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	4648      	mov	r0, r9
 800f6a8:	f000 ff9a 	bl	80105e0 <__lshift>
 800f6ac:	9001      	str	r0, [sp, #4]
 800f6ae:	9b06      	ldr	r3, [sp, #24]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	dd05      	ble.n	800f6c0 <_dtoa_r+0x768>
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	4648      	mov	r0, r9
 800f6ba:	f000 ff91 	bl	80105e0 <__lshift>
 800f6be:	4604      	mov	r4, r0
 800f6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d060      	beq.n	800f788 <_dtoa_r+0x830>
 800f6c6:	9801      	ldr	r0, [sp, #4]
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	f000 fff5 	bl	80106b8 <__mcmp>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	da5a      	bge.n	800f788 <_dtoa_r+0x830>
 800f6d2:	f108 33ff 	add.w	r3, r8, #4294967295
 800f6d6:	9305      	str	r3, [sp, #20]
 800f6d8:	9901      	ldr	r1, [sp, #4]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	220a      	movs	r2, #10
 800f6de:	4648      	mov	r0, r9
 800f6e0:	f000 fd90 	bl	8010204 <__multadd>
 800f6e4:	9b08      	ldr	r3, [sp, #32]
 800f6e6:	9001      	str	r0, [sp, #4]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f000 8177 	beq.w	800f9dc <_dtoa_r+0xa84>
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	220a      	movs	r2, #10
 800f6f4:	4648      	mov	r0, r9
 800f6f6:	f000 fd85 	bl	8010204 <__multadd>
 800f6fa:	f1bb 0f00 	cmp.w	fp, #0
 800f6fe:	4605      	mov	r5, r0
 800f700:	dc6e      	bgt.n	800f7e0 <_dtoa_r+0x888>
 800f702:	9b07      	ldr	r3, [sp, #28]
 800f704:	2b02      	cmp	r3, #2
 800f706:	dc48      	bgt.n	800f79a <_dtoa_r+0x842>
 800f708:	e06a      	b.n	800f7e0 <_dtoa_r+0x888>
 800f70a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f70c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f710:	e739      	b.n	800f586 <_dtoa_r+0x62e>
 800f712:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f716:	42a3      	cmp	r3, r4
 800f718:	db07      	blt.n	800f72a <_dtoa_r+0x7d2>
 800f71a:	f1ba 0f00 	cmp.w	sl, #0
 800f71e:	eba3 0404 	sub.w	r4, r3, r4
 800f722:	db0b      	blt.n	800f73c <_dtoa_r+0x7e4>
 800f724:	9e04      	ldr	r6, [sp, #16]
 800f726:	4652      	mov	r2, sl
 800f728:	e72f      	b.n	800f58a <_dtoa_r+0x632>
 800f72a:	1ae2      	subs	r2, r4, r3
 800f72c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f72e:	9e04      	ldr	r6, [sp, #16]
 800f730:	4413      	add	r3, r2
 800f732:	930a      	str	r3, [sp, #40]	@ 0x28
 800f734:	4652      	mov	r2, sl
 800f736:	4623      	mov	r3, r4
 800f738:	2400      	movs	r4, #0
 800f73a:	e726      	b.n	800f58a <_dtoa_r+0x632>
 800f73c:	9a04      	ldr	r2, [sp, #16]
 800f73e:	eba2 060a 	sub.w	r6, r2, sl
 800f742:	2200      	movs	r2, #0
 800f744:	e721      	b.n	800f58a <_dtoa_r+0x632>
 800f746:	9e04      	ldr	r6, [sp, #16]
 800f748:	9d08      	ldr	r5, [sp, #32]
 800f74a:	461c      	mov	r4, r3
 800f74c:	e72a      	b.n	800f5a4 <_dtoa_r+0x64c>
 800f74e:	9a01      	ldr	r2, [sp, #4]
 800f750:	9205      	str	r2, [sp, #20]
 800f752:	e752      	b.n	800f5fa <_dtoa_r+0x6a2>
 800f754:	9901      	ldr	r1, [sp, #4]
 800f756:	461a      	mov	r2, r3
 800f758:	e751      	b.n	800f5fe <_dtoa_r+0x6a6>
 800f75a:	9b05      	ldr	r3, [sp, #20]
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	e752      	b.n	800f606 <_dtoa_r+0x6ae>
 800f760:	2300      	movs	r3, #0
 800f762:	e77b      	b.n	800f65c <_dtoa_r+0x704>
 800f764:	9b02      	ldr	r3, [sp, #8]
 800f766:	e779      	b.n	800f65c <_dtoa_r+0x704>
 800f768:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f76a:	e778      	b.n	800f65e <_dtoa_r+0x706>
 800f76c:	2300      	movs	r3, #0
 800f76e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f770:	e779      	b.n	800f666 <_dtoa_r+0x70e>
 800f772:	d093      	beq.n	800f69c <_dtoa_r+0x744>
 800f774:	9b04      	ldr	r3, [sp, #16]
 800f776:	321c      	adds	r2, #28
 800f778:	4413      	add	r3, r2
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	9b06      	ldr	r3, [sp, #24]
 800f77e:	4416      	add	r6, r2
 800f780:	4413      	add	r3, r2
 800f782:	e78a      	b.n	800f69a <_dtoa_r+0x742>
 800f784:	4602      	mov	r2, r0
 800f786:	e7f5      	b.n	800f774 <_dtoa_r+0x81c>
 800f788:	f1ba 0f00 	cmp.w	sl, #0
 800f78c:	f8cd 8014 	str.w	r8, [sp, #20]
 800f790:	46d3      	mov	fp, sl
 800f792:	dc21      	bgt.n	800f7d8 <_dtoa_r+0x880>
 800f794:	9b07      	ldr	r3, [sp, #28]
 800f796:	2b02      	cmp	r3, #2
 800f798:	dd1e      	ble.n	800f7d8 <_dtoa_r+0x880>
 800f79a:	f1bb 0f00 	cmp.w	fp, #0
 800f79e:	f47f addc 	bne.w	800f35a <_dtoa_r+0x402>
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	465b      	mov	r3, fp
 800f7a6:	2205      	movs	r2, #5
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f000 fd2b 	bl	8010204 <__multadd>
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	9801      	ldr	r0, [sp, #4]
 800f7b4:	f000 ff80 	bl	80106b8 <__mcmp>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	f77f adce 	ble.w	800f35a <_dtoa_r+0x402>
 800f7be:	463e      	mov	r6, r7
 800f7c0:	2331      	movs	r3, #49	@ 0x31
 800f7c2:	f806 3b01 	strb.w	r3, [r6], #1
 800f7c6:	9b05      	ldr	r3, [sp, #20]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	9305      	str	r3, [sp, #20]
 800f7cc:	e5c9      	b.n	800f362 <_dtoa_r+0x40a>
 800f7ce:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7d2:	4654      	mov	r4, sl
 800f7d4:	4625      	mov	r5, r4
 800f7d6:	e7f2      	b.n	800f7be <_dtoa_r+0x866>
 800f7d8:	9b08      	ldr	r3, [sp, #32]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f000 8102 	beq.w	800f9e4 <_dtoa_r+0xa8c>
 800f7e0:	2e00      	cmp	r6, #0
 800f7e2:	dd05      	ble.n	800f7f0 <_dtoa_r+0x898>
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	4632      	mov	r2, r6
 800f7e8:	4648      	mov	r0, r9
 800f7ea:	f000 fef9 	bl	80105e0 <__lshift>
 800f7ee:	4605      	mov	r5, r0
 800f7f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d058      	beq.n	800f8a8 <_dtoa_r+0x950>
 800f7f6:	6869      	ldr	r1, [r5, #4]
 800f7f8:	4648      	mov	r0, r9
 800f7fa:	f000 fca1 	bl	8010140 <_Balloc>
 800f7fe:	4606      	mov	r6, r0
 800f800:	b928      	cbnz	r0, 800f80e <_dtoa_r+0x8b6>
 800f802:	4b82      	ldr	r3, [pc, #520]	@ (800fa0c <_dtoa_r+0xab4>)
 800f804:	4602      	mov	r2, r0
 800f806:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f80a:	f7ff bbbe 	b.w	800ef8a <_dtoa_r+0x32>
 800f80e:	692a      	ldr	r2, [r5, #16]
 800f810:	3202      	adds	r2, #2
 800f812:	0092      	lsls	r2, r2, #2
 800f814:	f105 010c 	add.w	r1, r5, #12
 800f818:	300c      	adds	r0, #12
 800f81a:	f7ff faf4 	bl	800ee06 <memcpy>
 800f81e:	2201      	movs	r2, #1
 800f820:	4631      	mov	r1, r6
 800f822:	4648      	mov	r0, r9
 800f824:	f000 fedc 	bl	80105e0 <__lshift>
 800f828:	1c7b      	adds	r3, r7, #1
 800f82a:	9304      	str	r3, [sp, #16]
 800f82c:	eb07 030b 	add.w	r3, r7, fp
 800f830:	9309      	str	r3, [sp, #36]	@ 0x24
 800f832:	9b02      	ldr	r3, [sp, #8]
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	46a8      	mov	r8, r5
 800f83a:	9308      	str	r3, [sp, #32]
 800f83c:	4605      	mov	r5, r0
 800f83e:	9b04      	ldr	r3, [sp, #16]
 800f840:	9801      	ldr	r0, [sp, #4]
 800f842:	4621      	mov	r1, r4
 800f844:	f103 3bff 	add.w	fp, r3, #4294967295
 800f848:	f7ff fafc 	bl	800ee44 <quorem>
 800f84c:	4641      	mov	r1, r8
 800f84e:	9002      	str	r0, [sp, #8]
 800f850:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f854:	9801      	ldr	r0, [sp, #4]
 800f856:	f000 ff2f 	bl	80106b8 <__mcmp>
 800f85a:	462a      	mov	r2, r5
 800f85c:	9006      	str	r0, [sp, #24]
 800f85e:	4621      	mov	r1, r4
 800f860:	4648      	mov	r0, r9
 800f862:	f000 ff45 	bl	80106f0 <__mdiff>
 800f866:	68c2      	ldr	r2, [r0, #12]
 800f868:	4606      	mov	r6, r0
 800f86a:	b9fa      	cbnz	r2, 800f8ac <_dtoa_r+0x954>
 800f86c:	4601      	mov	r1, r0
 800f86e:	9801      	ldr	r0, [sp, #4]
 800f870:	f000 ff22 	bl	80106b8 <__mcmp>
 800f874:	4602      	mov	r2, r0
 800f876:	4631      	mov	r1, r6
 800f878:	4648      	mov	r0, r9
 800f87a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f87c:	f000 fca0 	bl	80101c0 <_Bfree>
 800f880:	9b07      	ldr	r3, [sp, #28]
 800f882:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f884:	9e04      	ldr	r6, [sp, #16]
 800f886:	ea42 0103 	orr.w	r1, r2, r3
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	4319      	orrs	r1, r3
 800f88e:	d10f      	bne.n	800f8b0 <_dtoa_r+0x958>
 800f890:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f894:	d028      	beq.n	800f8e8 <_dtoa_r+0x990>
 800f896:	9b06      	ldr	r3, [sp, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	dd02      	ble.n	800f8a2 <_dtoa_r+0x94a>
 800f89c:	9b02      	ldr	r3, [sp, #8]
 800f89e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f8a2:	f88b a000 	strb.w	sl, [fp]
 800f8a6:	e55e      	b.n	800f366 <_dtoa_r+0x40e>
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	e7bd      	b.n	800f828 <_dtoa_r+0x8d0>
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	e7e2      	b.n	800f876 <_dtoa_r+0x91e>
 800f8b0:	9b06      	ldr	r3, [sp, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	db04      	blt.n	800f8c0 <_dtoa_r+0x968>
 800f8b6:	9907      	ldr	r1, [sp, #28]
 800f8b8:	430b      	orrs	r3, r1
 800f8ba:	9908      	ldr	r1, [sp, #32]
 800f8bc:	430b      	orrs	r3, r1
 800f8be:	d120      	bne.n	800f902 <_dtoa_r+0x9aa>
 800f8c0:	2a00      	cmp	r2, #0
 800f8c2:	ddee      	ble.n	800f8a2 <_dtoa_r+0x94a>
 800f8c4:	9901      	ldr	r1, [sp, #4]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	4648      	mov	r0, r9
 800f8ca:	f000 fe89 	bl	80105e0 <__lshift>
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	9001      	str	r0, [sp, #4]
 800f8d2:	f000 fef1 	bl	80106b8 <__mcmp>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	dc03      	bgt.n	800f8e2 <_dtoa_r+0x98a>
 800f8da:	d1e2      	bne.n	800f8a2 <_dtoa_r+0x94a>
 800f8dc:	f01a 0f01 	tst.w	sl, #1
 800f8e0:	d0df      	beq.n	800f8a2 <_dtoa_r+0x94a>
 800f8e2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f8e6:	d1d9      	bne.n	800f89c <_dtoa_r+0x944>
 800f8e8:	2339      	movs	r3, #57	@ 0x39
 800f8ea:	f88b 3000 	strb.w	r3, [fp]
 800f8ee:	4633      	mov	r3, r6
 800f8f0:	461e      	mov	r6, r3
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f8f8:	2a39      	cmp	r2, #57	@ 0x39
 800f8fa:	d052      	beq.n	800f9a2 <_dtoa_r+0xa4a>
 800f8fc:	3201      	adds	r2, #1
 800f8fe:	701a      	strb	r2, [r3, #0]
 800f900:	e531      	b.n	800f366 <_dtoa_r+0x40e>
 800f902:	2a00      	cmp	r2, #0
 800f904:	dd07      	ble.n	800f916 <_dtoa_r+0x9be>
 800f906:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f90a:	d0ed      	beq.n	800f8e8 <_dtoa_r+0x990>
 800f90c:	f10a 0301 	add.w	r3, sl, #1
 800f910:	f88b 3000 	strb.w	r3, [fp]
 800f914:	e527      	b.n	800f366 <_dtoa_r+0x40e>
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f91a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f91e:	4293      	cmp	r3, r2
 800f920:	d029      	beq.n	800f976 <_dtoa_r+0xa1e>
 800f922:	9901      	ldr	r1, [sp, #4]
 800f924:	2300      	movs	r3, #0
 800f926:	220a      	movs	r2, #10
 800f928:	4648      	mov	r0, r9
 800f92a:	f000 fc6b 	bl	8010204 <__multadd>
 800f92e:	45a8      	cmp	r8, r5
 800f930:	9001      	str	r0, [sp, #4]
 800f932:	f04f 0300 	mov.w	r3, #0
 800f936:	f04f 020a 	mov.w	r2, #10
 800f93a:	4641      	mov	r1, r8
 800f93c:	4648      	mov	r0, r9
 800f93e:	d107      	bne.n	800f950 <_dtoa_r+0x9f8>
 800f940:	f000 fc60 	bl	8010204 <__multadd>
 800f944:	4680      	mov	r8, r0
 800f946:	4605      	mov	r5, r0
 800f948:	9b04      	ldr	r3, [sp, #16]
 800f94a:	3301      	adds	r3, #1
 800f94c:	9304      	str	r3, [sp, #16]
 800f94e:	e776      	b.n	800f83e <_dtoa_r+0x8e6>
 800f950:	f000 fc58 	bl	8010204 <__multadd>
 800f954:	4629      	mov	r1, r5
 800f956:	4680      	mov	r8, r0
 800f958:	2300      	movs	r3, #0
 800f95a:	220a      	movs	r2, #10
 800f95c:	4648      	mov	r0, r9
 800f95e:	f000 fc51 	bl	8010204 <__multadd>
 800f962:	4605      	mov	r5, r0
 800f964:	e7f0      	b.n	800f948 <_dtoa_r+0x9f0>
 800f966:	f1bb 0f00 	cmp.w	fp, #0
 800f96a:	bfcc      	ite	gt
 800f96c:	465e      	movgt	r6, fp
 800f96e:	2601      	movle	r6, #1
 800f970:	443e      	add	r6, r7
 800f972:	f04f 0800 	mov.w	r8, #0
 800f976:	9901      	ldr	r1, [sp, #4]
 800f978:	2201      	movs	r2, #1
 800f97a:	4648      	mov	r0, r9
 800f97c:	f000 fe30 	bl	80105e0 <__lshift>
 800f980:	4621      	mov	r1, r4
 800f982:	9001      	str	r0, [sp, #4]
 800f984:	f000 fe98 	bl	80106b8 <__mcmp>
 800f988:	2800      	cmp	r0, #0
 800f98a:	dcb0      	bgt.n	800f8ee <_dtoa_r+0x996>
 800f98c:	d102      	bne.n	800f994 <_dtoa_r+0xa3c>
 800f98e:	f01a 0f01 	tst.w	sl, #1
 800f992:	d1ac      	bne.n	800f8ee <_dtoa_r+0x996>
 800f994:	4633      	mov	r3, r6
 800f996:	461e      	mov	r6, r3
 800f998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f99c:	2a30      	cmp	r2, #48	@ 0x30
 800f99e:	d0fa      	beq.n	800f996 <_dtoa_r+0xa3e>
 800f9a0:	e4e1      	b.n	800f366 <_dtoa_r+0x40e>
 800f9a2:	429f      	cmp	r7, r3
 800f9a4:	d1a4      	bne.n	800f8f0 <_dtoa_r+0x998>
 800f9a6:	9b05      	ldr	r3, [sp, #20]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	9305      	str	r3, [sp, #20]
 800f9ac:	2331      	movs	r3, #49	@ 0x31
 800f9ae:	703b      	strb	r3, [r7, #0]
 800f9b0:	e4d9      	b.n	800f366 <_dtoa_r+0x40e>
 800f9b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9b4:	4f16      	ldr	r7, [pc, #88]	@ (800fa10 <_dtoa_r+0xab8>)
 800f9b6:	b11b      	cbz	r3, 800f9c0 <_dtoa_r+0xa68>
 800f9b8:	f107 0308 	add.w	r3, r7, #8
 800f9bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f9be:	6013      	str	r3, [r2, #0]
 800f9c0:	4638      	mov	r0, r7
 800f9c2:	b011      	add	sp, #68	@ 0x44
 800f9c4:	ecbd 8b02 	vpop	{d8}
 800f9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9cc:	9b07      	ldr	r3, [sp, #28]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	f77f ae2c 	ble.w	800f62c <_dtoa_r+0x6d4>
 800f9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9d8:	2001      	movs	r0, #1
 800f9da:	e64c      	b.n	800f676 <_dtoa_r+0x71e>
 800f9dc:	f1bb 0f00 	cmp.w	fp, #0
 800f9e0:	f77f aed8 	ble.w	800f794 <_dtoa_r+0x83c>
 800f9e4:	463e      	mov	r6, r7
 800f9e6:	9801      	ldr	r0, [sp, #4]
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	f7ff fa2b 	bl	800ee44 <quorem>
 800f9ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f9f2:	f806 ab01 	strb.w	sl, [r6], #1
 800f9f6:	1bf2      	subs	r2, r6, r7
 800f9f8:	4593      	cmp	fp, r2
 800f9fa:	ddb4      	ble.n	800f966 <_dtoa_r+0xa0e>
 800f9fc:	9901      	ldr	r1, [sp, #4]
 800f9fe:	2300      	movs	r3, #0
 800fa00:	220a      	movs	r2, #10
 800fa02:	4648      	mov	r0, r9
 800fa04:	f000 fbfe 	bl	8010204 <__multadd>
 800fa08:	9001      	str	r0, [sp, #4]
 800fa0a:	e7ec      	b.n	800f9e6 <_dtoa_r+0xa8e>
 800fa0c:	080116d7 	.word	0x080116d7
 800fa10:	0801165b 	.word	0x0801165b

0800fa14 <_free_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	4605      	mov	r5, r0
 800fa18:	2900      	cmp	r1, #0
 800fa1a:	d041      	beq.n	800faa0 <_free_r+0x8c>
 800fa1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa20:	1f0c      	subs	r4, r1, #4
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	bfb8      	it	lt
 800fa26:	18e4      	addlt	r4, r4, r3
 800fa28:	f7fd fb00 	bl	800d02c <__malloc_lock>
 800fa2c:	4a1d      	ldr	r2, [pc, #116]	@ (800faa4 <_free_r+0x90>)
 800fa2e:	6813      	ldr	r3, [r2, #0]
 800fa30:	b933      	cbnz	r3, 800fa40 <_free_r+0x2c>
 800fa32:	6063      	str	r3, [r4, #4]
 800fa34:	6014      	str	r4, [r2, #0]
 800fa36:	4628      	mov	r0, r5
 800fa38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa3c:	f7fd bafc 	b.w	800d038 <__malloc_unlock>
 800fa40:	42a3      	cmp	r3, r4
 800fa42:	d908      	bls.n	800fa56 <_free_r+0x42>
 800fa44:	6820      	ldr	r0, [r4, #0]
 800fa46:	1821      	adds	r1, r4, r0
 800fa48:	428b      	cmp	r3, r1
 800fa4a:	bf01      	itttt	eq
 800fa4c:	6819      	ldreq	r1, [r3, #0]
 800fa4e:	685b      	ldreq	r3, [r3, #4]
 800fa50:	1809      	addeq	r1, r1, r0
 800fa52:	6021      	streq	r1, [r4, #0]
 800fa54:	e7ed      	b.n	800fa32 <_free_r+0x1e>
 800fa56:	461a      	mov	r2, r3
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	b10b      	cbz	r3, 800fa60 <_free_r+0x4c>
 800fa5c:	42a3      	cmp	r3, r4
 800fa5e:	d9fa      	bls.n	800fa56 <_free_r+0x42>
 800fa60:	6811      	ldr	r1, [r2, #0]
 800fa62:	1850      	adds	r0, r2, r1
 800fa64:	42a0      	cmp	r0, r4
 800fa66:	d10b      	bne.n	800fa80 <_free_r+0x6c>
 800fa68:	6820      	ldr	r0, [r4, #0]
 800fa6a:	4401      	add	r1, r0
 800fa6c:	1850      	adds	r0, r2, r1
 800fa6e:	4283      	cmp	r3, r0
 800fa70:	6011      	str	r1, [r2, #0]
 800fa72:	d1e0      	bne.n	800fa36 <_free_r+0x22>
 800fa74:	6818      	ldr	r0, [r3, #0]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	6053      	str	r3, [r2, #4]
 800fa7a:	4408      	add	r0, r1
 800fa7c:	6010      	str	r0, [r2, #0]
 800fa7e:	e7da      	b.n	800fa36 <_free_r+0x22>
 800fa80:	d902      	bls.n	800fa88 <_free_r+0x74>
 800fa82:	230c      	movs	r3, #12
 800fa84:	602b      	str	r3, [r5, #0]
 800fa86:	e7d6      	b.n	800fa36 <_free_r+0x22>
 800fa88:	6820      	ldr	r0, [r4, #0]
 800fa8a:	1821      	adds	r1, r4, r0
 800fa8c:	428b      	cmp	r3, r1
 800fa8e:	bf04      	itt	eq
 800fa90:	6819      	ldreq	r1, [r3, #0]
 800fa92:	685b      	ldreq	r3, [r3, #4]
 800fa94:	6063      	str	r3, [r4, #4]
 800fa96:	bf04      	itt	eq
 800fa98:	1809      	addeq	r1, r1, r0
 800fa9a:	6021      	streq	r1, [r4, #0]
 800fa9c:	6054      	str	r4, [r2, #4]
 800fa9e:	e7ca      	b.n	800fa36 <_free_r+0x22>
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	bf00      	nop
 800faa4:	24004dbc 	.word	0x24004dbc

0800faa8 <rshift>:
 800faa8:	6903      	ldr	r3, [r0, #16]
 800faaa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800faae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fab6:	f100 0414 	add.w	r4, r0, #20
 800faba:	dd45      	ble.n	800fb48 <rshift+0xa0>
 800fabc:	f011 011f 	ands.w	r1, r1, #31
 800fac0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fac4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fac8:	d10c      	bne.n	800fae4 <rshift+0x3c>
 800faca:	f100 0710 	add.w	r7, r0, #16
 800face:	4629      	mov	r1, r5
 800fad0:	42b1      	cmp	r1, r6
 800fad2:	d334      	bcc.n	800fb3e <rshift+0x96>
 800fad4:	1a9b      	subs	r3, r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	1eea      	subs	r2, r5, #3
 800fada:	4296      	cmp	r6, r2
 800fadc:	bf38      	it	cc
 800fade:	2300      	movcc	r3, #0
 800fae0:	4423      	add	r3, r4
 800fae2:	e015      	b.n	800fb10 <rshift+0x68>
 800fae4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fae8:	f1c1 0820 	rsb	r8, r1, #32
 800faec:	40cf      	lsrs	r7, r1
 800faee:	f105 0e04 	add.w	lr, r5, #4
 800faf2:	46a1      	mov	r9, r4
 800faf4:	4576      	cmp	r6, lr
 800faf6:	46f4      	mov	ip, lr
 800faf8:	d815      	bhi.n	800fb26 <rshift+0x7e>
 800fafa:	1a9a      	subs	r2, r3, r2
 800fafc:	0092      	lsls	r2, r2, #2
 800fafe:	3a04      	subs	r2, #4
 800fb00:	3501      	adds	r5, #1
 800fb02:	42ae      	cmp	r6, r5
 800fb04:	bf38      	it	cc
 800fb06:	2200      	movcc	r2, #0
 800fb08:	18a3      	adds	r3, r4, r2
 800fb0a:	50a7      	str	r7, [r4, r2]
 800fb0c:	b107      	cbz	r7, 800fb10 <rshift+0x68>
 800fb0e:	3304      	adds	r3, #4
 800fb10:	1b1a      	subs	r2, r3, r4
 800fb12:	42a3      	cmp	r3, r4
 800fb14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb18:	bf08      	it	eq
 800fb1a:	2300      	moveq	r3, #0
 800fb1c:	6102      	str	r2, [r0, #16]
 800fb1e:	bf08      	it	eq
 800fb20:	6143      	streq	r3, [r0, #20]
 800fb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb26:	f8dc c000 	ldr.w	ip, [ip]
 800fb2a:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb2e:	ea4c 0707 	orr.w	r7, ip, r7
 800fb32:	f849 7b04 	str.w	r7, [r9], #4
 800fb36:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb3a:	40cf      	lsrs	r7, r1
 800fb3c:	e7da      	b.n	800faf4 <rshift+0x4c>
 800fb3e:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb42:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb46:	e7c3      	b.n	800fad0 <rshift+0x28>
 800fb48:	4623      	mov	r3, r4
 800fb4a:	e7e1      	b.n	800fb10 <rshift+0x68>

0800fb4c <__hexdig_fun>:
 800fb4c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fb50:	2b09      	cmp	r3, #9
 800fb52:	d802      	bhi.n	800fb5a <__hexdig_fun+0xe>
 800fb54:	3820      	subs	r0, #32
 800fb56:	b2c0      	uxtb	r0, r0
 800fb58:	4770      	bx	lr
 800fb5a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fb5e:	2b05      	cmp	r3, #5
 800fb60:	d801      	bhi.n	800fb66 <__hexdig_fun+0x1a>
 800fb62:	3847      	subs	r0, #71	@ 0x47
 800fb64:	e7f7      	b.n	800fb56 <__hexdig_fun+0xa>
 800fb66:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fb6a:	2b05      	cmp	r3, #5
 800fb6c:	d801      	bhi.n	800fb72 <__hexdig_fun+0x26>
 800fb6e:	3827      	subs	r0, #39	@ 0x27
 800fb70:	e7f1      	b.n	800fb56 <__hexdig_fun+0xa>
 800fb72:	2000      	movs	r0, #0
 800fb74:	4770      	bx	lr
	...

0800fb78 <__gethex>:
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	b085      	sub	sp, #20
 800fb7e:	468a      	mov	sl, r1
 800fb80:	9302      	str	r3, [sp, #8]
 800fb82:	680b      	ldr	r3, [r1, #0]
 800fb84:	9001      	str	r0, [sp, #4]
 800fb86:	4690      	mov	r8, r2
 800fb88:	1c9c      	adds	r4, r3, #2
 800fb8a:	46a1      	mov	r9, r4
 800fb8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb90:	2830      	cmp	r0, #48	@ 0x30
 800fb92:	d0fa      	beq.n	800fb8a <__gethex+0x12>
 800fb94:	eba9 0303 	sub.w	r3, r9, r3
 800fb98:	f1a3 0b02 	sub.w	fp, r3, #2
 800fb9c:	f7ff ffd6 	bl	800fb4c <__hexdig_fun>
 800fba0:	4605      	mov	r5, r0
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d168      	bne.n	800fc78 <__gethex+0x100>
 800fba6:	49a0      	ldr	r1, [pc, #640]	@ (800fe28 <__gethex+0x2b0>)
 800fba8:	2201      	movs	r2, #1
 800fbaa:	4648      	mov	r0, r9
 800fbac:	f7ff f892 	bl	800ecd4 <strncmp>
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d167      	bne.n	800fc86 <__gethex+0x10e>
 800fbb6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fbba:	4626      	mov	r6, r4
 800fbbc:	f7ff ffc6 	bl	800fb4c <__hexdig_fun>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d062      	beq.n	800fc8a <__gethex+0x112>
 800fbc4:	4623      	mov	r3, r4
 800fbc6:	7818      	ldrb	r0, [r3, #0]
 800fbc8:	2830      	cmp	r0, #48	@ 0x30
 800fbca:	4699      	mov	r9, r3
 800fbcc:	f103 0301 	add.w	r3, r3, #1
 800fbd0:	d0f9      	beq.n	800fbc6 <__gethex+0x4e>
 800fbd2:	f7ff ffbb 	bl	800fb4c <__hexdig_fun>
 800fbd6:	fab0 f580 	clz	r5, r0
 800fbda:	096d      	lsrs	r5, r5, #5
 800fbdc:	f04f 0b01 	mov.w	fp, #1
 800fbe0:	464a      	mov	r2, r9
 800fbe2:	4616      	mov	r6, r2
 800fbe4:	3201      	adds	r2, #1
 800fbe6:	7830      	ldrb	r0, [r6, #0]
 800fbe8:	f7ff ffb0 	bl	800fb4c <__hexdig_fun>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d1f8      	bne.n	800fbe2 <__gethex+0x6a>
 800fbf0:	498d      	ldr	r1, [pc, #564]	@ (800fe28 <__gethex+0x2b0>)
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f7ff f86d 	bl	800ecd4 <strncmp>
 800fbfa:	2800      	cmp	r0, #0
 800fbfc:	d13f      	bne.n	800fc7e <__gethex+0x106>
 800fbfe:	b944      	cbnz	r4, 800fc12 <__gethex+0x9a>
 800fc00:	1c74      	adds	r4, r6, #1
 800fc02:	4622      	mov	r2, r4
 800fc04:	4616      	mov	r6, r2
 800fc06:	3201      	adds	r2, #1
 800fc08:	7830      	ldrb	r0, [r6, #0]
 800fc0a:	f7ff ff9f 	bl	800fb4c <__hexdig_fun>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d1f8      	bne.n	800fc04 <__gethex+0x8c>
 800fc12:	1ba4      	subs	r4, r4, r6
 800fc14:	00a7      	lsls	r7, r4, #2
 800fc16:	7833      	ldrb	r3, [r6, #0]
 800fc18:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fc1c:	2b50      	cmp	r3, #80	@ 0x50
 800fc1e:	d13e      	bne.n	800fc9e <__gethex+0x126>
 800fc20:	7873      	ldrb	r3, [r6, #1]
 800fc22:	2b2b      	cmp	r3, #43	@ 0x2b
 800fc24:	d033      	beq.n	800fc8e <__gethex+0x116>
 800fc26:	2b2d      	cmp	r3, #45	@ 0x2d
 800fc28:	d034      	beq.n	800fc94 <__gethex+0x11c>
 800fc2a:	1c71      	adds	r1, r6, #1
 800fc2c:	2400      	movs	r4, #0
 800fc2e:	7808      	ldrb	r0, [r1, #0]
 800fc30:	f7ff ff8c 	bl	800fb4c <__hexdig_fun>
 800fc34:	1e43      	subs	r3, r0, #1
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	2b18      	cmp	r3, #24
 800fc3a:	d830      	bhi.n	800fc9e <__gethex+0x126>
 800fc3c:	f1a0 0210 	sub.w	r2, r0, #16
 800fc40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc44:	f7ff ff82 	bl	800fb4c <__hexdig_fun>
 800fc48:	f100 3cff 	add.w	ip, r0, #4294967295
 800fc4c:	fa5f fc8c 	uxtb.w	ip, ip
 800fc50:	f1bc 0f18 	cmp.w	ip, #24
 800fc54:	f04f 030a 	mov.w	r3, #10
 800fc58:	d91e      	bls.n	800fc98 <__gethex+0x120>
 800fc5a:	b104      	cbz	r4, 800fc5e <__gethex+0xe6>
 800fc5c:	4252      	negs	r2, r2
 800fc5e:	4417      	add	r7, r2
 800fc60:	f8ca 1000 	str.w	r1, [sl]
 800fc64:	b1ed      	cbz	r5, 800fca2 <__gethex+0x12a>
 800fc66:	f1bb 0f00 	cmp.w	fp, #0
 800fc6a:	bf0c      	ite	eq
 800fc6c:	2506      	moveq	r5, #6
 800fc6e:	2500      	movne	r5, #0
 800fc70:	4628      	mov	r0, r5
 800fc72:	b005      	add	sp, #20
 800fc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc78:	2500      	movs	r5, #0
 800fc7a:	462c      	mov	r4, r5
 800fc7c:	e7b0      	b.n	800fbe0 <__gethex+0x68>
 800fc7e:	2c00      	cmp	r4, #0
 800fc80:	d1c7      	bne.n	800fc12 <__gethex+0x9a>
 800fc82:	4627      	mov	r7, r4
 800fc84:	e7c7      	b.n	800fc16 <__gethex+0x9e>
 800fc86:	464e      	mov	r6, r9
 800fc88:	462f      	mov	r7, r5
 800fc8a:	2501      	movs	r5, #1
 800fc8c:	e7c3      	b.n	800fc16 <__gethex+0x9e>
 800fc8e:	2400      	movs	r4, #0
 800fc90:	1cb1      	adds	r1, r6, #2
 800fc92:	e7cc      	b.n	800fc2e <__gethex+0xb6>
 800fc94:	2401      	movs	r4, #1
 800fc96:	e7fb      	b.n	800fc90 <__gethex+0x118>
 800fc98:	fb03 0002 	mla	r0, r3, r2, r0
 800fc9c:	e7ce      	b.n	800fc3c <__gethex+0xc4>
 800fc9e:	4631      	mov	r1, r6
 800fca0:	e7de      	b.n	800fc60 <__gethex+0xe8>
 800fca2:	eba6 0309 	sub.w	r3, r6, r9
 800fca6:	3b01      	subs	r3, #1
 800fca8:	4629      	mov	r1, r5
 800fcaa:	2b07      	cmp	r3, #7
 800fcac:	dc0a      	bgt.n	800fcc4 <__gethex+0x14c>
 800fcae:	9801      	ldr	r0, [sp, #4]
 800fcb0:	f000 fa46 	bl	8010140 <_Balloc>
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	b940      	cbnz	r0, 800fcca <__gethex+0x152>
 800fcb8:	4b5c      	ldr	r3, [pc, #368]	@ (800fe2c <__gethex+0x2b4>)
 800fcba:	4602      	mov	r2, r0
 800fcbc:	21e4      	movs	r1, #228	@ 0xe4
 800fcbe:	485c      	ldr	r0, [pc, #368]	@ (800fe30 <__gethex+0x2b8>)
 800fcc0:	f001 fa18 	bl	80110f4 <__assert_func>
 800fcc4:	3101      	adds	r1, #1
 800fcc6:	105b      	asrs	r3, r3, #1
 800fcc8:	e7ef      	b.n	800fcaa <__gethex+0x132>
 800fcca:	f100 0a14 	add.w	sl, r0, #20
 800fcce:	2300      	movs	r3, #0
 800fcd0:	4655      	mov	r5, sl
 800fcd2:	469b      	mov	fp, r3
 800fcd4:	45b1      	cmp	r9, r6
 800fcd6:	d337      	bcc.n	800fd48 <__gethex+0x1d0>
 800fcd8:	f845 bb04 	str.w	fp, [r5], #4
 800fcdc:	eba5 050a 	sub.w	r5, r5, sl
 800fce0:	10ad      	asrs	r5, r5, #2
 800fce2:	6125      	str	r5, [r4, #16]
 800fce4:	4658      	mov	r0, fp
 800fce6:	f000 fb1d 	bl	8010324 <__hi0bits>
 800fcea:	016d      	lsls	r5, r5, #5
 800fcec:	f8d8 6000 	ldr.w	r6, [r8]
 800fcf0:	1a2d      	subs	r5, r5, r0
 800fcf2:	42b5      	cmp	r5, r6
 800fcf4:	dd54      	ble.n	800fda0 <__gethex+0x228>
 800fcf6:	1bad      	subs	r5, r5, r6
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f000 fea6 	bl	8010a4c <__any_on>
 800fd00:	4681      	mov	r9, r0
 800fd02:	b178      	cbz	r0, 800fd24 <__gethex+0x1ac>
 800fd04:	1e6b      	subs	r3, r5, #1
 800fd06:	1159      	asrs	r1, r3, #5
 800fd08:	f003 021f 	and.w	r2, r3, #31
 800fd0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fd10:	f04f 0901 	mov.w	r9, #1
 800fd14:	fa09 f202 	lsl.w	r2, r9, r2
 800fd18:	420a      	tst	r2, r1
 800fd1a:	d003      	beq.n	800fd24 <__gethex+0x1ac>
 800fd1c:	454b      	cmp	r3, r9
 800fd1e:	dc36      	bgt.n	800fd8e <__gethex+0x216>
 800fd20:	f04f 0902 	mov.w	r9, #2
 800fd24:	4629      	mov	r1, r5
 800fd26:	4620      	mov	r0, r4
 800fd28:	f7ff febe 	bl	800faa8 <rshift>
 800fd2c:	442f      	add	r7, r5
 800fd2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd32:	42bb      	cmp	r3, r7
 800fd34:	da42      	bge.n	800fdbc <__gethex+0x244>
 800fd36:	9801      	ldr	r0, [sp, #4]
 800fd38:	4621      	mov	r1, r4
 800fd3a:	f000 fa41 	bl	80101c0 <_Bfree>
 800fd3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd40:	2300      	movs	r3, #0
 800fd42:	6013      	str	r3, [r2, #0]
 800fd44:	25a3      	movs	r5, #163	@ 0xa3
 800fd46:	e793      	b.n	800fc70 <__gethex+0xf8>
 800fd48:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fd4c:	2a2e      	cmp	r2, #46	@ 0x2e
 800fd4e:	d012      	beq.n	800fd76 <__gethex+0x1fe>
 800fd50:	2b20      	cmp	r3, #32
 800fd52:	d104      	bne.n	800fd5e <__gethex+0x1e6>
 800fd54:	f845 bb04 	str.w	fp, [r5], #4
 800fd58:	f04f 0b00 	mov.w	fp, #0
 800fd5c:	465b      	mov	r3, fp
 800fd5e:	7830      	ldrb	r0, [r6, #0]
 800fd60:	9303      	str	r3, [sp, #12]
 800fd62:	f7ff fef3 	bl	800fb4c <__hexdig_fun>
 800fd66:	9b03      	ldr	r3, [sp, #12]
 800fd68:	f000 000f 	and.w	r0, r0, #15
 800fd6c:	4098      	lsls	r0, r3
 800fd6e:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd72:	3304      	adds	r3, #4
 800fd74:	e7ae      	b.n	800fcd4 <__gethex+0x15c>
 800fd76:	45b1      	cmp	r9, r6
 800fd78:	d8ea      	bhi.n	800fd50 <__gethex+0x1d8>
 800fd7a:	492b      	ldr	r1, [pc, #172]	@ (800fe28 <__gethex+0x2b0>)
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	4630      	mov	r0, r6
 800fd82:	f7fe ffa7 	bl	800ecd4 <strncmp>
 800fd86:	9b03      	ldr	r3, [sp, #12]
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d1e1      	bne.n	800fd50 <__gethex+0x1d8>
 800fd8c:	e7a2      	b.n	800fcd4 <__gethex+0x15c>
 800fd8e:	1ea9      	subs	r1, r5, #2
 800fd90:	4620      	mov	r0, r4
 800fd92:	f000 fe5b 	bl	8010a4c <__any_on>
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d0c2      	beq.n	800fd20 <__gethex+0x1a8>
 800fd9a:	f04f 0903 	mov.w	r9, #3
 800fd9e:	e7c1      	b.n	800fd24 <__gethex+0x1ac>
 800fda0:	da09      	bge.n	800fdb6 <__gethex+0x23e>
 800fda2:	1b75      	subs	r5, r6, r5
 800fda4:	4621      	mov	r1, r4
 800fda6:	9801      	ldr	r0, [sp, #4]
 800fda8:	462a      	mov	r2, r5
 800fdaa:	f000 fc19 	bl	80105e0 <__lshift>
 800fdae:	1b7f      	subs	r7, r7, r5
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	f100 0a14 	add.w	sl, r0, #20
 800fdb6:	f04f 0900 	mov.w	r9, #0
 800fdba:	e7b8      	b.n	800fd2e <__gethex+0x1b6>
 800fdbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fdc0:	42bd      	cmp	r5, r7
 800fdc2:	dd6f      	ble.n	800fea4 <__gethex+0x32c>
 800fdc4:	1bed      	subs	r5, r5, r7
 800fdc6:	42ae      	cmp	r6, r5
 800fdc8:	dc34      	bgt.n	800fe34 <__gethex+0x2bc>
 800fdca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d022      	beq.n	800fe18 <__gethex+0x2a0>
 800fdd2:	2b03      	cmp	r3, #3
 800fdd4:	d024      	beq.n	800fe20 <__gethex+0x2a8>
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d115      	bne.n	800fe06 <__gethex+0x28e>
 800fdda:	42ae      	cmp	r6, r5
 800fddc:	d113      	bne.n	800fe06 <__gethex+0x28e>
 800fdde:	2e01      	cmp	r6, #1
 800fde0:	d10b      	bne.n	800fdfa <__gethex+0x282>
 800fde2:	9a02      	ldr	r2, [sp, #8]
 800fde4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fde8:	6013      	str	r3, [r2, #0]
 800fdea:	2301      	movs	r3, #1
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	f8ca 3000 	str.w	r3, [sl]
 800fdf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdf4:	2562      	movs	r5, #98	@ 0x62
 800fdf6:	601c      	str	r4, [r3, #0]
 800fdf8:	e73a      	b.n	800fc70 <__gethex+0xf8>
 800fdfa:	1e71      	subs	r1, r6, #1
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f000 fe25 	bl	8010a4c <__any_on>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d1ed      	bne.n	800fde2 <__gethex+0x26a>
 800fe06:	9801      	ldr	r0, [sp, #4]
 800fe08:	4621      	mov	r1, r4
 800fe0a:	f000 f9d9 	bl	80101c0 <_Bfree>
 800fe0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe10:	2300      	movs	r3, #0
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	2550      	movs	r5, #80	@ 0x50
 800fe16:	e72b      	b.n	800fc70 <__gethex+0xf8>
 800fe18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1f3      	bne.n	800fe06 <__gethex+0x28e>
 800fe1e:	e7e0      	b.n	800fde2 <__gethex+0x26a>
 800fe20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1dd      	bne.n	800fde2 <__gethex+0x26a>
 800fe26:	e7ee      	b.n	800fe06 <__gethex+0x28e>
 800fe28:	08011618 	.word	0x08011618
 800fe2c:	080116d7 	.word	0x080116d7
 800fe30:	080116e8 	.word	0x080116e8
 800fe34:	1e6f      	subs	r7, r5, #1
 800fe36:	f1b9 0f00 	cmp.w	r9, #0
 800fe3a:	d130      	bne.n	800fe9e <__gethex+0x326>
 800fe3c:	b127      	cbz	r7, 800fe48 <__gethex+0x2d0>
 800fe3e:	4639      	mov	r1, r7
 800fe40:	4620      	mov	r0, r4
 800fe42:	f000 fe03 	bl	8010a4c <__any_on>
 800fe46:	4681      	mov	r9, r0
 800fe48:	117a      	asrs	r2, r7, #5
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fe50:	f007 071f 	and.w	r7, r7, #31
 800fe54:	40bb      	lsls	r3, r7
 800fe56:	4213      	tst	r3, r2
 800fe58:	4629      	mov	r1, r5
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	bf18      	it	ne
 800fe5e:	f049 0902 	orrne.w	r9, r9, #2
 800fe62:	f7ff fe21 	bl	800faa8 <rshift>
 800fe66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fe6a:	1b76      	subs	r6, r6, r5
 800fe6c:	2502      	movs	r5, #2
 800fe6e:	f1b9 0f00 	cmp.w	r9, #0
 800fe72:	d047      	beq.n	800ff04 <__gethex+0x38c>
 800fe74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d015      	beq.n	800fea8 <__gethex+0x330>
 800fe7c:	2b03      	cmp	r3, #3
 800fe7e:	d017      	beq.n	800feb0 <__gethex+0x338>
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d109      	bne.n	800fe98 <__gethex+0x320>
 800fe84:	f019 0f02 	tst.w	r9, #2
 800fe88:	d006      	beq.n	800fe98 <__gethex+0x320>
 800fe8a:	f8da 3000 	ldr.w	r3, [sl]
 800fe8e:	ea49 0903 	orr.w	r9, r9, r3
 800fe92:	f019 0f01 	tst.w	r9, #1
 800fe96:	d10e      	bne.n	800feb6 <__gethex+0x33e>
 800fe98:	f045 0510 	orr.w	r5, r5, #16
 800fe9c:	e032      	b.n	800ff04 <__gethex+0x38c>
 800fe9e:	f04f 0901 	mov.w	r9, #1
 800fea2:	e7d1      	b.n	800fe48 <__gethex+0x2d0>
 800fea4:	2501      	movs	r5, #1
 800fea6:	e7e2      	b.n	800fe6e <__gethex+0x2f6>
 800fea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feaa:	f1c3 0301 	rsb	r3, r3, #1
 800feae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800feb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d0f0      	beq.n	800fe98 <__gethex+0x320>
 800feb6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800feba:	f104 0314 	add.w	r3, r4, #20
 800febe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fec2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fec6:	f04f 0c00 	mov.w	ip, #0
 800feca:	4618      	mov	r0, r3
 800fecc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fed0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fed4:	d01b      	beq.n	800ff0e <__gethex+0x396>
 800fed6:	3201      	adds	r2, #1
 800fed8:	6002      	str	r2, [r0, #0]
 800feda:	2d02      	cmp	r5, #2
 800fedc:	f104 0314 	add.w	r3, r4, #20
 800fee0:	d13c      	bne.n	800ff5c <__gethex+0x3e4>
 800fee2:	f8d8 2000 	ldr.w	r2, [r8]
 800fee6:	3a01      	subs	r2, #1
 800fee8:	42b2      	cmp	r2, r6
 800feea:	d109      	bne.n	800ff00 <__gethex+0x388>
 800feec:	1171      	asrs	r1, r6, #5
 800feee:	2201      	movs	r2, #1
 800fef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fef4:	f006 061f 	and.w	r6, r6, #31
 800fef8:	fa02 f606 	lsl.w	r6, r2, r6
 800fefc:	421e      	tst	r6, r3
 800fefe:	d13a      	bne.n	800ff76 <__gethex+0x3fe>
 800ff00:	f045 0520 	orr.w	r5, r5, #32
 800ff04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff06:	601c      	str	r4, [r3, #0]
 800ff08:	9b02      	ldr	r3, [sp, #8]
 800ff0a:	601f      	str	r7, [r3, #0]
 800ff0c:	e6b0      	b.n	800fc70 <__gethex+0xf8>
 800ff0e:	4299      	cmp	r1, r3
 800ff10:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff14:	d8d9      	bhi.n	800feca <__gethex+0x352>
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	459b      	cmp	fp, r3
 800ff1a:	db17      	blt.n	800ff4c <__gethex+0x3d4>
 800ff1c:	6861      	ldr	r1, [r4, #4]
 800ff1e:	9801      	ldr	r0, [sp, #4]
 800ff20:	3101      	adds	r1, #1
 800ff22:	f000 f90d 	bl	8010140 <_Balloc>
 800ff26:	4681      	mov	r9, r0
 800ff28:	b918      	cbnz	r0, 800ff32 <__gethex+0x3ba>
 800ff2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ff94 <__gethex+0x41c>)
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	2184      	movs	r1, #132	@ 0x84
 800ff30:	e6c5      	b.n	800fcbe <__gethex+0x146>
 800ff32:	6922      	ldr	r2, [r4, #16]
 800ff34:	3202      	adds	r2, #2
 800ff36:	f104 010c 	add.w	r1, r4, #12
 800ff3a:	0092      	lsls	r2, r2, #2
 800ff3c:	300c      	adds	r0, #12
 800ff3e:	f7fe ff62 	bl	800ee06 <memcpy>
 800ff42:	4621      	mov	r1, r4
 800ff44:	9801      	ldr	r0, [sp, #4]
 800ff46:	f000 f93b 	bl	80101c0 <_Bfree>
 800ff4a:	464c      	mov	r4, r9
 800ff4c:	6923      	ldr	r3, [r4, #16]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff54:	6122      	str	r2, [r4, #16]
 800ff56:	2201      	movs	r2, #1
 800ff58:	615a      	str	r2, [r3, #20]
 800ff5a:	e7be      	b.n	800feda <__gethex+0x362>
 800ff5c:	6922      	ldr	r2, [r4, #16]
 800ff5e:	455a      	cmp	r2, fp
 800ff60:	dd0b      	ble.n	800ff7a <__gethex+0x402>
 800ff62:	2101      	movs	r1, #1
 800ff64:	4620      	mov	r0, r4
 800ff66:	f7ff fd9f 	bl	800faa8 <rshift>
 800ff6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff6e:	3701      	adds	r7, #1
 800ff70:	42bb      	cmp	r3, r7
 800ff72:	f6ff aee0 	blt.w	800fd36 <__gethex+0x1be>
 800ff76:	2501      	movs	r5, #1
 800ff78:	e7c2      	b.n	800ff00 <__gethex+0x388>
 800ff7a:	f016 061f 	ands.w	r6, r6, #31
 800ff7e:	d0fa      	beq.n	800ff76 <__gethex+0x3fe>
 800ff80:	4453      	add	r3, sl
 800ff82:	f1c6 0620 	rsb	r6, r6, #32
 800ff86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff8a:	f000 f9cb 	bl	8010324 <__hi0bits>
 800ff8e:	42b0      	cmp	r0, r6
 800ff90:	dbe7      	blt.n	800ff62 <__gethex+0x3ea>
 800ff92:	e7f0      	b.n	800ff76 <__gethex+0x3fe>
 800ff94:	080116d7 	.word	0x080116d7

0800ff98 <L_shift>:
 800ff98:	f1c2 0208 	rsb	r2, r2, #8
 800ff9c:	0092      	lsls	r2, r2, #2
 800ff9e:	b570      	push	{r4, r5, r6, lr}
 800ffa0:	f1c2 0620 	rsb	r6, r2, #32
 800ffa4:	6843      	ldr	r3, [r0, #4]
 800ffa6:	6804      	ldr	r4, [r0, #0]
 800ffa8:	fa03 f506 	lsl.w	r5, r3, r6
 800ffac:	432c      	orrs	r4, r5
 800ffae:	40d3      	lsrs	r3, r2
 800ffb0:	6004      	str	r4, [r0, #0]
 800ffb2:	f840 3f04 	str.w	r3, [r0, #4]!
 800ffb6:	4288      	cmp	r0, r1
 800ffb8:	d3f4      	bcc.n	800ffa4 <L_shift+0xc>
 800ffba:	bd70      	pop	{r4, r5, r6, pc}

0800ffbc <__match>:
 800ffbc:	b530      	push	{r4, r5, lr}
 800ffbe:	6803      	ldr	r3, [r0, #0]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffc6:	b914      	cbnz	r4, 800ffce <__match+0x12>
 800ffc8:	6003      	str	r3, [r0, #0]
 800ffca:	2001      	movs	r0, #1
 800ffcc:	bd30      	pop	{r4, r5, pc}
 800ffce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffd2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ffd6:	2d19      	cmp	r5, #25
 800ffd8:	bf98      	it	ls
 800ffda:	3220      	addls	r2, #32
 800ffdc:	42a2      	cmp	r2, r4
 800ffde:	d0f0      	beq.n	800ffc2 <__match+0x6>
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	e7f3      	b.n	800ffcc <__match+0x10>

0800ffe4 <__hexnan>:
 800ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe8:	680b      	ldr	r3, [r1, #0]
 800ffea:	6801      	ldr	r1, [r0, #0]
 800ffec:	115e      	asrs	r6, r3, #5
 800ffee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fff2:	f013 031f 	ands.w	r3, r3, #31
 800fff6:	b087      	sub	sp, #28
 800fff8:	bf18      	it	ne
 800fffa:	3604      	addne	r6, #4
 800fffc:	2500      	movs	r5, #0
 800fffe:	1f37      	subs	r7, r6, #4
 8010000:	4682      	mov	sl, r0
 8010002:	4690      	mov	r8, r2
 8010004:	9301      	str	r3, [sp, #4]
 8010006:	f846 5c04 	str.w	r5, [r6, #-4]
 801000a:	46b9      	mov	r9, r7
 801000c:	463c      	mov	r4, r7
 801000e:	9502      	str	r5, [sp, #8]
 8010010:	46ab      	mov	fp, r5
 8010012:	784a      	ldrb	r2, [r1, #1]
 8010014:	1c4b      	adds	r3, r1, #1
 8010016:	9303      	str	r3, [sp, #12]
 8010018:	b342      	cbz	r2, 801006c <__hexnan+0x88>
 801001a:	4610      	mov	r0, r2
 801001c:	9105      	str	r1, [sp, #20]
 801001e:	9204      	str	r2, [sp, #16]
 8010020:	f7ff fd94 	bl	800fb4c <__hexdig_fun>
 8010024:	2800      	cmp	r0, #0
 8010026:	d151      	bne.n	80100cc <__hexnan+0xe8>
 8010028:	9a04      	ldr	r2, [sp, #16]
 801002a:	9905      	ldr	r1, [sp, #20]
 801002c:	2a20      	cmp	r2, #32
 801002e:	d818      	bhi.n	8010062 <__hexnan+0x7e>
 8010030:	9b02      	ldr	r3, [sp, #8]
 8010032:	459b      	cmp	fp, r3
 8010034:	dd13      	ble.n	801005e <__hexnan+0x7a>
 8010036:	454c      	cmp	r4, r9
 8010038:	d206      	bcs.n	8010048 <__hexnan+0x64>
 801003a:	2d07      	cmp	r5, #7
 801003c:	dc04      	bgt.n	8010048 <__hexnan+0x64>
 801003e:	462a      	mov	r2, r5
 8010040:	4649      	mov	r1, r9
 8010042:	4620      	mov	r0, r4
 8010044:	f7ff ffa8 	bl	800ff98 <L_shift>
 8010048:	4544      	cmp	r4, r8
 801004a:	d952      	bls.n	80100f2 <__hexnan+0x10e>
 801004c:	2300      	movs	r3, #0
 801004e:	f1a4 0904 	sub.w	r9, r4, #4
 8010052:	f844 3c04 	str.w	r3, [r4, #-4]
 8010056:	f8cd b008 	str.w	fp, [sp, #8]
 801005a:	464c      	mov	r4, r9
 801005c:	461d      	mov	r5, r3
 801005e:	9903      	ldr	r1, [sp, #12]
 8010060:	e7d7      	b.n	8010012 <__hexnan+0x2e>
 8010062:	2a29      	cmp	r2, #41	@ 0x29
 8010064:	d157      	bne.n	8010116 <__hexnan+0x132>
 8010066:	3102      	adds	r1, #2
 8010068:	f8ca 1000 	str.w	r1, [sl]
 801006c:	f1bb 0f00 	cmp.w	fp, #0
 8010070:	d051      	beq.n	8010116 <__hexnan+0x132>
 8010072:	454c      	cmp	r4, r9
 8010074:	d206      	bcs.n	8010084 <__hexnan+0xa0>
 8010076:	2d07      	cmp	r5, #7
 8010078:	dc04      	bgt.n	8010084 <__hexnan+0xa0>
 801007a:	462a      	mov	r2, r5
 801007c:	4649      	mov	r1, r9
 801007e:	4620      	mov	r0, r4
 8010080:	f7ff ff8a 	bl	800ff98 <L_shift>
 8010084:	4544      	cmp	r4, r8
 8010086:	d936      	bls.n	80100f6 <__hexnan+0x112>
 8010088:	f1a8 0204 	sub.w	r2, r8, #4
 801008c:	4623      	mov	r3, r4
 801008e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010092:	f842 1f04 	str.w	r1, [r2, #4]!
 8010096:	429f      	cmp	r7, r3
 8010098:	d2f9      	bcs.n	801008e <__hexnan+0xaa>
 801009a:	1b3b      	subs	r3, r7, r4
 801009c:	f023 0303 	bic.w	r3, r3, #3
 80100a0:	3304      	adds	r3, #4
 80100a2:	3401      	adds	r4, #1
 80100a4:	3e03      	subs	r6, #3
 80100a6:	42b4      	cmp	r4, r6
 80100a8:	bf88      	it	hi
 80100aa:	2304      	movhi	r3, #4
 80100ac:	4443      	add	r3, r8
 80100ae:	2200      	movs	r2, #0
 80100b0:	f843 2b04 	str.w	r2, [r3], #4
 80100b4:	429f      	cmp	r7, r3
 80100b6:	d2fb      	bcs.n	80100b0 <__hexnan+0xcc>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	b91b      	cbnz	r3, 80100c4 <__hexnan+0xe0>
 80100bc:	4547      	cmp	r7, r8
 80100be:	d128      	bne.n	8010112 <__hexnan+0x12e>
 80100c0:	2301      	movs	r3, #1
 80100c2:	603b      	str	r3, [r7, #0]
 80100c4:	2005      	movs	r0, #5
 80100c6:	b007      	add	sp, #28
 80100c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100cc:	3501      	adds	r5, #1
 80100ce:	2d08      	cmp	r5, #8
 80100d0:	f10b 0b01 	add.w	fp, fp, #1
 80100d4:	dd06      	ble.n	80100e4 <__hexnan+0x100>
 80100d6:	4544      	cmp	r4, r8
 80100d8:	d9c1      	bls.n	801005e <__hexnan+0x7a>
 80100da:	2300      	movs	r3, #0
 80100dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80100e0:	2501      	movs	r5, #1
 80100e2:	3c04      	subs	r4, #4
 80100e4:	6822      	ldr	r2, [r4, #0]
 80100e6:	f000 000f 	and.w	r0, r0, #15
 80100ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80100ee:	6020      	str	r0, [r4, #0]
 80100f0:	e7b5      	b.n	801005e <__hexnan+0x7a>
 80100f2:	2508      	movs	r5, #8
 80100f4:	e7b3      	b.n	801005e <__hexnan+0x7a>
 80100f6:	9b01      	ldr	r3, [sp, #4]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d0dd      	beq.n	80100b8 <__hexnan+0xd4>
 80100fc:	f1c3 0320 	rsb	r3, r3, #32
 8010100:	f04f 32ff 	mov.w	r2, #4294967295
 8010104:	40da      	lsrs	r2, r3
 8010106:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801010a:	4013      	ands	r3, r2
 801010c:	f846 3c04 	str.w	r3, [r6, #-4]
 8010110:	e7d2      	b.n	80100b8 <__hexnan+0xd4>
 8010112:	3f04      	subs	r7, #4
 8010114:	e7d0      	b.n	80100b8 <__hexnan+0xd4>
 8010116:	2004      	movs	r0, #4
 8010118:	e7d5      	b.n	80100c6 <__hexnan+0xe2>

0801011a <__ascii_mbtowc>:
 801011a:	b082      	sub	sp, #8
 801011c:	b901      	cbnz	r1, 8010120 <__ascii_mbtowc+0x6>
 801011e:	a901      	add	r1, sp, #4
 8010120:	b142      	cbz	r2, 8010134 <__ascii_mbtowc+0x1a>
 8010122:	b14b      	cbz	r3, 8010138 <__ascii_mbtowc+0x1e>
 8010124:	7813      	ldrb	r3, [r2, #0]
 8010126:	600b      	str	r3, [r1, #0]
 8010128:	7812      	ldrb	r2, [r2, #0]
 801012a:	1e10      	subs	r0, r2, #0
 801012c:	bf18      	it	ne
 801012e:	2001      	movne	r0, #1
 8010130:	b002      	add	sp, #8
 8010132:	4770      	bx	lr
 8010134:	4610      	mov	r0, r2
 8010136:	e7fb      	b.n	8010130 <__ascii_mbtowc+0x16>
 8010138:	f06f 0001 	mvn.w	r0, #1
 801013c:	e7f8      	b.n	8010130 <__ascii_mbtowc+0x16>
	...

08010140 <_Balloc>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	69c6      	ldr	r6, [r0, #28]
 8010144:	4604      	mov	r4, r0
 8010146:	460d      	mov	r5, r1
 8010148:	b976      	cbnz	r6, 8010168 <_Balloc+0x28>
 801014a:	2010      	movs	r0, #16
 801014c:	f7fc fec4 	bl	800ced8 <malloc>
 8010150:	4602      	mov	r2, r0
 8010152:	61e0      	str	r0, [r4, #28]
 8010154:	b920      	cbnz	r0, 8010160 <_Balloc+0x20>
 8010156:	4b18      	ldr	r3, [pc, #96]	@ (80101b8 <_Balloc+0x78>)
 8010158:	4818      	ldr	r0, [pc, #96]	@ (80101bc <_Balloc+0x7c>)
 801015a:	216b      	movs	r1, #107	@ 0x6b
 801015c:	f000 ffca 	bl	80110f4 <__assert_func>
 8010160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010164:	6006      	str	r6, [r0, #0]
 8010166:	60c6      	str	r6, [r0, #12]
 8010168:	69e6      	ldr	r6, [r4, #28]
 801016a:	68f3      	ldr	r3, [r6, #12]
 801016c:	b183      	cbz	r3, 8010190 <_Balloc+0x50>
 801016e:	69e3      	ldr	r3, [r4, #28]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010176:	b9b8      	cbnz	r0, 80101a8 <_Balloc+0x68>
 8010178:	2101      	movs	r1, #1
 801017a:	fa01 f605 	lsl.w	r6, r1, r5
 801017e:	1d72      	adds	r2, r6, #5
 8010180:	0092      	lsls	r2, r2, #2
 8010182:	4620      	mov	r0, r4
 8010184:	f000 ffd4 	bl	8011130 <_calloc_r>
 8010188:	b160      	cbz	r0, 80101a4 <_Balloc+0x64>
 801018a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801018e:	e00e      	b.n	80101ae <_Balloc+0x6e>
 8010190:	2221      	movs	r2, #33	@ 0x21
 8010192:	2104      	movs	r1, #4
 8010194:	4620      	mov	r0, r4
 8010196:	f000 ffcb 	bl	8011130 <_calloc_r>
 801019a:	69e3      	ldr	r3, [r4, #28]
 801019c:	60f0      	str	r0, [r6, #12]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1e4      	bne.n	801016e <_Balloc+0x2e>
 80101a4:	2000      	movs	r0, #0
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	6802      	ldr	r2, [r0, #0]
 80101aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80101ae:	2300      	movs	r3, #0
 80101b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101b4:	e7f7      	b.n	80101a6 <_Balloc+0x66>
 80101b6:	bf00      	nop
 80101b8:	08011668 	.word	0x08011668
 80101bc:	08011748 	.word	0x08011748

080101c0 <_Bfree>:
 80101c0:	b570      	push	{r4, r5, r6, lr}
 80101c2:	69c6      	ldr	r6, [r0, #28]
 80101c4:	4605      	mov	r5, r0
 80101c6:	460c      	mov	r4, r1
 80101c8:	b976      	cbnz	r6, 80101e8 <_Bfree+0x28>
 80101ca:	2010      	movs	r0, #16
 80101cc:	f7fc fe84 	bl	800ced8 <malloc>
 80101d0:	4602      	mov	r2, r0
 80101d2:	61e8      	str	r0, [r5, #28]
 80101d4:	b920      	cbnz	r0, 80101e0 <_Bfree+0x20>
 80101d6:	4b09      	ldr	r3, [pc, #36]	@ (80101fc <_Bfree+0x3c>)
 80101d8:	4809      	ldr	r0, [pc, #36]	@ (8010200 <_Bfree+0x40>)
 80101da:	218f      	movs	r1, #143	@ 0x8f
 80101dc:	f000 ff8a 	bl	80110f4 <__assert_func>
 80101e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101e4:	6006      	str	r6, [r0, #0]
 80101e6:	60c6      	str	r6, [r0, #12]
 80101e8:	b13c      	cbz	r4, 80101fa <_Bfree+0x3a>
 80101ea:	69eb      	ldr	r3, [r5, #28]
 80101ec:	6862      	ldr	r2, [r4, #4]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101f4:	6021      	str	r1, [r4, #0]
 80101f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101fa:	bd70      	pop	{r4, r5, r6, pc}
 80101fc:	08011668 	.word	0x08011668
 8010200:	08011748 	.word	0x08011748

08010204 <__multadd>:
 8010204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010208:	690d      	ldr	r5, [r1, #16]
 801020a:	4607      	mov	r7, r0
 801020c:	460c      	mov	r4, r1
 801020e:	461e      	mov	r6, r3
 8010210:	f101 0c14 	add.w	ip, r1, #20
 8010214:	2000      	movs	r0, #0
 8010216:	f8dc 3000 	ldr.w	r3, [ip]
 801021a:	b299      	uxth	r1, r3
 801021c:	fb02 6101 	mla	r1, r2, r1, r6
 8010220:	0c1e      	lsrs	r6, r3, #16
 8010222:	0c0b      	lsrs	r3, r1, #16
 8010224:	fb02 3306 	mla	r3, r2, r6, r3
 8010228:	b289      	uxth	r1, r1
 801022a:	3001      	adds	r0, #1
 801022c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010230:	4285      	cmp	r5, r0
 8010232:	f84c 1b04 	str.w	r1, [ip], #4
 8010236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801023a:	dcec      	bgt.n	8010216 <__multadd+0x12>
 801023c:	b30e      	cbz	r6, 8010282 <__multadd+0x7e>
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	42ab      	cmp	r3, r5
 8010242:	dc19      	bgt.n	8010278 <__multadd+0x74>
 8010244:	6861      	ldr	r1, [r4, #4]
 8010246:	4638      	mov	r0, r7
 8010248:	3101      	adds	r1, #1
 801024a:	f7ff ff79 	bl	8010140 <_Balloc>
 801024e:	4680      	mov	r8, r0
 8010250:	b928      	cbnz	r0, 801025e <__multadd+0x5a>
 8010252:	4602      	mov	r2, r0
 8010254:	4b0c      	ldr	r3, [pc, #48]	@ (8010288 <__multadd+0x84>)
 8010256:	480d      	ldr	r0, [pc, #52]	@ (801028c <__multadd+0x88>)
 8010258:	21ba      	movs	r1, #186	@ 0xba
 801025a:	f000 ff4b 	bl	80110f4 <__assert_func>
 801025e:	6922      	ldr	r2, [r4, #16]
 8010260:	3202      	adds	r2, #2
 8010262:	f104 010c 	add.w	r1, r4, #12
 8010266:	0092      	lsls	r2, r2, #2
 8010268:	300c      	adds	r0, #12
 801026a:	f7fe fdcc 	bl	800ee06 <memcpy>
 801026e:	4621      	mov	r1, r4
 8010270:	4638      	mov	r0, r7
 8010272:	f7ff ffa5 	bl	80101c0 <_Bfree>
 8010276:	4644      	mov	r4, r8
 8010278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801027c:	3501      	adds	r5, #1
 801027e:	615e      	str	r6, [r3, #20]
 8010280:	6125      	str	r5, [r4, #16]
 8010282:	4620      	mov	r0, r4
 8010284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010288:	080116d7 	.word	0x080116d7
 801028c:	08011748 	.word	0x08011748

08010290 <__s2b>:
 8010290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010294:	460c      	mov	r4, r1
 8010296:	4615      	mov	r5, r2
 8010298:	461f      	mov	r7, r3
 801029a:	2209      	movs	r2, #9
 801029c:	3308      	adds	r3, #8
 801029e:	4606      	mov	r6, r0
 80102a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80102a4:	2100      	movs	r1, #0
 80102a6:	2201      	movs	r2, #1
 80102a8:	429a      	cmp	r2, r3
 80102aa:	db09      	blt.n	80102c0 <__s2b+0x30>
 80102ac:	4630      	mov	r0, r6
 80102ae:	f7ff ff47 	bl	8010140 <_Balloc>
 80102b2:	b940      	cbnz	r0, 80102c6 <__s2b+0x36>
 80102b4:	4602      	mov	r2, r0
 80102b6:	4b19      	ldr	r3, [pc, #100]	@ (801031c <__s2b+0x8c>)
 80102b8:	4819      	ldr	r0, [pc, #100]	@ (8010320 <__s2b+0x90>)
 80102ba:	21d3      	movs	r1, #211	@ 0xd3
 80102bc:	f000 ff1a 	bl	80110f4 <__assert_func>
 80102c0:	0052      	lsls	r2, r2, #1
 80102c2:	3101      	adds	r1, #1
 80102c4:	e7f0      	b.n	80102a8 <__s2b+0x18>
 80102c6:	9b08      	ldr	r3, [sp, #32]
 80102c8:	6143      	str	r3, [r0, #20]
 80102ca:	2d09      	cmp	r5, #9
 80102cc:	f04f 0301 	mov.w	r3, #1
 80102d0:	6103      	str	r3, [r0, #16]
 80102d2:	dd16      	ble.n	8010302 <__s2b+0x72>
 80102d4:	f104 0909 	add.w	r9, r4, #9
 80102d8:	46c8      	mov	r8, r9
 80102da:	442c      	add	r4, r5
 80102dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80102e0:	4601      	mov	r1, r0
 80102e2:	3b30      	subs	r3, #48	@ 0x30
 80102e4:	220a      	movs	r2, #10
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7ff ff8c 	bl	8010204 <__multadd>
 80102ec:	45a0      	cmp	r8, r4
 80102ee:	d1f5      	bne.n	80102dc <__s2b+0x4c>
 80102f0:	f1a5 0408 	sub.w	r4, r5, #8
 80102f4:	444c      	add	r4, r9
 80102f6:	1b2d      	subs	r5, r5, r4
 80102f8:	1963      	adds	r3, r4, r5
 80102fa:	42bb      	cmp	r3, r7
 80102fc:	db04      	blt.n	8010308 <__s2b+0x78>
 80102fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010302:	340a      	adds	r4, #10
 8010304:	2509      	movs	r5, #9
 8010306:	e7f6      	b.n	80102f6 <__s2b+0x66>
 8010308:	f814 3b01 	ldrb.w	r3, [r4], #1
 801030c:	4601      	mov	r1, r0
 801030e:	3b30      	subs	r3, #48	@ 0x30
 8010310:	220a      	movs	r2, #10
 8010312:	4630      	mov	r0, r6
 8010314:	f7ff ff76 	bl	8010204 <__multadd>
 8010318:	e7ee      	b.n	80102f8 <__s2b+0x68>
 801031a:	bf00      	nop
 801031c:	080116d7 	.word	0x080116d7
 8010320:	08011748 	.word	0x08011748

08010324 <__hi0bits>:
 8010324:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010328:	4603      	mov	r3, r0
 801032a:	bf36      	itet	cc
 801032c:	0403      	lslcc	r3, r0, #16
 801032e:	2000      	movcs	r0, #0
 8010330:	2010      	movcc	r0, #16
 8010332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010336:	bf3c      	itt	cc
 8010338:	021b      	lslcc	r3, r3, #8
 801033a:	3008      	addcc	r0, #8
 801033c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010340:	bf3c      	itt	cc
 8010342:	011b      	lslcc	r3, r3, #4
 8010344:	3004      	addcc	r0, #4
 8010346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801034a:	bf3c      	itt	cc
 801034c:	009b      	lslcc	r3, r3, #2
 801034e:	3002      	addcc	r0, #2
 8010350:	2b00      	cmp	r3, #0
 8010352:	db05      	blt.n	8010360 <__hi0bits+0x3c>
 8010354:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010358:	f100 0001 	add.w	r0, r0, #1
 801035c:	bf08      	it	eq
 801035e:	2020      	moveq	r0, #32
 8010360:	4770      	bx	lr

08010362 <__lo0bits>:
 8010362:	6803      	ldr	r3, [r0, #0]
 8010364:	4602      	mov	r2, r0
 8010366:	f013 0007 	ands.w	r0, r3, #7
 801036a:	d00b      	beq.n	8010384 <__lo0bits+0x22>
 801036c:	07d9      	lsls	r1, r3, #31
 801036e:	d421      	bmi.n	80103b4 <__lo0bits+0x52>
 8010370:	0798      	lsls	r0, r3, #30
 8010372:	bf49      	itett	mi
 8010374:	085b      	lsrmi	r3, r3, #1
 8010376:	089b      	lsrpl	r3, r3, #2
 8010378:	2001      	movmi	r0, #1
 801037a:	6013      	strmi	r3, [r2, #0]
 801037c:	bf5c      	itt	pl
 801037e:	6013      	strpl	r3, [r2, #0]
 8010380:	2002      	movpl	r0, #2
 8010382:	4770      	bx	lr
 8010384:	b299      	uxth	r1, r3
 8010386:	b909      	cbnz	r1, 801038c <__lo0bits+0x2a>
 8010388:	0c1b      	lsrs	r3, r3, #16
 801038a:	2010      	movs	r0, #16
 801038c:	b2d9      	uxtb	r1, r3
 801038e:	b909      	cbnz	r1, 8010394 <__lo0bits+0x32>
 8010390:	3008      	adds	r0, #8
 8010392:	0a1b      	lsrs	r3, r3, #8
 8010394:	0719      	lsls	r1, r3, #28
 8010396:	bf04      	itt	eq
 8010398:	091b      	lsreq	r3, r3, #4
 801039a:	3004      	addeq	r0, #4
 801039c:	0799      	lsls	r1, r3, #30
 801039e:	bf04      	itt	eq
 80103a0:	089b      	lsreq	r3, r3, #2
 80103a2:	3002      	addeq	r0, #2
 80103a4:	07d9      	lsls	r1, r3, #31
 80103a6:	d403      	bmi.n	80103b0 <__lo0bits+0x4e>
 80103a8:	085b      	lsrs	r3, r3, #1
 80103aa:	f100 0001 	add.w	r0, r0, #1
 80103ae:	d003      	beq.n	80103b8 <__lo0bits+0x56>
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	4770      	bx	lr
 80103b4:	2000      	movs	r0, #0
 80103b6:	4770      	bx	lr
 80103b8:	2020      	movs	r0, #32
 80103ba:	4770      	bx	lr

080103bc <__i2b>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	460c      	mov	r4, r1
 80103c0:	2101      	movs	r1, #1
 80103c2:	f7ff febd 	bl	8010140 <_Balloc>
 80103c6:	4602      	mov	r2, r0
 80103c8:	b928      	cbnz	r0, 80103d6 <__i2b+0x1a>
 80103ca:	4b05      	ldr	r3, [pc, #20]	@ (80103e0 <__i2b+0x24>)
 80103cc:	4805      	ldr	r0, [pc, #20]	@ (80103e4 <__i2b+0x28>)
 80103ce:	f240 1145 	movw	r1, #325	@ 0x145
 80103d2:	f000 fe8f 	bl	80110f4 <__assert_func>
 80103d6:	2301      	movs	r3, #1
 80103d8:	6144      	str	r4, [r0, #20]
 80103da:	6103      	str	r3, [r0, #16]
 80103dc:	bd10      	pop	{r4, pc}
 80103de:	bf00      	nop
 80103e0:	080116d7 	.word	0x080116d7
 80103e4:	08011748 	.word	0x08011748

080103e8 <__multiply>:
 80103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	4617      	mov	r7, r2
 80103ee:	690a      	ldr	r2, [r1, #16]
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	bfa8      	it	ge
 80103f6:	463b      	movge	r3, r7
 80103f8:	4689      	mov	r9, r1
 80103fa:	bfa4      	itt	ge
 80103fc:	460f      	movge	r7, r1
 80103fe:	4699      	movge	r9, r3
 8010400:	693d      	ldr	r5, [r7, #16]
 8010402:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	6879      	ldr	r1, [r7, #4]
 801040a:	eb05 060a 	add.w	r6, r5, sl
 801040e:	42b3      	cmp	r3, r6
 8010410:	b085      	sub	sp, #20
 8010412:	bfb8      	it	lt
 8010414:	3101      	addlt	r1, #1
 8010416:	f7ff fe93 	bl	8010140 <_Balloc>
 801041a:	b930      	cbnz	r0, 801042a <__multiply+0x42>
 801041c:	4602      	mov	r2, r0
 801041e:	4b41      	ldr	r3, [pc, #260]	@ (8010524 <__multiply+0x13c>)
 8010420:	4841      	ldr	r0, [pc, #260]	@ (8010528 <__multiply+0x140>)
 8010422:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010426:	f000 fe65 	bl	80110f4 <__assert_func>
 801042a:	f100 0414 	add.w	r4, r0, #20
 801042e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010432:	4623      	mov	r3, r4
 8010434:	2200      	movs	r2, #0
 8010436:	4573      	cmp	r3, lr
 8010438:	d320      	bcc.n	801047c <__multiply+0x94>
 801043a:	f107 0814 	add.w	r8, r7, #20
 801043e:	f109 0114 	add.w	r1, r9, #20
 8010442:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010446:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801044a:	9302      	str	r3, [sp, #8]
 801044c:	1beb      	subs	r3, r5, r7
 801044e:	3b15      	subs	r3, #21
 8010450:	f023 0303 	bic.w	r3, r3, #3
 8010454:	3304      	adds	r3, #4
 8010456:	3715      	adds	r7, #21
 8010458:	42bd      	cmp	r5, r7
 801045a:	bf38      	it	cc
 801045c:	2304      	movcc	r3, #4
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	9b02      	ldr	r3, [sp, #8]
 8010462:	9103      	str	r1, [sp, #12]
 8010464:	428b      	cmp	r3, r1
 8010466:	d80c      	bhi.n	8010482 <__multiply+0x9a>
 8010468:	2e00      	cmp	r6, #0
 801046a:	dd03      	ble.n	8010474 <__multiply+0x8c>
 801046c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010470:	2b00      	cmp	r3, #0
 8010472:	d055      	beq.n	8010520 <__multiply+0x138>
 8010474:	6106      	str	r6, [r0, #16]
 8010476:	b005      	add	sp, #20
 8010478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047c:	f843 2b04 	str.w	r2, [r3], #4
 8010480:	e7d9      	b.n	8010436 <__multiply+0x4e>
 8010482:	f8b1 a000 	ldrh.w	sl, [r1]
 8010486:	f1ba 0f00 	cmp.w	sl, #0
 801048a:	d01f      	beq.n	80104cc <__multiply+0xe4>
 801048c:	46c4      	mov	ip, r8
 801048e:	46a1      	mov	r9, r4
 8010490:	2700      	movs	r7, #0
 8010492:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010496:	f8d9 3000 	ldr.w	r3, [r9]
 801049a:	fa1f fb82 	uxth.w	fp, r2
 801049e:	b29b      	uxth	r3, r3
 80104a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80104a4:	443b      	add	r3, r7
 80104a6:	f8d9 7000 	ldr.w	r7, [r9]
 80104aa:	0c12      	lsrs	r2, r2, #16
 80104ac:	0c3f      	lsrs	r7, r7, #16
 80104ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80104b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104bc:	4565      	cmp	r5, ip
 80104be:	f849 3b04 	str.w	r3, [r9], #4
 80104c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80104c6:	d8e4      	bhi.n	8010492 <__multiply+0xaa>
 80104c8:	9b01      	ldr	r3, [sp, #4]
 80104ca:	50e7      	str	r7, [r4, r3]
 80104cc:	9b03      	ldr	r3, [sp, #12]
 80104ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104d2:	3104      	adds	r1, #4
 80104d4:	f1b9 0f00 	cmp.w	r9, #0
 80104d8:	d020      	beq.n	801051c <__multiply+0x134>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	4647      	mov	r7, r8
 80104de:	46a4      	mov	ip, r4
 80104e0:	f04f 0a00 	mov.w	sl, #0
 80104e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80104e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80104ec:	fb09 220b 	mla	r2, r9, fp, r2
 80104f0:	4452      	add	r2, sl
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104f8:	f84c 3b04 	str.w	r3, [ip], #4
 80104fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8010500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010504:	f8bc 3000 	ldrh.w	r3, [ip]
 8010508:	fb09 330a 	mla	r3, r9, sl, r3
 801050c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010510:	42bd      	cmp	r5, r7
 8010512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010516:	d8e5      	bhi.n	80104e4 <__multiply+0xfc>
 8010518:	9a01      	ldr	r2, [sp, #4]
 801051a:	50a3      	str	r3, [r4, r2]
 801051c:	3404      	adds	r4, #4
 801051e:	e79f      	b.n	8010460 <__multiply+0x78>
 8010520:	3e01      	subs	r6, #1
 8010522:	e7a1      	b.n	8010468 <__multiply+0x80>
 8010524:	080116d7 	.word	0x080116d7
 8010528:	08011748 	.word	0x08011748

0801052c <__pow5mult>:
 801052c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010530:	4615      	mov	r5, r2
 8010532:	f012 0203 	ands.w	r2, r2, #3
 8010536:	4607      	mov	r7, r0
 8010538:	460e      	mov	r6, r1
 801053a:	d007      	beq.n	801054c <__pow5mult+0x20>
 801053c:	4c25      	ldr	r4, [pc, #148]	@ (80105d4 <__pow5mult+0xa8>)
 801053e:	3a01      	subs	r2, #1
 8010540:	2300      	movs	r3, #0
 8010542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010546:	f7ff fe5d 	bl	8010204 <__multadd>
 801054a:	4606      	mov	r6, r0
 801054c:	10ad      	asrs	r5, r5, #2
 801054e:	d03d      	beq.n	80105cc <__pow5mult+0xa0>
 8010550:	69fc      	ldr	r4, [r7, #28]
 8010552:	b97c      	cbnz	r4, 8010574 <__pow5mult+0x48>
 8010554:	2010      	movs	r0, #16
 8010556:	f7fc fcbf 	bl	800ced8 <malloc>
 801055a:	4602      	mov	r2, r0
 801055c:	61f8      	str	r0, [r7, #28]
 801055e:	b928      	cbnz	r0, 801056c <__pow5mult+0x40>
 8010560:	4b1d      	ldr	r3, [pc, #116]	@ (80105d8 <__pow5mult+0xac>)
 8010562:	481e      	ldr	r0, [pc, #120]	@ (80105dc <__pow5mult+0xb0>)
 8010564:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010568:	f000 fdc4 	bl	80110f4 <__assert_func>
 801056c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010570:	6004      	str	r4, [r0, #0]
 8010572:	60c4      	str	r4, [r0, #12]
 8010574:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801057c:	b94c      	cbnz	r4, 8010592 <__pow5mult+0x66>
 801057e:	f240 2171 	movw	r1, #625	@ 0x271
 8010582:	4638      	mov	r0, r7
 8010584:	f7ff ff1a 	bl	80103bc <__i2b>
 8010588:	2300      	movs	r3, #0
 801058a:	f8c8 0008 	str.w	r0, [r8, #8]
 801058e:	4604      	mov	r4, r0
 8010590:	6003      	str	r3, [r0, #0]
 8010592:	f04f 0900 	mov.w	r9, #0
 8010596:	07eb      	lsls	r3, r5, #31
 8010598:	d50a      	bpl.n	80105b0 <__pow5mult+0x84>
 801059a:	4631      	mov	r1, r6
 801059c:	4622      	mov	r2, r4
 801059e:	4638      	mov	r0, r7
 80105a0:	f7ff ff22 	bl	80103e8 <__multiply>
 80105a4:	4631      	mov	r1, r6
 80105a6:	4680      	mov	r8, r0
 80105a8:	4638      	mov	r0, r7
 80105aa:	f7ff fe09 	bl	80101c0 <_Bfree>
 80105ae:	4646      	mov	r6, r8
 80105b0:	106d      	asrs	r5, r5, #1
 80105b2:	d00b      	beq.n	80105cc <__pow5mult+0xa0>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	b938      	cbnz	r0, 80105c8 <__pow5mult+0x9c>
 80105b8:	4622      	mov	r2, r4
 80105ba:	4621      	mov	r1, r4
 80105bc:	4638      	mov	r0, r7
 80105be:	f7ff ff13 	bl	80103e8 <__multiply>
 80105c2:	6020      	str	r0, [r4, #0]
 80105c4:	f8c0 9000 	str.w	r9, [r0]
 80105c8:	4604      	mov	r4, r0
 80105ca:	e7e4      	b.n	8010596 <__pow5mult+0x6a>
 80105cc:	4630      	mov	r0, r6
 80105ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105d2:	bf00      	nop
 80105d4:	08011944 	.word	0x08011944
 80105d8:	08011668 	.word	0x08011668
 80105dc:	08011748 	.word	0x08011748

080105e0 <__lshift>:
 80105e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e4:	460c      	mov	r4, r1
 80105e6:	6849      	ldr	r1, [r1, #4]
 80105e8:	6923      	ldr	r3, [r4, #16]
 80105ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ee:	68a3      	ldr	r3, [r4, #8]
 80105f0:	4607      	mov	r7, r0
 80105f2:	4691      	mov	r9, r2
 80105f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105f8:	f108 0601 	add.w	r6, r8, #1
 80105fc:	42b3      	cmp	r3, r6
 80105fe:	db0b      	blt.n	8010618 <__lshift+0x38>
 8010600:	4638      	mov	r0, r7
 8010602:	f7ff fd9d 	bl	8010140 <_Balloc>
 8010606:	4605      	mov	r5, r0
 8010608:	b948      	cbnz	r0, 801061e <__lshift+0x3e>
 801060a:	4602      	mov	r2, r0
 801060c:	4b28      	ldr	r3, [pc, #160]	@ (80106b0 <__lshift+0xd0>)
 801060e:	4829      	ldr	r0, [pc, #164]	@ (80106b4 <__lshift+0xd4>)
 8010610:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010614:	f000 fd6e 	bl	80110f4 <__assert_func>
 8010618:	3101      	adds	r1, #1
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	e7ee      	b.n	80105fc <__lshift+0x1c>
 801061e:	2300      	movs	r3, #0
 8010620:	f100 0114 	add.w	r1, r0, #20
 8010624:	f100 0210 	add.w	r2, r0, #16
 8010628:	4618      	mov	r0, r3
 801062a:	4553      	cmp	r3, sl
 801062c:	db33      	blt.n	8010696 <__lshift+0xb6>
 801062e:	6920      	ldr	r0, [r4, #16]
 8010630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010634:	f104 0314 	add.w	r3, r4, #20
 8010638:	f019 091f 	ands.w	r9, r9, #31
 801063c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010644:	d02b      	beq.n	801069e <__lshift+0xbe>
 8010646:	f1c9 0e20 	rsb	lr, r9, #32
 801064a:	468a      	mov	sl, r1
 801064c:	2200      	movs	r2, #0
 801064e:	6818      	ldr	r0, [r3, #0]
 8010650:	fa00 f009 	lsl.w	r0, r0, r9
 8010654:	4310      	orrs	r0, r2
 8010656:	f84a 0b04 	str.w	r0, [sl], #4
 801065a:	f853 2b04 	ldr.w	r2, [r3], #4
 801065e:	459c      	cmp	ip, r3
 8010660:	fa22 f20e 	lsr.w	r2, r2, lr
 8010664:	d8f3      	bhi.n	801064e <__lshift+0x6e>
 8010666:	ebac 0304 	sub.w	r3, ip, r4
 801066a:	3b15      	subs	r3, #21
 801066c:	f023 0303 	bic.w	r3, r3, #3
 8010670:	3304      	adds	r3, #4
 8010672:	f104 0015 	add.w	r0, r4, #21
 8010676:	4560      	cmp	r0, ip
 8010678:	bf88      	it	hi
 801067a:	2304      	movhi	r3, #4
 801067c:	50ca      	str	r2, [r1, r3]
 801067e:	b10a      	cbz	r2, 8010684 <__lshift+0xa4>
 8010680:	f108 0602 	add.w	r6, r8, #2
 8010684:	3e01      	subs	r6, #1
 8010686:	4638      	mov	r0, r7
 8010688:	612e      	str	r6, [r5, #16]
 801068a:	4621      	mov	r1, r4
 801068c:	f7ff fd98 	bl	80101c0 <_Bfree>
 8010690:	4628      	mov	r0, r5
 8010692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010696:	f842 0f04 	str.w	r0, [r2, #4]!
 801069a:	3301      	adds	r3, #1
 801069c:	e7c5      	b.n	801062a <__lshift+0x4a>
 801069e:	3904      	subs	r1, #4
 80106a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80106a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80106a8:	459c      	cmp	ip, r3
 80106aa:	d8f9      	bhi.n	80106a0 <__lshift+0xc0>
 80106ac:	e7ea      	b.n	8010684 <__lshift+0xa4>
 80106ae:	bf00      	nop
 80106b0:	080116d7 	.word	0x080116d7
 80106b4:	08011748 	.word	0x08011748

080106b8 <__mcmp>:
 80106b8:	690a      	ldr	r2, [r1, #16]
 80106ba:	4603      	mov	r3, r0
 80106bc:	6900      	ldr	r0, [r0, #16]
 80106be:	1a80      	subs	r0, r0, r2
 80106c0:	b530      	push	{r4, r5, lr}
 80106c2:	d10e      	bne.n	80106e2 <__mcmp+0x2a>
 80106c4:	3314      	adds	r3, #20
 80106c6:	3114      	adds	r1, #20
 80106c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106d8:	4295      	cmp	r5, r2
 80106da:	d003      	beq.n	80106e4 <__mcmp+0x2c>
 80106dc:	d205      	bcs.n	80106ea <__mcmp+0x32>
 80106de:	f04f 30ff 	mov.w	r0, #4294967295
 80106e2:	bd30      	pop	{r4, r5, pc}
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	d3f3      	bcc.n	80106d0 <__mcmp+0x18>
 80106e8:	e7fb      	b.n	80106e2 <__mcmp+0x2a>
 80106ea:	2001      	movs	r0, #1
 80106ec:	e7f9      	b.n	80106e2 <__mcmp+0x2a>
	...

080106f0 <__mdiff>:
 80106f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	4689      	mov	r9, r1
 80106f6:	4606      	mov	r6, r0
 80106f8:	4611      	mov	r1, r2
 80106fa:	4648      	mov	r0, r9
 80106fc:	4614      	mov	r4, r2
 80106fe:	f7ff ffdb 	bl	80106b8 <__mcmp>
 8010702:	1e05      	subs	r5, r0, #0
 8010704:	d112      	bne.n	801072c <__mdiff+0x3c>
 8010706:	4629      	mov	r1, r5
 8010708:	4630      	mov	r0, r6
 801070a:	f7ff fd19 	bl	8010140 <_Balloc>
 801070e:	4602      	mov	r2, r0
 8010710:	b928      	cbnz	r0, 801071e <__mdiff+0x2e>
 8010712:	4b3f      	ldr	r3, [pc, #252]	@ (8010810 <__mdiff+0x120>)
 8010714:	f240 2137 	movw	r1, #567	@ 0x237
 8010718:	483e      	ldr	r0, [pc, #248]	@ (8010814 <__mdiff+0x124>)
 801071a:	f000 fceb 	bl	80110f4 <__assert_func>
 801071e:	2301      	movs	r3, #1
 8010720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010724:	4610      	mov	r0, r2
 8010726:	b003      	add	sp, #12
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	bfbc      	itt	lt
 801072e:	464b      	movlt	r3, r9
 8010730:	46a1      	movlt	r9, r4
 8010732:	4630      	mov	r0, r6
 8010734:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010738:	bfba      	itte	lt
 801073a:	461c      	movlt	r4, r3
 801073c:	2501      	movlt	r5, #1
 801073e:	2500      	movge	r5, #0
 8010740:	f7ff fcfe 	bl	8010140 <_Balloc>
 8010744:	4602      	mov	r2, r0
 8010746:	b918      	cbnz	r0, 8010750 <__mdiff+0x60>
 8010748:	4b31      	ldr	r3, [pc, #196]	@ (8010810 <__mdiff+0x120>)
 801074a:	f240 2145 	movw	r1, #581	@ 0x245
 801074e:	e7e3      	b.n	8010718 <__mdiff+0x28>
 8010750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010754:	6926      	ldr	r6, [r4, #16]
 8010756:	60c5      	str	r5, [r0, #12]
 8010758:	f109 0310 	add.w	r3, r9, #16
 801075c:	f109 0514 	add.w	r5, r9, #20
 8010760:	f104 0e14 	add.w	lr, r4, #20
 8010764:	f100 0b14 	add.w	fp, r0, #20
 8010768:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801076c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	46d9      	mov	r9, fp
 8010774:	f04f 0c00 	mov.w	ip, #0
 8010778:	9b01      	ldr	r3, [sp, #4]
 801077a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801077e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	fa1f f38a 	uxth.w	r3, sl
 8010788:	4619      	mov	r1, r3
 801078a:	b283      	uxth	r3, r0
 801078c:	1acb      	subs	r3, r1, r3
 801078e:	0c00      	lsrs	r0, r0, #16
 8010790:	4463      	add	r3, ip
 8010792:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010796:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801079a:	b29b      	uxth	r3, r3
 801079c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107a0:	4576      	cmp	r6, lr
 80107a2:	f849 3b04 	str.w	r3, [r9], #4
 80107a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107aa:	d8e5      	bhi.n	8010778 <__mdiff+0x88>
 80107ac:	1b33      	subs	r3, r6, r4
 80107ae:	3b15      	subs	r3, #21
 80107b0:	f023 0303 	bic.w	r3, r3, #3
 80107b4:	3415      	adds	r4, #21
 80107b6:	3304      	adds	r3, #4
 80107b8:	42a6      	cmp	r6, r4
 80107ba:	bf38      	it	cc
 80107bc:	2304      	movcc	r3, #4
 80107be:	441d      	add	r5, r3
 80107c0:	445b      	add	r3, fp
 80107c2:	461e      	mov	r6, r3
 80107c4:	462c      	mov	r4, r5
 80107c6:	4544      	cmp	r4, r8
 80107c8:	d30e      	bcc.n	80107e8 <__mdiff+0xf8>
 80107ca:	f108 0103 	add.w	r1, r8, #3
 80107ce:	1b49      	subs	r1, r1, r5
 80107d0:	f021 0103 	bic.w	r1, r1, #3
 80107d4:	3d03      	subs	r5, #3
 80107d6:	45a8      	cmp	r8, r5
 80107d8:	bf38      	it	cc
 80107da:	2100      	movcc	r1, #0
 80107dc:	440b      	add	r3, r1
 80107de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107e2:	b191      	cbz	r1, 801080a <__mdiff+0x11a>
 80107e4:	6117      	str	r7, [r2, #16]
 80107e6:	e79d      	b.n	8010724 <__mdiff+0x34>
 80107e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80107ec:	46e6      	mov	lr, ip
 80107ee:	0c08      	lsrs	r0, r1, #16
 80107f0:	fa1c fc81 	uxtah	ip, ip, r1
 80107f4:	4471      	add	r1, lr
 80107f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107fa:	b289      	uxth	r1, r1
 80107fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010800:	f846 1b04 	str.w	r1, [r6], #4
 8010804:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010808:	e7dd      	b.n	80107c6 <__mdiff+0xd6>
 801080a:	3f01      	subs	r7, #1
 801080c:	e7e7      	b.n	80107de <__mdiff+0xee>
 801080e:	bf00      	nop
 8010810:	080116d7 	.word	0x080116d7
 8010814:	08011748 	.word	0x08011748

08010818 <__ulp>:
 8010818:	b082      	sub	sp, #8
 801081a:	ed8d 0b00 	vstr	d0, [sp]
 801081e:	9a01      	ldr	r2, [sp, #4]
 8010820:	4b0f      	ldr	r3, [pc, #60]	@ (8010860 <__ulp+0x48>)
 8010822:	4013      	ands	r3, r2
 8010824:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010828:	2b00      	cmp	r3, #0
 801082a:	dc08      	bgt.n	801083e <__ulp+0x26>
 801082c:	425b      	negs	r3, r3
 801082e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010832:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010836:	da04      	bge.n	8010842 <__ulp+0x2a>
 8010838:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801083c:	4113      	asrs	r3, r2
 801083e:	2200      	movs	r2, #0
 8010840:	e008      	b.n	8010854 <__ulp+0x3c>
 8010842:	f1a2 0314 	sub.w	r3, r2, #20
 8010846:	2b1e      	cmp	r3, #30
 8010848:	bfda      	itte	le
 801084a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801084e:	40da      	lsrle	r2, r3
 8010850:	2201      	movgt	r2, #1
 8010852:	2300      	movs	r3, #0
 8010854:	4619      	mov	r1, r3
 8010856:	4610      	mov	r0, r2
 8010858:	ec41 0b10 	vmov	d0, r0, r1
 801085c:	b002      	add	sp, #8
 801085e:	4770      	bx	lr
 8010860:	7ff00000 	.word	0x7ff00000

08010864 <__b2d>:
 8010864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010868:	6906      	ldr	r6, [r0, #16]
 801086a:	f100 0814 	add.w	r8, r0, #20
 801086e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010872:	1f37      	subs	r7, r6, #4
 8010874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010878:	4610      	mov	r0, r2
 801087a:	f7ff fd53 	bl	8010324 <__hi0bits>
 801087e:	f1c0 0320 	rsb	r3, r0, #32
 8010882:	280a      	cmp	r0, #10
 8010884:	600b      	str	r3, [r1, #0]
 8010886:	491b      	ldr	r1, [pc, #108]	@ (80108f4 <__b2d+0x90>)
 8010888:	dc15      	bgt.n	80108b6 <__b2d+0x52>
 801088a:	f1c0 0c0b 	rsb	ip, r0, #11
 801088e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010892:	45b8      	cmp	r8, r7
 8010894:	ea43 0501 	orr.w	r5, r3, r1
 8010898:	bf34      	ite	cc
 801089a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801089e:	2300      	movcs	r3, #0
 80108a0:	3015      	adds	r0, #21
 80108a2:	fa02 f000 	lsl.w	r0, r2, r0
 80108a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80108aa:	4303      	orrs	r3, r0
 80108ac:	461c      	mov	r4, r3
 80108ae:	ec45 4b10 	vmov	d0, r4, r5
 80108b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b6:	45b8      	cmp	r8, r7
 80108b8:	bf3a      	itte	cc
 80108ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80108be:	f1a6 0708 	subcc.w	r7, r6, #8
 80108c2:	2300      	movcs	r3, #0
 80108c4:	380b      	subs	r0, #11
 80108c6:	d012      	beq.n	80108ee <__b2d+0x8a>
 80108c8:	f1c0 0120 	rsb	r1, r0, #32
 80108cc:	fa23 f401 	lsr.w	r4, r3, r1
 80108d0:	4082      	lsls	r2, r0
 80108d2:	4322      	orrs	r2, r4
 80108d4:	4547      	cmp	r7, r8
 80108d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80108da:	bf8c      	ite	hi
 80108dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80108e0:	2200      	movls	r2, #0
 80108e2:	4083      	lsls	r3, r0
 80108e4:	40ca      	lsrs	r2, r1
 80108e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80108ea:	4313      	orrs	r3, r2
 80108ec:	e7de      	b.n	80108ac <__b2d+0x48>
 80108ee:	ea42 0501 	orr.w	r5, r2, r1
 80108f2:	e7db      	b.n	80108ac <__b2d+0x48>
 80108f4:	3ff00000 	.word	0x3ff00000

080108f8 <__d2b>:
 80108f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	460f      	mov	r7, r1
 80108fe:	2101      	movs	r1, #1
 8010900:	ec59 8b10 	vmov	r8, r9, d0
 8010904:	4616      	mov	r6, r2
 8010906:	f7ff fc1b 	bl	8010140 <_Balloc>
 801090a:	4604      	mov	r4, r0
 801090c:	b930      	cbnz	r0, 801091c <__d2b+0x24>
 801090e:	4602      	mov	r2, r0
 8010910:	4b23      	ldr	r3, [pc, #140]	@ (80109a0 <__d2b+0xa8>)
 8010912:	4824      	ldr	r0, [pc, #144]	@ (80109a4 <__d2b+0xac>)
 8010914:	f240 310f 	movw	r1, #783	@ 0x30f
 8010918:	f000 fbec 	bl	80110f4 <__assert_func>
 801091c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010924:	b10d      	cbz	r5, 801092a <__d2b+0x32>
 8010926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801092a:	9301      	str	r3, [sp, #4]
 801092c:	f1b8 0300 	subs.w	r3, r8, #0
 8010930:	d023      	beq.n	801097a <__d2b+0x82>
 8010932:	4668      	mov	r0, sp
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	f7ff fd14 	bl	8010362 <__lo0bits>
 801093a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801093e:	b1d0      	cbz	r0, 8010976 <__d2b+0x7e>
 8010940:	f1c0 0320 	rsb	r3, r0, #32
 8010944:	fa02 f303 	lsl.w	r3, r2, r3
 8010948:	430b      	orrs	r3, r1
 801094a:	40c2      	lsrs	r2, r0
 801094c:	6163      	str	r3, [r4, #20]
 801094e:	9201      	str	r2, [sp, #4]
 8010950:	9b01      	ldr	r3, [sp, #4]
 8010952:	61a3      	str	r3, [r4, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	bf0c      	ite	eq
 8010958:	2201      	moveq	r2, #1
 801095a:	2202      	movne	r2, #2
 801095c:	6122      	str	r2, [r4, #16]
 801095e:	b1a5      	cbz	r5, 801098a <__d2b+0x92>
 8010960:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010964:	4405      	add	r5, r0
 8010966:	603d      	str	r5, [r7, #0]
 8010968:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801096c:	6030      	str	r0, [r6, #0]
 801096e:	4620      	mov	r0, r4
 8010970:	b003      	add	sp, #12
 8010972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010976:	6161      	str	r1, [r4, #20]
 8010978:	e7ea      	b.n	8010950 <__d2b+0x58>
 801097a:	a801      	add	r0, sp, #4
 801097c:	f7ff fcf1 	bl	8010362 <__lo0bits>
 8010980:	9b01      	ldr	r3, [sp, #4]
 8010982:	6163      	str	r3, [r4, #20]
 8010984:	3020      	adds	r0, #32
 8010986:	2201      	movs	r2, #1
 8010988:	e7e8      	b.n	801095c <__d2b+0x64>
 801098a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801098e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010992:	6038      	str	r0, [r7, #0]
 8010994:	6918      	ldr	r0, [r3, #16]
 8010996:	f7ff fcc5 	bl	8010324 <__hi0bits>
 801099a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801099e:	e7e5      	b.n	801096c <__d2b+0x74>
 80109a0:	080116d7 	.word	0x080116d7
 80109a4:	08011748 	.word	0x08011748

080109a8 <__ratio>:
 80109a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	4688      	mov	r8, r1
 80109ae:	4669      	mov	r1, sp
 80109b0:	4681      	mov	r9, r0
 80109b2:	f7ff ff57 	bl	8010864 <__b2d>
 80109b6:	a901      	add	r1, sp, #4
 80109b8:	4640      	mov	r0, r8
 80109ba:	ec55 4b10 	vmov	r4, r5, d0
 80109be:	f7ff ff51 	bl	8010864 <__b2d>
 80109c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80109c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80109ca:	1ad2      	subs	r2, r2, r3
 80109cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80109d0:	1a5b      	subs	r3, r3, r1
 80109d2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80109d6:	ec57 6b10 	vmov	r6, r7, d0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	bfd6      	itet	le
 80109de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80109e2:	462a      	movgt	r2, r5
 80109e4:	463a      	movle	r2, r7
 80109e6:	46ab      	mov	fp, r5
 80109e8:	46a2      	mov	sl, r4
 80109ea:	bfce      	itee	gt
 80109ec:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80109f0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80109f4:	ee00 3a90 	vmovle	s1, r3
 80109f8:	ec4b ab17 	vmov	d7, sl, fp
 80109fc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010a00:	b003      	add	sp, #12
 8010a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a06 <__copybits>:
 8010a06:	3901      	subs	r1, #1
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	1149      	asrs	r1, r1, #5
 8010a0c:	6914      	ldr	r4, [r2, #16]
 8010a0e:	3101      	adds	r1, #1
 8010a10:	f102 0314 	add.w	r3, r2, #20
 8010a14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010a18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a1c:	1f05      	subs	r5, r0, #4
 8010a1e:	42a3      	cmp	r3, r4
 8010a20:	d30c      	bcc.n	8010a3c <__copybits+0x36>
 8010a22:	1aa3      	subs	r3, r4, r2
 8010a24:	3b11      	subs	r3, #17
 8010a26:	f023 0303 	bic.w	r3, r3, #3
 8010a2a:	3211      	adds	r2, #17
 8010a2c:	42a2      	cmp	r2, r4
 8010a2e:	bf88      	it	hi
 8010a30:	2300      	movhi	r3, #0
 8010a32:	4418      	add	r0, r3
 8010a34:	2300      	movs	r3, #0
 8010a36:	4288      	cmp	r0, r1
 8010a38:	d305      	bcc.n	8010a46 <__copybits+0x40>
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a40:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a44:	e7eb      	b.n	8010a1e <__copybits+0x18>
 8010a46:	f840 3b04 	str.w	r3, [r0], #4
 8010a4a:	e7f4      	b.n	8010a36 <__copybits+0x30>

08010a4c <__any_on>:
 8010a4c:	f100 0214 	add.w	r2, r0, #20
 8010a50:	6900      	ldr	r0, [r0, #16]
 8010a52:	114b      	asrs	r3, r1, #5
 8010a54:	4298      	cmp	r0, r3
 8010a56:	b510      	push	{r4, lr}
 8010a58:	db11      	blt.n	8010a7e <__any_on+0x32>
 8010a5a:	dd0a      	ble.n	8010a72 <__any_on+0x26>
 8010a5c:	f011 011f 	ands.w	r1, r1, #31
 8010a60:	d007      	beq.n	8010a72 <__any_on+0x26>
 8010a62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a66:	fa24 f001 	lsr.w	r0, r4, r1
 8010a6a:	fa00 f101 	lsl.w	r1, r0, r1
 8010a6e:	428c      	cmp	r4, r1
 8010a70:	d10b      	bne.n	8010a8a <__any_on+0x3e>
 8010a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d803      	bhi.n	8010a82 <__any_on+0x36>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	bd10      	pop	{r4, pc}
 8010a7e:	4603      	mov	r3, r0
 8010a80:	e7f7      	b.n	8010a72 <__any_on+0x26>
 8010a82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a86:	2900      	cmp	r1, #0
 8010a88:	d0f5      	beq.n	8010a76 <__any_on+0x2a>
 8010a8a:	2001      	movs	r0, #1
 8010a8c:	e7f6      	b.n	8010a7c <__any_on+0x30>

08010a8e <_malloc_usable_size_r>:
 8010a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a92:	1f18      	subs	r0, r3, #4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	bfbc      	itt	lt
 8010a98:	580b      	ldrlt	r3, [r1, r0]
 8010a9a:	18c0      	addlt	r0, r0, r3
 8010a9c:	4770      	bx	lr
	...

08010aa0 <_strtol_l.isra.0>:
 8010aa0:	2b24      	cmp	r3, #36	@ 0x24
 8010aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa6:	4686      	mov	lr, r0
 8010aa8:	4690      	mov	r8, r2
 8010aaa:	d801      	bhi.n	8010ab0 <_strtol_l.isra.0+0x10>
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d106      	bne.n	8010abe <_strtol_l.isra.0+0x1e>
 8010ab0:	f7fe f97c 	bl	800edac <__errno>
 8010ab4:	2316      	movs	r3, #22
 8010ab6:	6003      	str	r3, [r0, #0]
 8010ab8:	2000      	movs	r0, #0
 8010aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010abe:	4834      	ldr	r0, [pc, #208]	@ (8010b90 <_strtol_l.isra.0+0xf0>)
 8010ac0:	460d      	mov	r5, r1
 8010ac2:	462a      	mov	r2, r5
 8010ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ac8:	5d06      	ldrb	r6, [r0, r4]
 8010aca:	f016 0608 	ands.w	r6, r6, #8
 8010ace:	d1f8      	bne.n	8010ac2 <_strtol_l.isra.0+0x22>
 8010ad0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ad2:	d110      	bne.n	8010af6 <_strtol_l.isra.0+0x56>
 8010ad4:	782c      	ldrb	r4, [r5, #0]
 8010ad6:	2601      	movs	r6, #1
 8010ad8:	1c95      	adds	r5, r2, #2
 8010ada:	f033 0210 	bics.w	r2, r3, #16
 8010ade:	d115      	bne.n	8010b0c <_strtol_l.isra.0+0x6c>
 8010ae0:	2c30      	cmp	r4, #48	@ 0x30
 8010ae2:	d10d      	bne.n	8010b00 <_strtol_l.isra.0+0x60>
 8010ae4:	782a      	ldrb	r2, [r5, #0]
 8010ae6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010aea:	2a58      	cmp	r2, #88	@ 0x58
 8010aec:	d108      	bne.n	8010b00 <_strtol_l.isra.0+0x60>
 8010aee:	786c      	ldrb	r4, [r5, #1]
 8010af0:	3502      	adds	r5, #2
 8010af2:	2310      	movs	r3, #16
 8010af4:	e00a      	b.n	8010b0c <_strtol_l.isra.0+0x6c>
 8010af6:	2c2b      	cmp	r4, #43	@ 0x2b
 8010af8:	bf04      	itt	eq
 8010afa:	782c      	ldrbeq	r4, [r5, #0]
 8010afc:	1c95      	addeq	r5, r2, #2
 8010afe:	e7ec      	b.n	8010ada <_strtol_l.isra.0+0x3a>
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1f6      	bne.n	8010af2 <_strtol_l.isra.0+0x52>
 8010b04:	2c30      	cmp	r4, #48	@ 0x30
 8010b06:	bf14      	ite	ne
 8010b08:	230a      	movne	r3, #10
 8010b0a:	2308      	moveq	r3, #8
 8010b0c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b10:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b14:	2200      	movs	r2, #0
 8010b16:	fbbc f9f3 	udiv	r9, ip, r3
 8010b1a:	4610      	mov	r0, r2
 8010b1c:	fb03 ca19 	mls	sl, r3, r9, ip
 8010b20:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010b24:	2f09      	cmp	r7, #9
 8010b26:	d80f      	bhi.n	8010b48 <_strtol_l.isra.0+0xa8>
 8010b28:	463c      	mov	r4, r7
 8010b2a:	42a3      	cmp	r3, r4
 8010b2c:	dd1b      	ble.n	8010b66 <_strtol_l.isra.0+0xc6>
 8010b2e:	1c57      	adds	r7, r2, #1
 8010b30:	d007      	beq.n	8010b42 <_strtol_l.isra.0+0xa2>
 8010b32:	4581      	cmp	r9, r0
 8010b34:	d314      	bcc.n	8010b60 <_strtol_l.isra.0+0xc0>
 8010b36:	d101      	bne.n	8010b3c <_strtol_l.isra.0+0x9c>
 8010b38:	45a2      	cmp	sl, r4
 8010b3a:	db11      	blt.n	8010b60 <_strtol_l.isra.0+0xc0>
 8010b3c:	fb00 4003 	mla	r0, r0, r3, r4
 8010b40:	2201      	movs	r2, #1
 8010b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b46:	e7eb      	b.n	8010b20 <_strtol_l.isra.0+0x80>
 8010b48:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010b4c:	2f19      	cmp	r7, #25
 8010b4e:	d801      	bhi.n	8010b54 <_strtol_l.isra.0+0xb4>
 8010b50:	3c37      	subs	r4, #55	@ 0x37
 8010b52:	e7ea      	b.n	8010b2a <_strtol_l.isra.0+0x8a>
 8010b54:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010b58:	2f19      	cmp	r7, #25
 8010b5a:	d804      	bhi.n	8010b66 <_strtol_l.isra.0+0xc6>
 8010b5c:	3c57      	subs	r4, #87	@ 0x57
 8010b5e:	e7e4      	b.n	8010b2a <_strtol_l.isra.0+0x8a>
 8010b60:	f04f 32ff 	mov.w	r2, #4294967295
 8010b64:	e7ed      	b.n	8010b42 <_strtol_l.isra.0+0xa2>
 8010b66:	1c53      	adds	r3, r2, #1
 8010b68:	d108      	bne.n	8010b7c <_strtol_l.isra.0+0xdc>
 8010b6a:	2322      	movs	r3, #34	@ 0x22
 8010b6c:	f8ce 3000 	str.w	r3, [lr]
 8010b70:	4660      	mov	r0, ip
 8010b72:	f1b8 0f00 	cmp.w	r8, #0
 8010b76:	d0a0      	beq.n	8010aba <_strtol_l.isra.0+0x1a>
 8010b78:	1e69      	subs	r1, r5, #1
 8010b7a:	e006      	b.n	8010b8a <_strtol_l.isra.0+0xea>
 8010b7c:	b106      	cbz	r6, 8010b80 <_strtol_l.isra.0+0xe0>
 8010b7e:	4240      	negs	r0, r0
 8010b80:	f1b8 0f00 	cmp.w	r8, #0
 8010b84:	d099      	beq.n	8010aba <_strtol_l.isra.0+0x1a>
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	d1f6      	bne.n	8010b78 <_strtol_l.isra.0+0xd8>
 8010b8a:	f8c8 1000 	str.w	r1, [r8]
 8010b8e:	e794      	b.n	8010aba <_strtol_l.isra.0+0x1a>
 8010b90:	08011841 	.word	0x08011841

08010b94 <_strtol_r>:
 8010b94:	f7ff bf84 	b.w	8010aa0 <_strtol_l.isra.0>

08010b98 <__ascii_wctomb>:
 8010b98:	4603      	mov	r3, r0
 8010b9a:	4608      	mov	r0, r1
 8010b9c:	b141      	cbz	r1, 8010bb0 <__ascii_wctomb+0x18>
 8010b9e:	2aff      	cmp	r2, #255	@ 0xff
 8010ba0:	d904      	bls.n	8010bac <__ascii_wctomb+0x14>
 8010ba2:	228a      	movs	r2, #138	@ 0x8a
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8010baa:	4770      	bx	lr
 8010bac:	700a      	strb	r2, [r1, #0]
 8010bae:	2001      	movs	r0, #1
 8010bb0:	4770      	bx	lr

08010bb2 <__ssputs_r>:
 8010bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bb6:	688e      	ldr	r6, [r1, #8]
 8010bb8:	461f      	mov	r7, r3
 8010bba:	42be      	cmp	r6, r7
 8010bbc:	680b      	ldr	r3, [r1, #0]
 8010bbe:	4682      	mov	sl, r0
 8010bc0:	460c      	mov	r4, r1
 8010bc2:	4690      	mov	r8, r2
 8010bc4:	d82d      	bhi.n	8010c22 <__ssputs_r+0x70>
 8010bc6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bca:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010bce:	d026      	beq.n	8010c1e <__ssputs_r+0x6c>
 8010bd0:	6965      	ldr	r5, [r4, #20]
 8010bd2:	6909      	ldr	r1, [r1, #16]
 8010bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bd8:	eba3 0901 	sub.w	r9, r3, r1
 8010bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010be0:	1c7b      	adds	r3, r7, #1
 8010be2:	444b      	add	r3, r9
 8010be4:	106d      	asrs	r5, r5, #1
 8010be6:	429d      	cmp	r5, r3
 8010be8:	bf38      	it	cc
 8010bea:	461d      	movcc	r5, r3
 8010bec:	0553      	lsls	r3, r2, #21
 8010bee:	d527      	bpl.n	8010c40 <__ssputs_r+0x8e>
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	f7fc f99b 	bl	800cf2c <_malloc_r>
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	b360      	cbz	r0, 8010c54 <__ssputs_r+0xa2>
 8010bfa:	6921      	ldr	r1, [r4, #16]
 8010bfc:	464a      	mov	r2, r9
 8010bfe:	f7fe f902 	bl	800ee06 <memcpy>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c0c:	81a3      	strh	r3, [r4, #12]
 8010c0e:	6126      	str	r6, [r4, #16]
 8010c10:	6165      	str	r5, [r4, #20]
 8010c12:	444e      	add	r6, r9
 8010c14:	eba5 0509 	sub.w	r5, r5, r9
 8010c18:	6026      	str	r6, [r4, #0]
 8010c1a:	60a5      	str	r5, [r4, #8]
 8010c1c:	463e      	mov	r6, r7
 8010c1e:	42be      	cmp	r6, r7
 8010c20:	d900      	bls.n	8010c24 <__ssputs_r+0x72>
 8010c22:	463e      	mov	r6, r7
 8010c24:	6820      	ldr	r0, [r4, #0]
 8010c26:	4632      	mov	r2, r6
 8010c28:	4641      	mov	r1, r8
 8010c2a:	f000 fa27 	bl	801107c <memmove>
 8010c2e:	68a3      	ldr	r3, [r4, #8]
 8010c30:	1b9b      	subs	r3, r3, r6
 8010c32:	60a3      	str	r3, [r4, #8]
 8010c34:	6823      	ldr	r3, [r4, #0]
 8010c36:	4433      	add	r3, r6
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c40:	462a      	mov	r2, r5
 8010c42:	f7fc f9ff 	bl	800d044 <_realloc_r>
 8010c46:	4606      	mov	r6, r0
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d1e0      	bne.n	8010c0e <__ssputs_r+0x5c>
 8010c4c:	6921      	ldr	r1, [r4, #16]
 8010c4e:	4650      	mov	r0, sl
 8010c50:	f7fe fee0 	bl	800fa14 <_free_r>
 8010c54:	230c      	movs	r3, #12
 8010c56:	f8ca 3000 	str.w	r3, [sl]
 8010c5a:	89a3      	ldrh	r3, [r4, #12]
 8010c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c60:	81a3      	strh	r3, [r4, #12]
 8010c62:	f04f 30ff 	mov.w	r0, #4294967295
 8010c66:	e7e9      	b.n	8010c3c <__ssputs_r+0x8a>

08010c68 <_svfiprintf_r>:
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	4698      	mov	r8, r3
 8010c6e:	898b      	ldrh	r3, [r1, #12]
 8010c70:	061b      	lsls	r3, r3, #24
 8010c72:	b09d      	sub	sp, #116	@ 0x74
 8010c74:	4607      	mov	r7, r0
 8010c76:	460d      	mov	r5, r1
 8010c78:	4614      	mov	r4, r2
 8010c7a:	d510      	bpl.n	8010c9e <_svfiprintf_r+0x36>
 8010c7c:	690b      	ldr	r3, [r1, #16]
 8010c7e:	b973      	cbnz	r3, 8010c9e <_svfiprintf_r+0x36>
 8010c80:	2140      	movs	r1, #64	@ 0x40
 8010c82:	f7fc f953 	bl	800cf2c <_malloc_r>
 8010c86:	6028      	str	r0, [r5, #0]
 8010c88:	6128      	str	r0, [r5, #16]
 8010c8a:	b930      	cbnz	r0, 8010c9a <_svfiprintf_r+0x32>
 8010c8c:	230c      	movs	r3, #12
 8010c8e:	603b      	str	r3, [r7, #0]
 8010c90:	f04f 30ff 	mov.w	r0, #4294967295
 8010c94:	b01d      	add	sp, #116	@ 0x74
 8010c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c9a:	2340      	movs	r3, #64	@ 0x40
 8010c9c:	616b      	str	r3, [r5, #20]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ca2:	2320      	movs	r3, #32
 8010ca4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cac:	2330      	movs	r3, #48	@ 0x30
 8010cae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e4c <_svfiprintf_r+0x1e4>
 8010cb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010cb6:	f04f 0901 	mov.w	r9, #1
 8010cba:	4623      	mov	r3, r4
 8010cbc:	469a      	mov	sl, r3
 8010cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cc2:	b10a      	cbz	r2, 8010cc8 <_svfiprintf_r+0x60>
 8010cc4:	2a25      	cmp	r2, #37	@ 0x25
 8010cc6:	d1f9      	bne.n	8010cbc <_svfiprintf_r+0x54>
 8010cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8010ccc:	d00b      	beq.n	8010ce6 <_svfiprintf_r+0x7e>
 8010cce:	465b      	mov	r3, fp
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	4629      	mov	r1, r5
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f7ff ff6c 	bl	8010bb2 <__ssputs_r>
 8010cda:	3001      	adds	r0, #1
 8010cdc:	f000 80a7 	beq.w	8010e2e <_svfiprintf_r+0x1c6>
 8010ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ce2:	445a      	add	r2, fp
 8010ce4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 809f 	beq.w	8010e2e <_svfiprintf_r+0x1c6>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8010cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cfa:	f10a 0a01 	add.w	sl, sl, #1
 8010cfe:	9304      	str	r3, [sp, #16]
 8010d00:	9307      	str	r3, [sp, #28]
 8010d02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d08:	4654      	mov	r4, sl
 8010d0a:	2205      	movs	r2, #5
 8010d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d10:	484e      	ldr	r0, [pc, #312]	@ (8010e4c <_svfiprintf_r+0x1e4>)
 8010d12:	f7ef fae5 	bl	80002e0 <memchr>
 8010d16:	9a04      	ldr	r2, [sp, #16]
 8010d18:	b9d8      	cbnz	r0, 8010d52 <_svfiprintf_r+0xea>
 8010d1a:	06d0      	lsls	r0, r2, #27
 8010d1c:	bf44      	itt	mi
 8010d1e:	2320      	movmi	r3, #32
 8010d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d24:	0711      	lsls	r1, r2, #28
 8010d26:	bf44      	itt	mi
 8010d28:	232b      	movmi	r3, #43	@ 0x2b
 8010d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8010d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d34:	d015      	beq.n	8010d62 <_svfiprintf_r+0xfa>
 8010d36:	9a07      	ldr	r2, [sp, #28]
 8010d38:	4654      	mov	r4, sl
 8010d3a:	2000      	movs	r0, #0
 8010d3c:	f04f 0c0a 	mov.w	ip, #10
 8010d40:	4621      	mov	r1, r4
 8010d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d46:	3b30      	subs	r3, #48	@ 0x30
 8010d48:	2b09      	cmp	r3, #9
 8010d4a:	d94b      	bls.n	8010de4 <_svfiprintf_r+0x17c>
 8010d4c:	b1b0      	cbz	r0, 8010d7c <_svfiprintf_r+0x114>
 8010d4e:	9207      	str	r2, [sp, #28]
 8010d50:	e014      	b.n	8010d7c <_svfiprintf_r+0x114>
 8010d52:	eba0 0308 	sub.w	r3, r0, r8
 8010d56:	fa09 f303 	lsl.w	r3, r9, r3
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	9304      	str	r3, [sp, #16]
 8010d5e:	46a2      	mov	sl, r4
 8010d60:	e7d2      	b.n	8010d08 <_svfiprintf_r+0xa0>
 8010d62:	9b03      	ldr	r3, [sp, #12]
 8010d64:	1d19      	adds	r1, r3, #4
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	9103      	str	r1, [sp, #12]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	bfbb      	ittet	lt
 8010d6e:	425b      	neglt	r3, r3
 8010d70:	f042 0202 	orrlt.w	r2, r2, #2
 8010d74:	9307      	strge	r3, [sp, #28]
 8010d76:	9307      	strlt	r3, [sp, #28]
 8010d78:	bfb8      	it	lt
 8010d7a:	9204      	strlt	r2, [sp, #16]
 8010d7c:	7823      	ldrb	r3, [r4, #0]
 8010d7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d80:	d10a      	bne.n	8010d98 <_svfiprintf_r+0x130>
 8010d82:	7863      	ldrb	r3, [r4, #1]
 8010d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d86:	d132      	bne.n	8010dee <_svfiprintf_r+0x186>
 8010d88:	9b03      	ldr	r3, [sp, #12]
 8010d8a:	1d1a      	adds	r2, r3, #4
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	9203      	str	r2, [sp, #12]
 8010d90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d94:	3402      	adds	r4, #2
 8010d96:	9305      	str	r3, [sp, #20]
 8010d98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010e5c <_svfiprintf_r+0x1f4>
 8010d9c:	7821      	ldrb	r1, [r4, #0]
 8010d9e:	2203      	movs	r2, #3
 8010da0:	4650      	mov	r0, sl
 8010da2:	f7ef fa9d 	bl	80002e0 <memchr>
 8010da6:	b138      	cbz	r0, 8010db8 <_svfiprintf_r+0x150>
 8010da8:	9b04      	ldr	r3, [sp, #16]
 8010daa:	eba0 000a 	sub.w	r0, r0, sl
 8010dae:	2240      	movs	r2, #64	@ 0x40
 8010db0:	4082      	lsls	r2, r0
 8010db2:	4313      	orrs	r3, r2
 8010db4:	3401      	adds	r4, #1
 8010db6:	9304      	str	r3, [sp, #16]
 8010db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dbc:	4824      	ldr	r0, [pc, #144]	@ (8010e50 <_svfiprintf_r+0x1e8>)
 8010dbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010dc2:	2206      	movs	r2, #6
 8010dc4:	f7ef fa8c 	bl	80002e0 <memchr>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d036      	beq.n	8010e3a <_svfiprintf_r+0x1d2>
 8010dcc:	4b21      	ldr	r3, [pc, #132]	@ (8010e54 <_svfiprintf_r+0x1ec>)
 8010dce:	bb1b      	cbnz	r3, 8010e18 <_svfiprintf_r+0x1b0>
 8010dd0:	9b03      	ldr	r3, [sp, #12]
 8010dd2:	3307      	adds	r3, #7
 8010dd4:	f023 0307 	bic.w	r3, r3, #7
 8010dd8:	3308      	adds	r3, #8
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dde:	4433      	add	r3, r6
 8010de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010de2:	e76a      	b.n	8010cba <_svfiprintf_r+0x52>
 8010de4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010de8:	460c      	mov	r4, r1
 8010dea:	2001      	movs	r0, #1
 8010dec:	e7a8      	b.n	8010d40 <_svfiprintf_r+0xd8>
 8010dee:	2300      	movs	r3, #0
 8010df0:	3401      	adds	r4, #1
 8010df2:	9305      	str	r3, [sp, #20]
 8010df4:	4619      	mov	r1, r3
 8010df6:	f04f 0c0a 	mov.w	ip, #10
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e00:	3a30      	subs	r2, #48	@ 0x30
 8010e02:	2a09      	cmp	r2, #9
 8010e04:	d903      	bls.n	8010e0e <_svfiprintf_r+0x1a6>
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d0c6      	beq.n	8010d98 <_svfiprintf_r+0x130>
 8010e0a:	9105      	str	r1, [sp, #20]
 8010e0c:	e7c4      	b.n	8010d98 <_svfiprintf_r+0x130>
 8010e0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e12:	4604      	mov	r4, r0
 8010e14:	2301      	movs	r3, #1
 8010e16:	e7f0      	b.n	8010dfa <_svfiprintf_r+0x192>
 8010e18:	ab03      	add	r3, sp, #12
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	462a      	mov	r2, r5
 8010e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e58 <_svfiprintf_r+0x1f0>)
 8010e20:	a904      	add	r1, sp, #16
 8010e22:	4638      	mov	r0, r7
 8010e24:	f7fc ff88 	bl	800dd38 <_printf_float>
 8010e28:	1c42      	adds	r2, r0, #1
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	d1d6      	bne.n	8010ddc <_svfiprintf_r+0x174>
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	065b      	lsls	r3, r3, #25
 8010e32:	f53f af2d 	bmi.w	8010c90 <_svfiprintf_r+0x28>
 8010e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e38:	e72c      	b.n	8010c94 <_svfiprintf_r+0x2c>
 8010e3a:	ab03      	add	r3, sp, #12
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	462a      	mov	r2, r5
 8010e40:	4b05      	ldr	r3, [pc, #20]	@ (8010e58 <_svfiprintf_r+0x1f0>)
 8010e42:	a904      	add	r1, sp, #16
 8010e44:	4638      	mov	r0, r7
 8010e46:	f7fd f9ff 	bl	800e248 <_printf_i>
 8010e4a:	e7ed      	b.n	8010e28 <_svfiprintf_r+0x1c0>
 8010e4c:	080117a1 	.word	0x080117a1
 8010e50:	080117ab 	.word	0x080117ab
 8010e54:	0800dd39 	.word	0x0800dd39
 8010e58:	08010bb3 	.word	0x08010bb3
 8010e5c:	080117a7 	.word	0x080117a7

08010e60 <__sflush_r>:
 8010e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e68:	0716      	lsls	r6, r2, #28
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	d454      	bmi.n	8010f1a <__sflush_r+0xba>
 8010e70:	684b      	ldr	r3, [r1, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	dc02      	bgt.n	8010e7c <__sflush_r+0x1c>
 8010e76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	dd48      	ble.n	8010f0e <__sflush_r+0xae>
 8010e7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e7e:	2e00      	cmp	r6, #0
 8010e80:	d045      	beq.n	8010f0e <__sflush_r+0xae>
 8010e82:	2300      	movs	r3, #0
 8010e84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e88:	682f      	ldr	r7, [r5, #0]
 8010e8a:	6a21      	ldr	r1, [r4, #32]
 8010e8c:	602b      	str	r3, [r5, #0]
 8010e8e:	d030      	beq.n	8010ef2 <__sflush_r+0x92>
 8010e90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	0759      	lsls	r1, r3, #29
 8010e96:	d505      	bpl.n	8010ea4 <__sflush_r+0x44>
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	1ad2      	subs	r2, r2, r3
 8010e9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e9e:	b10b      	cbz	r3, 8010ea4 <__sflush_r+0x44>
 8010ea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ea2:	1ad2      	subs	r2, r2, r3
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ea8:	6a21      	ldr	r1, [r4, #32]
 8010eaa:	4628      	mov	r0, r5
 8010eac:	47b0      	blx	r6
 8010eae:	1c43      	adds	r3, r0, #1
 8010eb0:	89a3      	ldrh	r3, [r4, #12]
 8010eb2:	d106      	bne.n	8010ec2 <__sflush_r+0x62>
 8010eb4:	6829      	ldr	r1, [r5, #0]
 8010eb6:	291d      	cmp	r1, #29
 8010eb8:	d82b      	bhi.n	8010f12 <__sflush_r+0xb2>
 8010eba:	4a2a      	ldr	r2, [pc, #168]	@ (8010f64 <__sflush_r+0x104>)
 8010ebc:	40ca      	lsrs	r2, r1
 8010ebe:	07d6      	lsls	r6, r2, #31
 8010ec0:	d527      	bpl.n	8010f12 <__sflush_r+0xb2>
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	6062      	str	r2, [r4, #4]
 8010ec6:	04d9      	lsls	r1, r3, #19
 8010ec8:	6922      	ldr	r2, [r4, #16]
 8010eca:	6022      	str	r2, [r4, #0]
 8010ecc:	d504      	bpl.n	8010ed8 <__sflush_r+0x78>
 8010ece:	1c42      	adds	r2, r0, #1
 8010ed0:	d101      	bne.n	8010ed6 <__sflush_r+0x76>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	b903      	cbnz	r3, 8010ed8 <__sflush_r+0x78>
 8010ed6:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eda:	602f      	str	r7, [r5, #0]
 8010edc:	b1b9      	cbz	r1, 8010f0e <__sflush_r+0xae>
 8010ede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ee2:	4299      	cmp	r1, r3
 8010ee4:	d002      	beq.n	8010eec <__sflush_r+0x8c>
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7fe fd94 	bl	800fa14 <_free_r>
 8010eec:	2300      	movs	r3, #0
 8010eee:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ef0:	e00d      	b.n	8010f0e <__sflush_r+0xae>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	47b0      	blx	r6
 8010ef8:	4602      	mov	r2, r0
 8010efa:	1c50      	adds	r0, r2, #1
 8010efc:	d1c9      	bne.n	8010e92 <__sflush_r+0x32>
 8010efe:	682b      	ldr	r3, [r5, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d0c6      	beq.n	8010e92 <__sflush_r+0x32>
 8010f04:	2b1d      	cmp	r3, #29
 8010f06:	d001      	beq.n	8010f0c <__sflush_r+0xac>
 8010f08:	2b16      	cmp	r3, #22
 8010f0a:	d11e      	bne.n	8010f4a <__sflush_r+0xea>
 8010f0c:	602f      	str	r7, [r5, #0]
 8010f0e:	2000      	movs	r0, #0
 8010f10:	e022      	b.n	8010f58 <__sflush_r+0xf8>
 8010f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f16:	b21b      	sxth	r3, r3
 8010f18:	e01b      	b.n	8010f52 <__sflush_r+0xf2>
 8010f1a:	690f      	ldr	r7, [r1, #16]
 8010f1c:	2f00      	cmp	r7, #0
 8010f1e:	d0f6      	beq.n	8010f0e <__sflush_r+0xae>
 8010f20:	0793      	lsls	r3, r2, #30
 8010f22:	680e      	ldr	r6, [r1, #0]
 8010f24:	bf08      	it	eq
 8010f26:	694b      	ldreq	r3, [r1, #20]
 8010f28:	600f      	str	r7, [r1, #0]
 8010f2a:	bf18      	it	ne
 8010f2c:	2300      	movne	r3, #0
 8010f2e:	eba6 0807 	sub.w	r8, r6, r7
 8010f32:	608b      	str	r3, [r1, #8]
 8010f34:	f1b8 0f00 	cmp.w	r8, #0
 8010f38:	dde9      	ble.n	8010f0e <__sflush_r+0xae>
 8010f3a:	6a21      	ldr	r1, [r4, #32]
 8010f3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f3e:	4643      	mov	r3, r8
 8010f40:	463a      	mov	r2, r7
 8010f42:	4628      	mov	r0, r5
 8010f44:	47b0      	blx	r6
 8010f46:	2800      	cmp	r0, #0
 8010f48:	dc08      	bgt.n	8010f5c <__sflush_r+0xfc>
 8010f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f52:	81a3      	strh	r3, [r4, #12]
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295
 8010f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f5c:	4407      	add	r7, r0
 8010f5e:	eba8 0800 	sub.w	r8, r8, r0
 8010f62:	e7e7      	b.n	8010f34 <__sflush_r+0xd4>
 8010f64:	20400001 	.word	0x20400001

08010f68 <_fflush_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	690b      	ldr	r3, [r1, #16]
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	460c      	mov	r4, r1
 8010f70:	b913      	cbnz	r3, 8010f78 <_fflush_r+0x10>
 8010f72:	2500      	movs	r5, #0
 8010f74:	4628      	mov	r0, r5
 8010f76:	bd38      	pop	{r3, r4, r5, pc}
 8010f78:	b118      	cbz	r0, 8010f82 <_fflush_r+0x1a>
 8010f7a:	6a03      	ldr	r3, [r0, #32]
 8010f7c:	b90b      	cbnz	r3, 8010f82 <_fflush_r+0x1a>
 8010f7e:	f7fd fd13 	bl	800e9a8 <__sinit>
 8010f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d0f3      	beq.n	8010f72 <_fflush_r+0xa>
 8010f8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f8c:	07d0      	lsls	r0, r2, #31
 8010f8e:	d404      	bmi.n	8010f9a <_fflush_r+0x32>
 8010f90:	0599      	lsls	r1, r3, #22
 8010f92:	d402      	bmi.n	8010f9a <_fflush_r+0x32>
 8010f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f96:	f7fd ff34 	bl	800ee02 <__retarget_lock_acquire_recursive>
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	f7ff ff5f 	bl	8010e60 <__sflush_r>
 8010fa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010fa4:	07da      	lsls	r2, r3, #31
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	d4e4      	bmi.n	8010f74 <_fflush_r+0xc>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	059b      	lsls	r3, r3, #22
 8010fae:	d4e1      	bmi.n	8010f74 <_fflush_r+0xc>
 8010fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010fb2:	f7fd ff27 	bl	800ee04 <__retarget_lock_release_recursive>
 8010fb6:	e7dd      	b.n	8010f74 <_fflush_r+0xc>

08010fb8 <__swhatbuf_r>:
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	460c      	mov	r4, r1
 8010fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	b096      	sub	sp, #88	@ 0x58
 8010fc4:	4615      	mov	r5, r2
 8010fc6:	461e      	mov	r6, r3
 8010fc8:	da0d      	bge.n	8010fe6 <__swhatbuf_r+0x2e>
 8010fca:	89a3      	ldrh	r3, [r4, #12]
 8010fcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010fd0:	f04f 0100 	mov.w	r1, #0
 8010fd4:	bf14      	ite	ne
 8010fd6:	2340      	movne	r3, #64	@ 0x40
 8010fd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010fdc:	2000      	movs	r0, #0
 8010fde:	6031      	str	r1, [r6, #0]
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	b016      	add	sp, #88	@ 0x58
 8010fe4:	bd70      	pop	{r4, r5, r6, pc}
 8010fe6:	466a      	mov	r2, sp
 8010fe8:	f000 f862 	bl	80110b0 <_fstat_r>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	dbec      	blt.n	8010fca <__swhatbuf_r+0x12>
 8010ff0:	9901      	ldr	r1, [sp, #4]
 8010ff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010ffa:	4259      	negs	r1, r3
 8010ffc:	4159      	adcs	r1, r3
 8010ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011002:	e7eb      	b.n	8010fdc <__swhatbuf_r+0x24>

08011004 <__smakebuf_r>:
 8011004:	898b      	ldrh	r3, [r1, #12]
 8011006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011008:	079d      	lsls	r5, r3, #30
 801100a:	4606      	mov	r6, r0
 801100c:	460c      	mov	r4, r1
 801100e:	d507      	bpl.n	8011020 <__smakebuf_r+0x1c>
 8011010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	6123      	str	r3, [r4, #16]
 8011018:	2301      	movs	r3, #1
 801101a:	6163      	str	r3, [r4, #20]
 801101c:	b003      	add	sp, #12
 801101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011020:	ab01      	add	r3, sp, #4
 8011022:	466a      	mov	r2, sp
 8011024:	f7ff ffc8 	bl	8010fb8 <__swhatbuf_r>
 8011028:	9f00      	ldr	r7, [sp, #0]
 801102a:	4605      	mov	r5, r0
 801102c:	4639      	mov	r1, r7
 801102e:	4630      	mov	r0, r6
 8011030:	f7fb ff7c 	bl	800cf2c <_malloc_r>
 8011034:	b948      	cbnz	r0, 801104a <__smakebuf_r+0x46>
 8011036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801103a:	059a      	lsls	r2, r3, #22
 801103c:	d4ee      	bmi.n	801101c <__smakebuf_r+0x18>
 801103e:	f023 0303 	bic.w	r3, r3, #3
 8011042:	f043 0302 	orr.w	r3, r3, #2
 8011046:	81a3      	strh	r3, [r4, #12]
 8011048:	e7e2      	b.n	8011010 <__smakebuf_r+0xc>
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	6020      	str	r0, [r4, #0]
 801104e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011052:	81a3      	strh	r3, [r4, #12]
 8011054:	9b01      	ldr	r3, [sp, #4]
 8011056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801105a:	b15b      	cbz	r3, 8011074 <__smakebuf_r+0x70>
 801105c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011060:	4630      	mov	r0, r6
 8011062:	f000 f837 	bl	80110d4 <_isatty_r>
 8011066:	b128      	cbz	r0, 8011074 <__smakebuf_r+0x70>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	f023 0303 	bic.w	r3, r3, #3
 801106e:	f043 0301 	orr.w	r3, r3, #1
 8011072:	81a3      	strh	r3, [r4, #12]
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	431d      	orrs	r5, r3
 8011078:	81a5      	strh	r5, [r4, #12]
 801107a:	e7cf      	b.n	801101c <__smakebuf_r+0x18>

0801107c <memmove>:
 801107c:	4288      	cmp	r0, r1
 801107e:	b510      	push	{r4, lr}
 8011080:	eb01 0402 	add.w	r4, r1, r2
 8011084:	d902      	bls.n	801108c <memmove+0x10>
 8011086:	4284      	cmp	r4, r0
 8011088:	4623      	mov	r3, r4
 801108a:	d807      	bhi.n	801109c <memmove+0x20>
 801108c:	1e43      	subs	r3, r0, #1
 801108e:	42a1      	cmp	r1, r4
 8011090:	d008      	beq.n	80110a4 <memmove+0x28>
 8011092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011096:	f803 2f01 	strb.w	r2, [r3, #1]!
 801109a:	e7f8      	b.n	801108e <memmove+0x12>
 801109c:	4402      	add	r2, r0
 801109e:	4601      	mov	r1, r0
 80110a0:	428a      	cmp	r2, r1
 80110a2:	d100      	bne.n	80110a6 <memmove+0x2a>
 80110a4:	bd10      	pop	{r4, pc}
 80110a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110ae:	e7f7      	b.n	80110a0 <memmove+0x24>

080110b0 <_fstat_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4d07      	ldr	r5, [pc, #28]	@ (80110d0 <_fstat_r+0x20>)
 80110b4:	2300      	movs	r3, #0
 80110b6:	4604      	mov	r4, r0
 80110b8:	4608      	mov	r0, r1
 80110ba:	4611      	mov	r1, r2
 80110bc:	602b      	str	r3, [r5, #0]
 80110be:	f7f0 fa6d 	bl	800159c <_fstat>
 80110c2:	1c43      	adds	r3, r0, #1
 80110c4:	d102      	bne.n	80110cc <_fstat_r+0x1c>
 80110c6:	682b      	ldr	r3, [r5, #0]
 80110c8:	b103      	cbz	r3, 80110cc <_fstat_r+0x1c>
 80110ca:	6023      	str	r3, [r4, #0]
 80110cc:	bd38      	pop	{r3, r4, r5, pc}
 80110ce:	bf00      	nop
 80110d0:	24004efc 	.word	0x24004efc

080110d4 <_isatty_r>:
 80110d4:	b538      	push	{r3, r4, r5, lr}
 80110d6:	4d06      	ldr	r5, [pc, #24]	@ (80110f0 <_isatty_r+0x1c>)
 80110d8:	2300      	movs	r3, #0
 80110da:	4604      	mov	r4, r0
 80110dc:	4608      	mov	r0, r1
 80110de:	602b      	str	r3, [r5, #0]
 80110e0:	f7f0 fa6c 	bl	80015bc <_isatty>
 80110e4:	1c43      	adds	r3, r0, #1
 80110e6:	d102      	bne.n	80110ee <_isatty_r+0x1a>
 80110e8:	682b      	ldr	r3, [r5, #0]
 80110ea:	b103      	cbz	r3, 80110ee <_isatty_r+0x1a>
 80110ec:	6023      	str	r3, [r4, #0]
 80110ee:	bd38      	pop	{r3, r4, r5, pc}
 80110f0:	24004efc 	.word	0x24004efc

080110f4 <__assert_func>:
 80110f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110f6:	4614      	mov	r4, r2
 80110f8:	461a      	mov	r2, r3
 80110fa:	4b09      	ldr	r3, [pc, #36]	@ (8011120 <__assert_func+0x2c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4605      	mov	r5, r0
 8011100:	68d8      	ldr	r0, [r3, #12]
 8011102:	b14c      	cbz	r4, 8011118 <__assert_func+0x24>
 8011104:	4b07      	ldr	r3, [pc, #28]	@ (8011124 <__assert_func+0x30>)
 8011106:	9100      	str	r1, [sp, #0]
 8011108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801110c:	4906      	ldr	r1, [pc, #24]	@ (8011128 <__assert_func+0x34>)
 801110e:	462b      	mov	r3, r5
 8011110:	f000 f822 	bl	8011158 <fiprintf>
 8011114:	f000 f832 	bl	801117c <abort>
 8011118:	4b04      	ldr	r3, [pc, #16]	@ (801112c <__assert_func+0x38>)
 801111a:	461c      	mov	r4, r3
 801111c:	e7f3      	b.n	8011106 <__assert_func+0x12>
 801111e:	bf00      	nop
 8011120:	2400018c 	.word	0x2400018c
 8011124:	080117b2 	.word	0x080117b2
 8011128:	080117bf 	.word	0x080117bf
 801112c:	080117ed 	.word	0x080117ed

08011130 <_calloc_r>:
 8011130:	b570      	push	{r4, r5, r6, lr}
 8011132:	fba1 5402 	umull	r5, r4, r1, r2
 8011136:	b934      	cbnz	r4, 8011146 <_calloc_r+0x16>
 8011138:	4629      	mov	r1, r5
 801113a:	f7fb fef7 	bl	800cf2c <_malloc_r>
 801113e:	4606      	mov	r6, r0
 8011140:	b928      	cbnz	r0, 801114e <_calloc_r+0x1e>
 8011142:	4630      	mov	r0, r6
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	220c      	movs	r2, #12
 8011148:	6002      	str	r2, [r0, #0]
 801114a:	2600      	movs	r6, #0
 801114c:	e7f9      	b.n	8011142 <_calloc_r+0x12>
 801114e:	462a      	mov	r2, r5
 8011150:	4621      	mov	r1, r4
 8011152:	f7fd fdb7 	bl	800ecc4 <memset>
 8011156:	e7f4      	b.n	8011142 <_calloc_r+0x12>

08011158 <fiprintf>:
 8011158:	b40e      	push	{r1, r2, r3}
 801115a:	b503      	push	{r0, r1, lr}
 801115c:	4601      	mov	r1, r0
 801115e:	ab03      	add	r3, sp, #12
 8011160:	4805      	ldr	r0, [pc, #20]	@ (8011178 <fiprintf+0x20>)
 8011162:	f853 2b04 	ldr.w	r2, [r3], #4
 8011166:	6800      	ldr	r0, [r0, #0]
 8011168:	9301      	str	r3, [sp, #4]
 801116a:	f000 f837 	bl	80111dc <_vfiprintf_r>
 801116e:	b002      	add	sp, #8
 8011170:	f85d eb04 	ldr.w	lr, [sp], #4
 8011174:	b003      	add	sp, #12
 8011176:	4770      	bx	lr
 8011178:	2400018c 	.word	0x2400018c

0801117c <abort>:
 801117c:	b508      	push	{r3, lr}
 801117e:	2006      	movs	r0, #6
 8011180:	f000 f96c 	bl	801145c <raise>
 8011184:	2001      	movs	r0, #1
 8011186:	f7f0 f9b9 	bl	80014fc <_exit>

0801118a <__sfputc_r>:
 801118a:	6893      	ldr	r3, [r2, #8]
 801118c:	3b01      	subs	r3, #1
 801118e:	2b00      	cmp	r3, #0
 8011190:	b410      	push	{r4}
 8011192:	6093      	str	r3, [r2, #8]
 8011194:	da08      	bge.n	80111a8 <__sfputc_r+0x1e>
 8011196:	6994      	ldr	r4, [r2, #24]
 8011198:	42a3      	cmp	r3, r4
 801119a:	db01      	blt.n	80111a0 <__sfputc_r+0x16>
 801119c:	290a      	cmp	r1, #10
 801119e:	d103      	bne.n	80111a8 <__sfputc_r+0x1e>
 80111a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111a4:	f7fd bcf9 	b.w	800eb9a <__swbuf_r>
 80111a8:	6813      	ldr	r3, [r2, #0]
 80111aa:	1c58      	adds	r0, r3, #1
 80111ac:	6010      	str	r0, [r2, #0]
 80111ae:	7019      	strb	r1, [r3, #0]
 80111b0:	4608      	mov	r0, r1
 80111b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <__sfputs_r>:
 80111b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ba:	4606      	mov	r6, r0
 80111bc:	460f      	mov	r7, r1
 80111be:	4614      	mov	r4, r2
 80111c0:	18d5      	adds	r5, r2, r3
 80111c2:	42ac      	cmp	r4, r5
 80111c4:	d101      	bne.n	80111ca <__sfputs_r+0x12>
 80111c6:	2000      	movs	r0, #0
 80111c8:	e007      	b.n	80111da <__sfputs_r+0x22>
 80111ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ce:	463a      	mov	r2, r7
 80111d0:	4630      	mov	r0, r6
 80111d2:	f7ff ffda 	bl	801118a <__sfputc_r>
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	d1f3      	bne.n	80111c2 <__sfputs_r+0xa>
 80111da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111dc <_vfiprintf_r>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	460d      	mov	r5, r1
 80111e2:	b09d      	sub	sp, #116	@ 0x74
 80111e4:	4614      	mov	r4, r2
 80111e6:	4698      	mov	r8, r3
 80111e8:	4606      	mov	r6, r0
 80111ea:	b118      	cbz	r0, 80111f4 <_vfiprintf_r+0x18>
 80111ec:	6a03      	ldr	r3, [r0, #32]
 80111ee:	b90b      	cbnz	r3, 80111f4 <_vfiprintf_r+0x18>
 80111f0:	f7fd fbda 	bl	800e9a8 <__sinit>
 80111f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80111f6:	07d9      	lsls	r1, r3, #31
 80111f8:	d405      	bmi.n	8011206 <_vfiprintf_r+0x2a>
 80111fa:	89ab      	ldrh	r3, [r5, #12]
 80111fc:	059a      	lsls	r2, r3, #22
 80111fe:	d402      	bmi.n	8011206 <_vfiprintf_r+0x2a>
 8011200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011202:	f7fd fdfe 	bl	800ee02 <__retarget_lock_acquire_recursive>
 8011206:	89ab      	ldrh	r3, [r5, #12]
 8011208:	071b      	lsls	r3, r3, #28
 801120a:	d501      	bpl.n	8011210 <_vfiprintf_r+0x34>
 801120c:	692b      	ldr	r3, [r5, #16]
 801120e:	b99b      	cbnz	r3, 8011238 <_vfiprintf_r+0x5c>
 8011210:	4629      	mov	r1, r5
 8011212:	4630      	mov	r0, r6
 8011214:	f7fd fd00 	bl	800ec18 <__swsetup_r>
 8011218:	b170      	cbz	r0, 8011238 <_vfiprintf_r+0x5c>
 801121a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801121c:	07dc      	lsls	r4, r3, #31
 801121e:	d504      	bpl.n	801122a <_vfiprintf_r+0x4e>
 8011220:	f04f 30ff 	mov.w	r0, #4294967295
 8011224:	b01d      	add	sp, #116	@ 0x74
 8011226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122a:	89ab      	ldrh	r3, [r5, #12]
 801122c:	0598      	lsls	r0, r3, #22
 801122e:	d4f7      	bmi.n	8011220 <_vfiprintf_r+0x44>
 8011230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011232:	f7fd fde7 	bl	800ee04 <__retarget_lock_release_recursive>
 8011236:	e7f3      	b.n	8011220 <_vfiprintf_r+0x44>
 8011238:	2300      	movs	r3, #0
 801123a:	9309      	str	r3, [sp, #36]	@ 0x24
 801123c:	2320      	movs	r3, #32
 801123e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011242:	f8cd 800c 	str.w	r8, [sp, #12]
 8011246:	2330      	movs	r3, #48	@ 0x30
 8011248:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80113f8 <_vfiprintf_r+0x21c>
 801124c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011250:	f04f 0901 	mov.w	r9, #1
 8011254:	4623      	mov	r3, r4
 8011256:	469a      	mov	sl, r3
 8011258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801125c:	b10a      	cbz	r2, 8011262 <_vfiprintf_r+0x86>
 801125e:	2a25      	cmp	r2, #37	@ 0x25
 8011260:	d1f9      	bne.n	8011256 <_vfiprintf_r+0x7a>
 8011262:	ebba 0b04 	subs.w	fp, sl, r4
 8011266:	d00b      	beq.n	8011280 <_vfiprintf_r+0xa4>
 8011268:	465b      	mov	r3, fp
 801126a:	4622      	mov	r2, r4
 801126c:	4629      	mov	r1, r5
 801126e:	4630      	mov	r0, r6
 8011270:	f7ff ffa2 	bl	80111b8 <__sfputs_r>
 8011274:	3001      	adds	r0, #1
 8011276:	f000 80a7 	beq.w	80113c8 <_vfiprintf_r+0x1ec>
 801127a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801127c:	445a      	add	r2, fp
 801127e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011280:	f89a 3000 	ldrb.w	r3, [sl]
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 809f 	beq.w	80113c8 <_vfiprintf_r+0x1ec>
 801128a:	2300      	movs	r3, #0
 801128c:	f04f 32ff 	mov.w	r2, #4294967295
 8011290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011294:	f10a 0a01 	add.w	sl, sl, #1
 8011298:	9304      	str	r3, [sp, #16]
 801129a:	9307      	str	r3, [sp, #28]
 801129c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80112a2:	4654      	mov	r4, sl
 80112a4:	2205      	movs	r2, #5
 80112a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112aa:	4853      	ldr	r0, [pc, #332]	@ (80113f8 <_vfiprintf_r+0x21c>)
 80112ac:	f7ef f818 	bl	80002e0 <memchr>
 80112b0:	9a04      	ldr	r2, [sp, #16]
 80112b2:	b9d8      	cbnz	r0, 80112ec <_vfiprintf_r+0x110>
 80112b4:	06d1      	lsls	r1, r2, #27
 80112b6:	bf44      	itt	mi
 80112b8:	2320      	movmi	r3, #32
 80112ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112be:	0713      	lsls	r3, r2, #28
 80112c0:	bf44      	itt	mi
 80112c2:	232b      	movmi	r3, #43	@ 0x2b
 80112c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112c8:	f89a 3000 	ldrb.w	r3, [sl]
 80112cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80112ce:	d015      	beq.n	80112fc <_vfiprintf_r+0x120>
 80112d0:	9a07      	ldr	r2, [sp, #28]
 80112d2:	4654      	mov	r4, sl
 80112d4:	2000      	movs	r0, #0
 80112d6:	f04f 0c0a 	mov.w	ip, #10
 80112da:	4621      	mov	r1, r4
 80112dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112e0:	3b30      	subs	r3, #48	@ 0x30
 80112e2:	2b09      	cmp	r3, #9
 80112e4:	d94b      	bls.n	801137e <_vfiprintf_r+0x1a2>
 80112e6:	b1b0      	cbz	r0, 8011316 <_vfiprintf_r+0x13a>
 80112e8:	9207      	str	r2, [sp, #28]
 80112ea:	e014      	b.n	8011316 <_vfiprintf_r+0x13a>
 80112ec:	eba0 0308 	sub.w	r3, r0, r8
 80112f0:	fa09 f303 	lsl.w	r3, r9, r3
 80112f4:	4313      	orrs	r3, r2
 80112f6:	9304      	str	r3, [sp, #16]
 80112f8:	46a2      	mov	sl, r4
 80112fa:	e7d2      	b.n	80112a2 <_vfiprintf_r+0xc6>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	1d19      	adds	r1, r3, #4
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	bfbb      	ittet	lt
 8011308:	425b      	neglt	r3, r3
 801130a:	f042 0202 	orrlt.w	r2, r2, #2
 801130e:	9307      	strge	r3, [sp, #28]
 8011310:	9307      	strlt	r3, [sp, #28]
 8011312:	bfb8      	it	lt
 8011314:	9204      	strlt	r2, [sp, #16]
 8011316:	7823      	ldrb	r3, [r4, #0]
 8011318:	2b2e      	cmp	r3, #46	@ 0x2e
 801131a:	d10a      	bne.n	8011332 <_vfiprintf_r+0x156>
 801131c:	7863      	ldrb	r3, [r4, #1]
 801131e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011320:	d132      	bne.n	8011388 <_vfiprintf_r+0x1ac>
 8011322:	9b03      	ldr	r3, [sp, #12]
 8011324:	1d1a      	adds	r2, r3, #4
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	9203      	str	r2, [sp, #12]
 801132a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801132e:	3402      	adds	r4, #2
 8011330:	9305      	str	r3, [sp, #20]
 8011332:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011408 <_vfiprintf_r+0x22c>
 8011336:	7821      	ldrb	r1, [r4, #0]
 8011338:	2203      	movs	r2, #3
 801133a:	4650      	mov	r0, sl
 801133c:	f7ee ffd0 	bl	80002e0 <memchr>
 8011340:	b138      	cbz	r0, 8011352 <_vfiprintf_r+0x176>
 8011342:	9b04      	ldr	r3, [sp, #16]
 8011344:	eba0 000a 	sub.w	r0, r0, sl
 8011348:	2240      	movs	r2, #64	@ 0x40
 801134a:	4082      	lsls	r2, r0
 801134c:	4313      	orrs	r3, r2
 801134e:	3401      	adds	r4, #1
 8011350:	9304      	str	r3, [sp, #16]
 8011352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011356:	4829      	ldr	r0, [pc, #164]	@ (80113fc <_vfiprintf_r+0x220>)
 8011358:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801135c:	2206      	movs	r2, #6
 801135e:	f7ee ffbf 	bl	80002e0 <memchr>
 8011362:	2800      	cmp	r0, #0
 8011364:	d03f      	beq.n	80113e6 <_vfiprintf_r+0x20a>
 8011366:	4b26      	ldr	r3, [pc, #152]	@ (8011400 <_vfiprintf_r+0x224>)
 8011368:	bb1b      	cbnz	r3, 80113b2 <_vfiprintf_r+0x1d6>
 801136a:	9b03      	ldr	r3, [sp, #12]
 801136c:	3307      	adds	r3, #7
 801136e:	f023 0307 	bic.w	r3, r3, #7
 8011372:	3308      	adds	r3, #8
 8011374:	9303      	str	r3, [sp, #12]
 8011376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011378:	443b      	add	r3, r7
 801137a:	9309      	str	r3, [sp, #36]	@ 0x24
 801137c:	e76a      	b.n	8011254 <_vfiprintf_r+0x78>
 801137e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011382:	460c      	mov	r4, r1
 8011384:	2001      	movs	r0, #1
 8011386:	e7a8      	b.n	80112da <_vfiprintf_r+0xfe>
 8011388:	2300      	movs	r3, #0
 801138a:	3401      	adds	r4, #1
 801138c:	9305      	str	r3, [sp, #20]
 801138e:	4619      	mov	r1, r3
 8011390:	f04f 0c0a 	mov.w	ip, #10
 8011394:	4620      	mov	r0, r4
 8011396:	f810 2b01 	ldrb.w	r2, [r0], #1
 801139a:	3a30      	subs	r2, #48	@ 0x30
 801139c:	2a09      	cmp	r2, #9
 801139e:	d903      	bls.n	80113a8 <_vfiprintf_r+0x1cc>
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d0c6      	beq.n	8011332 <_vfiprintf_r+0x156>
 80113a4:	9105      	str	r1, [sp, #20]
 80113a6:	e7c4      	b.n	8011332 <_vfiprintf_r+0x156>
 80113a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113ac:	4604      	mov	r4, r0
 80113ae:	2301      	movs	r3, #1
 80113b0:	e7f0      	b.n	8011394 <_vfiprintf_r+0x1b8>
 80113b2:	ab03      	add	r3, sp, #12
 80113b4:	9300      	str	r3, [sp, #0]
 80113b6:	462a      	mov	r2, r5
 80113b8:	4b12      	ldr	r3, [pc, #72]	@ (8011404 <_vfiprintf_r+0x228>)
 80113ba:	a904      	add	r1, sp, #16
 80113bc:	4630      	mov	r0, r6
 80113be:	f7fc fcbb 	bl	800dd38 <_printf_float>
 80113c2:	4607      	mov	r7, r0
 80113c4:	1c78      	adds	r0, r7, #1
 80113c6:	d1d6      	bne.n	8011376 <_vfiprintf_r+0x19a>
 80113c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113ca:	07d9      	lsls	r1, r3, #31
 80113cc:	d405      	bmi.n	80113da <_vfiprintf_r+0x1fe>
 80113ce:	89ab      	ldrh	r3, [r5, #12]
 80113d0:	059a      	lsls	r2, r3, #22
 80113d2:	d402      	bmi.n	80113da <_vfiprintf_r+0x1fe>
 80113d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113d6:	f7fd fd15 	bl	800ee04 <__retarget_lock_release_recursive>
 80113da:	89ab      	ldrh	r3, [r5, #12]
 80113dc:	065b      	lsls	r3, r3, #25
 80113de:	f53f af1f 	bmi.w	8011220 <_vfiprintf_r+0x44>
 80113e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113e4:	e71e      	b.n	8011224 <_vfiprintf_r+0x48>
 80113e6:	ab03      	add	r3, sp, #12
 80113e8:	9300      	str	r3, [sp, #0]
 80113ea:	462a      	mov	r2, r5
 80113ec:	4b05      	ldr	r3, [pc, #20]	@ (8011404 <_vfiprintf_r+0x228>)
 80113ee:	a904      	add	r1, sp, #16
 80113f0:	4630      	mov	r0, r6
 80113f2:	f7fc ff29 	bl	800e248 <_printf_i>
 80113f6:	e7e4      	b.n	80113c2 <_vfiprintf_r+0x1e6>
 80113f8:	080117a1 	.word	0x080117a1
 80113fc:	080117ab 	.word	0x080117ab
 8011400:	0800dd39 	.word	0x0800dd39
 8011404:	080111b9 	.word	0x080111b9
 8011408:	080117a7 	.word	0x080117a7

0801140c <_raise_r>:
 801140c:	291f      	cmp	r1, #31
 801140e:	b538      	push	{r3, r4, r5, lr}
 8011410:	4605      	mov	r5, r0
 8011412:	460c      	mov	r4, r1
 8011414:	d904      	bls.n	8011420 <_raise_r+0x14>
 8011416:	2316      	movs	r3, #22
 8011418:	6003      	str	r3, [r0, #0]
 801141a:	f04f 30ff 	mov.w	r0, #4294967295
 801141e:	bd38      	pop	{r3, r4, r5, pc}
 8011420:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011422:	b112      	cbz	r2, 801142a <_raise_r+0x1e>
 8011424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011428:	b94b      	cbnz	r3, 801143e <_raise_r+0x32>
 801142a:	4628      	mov	r0, r5
 801142c:	f000 f830 	bl	8011490 <_getpid_r>
 8011430:	4622      	mov	r2, r4
 8011432:	4601      	mov	r1, r0
 8011434:	4628      	mov	r0, r5
 8011436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801143a:	f000 b817 	b.w	801146c <_kill_r>
 801143e:	2b01      	cmp	r3, #1
 8011440:	d00a      	beq.n	8011458 <_raise_r+0x4c>
 8011442:	1c59      	adds	r1, r3, #1
 8011444:	d103      	bne.n	801144e <_raise_r+0x42>
 8011446:	2316      	movs	r3, #22
 8011448:	6003      	str	r3, [r0, #0]
 801144a:	2001      	movs	r0, #1
 801144c:	e7e7      	b.n	801141e <_raise_r+0x12>
 801144e:	2100      	movs	r1, #0
 8011450:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011454:	4620      	mov	r0, r4
 8011456:	4798      	blx	r3
 8011458:	2000      	movs	r0, #0
 801145a:	e7e0      	b.n	801141e <_raise_r+0x12>

0801145c <raise>:
 801145c:	4b02      	ldr	r3, [pc, #8]	@ (8011468 <raise+0xc>)
 801145e:	4601      	mov	r1, r0
 8011460:	6818      	ldr	r0, [r3, #0]
 8011462:	f7ff bfd3 	b.w	801140c <_raise_r>
 8011466:	bf00      	nop
 8011468:	2400018c 	.word	0x2400018c

0801146c <_kill_r>:
 801146c:	b538      	push	{r3, r4, r5, lr}
 801146e:	4d07      	ldr	r5, [pc, #28]	@ (801148c <_kill_r+0x20>)
 8011470:	2300      	movs	r3, #0
 8011472:	4604      	mov	r4, r0
 8011474:	4608      	mov	r0, r1
 8011476:	4611      	mov	r1, r2
 8011478:	602b      	str	r3, [r5, #0]
 801147a:	f7f0 f82f 	bl	80014dc <_kill>
 801147e:	1c43      	adds	r3, r0, #1
 8011480:	d102      	bne.n	8011488 <_kill_r+0x1c>
 8011482:	682b      	ldr	r3, [r5, #0]
 8011484:	b103      	cbz	r3, 8011488 <_kill_r+0x1c>
 8011486:	6023      	str	r3, [r4, #0]
 8011488:	bd38      	pop	{r3, r4, r5, pc}
 801148a:	bf00      	nop
 801148c:	24004efc 	.word	0x24004efc

08011490 <_getpid_r>:
 8011490:	f7f0 b81c 	b.w	80014cc <_getpid>

08011494 <_init>:
 8011494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011496:	bf00      	nop
 8011498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801149a:	bc08      	pop	{r3}
 801149c:	469e      	mov	lr, r3
 801149e:	4770      	bx	lr

080114a0 <_fini>:
 80114a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a2:	bf00      	nop
 80114a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114a6:	bc08      	pop	{r3}
 80114a8:	469e      	mov	lr, r3
 80114aa:	4770      	bx	lr
