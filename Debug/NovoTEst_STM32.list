
NovoTEst_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d874  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800db18  0800db18  0000eb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfd4  0800dfd4  0000efd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dfdc  0800dfdc  0000efdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dfe0  0800dfe0  0000efe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800dfe4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003fc  240001d8  0800e1bc  0000f1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005d4  0800e1bc  0000f5d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014a6e  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b28  00000000  00000000  00023c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df0  00000000  00000000  000267a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000aa1  00000000  00000000  00027590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003890d  00000000  00000000  00028031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015d4f  00000000  00000000  0006093e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ff4f  00000000  00000000  0007668d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d65dc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004be4  00000000  00000000  001d6620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001db204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dafc 	.word	0x0800dafc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800dafc 	.word	0x0800dafc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	200b      	movs	r0, #11
 8000ace:	f001 f888 	bl	8001be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f001 f89f 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	200c      	movs	r0, #12
 8000ade:	f001 f880 	bl	8001be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f001 f897 	bl	8001c16 <HAL_NVIC_EnableIRQ>

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58024400 	.word	0x58024400

08000af4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0a:	4b56      	ldr	r3, [pc, #344]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	4a54      	ldr	r2, [pc, #336]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1a:	4b52      	ldr	r3, [pc, #328]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b4e      	ldr	r3, [pc, #312]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b38:	4b4a      	ldr	r3, [pc, #296]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b47      	ldr	r3, [pc, #284]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a45      	ldr	r2, [pc, #276]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b43      	ldr	r3, [pc, #268]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	4b3f      	ldr	r3, [pc, #252]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b74:	4b3b      	ldr	r3, [pc, #236]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b82:	4b38      	ldr	r3, [pc, #224]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	4a36      	ldr	r2, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b92:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <MX_GPIO_Init+0x170>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4830      	ldr	r0, [pc, #192]	@ (8000c68 <MX_GPIO_Init+0x174>)
 8000ba6:	f003 fc9f 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bb0:	482e      	ldr	r0, [pc, #184]	@ (8000c6c <MX_GPIO_Init+0x178>)
 8000bb2:	f003 fc99 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bbc:	482c      	ldr	r0, [pc, #176]	@ (8000c70 <MX_GPIO_Init+0x17c>)
 8000bbe:	f003 fc93 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	482b      	ldr	r0, [pc, #172]	@ (8000c74 <MX_GPIO_Init+0x180>)
 8000bc8:	f003 fc8e 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4825      	ldr	r0, [pc, #148]	@ (8000c78 <MX_GPIO_Init+0x184>)
 8000be4:	f003 fad0 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000be8:	2310      	movs	r3, #16
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481a      	ldr	r0, [pc, #104]	@ (8000c68 <MX_GPIO_Init+0x174>)
 8000c00:	f003 fac2 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c04:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	@ (8000c6c <MX_GPIO_Init+0x178>)
 8000c1e:	f003 fab3 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8000c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_GPIO_Init+0x17c>)
 8000c3c:	f003 faa4 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_GPIO_Init+0x180>)
 8000c58:	f003 fa96 	bl	8004188 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	@ 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020000 	.word	0x58020000
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	58020c00 	.word	0x58020c00
 8000c74:	58021000 	.word	0x58021000
 8000c78:	58021400 	.word	0x58021400

08000c7c <AD7091R_ReadData>:
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
}

uint16_t AD7091R_ReadData(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
    uint8_t rx_buf[2] = {0};
 8000c82:	2300      	movs	r3, #0
 8000c84:	803b      	strh	r3, [r7, #0]
    uint16_t adc_raw_16bits, adc_value_12bits;

    HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	@ 0x64
 8000c88:	f000 fea0 	bl	80019cc <HAL_Delay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4820      	ldr	r0, [pc, #128]	@ (8000d14 <AD7091R_ReadData+0x98>)
 8000c92:	f003 fc29 	bl	80044e8 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8000c96:	4639      	mov	r1, r7
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	481e      	ldr	r0, [pc, #120]	@ (8000d18 <AD7091R_ReadData+0x9c>)
 8000ca0:	f006 fbc6 	bl	8007430 <HAL_SPI_Receive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d016      	beq.n	8000cd8 <AD7091R_ReadData+0x5c>
    {
        HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2110      	movs	r1, #16
 8000cae:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <AD7091R_ReadData+0x98>)
 8000cb0:	f003 fc1a 	bl	80044e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);  // LED erro
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <AD7091R_ReadData+0xa0>)
 8000cba:	f003 fc15 	bl	80044e8 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000cbe:	2064      	movs	r0, #100	@ 0x64
 8000cc0:	f000 fe84 	bl	80019cc <HAL_Delay>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4814      	ldr	r0, [pc, #80]	@ (8000d1c <AD7091R_ReadData+0xa0>)
 8000cca:	f003 fc0d 	bl	80044e8 <HAL_GPIO_WritePin>
        serialPrint("Erro na comunicacao SPI!\r\n");
 8000cce:	4814      	ldr	r0, [pc, #80]	@ (8000d20 <AD7091R_ReadData+0xa4>)
 8000cd0:	f000 f8a6 	bl	8000e20 <serialPrint>
        return 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e018      	b.n	8000d0a <AD7091R_ReadData+0x8e>
    }
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <AD7091R_ReadData+0x98>)
 8000cde:	f003 fc03 	bl	80044e8 <HAL_GPIO_WritePin>

    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);  // LED VERDE SUCESSO
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	480f      	ldr	r0, [pc, #60]	@ (8000d24 <AD7091R_ReadData+0xa8>)
 8000ce6:	f003 fc18 	bl	800451a <HAL_GPIO_TogglePin>

    adc_raw_16bits = (rx_buf[0] << 8) | rx_buf[1];
 8000cea:	783b      	ldrb	r3, [r7, #0]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	787b      	ldrb	r3, [r7, #1]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	80fb      	strh	r3, [r7, #6]
    adc_value_12bits = (adc_raw_16bits >> 2) & 0x0FFF;
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d06:	80bb      	strh	r3, [r7, #4]

    return adc_value_12bits;
 8000d08:	88bb      	ldrh	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	58020000 	.word	0x58020000
 8000d18:	24000274 	.word	0x24000274
 8000d1c:	58021000 	.word	0x58021000
 8000d20:	0800db18 	.word	0x0800db18
 8000d24:	58020400 	.word	0x58020400

08000d28 <get_filtered_reading>:

uint16_t get_filtered_reading(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	70fb      	strb	r3, [r7, #3]
 8000d36:	e00c      	b.n	8000d52 <get_filtered_reading+0x2a>
        sum += AD7091R_ReadData();
 8000d38:	f7ff ffa0 	bl	8000c7c <AD7091R_ReadData>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	607b      	str	r3, [r7, #4]
        HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f000 fe40 	bl	80019cc <HAL_Delay>
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	70fb      	strb	r3, [r7, #3]
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	2b1d      	cmp	r3, #29
 8000d56:	d9ef      	bls.n	8000d38 <get_filtered_reading+0x10>
    }
    return (uint16_t)(sum / NUM_SAMPLES);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <get_filtered_reading+0x44>)
 8000d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	b29b      	uxth	r3, r3
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	88888889 	.word	0x88888889

08000d70 <raw_to_voltage_mV>:

float raw_to_voltage_mV(uint16_t raw_value)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    return ((float)raw_value / ADC_MAX_VALUE) * VREF_MV;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d84:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000da4 <raw_to_voltage_mV+0x34>
 8000d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000da8 <raw_to_voltage_mV+0x38>
 8000d90:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d94:	eeb0 0a67 	vmov.f32	s0, s15
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	457ff000 	.word	0x457ff000
 8000da8:	451c4000 	.word	0x451c4000

08000dac <voltage_to_current_mA>:

float voltage_to_current_mA(float voltage_mv)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage_mv < MIN_VOLTAGE_ADC_MV) voltage_mv = MIN_VOLTAGE_ADC_MV;
 8000db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dba:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000e0c <voltage_to_current_mA+0x60>
 8000dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	d501      	bpl.n	8000dcc <voltage_to_current_mA+0x20>
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <voltage_to_current_mA+0x64>)
 8000dca:	607b      	str	r3, [r7, #4]
    if (voltage_mv > MAX_VOLTAGE_ADC_MV) voltage_mv = MAX_VOLTAGE_ADC_MV;
 8000dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e14 <voltage_to_current_mA+0x68>
 8000dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	dd01      	ble.n	8000de2 <voltage_to_current_mA+0x36>
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <voltage_to_current_mA+0x6c>)
 8000de0:	607b      	str	r3, [r7, #4]

    return 4.0f + ((voltage_mv - MIN_VOLTAGE_ADC_MV) * (16.0f / (MAX_VOLTAGE_ADC_MV - MIN_VOLTAGE_ADC_MV)));
 8000de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000e0c <voltage_to_current_mA+0x60>
 8000dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dee:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000e1c <voltage_to_current_mA+0x70>
 8000df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	42c80000 	.word	0x42c80000
 8000e10:	42c80000 	.word	0x42c80000
 8000e14:	45160000 	.word	0x45160000
 8000e18:	45160000 	.word	0x45160000
 8000e1c:	3be3f389 	.word	0x3be3f389

08000e20 <serialPrint>:

void serialPrint(const char* message)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff faa9 	bl	8000380 <strlen>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <serialPrint+0x28>)
 8000e3a:	f006 fe76 	bl	8007b2a <HAL_UART_Transmit>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000300 	.word	0x24000300

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e52:	f000 f8df 	bl	8001014 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e56:	f000 fd27 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5a:	f000 f85f 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f7ff fe49 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e62:	f7ff fe1f 	bl	8000aa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e66:	f000 fbd1 	bl	800160c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000e6a:	f000 f905 	bl	8001078 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t raw_value = get_filtered_reading();
 8000e6e:	f7ff ff5b 	bl	8000d28 <get_filtered_reading>
 8000e72:	4603      	mov	r3, r0
 8000e74:	81fb      	strh	r3, [r7, #14]
    float voltage_mv = raw_to_voltage_mV(raw_value);
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <raw_to_voltage_mV>
 8000e7e:	ed87 0a02 	vstr	s0, [r7, #8]
    float current_ma = voltage_to_current_mA(voltage_mv);
 8000e82:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e86:	f7ff ff91 	bl	8000dac <voltage_to_current_mA>
 8000e8a:	ed87 0a01 	vstr	s0, [r7, #4]
    float percentage = ((current_ma - MIN_CURRENT_MA) / (MAX_CURRENT_MA - MIN_CURRENT_MA)) * 100.0f;
 8000e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e92:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000e96:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e9a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000e9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000f08 <main+0xbc>
 8000ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eaa:	edc7 7a00 	vstr	s15, [r7]

    sprintf(writeValue, "ADC:%4u | V:%.2fmV | I:%.2fmA | %%:%.1f\r\n", raw_value, voltage_mv, current_ma, percentage);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eb8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ebc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ec0:	edd7 5a00 	vldr	s11, [r7]
 8000ec4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000ec8:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ecc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ed0:	ed8d 7b00 	vstr	d7, [sp]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	490d      	ldr	r1, [pc, #52]	@ (8000f0c <main+0xc0>)
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <main+0xc4>)
 8000eda:	f009 fa8f 	bl	800a3fc <siprintf>
    serialPrint(writeValue);
 8000ede:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <main+0xc4>)
 8000ee0:	f7ff ff9e 	bl	8000e20 <serialPrint>
    serialPrint("---\r\n");
 8000ee4:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <main+0xc8>)
 8000ee6:	f7ff ff9b 	bl	8000e20 <serialPrint>

    HAL_Delay(1000);
 8000eea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eee:	f000 fd6d 	bl	80019cc <HAL_Delay>

    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);  // LED AZUL - Loop ativo
 8000ef2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <main+0xcc>)
 8000ef8:	f003 fb0f 	bl	800451a <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000efc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f00:	f000 fd64 	bl	80019cc <HAL_Delay>
  {
 8000f04:	bf00      	nop
 8000f06:	e7b2      	b.n	8000e6e <main+0x22>
 8000f08:	42c80000 	.word	0x42c80000
 8000f0c:	0800db34 	.word	0x0800db34
 8000f10:	240001f4 	.word	0x240001f4
 8000f14:	0800db60 	.word	0x0800db60
 8000f18:	58020400 	.word	0x58020400

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b09c      	sub	sp, #112	@ 0x70
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	224c      	movs	r2, #76	@ 0x4c
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f009 facb 	bl	800a4c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 fac5 	bl	800a4c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f003 fb07 	bl	8004550 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <SystemClock_Config+0xf0>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	4a30      	ldr	r2, [pc, #192]	@ (800100c <SystemClock_Config+0xf0>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f52:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <SystemClock_Config+0xf0>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <SystemClock_Config+0xf4>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f64:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <SystemClock_Config+0xf4>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <SystemClock_Config+0xf4>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f78:	bf00      	nop
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <SystemClock_Config+0xf4>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f86:	d1f8      	bne.n	8000f7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f90:	2340      	movs	r3, #64	@ 0x40
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 faff 	bl	80045c4 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fcc:	f000 f84e 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	233f      	movs	r3, #63	@ 0x3f
 8000fd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe4:	2340      	movs	r3, #64	@ 0x40
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 ff3f 	bl	8004e78 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001000:	f000 f834 	bl	800106c <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3770      	adds	r7, #112	@ 0x70
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	58000400 	.word	0x58000400
 8001010:	58024800 	.word	0x58024800

08001014 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001026:	f000 fe11 	bl	8001c4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800102e:	2300      	movs	r3, #0
 8001030:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001036:	231f      	movs	r3, #31
 8001038:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800103a:	2387      	movs	r3, #135	@ 0x87
 800103c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800103e:	2300      	movs	r3, #0
 8001040:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001042:	2300      	movs	r3, #0
 8001044:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001046:	2301      	movs	r3, #1
 8001048:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800104a:	2301      	movs	r3, #1
 800104c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001056:	463b      	mov	r3, r7
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fe2f 	bl	8001cbc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800105e:	2004      	movs	r0, #4
 8001060:	f000 fe0c 	bl	8001c7c <HAL_MPU_Enable>

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <MX_SPI1_Init+0xa4>)
 800107e:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <MX_SPI1_Init+0xa8>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_SPI1_Init+0xa4>)
 8001084:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b24      	ldr	r3, [pc, #144]	@ (800111c <MX_SPI1_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_SPI1_Init+0xa4>)
 8001092:	2203      	movs	r2, #3
 8001094:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_SPI1_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_SPI1_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_SPI1_Init+0xa4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_SPI1_Init+0xa4>)
 8001104:	2200      	movs	r2, #0
 8001106:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <MX_SPI1_Init+0xa4>)
 800110a:	f006 f86d 	bl	80071e8 <HAL_SPI_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001114:	f7ff ffaa 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	24000274 	.word	0x24000274
 8001120:	40013000 	.word	0x40013000

08001124 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0bc      	sub	sp, #240	@ 0xf0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	22c0      	movs	r2, #192	@ 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f009 f9be 	bl	800a4c6 <memset>
  if(spiHandle->Instance==SPI1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a38      	ldr	r2, [pc, #224]	@ (8001230 <HAL_SPI_MspInit+0x10c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d168      	bne.n	8001226 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001154:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001160:	2300      	movs	r3, #0
 8001162:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fa11 	bl	8005590 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001174:	f7ff ff7a 	bl	800106c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 800117a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800117e:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001184:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 800118a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800118e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	4a25      	ldr	r2, [pc, #148]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_SPI_MspInit+0x110>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011d2:	2360      	movs	r3, #96	@ 0x60
 80011d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ea:	2305      	movs	r3, #5
 80011ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011f4:	4619      	mov	r1, r3
 80011f6:	4810      	ldr	r0, [pc, #64]	@ (8001238 <HAL_SPI_MspInit+0x114>)
 80011f8:	f002 ffc6 	bl	8004188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011fc:	2320      	movs	r3, #32
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001214:	2305      	movs	r3, #5
 8001216:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800121e:	4619      	mov	r1, r3
 8001220:	4806      	ldr	r0, [pc, #24]	@ (800123c <HAL_SPI_MspInit+0x118>)
 8001222:	f002 ffb1 	bl	8004188 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001226:	bf00      	nop
 8001228:	37f0      	adds	r7, #240	@ 0xf0
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40013000 	.word	0x40013000
 8001234:	58024400 	.word	0x58024400
 8001238:	58020000 	.word	0x58020000
 800123c:	58020400 	.word	0x58020400

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_MspInit+0x30>)
 8001248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <HAL_MspInit+0x30>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_MspInit+0x30>)
 8001258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	58024400 	.word	0x58024400

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 fb5f 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <DMA1_Stream0_IRQHandler+0x10>)
 80012da:	f001 fdef 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000394 	.word	0x24000394

080012e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <DMA1_Stream1_IRQHandler+0x10>)
 80012ee:	f001 fde5 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400040c 	.word	0x2400040c

080012fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <USART3_IRQHandler+0x10>)
 8001302:	f006 fca1 	bl	8007c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000300 	.word	0x24000300

08001310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return 1;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_kill>:

int _kill(int pid, int sig)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800132a:	f009 f91f 	bl	800a56c <__errno>
 800132e:	4603      	mov	r3, r0
 8001330:	2216      	movs	r2, #22
 8001332:	601a      	str	r2, [r3, #0]
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_exit>:

void _exit (int status)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffe7 	bl	8001320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001352:	bf00      	nop
 8001354:	e7fd      	b.n	8001352 <_exit+0x12>

08001356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e00a      	b.n	800137e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001368:	f3af 8000 	nop.w
 800136c:	4601      	mov	r1, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	b2ca      	uxtb	r2, r1
 8001376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbf0      	blt.n	8001368 <_read+0x12>
  }

  return len;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e009      	b.n	80013b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf1      	blt.n	80013a2 <_write+0x12>
  }
  return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_close>:

int _close(int file)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f0:	605a      	str	r2, [r3, #4]
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_isatty>:

int _isatty(int file)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	@ (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f009 f884 	bl	800a56c <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	24080000 	.word	0x24080000
 8001490:	00000400 	.word	0x00000400
 8001494:	240002fc 	.word	0x240002fc
 8001498:	240005d8 	.word	0x240005d8

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014a0:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <SystemInit+0x114>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a6:	4a42      	ldr	r2, [pc, #264]	@ (80015b0 <SystemInit+0x114>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b0:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <SystemInit+0x118>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	2b06      	cmp	r3, #6
 80014ba:	d807      	bhi.n	80014cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014bc:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <SystemInit+0x118>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 030f 	bic.w	r3, r3, #15
 80014c4:	4a3b      	ldr	r2, [pc, #236]	@ (80015b4 <SystemInit+0x118>)
 80014c6:	f043 0307 	orr.w	r3, r3, #7
 80014ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014cc:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <SystemInit+0x11c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a39      	ldr	r2, [pc, #228]	@ (80015b8 <SystemInit+0x11c>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d8:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <SystemInit+0x11c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014de:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <SystemInit+0x11c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4935      	ldr	r1, [pc, #212]	@ (80015b8 <SystemInit+0x11c>)
 80014e4:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <SystemInit+0x120>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ea:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <SystemInit+0x118>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f6:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <SystemInit+0x118>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 030f 	bic.w	r3, r3, #15
 80014fe:	4a2d      	ldr	r2, [pc, #180]	@ (80015b4 <SystemInit+0x118>)
 8001500:	f043 0307 	orr.w	r3, r3, #7
 8001504:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <SystemInit+0x11c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <SystemInit+0x11c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001512:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <SystemInit+0x11c>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <SystemInit+0x11c>)
 800151a:	4a29      	ldr	r2, [pc, #164]	@ (80015c0 <SystemInit+0x124>)
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <SystemInit+0x11c>)
 8001520:	4a28      	ldr	r2, [pc, #160]	@ (80015c4 <SystemInit+0x128>)
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <SystemInit+0x11c>)
 8001526:	4a28      	ldr	r2, [pc, #160]	@ (80015c8 <SystemInit+0x12c>)
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <SystemInit+0x11c>)
 800152c:	2200      	movs	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <SystemInit+0x11c>)
 8001532:	4a25      	ldr	r2, [pc, #148]	@ (80015c8 <SystemInit+0x12c>)
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <SystemInit+0x11c>)
 8001538:	2200      	movs	r2, #0
 800153a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <SystemInit+0x11c>)
 800153e:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <SystemInit+0x12c>)
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <SystemInit+0x11c>)
 8001544:	2200      	movs	r2, #0
 8001546:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <SystemInit+0x11c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <SystemInit+0x11c>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001552:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <SystemInit+0x11c>)
 8001556:	2200      	movs	r2, #0
 8001558:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <SystemInit+0x130>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <SystemInit+0x134>)
 8001560:	4013      	ands	r3, r2
 8001562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001566:	d202      	bcs.n	800156e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <SystemInit+0x138>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <SystemInit+0x11c>)
 8001570:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d113      	bne.n	80015a4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <SystemInit+0x11c>)
 800157e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001582:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <SystemInit+0x11c>)
 8001584:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001588:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <SystemInit+0x13c>)
 800158e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001592:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <SystemInit+0x11c>)
 8001596:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800159a:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <SystemInit+0x11c>)
 800159c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	52002000 	.word	0x52002000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c0:	02020200 	.word	0x02020200
 80015c4:	01ff0000 	.word	0x01ff0000
 80015c8:	01010280 	.word	0x01010280
 80015cc:	5c001000 	.word	0x5c001000
 80015d0:	ffff0000 	.word	0xffff0000
 80015d4:	51008108 	.word	0x51008108
 80015d8:	52004000 	.word	0x52004000

080015dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <ExitRun0Mode+0x2c>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <ExitRun0Mode+0x2c>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80015ec:	bf00      	nop
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <ExitRun0Mode+0x2c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f9      	beq.n	80015ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	58024800 	.word	0x58024800

0800160c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001612:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <MX_USART3_UART_Init+0x94>)
 8001614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001654:	4811      	ldr	r0, [pc, #68]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001656:	f006 fa18 	bl	8007a8a <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001660:	f7ff fd04 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001668:	f007 ff00 	bl	800946c <HAL_UARTEx_SetTxFifoThreshold>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001672:	f7ff fcfb 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800167a:	f007 ff35 	bl	80094e8 <HAL_UARTEx_SetRxFifoThreshold>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001684:	f7ff fcf2 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800168a:	f007 feb6 	bl	80093fa <HAL_UARTEx_DisableFifoMode>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001694:	f7ff fcea 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000300 	.word	0x24000300
 80016a0:	40004800 	.word	0x40004800

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ba      	sub	sp, #232	@ 0xe8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	22c0      	movs	r2, #192	@ 0xc0
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f008 fefe 	bl	800a4c6 <memset>
  if(uartHandle->Instance==USART3)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a59      	ldr	r2, [pc, #356]	@ (8001834 <HAL_UART_MspInit+0x190>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f040 80aa 	bne.w	800182a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016d6:	f04f 0202 	mov.w	r2, #2
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 ff4f 	bl	8005590 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80016f8:	f7ff fcb8 	bl	800106c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001838 <HAL_UART_MspInit+0x194>)
 80016fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001702:	4a4d      	ldr	r2, [pc, #308]	@ (8001838 <HAL_UART_MspInit+0x194>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800170c:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <HAL_UART_MspInit+0x194>)
 800170e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_UART_MspInit+0x194>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	4a45      	ldr	r2, [pc, #276]	@ (8001838 <HAL_UART_MspInit+0x194>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800172a:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <HAL_UART_MspInit+0x194>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001738:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800173c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001752:	2307      	movs	r3, #7
 8001754:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800175c:	4619      	mov	r1, r3
 800175e:	4837      	ldr	r0, [pc, #220]	@ (800183c <HAL_UART_MspInit+0x198>)
 8001760:	f002 fd12 	bl	8004188 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001764:	4b36      	ldr	r3, [pc, #216]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 8001766:	4a37      	ldr	r2, [pc, #220]	@ (8001844 <HAL_UART_MspInit+0x1a0>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800176a:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 800176c:	222d      	movs	r2, #45	@ 0x2d
 800176e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001770:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001776:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800177c:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 800177e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001782:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001784:	4b2e      	ldr	r3, [pc, #184]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017a2:	4827      	ldr	r0, [pc, #156]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 80017a4:	f000 faca 	bl	8001d3c <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80017ae:	f7ff fc5d 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a22      	ldr	r2, [pc, #136]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 80017b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017ba:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <HAL_UART_MspInit+0x19c>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017c2:	4a22      	ldr	r2, [pc, #136]	@ (800184c <HAL_UART_MspInit+0x1a8>)
 80017c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017c8:	222e      	movs	r2, #46	@ 0x2e
 80017ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017ce:	2240      	movs	r2, #64	@ 0x40
 80017d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 8001800:	f000 fa9c 	bl	8001d3c <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800180a:	f7ff fc2f 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 8001812:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001814:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <HAL_UART_MspInit+0x1a4>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2027      	movs	r0, #39	@ 0x27
 8001820:	f000 f9df 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001824:	2027      	movs	r0, #39	@ 0x27
 8001826:	f000 f9f6 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	37e8      	adds	r7, #232	@ 0xe8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40004800 	.word	0x40004800
 8001838:	58024400 	.word	0x58024400
 800183c:	58020c00 	.word	0x58020c00
 8001840:	24000394 	.word	0x24000394
 8001844:	40020010 	.word	0x40020010
 8001848:	2400040c 	.word	0x2400040c
 800184c:	40020028 	.word	0x40020028

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800188c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001854:	f7ff fec2 	bl	80015dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001858:	f7ff fe20 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	@ (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f008 fe79 	bl	800a578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7ff fae1 	bl	8000e4c <main>
  bx  lr
 800188a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001890:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001894:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001898:	0800dfe4 	.word	0x0800dfe4
  ldr r2, =_sbss
 800189c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80018a0:	240005d4 	.word	0x240005d4

080018a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC3_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f000 f98c 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018b4:	f003 fc96 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_Init+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	4913      	ldr	r1, [pc, #76]	@ (8001914 <HAL_Init+0x6c>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_Init+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	4a0e      	ldr	r2, [pc, #56]	@ (8001914 <HAL_Init+0x6c>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_Init+0x70>)
 80018ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018ec:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_Init+0x74>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f814 	bl	8001920 <HAL_InitTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e002      	b.n	8001908 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001902:	f7ff fc9d 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	58024400 	.word	0x58024400
 8001914:	0800db68 	.word	0x0800db68
 8001918:	24000004 	.word	0x24000004
 800191c:	24000000 	.word	0x24000000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_InitTick+0x60>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e021      	b.n	8001978 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_InitTick+0x64>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_InitTick+0x60>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f971 	bl	8001c32 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f93b 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <HAL_InitTick+0x68>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2400000c 	.word	0x2400000c
 8001984:	24000000 	.word	0x24000000
 8001988:	24000008 	.word	0x24000008

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2400000c 	.word	0x2400000c
 80019b0:	24000484 	.word	0x24000484

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	24000484 	.word	0x24000484

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2400000c 	.word	0x2400000c

08001a14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetREVID+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	5c001000 	.word	0x5c001000

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	05fa0000 	.word	0x05fa0000

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	@ (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	@ (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	@ (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff8e 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff29 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff40 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff90 	bl	8001b20 <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5f 	bl	8001acc <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff33 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa4 	bl	8001b88 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c50:	f3bf 8f5f 	dmb	sy
}
 8001c54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_MPU_Disable+0x28>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <HAL_MPU_Disable+0x28>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_MPU_Disable+0x2c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	e000ed90 	.word	0xe000ed90

08001c7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c84:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb4 <HAL_MPU_Enable+0x38>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_MPU_Enable+0x3c>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <HAL_MPU_Enable+0x3c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9a:	f3bf 8f4f 	dsb	sy
}
 8001c9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ca0:	f3bf 8f6f 	isb	sy
}
 8001ca4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed90 	.word	0xe000ed90
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	785a      	ldrb	r2, [r3, #1]
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_MPU_ConfigRegion+0x7c>)
 8001cca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <HAL_MPU_ConfigRegion+0x7c>)
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	@ (8001d38 <HAL_MPU_ConfigRegion+0x7c>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cd8:	4a17      	ldr	r2, [pc, #92]	@ (8001d38 <HAL_MPU_ConfigRegion+0x7c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b1b      	ldrb	r3, [r3, #12]
 8001ce4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7adb      	ldrb	r3, [r3, #11]
 8001cea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7a9b      	ldrb	r3, [r3, #10]
 8001cf2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7b5b      	ldrb	r3, [r3, #13]
 8001cfa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7b9b      	ldrb	r3, [r3, #14]
 8001d02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7bdb      	ldrb	r3, [r3, #15]
 8001d0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7a5b      	ldrb	r3, [r3, #9]
 8001d12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7a1b      	ldrb	r3, [r3, #8]
 8001d1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d28:	6113      	str	r3, [r2, #16]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed90 	.word	0xe000ed90

08001d3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff fe36 	bl	80019b4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e316      	b.n	8002382 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a66      	ldr	r2, [pc, #408]	@ (8001ef4 <HAL_DMA_Init+0x1b8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d04a      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a65      	ldr	r2, [pc, #404]	@ (8001ef8 <HAL_DMA_Init+0x1bc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d045      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a63      	ldr	r2, [pc, #396]	@ (8001efc <HAL_DMA_Init+0x1c0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d040      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a62      	ldr	r2, [pc, #392]	@ (8001f00 <HAL_DMA_Init+0x1c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d03b      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a60      	ldr	r2, [pc, #384]	@ (8001f04 <HAL_DMA_Init+0x1c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d036      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f08 <HAL_DMA_Init+0x1cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d031      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a5d      	ldr	r2, [pc, #372]	@ (8001f0c <HAL_DMA_Init+0x1d0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02c      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001f10 <HAL_DMA_Init+0x1d4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d027      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a5a      	ldr	r2, [pc, #360]	@ (8001f14 <HAL_DMA_Init+0x1d8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a59      	ldr	r2, [pc, #356]	@ (8001f18 <HAL_DMA_Init+0x1dc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01d      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <HAL_DMA_Init+0x1e0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a56      	ldr	r2, [pc, #344]	@ (8001f20 <HAL_DMA_Init+0x1e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a54      	ldr	r2, [pc, #336]	@ (8001f24 <HAL_DMA_Init+0x1e8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a53      	ldr	r2, [pc, #332]	@ (8001f28 <HAL_DMA_Init+0x1ec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a51      	ldr	r2, [pc, #324]	@ (8001f2c <HAL_DMA_Init+0x1f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_Init+0xb8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a50      	ldr	r2, [pc, #320]	@ (8001f30 <HAL_DMA_Init+0x1f4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_DMA_Init+0xbc>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_DMA_Init+0xbe>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 813b 	beq.w	8002076 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a37      	ldr	r2, [pc, #220]	@ (8001ef4 <HAL_DMA_Init+0x1b8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d04a      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <HAL_DMA_Init+0x1bc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d045      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a34      	ldr	r2, [pc, #208]	@ (8001efc <HAL_DMA_Init+0x1c0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d040      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a33      	ldr	r2, [pc, #204]	@ (8001f00 <HAL_DMA_Init+0x1c4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d03b      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a31      	ldr	r2, [pc, #196]	@ (8001f04 <HAL_DMA_Init+0x1c8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d036      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a30      	ldr	r2, [pc, #192]	@ (8001f08 <HAL_DMA_Init+0x1cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d031      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2e      	ldr	r2, [pc, #184]	@ (8001f0c <HAL_DMA_Init+0x1d0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02c      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f10 <HAL_DMA_Init+0x1d4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d027      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a2b      	ldr	r2, [pc, #172]	@ (8001f14 <HAL_DMA_Init+0x1d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d022      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <HAL_DMA_Init+0x1dc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d01d      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <HAL_DMA_Init+0x1e0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d018      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a27      	ldr	r2, [pc, #156]	@ (8001f20 <HAL_DMA_Init+0x1e4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a25      	ldr	r2, [pc, #148]	@ (8001f24 <HAL_DMA_Init+0x1e8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00e      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a24      	ldr	r2, [pc, #144]	@ (8001f28 <HAL_DMA_Init+0x1ec>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a22      	ldr	r2, [pc, #136]	@ (8001f2c <HAL_DMA_Init+0x1f0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_DMA_Init+0x174>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <HAL_DMA_Init+0x1f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d108      	bne.n	8001ec2 <HAL_DMA_Init+0x186>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e007      	b.n	8001ed2 <HAL_DMA_Init+0x196>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ed2:	e02f      	b.n	8001f34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed4:	f7ff fd6e 	bl	80019b4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d928      	bls.n	8001f34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e246      	b.n	8002382 <HAL_DMA_Init+0x646>
 8001ef4:	40020010 	.word	0x40020010
 8001ef8:	40020028 	.word	0x40020028
 8001efc:	40020040 	.word	0x40020040
 8001f00:	40020058 	.word	0x40020058
 8001f04:	40020070 	.word	0x40020070
 8001f08:	40020088 	.word	0x40020088
 8001f0c:	400200a0 	.word	0x400200a0
 8001f10:	400200b8 	.word	0x400200b8
 8001f14:	40020410 	.word	0x40020410
 8001f18:	40020428 	.word	0x40020428
 8001f1c:	40020440 	.word	0x40020440
 8001f20:	40020458 	.word	0x40020458
 8001f24:	40020470 	.word	0x40020470
 8001f28:	40020488 	.word	0x40020488
 8001f2c:	400204a0 	.word	0x400204a0
 8001f30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1c8      	bne.n	8001ed4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4b83      	ldr	r3, [pc, #524]	@ (800215c <HAL_DMA_Init+0x420>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d107      	bne.n	8001f98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	4313      	orrs	r3, r2
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f98:	4b71      	ldr	r3, [pc, #452]	@ (8002160 <HAL_DMA_Init+0x424>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b71      	ldr	r3, [pc, #452]	@ (8002164 <HAL_DMA_Init+0x428>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fa4:	d328      	bcc.n	8001ff8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b28      	cmp	r3, #40	@ 0x28
 8001fac:	d903      	bls.n	8001fb6 <HAL_DMA_Init+0x27a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fb4:	d917      	bls.n	8001fe6 <HAL_DMA_Init+0x2aa>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fbc:	d903      	bls.n	8001fc6 <HAL_DMA_Init+0x28a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b42      	cmp	r3, #66	@ 0x42
 8001fc4:	d90f      	bls.n	8001fe6 <HAL_DMA_Init+0x2aa>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b46      	cmp	r3, #70	@ 0x46
 8001fcc:	d903      	bls.n	8001fd6 <HAL_DMA_Init+0x29a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b48      	cmp	r3, #72	@ 0x48
 8001fd4:	d907      	bls.n	8001fe6 <HAL_DMA_Init+0x2aa>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b4e      	cmp	r3, #78	@ 0x4e
 8001fdc:	d905      	bls.n	8001fea <HAL_DMA_Init+0x2ae>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b52      	cmp	r3, #82	@ 0x52
 8001fe4:	d801      	bhi.n	8001fea <HAL_DMA_Init+0x2ae>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_DMA_Init+0x2b0>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	2b04      	cmp	r3, #4
 8002020:	d117      	bne.n	8002052 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f001 ff1d 	bl	8003e74 <DMA_CheckFifoParam>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2240      	movs	r2, #64	@ 0x40
 8002044:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e197      	b.n	8002382 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 fe58 	bl	8003d10 <DMA_CalcBaseAndBitshift>
 8002060:	4603      	mov	r3, r0
 8002062:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	223f      	movs	r2, #63	@ 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e0cd      	b.n	8002212 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3b      	ldr	r2, [pc, #236]	@ (8002168 <HAL_DMA_Init+0x42c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a39      	ldr	r2, [pc, #228]	@ (800216c <HAL_DMA_Init+0x430>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a38      	ldr	r2, [pc, #224]	@ (8002170 <HAL_DMA_Init+0x434>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a36      	ldr	r2, [pc, #216]	@ (8002174 <HAL_DMA_Init+0x438>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a35      	ldr	r2, [pc, #212]	@ (8002178 <HAL_DMA_Init+0x43c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a33      	ldr	r2, [pc, #204]	@ (800217c <HAL_DMA_Init+0x440>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a32      	ldr	r2, [pc, #200]	@ (8002180 <HAL_DMA_Init+0x444>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_Init+0x38a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a30      	ldr	r2, [pc, #192]	@ (8002184 <HAL_DMA_Init+0x448>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Init+0x38e>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_DMA_Init+0x390>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8097 	beq.w	8002200 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a24      	ldr	r2, [pc, #144]	@ (8002168 <HAL_DMA_Init+0x42c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d021      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a22      	ldr	r2, [pc, #136]	@ (800216c <HAL_DMA_Init+0x430>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01c      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <HAL_DMA_Init+0x434>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d017      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <HAL_DMA_Init+0x438>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d012      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002178 <HAL_DMA_Init+0x43c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00d      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_DMA_Init+0x440>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_DMA_Init+0x444>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <HAL_DMA_Init+0x3e4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_DMA_Init+0x448>)
 800211e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <HAL_DMA_Init+0x44c>)
 800213c:	4013      	ands	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d021      	beq.n	800218c <HAL_DMA_Init+0x450>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b80      	cmp	r3, #128	@ 0x80
 800214e:	d102      	bne.n	8002156 <HAL_DMA_Init+0x41a>
 8002150:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002154:	e01b      	b.n	800218e <HAL_DMA_Init+0x452>
 8002156:	2300      	movs	r3, #0
 8002158:	e019      	b.n	800218e <HAL_DMA_Init+0x452>
 800215a:	bf00      	nop
 800215c:	fe10803f 	.word	0xfe10803f
 8002160:	5c001000 	.word	0x5c001000
 8002164:	ffff0000 	.word	0xffff0000
 8002168:	58025408 	.word	0x58025408
 800216c:	5802541c 	.word	0x5802541c
 8002170:	58025430 	.word	0x58025430
 8002174:	58025444 	.word	0x58025444
 8002178:	58025458 	.word	0x58025458
 800217c:	5802546c 	.word	0x5802546c
 8002180:	58025480 	.word	0x58025480
 8002184:	58025494 	.word	0x58025494
 8002188:	fffe000f 	.word	0xfffe000f
 800218c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800219c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b6e      	ldr	r3, [pc, #440]	@ (800238c <HAL_DMA_Init+0x650>)
 80021d4:	4413      	add	r3, r2
 80021d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002390 <HAL_DMA_Init+0x654>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	009a      	lsls	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f001 fd93 	bl	8003d10 <DMA_CalcBaseAndBitshift>
 80021ea:	4603      	mov	r3, r0
 80021ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	409a      	lsls	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e008      	b.n	8002212 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2240      	movs	r2, #64	@ 0x40
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0b7      	b.n	8002382 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5f      	ldr	r2, [pc, #380]	@ (8002394 <HAL_DMA_Init+0x658>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d072      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5d      	ldr	r2, [pc, #372]	@ (8002398 <HAL_DMA_Init+0x65c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d06d      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5c      	ldr	r2, [pc, #368]	@ (800239c <HAL_DMA_Init+0x660>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d068      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5a      	ldr	r2, [pc, #360]	@ (80023a0 <HAL_DMA_Init+0x664>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d063      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a59      	ldr	r2, [pc, #356]	@ (80023a4 <HAL_DMA_Init+0x668>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d05e      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a57      	ldr	r2, [pc, #348]	@ (80023a8 <HAL_DMA_Init+0x66c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d059      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a56      	ldr	r2, [pc, #344]	@ (80023ac <HAL_DMA_Init+0x670>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d054      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a54      	ldr	r2, [pc, #336]	@ (80023b0 <HAL_DMA_Init+0x674>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04f      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a53      	ldr	r2, [pc, #332]	@ (80023b4 <HAL_DMA_Init+0x678>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04a      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a51      	ldr	r2, [pc, #324]	@ (80023b8 <HAL_DMA_Init+0x67c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d045      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a50      	ldr	r2, [pc, #320]	@ (80023bc <HAL_DMA_Init+0x680>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d040      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4e      	ldr	r2, [pc, #312]	@ (80023c0 <HAL_DMA_Init+0x684>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d03b      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4d      	ldr	r2, [pc, #308]	@ (80023c4 <HAL_DMA_Init+0x688>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d036      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4b      	ldr	r2, [pc, #300]	@ (80023c8 <HAL_DMA_Init+0x68c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4a      	ldr	r2, [pc, #296]	@ (80023cc <HAL_DMA_Init+0x690>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d02c      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a48      	ldr	r2, [pc, #288]	@ (80023d0 <HAL_DMA_Init+0x694>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a47      	ldr	r2, [pc, #284]	@ (80023d4 <HAL_DMA_Init+0x698>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a45      	ldr	r2, [pc, #276]	@ (80023d8 <HAL_DMA_Init+0x69c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a44      	ldr	r2, [pc, #272]	@ (80023dc <HAL_DMA_Init+0x6a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a42      	ldr	r2, [pc, #264]	@ (80023e0 <HAL_DMA_Init+0x6a4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a41      	ldr	r2, [pc, #260]	@ (80023e4 <HAL_DMA_Init+0x6a8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3f      	ldr	r2, [pc, #252]	@ (80023e8 <HAL_DMA_Init+0x6ac>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a3e      	ldr	r2, [pc, #248]	@ (80023ec <HAL_DMA_Init+0x6b0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_Init+0x5c6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3c      	ldr	r2, [pc, #240]	@ (80023f0 <HAL_DMA_Init+0x6b4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Init+0x5ca>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_DMA_Init+0x5cc>
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d032      	beq.n	8002372 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 fe2d 	bl	8003f6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b80      	cmp	r3, #128	@ 0x80
 8002318:	d102      	bne.n	8002320 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002334:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_DMA_Init+0x624>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b08      	cmp	r3, #8
 8002344:	d80c      	bhi.n	8002360 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 feaa 	bl	80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e008      	b.n	8002372 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	a7fdabf8 	.word	0xa7fdabf8
 8002390:	cccccccd 	.word	0xcccccccd
 8002394:	40020010 	.word	0x40020010
 8002398:	40020028 	.word	0x40020028
 800239c:	40020040 	.word	0x40020040
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40020070 	.word	0x40020070
 80023a8:	40020088 	.word	0x40020088
 80023ac:	400200a0 	.word	0x400200a0
 80023b0:	400200b8 	.word	0x400200b8
 80023b4:	40020410 	.word	0x40020410
 80023b8:	40020428 	.word	0x40020428
 80023bc:	40020440 	.word	0x40020440
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40020470 	.word	0x40020470
 80023c8:	40020488 	.word	0x40020488
 80023cc:	400204a0 	.word	0x400204a0
 80023d0:	400204b8 	.word	0x400204b8
 80023d4:	58025408 	.word	0x58025408
 80023d8:	5802541c 	.word	0x5802541c
 80023dc:	58025430 	.word	0x58025430
 80023e0:	58025444 	.word	0x58025444
 80023e4:	58025458 	.word	0x58025458
 80023e8:	5802546c 	.word	0x5802546c
 80023ec:	58025480 	.word	0x58025480
 80023f0:	58025494 	.word	0x58025494

080023f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fada 	bl	80019b4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e2dc      	b.n	80029c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d008      	beq.n	800242a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2280      	movs	r2, #128	@ 0x80
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e2cd      	b.n	80029c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a76      	ldr	r2, [pc, #472]	@ (8002608 <HAL_DMA_Abort+0x214>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d04a      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a74      	ldr	r2, [pc, #464]	@ (800260c <HAL_DMA_Abort+0x218>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d045      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a73      	ldr	r2, [pc, #460]	@ (8002610 <HAL_DMA_Abort+0x21c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d040      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a71      	ldr	r2, [pc, #452]	@ (8002614 <HAL_DMA_Abort+0x220>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d03b      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a70      	ldr	r2, [pc, #448]	@ (8002618 <HAL_DMA_Abort+0x224>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d036      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6e      	ldr	r2, [pc, #440]	@ (800261c <HAL_DMA_Abort+0x228>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d031      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6d      	ldr	r2, [pc, #436]	@ (8002620 <HAL_DMA_Abort+0x22c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d02c      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6b      	ldr	r2, [pc, #428]	@ (8002624 <HAL_DMA_Abort+0x230>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d027      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6a      	ldr	r2, [pc, #424]	@ (8002628 <HAL_DMA_Abort+0x234>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a68      	ldr	r2, [pc, #416]	@ (800262c <HAL_DMA_Abort+0x238>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01d      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a67      	ldr	r2, [pc, #412]	@ (8002630 <HAL_DMA_Abort+0x23c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d018      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	@ (8002634 <HAL_DMA_Abort+0x240>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a64      	ldr	r2, [pc, #400]	@ (8002638 <HAL_DMA_Abort+0x244>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00e      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a62      	ldr	r2, [pc, #392]	@ (800263c <HAL_DMA_Abort+0x248>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d009      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a61      	ldr	r2, [pc, #388]	@ (8002640 <HAL_DMA_Abort+0x24c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d004      	beq.n	80024ca <HAL_DMA_Abort+0xd6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002644 <HAL_DMA_Abort+0x250>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Abort+0xda>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_Abort+0xdc>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 021e 	bic.w	r2, r2, #30
 80024e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e00a      	b.n	8002512 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020e 	bic.w	r2, r2, #14
 800250a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3c      	ldr	r2, [pc, #240]	@ (8002608 <HAL_DMA_Abort+0x214>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d072      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a3a      	ldr	r2, [pc, #232]	@ (800260c <HAL_DMA_Abort+0x218>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d06d      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	@ (8002610 <HAL_DMA_Abort+0x21c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d068      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a37      	ldr	r2, [pc, #220]	@ (8002614 <HAL_DMA_Abort+0x220>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d063      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a36      	ldr	r2, [pc, #216]	@ (8002618 <HAL_DMA_Abort+0x224>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d05e      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a34      	ldr	r2, [pc, #208]	@ (800261c <HAL_DMA_Abort+0x228>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d059      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	@ (8002620 <HAL_DMA_Abort+0x22c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d054      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a31      	ldr	r2, [pc, #196]	@ (8002624 <HAL_DMA_Abort+0x230>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04f      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a30      	ldr	r2, [pc, #192]	@ (8002628 <HAL_DMA_Abort+0x234>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04a      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2e      	ldr	r2, [pc, #184]	@ (800262c <HAL_DMA_Abort+0x238>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d045      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2d      	ldr	r2, [pc, #180]	@ (8002630 <HAL_DMA_Abort+0x23c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d040      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2b      	ldr	r2, [pc, #172]	@ (8002634 <HAL_DMA_Abort+0x240>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d03b      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <HAL_DMA_Abort+0x244>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d036      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	@ (800263c <HAL_DMA_Abort+0x248>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d031      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a27      	ldr	r2, [pc, #156]	@ (8002640 <HAL_DMA_Abort+0x24c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d02c      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a25      	ldr	r2, [pc, #148]	@ (8002644 <HAL_DMA_Abort+0x250>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d027      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a24      	ldr	r2, [pc, #144]	@ (8002648 <HAL_DMA_Abort+0x254>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a22      	ldr	r2, [pc, #136]	@ (800264c <HAL_DMA_Abort+0x258>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01d      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a21      	ldr	r2, [pc, #132]	@ (8002650 <HAL_DMA_Abort+0x25c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d018      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002654 <HAL_DMA_Abort+0x260>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1e      	ldr	r2, [pc, #120]	@ (8002658 <HAL_DMA_Abort+0x264>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1c      	ldr	r2, [pc, #112]	@ (800265c <HAL_DMA_Abort+0x268>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002660 <HAL_DMA_Abort+0x26c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_DMA_Abort+0x20e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <HAL_DMA_Abort+0x270>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d132      	bne.n	8002668 <HAL_DMA_Abort+0x274>
 8002602:	2301      	movs	r3, #1
 8002604:	e031      	b.n	800266a <HAL_DMA_Abort+0x276>
 8002606:	bf00      	nop
 8002608:	40020010 	.word	0x40020010
 800260c:	40020028 	.word	0x40020028
 8002610:	40020040 	.word	0x40020040
 8002614:	40020058 	.word	0x40020058
 8002618:	40020070 	.word	0x40020070
 800261c:	40020088 	.word	0x40020088
 8002620:	400200a0 	.word	0x400200a0
 8002624:	400200b8 	.word	0x400200b8
 8002628:	40020410 	.word	0x40020410
 800262c:	40020428 	.word	0x40020428
 8002630:	40020440 	.word	0x40020440
 8002634:	40020458 	.word	0x40020458
 8002638:	40020470 	.word	0x40020470
 800263c:	40020488 	.word	0x40020488
 8002640:	400204a0 	.word	0x400204a0
 8002644:	400204b8 	.word	0x400204b8
 8002648:	58025408 	.word	0x58025408
 800264c:	5802541c 	.word	0x5802541c
 8002650:	58025430 	.word	0x58025430
 8002654:	58025444 	.word	0x58025444
 8002658:	58025458 	.word	0x58025458
 800265c:	5802546c 	.word	0x5802546c
 8002660:	58025480 	.word	0x58025480
 8002664:	58025494 	.word	0x58025494
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800267c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6d      	ldr	r2, [pc, #436]	@ (8002838 <HAL_DMA_Abort+0x444>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d04a      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6b      	ldr	r2, [pc, #428]	@ (800283c <HAL_DMA_Abort+0x448>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d045      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6a      	ldr	r2, [pc, #424]	@ (8002840 <HAL_DMA_Abort+0x44c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d040      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a68      	ldr	r2, [pc, #416]	@ (8002844 <HAL_DMA_Abort+0x450>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d03b      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a67      	ldr	r2, [pc, #412]	@ (8002848 <HAL_DMA_Abort+0x454>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d036      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	@ (800284c <HAL_DMA_Abort+0x458>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d031      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a64      	ldr	r2, [pc, #400]	@ (8002850 <HAL_DMA_Abort+0x45c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d02c      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a62      	ldr	r2, [pc, #392]	@ (8002854 <HAL_DMA_Abort+0x460>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d027      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a61      	ldr	r2, [pc, #388]	@ (8002858 <HAL_DMA_Abort+0x464>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d022      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5f      	ldr	r2, [pc, #380]	@ (800285c <HAL_DMA_Abort+0x468>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01d      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002860 <HAL_DMA_Abort+0x46c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d018      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002864 <HAL_DMA_Abort+0x470>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002868 <HAL_DMA_Abort+0x474>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00e      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a59      	ldr	r2, [pc, #356]	@ (800286c <HAL_DMA_Abort+0x478>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a58      	ldr	r2, [pc, #352]	@ (8002870 <HAL_DMA_Abort+0x47c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_DMA_Abort+0x32a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a56      	ldr	r2, [pc, #344]	@ (8002874 <HAL_DMA_Abort+0x480>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <HAL_DMA_Abort+0x33c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e007      	b.n	8002740 <HAL_DMA_Abort+0x34c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002740:	e013      	b.n	800276a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002742:	f7ff f937 	bl	80019b4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b05      	cmp	r3, #5
 800274e:	d90c      	bls.n	800276a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e12d      	b.n	80029c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e5      	bne.n	8002742 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2f      	ldr	r2, [pc, #188]	@ (8002838 <HAL_DMA_Abort+0x444>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d04a      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_DMA_Abort+0x448>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d045      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <HAL_DMA_Abort+0x44c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d040      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a2a      	ldr	r2, [pc, #168]	@ (8002844 <HAL_DMA_Abort+0x450>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d03b      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <HAL_DMA_Abort+0x454>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d036      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a27      	ldr	r2, [pc, #156]	@ (800284c <HAL_DMA_Abort+0x458>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d031      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a26      	ldr	r2, [pc, #152]	@ (8002850 <HAL_DMA_Abort+0x45c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d02c      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a24      	ldr	r2, [pc, #144]	@ (8002854 <HAL_DMA_Abort+0x460>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d027      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a23      	ldr	r2, [pc, #140]	@ (8002858 <HAL_DMA_Abort+0x464>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a21      	ldr	r2, [pc, #132]	@ (800285c <HAL_DMA_Abort+0x468>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01d      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <HAL_DMA_Abort+0x46c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002864 <HAL_DMA_Abort+0x470>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002868 <HAL_DMA_Abort+0x474>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	@ (800286c <HAL_DMA_Abort+0x478>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <HAL_DMA_Abort+0x47c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_DMA_Abort+0x422>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_DMA_Abort+0x480>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_DMA_Abort+0x426>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_DMA_Abort+0x428>
 800281a:	2300      	movs	r3, #0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02b      	beq.n	8002878 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	223f      	movs	r2, #63	@ 0x3f
 8002830:	409a      	lsls	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	e02a      	b.n	800288e <HAL_DMA_Abort+0x49a>
 8002838:	40020010 	.word	0x40020010
 800283c:	40020028 	.word	0x40020028
 8002840:	40020040 	.word	0x40020040
 8002844:	40020058 	.word	0x40020058
 8002848:	40020070 	.word	0x40020070
 800284c:	40020088 	.word	0x40020088
 8002850:	400200a0 	.word	0x400200a0
 8002854:	400200b8 	.word	0x400200b8
 8002858:	40020410 	.word	0x40020410
 800285c:	40020428 	.word	0x40020428
 8002860:	40020440 	.word	0x40020440
 8002864:	40020458 	.word	0x40020458
 8002868:	40020470 	.word	0x40020470
 800286c:	40020488 	.word	0x40020488
 8002870:	400204a0 	.word	0x400204a0
 8002874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4f      	ldr	r2, [pc, #316]	@ (80029d0 <HAL_DMA_Abort+0x5dc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d072      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a4d      	ldr	r2, [pc, #308]	@ (80029d4 <HAL_DMA_Abort+0x5e0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d06d      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a4c      	ldr	r2, [pc, #304]	@ (80029d8 <HAL_DMA_Abort+0x5e4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d068      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	@ (80029dc <HAL_DMA_Abort+0x5e8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d063      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a49      	ldr	r2, [pc, #292]	@ (80029e0 <HAL_DMA_Abort+0x5ec>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a47      	ldr	r2, [pc, #284]	@ (80029e4 <HAL_DMA_Abort+0x5f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d059      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a46      	ldr	r2, [pc, #280]	@ (80029e8 <HAL_DMA_Abort+0x5f4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d054      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a44      	ldr	r2, [pc, #272]	@ (80029ec <HAL_DMA_Abort+0x5f8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04f      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a43      	ldr	r2, [pc, #268]	@ (80029f0 <HAL_DMA_Abort+0x5fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d04a      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a41      	ldr	r2, [pc, #260]	@ (80029f4 <HAL_DMA_Abort+0x600>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d045      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <HAL_DMA_Abort+0x604>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d040      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3e      	ldr	r2, [pc, #248]	@ (80029fc <HAL_DMA_Abort+0x608>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d03b      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a00 <HAL_DMA_Abort+0x60c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d036      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_DMA_Abort+0x610>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <HAL_DMA_Abort+0x614>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d02c      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <HAL_DMA_Abort+0x618>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d027      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <HAL_DMA_Abort+0x61c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a35      	ldr	r2, [pc, #212]	@ (8002a14 <HAL_DMA_Abort+0x620>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a34      	ldr	r2, [pc, #208]	@ (8002a18 <HAL_DMA_Abort+0x624>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a32      	ldr	r2, [pc, #200]	@ (8002a1c <HAL_DMA_Abort+0x628>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a31      	ldr	r2, [pc, #196]	@ (8002a20 <HAL_DMA_Abort+0x62c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2f      	ldr	r2, [pc, #188]	@ (8002a24 <HAL_DMA_Abort+0x630>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a28 <HAL_DMA_Abort+0x634>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Abort+0x58a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2c      	ldr	r2, [pc, #176]	@ (8002a2c <HAL_DMA_Abort+0x638>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Abort+0x58e>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DMA_Abort+0x590>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002990:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40020010 	.word	0x40020010
 80029d4:	40020028 	.word	0x40020028
 80029d8:	40020040 	.word	0x40020040
 80029dc:	40020058 	.word	0x40020058
 80029e0:	40020070 	.word	0x40020070
 80029e4:	40020088 	.word	0x40020088
 80029e8:	400200a0 	.word	0x400200a0
 80029ec:	400200b8 	.word	0x400200b8
 80029f0:	40020410 	.word	0x40020410
 80029f4:	40020428 	.word	0x40020428
 80029f8:	40020440 	.word	0x40020440
 80029fc:	40020458 	.word	0x40020458
 8002a00:	40020470 	.word	0x40020470
 8002a04:	40020488 	.word	0x40020488
 8002a08:	400204a0 	.word	0x400204a0
 8002a0c:	400204b8 	.word	0x400204b8
 8002a10:	58025408 	.word	0x58025408
 8002a14:	5802541c 	.word	0x5802541c
 8002a18:	58025430 	.word	0x58025430
 8002a1c:	58025444 	.word	0x58025444
 8002a20:	58025458 	.word	0x58025458
 8002a24:	5802546c 	.word	0x5802546c
 8002a28:	58025480 	.word	0x58025480
 8002a2c:	58025494 	.word	0x58025494

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e237      	b.n	8002eb2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e22c      	b.n	8002eb2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1a0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d04a      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d045      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a59      	ldr	r2, [pc, #356]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d040      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a58      	ldr	r2, [pc, #352]	@ (8002bdc <HAL_DMA_Abort_IT+0x1ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d03b      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a56      	ldr	r2, [pc, #344]	@ (8002be0 <HAL_DMA_Abort_IT+0x1b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d036      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a55      	ldr	r2, [pc, #340]	@ (8002be4 <HAL_DMA_Abort_IT+0x1b4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d031      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a53      	ldr	r2, [pc, #332]	@ (8002be8 <HAL_DMA_Abort_IT+0x1b8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02c      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a52      	ldr	r2, [pc, #328]	@ (8002bec <HAL_DMA_Abort_IT+0x1bc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d027      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a50      	ldr	r2, [pc, #320]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1c0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d022      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d01d      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1c8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4c      	ldr	r2, [pc, #304]	@ (8002bfc <HAL_DMA_Abort_IT+0x1cc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d013      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_DMA_Abort_IT+0x1d0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a49      	ldr	r2, [pc, #292]	@ (8002c04 <HAL_DMA_Abort_IT+0x1d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a47      	ldr	r2, [pc, #284]	@ (8002c08 <HAL_DMA_Abort_IT+0x1d8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a46      	ldr	r2, [pc, #280]	@ (8002c0c <HAL_DMA_Abort_IT+0x1dc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_DMA_Abort_IT+0xcc>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_DMA_Abort_IT+0xce>
 8002afc:	2300      	movs	r3, #0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8086 	beq.w	8002c10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1a0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d04a      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1a4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d045      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1a8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d040      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <HAL_DMA_Abort_IT+0x1ac>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d03b      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <HAL_DMA_Abort_IT+0x1b0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d036      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a28      	ldr	r2, [pc, #160]	@ (8002be4 <HAL_DMA_Abort_IT+0x1b4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a26      	ldr	r2, [pc, #152]	@ (8002be8 <HAL_DMA_Abort_IT+0x1b8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02c      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a25      	ldr	r2, [pc, #148]	@ (8002bec <HAL_DMA_Abort_IT+0x1bc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d027      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1c0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a22      	ldr	r2, [pc, #136]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1c4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01d      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a20      	ldr	r2, [pc, #128]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1c8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d018      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bfc <HAL_DMA_Abort_IT+0x1cc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <HAL_DMA_Abort_IT+0x1d0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <HAL_DMA_Abort_IT+0x1d4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c08 <HAL_DMA_Abort_IT+0x1d8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_Abort_IT+0x17c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a19      	ldr	r2, [pc, #100]	@ (8002c0c <HAL_DMA_Abort_IT+0x1dc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d108      	bne.n	8002bbe <HAL_DMA_Abort_IT+0x18e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e178      	b.n	8002eb0 <HAL_DMA_Abort_IT+0x480>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e16f      	b.n	8002eb0 <HAL_DMA_Abort_IT+0x480>
 8002bd0:	40020010 	.word	0x40020010
 8002bd4:	40020028 	.word	0x40020028
 8002bd8:	40020040 	.word	0x40020040
 8002bdc:	40020058 	.word	0x40020058
 8002be0:	40020070 	.word	0x40020070
 8002be4:	40020088 	.word	0x40020088
 8002be8:	400200a0 	.word	0x400200a0
 8002bec:	400200b8 	.word	0x400200b8
 8002bf0:	40020410 	.word	0x40020410
 8002bf4:	40020428 	.word	0x40020428
 8002bf8:	40020440 	.word	0x40020440
 8002bfc:	40020458 	.word	0x40020458
 8002c00:	40020470 	.word	0x40020470
 8002c04:	40020488 	.word	0x40020488
 8002c08:	400204a0 	.word	0x400204a0
 8002c0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 020e 	bic.w	r2, r2, #14
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6c      	ldr	r2, [pc, #432]	@ (8002dd8 <HAL_DMA_Abort_IT+0x3a8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04a      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6b      	ldr	r2, [pc, #428]	@ (8002ddc <HAL_DMA_Abort_IT+0x3ac>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d045      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a69      	ldr	r2, [pc, #420]	@ (8002de0 <HAL_DMA_Abort_IT+0x3b0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d040      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a68      	ldr	r2, [pc, #416]	@ (8002de4 <HAL_DMA_Abort_IT+0x3b4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d03b      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a66      	ldr	r2, [pc, #408]	@ (8002de8 <HAL_DMA_Abort_IT+0x3b8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d036      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a65      	ldr	r2, [pc, #404]	@ (8002dec <HAL_DMA_Abort_IT+0x3bc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d031      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a63      	ldr	r2, [pc, #396]	@ (8002df0 <HAL_DMA_Abort_IT+0x3c0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02c      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a62      	ldr	r2, [pc, #392]	@ (8002df4 <HAL_DMA_Abort_IT+0x3c4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d027      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a60      	ldr	r2, [pc, #384]	@ (8002df8 <HAL_DMA_Abort_IT+0x3c8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d022      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8002dfc <HAL_DMA_Abort_IT+0x3cc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d01d      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	@ (8002e00 <HAL_DMA_Abort_IT+0x3d0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5c      	ldr	r2, [pc, #368]	@ (8002e04 <HAL_DMA_Abort_IT+0x3d4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002e08 <HAL_DMA_Abort_IT+0x3d8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a59      	ldr	r2, [pc, #356]	@ (8002e0c <HAL_DMA_Abort_IT+0x3dc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a57      	ldr	r2, [pc, #348]	@ (8002e10 <HAL_DMA_Abort_IT+0x3e0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x290>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a56      	ldr	r2, [pc, #344]	@ (8002e14 <HAL_DMA_Abort_IT+0x3e4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <HAL_DMA_Abort_IT+0x2a2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e007      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x2b2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd8 <HAL_DMA_Abort_IT+0x3a8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d072      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ddc <HAL_DMA_Abort_IT+0x3ac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d06d      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a39      	ldr	r2, [pc, #228]	@ (8002de0 <HAL_DMA_Abort_IT+0x3b0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d068      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a37      	ldr	r2, [pc, #220]	@ (8002de4 <HAL_DMA_Abort_IT+0x3b4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d063      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a36      	ldr	r2, [pc, #216]	@ (8002de8 <HAL_DMA_Abort_IT+0x3b8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d05e      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a34      	ldr	r2, [pc, #208]	@ (8002dec <HAL_DMA_Abort_IT+0x3bc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d059      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a33      	ldr	r2, [pc, #204]	@ (8002df0 <HAL_DMA_Abort_IT+0x3c0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d054      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a31      	ldr	r2, [pc, #196]	@ (8002df4 <HAL_DMA_Abort_IT+0x3c4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d04f      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_DMA_Abort_IT+0x3c8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d04a      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2e      	ldr	r2, [pc, #184]	@ (8002dfc <HAL_DMA_Abort_IT+0x3cc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d045      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e00 <HAL_DMA_Abort_IT+0x3d0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d040      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2b      	ldr	r2, [pc, #172]	@ (8002e04 <HAL_DMA_Abort_IT+0x3d4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d03b      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e08 <HAL_DMA_Abort_IT+0x3d8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d036      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a28      	ldr	r2, [pc, #160]	@ (8002e0c <HAL_DMA_Abort_IT+0x3dc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a27      	ldr	r2, [pc, #156]	@ (8002e10 <HAL_DMA_Abort_IT+0x3e0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d02c      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <HAL_DMA_Abort_IT+0x3e4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d027      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <HAL_DMA_Abort_IT+0x3e8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a22      	ldr	r2, [pc, #136]	@ (8002e1c <HAL_DMA_Abort_IT+0x3ec>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	@ (8002e20 <HAL_DMA_Abort_IT+0x3f0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e24 <HAL_DMA_Abort_IT+0x3f4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	@ (8002e28 <HAL_DMA_Abort_IT+0x3f8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <HAL_DMA_Abort_IT+0x3fc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <HAL_DMA_Abort_IT+0x400>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x3a2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <HAL_DMA_Abort_IT+0x404>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d132      	bne.n	8002e38 <HAL_DMA_Abort_IT+0x408>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e031      	b.n	8002e3a <HAL_DMA_Abort_IT+0x40a>
 8002dd6:	bf00      	nop
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	40020028 	.word	0x40020028
 8002de0:	40020040 	.word	0x40020040
 8002de4:	40020058 	.word	0x40020058
 8002de8:	40020070 	.word	0x40020070
 8002dec:	40020088 	.word	0x40020088
 8002df0:	400200a0 	.word	0x400200a0
 8002df4:	400200b8 	.word	0x400200b8
 8002df8:	40020410 	.word	0x40020410
 8002dfc:	40020428 	.word	0x40020428
 8002e00:	40020440 	.word	0x40020440
 8002e04:	40020458 	.word	0x40020458
 8002e08:	40020470 	.word	0x40020470
 8002e0c:	40020488 	.word	0x40020488
 8002e10:	400204a0 	.word	0x400204a0
 8002e14:	400204b8 	.word	0x400204b8
 8002e18:	58025408 	.word	0x58025408
 8002e1c:	5802541c 	.word	0x5802541c
 8002e20:	58025430 	.word	0x58025430
 8002e24:	58025444 	.word	0x58025444
 8002e28:	58025458 	.word	0x58025458
 8002e2c:	5802546c 	.word	0x5802546c
 8002e30:	58025480 	.word	0x58025480
 8002e34:	58025494 	.word	0x58025494
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d028      	beq.n	8002e90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec8:	4b67      	ldr	r3, [pc, #412]	@ (8003068 <HAL_DMA_IRQHandler+0x1ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a67      	ldr	r2, [pc, #412]	@ (800306c <HAL_DMA_IRQHandler+0x1b0>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8003070 <HAL_DMA_IRQHandler+0x1b4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d04a      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a5d      	ldr	r2, [pc, #372]	@ (8003074 <HAL_DMA_IRQHandler+0x1b8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d045      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a5c      	ldr	r2, [pc, #368]	@ (8003078 <HAL_DMA_IRQHandler+0x1bc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d040      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5a      	ldr	r2, [pc, #360]	@ (800307c <HAL_DMA_IRQHandler+0x1c0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d03b      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a59      	ldr	r2, [pc, #356]	@ (8003080 <HAL_DMA_IRQHandler+0x1c4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d036      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a57      	ldr	r2, [pc, #348]	@ (8003084 <HAL_DMA_IRQHandler+0x1c8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d031      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_DMA_IRQHandler+0x1cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d02c      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a54      	ldr	r2, [pc, #336]	@ (800308c <HAL_DMA_IRQHandler+0x1d0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d027      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a53      	ldr	r2, [pc, #332]	@ (8003090 <HAL_DMA_IRQHandler+0x1d4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d022      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a51      	ldr	r2, [pc, #324]	@ (8003094 <HAL_DMA_IRQHandler+0x1d8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01d      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_DMA_IRQHandler+0x1dc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d018      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a4e      	ldr	r2, [pc, #312]	@ (800309c <HAL_DMA_IRQHandler+0x1e0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_DMA_IRQHandler+0x1e4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00e      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a4b      	ldr	r2, [pc, #300]	@ (80030a4 <HAL_DMA_IRQHandler+0x1e8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d009      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80030a8 <HAL_DMA_IRQHandler+0x1ec>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xd2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a48      	ldr	r2, [pc, #288]	@ (80030ac <HAL_DMA_IRQHandler+0x1f0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_DMA_IRQHandler+0xd6>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 842b 	beq.w	80037f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a2 	beq.w	80030f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003070 <HAL_DMA_IRQHandler+0x1b4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d04a      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <HAL_DMA_IRQHandler+0x1b8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d045      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003078 <HAL_DMA_IRQHandler+0x1bc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d040      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800307c <HAL_DMA_IRQHandler+0x1c0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d03b      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	@ (8003080 <HAL_DMA_IRQHandler+0x1c4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d036      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	@ (8003084 <HAL_DMA_IRQHandler+0x1c8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d031      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	@ (8003088 <HAL_DMA_IRQHandler+0x1cc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02c      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a24      	ldr	r2, [pc, #144]	@ (800308c <HAL_DMA_IRQHandler+0x1d0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d027      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <HAL_DMA_IRQHandler+0x1d4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d022      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <HAL_DMA_IRQHandler+0x1d8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d01d      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1f      	ldr	r2, [pc, #124]	@ (8003098 <HAL_DMA_IRQHandler+0x1dc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d018      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <HAL_DMA_IRQHandler+0x1e0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <HAL_DMA_IRQHandler+0x1e4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00e      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1b      	ldr	r2, [pc, #108]	@ (80030a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d009      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_DMA_IRQHandler+0x194>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <HAL_DMA_IRQHandler+0x1f0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d12f      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x1f4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e02e      	b.n	80030c4 <HAL_DMA_IRQHandler+0x208>
 8003066:	bf00      	nop
 8003068:	24000000 	.word	0x24000000
 800306c:	1b4e81b5 	.word	0x1b4e81b5
 8003070:	40020010 	.word	0x40020010
 8003074:	40020028 	.word	0x40020028
 8003078:	40020040 	.word	0x40020040
 800307c:	40020058 	.word	0x40020058
 8003080:	40020070 	.word	0x40020070
 8003084:	40020088 	.word	0x40020088
 8003088:	400200a0 	.word	0x400200a0
 800308c:	400200b8 	.word	0x400200b8
 8003090:	40020410 	.word	0x40020410
 8003094:	40020428 	.word	0x40020428
 8003098:	40020440 	.word	0x40020440
 800309c:	40020458 	.word	0x40020458
 80030a0:	40020470 	.word	0x40020470
 80030a4:	40020488 	.word	0x40020488
 80030a8:	400204a0 	.word	0x400204a0
 80030ac:	400204b8 	.word	0x400204b8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0204 	bic.w	r2, r2, #4
 80030d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2208      	movs	r2, #8
 80030e2:	409a      	lsls	r2, r3
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d06e      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d04a      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a67      	ldr	r2, [pc, #412]	@ (80032b8 <HAL_DMA_IRQHandler+0x3fc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d045      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a66      	ldr	r2, [pc, #408]	@ (80032bc <HAL_DMA_IRQHandler+0x400>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d040      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a64      	ldr	r2, [pc, #400]	@ (80032c0 <HAL_DMA_IRQHandler+0x404>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d03b      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a63      	ldr	r2, [pc, #396]	@ (80032c4 <HAL_DMA_IRQHandler+0x408>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d036      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a61      	ldr	r2, [pc, #388]	@ (80032c8 <HAL_DMA_IRQHandler+0x40c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d031      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a60      	ldr	r2, [pc, #384]	@ (80032cc <HAL_DMA_IRQHandler+0x410>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d02c      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5e      	ldr	r2, [pc, #376]	@ (80032d0 <HAL_DMA_IRQHandler+0x414>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d027      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_DMA_IRQHandler+0x418>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5b      	ldr	r2, [pc, #364]	@ (80032d8 <HAL_DMA_IRQHandler+0x41c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01d      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <HAL_DMA_IRQHandler+0x420>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d018      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a58      	ldr	r2, [pc, #352]	@ (80032e0 <HAL_DMA_IRQHandler+0x424>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <HAL_DMA_IRQHandler+0x428>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a55      	ldr	r2, [pc, #340]	@ (80032e8 <HAL_DMA_IRQHandler+0x42c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_DMA_IRQHandler+0x430>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_DMA_IRQHandler+0x2ee>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a52      	ldr	r2, [pc, #328]	@ (80032f0 <HAL_DMA_IRQHandler+0x434>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10a      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x304>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e003      	b.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f043 0202 	orr.w	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2204      	movs	r2, #4
 80031f2:	409a      	lsls	r2, r3
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 808f 	beq.w	800331c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2a      	ldr	r2, [pc, #168]	@ (80032b8 <HAL_DMA_IRQHandler+0x3fc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a29      	ldr	r2, [pc, #164]	@ (80032bc <HAL_DMA_IRQHandler+0x400>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a27      	ldr	r2, [pc, #156]	@ (80032c0 <HAL_DMA_IRQHandler+0x404>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <HAL_DMA_IRQHandler+0x408>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <HAL_DMA_IRQHandler+0x40c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_DMA_IRQHandler+0x410>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <HAL_DMA_IRQHandler+0x414>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a20      	ldr	r2, [pc, #128]	@ (80032d4 <HAL_DMA_IRQHandler+0x418>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <HAL_DMA_IRQHandler+0x41c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_DMA_IRQHandler+0x420>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1b      	ldr	r2, [pc, #108]	@ (80032e0 <HAL_DMA_IRQHandler+0x424>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <HAL_DMA_IRQHandler+0x428>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a18      	ldr	r2, [pc, #96]	@ (80032e8 <HAL_DMA_IRQHandler+0x42c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <HAL_DMA_IRQHandler+0x430>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_IRQHandler+0x3e2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a15      	ldr	r2, [pc, #84]	@ (80032f0 <HAL_DMA_IRQHandler+0x434>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d12a      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x438>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e023      	b.n	80032fc <HAL_DMA_IRQHandler+0x440>
 80032b4:	40020010 	.word	0x40020010
 80032b8:	40020028 	.word	0x40020028
 80032bc:	40020040 	.word	0x40020040
 80032c0:	40020058 	.word	0x40020058
 80032c4:	40020070 	.word	0x40020070
 80032c8:	40020088 	.word	0x40020088
 80032cc:	400200a0 	.word	0x400200a0
 80032d0:	400200b8 	.word	0x400200b8
 80032d4:	40020410 	.word	0x40020410
 80032d8:	40020428 	.word	0x40020428
 80032dc:	40020440 	.word	0x40020440
 80032e0:	40020458 	.word	0x40020458
 80032e4:	40020470 	.word	0x40020470
 80032e8:	40020488 	.word	0x40020488
 80032ec:	400204a0 	.word	0x400204a0
 80032f0:	400204b8 	.word	0x400204b8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2204      	movs	r2, #4
 800330a:	409a      	lsls	r2, r3
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2210      	movs	r2, #16
 8003326:	409a      	lsls	r2, r3
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a6 	beq.w	800347e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a85      	ldr	r2, [pc, #532]	@ (800354c <HAL_DMA_IRQHandler+0x690>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a83      	ldr	r2, [pc, #524]	@ (8003550 <HAL_DMA_IRQHandler+0x694>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a82      	ldr	r2, [pc, #520]	@ (8003554 <HAL_DMA_IRQHandler+0x698>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a80      	ldr	r2, [pc, #512]	@ (8003558 <HAL_DMA_IRQHandler+0x69c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7f      	ldr	r2, [pc, #508]	@ (800355c <HAL_DMA_IRQHandler+0x6a0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a7d      	ldr	r2, [pc, #500]	@ (8003560 <HAL_DMA_IRQHandler+0x6a4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7c      	ldr	r2, [pc, #496]	@ (8003564 <HAL_DMA_IRQHandler+0x6a8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a7a      	ldr	r2, [pc, #488]	@ (8003568 <HAL_DMA_IRQHandler+0x6ac>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a79      	ldr	r2, [pc, #484]	@ (800356c <HAL_DMA_IRQHandler+0x6b0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a77      	ldr	r2, [pc, #476]	@ (8003570 <HAL_DMA_IRQHandler+0x6b4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a76      	ldr	r2, [pc, #472]	@ (8003574 <HAL_DMA_IRQHandler+0x6b8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a74      	ldr	r2, [pc, #464]	@ (8003578 <HAL_DMA_IRQHandler+0x6bc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a73      	ldr	r2, [pc, #460]	@ (800357c <HAL_DMA_IRQHandler+0x6c0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a71      	ldr	r2, [pc, #452]	@ (8003580 <HAL_DMA_IRQHandler+0x6c4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a70      	ldr	r2, [pc, #448]	@ (8003584 <HAL_DMA_IRQHandler+0x6c8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x516>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003588 <HAL_DMA_IRQHandler+0x6cc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10a      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x52c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e009      	b.n	80033fc <HAL_DMA_IRQHandler+0x540>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03e      	beq.n	800347e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d024      	beq.n	800347e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
 800343c:	e01f      	b.n	800347e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01b      	beq.n	800347e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
 800344e:	e016      	b.n	800347e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2220      	movs	r2, #32
 8003488:	409a      	lsls	r2, r3
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8110 	beq.w	80036b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2c      	ldr	r2, [pc, #176]	@ (800354c <HAL_DMA_IRQHandler+0x690>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d04a      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003550 <HAL_DMA_IRQHandler+0x694>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d045      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a29      	ldr	r2, [pc, #164]	@ (8003554 <HAL_DMA_IRQHandler+0x698>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d040      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <HAL_DMA_IRQHandler+0x69c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d03b      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a26      	ldr	r2, [pc, #152]	@ (800355c <HAL_DMA_IRQHandler+0x6a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d036      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a25      	ldr	r2, [pc, #148]	@ (8003560 <HAL_DMA_IRQHandler+0x6a4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d031      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a23      	ldr	r2, [pc, #140]	@ (8003564 <HAL_DMA_IRQHandler+0x6a8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02c      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_DMA_IRQHandler+0x6ac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d027      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a20      	ldr	r2, [pc, #128]	@ (800356c <HAL_DMA_IRQHandler+0x6b0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_DMA_IRQHandler+0x6b4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01d      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <HAL_DMA_IRQHandler+0x6b8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <HAL_DMA_IRQHandler+0x6bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <HAL_DMA_IRQHandler+0x6c0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_DMA_IRQHandler+0x6c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_DMA_IRQHandler+0x6c8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_DMA_IRQHandler+0x678>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_DMA_IRQHandler+0x6cc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d12b      	bne.n	800358c <HAL_DMA_IRQHandler+0x6d0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e02a      	b.n	80035a0 <HAL_DMA_IRQHandler+0x6e4>
 800354a:	bf00      	nop
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8087 	beq.w	80036b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2220      	movs	r2, #32
 80035b0:	409a      	lsls	r2, r3
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d139      	bne.n	8003636 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0216 	bic.w	r2, r2, #22
 80035d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x736>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0208 	bic.w	r2, r2, #8
 8003600:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	223f      	movs	r2, #63	@ 0x3f
 800360c:	409a      	lsls	r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 834a 	beq.w	8003cc0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
          }
          return;
 8003634:	e344      	b.n	8003cc0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d018      	beq.n	8003676 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02c      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e027      	b.n	80036b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
 8003674:	e01e      	b.n	80036b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0210 	bic.w	r2, r2, #16
 8003692:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8306 	beq.w	8003cca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8088 	beq.w	80037dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2204      	movs	r2, #4
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7a      	ldr	r2, [pc, #488]	@ (80038c4 <HAL_DMA_IRQHandler+0xa08>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04a      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a79      	ldr	r2, [pc, #484]	@ (80038c8 <HAL_DMA_IRQHandler+0xa0c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d045      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a77      	ldr	r2, [pc, #476]	@ (80038cc <HAL_DMA_IRQHandler+0xa10>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d040      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a76      	ldr	r2, [pc, #472]	@ (80038d0 <HAL_DMA_IRQHandler+0xa14>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a74      	ldr	r2, [pc, #464]	@ (80038d4 <HAL_DMA_IRQHandler+0xa18>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d036      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a73      	ldr	r2, [pc, #460]	@ (80038d8 <HAL_DMA_IRQHandler+0xa1c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d031      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a71      	ldr	r2, [pc, #452]	@ (80038dc <HAL_DMA_IRQHandler+0xa20>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a70      	ldr	r2, [pc, #448]	@ (80038e0 <HAL_DMA_IRQHandler+0xa24>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d027      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6e      	ldr	r2, [pc, #440]	@ (80038e4 <HAL_DMA_IRQHandler+0xa28>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6d      	ldr	r2, [pc, #436]	@ (80038e8 <HAL_DMA_IRQHandler+0xa2c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6b      	ldr	r2, [pc, #428]	@ (80038ec <HAL_DMA_IRQHandler+0xa30>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6a      	ldr	r2, [pc, #424]	@ (80038f0 <HAL_DMA_IRQHandler+0xa34>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a68      	ldr	r2, [pc, #416]	@ (80038f4 <HAL_DMA_IRQHandler+0xa38>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a67      	ldr	r2, [pc, #412]	@ (80038f8 <HAL_DMA_IRQHandler+0xa3c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a65      	ldr	r2, [pc, #404]	@ (80038fc <HAL_DMA_IRQHandler+0xa40>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_IRQHandler+0x8b8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a64      	ldr	r2, [pc, #400]	@ (8003900 <HAL_DMA_IRQHandler+0xa44>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <HAL_DMA_IRQHandler+0x8ca>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e007      	b.n	8003796 <HAL_DMA_IRQHandler+0x8da>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	429a      	cmp	r2, r3
 80037a0:	d307      	bcc.n	80037b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f2      	bne.n	8003796 <HAL_DMA_IRQHandler+0x8da>
 80037b0:	e000      	b.n	80037b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2203      	movs	r2, #3
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80037ca:	e003      	b.n	80037d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8272 	beq.w	8003cca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e26c      	b.n	8003cca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a43      	ldr	r2, [pc, #268]	@ (8003904 <HAL_DMA_IRQHandler+0xa48>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a42      	ldr	r2, [pc, #264]	@ (8003908 <HAL_DMA_IRQHandler+0xa4c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a40      	ldr	r2, [pc, #256]	@ (800390c <HAL_DMA_IRQHandler+0xa50>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3f      	ldr	r2, [pc, #252]	@ (8003910 <HAL_DMA_IRQHandler+0xa54>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3d      	ldr	r2, [pc, #244]	@ (8003914 <HAL_DMA_IRQHandler+0xa58>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3c      	ldr	r2, [pc, #240]	@ (8003918 <HAL_DMA_IRQHandler+0xa5c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3a      	ldr	r2, [pc, #232]	@ (800391c <HAL_DMA_IRQHandler+0xa60>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_DMA_IRQHandler+0x984>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a39      	ldr	r2, [pc, #228]	@ (8003920 <HAL_DMA_IRQHandler+0xa64>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_DMA_IRQHandler+0x988>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_DMA_IRQHandler+0x98a>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 823f 	beq.w	8003cca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2204      	movs	r2, #4
 800385e:	409a      	lsls	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80cd 	beq.w	8003a04 <HAL_DMA_IRQHandler+0xb48>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80c7 	beq.w	8003a04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2204      	movs	r2, #4
 8003880:	409a      	lsls	r2, r3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d049      	beq.n	8003924 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8210 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ac:	e20a      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8206 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c0:	e200      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xe08>
 80038c2:	bf00      	nop
 80038c4:	40020010 	.word	0x40020010
 80038c8:	40020028 	.word	0x40020028
 80038cc:	40020040 	.word	0x40020040
 80038d0:	40020058 	.word	0x40020058
 80038d4:	40020070 	.word	0x40020070
 80038d8:	40020088 	.word	0x40020088
 80038dc:	400200a0 	.word	0x400200a0
 80038e0:	400200b8 	.word	0x400200b8
 80038e4:	40020410 	.word	0x40020410
 80038e8:	40020428 	.word	0x40020428
 80038ec:	40020440 	.word	0x40020440
 80038f0:	40020458 	.word	0x40020458
 80038f4:	40020470 	.word	0x40020470
 80038f8:	40020488 	.word	0x40020488
 80038fc:	400204a0 	.word	0x400204a0
 8003900:	400204b8 	.word	0x400204b8
 8003904:	58025408 	.word	0x58025408
 8003908:	5802541c 	.word	0x5802541c
 800390c:	58025430 	.word	0x58025430
 8003910:	58025444 	.word	0x58025444
 8003914:	58025458 	.word	0x58025458
 8003918:	5802546c 	.word	0x5802546c
 800391c:	58025480 	.word	0x58025480
 8003920:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d160      	bne.n	80039f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7f      	ldr	r2, [pc, #508]	@ (8003b30 <HAL_DMA_IRQHandler+0xc74>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d04a      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b34 <HAL_DMA_IRQHandler+0xc78>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d045      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7c      	ldr	r2, [pc, #496]	@ (8003b38 <HAL_DMA_IRQHandler+0xc7c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d040      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a7a      	ldr	r2, [pc, #488]	@ (8003b3c <HAL_DMA_IRQHandler+0xc80>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d03b      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a79      	ldr	r2, [pc, #484]	@ (8003b40 <HAL_DMA_IRQHandler+0xc84>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d036      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a77      	ldr	r2, [pc, #476]	@ (8003b44 <HAL_DMA_IRQHandler+0xc88>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d031      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a76      	ldr	r2, [pc, #472]	@ (8003b48 <HAL_DMA_IRQHandler+0xc8c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d02c      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a74      	ldr	r2, [pc, #464]	@ (8003b4c <HAL_DMA_IRQHandler+0xc90>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d027      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a73      	ldr	r2, [pc, #460]	@ (8003b50 <HAL_DMA_IRQHandler+0xc94>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d022      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a71      	ldr	r2, [pc, #452]	@ (8003b54 <HAL_DMA_IRQHandler+0xc98>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01d      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a70      	ldr	r2, [pc, #448]	@ (8003b58 <HAL_DMA_IRQHandler+0xc9c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d018      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b5c <HAL_DMA_IRQHandler+0xca0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003b60 <HAL_DMA_IRQHandler+0xca4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00e      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003b64 <HAL_DMA_IRQHandler+0xca8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6a      	ldr	r2, [pc, #424]	@ (8003b68 <HAL_DMA_IRQHandler+0xcac>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_DMA_IRQHandler+0xb12>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a68      	ldr	r2, [pc, #416]	@ (8003b6c <HAL_DMA_IRQHandler+0xcb0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <HAL_DMA_IRQHandler+0xb24>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0208 	bic.w	r2, r2, #8
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e007      	b.n	80039f0 <HAL_DMA_IRQHandler+0xb34>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8165 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a02:	e15f      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80c5 	beq.w	8003ba4 <HAL_DMA_IRQHandler+0xce8>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80bf 	beq.w	8003ba4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2202      	movs	r2, #2
 8003a30:	409a      	lsls	r2, r3
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 813a 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a5c:	e134      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8130 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a70:	e12a      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 8089 	bne.w	8003b90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_DMA_IRQHandler+0xc74>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a29      	ldr	r2, [pc, #164]	@ (8003b34 <HAL_DMA_IRQHandler+0xc78>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a28      	ldr	r2, [pc, #160]	@ (8003b38 <HAL_DMA_IRQHandler+0xc7c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a26      	ldr	r2, [pc, #152]	@ (8003b3c <HAL_DMA_IRQHandler+0xc80>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a25      	ldr	r2, [pc, #148]	@ (8003b40 <HAL_DMA_IRQHandler+0xc84>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	@ (8003b44 <HAL_DMA_IRQHandler+0xc88>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a22      	ldr	r2, [pc, #136]	@ (8003b48 <HAL_DMA_IRQHandler+0xc8c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	@ (8003b4c <HAL_DMA_IRQHandler+0xc90>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b50 <HAL_DMA_IRQHandler+0xc94>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b54 <HAL_DMA_IRQHandler+0xc98>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b58 <HAL_DMA_IRQHandler+0xc9c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b5c <HAL_DMA_IRQHandler+0xca0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_DMA_IRQHandler+0xca4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_DMA_IRQHandler+0xca8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <HAL_DMA_IRQHandler+0xcac>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xc62>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <HAL_DMA_IRQHandler+0xcb0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d128      	bne.n	8003b70 <HAL_DMA_IRQHandler+0xcb4>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0214 	bic.w	r2, r2, #20
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e027      	b.n	8003b80 <HAL_DMA_IRQHandler+0xcc4>
 8003b30:	40020010 	.word	0x40020010
 8003b34:	40020028 	.word	0x40020028
 8003b38:	40020040 	.word	0x40020040
 8003b3c:	40020058 	.word	0x40020058
 8003b40:	40020070 	.word	0x40020070
 8003b44:	40020088 	.word	0x40020088
 8003b48:	400200a0 	.word	0x400200a0
 8003b4c:	400200b8 	.word	0x400200b8
 8003b50:	40020410 	.word	0x40020410
 8003b54:	40020428 	.word	0x40020428
 8003b58:	40020440 	.word	0x40020440
 8003b5c:	40020458 	.word	0x40020458
 8003b60:	40020470 	.word	0x40020470
 8003b64:	40020488 	.word	0x40020488
 8003b68:	400204a0 	.word	0x400204a0
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 020a 	bic.w	r2, r2, #10
 8003b7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8097 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba2:	e091      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2208      	movs	r2, #8
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8088 	beq.w	8003cca <HAL_DMA_IRQHandler+0xe0e>
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8082 	beq.w	8003cca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a41      	ldr	r2, [pc, #260]	@ (8003cd0 <HAL_DMA_IRQHandler+0xe14>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd4 <HAL_DMA_IRQHandler+0xe18>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3e      	ldr	r2, [pc, #248]	@ (8003cd8 <HAL_DMA_IRQHandler+0xe1c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3c      	ldr	r2, [pc, #240]	@ (8003cdc <HAL_DMA_IRQHandler+0xe20>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce0 <HAL_DMA_IRQHandler+0xe24>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a39      	ldr	r2, [pc, #228]	@ (8003ce4 <HAL_DMA_IRQHandler+0xe28>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <HAL_DMA_IRQHandler+0xe2c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a36      	ldr	r2, [pc, #216]	@ (8003cec <HAL_DMA_IRQHandler+0xe30>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a35      	ldr	r2, [pc, #212]	@ (8003cf0 <HAL_DMA_IRQHandler+0xe34>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a33      	ldr	r2, [pc, #204]	@ (8003cf4 <HAL_DMA_IRQHandler+0xe38>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <HAL_DMA_IRQHandler+0xe3c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <HAL_DMA_IRQHandler+0xe40>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2f      	ldr	r2, [pc, #188]	@ (8003d00 <HAL_DMA_IRQHandler+0xe44>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d04 <HAL_DMA_IRQHandler+0xe48>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2c      	ldr	r2, [pc, #176]	@ (8003d08 <HAL_DMA_IRQHandler+0xe4c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdaa>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2a      	ldr	r2, [pc, #168]	@ (8003d0c <HAL_DMA_IRQHandler+0xe50>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_DMA_IRQHandler+0xdbc>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 021c 	bic.w	r2, r2, #28
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <HAL_DMA_IRQHandler+0xdcc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020e 	bic.w	r2, r2, #14
 8003c86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
 8003cbe:	e004      	b.n	8003cca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cc0:	bf00      	nop
 8003cc2:	e002      	b.n	8003cca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cca:	3728      	adds	r7, #40	@ 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40020010 	.word	0x40020010
 8003cd4:	40020028 	.word	0x40020028
 8003cd8:	40020040 	.word	0x40020040
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	40020070 	.word	0x40020070
 8003ce4:	40020088 	.word	0x40020088
 8003ce8:	400200a0 	.word	0x400200a0
 8003cec:	400200b8 	.word	0x400200b8
 8003cf0:	40020410 	.word	0x40020410
 8003cf4:	40020428 	.word	0x40020428
 8003cf8:	40020440 	.word	0x40020440
 8003cfc:	40020458 	.word	0x40020458
 8003d00:	40020470 	.word	0x40020470
 8003d04:	40020488 	.word	0x40020488
 8003d08:	400204a0 	.word	0x400204a0
 8003d0c:	400204b8 	.word	0x400204b8

08003d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	@ (8003e28 <DMA_CalcBaseAndBitshift+0x118>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d04a      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a41      	ldr	r2, [pc, #260]	@ (8003e2c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d045      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3f      	ldr	r2, [pc, #252]	@ (8003e30 <DMA_CalcBaseAndBitshift+0x120>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d040      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e34 <DMA_CalcBaseAndBitshift+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d03b      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3c      	ldr	r2, [pc, #240]	@ (8003e38 <DMA_CalcBaseAndBitshift+0x128>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d036      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e3c <DMA_CalcBaseAndBitshift+0x12c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d031      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a39      	ldr	r2, [pc, #228]	@ (8003e40 <DMA_CalcBaseAndBitshift+0x130>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02c      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a38      	ldr	r2, [pc, #224]	@ (8003e44 <DMA_CalcBaseAndBitshift+0x134>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d027      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a36      	ldr	r2, [pc, #216]	@ (8003e48 <DMA_CalcBaseAndBitshift+0x138>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d022      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a35      	ldr	r2, [pc, #212]	@ (8003e4c <DMA_CalcBaseAndBitshift+0x13c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01d      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a33      	ldr	r2, [pc, #204]	@ (8003e50 <DMA_CalcBaseAndBitshift+0x140>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d018      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a32      	ldr	r2, [pc, #200]	@ (8003e54 <DMA_CalcBaseAndBitshift+0x144>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a30      	ldr	r2, [pc, #192]	@ (8003e58 <DMA_CalcBaseAndBitshift+0x148>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00e      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e5c <DMA_CalcBaseAndBitshift+0x14c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d009      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <DMA_CalcBaseAndBitshift+0x150>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e64 <DMA_CalcBaseAndBitshift+0x154>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <DMA_CalcBaseAndBitshift+0xac>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <DMA_CalcBaseAndBitshift+0xae>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d024      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3b10      	subs	r3, #16
 8003dca:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <DMA_CalcBaseAndBitshift+0x158>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	4a24      	ldr	r2, [pc, #144]	@ (8003e6c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d908      	bls.n	8003dfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e70 <DMA_CalcBaseAndBitshift+0x160>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dfa:	e00d      	b.n	8003e18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <DMA_CalcBaseAndBitshift+0x160>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e0a:	e005      	b.n	8003e18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	aaaaaaab 	.word	0xaaaaaaab
 8003e6c:	0800db78 	.word	0x0800db78
 8003e70:	fffffc00 	.word	0xfffffc00

08003e74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d120      	bne.n	8003eca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d858      	bhi.n	8003f42 <DMA_CheckFifoParam+0xce>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <DMA_CheckFifoParam+0x24>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003ebb 	.word	0x08003ebb
 8003ea0:	08003ea9 	.word	0x08003ea9
 8003ea4:	08003f43 	.word	0x08003f43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d048      	beq.n	8003f46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eb8:	e045      	b.n	8003f46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ec2:	d142      	bne.n	8003f4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ec8:	e03f      	b.n	8003f4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed2:	d123      	bne.n	8003f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d838      	bhi.n	8003f4e <DMA_CheckFifoParam+0xda>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <DMA_CheckFifoParam+0x70>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003efb 	.word	0x08003efb
 8003eec:	08003ef5 	.word	0x08003ef5
 8003ef0:	08003f0d 	.word	0x08003f0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef8:	e030      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d025      	beq.n	8003f52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f0a:	e022      	b.n	8003f52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f14:	d11f      	bne.n	8003f56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f1a:	e01c      	b.n	8003f56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d902      	bls.n	8003f2a <DMA_CheckFifoParam+0xb6>
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d003      	beq.n	8003f30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f28:	e018      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f2e:	e015      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f40:	e00b      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
        break;
 8003f42:	bf00      	nop
 8003f44:	e00a      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f46:	bf00      	nop
 8003f48:	e008      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e006      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e004      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f52:	bf00      	nop
 8003f54:	e002      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
    break;
 8003f5a:	bf00      	nop
    }
  }

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop

08003f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	@ (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a36      	ldr	r2, [pc, #216]	@ (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a35      	ldr	r2, [pc, #212]	@ (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a33      	ldr	r2, [pc, #204]	@ (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a32      	ldr	r2, [pc, #200]	@ (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a30      	ldr	r2, [pc, #192]	@ (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2f      	ldr	r2, [pc, #188]	@ (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01a      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3b08      	subs	r3, #8
 8003fdc:	4a28      	ldr	r2, [pc, #160]	@ (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4b26      	ldr	r3, [pc, #152]	@ (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a24      	ldr	r2, [pc, #144]	@ (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ff8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2201      	movs	r2, #1
 8004002:	409a      	lsls	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004008:	e024      	b.n	8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3b10      	subs	r3, #16
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d806      	bhi.n	8004032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d902      	bls.n	8004032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3308      	adds	r3, #8
 8004030:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a16      	ldr	r2, [pc, #88]	@ (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004044:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494
 8004080:	cccccccd 	.word	0xcccccccd
 8004084:	16009600 	.word	0x16009600
 8004088:	58025880 	.word	0x58025880
 800408c:	aaaaaaab 	.word	0xaaaaaaab
 8004090:	400204b8 	.word	0x400204b8
 8004094:	4002040f 	.word	0x4002040f
 8004098:	10008200 	.word	0x10008200
 800409c:	40020880 	.word	0x40020880

080040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04a      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d847      	bhi.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	@ (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d022      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a24      	ldr	r2, [pc, #144]	@ (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d01d      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d018      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	@ (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00e      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d009      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4b17      	ldr	r3, [pc, #92]	@ (8004178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	461a      	mov	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a15      	ldr	r2, [pc, #84]	@ (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004128:	671a      	str	r2, [r3, #112]	@ 0x70
 800412a:	e009      	b.n	8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a11      	ldr	r2, [pc, #68]	@ (8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800413e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b01      	subs	r3, #1
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	58025408 	.word	0x58025408
 800415c:	5802541c 	.word	0x5802541c
 8004160:	58025430 	.word	0x58025430
 8004164:	58025444 	.word	0x58025444
 8004168:	58025458 	.word	0x58025458
 800416c:	5802546c 	.word	0x5802546c
 8004170:	58025480 	.word	0x58025480
 8004174:	58025494 	.word	0x58025494
 8004178:	1600963f 	.word	0x1600963f
 800417c:	58025940 	.word	0x58025940
 8004180:	1000823f 	.word	0x1000823f
 8004184:	40020940 	.word	0x40020940

08004188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	@ 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004196:	4b89      	ldr	r3, [pc, #548]	@ (80043bc <HAL_GPIO_Init+0x234>)
 8004198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419a:	e194      	b.n	80044c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8186 	beq.w	80044c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d005      	beq.n	80041cc <HAL_GPIO_Init+0x44>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d130      	bne.n	800422e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004202:	2201      	movs	r2, #1
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0201 	and.w	r2, r3, #1
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d017      	beq.n	800426a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d123      	bne.n	80042be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	08da      	lsrs	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3208      	adds	r2, #8
 800427e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 0203 	and.w	r2, r3, #3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e0 	beq.w	80044c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004300:	4b2f      	ldr	r3, [pc, #188]	@ (80043c0 <HAL_GPIO_Init+0x238>)
 8004302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004306:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <HAL_GPIO_Init+0x238>)
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004310:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_GPIO_Init+0x238>)
 8004312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800431e:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <HAL_GPIO_Init+0x23c>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <HAL_GPIO_Init+0x240>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d052      	beq.n	80043f0 <HAL_GPIO_Init+0x268>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	@ (80043cc <HAL_GPIO_Init+0x244>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d031      	beq.n	80043b6 <HAL_GPIO_Init+0x22e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1e      	ldr	r2, [pc, #120]	@ (80043d0 <HAL_GPIO_Init+0x248>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <HAL_GPIO_Init+0x22a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_GPIO_Init+0x24c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d025      	beq.n	80043ae <HAL_GPIO_Init+0x226>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_GPIO_Init+0x250>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <HAL_GPIO_Init+0x222>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1b      	ldr	r2, [pc, #108]	@ (80043dc <HAL_GPIO_Init+0x254>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x21e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_GPIO_Init+0x258>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x21a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_GPIO_Init+0x25c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x216>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <HAL_GPIO_Init+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x212>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <HAL_GPIO_Init+0x264>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x20e>
 8004392:	2309      	movs	r3, #9
 8004394:	e02d      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 8004396:	230a      	movs	r3, #10
 8004398:	e02b      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 800439a:	2308      	movs	r3, #8
 800439c:	e029      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 800439e:	2307      	movs	r3, #7
 80043a0:	e027      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043a2:	2306      	movs	r3, #6
 80043a4:	e025      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e023      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e021      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e01f      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e01d      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01b      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043ba:	bf00      	nop
 80043bc:	58000080 	.word	0x58000080
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58000400 	.word	0x58000400
 80043c8:	58020000 	.word	0x58020000
 80043cc:	58020400 	.word	0x58020400
 80043d0:	58020800 	.word	0x58020800
 80043d4:	58020c00 	.word	0x58020c00
 80043d8:	58021000 	.word	0x58021000
 80043dc:	58021400 	.word	0x58021400
 80043e0:	58021800 	.word	0x58021800
 80043e4:	58021c00 	.word	0x58021c00
 80043e8:	58022000 	.word	0x58022000
 80043ec:	58022400 	.word	0x58022400
 80043f0:	2300      	movs	r3, #0
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	4093      	lsls	r3, r2
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004402:	4938      	ldr	r1, [pc, #224]	@ (80044e4 <HAL_GPIO_Init+0x35c>)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f ae63 	bne.w	800419c <HAL_GPIO_Init+0x14>
  }
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	3724      	adds	r7, #36	@ 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	58000400 	.word	0x58000400

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004504:	e003      	b.n	800450e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	619a      	str	r2, [r3, #24]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800452c:	887a      	ldrh	r2, [r7, #2]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4013      	ands	r3, r2
 8004532:	041a      	lsls	r2, r3, #16
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43d9      	mvns	r1, r3
 8004538:	887b      	ldrh	r3, [r7, #2]
 800453a:	400b      	ands	r3, r1
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <HAL_PWREx_ConfigSupply+0x70>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d00a      	beq.n	800457a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004564:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <HAL_PWREx_ConfigSupply+0x70>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d001      	beq.n	8004576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e01f      	b.n	80045b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e01d      	b.n	80045b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <HAL_PWREx_ConfigSupply+0x70>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 0207 	bic.w	r2, r3, #7
 8004582:	490f      	ldr	r1, [pc, #60]	@ (80045c0 <HAL_PWREx_ConfigSupply+0x70>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800458a:	f7fd fa13 	bl	80019b4 <HAL_GetTick>
 800458e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004590:	e009      	b.n	80045a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004592:	f7fd fa0f 	bl	80019b4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045a0:	d901      	bls.n	80045a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e007      	b.n	80045b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_PWREx_ConfigSupply+0x70>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b2:	d1ee      	bne.n	8004592 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	58024800 	.word	0x58024800

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	@ 0x30
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f000 bc48 	b.w	8004e68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8088 	beq.w	80046f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e6:	4b99      	ldr	r3, [pc, #612]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045f0:	4b96      	ldr	r3, [pc, #600]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d007      	beq.n	800460c <HAL_RCC_OscConfig+0x48>
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fe:	2b18      	cmp	r3, #24
 8004600:	d111      	bne.n	8004626 <HAL_RCC_OscConfig+0x62>
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d10c      	bne.n	8004626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	4b8f      	ldr	r3, [pc, #572]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d06d      	beq.n	80046f4 <HAL_RCC_OscConfig+0x130>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d169      	bne.n	80046f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f000 bc21 	b.w	8004e68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x7a>
 8004630:	4b86      	ldr	r3, [pc, #536]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a85      	ldr	r2, [pc, #532]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e02e      	b.n	800469c <HAL_RCC_OscConfig+0xd8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x9c>
 8004646:	4b81      	ldr	r3, [pc, #516]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a80      	ldr	r2, [pc, #512]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800464c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b7e      	ldr	r3, [pc, #504]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a7d      	ldr	r2, [pc, #500]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e01d      	b.n	800469c <HAL_RCC_OscConfig+0xd8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0xc0>
 800466a:	4b78      	ldr	r3, [pc, #480]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a77      	ldr	r2, [pc, #476]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b75      	ldr	r3, [pc, #468]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a74      	ldr	r2, [pc, #464]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e00b      	b.n	800469c <HAL_RCC_OscConfig+0xd8>
 8004684:	4b71      	ldr	r3, [pc, #452]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a70      	ldr	r2, [pc, #448]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800468a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b6e      	ldr	r3, [pc, #440]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6d      	ldr	r2, [pc, #436]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd f986 	bl	80019b4 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd f982 	bl	80019b4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e3d4      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046be:	4b63      	ldr	r3, [pc, #396]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0xe8>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd f972 	bl	80019b4 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fd f96e 	bl	80019b4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e3c0      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046e6:	4b59      	ldr	r3, [pc, #356]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x110>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80ca 	beq.w	8004898 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004704:	4b51      	ldr	r3, [pc, #324]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800470c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800470e:	4b4f      	ldr	r3, [pc, #316]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_RCC_OscConfig+0x166>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	2b18      	cmp	r3, #24
 800471e:	d156      	bne.n	80047ce <HAL_RCC_OscConfig+0x20a>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d151      	bne.n	80047ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800472a:	4b48      	ldr	r3, [pc, #288]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x17e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e392      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004742:	4b42      	ldr	r3, [pc, #264]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 0219 	bic.w	r2, r3, #25
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	493f      	ldr	r1, [pc, #252]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd f92e 	bl	80019b4 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475c:	f7fd f92a 	bl	80019b4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e37c      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800476e:	4b37      	ldr	r3, [pc, #220]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	f7fd f94b 	bl	8001a14 <HAL_GetREVID>
 800477e:	4603      	mov	r3, r0
 8004780:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004784:	4293      	cmp	r3, r2
 8004786:	d817      	bhi.n	80047b8 <HAL_RCC_OscConfig+0x1f4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d108      	bne.n	80047a2 <HAL_RCC_OscConfig+0x1de>
 8004790:	4b2e      	ldr	r3, [pc, #184]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004798:	4a2c      	ldr	r2, [pc, #176]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800479e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a0:	e07a      	b.n	8004898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	031b      	lsls	r3, r3, #12
 80047b0:	4926      	ldr	r1, [pc, #152]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b6:	e06f      	b.n	8004898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b24      	ldr	r3, [pc, #144]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4921      	ldr	r1, [pc, #132]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047cc:	e064      	b.n	8004898 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d047      	beq.n	8004866 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d6:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 0219 	bic.w	r2, r3, #25
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	491a      	ldr	r1, [pc, #104]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fd f8e4 	bl	80019b4 <HAL_GetTick>
 80047ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fd f8e0 	bl	80019b4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e332      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480e:	f7fd f901 	bl	8001a14 <HAL_GetREVID>
 8004812:	4603      	mov	r3, r0
 8004814:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004818:	4293      	cmp	r3, r2
 800481a:	d819      	bhi.n	8004850 <HAL_RCC_OscConfig+0x28c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d108      	bne.n	8004836 <HAL_RCC_OscConfig+0x272>
 8004824:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800482c:	4a07      	ldr	r2, [pc, #28]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 800482e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004832:	6053      	str	r3, [r2, #4]
 8004834:	e030      	b.n	8004898 <HAL_RCC_OscConfig+0x2d4>
 8004836:	4b05      	ldr	r3, [pc, #20]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	031b      	lsls	r3, r3, #12
 8004844:	4901      	ldr	r1, [pc, #4]	@ (800484c <HAL_RCC_OscConfig+0x288>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
 800484a:	e025      	b.n	8004898 <HAL_RCC_OscConfig+0x2d4>
 800484c:	58024400 	.word	0x58024400
 8004850:	4b9a      	ldr	r3, [pc, #616]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	4997      	ldr	r1, [pc, #604]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b95      	ldr	r3, [pc, #596]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a94      	ldr	r2, [pc, #592]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd f89f 	bl	80019b4 <HAL_GetTick>
 8004876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487a:	f7fd f89b 	bl	80019b4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e2ed      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800488c:	4b8b      	ldr	r3, [pc, #556]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a9 	beq.w	80049f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a6:	4b85      	ldr	r3, [pc, #532]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048b0:	4b82      	ldr	r3, [pc, #520]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d007      	beq.n	80048cc <HAL_RCC_OscConfig+0x308>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b18      	cmp	r3, #24
 80048c0:	d13a      	bne.n	8004938 <HAL_RCC_OscConfig+0x374>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d135      	bne.n	8004938 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048cc:	4b7b      	ldr	r3, [pc, #492]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_OscConfig+0x320>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b80      	cmp	r3, #128	@ 0x80
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e2c1      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048e4:	f7fd f896 	bl	8001a14 <HAL_GetREVID>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d817      	bhi.n	8004922 <HAL_RCC_OscConfig+0x35e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d108      	bne.n	800490c <HAL_RCC_OscConfig+0x348>
 80048fa:	4b70      	ldr	r3, [pc, #448]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004902:	4a6e      	ldr	r2, [pc, #440]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004908:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800490a:	e075      	b.n	80049f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800490c:	4b6b      	ldr	r3, [pc, #428]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	069b      	lsls	r3, r3, #26
 800491a:	4968      	ldr	r1, [pc, #416]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004920:	e06a      	b.n	80049f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004922:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	061b      	lsls	r3, r3, #24
 8004930:	4962      	ldr	r1, [pc, #392]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004932:	4313      	orrs	r3, r2
 8004934:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004936:	e05f      	b.n	80049f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d042      	beq.n	80049c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004940:	4b5e      	ldr	r3, [pc, #376]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a5d      	ldr	r2, [pc, #372]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd f832 	bl	80019b4 <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004954:	f7fd f82e 	bl	80019b4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e280      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004966:	4b55      	ldr	r3, [pc, #340]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004972:	f7fd f84f 	bl	8001a14 <HAL_GetREVID>
 8004976:	4603      	mov	r3, r0
 8004978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800497c:	4293      	cmp	r3, r2
 800497e:	d817      	bhi.n	80049b0 <HAL_RCC_OscConfig+0x3ec>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	2b20      	cmp	r3, #32
 8004986:	d108      	bne.n	800499a <HAL_RCC_OscConfig+0x3d6>
 8004988:	4b4c      	ldr	r3, [pc, #304]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004990:	4a4a      	ldr	r2, [pc, #296]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004996:	6053      	str	r3, [r2, #4]
 8004998:	e02e      	b.n	80049f8 <HAL_RCC_OscConfig+0x434>
 800499a:	4b48      	ldr	r3, [pc, #288]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	069b      	lsls	r3, r3, #26
 80049a8:	4944      	ldr	r1, [pc, #272]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
 80049ae:	e023      	b.n	80049f8 <HAL_RCC_OscConfig+0x434>
 80049b0:	4b42      	ldr	r3, [pc, #264]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	493f      	ldr	r1, [pc, #252]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60cb      	str	r3, [r1, #12]
 80049c4:	e018      	b.n	80049f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049c6:	4b3d      	ldr	r3, [pc, #244]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3c      	ldr	r2, [pc, #240]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fc ffef 	bl	80019b4 <HAL_GetTick>
 80049d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049da:	f7fc ffeb 	bl	80019b4 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e23d      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049ec:	4b33      	ldr	r3, [pc, #204]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d036      	beq.n	8004a72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d019      	beq.n	8004a40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a10:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fc ffcc 	bl	80019b4 <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a20:	f7fc ffc8 	bl	80019b4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e21a      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a32:	4b22      	ldr	r3, [pc, #136]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x45c>
 8004a3e:	e018      	b.n	8004a72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a40:	4b1e      	ldr	r3, [pc, #120]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a44:	4a1d      	ldr	r2, [pc, #116]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fc ffb2 	bl	80019b4 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fc ffae 	bl	80019b4 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e200      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a66:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d039      	beq.n	8004af2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01c      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a92:	f7fc ff8f 	bl	80019b4 <HAL_GetTick>
 8004a96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a9a:	f7fc ff8b 	bl	80019b4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1dd      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x4d6>
 8004ab8:	e01b      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
 8004aba:	bf00      	nop
 8004abc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a9a      	ldr	r2, [pc, #616]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004acc:	f7fc ff72 	bl	80019b4 <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad4:	f7fc ff6e 	bl	80019b4 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1c0      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ae6:	4b92      	ldr	r3, [pc, #584]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8081 	beq.w	8004c02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b00:	4b8c      	ldr	r3, [pc, #560]	@ (8004d34 <HAL_RCC_OscConfig+0x770>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a8b      	ldr	r2, [pc, #556]	@ (8004d34 <HAL_RCC_OscConfig+0x770>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b0c:	f7fc ff52 	bl	80019b4 <HAL_GetTick>
 8004b10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fc ff4e 	bl	80019b4 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	@ 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1a0      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b26:	4b83      	ldr	r3, [pc, #524]	@ (8004d34 <HAL_RCC_OscConfig+0x770>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_OscConfig+0x584>
 8004b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b46:	e02d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x5e0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCC_OscConfig+0x5a6>
 8004b50:	4b77      	ldr	r3, [pc, #476]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b54:	4a76      	ldr	r2, [pc, #472]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5c:	4b74      	ldr	r3, [pc, #464]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b60:	4a73      	ldr	r2, [pc, #460]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b62:	f023 0304 	bic.w	r3, r3, #4
 8004b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b68:	e01c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x5e0>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c8>
 8004b72:	4b6f      	ldr	r3, [pc, #444]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b76:	4a6e      	ldr	r2, [pc, #440]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	4a6b      	ldr	r2, [pc, #428]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x5e0>
 8004b8c:	4b68      	ldr	r3, [pc, #416]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a67      	ldr	r2, [pc, #412]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	4b65      	ldr	r3, [pc, #404]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a64      	ldr	r2, [pc, #400]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fc ff02 	bl	80019b4 <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fc fefe 	bl	80019b4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e14e      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bca:	4b59      	ldr	r3, [pc, #356]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x5f0>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fc feec 	bl	80019b4 <HAL_GetTick>
 8004bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fc fee8 	bl	80019b4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e138      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ee      	bne.n	8004be0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 812d 	beq.w	8004e66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c0c:	4b48      	ldr	r3, [pc, #288]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c14:	2b18      	cmp	r3, #24
 8004c16:	f000 80bd 	beq.w	8004d94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	f040 809e 	bne.w	8004d60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c24:	4b42      	ldr	r3, [pc, #264]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a41      	ldr	r2, [pc, #260]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fc fec0 	bl	80019b4 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fc febc 	bl	80019b4 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e10e      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c4a:	4b39      	ldr	r3, [pc, #228]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c56:	4b36      	ldr	r3, [pc, #216]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c5a:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <HAL_RCC_OscConfig+0x774>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	4931      	ldr	r1, [pc, #196]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	3b01      	subs	r3, #1
 8004c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	025b      	lsls	r3, r3, #9
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	061b      	lsls	r3, r3, #24
 8004c9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ca0:	4923      	ldr	r1, [pc, #140]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ca6:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	4a21      	ldr	r2, [pc, #132]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb6:	4b21      	ldr	r3, [pc, #132]	@ (8004d3c <HAL_RCC_OscConfig+0x778>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cbe:	00d2      	lsls	r2, r2, #3
 8004cc0:	491b      	ldr	r1, [pc, #108]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	f023 020c 	bic.w	r2, r3, #12
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	4917      	ldr	r1, [pc, #92]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cd8:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f023 0202 	bic.w	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce4:	4912      	ldr	r1, [pc, #72]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cea:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	4a10      	ldr	r2, [pc, #64]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	4a0a      	ldr	r2, [pc, #40]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	4a07      	ldr	r2, [pc, #28]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <HAL_RCC_OscConfig+0x76c>)
 8004d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc fe45 	bl	80019b4 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d2c:	e011      	b.n	8004d52 <HAL_RCC_OscConfig+0x78e>
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
 8004d34:	58024800 	.word	0x58024800
 8004d38:	fffffc0c 	.word	0xfffffc0c
 8004d3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fc fe38 	bl	80019b4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e08a      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d52:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x77c>
 8004d5e:	e082      	b.n	8004e66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b43      	ldr	r3, [pc, #268]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a42      	ldr	r2, [pc, #264]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fc fe22 	bl	80019b4 <HAL_GetTick>
 8004d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc fe1e 	bl	80019b4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e070      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d86:	4b3a      	ldr	r3, [pc, #232]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x7b0>
 8004d92:	e068      	b.n	8004e66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d94:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d9a:	4b35      	ldr	r3, [pc, #212]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d031      	beq.n	8004e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f003 0203 	and.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d12a      	bne.n	8004e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d122      	bne.n	8004e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d11a      	bne.n	8004e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	0a5b      	lsrs	r3, r3, #9
 8004dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d111      	bne.n	8004e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d108      	bne.n	8004e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e02b      	b.n	8004e68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e10:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e14:	08db      	lsrs	r3, r3, #3
 8004e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d01f      	beq.n	8004e66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	4a11      	ldr	r2, [pc, #68]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e32:	f7fc fdbf 	bl	80019b4 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e38:	bf00      	nop
 8004e3a:	f7fc fdbb 	bl	80019b4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d0f9      	beq.n	8004e3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <HAL_RCC_OscConfig+0x8b0>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e52:	00d2      	lsls	r2, r2, #3
 8004e54:	4906      	ldr	r1, [pc, #24]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e5a:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	4a04      	ldr	r2, [pc, #16]	@ (8004e70 <HAL_RCC_OscConfig+0x8ac>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	@ 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	58024400 	.word	0x58024400
 8004e74:	ffff0007 	.word	0xffff0007

08004e78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e19c      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d910      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b87      	ldr	r3, [pc, #540]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 020f 	bic.w	r2, r3, #15
 8004ea2:	4985      	ldr	r1, [pc, #532]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b83      	ldr	r3, [pc, #524]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e184      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d010      	beq.n	8004eea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d908      	bls.n	8004eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ed8:	4b78      	ldr	r3, [pc, #480]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	4975      	ldr	r1, [pc, #468]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d010      	beq.n	8004f18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	4b70      	ldr	r3, [pc, #448]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d908      	bls.n	8004f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f06:	4b6d      	ldr	r3, [pc, #436]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	496a      	ldr	r1, [pc, #424]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	4b64      	ldr	r3, [pc, #400]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d908      	bls.n	8004f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f34:	4b61      	ldr	r3, [pc, #388]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	495e      	ldr	r1, [pc, #376]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	4b59      	ldr	r3, [pc, #356]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d908      	bls.n	8004f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f62:	4b56      	ldr	r3, [pc, #344]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	4953      	ldr	r1, [pc, #332]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	4b4d      	ldr	r3, [pc, #308]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d908      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f90:	4b4a      	ldr	r3, [pc, #296]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f023 020f 	bic.w	r2, r3, #15
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4947      	ldr	r1, [pc, #284]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d055      	beq.n	800505a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fae:	4b43      	ldr	r3, [pc, #268]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4940      	ldr	r1, [pc, #256]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d121      	bne.n	8005018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0f6      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fe0:	4b36      	ldr	r3, [pc, #216]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d115      	bne.n	8005018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0ea      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ff8:	4b30      	ldr	r3, [pc, #192]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0de      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005008:	4b2c      	ldr	r3, [pc, #176]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0d6      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005018:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f023 0207 	bic.w	r2, r3, #7
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4925      	ldr	r1, [pc, #148]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8005026:	4313      	orrs	r3, r2
 8005028:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502a:	f7fc fcc3 	bl	80019b4 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005030:	e00a      	b.n	8005048 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005032:	f7fc fcbf 	bl	80019b4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0be      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005048:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	429a      	cmp	r2, r3
 8005058:	d1eb      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	429a      	cmp	r2, r3
 8005074:	d208      	bcs.n	8005088 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f023 020f 	bic.w	r2, r3, #15
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	490e      	ldr	r1, [pc, #56]	@ (80050bc <HAL_RCC_ClockConfig+0x244>)
 8005084:	4313      	orrs	r3, r2
 8005086:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d214      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b08      	ldr	r3, [pc, #32]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 020f 	bic.w	r2, r3, #15
 800509e:	4906      	ldr	r1, [pc, #24]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b04      	ldr	r3, [pc, #16]	@ (80050b8 <HAL_RCC_ClockConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e086      	b.n	80051c6 <HAL_RCC_ClockConfig+0x34e>
 80050b8:	52002000 	.word	0x52002000
 80050bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	4b3f      	ldr	r3, [pc, #252]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050d8:	429a      	cmp	r2, r3
 80050da:	d208      	bcs.n	80050ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050dc:	4b3c      	ldr	r3, [pc, #240]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	4939      	ldr	r1, [pc, #228]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d010      	beq.n	800511c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005106:	429a      	cmp	r2, r3
 8005108:	d208      	bcs.n	800511c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800510a:	4b31      	ldr	r3, [pc, #196]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	492e      	ldr	r1, [pc, #184]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005118:	4313      	orrs	r3, r2
 800511a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	4b28      	ldr	r3, [pc, #160]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005134:	429a      	cmp	r2, r3
 8005136:	d208      	bcs.n	800514a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005138:	4b25      	ldr	r3, [pc, #148]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	4922      	ldr	r1, [pc, #136]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005146:	4313      	orrs	r3, r2
 8005148:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005162:	429a      	cmp	r2, r3
 8005164:	d208      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005166:	4b1a      	ldr	r3, [pc, #104]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4917      	ldr	r1, [pc, #92]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005174:	4313      	orrs	r3, r2
 8005176:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005178:	f000 f834 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b14      	ldr	r3, [pc, #80]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	4912      	ldr	r1, [pc, #72]	@ (80051d4 <HAL_RCC_ClockConfig+0x35c>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005196:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <HAL_RCC_ClockConfig+0x358>)
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	4a0d      	ldr	r2, [pc, #52]	@ (80051d4 <HAL_RCC_ClockConfig+0x35c>)
 80051a0:	5cd3      	ldrb	r3, [r2, r3]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	4a0a      	ldr	r2, [pc, #40]	@ (80051d8 <HAL_RCC_ClockConfig+0x360>)
 80051ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051b0:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <HAL_RCC_ClockConfig+0x364>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051b6:	4b0a      	ldr	r3, [pc, #40]	@ (80051e0 <HAL_RCC_ClockConfig+0x368>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fc fbb0 	bl	8001920 <HAL_InitTick>
 80051c0:	4603      	mov	r3, r0
 80051c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400
 80051d4:	0800db68 	.word	0x0800db68
 80051d8:	24000004 	.word	0x24000004
 80051dc:	24000000 	.word	0x24000000
 80051e0:	24000008 	.word	0x24000008

080051e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ea:	4bb3      	ldr	r3, [pc, #716]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f2:	2b18      	cmp	r3, #24
 80051f4:	f200 8155 	bhi.w	80054a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80051f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <HAL_RCC_GetSysClockFreq+0x1c>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005265 	.word	0x08005265
 8005204:	080054a3 	.word	0x080054a3
 8005208:	080054a3 	.word	0x080054a3
 800520c:	080054a3 	.word	0x080054a3
 8005210:	080054a3 	.word	0x080054a3
 8005214:	080054a3 	.word	0x080054a3
 8005218:	080054a3 	.word	0x080054a3
 800521c:	080054a3 	.word	0x080054a3
 8005220:	0800528b 	.word	0x0800528b
 8005224:	080054a3 	.word	0x080054a3
 8005228:	080054a3 	.word	0x080054a3
 800522c:	080054a3 	.word	0x080054a3
 8005230:	080054a3 	.word	0x080054a3
 8005234:	080054a3 	.word	0x080054a3
 8005238:	080054a3 	.word	0x080054a3
 800523c:	080054a3 	.word	0x080054a3
 8005240:	08005291 	.word	0x08005291
 8005244:	080054a3 	.word	0x080054a3
 8005248:	080054a3 	.word	0x080054a3
 800524c:	080054a3 	.word	0x080054a3
 8005250:	080054a3 	.word	0x080054a3
 8005254:	080054a3 	.word	0x080054a3
 8005258:	080054a3 	.word	0x080054a3
 800525c:	080054a3 	.word	0x080054a3
 8005260:	08005297 	.word	0x08005297
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005264:	4b94      	ldr	r3, [pc, #592]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005270:	4b91      	ldr	r3, [pc, #580]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	08db      	lsrs	r3, r3, #3
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	4a90      	ldr	r2, [pc, #576]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
 8005280:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005282:	e111      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005284:	4b8d      	ldr	r3, [pc, #564]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005286:	61bb      	str	r3, [r7, #24]
      break;
 8005288:	e10e      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800528a:	4b8d      	ldr	r3, [pc, #564]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800528c:	61bb      	str	r3, [r7, #24]
      break;
 800528e:	e10b      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005290:	4b8c      	ldr	r3, [pc, #560]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005292:	61bb      	str	r3, [r7, #24]
      break;
 8005294:	e108      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005296:	4b88      	ldr	r3, [pc, #544]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052a0:	4b85      	ldr	r3, [pc, #532]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052ac:	4b82      	ldr	r3, [pc, #520]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052b6:	4b80      	ldr	r3, [pc, #512]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ba:	08db      	lsrs	r3, r3, #3
 80052bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80e1 	beq.w	800549c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f000 8083 	beq.w	80053e8 <HAL_RCC_GetSysClockFreq+0x204>
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	f200 80a1 	bhi.w	800542c <HAL_RCC_GetSysClockFreq+0x248>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x114>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d056      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052f6:	e099      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f8:	4b6f      	ldr	r3, [pc, #444]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d02d      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005304:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	4a6b      	ldr	r2, [pc, #428]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b62      	ldr	r3, [pc, #392]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005342:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80054c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800535e:	e087      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80054cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b51      	ldr	r3, [pc, #324]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a02 	vldr	s12, [r7, #8]
 8005386:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80054c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053a2:	e065      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80054d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b40      	ldr	r3, [pc, #256]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80054c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053e6:	e043      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80054d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b2f      	ldr	r3, [pc, #188]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a02 	vldr	s12, [r7, #8]
 800540e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80054c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542a:	e021      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80054d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b1e      	ldr	r3, [pc, #120]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005452:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80054c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800546e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005470:	4b11      	ldr	r3, [pc, #68]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800547a:	3301      	adds	r3, #1
 800547c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005488:	edd7 6a07 	vldr	s13, [r7, #28]
 800548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005494:	ee17 3a90 	vmov	r3, s15
 8005498:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054a2:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054a4:	61bb      	str	r3, [r7, #24]
      break;
 80054a6:	bf00      	nop
  }

  return sysclockfreq;
 80054a8:	69bb      	ldr	r3, [r7, #24]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3724      	adds	r7, #36	@ 0x24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	58024400 	.word	0x58024400
 80054bc:	03d09000 	.word	0x03d09000
 80054c0:	003d0900 	.word	0x003d0900
 80054c4:	017d7840 	.word	0x017d7840
 80054c8:	46000000 	.word	0x46000000
 80054cc:	4c742400 	.word	0x4c742400
 80054d0:	4a742400 	.word	0x4a742400
 80054d4:	4bbebc20 	.word	0x4bbebc20

080054d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054de:	f7ff fe81 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b10      	ldr	r3, [pc, #64]	@ (8005528 <HAL_RCC_GetHCLKFreq+0x50>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490f      	ldr	r1, [pc, #60]	@ (800552c <HAL_RCC_GetHCLKFreq+0x54>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <HAL_RCC_GetHCLKFreq+0x50>)
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	4a09      	ldr	r2, [pc, #36]	@ (800552c <HAL_RCC_GetHCLKFreq+0x54>)
 8005506:	5cd3      	ldrb	r3, [r2, r3]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	4a07      	ldr	r2, [pc, #28]	@ (8005530 <HAL_RCC_GetHCLKFreq+0x58>)
 8005514:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005516:	4a07      	ldr	r2, [pc, #28]	@ (8005534 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800551c:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <HAL_RCC_GetHCLKFreq+0x58>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	58024400 	.word	0x58024400
 800552c:	0800db68 	.word	0x0800db68
 8005530:	24000004 	.word	0x24000004
 8005534:	24000000 	.word	0x24000000

08005538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800553c:	f7ff ffcc 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b06      	ldr	r3, [pc, #24]	@ (800555c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	091b      	lsrs	r3, r3, #4
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4904      	ldr	r1, [pc, #16]	@ (8005560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	58024400 	.word	0x58024400
 8005560:	0800db68 	.word	0x0800db68

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005568:	f7ff ffb6 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4904      	ldr	r1, [pc, #16]	@ (800558c <HAL_RCC_GetPCLK2Freq+0x28>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	58024400 	.word	0x58024400
 800558c:	0800db68 	.word	0x0800db68

08005590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005594:	b0ca      	sub	sp, #296	@ 0x128
 8005596:	af00      	add	r7, sp, #0
 8005598:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055b4:	2500      	movs	r5, #0
 80055b6:	ea54 0305 	orrs.w	r3, r4, r5
 80055ba:	d049      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055c6:	d02f      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055cc:	d828      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d2:	d01a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d8:	d822      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055e2:	d007      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055e4:	e01c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e6:	4bb8      	ldr	r3, [pc, #736]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	4ab7      	ldr	r2, [pc, #732]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055f2:	e01a      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f8:	3308      	adds	r3, #8
 80055fa:	2102      	movs	r1, #2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fc8f 	bl	8006f20 <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005608:	e00f      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	3328      	adds	r3, #40	@ 0x28
 8005610:	2102      	movs	r1, #2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fd36 	bl	8007084 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800561e:	e004      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005626:	e000      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005632:	4ba5      	ldr	r3, [pc, #660]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005636:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005640:	4aa1      	ldr	r2, [pc, #644]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005642:	430b      	orrs	r3, r1
 8005644:	6513      	str	r3, [r2, #80]	@ 0x50
 8005646:	e003      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800564c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800565c:	f04f 0900 	mov.w	r9, #0
 8005660:	ea58 0309 	orrs.w	r3, r8, r9
 8005664:	d047      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	2b04      	cmp	r3, #4
 800566e:	d82a      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005670:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	0800568d 	.word	0x0800568d
 800567c:	0800569b 	.word	0x0800569b
 8005680:	080056b1 	.word	0x080056b1
 8005684:	080056cf 	.word	0x080056cf
 8005688:	080056cf 	.word	0x080056cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568c:	4b8e      	ldr	r3, [pc, #568]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	4a8d      	ldr	r2, [pc, #564]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005698:	e01a      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569e:	3308      	adds	r3, #8
 80056a0:	2100      	movs	r1, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 fc3c 	bl	8006f20 <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ae:	e00f      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	3328      	adds	r3, #40	@ 0x28
 80056b6:	2100      	movs	r1, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 fce3 	bl	8007084 <RCCEx_PLL3_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c4:	e004      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056cc:	e000      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056d8:	4b7b      	ldr	r3, [pc, #492]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	f023 0107 	bic.w	r1, r3, #7
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e6:	4a78      	ldr	r2, [pc, #480]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005702:	f04f 0b00 	mov.w	fp, #0
 8005706:	ea5a 030b 	orrs.w	r3, sl, fp
 800570a:	d04c      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005716:	d030      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800571c:	d829      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800571e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005720:	d02d      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005722:	2bc0      	cmp	r3, #192	@ 0xc0
 8005724:	d825      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005726:	2b80      	cmp	r3, #128	@ 0x80
 8005728:	d018      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800572a:	2b80      	cmp	r3, #128	@ 0x80
 800572c:	d821      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005732:	2b40      	cmp	r3, #64	@ 0x40
 8005734:	d007      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005736:	e01c      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4b63      	ldr	r3, [pc, #396]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	4a62      	ldr	r2, [pc, #392]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005744:	e01c      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	3308      	adds	r3, #8
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fbe6 	bl	8006f20 <RCCEx_PLL2_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800575a:	e011      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005760:	3328      	adds	r3, #40	@ 0x28
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fc8d 	bl	8007084 <RCCEx_PLL3_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005770:	e006      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800577e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005788:	4b4f      	ldr	r3, [pc, #316]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005796:	4a4c      	ldr	r2, [pc, #304]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6513      	str	r3, [r2, #80]	@ 0x50
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80057bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d053      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057d2:	d035      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80057d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057d8:	d82e      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80057de:	d031      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80057e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80057e4:	d828      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ea:	d01a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80057ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057f0:	d822      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80057f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057fa:	d007      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80057fc:	e01c      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fe:	4b32      	ldr	r3, [pc, #200]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	4a31      	ldr	r2, [pc, #196]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800580a:	e01c      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005810:	3308      	adds	r3, #8
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fb83 	bl	8006f20 <RCCEx_PLL2_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005820:	e011      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	3328      	adds	r3, #40	@ 0x28
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fc2a 	bl	8007084 <RCCEx_PLL3_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005836:	e006      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800583e:	e002      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800585e:	4a1a      	ldr	r2, [pc, #104]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005860:	430b      	orrs	r3, r1
 8005862:	6593      	str	r3, [r2, #88]	@ 0x58
 8005864:	e003      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800587a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800587e:	2300      	movs	r3, #0
 8005880:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005884:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005888:	460b      	mov	r3, r1
 800588a:	4313      	orrs	r3, r2
 800588c:	d056      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005896:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800589a:	d038      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800589c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a0:	d831      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058a6:	d034      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80058a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058ac:	d82b      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058b2:	d01d      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058b8:	d825      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058c4:	e01f      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4aa1      	ldr	r2, [pc, #644]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058d8:	e01c      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3308      	adds	r3, #8
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fb1c 	bl	8006f20 <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058ee:	e011      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	3328      	adds	r3, #40	@ 0x28
 80058f6:	2100      	movs	r1, #0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fbc3 	bl	8007084 <RCCEx_PLL3_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800591c:	4b8e      	ldr	r3, [pc, #568]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005920:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005928:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800592c:	4a8a      	ldr	r2, [pc, #552]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800592e:	430b      	orrs	r3, r1
 8005930:	6593      	str	r3, [r2, #88]	@ 0x58
 8005932:	e003      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005952:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d03a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005962:	2b30      	cmp	r3, #48	@ 0x30
 8005964:	d01f      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005966:	2b30      	cmp	r3, #48	@ 0x30
 8005968:	d819      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800596a:	2b20      	cmp	r3, #32
 800596c:	d00c      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800596e:	2b20      	cmp	r3, #32
 8005970:	d815      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d019      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005976:	2b10      	cmp	r3, #16
 8005978:	d111      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597a:	4b77      	ldr	r3, [pc, #476]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	4a76      	ldr	r2, [pc, #472]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005986:	e011      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	3308      	adds	r3, #8
 800598e:	2102      	movs	r1, #2
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fac5 	bl	8006f20 <RCCEx_PLL2_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a4:	e002      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059b4:	4b68      	ldr	r3, [pc, #416]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c2:	4a65      	ldr	r2, [pc, #404]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c4:	430b      	orrs	r3, r1
 80059c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059c8:	e003      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80059de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059e2:	2300      	movs	r3, #0
 80059e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4313      	orrs	r3, r2
 80059f0:	d051      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059fc:	d035      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80059fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a02:	d82e      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a08:	d031      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a0e:	d828      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a14:	d01a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1a:	d822      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a24:	d007      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a26:	e01c      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a28:	4b4b      	ldr	r3, [pc, #300]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a34:	e01c      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fa6e 	bl	8006f20 <RCCEx_PLL2_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a4a:	e011      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	3328      	adds	r3, #40	@ 0x28
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 fb15 	bl	8007084 <RCCEx_PLL3_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a60:	e006      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a78:	4b37      	ldr	r3, [pc, #220]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a86:	4a34      	ldr	r2, [pc, #208]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a8c:	e003      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d056      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac0:	d033      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac6:	d82c      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005acc:	d02f      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad2:	d826      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ad8:	d02b      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ade:	d820      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae4:	d012      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aea:	d81a      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d022      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af4:	d115      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	3308      	adds	r3, #8
 8005afc:	2101      	movs	r1, #1
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fa0e 	bl	8006f20 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e015      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	3328      	adds	r3, #40	@ 0x28
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 fab5 	bl	8007084 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b20:	e00a      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b28:	e006      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10d      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4e:	4a02      	ldr	r2, [pc, #8]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b54:	e006      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d055      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b90:	d033      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b96:	d82c      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9c:	d02f      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba2:	d826      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ba4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ba8:	d02b      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bae:	d820      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb4:	d012      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bba:	d81a      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d022      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005bc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bc4:	d115      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	3308      	adds	r3, #8
 8005bcc:	2101      	movs	r1, #1
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f9a6 	bl	8006f20 <RCCEx_PLL2_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bda:	e015      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be0:	3328      	adds	r3, #40	@ 0x28
 8005be2:	2101      	movs	r1, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fa4d 	bl	8007084 <RCCEx_PLL3_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf8:	e006      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e004      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c10:	4ba3      	ldr	r3, [pc, #652]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c14:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c20:	4a9f      	ldr	r2, [pc, #636]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d037      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c5a:	d00e      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c60:	d816      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d018      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c6a:	d111      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	4a8b      	ldr	r2, [pc, #556]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c78:	e00f      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	3308      	adds	r3, #8
 8005c80:	2101      	movs	r1, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f94c 	bl	8006f20 <RCCEx_PLL2_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c8e:	e004      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c96:	e000      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a7b      	ldr	r2, [pc, #492]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005cd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d039      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d81c      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d01 	.word	0x08005d01
 8005cf8:	08005d0f 	.word	0x08005d0f
 8005cfc:	08005d2d 	.word	0x08005d2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d00:	4b67      	ldr	r3, [pc, #412]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	4a66      	ldr	r2, [pc, #408]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d0c:	e00f      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	3308      	adds	r3, #8
 8005d14:	2102      	movs	r1, #2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f902 	bl	8006f20 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d22:	e004      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d36:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3a:	f023 0103 	bic.w	r1, r3, #3
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d44:	4a56      	ldr	r2, [pc, #344]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d4a:	e003      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f000 809f 	beq.w	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d76:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d82:	f7fb fe17 	bl	80019b4 <HAL_GetTick>
 8005d86:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8a:	e00b      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fb fe12 	bl	80019b4 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b64      	cmp	r3, #100	@ 0x64
 8005d9a:	d903      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da2:	e005      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ed      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d179      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005db8:	4b39      	ldr	r3, [pc, #228]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dc4:	4053      	eors	r3, r2
 8005dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d015      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dce:	4b34      	ldr	r3, [pc, #208]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dda:	4b31      	ldr	r3, [pc, #196]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dde:	4a30      	ldr	r2, [pc, #192]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005de6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dea:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005df0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005df2:	4a2b      	ldr	r2, [pc, #172]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e06:	d118      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fb fdd4 	bl	80019b4 <HAL_GetTick>
 8005e0c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e10:	e00d      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fb fdcf 	bl	80019b4 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e1c:	1ad2      	subs	r2, r2, r3
 8005e1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d903      	bls.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0eb      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d129      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e52:	d10e      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e54:	4b12      	ldr	r3, [pc, #72]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e64:	091a      	lsrs	r2, r3, #4
 8005e66:	4b10      	ldr	r3, [pc, #64]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6113      	str	r3, [r2, #16]
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005e72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e7c:	6113      	str	r3, [r2, #16]
 8005e7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e80:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8e:	4a04      	ldr	r2, [pc, #16]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e94:	e00e      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005e9e:	e009      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58024800 	.word	0x58024800
 8005ea8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f002 0301 	and.w	r3, r2, #1
 8005ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f000 8089 	beq.w	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005edc:	2b28      	cmp	r3, #40	@ 0x28
 8005ede:	d86b      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005fc1 	.word	0x08005fc1
 8005eec:	08005fb9 	.word	0x08005fb9
 8005ef0:	08005fb9 	.word	0x08005fb9
 8005ef4:	08005fb9 	.word	0x08005fb9
 8005ef8:	08005fb9 	.word	0x08005fb9
 8005efc:	08005fb9 	.word	0x08005fb9
 8005f00:	08005fb9 	.word	0x08005fb9
 8005f04:	08005fb9 	.word	0x08005fb9
 8005f08:	08005f8d 	.word	0x08005f8d
 8005f0c:	08005fb9 	.word	0x08005fb9
 8005f10:	08005fb9 	.word	0x08005fb9
 8005f14:	08005fb9 	.word	0x08005fb9
 8005f18:	08005fb9 	.word	0x08005fb9
 8005f1c:	08005fb9 	.word	0x08005fb9
 8005f20:	08005fb9 	.word	0x08005fb9
 8005f24:	08005fb9 	.word	0x08005fb9
 8005f28:	08005fa3 	.word	0x08005fa3
 8005f2c:	08005fb9 	.word	0x08005fb9
 8005f30:	08005fb9 	.word	0x08005fb9
 8005f34:	08005fb9 	.word	0x08005fb9
 8005f38:	08005fb9 	.word	0x08005fb9
 8005f3c:	08005fb9 	.word	0x08005fb9
 8005f40:	08005fb9 	.word	0x08005fb9
 8005f44:	08005fb9 	.word	0x08005fb9
 8005f48:	08005fc1 	.word	0x08005fc1
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	08005fb9 	.word	0x08005fb9
 8005f54:	08005fb9 	.word	0x08005fb9
 8005f58:	08005fb9 	.word	0x08005fb9
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	08005fb9 	.word	0x08005fb9
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fb9 	.word	0x08005fb9
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fb9 	.word	0x08005fb9
 8005f80:	08005fb9 	.word	0x08005fb9
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fc1 	.word	0x08005fc1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	3308      	adds	r3, #8
 8005f92:	2101      	movs	r1, #1
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 ffc3 	bl	8006f20 <RCCEx_PLL2_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fa0:	e00f      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa6:	3328      	adds	r3, #40	@ 0x28
 8005fa8:	2101      	movs	r1, #1
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 f86a 	bl	8007084 <RCCEx_PLL3_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fb6:	e004      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fbe:	e000      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fca:	4bbf      	ldr	r3, [pc, #764]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fd8:	4abb      	ldr	r2, [pc, #748]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fde:	e003      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f002 0302 	and.w	r3, r2, #2
 8005ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ffe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006002:	460b      	mov	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	d041      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800600e:	2b05      	cmp	r3, #5
 8006010:	d824      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006065 	.word	0x08006065
 800601c:	08006031 	.word	0x08006031
 8006020:	08006047 	.word	0x08006047
 8006024:	08006065 	.word	0x08006065
 8006028:	08006065 	.word	0x08006065
 800602c:	08006065 	.word	0x08006065
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	3308      	adds	r3, #8
 8006036:	2101      	movs	r1, #1
 8006038:	4618      	mov	r0, r3
 800603a:	f000 ff71 	bl	8006f20 <RCCEx_PLL2_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006044:	e00f      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	3328      	adds	r3, #40	@ 0x28
 800604c:	2101      	movs	r1, #1
 800604e:	4618      	mov	r0, r3
 8006050:	f001 f818 	bl	8007084 <RCCEx_PLL3_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800605a:	e004      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006062:	e000      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800606e:	4b96      	ldr	r3, [pc, #600]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006072:	f023 0107 	bic.w	r1, r3, #7
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800607c:	4a92      	ldr	r2, [pc, #584]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800607e:	430b      	orrs	r3, r1
 8006080:	6553      	str	r3, [r2, #84]	@ 0x54
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f002 0304 	and.w	r3, r2, #4
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d044      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d825      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	0800610d 	.word	0x0800610d
 80060c4:	080060d9 	.word	0x080060d9
 80060c8:	080060ef 	.word	0x080060ef
 80060cc:	0800610d 	.word	0x0800610d
 80060d0:	0800610d 	.word	0x0800610d
 80060d4:	0800610d 	.word	0x0800610d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	3308      	adds	r3, #8
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 ff1d 	bl	8006f20 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3328      	adds	r3, #40	@ 0x28
 80060f4:	2101      	movs	r1, #1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 ffc4 	bl	8007084 <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006116:	4b6c      	ldr	r3, [pc, #432]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611a:	f023 0107 	bic.w	r1, r3, #7
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006126:	4a68      	ldr	r2, [pc, #416]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006128:	430b      	orrs	r3, r1
 800612a:	6593      	str	r3, [r2, #88]	@ 0x58
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f002 0320 	and.w	r3, r2, #32
 8006142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800614c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d055      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006162:	d033      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006168:	d82c      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616e:	d02f      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006174:	d826      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800617a:	d02b      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800617c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006180:	d820      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006186:	d012      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800618c:	d81a      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d022      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006196:	d115      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	3308      	adds	r3, #8
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 febd 	bl	8006f20 <RCCEx_PLL2_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061ac:	e015      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b2:	3328      	adds	r3, #40	@ 0x28
 80061b4:	2102      	movs	r1, #2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 ff64 	bl	8007084 <RCCEx_PLL3_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061c2:	e00a      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ca:	e006      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061cc:	bf00      	nop
 80061ce:	e004      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061d0:	bf00      	nop
 80061d2:	e002      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061d4:	bf00      	nop
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10b      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061e2:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	4a35      	ldr	r2, [pc, #212]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80061f8:	e003      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800620e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006212:	2300      	movs	r3, #0
 8006214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006218:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d058      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800622a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800622e:	d033      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006230:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006234:	d82c      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623a:	d02f      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006240:	d826      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006246:	d02b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006248:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800624c:	d820      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800624e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006252:	d012      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006258:	d81a      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d022      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d115      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	3308      	adds	r3, #8
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fe57 	bl	8006f20 <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006278:	e015      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627e:	3328      	adds	r3, #40	@ 0x28
 8006280:	2102      	movs	r1, #2
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fefe 	bl	8007084 <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800628e:	e00a      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006296:	e006      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006298:	bf00      	nop
 800629a:	e004      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800629c:	bf00      	nop
 800629e:	e002      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062a0:	bf00      	nop
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10e      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062be:	4a02      	ldr	r2, [pc, #8]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80062e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062e4:	2300      	movs	r3, #0
 80062e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80062ee:	460b      	mov	r3, r1
 80062f0:	4313      	orrs	r3, r2
 80062f2:	d055      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006300:	d033      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006302:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006306:	d82c      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630c:	d02f      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800630e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006312:	d826      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006314:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006318:	d02b      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800631a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800631e:	d820      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006324:	d012      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800632a:	d81a      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d022      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006334:	d115      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633a:	3308      	adds	r3, #8
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fdee 	bl	8006f20 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800634a:	e015      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006350:	3328      	adds	r3, #40	@ 0x28
 8006352:	2102      	movs	r1, #2
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fe95 	bl	8007084 <RCCEx_PLL3_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006360:	e00a      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006368:	e006      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006380:	4ba1      	ldr	r3, [pc, #644]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006384:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006390:	4a9d      	ldr	r2, [pc, #628]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006392:	430b      	orrs	r3, r1
 8006394:	6593      	str	r3, [r2, #88]	@ 0x58
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f002 0308 	and.w	r3, r2, #8
 80063ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80063ba:	460b      	mov	r3, r1
 80063bc:	4313      	orrs	r3, r2
 80063be:	d01e      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	3328      	adds	r3, #40	@ 0x28
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fe54 	bl	8007084 <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063e8:	4b87      	ldr	r3, [pc, #540]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f8:	4a83      	ldr	r2, [pc, #524]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fa:	430b      	orrs	r3, r1
 80063fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f002 0310 	and.w	r3, r2, #16
 800640a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800640e:	2300      	movs	r3, #0
 8006410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006414:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006418:	460b      	mov	r3, r1
 800641a:	4313      	orrs	r3, r2
 800641c:	d01e      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800642a:	d10c      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	3328      	adds	r3, #40	@ 0x28
 8006432:	2102      	movs	r1, #2
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fe25 	bl	8007084 <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006446:	4b70      	ldr	r3, [pc, #448]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006456:	4a6c      	ldr	r2, [pc, #432]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006458:	430b      	orrs	r3, r1
 800645a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006472:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d03e      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006488:	d022      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800648a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800648e:	d81b      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006498:	d00b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800649a:	e015      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	3308      	adds	r3, #8
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fd3b 	bl	8006f20 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064b0:	e00f      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	3328      	adds	r3, #40	@ 0x28
 80064b8:	2102      	movs	r1, #2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fde2 	bl	8007084 <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80064d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064da:	4b4b      	ldr	r3, [pc, #300]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064ea:	4a47      	ldr	r2, [pc, #284]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f0:	e003      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006506:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006508:	2300      	movs	r3, #0
 800650a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800650c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006510:	460b      	mov	r3, r1
 8006512:	4313      	orrs	r3, r2
 8006514:	d03b      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006522:	d01f      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006528:	d818      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800652a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800652e:	d003      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006534:	d007      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006536:	e011      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006538:	4b33      	ldr	r3, [pc, #204]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	4a32      	ldr	r2, [pc, #200]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800653e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006544:	e00f      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	3328      	adds	r3, #40	@ 0x28
 800654c:	2101      	movs	r1, #1
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fd98 	bl	8007084 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800656e:	4b26      	ldr	r3, [pc, #152]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657e:	4a22      	ldr	r2, [pc, #136]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6553      	str	r3, [r2, #84]	@ 0x54
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800659a:	673b      	str	r3, [r7, #112]	@ 0x70
 800659c:	2300      	movs	r3, #0
 800659e:	677b      	str	r3, [r7, #116]	@ 0x74
 80065a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d034      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80065b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b8:	d007      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80065ba:	e011      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065bc:	4b12      	ldr	r3, [pc, #72]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065c8:	e00e      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	3308      	adds	r3, #8
 80065d0:	2102      	movs	r1, #2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fca4 	bl	8006f20 <RCCEx_PLL2_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10d      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065f0:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fe:	4a02      	ldr	r2, [pc, #8]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006600:	430b      	orrs	r3, r1
 8006602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006622:	2300      	movs	r3, #0
 8006624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006626:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800662a:	460b      	mov	r3, r1
 800662c:	4313      	orrs	r3, r2
 800662e:	d00c      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	3328      	adds	r3, #40	@ 0x28
 8006636:	2102      	movs	r1, #2
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fd23 	bl	8007084 <RCCEx_PLL3_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006656:	663b      	str	r3, [r7, #96]	@ 0x60
 8006658:	2300      	movs	r3, #0
 800665a:	667b      	str	r3, [r7, #100]	@ 0x64
 800665c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d038      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800666e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006672:	d018      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006678:	d811      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800667a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667e:	d014      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006684:	d80b      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d011      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800668a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668e:	d106      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006690:	4bc3      	ldr	r3, [pc, #780]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	4ac2      	ldr	r2, [pc, #776]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800669a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800669c:	e008      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a4:	e004      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066b8:	4bb9      	ldr	r3, [pc, #740]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c8:	4ab5      	ldr	r2, [pc, #724]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ca:	430b      	orrs	r3, r1
 80066cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80066e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066e6:	2300      	movs	r3, #0
 80066e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80066ee:	460b      	mov	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	d009      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066f4:	4baa      	ldr	r3, [pc, #680]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006702:	4aa7      	ldr	r2, [pc, #668]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006714:	653b      	str	r3, [r7, #80]	@ 0x50
 8006716:	2300      	movs	r3, #0
 8006718:	657b      	str	r3, [r7, #84]	@ 0x54
 800671a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d00a      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006724:	4b9e      	ldr	r3, [pc, #632]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006734:	4a9a      	ldr	r2, [pc, #616]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006736:	430b      	orrs	r3, r1
 8006738:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800673a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006748:	2300      	movs	r3, #0
 800674a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800674c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006756:	4b92      	ldr	r3, [pc, #584]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800675a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006764:	4a8e      	ldr	r2, [pc, #568]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006766:	430b      	orrs	r3, r1
 8006768:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006776:	643b      	str	r3, [r7, #64]	@ 0x40
 8006778:	2300      	movs	r3, #0
 800677a:	647b      	str	r3, [r7, #68]	@ 0x44
 800677c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d00e      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006786:	4b86      	ldr	r3, [pc, #536]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	4a85      	ldr	r2, [pc, #532]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800678c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006790:	6113      	str	r3, [r2, #16]
 8006792:	4b83      	ldr	r3, [pc, #524]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006794:	6919      	ldr	r1, [r3, #16]
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800679e:	4a80      	ldr	r2, [pc, #512]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067b2:	2300      	movs	r3, #0
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067c0:	4b77      	ldr	r3, [pc, #476]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	4a74      	ldr	r2, [pc, #464]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e2:	2300      	movs	r3, #0
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d00a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067f0:	4b6b      	ldr	r3, [pc, #428]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006800:	4a67      	ldr	r2, [pc, #412]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006802:	430b      	orrs	r3, r1
 8006804:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	2100      	movs	r1, #0
 8006810:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006818:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d011      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	3308      	adds	r3, #8
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fb78 	bl	8006f20 <RCCEx_PLL2_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	2100      	movs	r1, #0
 8006850:	6239      	str	r1, [r7, #32]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
 8006858:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800685c:	460b      	mov	r3, r1
 800685e:	4313      	orrs	r3, r2
 8006860:	d011      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	3308      	adds	r3, #8
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fb58 	bl	8006f20 <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	2100      	movs	r1, #0
 8006890:	61b9      	str	r1, [r7, #24]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800689c:	460b      	mov	r3, r1
 800689e:	4313      	orrs	r3, r2
 80068a0:	d011      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	3308      	adds	r3, #8
 80068a8:	2102      	movs	r1, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fb38 	bl	8006f20 <RCCEx_PLL2_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	2100      	movs	r1, #0
 80068d0:	6139      	str	r1, [r7, #16]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068dc:	460b      	mov	r3, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	d011      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	3328      	adds	r3, #40	@ 0x28
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fbca 	bl	8007084 <RCCEx_PLL3_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80068f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	2100      	movs	r1, #0
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800691c:	460b      	mov	r3, r1
 800691e:	4313      	orrs	r3, r2
 8006920:	d011      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	3328      	adds	r3, #40	@ 0x28
 8006928:	2101      	movs	r1, #1
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fbaa 	bl	8007084 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	2100      	movs	r1, #0
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	e9d7 1200 	ldrd	r1, r2, [r7]
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d011      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	3328      	adds	r3, #40	@ 0x28
 8006968:	2102      	movs	r1, #2
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fb8a 	bl	8007084 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006986:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
}
 8006994:	4618      	mov	r0, r3
 8006996:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800699a:	46bd      	mov	sp, r7
 800699c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069a0:	58024400 	.word	0x58024400

080069a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069a8:	f7fe fd96 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 80069ac:	4602      	mov	r2, r0
 80069ae:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	091b      	lsrs	r3, r3, #4
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	4904      	ldr	r1, [pc, #16]	@ (80069cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069ba:	5ccb      	ldrb	r3, [r1, r3]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	58024400 	.word	0x58024400
 80069cc:	0800db68 	.word	0x0800db68

080069d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b089      	sub	sp, #36	@ 0x24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069e2:	4b9f      	ldr	r3, [pc, #636]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e6:	0b1b      	lsrs	r3, r3, #12
 80069e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069ee:	4b9c      	ldr	r3, [pc, #624]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069fa:	4b99      	ldr	r3, [pc, #612]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8111 	beq.w	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f000 8083 	beq.w	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f200 80a1 	bhi.w	8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d056      	beq.n	8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a3a:	e099      	b.n	8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a3c:	4b88      	ldr	r3, [pc, #544]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d02d      	beq.n	8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a48:	4b85      	ldr	r3, [pc, #532]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	4a84      	ldr	r2, [pc, #528]	@ (8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b7b      	ldr	r3, [pc, #492]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006aa2:	e087      	b.n	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae6:	e065      	b.n	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b59      	ldr	r3, [pc, #356]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b2a:	e043      	b.n	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b48      	ldr	r3, [pc, #288]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b6e:	e021      	b.n	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b82:	4b37      	ldr	r3, [pc, #220]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb8:	0a5b      	lsrs	r3, r3, #9
 8006bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bda:	ee17 2a90 	vmov	r2, s15
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006be2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c08:	ee17 2a90 	vmov	r2, s15
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c10:	4b13      	ldr	r3, [pc, #76]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	0e1b      	lsrs	r3, r3, #24
 8006c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c36:	ee17 2a90 	vmov	r2, s15
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c3e:	e008      	b.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	609a      	str	r2, [r3, #8]
}
 8006c52:	bf00      	nop
 8006c54:	3724      	adds	r7, #36	@ 0x24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	58024400 	.word	0x58024400
 8006c64:	03d09000 	.word	0x03d09000
 8006c68:	46000000 	.word	0x46000000
 8006c6c:	4c742400 	.word	0x4c742400
 8006c70:	4a742400 	.word	0x4a742400
 8006c74:	4bbebc20 	.word	0x4bbebc20

08006c78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b089      	sub	sp, #36	@ 0x24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c80:	4ba1      	ldr	r3, [pc, #644]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c8a:	4b9f      	ldr	r3, [pc, #636]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8e:	0d1b      	lsrs	r3, r3, #20
 8006c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c96:	4b9c      	ldr	r3, [pc, #624]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006ca2:	4b99      	ldr	r3, [pc, #612]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca6:	08db      	lsrs	r3, r3, #3
 8006ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8111 	beq.w	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	f000 8083 	beq.w	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	f200 80a1 	bhi.w	8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d056      	beq.n	8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ce2:	e099      	b.n	8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce4:	4b88      	ldr	r3, [pc, #544]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d02d      	beq.n	8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cf0:	4b85      	ldr	r3, [pc, #532]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	08db      	lsrs	r3, r3, #3
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	4a84      	ldr	r2, [pc, #528]	@ (8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d4a:	e087      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d8e:	e065      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b59      	ldr	r3, [pc, #356]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd2:	e043      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b48      	ldr	r3, [pc, #288]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	e021      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b37      	ldr	r3, [pc, #220]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	0a5b      	lsrs	r3, r3, #9
 8006e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e82:	ee17 2a90 	vmov	r2, s15
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb0:	ee17 2a90 	vmov	r2, s15
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006eb8:	4b13      	ldr	r3, [pc, #76]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	0e1b      	lsrs	r3, r3, #24
 8006ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ede:	ee17 2a90 	vmov	r2, s15
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ee6:	e008      	b.n	8006efa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	609a      	str	r2, [r3, #8]
}
 8006efa:	bf00      	nop
 8006efc:	3724      	adds	r7, #36	@ 0x24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	03d09000 	.word	0x03d09000
 8006f10:	46000000 	.word	0x46000000
 8006f14:	4c742400 	.word	0x4c742400
 8006f18:	4a742400 	.word	0x4a742400
 8006f1c:	4bbebc20 	.word	0x4bbebc20

08006f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f2e:	4b53      	ldr	r3, [pc, #332]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d101      	bne.n	8006f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e099      	b.n	8007072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a4e      	ldr	r2, [pc, #312]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006f44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f4a:	f7fa fd33 	bl	80019b4 <HAL_GetTick>
 8006f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f50:	e008      	b.n	8006f64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f52:	f7fa fd2f 	bl	80019b4 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e086      	b.n	8007072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f64:	4b45      	ldr	r3, [pc, #276]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f0      	bne.n	8006f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f70:	4b42      	ldr	r3, [pc, #264]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	031b      	lsls	r3, r3, #12
 8006f7e:	493f      	ldr	r1, [pc, #252]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	025b      	lsls	r3, r3, #9
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	061b      	lsls	r3, r3, #24
 8006fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fb4:	4931      	ldr	r1, [pc, #196]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fba:	4b30      	ldr	r3, [pc, #192]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	492d      	ldr	r1, [pc, #180]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	f023 0220 	bic.w	r2, r3, #32
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	4928      	ldr	r1, [pc, #160]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fde:	4b27      	ldr	r3, [pc, #156]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	4a26      	ldr	r2, [pc, #152]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fea:	4b24      	ldr	r3, [pc, #144]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fee:	4b24      	ldr	r3, [pc, #144]	@ (8007080 <RCCEx_PLL2_Config+0x160>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	69d2      	ldr	r2, [r2, #28]
 8006ff6:	00d2      	lsls	r2, r2, #3
 8006ff8:	4920      	ldr	r1, [pc, #128]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007002:	4a1e      	ldr	r2, [pc, #120]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007004:	f043 0310 	orr.w	r3, r3, #16
 8007008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007010:	4b1a      	ldr	r3, [pc, #104]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	4a19      	ldr	r2, [pc, #100]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800701a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800701c:	e00f      	b.n	800703e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d106      	bne.n	8007032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007024:	4b15      	ldr	r3, [pc, #84]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	4a14      	ldr	r2, [pc, #80]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 800702a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800702e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007030:	e005      	b.n	800703e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007032:	4b12      	ldr	r3, [pc, #72]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	4a11      	ldr	r2, [pc, #68]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800703c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800703e:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a0e      	ldr	r2, [pc, #56]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007044:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800704a:	f7fa fcb3 	bl	80019b4 <HAL_GetTick>
 800704e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007050:	e008      	b.n	8007064 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007052:	f7fa fcaf 	bl	80019b4 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e006      	b.n	8007072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007064:	4b05      	ldr	r3, [pc, #20]	@ (800707c <RCCEx_PLL2_Config+0x15c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0f0      	beq.n	8007052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	ffff0007 	.word	0xffff0007

08007084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007092:	4b53      	ldr	r3, [pc, #332]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b03      	cmp	r3, #3
 800709c:	d101      	bne.n	80070a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e099      	b.n	80071d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070a2:	4b4f      	ldr	r3, [pc, #316]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a4e      	ldr	r2, [pc, #312]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80070a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ae:	f7fa fc81 	bl	80019b4 <HAL_GetTick>
 80070b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070b4:	e008      	b.n	80070c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070b6:	f7fa fc7d 	bl	80019b4 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e086      	b.n	80071d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070c8:	4b45      	ldr	r3, [pc, #276]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f0      	bne.n	80070b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070d4:	4b42      	ldr	r3, [pc, #264]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	051b      	lsls	r3, r3, #20
 80070e2:	493f      	ldr	r1, [pc, #252]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	025b      	lsls	r3, r3, #9
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	3b01      	subs	r3, #1
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	3b01      	subs	r3, #1
 8007112:	061b      	lsls	r3, r3, #24
 8007114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007118:	4931      	ldr	r1, [pc, #196]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800711a:	4313      	orrs	r3, r2
 800711c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800711e:	4b30      	ldr	r3, [pc, #192]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	492d      	ldr	r1, [pc, #180]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800712c:	4313      	orrs	r3, r2
 800712e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007130:	4b2b      	ldr	r3, [pc, #172]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	4928      	ldr	r1, [pc, #160]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007142:	4b27      	ldr	r3, [pc, #156]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	4a26      	ldr	r2, [pc, #152]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800714c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800714e:	4b24      	ldr	r3, [pc, #144]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007152:	4b24      	ldr	r3, [pc, #144]	@ (80071e4 <RCCEx_PLL3_Config+0x160>)
 8007154:	4013      	ands	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	69d2      	ldr	r2, [r2, #28]
 800715a:	00d2      	lsls	r2, r2, #3
 800715c:	4920      	ldr	r1, [pc, #128]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800715e:	4313      	orrs	r3, r2
 8007160:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007162:	4b1f      	ldr	r3, [pc, #124]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	4a1e      	ldr	r2, [pc, #120]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800716c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007174:	4b1a      	ldr	r3, [pc, #104]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	4a19      	ldr	r2, [pc, #100]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800717a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800717e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007180:	e00f      	b.n	80071a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d106      	bne.n	8007196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007188:	4b15      	ldr	r3, [pc, #84]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	4a14      	ldr	r2, [pc, #80]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800718e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007194:	e005      	b.n	80071a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007196:	4b12      	ldr	r3, [pc, #72]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	4a11      	ldr	r2, [pc, #68]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 800719c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071a2:	4b0f      	ldr	r3, [pc, #60]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a0e      	ldr	r2, [pc, #56]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ae:	f7fa fc01 	bl	80019b4 <HAL_GetTick>
 80071b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071b4:	e008      	b.n	80071c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071b6:	f7fa fbfd 	bl	80019b4 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e006      	b.n	80071d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071c8:	4b05      	ldr	r3, [pc, #20]	@ (80071e0 <RCCEx_PLL3_Config+0x15c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	58024400 	.word	0x58024400
 80071e4:	ffff0007 	.word	0xffff0007

080071e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e10f      	b.n	800741a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a87      	ldr	r2, [pc, #540]	@ (8007424 <HAL_SPI_Init+0x23c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00f      	beq.n	800722a <HAL_SPI_Init+0x42>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a86      	ldr	r2, [pc, #536]	@ (8007428 <HAL_SPI_Init+0x240>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00a      	beq.n	800722a <HAL_SPI_Init+0x42>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a84      	ldr	r2, [pc, #528]	@ (800742c <HAL_SPI_Init+0x244>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d005      	beq.n	800722a <HAL_SPI_Init+0x42>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b0f      	cmp	r3, #15
 8007224:	d901      	bls.n	800722a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0f7      	b.n	800741a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fc12 	bl	8007a54 <SPI_GetPacketSize>
 8007230:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7b      	ldr	r2, [pc, #492]	@ (8007424 <HAL_SPI_Init+0x23c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00c      	beq.n	8007256 <HAL_SPI_Init+0x6e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a79      	ldr	r2, [pc, #484]	@ (8007428 <HAL_SPI_Init+0x240>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d007      	beq.n	8007256 <HAL_SPI_Init+0x6e>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a78      	ldr	r2, [pc, #480]	@ (800742c <HAL_SPI_Init+0x244>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d002      	beq.n	8007256 <HAL_SPI_Init+0x6e>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b08      	cmp	r3, #8
 8007254:	d811      	bhi.n	800727a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800725a:	4a72      	ldr	r2, [pc, #456]	@ (8007424 <HAL_SPI_Init+0x23c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a70      	ldr	r2, [pc, #448]	@ (8007428 <HAL_SPI_Init+0x240>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_SPI_Init+0x8c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a6f      	ldr	r2, [pc, #444]	@ (800742c <HAL_SPI_Init+0x244>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d104      	bne.n	800727e <HAL_SPI_Init+0x96>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b10      	cmp	r3, #16
 8007278:	d901      	bls.n	800727e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e0cd      	b.n	800741a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7f9 ff46 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80072ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c4:	d119      	bne.n	80072fa <HAL_SPI_Init+0x112>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ce:	d103      	bne.n	80072d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10c      	bne.n	80072fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e8:	d107      	bne.n	80072fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00f      	beq.n	8007326 <HAL_SPI_Init+0x13e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b06      	cmp	r3, #6
 800730c:	d90b      	bls.n	8007326 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e007      	b.n	8007336 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007334:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	431a      	orrs	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007348:	ea42 0103 	orr.w	r1, r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007396:	ea42 0103 	orr.w	r1, r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d113      	bne.n	80073d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40013000 	.word	0x40013000
 8007428:	40003800 	.word	0x40003800
 800742c:	40003c00 	.word	0x40003c00

08007430 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	b29b      	uxth	r3, r3
 8007448:	3301      	adds	r3, #1
 800744a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3330      	adds	r3, #48	@ 0x30
 8007452:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007454:	f7fa faae 	bl	80019b4 <HAL_GetTick>
 8007458:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d001      	beq.n	800746a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007466:	2302      	movs	r3, #2
 8007468:	e250      	b.n	800790c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_SPI_Receive+0x46>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e248      	b.n	800790c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_SPI_Receive+0x58>
 8007484:	2302      	movs	r3, #2
 8007486:	e241      	b.n	800790c <HAL_SPI_Receive+0x4dc>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2204      	movs	r2, #4
 8007494:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80074e0:	d108      	bne.n	80074f4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e009      	b.n	8007508 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007506:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4b95      	ldr	r3, [pc, #596]	@ (8007764 <HAL_SPI_Receive+0x334>)
 8007510:	4013      	ands	r3, r2
 8007512:	88f9      	ldrh	r1, [r7, #6]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	430b      	orrs	r3, r1
 800751a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007534:	d107      	bne.n	8007546 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	2b0f      	cmp	r3, #15
 800754c:	d96c      	bls.n	8007628 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800754e:	e064      	b.n	800761a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d114      	bne.n	8007590 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007570:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800758e:	e044      	b.n	800761a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007596:	b29b      	uxth	r3, r3
 8007598:	8bfa      	ldrh	r2, [r7, #30]
 800759a:	429a      	cmp	r2, r3
 800759c:	d919      	bls.n	80075d2 <HAL_SPI_Receive+0x1a2>
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d014      	beq.n	80075d2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075b2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b8:	1d1a      	adds	r2, r3, #4
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075d0:	e023      	b.n	800761a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d2:	f7fa f9ef 	bl	80019b4 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d803      	bhi.n	80075ea <HAL_SPI_Receive+0x1ba>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d102      	bne.n	80075f0 <HAL_SPI_Receive+0x1c0>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d114      	bne.n	800761a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f98f 	bl	8007914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e178      	b.n	800790c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d194      	bne.n	8007550 <HAL_SPI_Receive+0x120>
 8007626:	e15e      	b.n	80078e6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b07      	cmp	r3, #7
 800762e:	f240 8153 	bls.w	80078d8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007632:	e08f      	b.n	8007754 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d114      	bne.n	8007674 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	b292      	uxth	r2, r2
 8007654:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007672:	e06f      	b.n	8007754 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800767a:	b29b      	uxth	r3, r3
 800767c:	8bfa      	ldrh	r2, [r7, #30]
 800767e:	429a      	cmp	r2, r3
 8007680:	d924      	bls.n	80076cc <HAL_SPI_Receive+0x29c>
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01f      	beq.n	80076cc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	b292      	uxth	r2, r2
 8007696:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800769c:	1c9a      	adds	r2, r3, #2
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	b292      	uxth	r2, r2
 80076ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b02      	subs	r3, #2
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076ca:	e043      	b.n	8007754 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d119      	bne.n	800770c <HAL_SPI_Receive+0x2dc>
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d014      	beq.n	800770c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	8812      	ldrh	r2, [r2, #0]
 80076ea:	b292      	uxth	r2, r2
 80076ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076f2:	1c9a      	adds	r2, r3, #2
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800770a:	e023      	b.n	8007754 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770c:	f7fa f952 	bl	80019b4 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d803      	bhi.n	8007724 <HAL_SPI_Receive+0x2f4>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d102      	bne.n	800772a <HAL_SPI_Receive+0x2fa>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d114      	bne.n	8007754 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f8f2 	bl	8007914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e0db      	b.n	800790c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f af69 	bne.w	8007634 <HAL_SPI_Receive+0x204>
 8007762:	e0c0      	b.n	80078e6 <HAL_SPI_Receive+0x4b6>
 8007764:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b01      	cmp	r3, #1
 800777c:	d117      	bne.n	80077ae <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077ac:	e094      	b.n	80078d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	8bfa      	ldrh	r2, [r7, #30]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d946      	bls.n	800784a <HAL_SPI_Receive+0x41a>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d041      	beq.n	800784a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ee:	7812      	ldrb	r2, [r2, #0]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007826:	7812      	ldrb	r2, [r2, #0]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b04      	subs	r3, #4
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007848:	e046      	b.n	80078d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d81c      	bhi.n	8007890 <HAL_SPI_Receive+0x460>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d017      	beq.n	8007890 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800786c:	7812      	ldrb	r2, [r2, #0]
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800788e:	e023      	b.n	80078d8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007890:	f7fa f890 	bl	80019b4 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d803      	bhi.n	80078a8 <HAL_SPI_Receive+0x478>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d102      	bne.n	80078ae <HAL_SPI_Receive+0x47e>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d114      	bne.n	80078d8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f830 	bl	8007914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e019      	b.n	800790c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f af41 	bne.w	8007768 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f814 	bl	8007914 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800790a:	2300      	movs	r3, #0
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0208 	orr.w	r2, r2, #8
 8007932:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0210 	orr.w	r2, r2, #16
 8007942:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6919      	ldr	r1, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b3c      	ldr	r3, [pc, #240]	@ (8007a50 <SPI_CloseTransfer+0x13c>)
 8007960:	400b      	ands	r3, r1
 8007962:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007972:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b04      	cmp	r3, #4
 800797e:	d014      	beq.n	80079aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00f      	beq.n	80079aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007990:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0220 	orr.w	r2, r2, #32
 80079a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d014      	beq.n	80079e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00f      	beq.n	80079e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c6:	f043 0204 	orr.w	r2, r3, #4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00f      	beq.n	8007a0a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f0:	f043 0201 	orr.w	r2, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a08:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00f      	beq.n	8007a34 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a1a:	f043 0208 	orr.w	r2, r3, #8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a32:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	fffffc90 	.word	0xfffffc90

08007a54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3307      	adds	r3, #7
 8007a72:	08db      	lsrs	r3, r3, #3
 8007a74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e042      	b.n	8007b22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7f9 fdf8 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	@ 0x24
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fa15 	bl	8008f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fcaa 	bl	8008434 <UART_SetConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e01b      	b.n	8007b22 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fa94 	bl	8009048 <UART_CheckIdleState>
 8007b20:	4603      	mov	r3, r0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b08a      	sub	sp, #40	@ 0x28
 8007b2e:	af02      	add	r7, sp, #8
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	603b      	str	r3, [r7, #0]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d17b      	bne.n	8007c3c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_UART_Transmit+0x26>
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e074      	b.n	8007c3e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2221      	movs	r2, #33	@ 0x21
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b64:	f7f9 ff26 	bl	80019b4 <HAL_GetTick>
 8007b68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b82:	d108      	bne.n	8007b96 <HAL_UART_Transmit+0x6c>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e003      	b.n	8007b9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b9e:	e030      	b.n	8007c02 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2180      	movs	r1, #128	@ 0x80
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 faf6 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e03d      	b.n	8007c3e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	3302      	adds	r3, #2
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	e007      	b.n	8007bf0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	3301      	adds	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1c8      	bne.n	8007ba0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2140      	movs	r1, #64	@ 0x40
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f001 fabf 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c3c:	2302      	movs	r3, #2
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c76:	4013      	ands	r3, r2
 8007c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11b      	bne.n	8007cbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d015      	beq.n	8007cbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d105      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8393 	beq.w	80083d8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
      }
      return;
 8007cba:	e38d      	b.n	80083d8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8123 	beq.w	8007f0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007cca:	4b8d      	ldr	r3, [pc, #564]	@ (8007f00 <HAL_UART_IRQHandler+0x2b8>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007cd6:	4b8b      	ldr	r3, [pc, #556]	@ (8007f04 <HAL_UART_IRQHandler+0x2bc>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8116 	beq.w	8007f0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d011      	beq.n	8007d10 <HAL_UART_IRQHandler+0xc8>
 8007cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d06:	f043 0201 	orr.w	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d011      	beq.n	8007d40 <HAL_UART_IRQHandler+0xf8>
 8007d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d36:	f043 0204 	orr.w	r2, r3, #4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d011      	beq.n	8007d70 <HAL_UART_IRQHandler+0x128>
 8007d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d66:	f043 0202 	orr.w	r2, r3, #2
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007f00 <HAL_UART_IRQHandler+0x2b8>)
 8007d8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2208      	movs	r2, #8
 8007d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	f043 0208 	orr.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <HAL_UART_IRQHandler+0x196>
 8007db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd4:	f043 0220 	orr.w	r2, r3, #32
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 82f9 	beq.w	80083dc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d013      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e32:	2b40      	cmp	r3, #64	@ 0x40
 8007e34:	d005      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d054      	beq.n	8007eec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 fa18 	bl	8009278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e52:	2b40      	cmp	r3, #64	@ 0x40
 8007e54:	d146      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1d9      	bne.n	8007e56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d017      	beq.n	8007edc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb2:	4a15      	ldr	r2, [pc, #84]	@ (8007f08 <HAL_UART_IRQHandler+0x2c0>)
 8007eb4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fa fdb7 	bl	8002a30 <HAL_DMA_Abort_IT>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d019      	beq.n	8007efc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eda:	e00f      	b.n	8007efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa93 	bl	8008408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	e00b      	b.n	8007efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa8f 	bl	8008408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eea:	e007      	b.n	8007efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa8b 	bl	8008408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007efa:	e26f      	b.n	80083dc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efc:	bf00      	nop
    return;
 8007efe:	e26d      	b.n	80083dc <HAL_UART_IRQHandler+0x794>
 8007f00:	10000001 	.word	0x10000001
 8007f04:	04000120 	.word	0x04000120
 8007f08:	08009345 	.word	0x08009345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	f040 8203 	bne.w	800831c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 81fc 	beq.w	800831c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 81f5 	beq.w	800831c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2210      	movs	r2, #16
 8007f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f44:	2b40      	cmp	r3, #64	@ 0x40
 8007f46:	f040 816d 	bne.w	8008224 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4aa4      	ldr	r2, [pc, #656]	@ (80081e4 <HAL_UART_IRQHandler+0x59c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d068      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4aa1      	ldr	r2, [pc, #644]	@ (80081e8 <HAL_UART_IRQHandler+0x5a0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d061      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a9f      	ldr	r2, [pc, #636]	@ (80081ec <HAL_UART_IRQHandler+0x5a4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d05a      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a9c      	ldr	r2, [pc, #624]	@ (80081f0 <HAL_UART_IRQHandler+0x5a8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d053      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a9a      	ldr	r2, [pc, #616]	@ (80081f4 <HAL_UART_IRQHandler+0x5ac>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d04c      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a97      	ldr	r2, [pc, #604]	@ (80081f8 <HAL_UART_IRQHandler+0x5b0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d045      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a95      	ldr	r2, [pc, #596]	@ (80081fc <HAL_UART_IRQHandler+0x5b4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d03e      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a92      	ldr	r2, [pc, #584]	@ (8008200 <HAL_UART_IRQHandler+0x5b8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d037      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a90      	ldr	r2, [pc, #576]	@ (8008204 <HAL_UART_IRQHandler+0x5bc>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d030      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a8d      	ldr	r2, [pc, #564]	@ (8008208 <HAL_UART_IRQHandler+0x5c0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d029      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a8b      	ldr	r2, [pc, #556]	@ (800820c <HAL_UART_IRQHandler+0x5c4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d022      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a88      	ldr	r2, [pc, #544]	@ (8008210 <HAL_UART_IRQHandler+0x5c8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d01b      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a86      	ldr	r2, [pc, #536]	@ (8008214 <HAL_UART_IRQHandler+0x5cc>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d014      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a83      	ldr	r2, [pc, #524]	@ (8008218 <HAL_UART_IRQHandler+0x5d0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00d      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a81      	ldr	r2, [pc, #516]	@ (800821c <HAL_UART_IRQHandler+0x5d4>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d006      	beq.n	800802a <HAL_UART_IRQHandler+0x3e2>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a7e      	ldr	r2, [pc, #504]	@ (8008220 <HAL_UART_IRQHandler+0x5d8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d106      	bne.n	8008038 <HAL_UART_IRQHandler+0x3f0>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	b29b      	uxth	r3, r3
 8008036:	e005      	b.n	8008044 <HAL_UART_IRQHandler+0x3fc>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80ad 	beq.w	80081ac <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800805c:	429a      	cmp	r2, r3
 800805e:	f080 80a5 	bcs.w	80081ac <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008068:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008078:	f000 8087 	beq.w	800818a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1da      	bne.n	800807c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e1      	bne.n	80080c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800812c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e3      	bne.n	8008102 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008158:	f023 0310 	bic.w	r3, r3, #16
 800815c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800816a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800816c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e4      	bne.n	8008148 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008184:	4618      	mov	r0, r3
 8008186:	f7fa f935 	bl	80023f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800819c:	b29b      	uxth	r3, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f939 	bl	800841c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80081aa:	e119      	b.n	80083e0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f040 8112 	bne.w	80083e0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081c8:	f040 810a 	bne.w	80083e0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f91e 	bl	800841c <HAL_UARTEx_RxEventCallback>
      return;
 80081e0:	e0fe      	b.n	80083e0 <HAL_UART_IRQHandler+0x798>
 80081e2:	bf00      	nop
 80081e4:	40020010 	.word	0x40020010
 80081e8:	40020028 	.word	0x40020028
 80081ec:	40020040 	.word	0x40020040
 80081f0:	40020058 	.word	0x40020058
 80081f4:	40020070 	.word	0x40020070
 80081f8:	40020088 	.word	0x40020088
 80081fc:	400200a0 	.word	0x400200a0
 8008200:	400200b8 	.word	0x400200b8
 8008204:	40020410 	.word	0x40020410
 8008208:	40020428 	.word	0x40020428
 800820c:	40020440 	.word	0x40020440
 8008210:	40020458 	.word	0x40020458
 8008214:	40020470 	.word	0x40020470
 8008218:	40020488 	.word	0x40020488
 800821c:	400204a0 	.word	0x400204a0
 8008220:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800823e:	b29b      	uxth	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80cf 	beq.w	80083e4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80ca 	beq.w	80083e4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800825e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008272:	647b      	str	r3, [r7, #68]	@ 0x44
 8008274:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e4      	bne.n	8008250 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3308      	adds	r3, #8
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	623b      	str	r3, [r7, #32]
   return(result);
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	4b55      	ldr	r3, [pc, #340]	@ (80083f0 <HAL_UART_IRQHandler+0x7a8>)
 800829a:	4013      	ands	r3, r2
 800829c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80082ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e3      	bne.n	8008286 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0310 	bic.w	r3, r3, #16
 80082e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	69b9      	ldr	r1, [r7, #24]
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	617b      	str	r3, [r7, #20]
   return(result);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e4      	bne.n	80082d2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800830e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f881 	bl	800841c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800831a:	e063      	b.n	80083e4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <HAL_UART_IRQHandler+0x6fe>
 8008328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800832c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800833c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 f83d 	bl	80093be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008344:	e051      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d014      	beq.n	800837c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835a:	2b00      	cmp	r3, #0
 800835c:	d105      	bne.n	800836a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800835e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d008      	beq.n	800837c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800836e:	2b00      	cmp	r3, #0
 8008370:	d03a      	beq.n	80083e8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
    }
    return;
 800837a:	e035      	b.n	80083e8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800837c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <HAL_UART_IRQHandler+0x754>
 8008388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 ffe7 	bl	8009368 <UART_EndTransmit_IT>
    return;
 800839a:	e026      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800839c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d009      	beq.n	80083bc <HAL_UART_IRQHandler+0x774>
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f816 	bl	80093e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083ba:	e016      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80083bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <HAL_UART_IRQHandler+0x7a2>
 80083c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	da0c      	bge.n	80083ea <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fffe 	bl	80093d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083d6:	e008      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80083d8:	bf00      	nop
 80083da:	e006      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
    return;
 80083dc:	bf00      	nop
 80083de:	e004      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80083e0:	bf00      	nop
 80083e2:	e002      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <HAL_UART_IRQHandler+0x7a2>
    return;
 80083e8:	bf00      	nop
  }
}
 80083ea:	37e8      	adds	r7, #232	@ 0xe8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	effffffe 	.word	0xeffffffe

080083f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008438:	b092      	sub	sp, #72	@ 0x48
 800843a:	af00      	add	r7, sp, #0
 800843c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	431a      	orrs	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	431a      	orrs	r2, r3
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	4313      	orrs	r3, r2
 800845a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4bbe      	ldr	r3, [pc, #760]	@ (800875c <UART_SetConfig+0x328>)
 8008464:	4013      	ands	r3, r2
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800846c:	430b      	orrs	r3, r1
 800846e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4ab3      	ldr	r2, [pc, #716]	@ (8008760 <UART_SetConfig+0x32c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d004      	beq.n	80084a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800849c:	4313      	orrs	r3, r2
 800849e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	4baf      	ldr	r3, [pc, #700]	@ (8008764 <UART_SetConfig+0x330>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ba:	f023 010f 	bic.w	r1, r3, #15
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4aa6      	ldr	r2, [pc, #664]	@ (8008768 <UART_SetConfig+0x334>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d177      	bne.n	80085c4 <UART_SetConfig+0x190>
 80084d4:	4ba5      	ldr	r3, [pc, #660]	@ (800876c <UART_SetConfig+0x338>)
 80084d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084dc:	2b28      	cmp	r3, #40	@ 0x28
 80084de:	d86d      	bhi.n	80085bc <UART_SetConfig+0x188>
 80084e0:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <UART_SetConfig+0xb4>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	0800858d 	.word	0x0800858d
 80084ec:	080085bd 	.word	0x080085bd
 80084f0:	080085bd 	.word	0x080085bd
 80084f4:	080085bd 	.word	0x080085bd
 80084f8:	080085bd 	.word	0x080085bd
 80084fc:	080085bd 	.word	0x080085bd
 8008500:	080085bd 	.word	0x080085bd
 8008504:	080085bd 	.word	0x080085bd
 8008508:	08008595 	.word	0x08008595
 800850c:	080085bd 	.word	0x080085bd
 8008510:	080085bd 	.word	0x080085bd
 8008514:	080085bd 	.word	0x080085bd
 8008518:	080085bd 	.word	0x080085bd
 800851c:	080085bd 	.word	0x080085bd
 8008520:	080085bd 	.word	0x080085bd
 8008524:	080085bd 	.word	0x080085bd
 8008528:	0800859d 	.word	0x0800859d
 800852c:	080085bd 	.word	0x080085bd
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085bd 	.word	0x080085bd
 8008538:	080085bd 	.word	0x080085bd
 800853c:	080085bd 	.word	0x080085bd
 8008540:	080085bd 	.word	0x080085bd
 8008544:	080085bd 	.word	0x080085bd
 8008548:	080085a5 	.word	0x080085a5
 800854c:	080085bd 	.word	0x080085bd
 8008550:	080085bd 	.word	0x080085bd
 8008554:	080085bd 	.word	0x080085bd
 8008558:	080085bd 	.word	0x080085bd
 800855c:	080085bd 	.word	0x080085bd
 8008560:	080085bd 	.word	0x080085bd
 8008564:	080085bd 	.word	0x080085bd
 8008568:	080085ad 	.word	0x080085ad
 800856c:	080085bd 	.word	0x080085bd
 8008570:	080085bd 	.word	0x080085bd
 8008574:	080085bd 	.word	0x080085bd
 8008578:	080085bd 	.word	0x080085bd
 800857c:	080085bd 	.word	0x080085bd
 8008580:	080085bd 	.word	0x080085bd
 8008584:	080085bd 	.word	0x080085bd
 8008588:	080085b5 	.word	0x080085b5
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e222      	b.n	80089da <UART_SetConfig+0x5a6>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e21e      	b.n	80089da <UART_SetConfig+0x5a6>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e21a      	b.n	80089da <UART_SetConfig+0x5a6>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e216      	b.n	80089da <UART_SetConfig+0x5a6>
 80085ac:	2320      	movs	r3, #32
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e212      	b.n	80089da <UART_SetConfig+0x5a6>
 80085b4:	2340      	movs	r3, #64	@ 0x40
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e20e      	b.n	80089da <UART_SetConfig+0x5a6>
 80085bc:	2380      	movs	r3, #128	@ 0x80
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e20a      	b.n	80089da <UART_SetConfig+0x5a6>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a69      	ldr	r2, [pc, #420]	@ (8008770 <UART_SetConfig+0x33c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d130      	bne.n	8008630 <UART_SetConfig+0x1fc>
 80085ce:	4b67      	ldr	r3, [pc, #412]	@ (800876c <UART_SetConfig+0x338>)
 80085d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d826      	bhi.n	8008628 <UART_SetConfig+0x1f4>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <UART_SetConfig+0x1ac>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008609 	.word	0x08008609
 80085ec:	08008611 	.word	0x08008611
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008621 	.word	0x08008621
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e1ec      	b.n	80089da <UART_SetConfig+0x5a6>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e1e8      	b.n	80089da <UART_SetConfig+0x5a6>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e1e4      	b.n	80089da <UART_SetConfig+0x5a6>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e1e0      	b.n	80089da <UART_SetConfig+0x5a6>
 8008618:	2320      	movs	r3, #32
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e1dc      	b.n	80089da <UART_SetConfig+0x5a6>
 8008620:	2340      	movs	r3, #64	@ 0x40
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e1d8      	b.n	80089da <UART_SetConfig+0x5a6>
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e1d4      	b.n	80089da <UART_SetConfig+0x5a6>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a4f      	ldr	r2, [pc, #316]	@ (8008774 <UART_SetConfig+0x340>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d130      	bne.n	800869c <UART_SetConfig+0x268>
 800863a:	4b4c      	ldr	r3, [pc, #304]	@ (800876c <UART_SetConfig+0x338>)
 800863c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b05      	cmp	r3, #5
 8008644:	d826      	bhi.n	8008694 <UART_SetConfig+0x260>
 8008646:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <UART_SetConfig+0x218>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008665 	.word	0x08008665
 8008650:	0800866d 	.word	0x0800866d
 8008654:	08008675 	.word	0x08008675
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008685 	.word	0x08008685
 8008660:	0800868d 	.word	0x0800868d
 8008664:	2300      	movs	r3, #0
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e1b6      	b.n	80089da <UART_SetConfig+0x5a6>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e1b2      	b.n	80089da <UART_SetConfig+0x5a6>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e1ae      	b.n	80089da <UART_SetConfig+0x5a6>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e1aa      	b.n	80089da <UART_SetConfig+0x5a6>
 8008684:	2320      	movs	r3, #32
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e1a6      	b.n	80089da <UART_SetConfig+0x5a6>
 800868c:	2340      	movs	r3, #64	@ 0x40
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e1a2      	b.n	80089da <UART_SetConfig+0x5a6>
 8008694:	2380      	movs	r3, #128	@ 0x80
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e19e      	b.n	80089da <UART_SetConfig+0x5a6>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a35      	ldr	r2, [pc, #212]	@ (8008778 <UART_SetConfig+0x344>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d130      	bne.n	8008708 <UART_SetConfig+0x2d4>
 80086a6:	4b31      	ldr	r3, [pc, #196]	@ (800876c <UART_SetConfig+0x338>)
 80086a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	d826      	bhi.n	8008700 <UART_SetConfig+0x2cc>
 80086b2:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <UART_SetConfig+0x284>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086d1 	.word	0x080086d1
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	080086e1 	.word	0x080086e1
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d6:	e180      	b.n	80089da <UART_SetConfig+0x5a6>
 80086d8:	2304      	movs	r3, #4
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086de:	e17c      	b.n	80089da <UART_SetConfig+0x5a6>
 80086e0:	2308      	movs	r3, #8
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e6:	e178      	b.n	80089da <UART_SetConfig+0x5a6>
 80086e8:	2310      	movs	r3, #16
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e174      	b.n	80089da <UART_SetConfig+0x5a6>
 80086f0:	2320      	movs	r3, #32
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e170      	b.n	80089da <UART_SetConfig+0x5a6>
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e16c      	b.n	80089da <UART_SetConfig+0x5a6>
 8008700:	2380      	movs	r3, #128	@ 0x80
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e168      	b.n	80089da <UART_SetConfig+0x5a6>
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1b      	ldr	r2, [pc, #108]	@ (800877c <UART_SetConfig+0x348>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d142      	bne.n	8008798 <UART_SetConfig+0x364>
 8008712:	4b16      	ldr	r3, [pc, #88]	@ (800876c <UART_SetConfig+0x338>)
 8008714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b05      	cmp	r3, #5
 800871c:	d838      	bhi.n	8008790 <UART_SetConfig+0x35c>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <UART_SetConfig+0x2f0>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	0800873d 	.word	0x0800873d
 8008728:	08008745 	.word	0x08008745
 800872c:	0800874d 	.word	0x0800874d
 8008730:	08008755 	.word	0x08008755
 8008734:	08008781 	.word	0x08008781
 8008738:	08008789 	.word	0x08008789
 800873c:	2300      	movs	r3, #0
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008742:	e14a      	b.n	80089da <UART_SetConfig+0x5a6>
 8008744:	2304      	movs	r3, #4
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874a:	e146      	b.n	80089da <UART_SetConfig+0x5a6>
 800874c:	2308      	movs	r3, #8
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008752:	e142      	b.n	80089da <UART_SetConfig+0x5a6>
 8008754:	2310      	movs	r3, #16
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e13e      	b.n	80089da <UART_SetConfig+0x5a6>
 800875c:	cfff69f3 	.word	0xcfff69f3
 8008760:	58000c00 	.word	0x58000c00
 8008764:	11fff4ff 	.word	0x11fff4ff
 8008768:	40011000 	.word	0x40011000
 800876c:	58024400 	.word	0x58024400
 8008770:	40004400 	.word	0x40004400
 8008774:	40004800 	.word	0x40004800
 8008778:	40004c00 	.word	0x40004c00
 800877c:	40005000 	.word	0x40005000
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e128      	b.n	80089da <UART_SetConfig+0x5a6>
 8008788:	2340      	movs	r3, #64	@ 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e124      	b.n	80089da <UART_SetConfig+0x5a6>
 8008790:	2380      	movs	r3, #128	@ 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e120      	b.n	80089da <UART_SetConfig+0x5a6>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4acb      	ldr	r2, [pc, #812]	@ (8008acc <UART_SetConfig+0x698>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d176      	bne.n	8008890 <UART_SetConfig+0x45c>
 80087a2:	4bcb      	ldr	r3, [pc, #812]	@ (8008ad0 <UART_SetConfig+0x69c>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087aa:	2b28      	cmp	r3, #40	@ 0x28
 80087ac:	d86c      	bhi.n	8008888 <UART_SetConfig+0x454>
 80087ae:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <UART_SetConfig+0x380>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	08008859 	.word	0x08008859
 80087b8:	08008889 	.word	0x08008889
 80087bc:	08008889 	.word	0x08008889
 80087c0:	08008889 	.word	0x08008889
 80087c4:	08008889 	.word	0x08008889
 80087c8:	08008889 	.word	0x08008889
 80087cc:	08008889 	.word	0x08008889
 80087d0:	08008889 	.word	0x08008889
 80087d4:	08008861 	.word	0x08008861
 80087d8:	08008889 	.word	0x08008889
 80087dc:	08008889 	.word	0x08008889
 80087e0:	08008889 	.word	0x08008889
 80087e4:	08008889 	.word	0x08008889
 80087e8:	08008889 	.word	0x08008889
 80087ec:	08008889 	.word	0x08008889
 80087f0:	08008889 	.word	0x08008889
 80087f4:	08008869 	.word	0x08008869
 80087f8:	08008889 	.word	0x08008889
 80087fc:	08008889 	.word	0x08008889
 8008800:	08008889 	.word	0x08008889
 8008804:	08008889 	.word	0x08008889
 8008808:	08008889 	.word	0x08008889
 800880c:	08008889 	.word	0x08008889
 8008810:	08008889 	.word	0x08008889
 8008814:	08008871 	.word	0x08008871
 8008818:	08008889 	.word	0x08008889
 800881c:	08008889 	.word	0x08008889
 8008820:	08008889 	.word	0x08008889
 8008824:	08008889 	.word	0x08008889
 8008828:	08008889 	.word	0x08008889
 800882c:	08008889 	.word	0x08008889
 8008830:	08008889 	.word	0x08008889
 8008834:	08008879 	.word	0x08008879
 8008838:	08008889 	.word	0x08008889
 800883c:	08008889 	.word	0x08008889
 8008840:	08008889 	.word	0x08008889
 8008844:	08008889 	.word	0x08008889
 8008848:	08008889 	.word	0x08008889
 800884c:	08008889 	.word	0x08008889
 8008850:	08008889 	.word	0x08008889
 8008854:	08008881 	.word	0x08008881
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885e:	e0bc      	b.n	80089da <UART_SetConfig+0x5a6>
 8008860:	2304      	movs	r3, #4
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008866:	e0b8      	b.n	80089da <UART_SetConfig+0x5a6>
 8008868:	2308      	movs	r3, #8
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886e:	e0b4      	b.n	80089da <UART_SetConfig+0x5a6>
 8008870:	2310      	movs	r3, #16
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008876:	e0b0      	b.n	80089da <UART_SetConfig+0x5a6>
 8008878:	2320      	movs	r3, #32
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e0ac      	b.n	80089da <UART_SetConfig+0x5a6>
 8008880:	2340      	movs	r3, #64	@ 0x40
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e0a8      	b.n	80089da <UART_SetConfig+0x5a6>
 8008888:	2380      	movs	r3, #128	@ 0x80
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e0a4      	b.n	80089da <UART_SetConfig+0x5a6>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a8f      	ldr	r2, [pc, #572]	@ (8008ad4 <UART_SetConfig+0x6a0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d130      	bne.n	80088fc <UART_SetConfig+0x4c8>
 800889a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ad0 <UART_SetConfig+0x69c>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d826      	bhi.n	80088f4 <UART_SetConfig+0x4c0>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <UART_SetConfig+0x478>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088c5 	.word	0x080088c5
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	080088dd 	.word	0x080088dd
 80088bc:	080088e5 	.word	0x080088e5
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ca:	e086      	b.n	80089da <UART_SetConfig+0x5a6>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e082      	b.n	80089da <UART_SetConfig+0x5a6>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e07e      	b.n	80089da <UART_SetConfig+0x5a6>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e07a      	b.n	80089da <UART_SetConfig+0x5a6>
 80088e4:	2320      	movs	r3, #32
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e076      	b.n	80089da <UART_SetConfig+0x5a6>
 80088ec:	2340      	movs	r3, #64	@ 0x40
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e072      	b.n	80089da <UART_SetConfig+0x5a6>
 80088f4:	2380      	movs	r3, #128	@ 0x80
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e06e      	b.n	80089da <UART_SetConfig+0x5a6>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a75      	ldr	r2, [pc, #468]	@ (8008ad8 <UART_SetConfig+0x6a4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d130      	bne.n	8008968 <UART_SetConfig+0x534>
 8008906:	4b72      	ldr	r3, [pc, #456]	@ (8008ad0 <UART_SetConfig+0x69c>)
 8008908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b05      	cmp	r3, #5
 8008910:	d826      	bhi.n	8008960 <UART_SetConfig+0x52c>
 8008912:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <UART_SetConfig+0x4e4>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008931 	.word	0x08008931
 800891c:	08008939 	.word	0x08008939
 8008920:	08008941 	.word	0x08008941
 8008924:	08008949 	.word	0x08008949
 8008928:	08008951 	.word	0x08008951
 800892c:	08008959 	.word	0x08008959
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008936:	e050      	b.n	80089da <UART_SetConfig+0x5a6>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e04c      	b.n	80089da <UART_SetConfig+0x5a6>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e048      	b.n	80089da <UART_SetConfig+0x5a6>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e044      	b.n	80089da <UART_SetConfig+0x5a6>
 8008950:	2320      	movs	r3, #32
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e040      	b.n	80089da <UART_SetConfig+0x5a6>
 8008958:	2340      	movs	r3, #64	@ 0x40
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e03c      	b.n	80089da <UART_SetConfig+0x5a6>
 8008960:	2380      	movs	r3, #128	@ 0x80
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e038      	b.n	80089da <UART_SetConfig+0x5a6>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a5b      	ldr	r2, [pc, #364]	@ (8008adc <UART_SetConfig+0x6a8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d130      	bne.n	80089d4 <UART_SetConfig+0x5a0>
 8008972:	4b57      	ldr	r3, [pc, #348]	@ (8008ad0 <UART_SetConfig+0x69c>)
 8008974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b05      	cmp	r3, #5
 800897c:	d826      	bhi.n	80089cc <UART_SetConfig+0x598>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x550>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	0800899d 	.word	0x0800899d
 8008988:	080089a5 	.word	0x080089a5
 800898c:	080089ad 	.word	0x080089ad
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089bd 	.word	0x080089bd
 8008998:	080089c5 	.word	0x080089c5
 800899c:	2302      	movs	r3, #2
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a2:	e01a      	b.n	80089da <UART_SetConfig+0x5a6>
 80089a4:	2304      	movs	r3, #4
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e016      	b.n	80089da <UART_SetConfig+0x5a6>
 80089ac:	2308      	movs	r3, #8
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e012      	b.n	80089da <UART_SetConfig+0x5a6>
 80089b4:	2310      	movs	r3, #16
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e00e      	b.n	80089da <UART_SetConfig+0x5a6>
 80089bc:	2320      	movs	r3, #32
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e00a      	b.n	80089da <UART_SetConfig+0x5a6>
 80089c4:	2340      	movs	r3, #64	@ 0x40
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e006      	b.n	80089da <UART_SetConfig+0x5a6>
 80089cc:	2380      	movs	r3, #128	@ 0x80
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e002      	b.n	80089da <UART_SetConfig+0x5a6>
 80089d4:	2380      	movs	r3, #128	@ 0x80
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a3f      	ldr	r2, [pc, #252]	@ (8008adc <UART_SetConfig+0x6a8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	f040 80f8 	bne.w	8008bd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	dc46      	bgt.n	8008a7c <UART_SetConfig+0x648>
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	f2c0 8082 	blt.w	8008af8 <UART_SetConfig+0x6c4>
 80089f4:	3b02      	subs	r3, #2
 80089f6:	2b1e      	cmp	r3, #30
 80089f8:	d87e      	bhi.n	8008af8 <UART_SetConfig+0x6c4>
 80089fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008a00 <UART_SetConfig+0x5cc>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a83 	.word	0x08008a83
 8008a04:	08008af9 	.word	0x08008af9
 8008a08:	08008a8b 	.word	0x08008a8b
 8008a0c:	08008af9 	.word	0x08008af9
 8008a10:	08008af9 	.word	0x08008af9
 8008a14:	08008af9 	.word	0x08008af9
 8008a18:	08008a9b 	.word	0x08008a9b
 8008a1c:	08008af9 	.word	0x08008af9
 8008a20:	08008af9 	.word	0x08008af9
 8008a24:	08008af9 	.word	0x08008af9
 8008a28:	08008af9 	.word	0x08008af9
 8008a2c:	08008af9 	.word	0x08008af9
 8008a30:	08008af9 	.word	0x08008af9
 8008a34:	08008af9 	.word	0x08008af9
 8008a38:	08008aab 	.word	0x08008aab
 8008a3c:	08008af9 	.word	0x08008af9
 8008a40:	08008af9 	.word	0x08008af9
 8008a44:	08008af9 	.word	0x08008af9
 8008a48:	08008af9 	.word	0x08008af9
 8008a4c:	08008af9 	.word	0x08008af9
 8008a50:	08008af9 	.word	0x08008af9
 8008a54:	08008af9 	.word	0x08008af9
 8008a58:	08008af9 	.word	0x08008af9
 8008a5c:	08008af9 	.word	0x08008af9
 8008a60:	08008af9 	.word	0x08008af9
 8008a64:	08008af9 	.word	0x08008af9
 8008a68:	08008af9 	.word	0x08008af9
 8008a6c:	08008af9 	.word	0x08008af9
 8008a70:	08008af9 	.word	0x08008af9
 8008a74:	08008af9 	.word	0x08008af9
 8008a78:	08008aeb 	.word	0x08008aeb
 8008a7c:	2b40      	cmp	r3, #64	@ 0x40
 8008a7e:	d037      	beq.n	8008af0 <UART_SetConfig+0x6bc>
 8008a80:	e03a      	b.n	8008af8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a82:	f7fd ff8f 	bl	80069a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a88:	e03c      	b.n	8008b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fd ff9e 	bl	80069d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a98:	e034      	b.n	8008b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9a:	f107 0318 	add.w	r3, r7, #24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe f8ea 	bl	8006c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa8:	e02c      	b.n	8008b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aaa:	4b09      	ldr	r3, [pc, #36]	@ (8008ad0 <UART_SetConfig+0x69c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d016      	beq.n	8008ae4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab6:	4b06      	ldr	r3, [pc, #24]	@ (8008ad0 <UART_SetConfig+0x69c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	08db      	lsrs	r3, r3, #3
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	4a07      	ldr	r2, [pc, #28]	@ (8008ae0 <UART_SetConfig+0x6ac>)
 8008ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac8:	e01c      	b.n	8008b04 <UART_SetConfig+0x6d0>
 8008aca:	bf00      	nop
 8008acc:	40011400 	.word	0x40011400
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	40007800 	.word	0x40007800
 8008ad8:	40007c00 	.word	0x40007c00
 8008adc:	58000c00 	.word	0x58000c00
 8008ae0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8008d5c <UART_SetConfig+0x928>)
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae8:	e00c      	b.n	8008b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aea:	4b9d      	ldr	r3, [pc, #628]	@ (8008d60 <UART_SetConfig+0x92c>)
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aee:	e009      	b.n	8008b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af6:	e005      	b.n	8008b04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 81de 	beq.w	8008ec8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	4a94      	ldr	r2, [pc, #592]	@ (8008d64 <UART_SetConfig+0x930>)
 8008b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b16:	461a      	mov	r2, r3
 8008b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	4413      	add	r3, r2
 8008b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d305      	bcc.n	8008b3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d903      	bls.n	8008b44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b42:	e1c1      	b.n	8008ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b46:	2200      	movs	r2, #0
 8008b48:	60bb      	str	r3, [r7, #8]
 8008b4a:	60fa      	str	r2, [r7, #12]
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b50:	4a84      	ldr	r2, [pc, #528]	@ (8008d64 <UART_SetConfig+0x930>)
 8008b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b66:	f7f7 fdcf 	bl	8000708 <__aeabi_uldivmod>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	020b      	lsls	r3, r1, #8
 8008b7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b80:	0202      	lsls	r2, r0, #8
 8008b82:	6979      	ldr	r1, [r7, #20]
 8008b84:	6849      	ldr	r1, [r1, #4]
 8008b86:	0849      	lsrs	r1, r1, #1
 8008b88:	2000      	movs	r0, #0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	eb12 0804 	adds.w	r8, r2, r4
 8008b92:	eb43 0905 	adc.w	r9, r3, r5
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	469a      	mov	sl, r3
 8008b9e:	4693      	mov	fp, r2
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	465b      	mov	r3, fp
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 fdae 	bl	8000708 <__aeabi_uldivmod>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bba:	d308      	bcc.n	8008bce <UART_SetConfig+0x79a>
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bc2:	d204      	bcs.n	8008bce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bca:	60da      	str	r2, [r3, #12]
 8008bcc:	e17c      	b.n	8008ec8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bd4:	e178      	b.n	8008ec8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bde:	f040 80c5 	bne.w	8008d6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008be2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	dc48      	bgt.n	8008c7c <UART_SetConfig+0x848>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	db7b      	blt.n	8008ce6 <UART_SetConfig+0x8b2>
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d879      	bhi.n	8008ce6 <UART_SetConfig+0x8b2>
 8008bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf8 <UART_SetConfig+0x7c4>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c83 	.word	0x08008c83
 8008bfc:	08008c8b 	.word	0x08008c8b
 8008c00:	08008ce7 	.word	0x08008ce7
 8008c04:	08008ce7 	.word	0x08008ce7
 8008c08:	08008c93 	.word	0x08008c93
 8008c0c:	08008ce7 	.word	0x08008ce7
 8008c10:	08008ce7 	.word	0x08008ce7
 8008c14:	08008ce7 	.word	0x08008ce7
 8008c18:	08008ca3 	.word	0x08008ca3
 8008c1c:	08008ce7 	.word	0x08008ce7
 8008c20:	08008ce7 	.word	0x08008ce7
 8008c24:	08008ce7 	.word	0x08008ce7
 8008c28:	08008ce7 	.word	0x08008ce7
 8008c2c:	08008ce7 	.word	0x08008ce7
 8008c30:	08008ce7 	.word	0x08008ce7
 8008c34:	08008ce7 	.word	0x08008ce7
 8008c38:	08008cb3 	.word	0x08008cb3
 8008c3c:	08008ce7 	.word	0x08008ce7
 8008c40:	08008ce7 	.word	0x08008ce7
 8008c44:	08008ce7 	.word	0x08008ce7
 8008c48:	08008ce7 	.word	0x08008ce7
 8008c4c:	08008ce7 	.word	0x08008ce7
 8008c50:	08008ce7 	.word	0x08008ce7
 8008c54:	08008ce7 	.word	0x08008ce7
 8008c58:	08008ce7 	.word	0x08008ce7
 8008c5c:	08008ce7 	.word	0x08008ce7
 8008c60:	08008ce7 	.word	0x08008ce7
 8008c64:	08008ce7 	.word	0x08008ce7
 8008c68:	08008ce7 	.word	0x08008ce7
 8008c6c:	08008ce7 	.word	0x08008ce7
 8008c70:	08008ce7 	.word	0x08008ce7
 8008c74:	08008ce7 	.word	0x08008ce7
 8008c78:	08008cd9 	.word	0x08008cd9
 8008c7c:	2b40      	cmp	r3, #64	@ 0x40
 8008c7e:	d02e      	beq.n	8008cde <UART_SetConfig+0x8aa>
 8008c80:	e031      	b.n	8008ce6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c82:	f7fc fc59 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8008c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c88:	e033      	b.n	8008cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c8a:	f7fc fc6b 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8008c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c90:	e02f      	b.n	8008cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fd fe9a 	bl	80069d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca0:	e027      	b.n	8008cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca2:	f107 0318 	add.w	r3, r7, #24
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fd ffe6 	bl	8006c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb0:	e01f      	b.n	8008cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8008d68 <UART_SetConfig+0x934>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8008d68 <UART_SetConfig+0x934>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	08db      	lsrs	r3, r3, #3
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	4a24      	ldr	r2, [pc, #144]	@ (8008d5c <UART_SetConfig+0x928>)
 8008cca:	fa22 f303 	lsr.w	r3, r2, r3
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cd0:	e00f      	b.n	8008cf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cd2:	4b22      	ldr	r3, [pc, #136]	@ (8008d5c <UART_SetConfig+0x928>)
 8008cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd6:	e00c      	b.n	8008cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cd8:	4b21      	ldr	r3, [pc, #132]	@ (8008d60 <UART_SetConfig+0x92c>)
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cdc:	e009      	b.n	8008cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce4:	e005      	b.n	8008cf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 80e7 	beq.w	8008ec8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfe:	4a19      	ldr	r2, [pc, #100]	@ (8008d64 <UART_SetConfig+0x930>)
 8008d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d0c:	005a      	lsls	r2, r3, #1
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	441a      	add	r2, r3
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d916      	bls.n	8008d54 <UART_SetConfig+0x920>
 8008d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d2c:	d212      	bcs.n	8008d54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	f023 030f 	bic.w	r3, r3, #15
 8008d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3a:	085b      	lsrs	r3, r3, #1
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d46:	4313      	orrs	r3, r2
 8008d48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008d50:	60da      	str	r2, [r3, #12]
 8008d52:	e0b9      	b.n	8008ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d5a:	e0b5      	b.n	8008ec8 <UART_SetConfig+0xa94>
 8008d5c:	03d09000 	.word	0x03d09000
 8008d60:	003d0900 	.word	0x003d0900
 8008d64:	0800db80 	.word	0x0800db80
 8008d68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	dc49      	bgt.n	8008e08 <UART_SetConfig+0x9d4>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db7c      	blt.n	8008e72 <UART_SetConfig+0xa3e>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d87a      	bhi.n	8008e72 <UART_SetConfig+0xa3e>
 8008d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <UART_SetConfig+0x950>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008e0f 	.word	0x08008e0f
 8008d88:	08008e17 	.word	0x08008e17
 8008d8c:	08008e73 	.word	0x08008e73
 8008d90:	08008e73 	.word	0x08008e73
 8008d94:	08008e1f 	.word	0x08008e1f
 8008d98:	08008e73 	.word	0x08008e73
 8008d9c:	08008e73 	.word	0x08008e73
 8008da0:	08008e73 	.word	0x08008e73
 8008da4:	08008e2f 	.word	0x08008e2f
 8008da8:	08008e73 	.word	0x08008e73
 8008dac:	08008e73 	.word	0x08008e73
 8008db0:	08008e73 	.word	0x08008e73
 8008db4:	08008e73 	.word	0x08008e73
 8008db8:	08008e73 	.word	0x08008e73
 8008dbc:	08008e73 	.word	0x08008e73
 8008dc0:	08008e73 	.word	0x08008e73
 8008dc4:	08008e3f 	.word	0x08008e3f
 8008dc8:	08008e73 	.word	0x08008e73
 8008dcc:	08008e73 	.word	0x08008e73
 8008dd0:	08008e73 	.word	0x08008e73
 8008dd4:	08008e73 	.word	0x08008e73
 8008dd8:	08008e73 	.word	0x08008e73
 8008ddc:	08008e73 	.word	0x08008e73
 8008de0:	08008e73 	.word	0x08008e73
 8008de4:	08008e73 	.word	0x08008e73
 8008de8:	08008e73 	.word	0x08008e73
 8008dec:	08008e73 	.word	0x08008e73
 8008df0:	08008e73 	.word	0x08008e73
 8008df4:	08008e73 	.word	0x08008e73
 8008df8:	08008e73 	.word	0x08008e73
 8008dfc:	08008e73 	.word	0x08008e73
 8008e00:	08008e73 	.word	0x08008e73
 8008e04:	08008e65 	.word	0x08008e65
 8008e08:	2b40      	cmp	r3, #64	@ 0x40
 8008e0a:	d02e      	beq.n	8008e6a <UART_SetConfig+0xa36>
 8008e0c:	e031      	b.n	8008e72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e0e:	f7fc fb93 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8008e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e14:	e033      	b.n	8008e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e16:	f7fc fba5 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8008e1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e1c:	e02f      	b.n	8008e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd fdd4 	bl	80069d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2c:	e027      	b.n	8008e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2e:	f107 0318 	add.w	r3, r7, #24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd ff20 	bl	8006c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e3c:	e01f      	b.n	8008e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef4 <UART_SetConfig+0xac0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef4 <UART_SetConfig+0xac0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	08db      	lsrs	r3, r3, #3
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	4a28      	ldr	r2, [pc, #160]	@ (8008ef8 <UART_SetConfig+0xac4>)
 8008e56:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e5c:	e00f      	b.n	8008e7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e5e:	4b26      	ldr	r3, [pc, #152]	@ (8008ef8 <UART_SetConfig+0xac4>)
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e62:	e00c      	b.n	8008e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e64:	4b25      	ldr	r3, [pc, #148]	@ (8008efc <UART_SetConfig+0xac8>)
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e68:	e009      	b.n	8008e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e005      	b.n	8008e7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d021      	beq.n	8008ec8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	4a1d      	ldr	r2, [pc, #116]	@ (8008f00 <UART_SetConfig+0xacc>)
 8008e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	441a      	add	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	2b0f      	cmp	r3, #15
 8008eac:	d909      	bls.n	8008ec2 <UART_SetConfig+0xa8e>
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb4:	d205      	bcs.n	8008ec2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60da      	str	r2, [r3, #12]
 8008ec0:	e002      	b.n	8008ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2200      	movs	r2, #0
 8008edc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ee4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3748      	adds	r7, #72	@ 0x48
 8008eec:	46bd      	mov	sp, r7
 8008eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	03d09000 	.word	0x03d09000
 8008efc:	003d0900 	.word	0x003d0900
 8008f00:	0800db80 	.word	0x0800db80

08008f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01a      	beq.n	800901a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009002:	d10a      	bne.n	800901a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b098      	sub	sp, #96	@ 0x60
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009058:	f7f8 fcac 	bl	80019b4 <HAL_GetTick>
 800905c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b08      	cmp	r3, #8
 800906a:	d12f      	bne.n	80090cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800906c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009074:	2200      	movs	r2, #0
 8009076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f88e 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d022      	beq.n	80090cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800909a:	653b      	str	r3, [r7, #80]	@ 0x50
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090ac:	e841 2300 	strex	r3, r2, [r1]
 80090b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e6      	bne.n	8009086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e063      	b.n	8009194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0304 	and.w	r3, r3, #4
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d149      	bne.n	800916e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090e2:	2200      	movs	r2, #0
 80090e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f857 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d03c      	beq.n	800916e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	623b      	str	r3, [r7, #32]
   return(result);
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009112:	633b      	str	r3, [r7, #48]	@ 0x30
 8009114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e6      	bne.n	80090f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3308      	adds	r3, #8
 800912c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	60fb      	str	r3, [r7, #12]
   return(result);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009146:	61fa      	str	r2, [r7, #28]
 8009148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	69b9      	ldr	r1, [r7, #24]
 800914c:	69fa      	ldr	r2, [r7, #28]
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	617b      	str	r3, [r7, #20]
   return(result);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e5      	bne.n	8009126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e012      	b.n	8009194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3758      	adds	r7, #88	@ 0x58
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ac:	e04f      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d04b      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b6:	f7f8 fbfd 	bl	80019b4 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d302      	bcc.n	80091cc <UART_WaitOnFlagUntilTimeout+0x30>
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e04e      	b.n	800926e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0304 	and.w	r3, r3, #4
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d037      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0xb2>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b80      	cmp	r3, #128	@ 0x80
 80091e2:	d034      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b40      	cmp	r3, #64	@ 0x40
 80091e8:	d031      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d110      	bne.n	800921a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2208      	movs	r2, #8
 80091fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 f839 	bl	8009278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2208      	movs	r2, #8
 800920a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e029      	b.n	800926e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009228:	d111      	bne.n	800924e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f81f 	bl	8009278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e00f      	b.n	800926e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69da      	ldr	r2, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4013      	ands	r3, r2
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	429a      	cmp	r2, r3
 800925c:	bf0c      	ite	eq
 800925e:	2301      	moveq	r3, #1
 8009260:	2300      	movne	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	429a      	cmp	r2, r3
 800926a:	d0a0      	beq.n	80091ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b095      	sub	sp, #84	@ 0x54
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800929e:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e6      	bne.n	8009280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3308      	adds	r3, #8
 80092b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009340 <UART_EndRxTransfer+0xc8>)
 80092c6:	4013      	ands	r3, r2
 80092c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e5      	bne.n	80092b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d118      	bne.n	8009320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f023 0310 	bic.w	r3, r3, #16
 8009302:	647b      	str	r3, [r7, #68]	@ 0x44
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6979      	ldr	r1, [r7, #20]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	613b      	str	r3, [r7, #16]
   return(result);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e6      	bne.n	80092ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009334:	bf00      	nop
 8009336:	3754      	adds	r7, #84	@ 0x54
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	effffffe 	.word	0xeffffffe

08009344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff f854 	bl	8008408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	60bb      	str	r3, [r7, #8]
   return(result);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	61bb      	str	r3, [r7, #24]
 8009390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	613b      	str	r3, [r7, #16]
   return(result);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f81f 	bl	80083f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b6:	bf00      	nop
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009408:	2b01      	cmp	r3, #1
 800940a:	d101      	bne.n	8009410 <HAL_UARTEx_DisableFifoMode+0x16>
 800940c:	2302      	movs	r3, #2
 800940e:	e027      	b.n	8009460 <HAL_UARTEx_DisableFifoMode+0x66>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2224      	movs	r2, #36	@ 0x24
 800941c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0201 	bic.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800943e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800947c:	2b01      	cmp	r3, #1
 800947e:	d101      	bne.n	8009484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009480:	2302      	movs	r3, #2
 8009482:	e02d      	b.n	80094e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2224      	movs	r2, #36	@ 0x24
 8009490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f84f 	bl	8009564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e02d      	b.n	800955c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2224      	movs	r2, #36	@ 0x24
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0201 	bic.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f811 	bl	8009564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009570:	2b00      	cmp	r3, #0
 8009572:	d108      	bne.n	8009586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009584:	e031      	b.n	80095ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009586:	2310      	movs	r3, #16
 8009588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800958a:	2310      	movs	r3, #16
 800958c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	0e5b      	lsrs	r3, r3, #25
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	0f5b      	lsrs	r3, r3, #29
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	7b3a      	ldrb	r2, [r7, #12]
 80095b2:	4911      	ldr	r1, [pc, #68]	@ (80095f8 <UARTEx_SetNbDataToProcess+0x94>)
 80095b4:	5c8a      	ldrb	r2, [r1, r2]
 80095b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095ba:	7b3a      	ldrb	r2, [r7, #12]
 80095bc:	490f      	ldr	r1, [pc, #60]	@ (80095fc <UARTEx_SetNbDataToProcess+0x98>)
 80095be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	7b7a      	ldrb	r2, [r7, #13]
 80095d0:	4909      	ldr	r1, [pc, #36]	@ (80095f8 <UARTEx_SetNbDataToProcess+0x94>)
 80095d2:	5c8a      	ldrb	r2, [r1, r2]
 80095d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095d8:	7b7a      	ldrb	r2, [r7, #13]
 80095da:	4908      	ldr	r1, [pc, #32]	@ (80095fc <UARTEx_SetNbDataToProcess+0x98>)
 80095dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095de:	fb93 f3f2 	sdiv	r3, r3, r2
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095ea:	bf00      	nop
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	0800db98 	.word	0x0800db98
 80095fc:	0800dba0 	.word	0x0800dba0

08009600 <__cvt>:
 8009600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009602:	ed2d 8b02 	vpush	{d8}
 8009606:	eeb0 8b40 	vmov.f64	d8, d0
 800960a:	b085      	sub	sp, #20
 800960c:	4617      	mov	r7, r2
 800960e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009610:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009612:	ee18 2a90 	vmov	r2, s17
 8009616:	f025 0520 	bic.w	r5, r5, #32
 800961a:	2a00      	cmp	r2, #0
 800961c:	bfb6      	itet	lt
 800961e:	222d      	movlt	r2, #45	@ 0x2d
 8009620:	2200      	movge	r2, #0
 8009622:	eeb1 8b40 	vneglt.f64	d8, d0
 8009626:	2d46      	cmp	r5, #70	@ 0x46
 8009628:	460c      	mov	r4, r1
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	d004      	beq.n	8009638 <__cvt+0x38>
 800962e:	2d45      	cmp	r5, #69	@ 0x45
 8009630:	d100      	bne.n	8009634 <__cvt+0x34>
 8009632:	3401      	adds	r4, #1
 8009634:	2102      	movs	r1, #2
 8009636:	e000      	b.n	800963a <__cvt+0x3a>
 8009638:	2103      	movs	r1, #3
 800963a:	ab03      	add	r3, sp, #12
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	ab02      	add	r3, sp, #8
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	4622      	mov	r2, r4
 8009644:	4633      	mov	r3, r6
 8009646:	eeb0 0b48 	vmov.f64	d0, d8
 800964a:	f001 f84d 	bl	800a6e8 <_dtoa_r>
 800964e:	2d47      	cmp	r5, #71	@ 0x47
 8009650:	d114      	bne.n	800967c <__cvt+0x7c>
 8009652:	07fb      	lsls	r3, r7, #31
 8009654:	d50a      	bpl.n	800966c <__cvt+0x6c>
 8009656:	1902      	adds	r2, r0, r4
 8009658:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009660:	bf08      	it	eq
 8009662:	9203      	streq	r2, [sp, #12]
 8009664:	2130      	movs	r1, #48	@ 0x30
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	4293      	cmp	r3, r2
 800966a:	d319      	bcc.n	80096a0 <__cvt+0xa0>
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009670:	1a1b      	subs	r3, r3, r0
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	b005      	add	sp, #20
 8009676:	ecbd 8b02 	vpop	{d8}
 800967a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967c:	2d46      	cmp	r5, #70	@ 0x46
 800967e:	eb00 0204 	add.w	r2, r0, r4
 8009682:	d1e9      	bne.n	8009658 <__cvt+0x58>
 8009684:	7803      	ldrb	r3, [r0, #0]
 8009686:	2b30      	cmp	r3, #48	@ 0x30
 8009688:	d107      	bne.n	800969a <__cvt+0x9a>
 800968a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009692:	bf1c      	itt	ne
 8009694:	f1c4 0401 	rsbne	r4, r4, #1
 8009698:	6034      	strne	r4, [r6, #0]
 800969a:	6833      	ldr	r3, [r6, #0]
 800969c:	441a      	add	r2, r3
 800969e:	e7db      	b.n	8009658 <__cvt+0x58>
 80096a0:	1c5c      	adds	r4, r3, #1
 80096a2:	9403      	str	r4, [sp, #12]
 80096a4:	7019      	strb	r1, [r3, #0]
 80096a6:	e7de      	b.n	8009666 <__cvt+0x66>

080096a8 <__exponent>:
 80096a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096aa:	2900      	cmp	r1, #0
 80096ac:	bfba      	itte	lt
 80096ae:	4249      	neglt	r1, r1
 80096b0:	232d      	movlt	r3, #45	@ 0x2d
 80096b2:	232b      	movge	r3, #43	@ 0x2b
 80096b4:	2909      	cmp	r1, #9
 80096b6:	7002      	strb	r2, [r0, #0]
 80096b8:	7043      	strb	r3, [r0, #1]
 80096ba:	dd29      	ble.n	8009710 <__exponent+0x68>
 80096bc:	f10d 0307 	add.w	r3, sp, #7
 80096c0:	461d      	mov	r5, r3
 80096c2:	270a      	movs	r7, #10
 80096c4:	461a      	mov	r2, r3
 80096c6:	fbb1 f6f7 	udiv	r6, r1, r7
 80096ca:	fb07 1416 	mls	r4, r7, r6, r1
 80096ce:	3430      	adds	r4, #48	@ 0x30
 80096d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096d4:	460c      	mov	r4, r1
 80096d6:	2c63      	cmp	r4, #99	@ 0x63
 80096d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80096dc:	4631      	mov	r1, r6
 80096de:	dcf1      	bgt.n	80096c4 <__exponent+0x1c>
 80096e0:	3130      	adds	r1, #48	@ 0x30
 80096e2:	1e94      	subs	r4, r2, #2
 80096e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096e8:	1c41      	adds	r1, r0, #1
 80096ea:	4623      	mov	r3, r4
 80096ec:	42ab      	cmp	r3, r5
 80096ee:	d30a      	bcc.n	8009706 <__exponent+0x5e>
 80096f0:	f10d 0309 	add.w	r3, sp, #9
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	42ac      	cmp	r4, r5
 80096f8:	bf88      	it	hi
 80096fa:	2300      	movhi	r3, #0
 80096fc:	3302      	adds	r3, #2
 80096fe:	4403      	add	r3, r0
 8009700:	1a18      	subs	r0, r3, r0
 8009702:	b003      	add	sp, #12
 8009704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009706:	f813 6b01 	ldrb.w	r6, [r3], #1
 800970a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800970e:	e7ed      	b.n	80096ec <__exponent+0x44>
 8009710:	2330      	movs	r3, #48	@ 0x30
 8009712:	3130      	adds	r1, #48	@ 0x30
 8009714:	7083      	strb	r3, [r0, #2]
 8009716:	70c1      	strb	r1, [r0, #3]
 8009718:	1d03      	adds	r3, r0, #4
 800971a:	e7f1      	b.n	8009700 <__exponent+0x58>
 800971c:	0000      	movs	r0, r0
	...

08009720 <_printf_float>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	b08d      	sub	sp, #52	@ 0x34
 8009726:	460c      	mov	r4, r1
 8009728:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800972c:	4616      	mov	r6, r2
 800972e:	461f      	mov	r7, r3
 8009730:	4605      	mov	r5, r0
 8009732:	f000 fed1 	bl	800a4d8 <_localeconv_r>
 8009736:	f8d0 b000 	ldr.w	fp, [r0]
 800973a:	4658      	mov	r0, fp
 800973c:	f7f6 fe20 	bl	8000380 <strlen>
 8009740:	2300      	movs	r3, #0
 8009742:	930a      	str	r3, [sp, #40]	@ 0x28
 8009744:	f8d8 3000 	ldr.w	r3, [r8]
 8009748:	f894 9018 	ldrb.w	r9, [r4, #24]
 800974c:	6822      	ldr	r2, [r4, #0]
 800974e:	9005      	str	r0, [sp, #20]
 8009750:	3307      	adds	r3, #7
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	f103 0108 	add.w	r1, r3, #8
 800975a:	f8c8 1000 	str.w	r1, [r8]
 800975e:	ed93 0b00 	vldr	d0, [r3]
 8009762:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80099c0 <_printf_float+0x2a0>
 8009766:	eeb0 7bc0 	vabs.f64	d7, d0
 800976a:	eeb4 7b46 	vcmp.f64	d7, d6
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009776:	dd24      	ble.n	80097c2 <_printf_float+0xa2>
 8009778:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800977c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009780:	d502      	bpl.n	8009788 <_printf_float+0x68>
 8009782:	232d      	movs	r3, #45	@ 0x2d
 8009784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009788:	498f      	ldr	r1, [pc, #572]	@ (80099c8 <_printf_float+0x2a8>)
 800978a:	4b90      	ldr	r3, [pc, #576]	@ (80099cc <_printf_float+0x2ac>)
 800978c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009790:	bf8c      	ite	hi
 8009792:	4688      	movhi	r8, r1
 8009794:	4698      	movls	r8, r3
 8009796:	f022 0204 	bic.w	r2, r2, #4
 800979a:	2303      	movs	r3, #3
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	6022      	str	r2, [r4, #0]
 80097a0:	f04f 0a00 	mov.w	sl, #0
 80097a4:	9700      	str	r7, [sp, #0]
 80097a6:	4633      	mov	r3, r6
 80097a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097aa:	4621      	mov	r1, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f9d1 	bl	8009b54 <_printf_common>
 80097b2:	3001      	adds	r0, #1
 80097b4:	f040 8089 	bne.w	80098ca <_printf_float+0x1aa>
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	b00d      	add	sp, #52	@ 0x34
 80097be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	d709      	bvc.n	80097e0 <_printf_float+0xc0>
 80097cc:	ee10 3a90 	vmov	r3, s1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfbc      	itt	lt
 80097d4:	232d      	movlt	r3, #45	@ 0x2d
 80097d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097da:	497d      	ldr	r1, [pc, #500]	@ (80099d0 <_printf_float+0x2b0>)
 80097dc:	4b7d      	ldr	r3, [pc, #500]	@ (80099d4 <_printf_float+0x2b4>)
 80097de:	e7d5      	b.n	800978c <_printf_float+0x6c>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	1c59      	adds	r1, r3, #1
 80097e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80097e8:	d139      	bne.n	800985e <_printf_float+0x13e>
 80097ea:	2306      	movs	r3, #6
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097f2:	2300      	movs	r3, #0
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80097fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80097fe:	ab09      	add	r3, sp, #36	@ 0x24
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	6861      	ldr	r1, [r4, #4]
 8009804:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009808:	4628      	mov	r0, r5
 800980a:	f7ff fef9 	bl	8009600 <__cvt>
 800980e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009814:	4680      	mov	r8, r0
 8009816:	d129      	bne.n	800986c <_printf_float+0x14c>
 8009818:	1cc8      	adds	r0, r1, #3
 800981a:	db02      	blt.n	8009822 <_printf_float+0x102>
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	4299      	cmp	r1, r3
 8009820:	dd41      	ble.n	80098a6 <_printf_float+0x186>
 8009822:	f1a9 0902 	sub.w	r9, r9, #2
 8009826:	fa5f f989 	uxtb.w	r9, r9
 800982a:	3901      	subs	r1, #1
 800982c:	464a      	mov	r2, r9
 800982e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009832:	9109      	str	r1, [sp, #36]	@ 0x24
 8009834:	f7ff ff38 	bl	80096a8 <__exponent>
 8009838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800983a:	1813      	adds	r3, r2, r0
 800983c:	2a01      	cmp	r2, #1
 800983e:	4682      	mov	sl, r0
 8009840:	6123      	str	r3, [r4, #16]
 8009842:	dc02      	bgt.n	800984a <_printf_float+0x12a>
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	07d2      	lsls	r2, r2, #31
 8009848:	d501      	bpl.n	800984e <_printf_float+0x12e>
 800984a:	3301      	adds	r3, #1
 800984c:	6123      	str	r3, [r4, #16]
 800984e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0a6      	beq.n	80097a4 <_printf_float+0x84>
 8009856:	232d      	movs	r3, #45	@ 0x2d
 8009858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800985c:	e7a2      	b.n	80097a4 <_printf_float+0x84>
 800985e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009862:	d1c4      	bne.n	80097ee <_printf_float+0xce>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1c2      	bne.n	80097ee <_printf_float+0xce>
 8009868:	2301      	movs	r3, #1
 800986a:	e7bf      	b.n	80097ec <_printf_float+0xcc>
 800986c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009870:	d9db      	bls.n	800982a <_printf_float+0x10a>
 8009872:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009876:	d118      	bne.n	80098aa <_printf_float+0x18a>
 8009878:	2900      	cmp	r1, #0
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	dd0b      	ble.n	8009896 <_printf_float+0x176>
 800987e:	6121      	str	r1, [r4, #16]
 8009880:	b913      	cbnz	r3, 8009888 <_printf_float+0x168>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	07d0      	lsls	r0, r2, #31
 8009886:	d502      	bpl.n	800988e <_printf_float+0x16e>
 8009888:	3301      	adds	r3, #1
 800988a:	440b      	add	r3, r1
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009890:	f04f 0a00 	mov.w	sl, #0
 8009894:	e7db      	b.n	800984e <_printf_float+0x12e>
 8009896:	b913      	cbnz	r3, 800989e <_printf_float+0x17e>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	07d2      	lsls	r2, r2, #31
 800989c:	d501      	bpl.n	80098a2 <_printf_float+0x182>
 800989e:	3302      	adds	r3, #2
 80098a0:	e7f4      	b.n	800988c <_printf_float+0x16c>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e7f2      	b.n	800988c <_printf_float+0x16c>
 80098a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80098aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ac:	4299      	cmp	r1, r3
 80098ae:	db05      	blt.n	80098bc <_printf_float+0x19c>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	6121      	str	r1, [r4, #16]
 80098b4:	07d8      	lsls	r0, r3, #31
 80098b6:	d5ea      	bpl.n	800988e <_printf_float+0x16e>
 80098b8:	1c4b      	adds	r3, r1, #1
 80098ba:	e7e7      	b.n	800988c <_printf_float+0x16c>
 80098bc:	2900      	cmp	r1, #0
 80098be:	bfd4      	ite	le
 80098c0:	f1c1 0202 	rsble	r2, r1, #2
 80098c4:	2201      	movgt	r2, #1
 80098c6:	4413      	add	r3, r2
 80098c8:	e7e0      	b.n	800988c <_printf_float+0x16c>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	055a      	lsls	r2, r3, #21
 80098ce:	d407      	bmi.n	80098e0 <_printf_float+0x1c0>
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	4642      	mov	r2, r8
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	d12a      	bne.n	8009934 <_printf_float+0x214>
 80098de:	e76b      	b.n	80097b8 <_printf_float+0x98>
 80098e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80098e4:	f240 80e0 	bls.w	8009aa8 <_printf_float+0x388>
 80098e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80098ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f4:	d133      	bne.n	800995e <_printf_float+0x23e>
 80098f6:	4a38      	ldr	r2, [pc, #224]	@ (80099d8 <_printf_float+0x2b8>)
 80098f8:	2301      	movs	r3, #1
 80098fa:	4631      	mov	r1, r6
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b8      	blx	r7
 8009900:	3001      	adds	r0, #1
 8009902:	f43f af59 	beq.w	80097b8 <_printf_float+0x98>
 8009906:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800990a:	4543      	cmp	r3, r8
 800990c:	db02      	blt.n	8009914 <_printf_float+0x1f4>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	07d8      	lsls	r0, r3, #31
 8009912:	d50f      	bpl.n	8009934 <_printf_float+0x214>
 8009914:	9b05      	ldr	r3, [sp, #20]
 8009916:	465a      	mov	r2, fp
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	f43f af4a 	beq.w	80097b8 <_printf_float+0x98>
 8009924:	f04f 0900 	mov.w	r9, #0
 8009928:	f108 38ff 	add.w	r8, r8, #4294967295
 800992c:	f104 0a1a 	add.w	sl, r4, #26
 8009930:	45c8      	cmp	r8, r9
 8009932:	dc09      	bgt.n	8009948 <_printf_float+0x228>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	079b      	lsls	r3, r3, #30
 8009938:	f100 8107 	bmi.w	8009b4a <_printf_float+0x42a>
 800993c:	68e0      	ldr	r0, [r4, #12]
 800993e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009940:	4298      	cmp	r0, r3
 8009942:	bfb8      	it	lt
 8009944:	4618      	movlt	r0, r3
 8009946:	e739      	b.n	80097bc <_printf_float+0x9c>
 8009948:	2301      	movs	r3, #1
 800994a:	4652      	mov	r2, sl
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	47b8      	blx	r7
 8009952:	3001      	adds	r0, #1
 8009954:	f43f af30 	beq.w	80097b8 <_printf_float+0x98>
 8009958:	f109 0901 	add.w	r9, r9, #1
 800995c:	e7e8      	b.n	8009930 <_printf_float+0x210>
 800995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	dc3b      	bgt.n	80099dc <_printf_float+0x2bc>
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <_printf_float+0x2b8>)
 8009966:	2301      	movs	r3, #1
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af22 	beq.w	80097b8 <_printf_float+0x98>
 8009974:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009978:	ea59 0303 	orrs.w	r3, r9, r3
 800997c:	d102      	bne.n	8009984 <_printf_float+0x264>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	07d9      	lsls	r1, r3, #31
 8009982:	d5d7      	bpl.n	8009934 <_printf_float+0x214>
 8009984:	9b05      	ldr	r3, [sp, #20]
 8009986:	465a      	mov	r2, fp
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	f43f af12 	beq.w	80097b8 <_printf_float+0x98>
 8009994:	f04f 0a00 	mov.w	sl, #0
 8009998:	f104 0b1a 	add.w	fp, r4, #26
 800999c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999e:	425b      	negs	r3, r3
 80099a0:	4553      	cmp	r3, sl
 80099a2:	dc01      	bgt.n	80099a8 <_printf_float+0x288>
 80099a4:	464b      	mov	r3, r9
 80099a6:	e794      	b.n	80098d2 <_printf_float+0x1b2>
 80099a8:	2301      	movs	r3, #1
 80099aa:	465a      	mov	r2, fp
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af00 	beq.w	80097b8 <_printf_float+0x98>
 80099b8:	f10a 0a01 	add.w	sl, sl, #1
 80099bc:	e7ee      	b.n	800999c <_printf_float+0x27c>
 80099be:	bf00      	nop
 80099c0:	ffffffff 	.word	0xffffffff
 80099c4:	7fefffff 	.word	0x7fefffff
 80099c8:	0800dbac 	.word	0x0800dbac
 80099cc:	0800dba8 	.word	0x0800dba8
 80099d0:	0800dbb4 	.word	0x0800dbb4
 80099d4:	0800dbb0 	.word	0x0800dbb0
 80099d8:	0800dbb8 	.word	0x0800dbb8
 80099dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099e2:	4553      	cmp	r3, sl
 80099e4:	bfa8      	it	ge
 80099e6:	4653      	movge	r3, sl
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	4699      	mov	r9, r3
 80099ec:	dc37      	bgt.n	8009a5e <_printf_float+0x33e>
 80099ee:	2300      	movs	r3, #0
 80099f0:	9307      	str	r3, [sp, #28]
 80099f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099f6:	f104 021a 	add.w	r2, r4, #26
 80099fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099fc:	9907      	ldr	r1, [sp, #28]
 80099fe:	9306      	str	r3, [sp, #24]
 8009a00:	eba3 0309 	sub.w	r3, r3, r9
 8009a04:	428b      	cmp	r3, r1
 8009a06:	dc31      	bgt.n	8009a6c <_printf_float+0x34c>
 8009a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0a:	459a      	cmp	sl, r3
 8009a0c:	dc3b      	bgt.n	8009a86 <_printf_float+0x366>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	07da      	lsls	r2, r3, #31
 8009a12:	d438      	bmi.n	8009a86 <_printf_float+0x366>
 8009a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a16:	ebaa 0903 	sub.w	r9, sl, r3
 8009a1a:	9b06      	ldr	r3, [sp, #24]
 8009a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a20:	4599      	cmp	r9, r3
 8009a22:	bfa8      	it	ge
 8009a24:	4699      	movge	r9, r3
 8009a26:	f1b9 0f00 	cmp.w	r9, #0
 8009a2a:	dc34      	bgt.n	8009a96 <_printf_float+0x376>
 8009a2c:	f04f 0800 	mov.w	r8, #0
 8009a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a34:	f104 0b1a 	add.w	fp, r4, #26
 8009a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a3e:	eba3 0309 	sub.w	r3, r3, r9
 8009a42:	4543      	cmp	r3, r8
 8009a44:	f77f af76 	ble.w	8009934 <_printf_float+0x214>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	465a      	mov	r2, fp
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4628      	mov	r0, r5
 8009a50:	47b8      	blx	r7
 8009a52:	3001      	adds	r0, #1
 8009a54:	f43f aeb0 	beq.w	80097b8 <_printf_float+0x98>
 8009a58:	f108 0801 	add.w	r8, r8, #1
 8009a5c:	e7ec      	b.n	8009a38 <_printf_float+0x318>
 8009a5e:	4642      	mov	r2, r8
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	d1c1      	bne.n	80099ee <_printf_float+0x2ce>
 8009a6a:	e6a5      	b.n	80097b8 <_printf_float+0x98>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	9206      	str	r2, [sp, #24]
 8009a74:	47b8      	blx	r7
 8009a76:	3001      	adds	r0, #1
 8009a78:	f43f ae9e 	beq.w	80097b8 <_printf_float+0x98>
 8009a7c:	9b07      	ldr	r3, [sp, #28]
 8009a7e:	9a06      	ldr	r2, [sp, #24]
 8009a80:	3301      	adds	r3, #1
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	e7b9      	b.n	80099fa <_printf_float+0x2da>
 8009a86:	9b05      	ldr	r3, [sp, #20]
 8009a88:	465a      	mov	r2, fp
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	d1bf      	bne.n	8009a14 <_printf_float+0x2f4>
 8009a94:	e690      	b.n	80097b8 <_printf_float+0x98>
 8009a96:	9a06      	ldr	r2, [sp, #24]
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4442      	add	r2, r8
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d1c2      	bne.n	8009a2c <_printf_float+0x30c>
 8009aa6:	e687      	b.n	80097b8 <_printf_float+0x98>
 8009aa8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009aac:	f1b9 0f01 	cmp.w	r9, #1
 8009ab0:	dc01      	bgt.n	8009ab6 <_printf_float+0x396>
 8009ab2:	07db      	lsls	r3, r3, #31
 8009ab4:	d536      	bpl.n	8009b24 <_printf_float+0x404>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4642      	mov	r2, r8
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f43f ae79 	beq.w	80097b8 <_printf_float+0x98>
 8009ac6:	9b05      	ldr	r3, [sp, #20]
 8009ac8:	465a      	mov	r2, fp
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f43f ae71 	beq.w	80097b8 <_printf_float+0x98>
 8009ad6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009ada:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ae6:	d018      	beq.n	8009b1a <_printf_float+0x3fa>
 8009ae8:	464b      	mov	r3, r9
 8009aea:	f108 0201 	add.w	r2, r8, #1
 8009aee:	4631      	mov	r1, r6
 8009af0:	4628      	mov	r0, r5
 8009af2:	47b8      	blx	r7
 8009af4:	3001      	adds	r0, #1
 8009af6:	d10c      	bne.n	8009b12 <_printf_float+0x3f2>
 8009af8:	e65e      	b.n	80097b8 <_printf_float+0x98>
 8009afa:	2301      	movs	r3, #1
 8009afc:	465a      	mov	r2, fp
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	f43f ae57 	beq.w	80097b8 <_printf_float+0x98>
 8009b0a:	f108 0801 	add.w	r8, r8, #1
 8009b0e:	45c8      	cmp	r8, r9
 8009b10:	dbf3      	blt.n	8009afa <_printf_float+0x3da>
 8009b12:	4653      	mov	r3, sl
 8009b14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b18:	e6dc      	b.n	80098d4 <_printf_float+0x1b4>
 8009b1a:	f04f 0800 	mov.w	r8, #0
 8009b1e:	f104 0b1a 	add.w	fp, r4, #26
 8009b22:	e7f4      	b.n	8009b0e <_printf_float+0x3ee>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4642      	mov	r2, r8
 8009b28:	e7e1      	b.n	8009aee <_printf_float+0x3ce>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f ae3f 	beq.w	80097b8 <_printf_float+0x98>
 8009b3a:	f108 0801 	add.w	r8, r8, #1
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	4543      	cmp	r3, r8
 8009b46:	dcf0      	bgt.n	8009b2a <_printf_float+0x40a>
 8009b48:	e6f8      	b.n	800993c <_printf_float+0x21c>
 8009b4a:	f04f 0800 	mov.w	r8, #0
 8009b4e:	f104 0919 	add.w	r9, r4, #25
 8009b52:	e7f4      	b.n	8009b3e <_printf_float+0x41e>

08009b54 <_printf_common>:
 8009b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b58:	4616      	mov	r6, r2
 8009b5a:	4698      	mov	r8, r3
 8009b5c:	688a      	ldr	r2, [r1, #8]
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	bfb8      	it	lt
 8009b68:	4613      	movlt	r3, r2
 8009b6a:	6033      	str	r3, [r6, #0]
 8009b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b70:	4607      	mov	r7, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	b10a      	cbz	r2, 8009b7a <_printf_common+0x26>
 8009b76:	3301      	adds	r3, #1
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	0699      	lsls	r1, r3, #26
 8009b7e:	bf42      	ittt	mi
 8009b80:	6833      	ldrmi	r3, [r6, #0]
 8009b82:	3302      	addmi	r3, #2
 8009b84:	6033      	strmi	r3, [r6, #0]
 8009b86:	6825      	ldr	r5, [r4, #0]
 8009b88:	f015 0506 	ands.w	r5, r5, #6
 8009b8c:	d106      	bne.n	8009b9c <_printf_common+0x48>
 8009b8e:	f104 0a19 	add.w	sl, r4, #25
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	6832      	ldr	r2, [r6, #0]
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc26      	bgt.n	8009bea <_printf_common+0x96>
 8009b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	3b00      	subs	r3, #0
 8009ba4:	bf18      	it	ne
 8009ba6:	2301      	movne	r3, #1
 8009ba8:	0692      	lsls	r2, r2, #26
 8009baa:	d42b      	bmi.n	8009c04 <_printf_common+0xb0>
 8009bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	47c8      	blx	r9
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d01e      	beq.n	8009bf8 <_printf_common+0xa4>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6922      	ldr	r2, [r4, #16]
 8009bbe:	f003 0306 	and.w	r3, r3, #6
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	bf02      	ittt	eq
 8009bc6:	68e5      	ldreq	r5, [r4, #12]
 8009bc8:	6833      	ldreq	r3, [r6, #0]
 8009bca:	1aed      	subeq	r5, r5, r3
 8009bcc:	68a3      	ldr	r3, [r4, #8]
 8009bce:	bf0c      	ite	eq
 8009bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd4:	2500      	movne	r5, #0
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	bfc4      	itt	gt
 8009bda:	1a9b      	subgt	r3, r3, r2
 8009bdc:	18ed      	addgt	r5, r5, r3
 8009bde:	2600      	movs	r6, #0
 8009be0:	341a      	adds	r4, #26
 8009be2:	42b5      	cmp	r5, r6
 8009be4:	d11a      	bne.n	8009c1c <_printf_common+0xc8>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e008      	b.n	8009bfc <_printf_common+0xa8>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4641      	mov	r1, r8
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	47c8      	blx	r9
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d103      	bne.n	8009c00 <_printf_common+0xac>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	3501      	adds	r5, #1
 8009c02:	e7c6      	b.n	8009b92 <_printf_common+0x3e>
 8009c04:	18e1      	adds	r1, r4, r3
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	2030      	movs	r0, #48	@ 0x30
 8009c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c0e:	4422      	add	r2, r4
 8009c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c18:	3302      	adds	r3, #2
 8009c1a:	e7c7      	b.n	8009bac <_printf_common+0x58>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	4641      	mov	r1, r8
 8009c22:	4638      	mov	r0, r7
 8009c24:	47c8      	blx	r9
 8009c26:	3001      	adds	r0, #1
 8009c28:	d0e6      	beq.n	8009bf8 <_printf_common+0xa4>
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7d9      	b.n	8009be2 <_printf_common+0x8e>
	...

08009c30 <_printf_i>:
 8009c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	7e0f      	ldrb	r7, [r1, #24]
 8009c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c38:	2f78      	cmp	r7, #120	@ 0x78
 8009c3a:	4691      	mov	r9, r2
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	469a      	mov	sl, r3
 8009c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c46:	d807      	bhi.n	8009c58 <_printf_i+0x28>
 8009c48:	2f62      	cmp	r7, #98	@ 0x62
 8009c4a:	d80a      	bhi.n	8009c62 <_printf_i+0x32>
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	f000 80d1 	beq.w	8009df4 <_printf_i+0x1c4>
 8009c52:	2f58      	cmp	r7, #88	@ 0x58
 8009c54:	f000 80b8 	beq.w	8009dc8 <_printf_i+0x198>
 8009c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c60:	e03a      	b.n	8009cd8 <_printf_i+0xa8>
 8009c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c66:	2b15      	cmp	r3, #21
 8009c68:	d8f6      	bhi.n	8009c58 <_printf_i+0x28>
 8009c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8009c70 <_printf_i+0x40>)
 8009c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cdd 	.word	0x08009cdd
 8009c78:	08009c59 	.word	0x08009c59
 8009c7c:	08009c59 	.word	0x08009c59
 8009c80:	08009c59 	.word	0x08009c59
 8009c84:	08009c59 	.word	0x08009c59
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009c59 	.word	0x08009c59
 8009c90:	08009c59 	.word	0x08009c59
 8009c94:	08009c59 	.word	0x08009c59
 8009c98:	08009c59 	.word	0x08009c59
 8009c9c:	08009ddb 	.word	0x08009ddb
 8009ca0:	08009d07 	.word	0x08009d07
 8009ca4:	08009d95 	.word	0x08009d95
 8009ca8:	08009c59 	.word	0x08009c59
 8009cac:	08009c59 	.word	0x08009c59
 8009cb0:	08009dfd 	.word	0x08009dfd
 8009cb4:	08009c59 	.word	0x08009c59
 8009cb8:	08009d07 	.word	0x08009d07
 8009cbc:	08009c59 	.word	0x08009c59
 8009cc0:	08009c59 	.word	0x08009c59
 8009cc4:	08009d9d 	.word	0x08009d9d
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6032      	str	r2, [r6, #0]
 8009cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e09c      	b.n	8009e16 <_printf_i+0x1e6>
 8009cdc:	6833      	ldr	r3, [r6, #0]
 8009cde:	6820      	ldr	r0, [r4, #0]
 8009ce0:	1d19      	adds	r1, r3, #4
 8009ce2:	6031      	str	r1, [r6, #0]
 8009ce4:	0606      	lsls	r6, r0, #24
 8009ce6:	d501      	bpl.n	8009cec <_printf_i+0xbc>
 8009ce8:	681d      	ldr	r5, [r3, #0]
 8009cea:	e003      	b.n	8009cf4 <_printf_i+0xc4>
 8009cec:	0645      	lsls	r5, r0, #25
 8009cee:	d5fb      	bpl.n	8009ce8 <_printf_i+0xb8>
 8009cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	da03      	bge.n	8009d00 <_printf_i+0xd0>
 8009cf8:	232d      	movs	r3, #45	@ 0x2d
 8009cfa:	426d      	negs	r5, r5
 8009cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d00:	4858      	ldr	r0, [pc, #352]	@ (8009e64 <_printf_i+0x234>)
 8009d02:	230a      	movs	r3, #10
 8009d04:	e011      	b.n	8009d2a <_printf_i+0xfa>
 8009d06:	6821      	ldr	r1, [r4, #0]
 8009d08:	6833      	ldr	r3, [r6, #0]
 8009d0a:	0608      	lsls	r0, r1, #24
 8009d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d10:	d402      	bmi.n	8009d18 <_printf_i+0xe8>
 8009d12:	0649      	lsls	r1, r1, #25
 8009d14:	bf48      	it	mi
 8009d16:	b2ad      	uxthmi	r5, r5
 8009d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d1a:	4852      	ldr	r0, [pc, #328]	@ (8009e64 <_printf_i+0x234>)
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	bf14      	ite	ne
 8009d20:	230a      	movne	r3, #10
 8009d22:	2308      	moveq	r3, #8
 8009d24:	2100      	movs	r1, #0
 8009d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d2a:	6866      	ldr	r6, [r4, #4]
 8009d2c:	60a6      	str	r6, [r4, #8]
 8009d2e:	2e00      	cmp	r6, #0
 8009d30:	db05      	blt.n	8009d3e <_printf_i+0x10e>
 8009d32:	6821      	ldr	r1, [r4, #0]
 8009d34:	432e      	orrs	r6, r5
 8009d36:	f021 0104 	bic.w	r1, r1, #4
 8009d3a:	6021      	str	r1, [r4, #0]
 8009d3c:	d04b      	beq.n	8009dd6 <_printf_i+0x1a6>
 8009d3e:	4616      	mov	r6, r2
 8009d40:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d44:	fb03 5711 	mls	r7, r3, r1, r5
 8009d48:	5dc7      	ldrb	r7, [r0, r7]
 8009d4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d4e:	462f      	mov	r7, r5
 8009d50:	42bb      	cmp	r3, r7
 8009d52:	460d      	mov	r5, r1
 8009d54:	d9f4      	bls.n	8009d40 <_printf_i+0x110>
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d10b      	bne.n	8009d72 <_printf_i+0x142>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	07df      	lsls	r7, r3, #31
 8009d5e:	d508      	bpl.n	8009d72 <_printf_i+0x142>
 8009d60:	6923      	ldr	r3, [r4, #16]
 8009d62:	6861      	ldr	r1, [r4, #4]
 8009d64:	4299      	cmp	r1, r3
 8009d66:	bfde      	ittt	le
 8009d68:	2330      	movle	r3, #48	@ 0x30
 8009d6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d72:	1b92      	subs	r2, r2, r6
 8009d74:	6122      	str	r2, [r4, #16]
 8009d76:	f8cd a000 	str.w	sl, [sp]
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	aa03      	add	r2, sp, #12
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4640      	mov	r0, r8
 8009d82:	f7ff fee7 	bl	8009b54 <_printf_common>
 8009d86:	3001      	adds	r0, #1
 8009d88:	d14a      	bne.n	8009e20 <_printf_i+0x1f0>
 8009d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8e:	b004      	add	sp, #16
 8009d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	f043 0320 	orr.w	r3, r3, #32
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	4832      	ldr	r0, [pc, #200]	@ (8009e68 <_printf_i+0x238>)
 8009d9e:	2778      	movs	r7, #120	@ 0x78
 8009da0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	6831      	ldr	r1, [r6, #0]
 8009da8:	061f      	lsls	r7, r3, #24
 8009daa:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dae:	d402      	bmi.n	8009db6 <_printf_i+0x186>
 8009db0:	065f      	lsls	r7, r3, #25
 8009db2:	bf48      	it	mi
 8009db4:	b2ad      	uxthmi	r5, r5
 8009db6:	6031      	str	r1, [r6, #0]
 8009db8:	07d9      	lsls	r1, r3, #31
 8009dba:	bf44      	itt	mi
 8009dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8009dc0:	6023      	strmi	r3, [r4, #0]
 8009dc2:	b11d      	cbz	r5, 8009dcc <_printf_i+0x19c>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	e7ad      	b.n	8009d24 <_printf_i+0xf4>
 8009dc8:	4826      	ldr	r0, [pc, #152]	@ (8009e64 <_printf_i+0x234>)
 8009dca:	e7e9      	b.n	8009da0 <_printf_i+0x170>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	f023 0320 	bic.w	r3, r3, #32
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	e7f6      	b.n	8009dc4 <_printf_i+0x194>
 8009dd6:	4616      	mov	r6, r2
 8009dd8:	e7bd      	b.n	8009d56 <_printf_i+0x126>
 8009dda:	6833      	ldr	r3, [r6, #0]
 8009ddc:	6825      	ldr	r5, [r4, #0]
 8009dde:	6961      	ldr	r1, [r4, #20]
 8009de0:	1d18      	adds	r0, r3, #4
 8009de2:	6030      	str	r0, [r6, #0]
 8009de4:	062e      	lsls	r6, r5, #24
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	d501      	bpl.n	8009dee <_printf_i+0x1be>
 8009dea:	6019      	str	r1, [r3, #0]
 8009dec:	e002      	b.n	8009df4 <_printf_i+0x1c4>
 8009dee:	0668      	lsls	r0, r5, #25
 8009df0:	d5fb      	bpl.n	8009dea <_printf_i+0x1ba>
 8009df2:	8019      	strh	r1, [r3, #0]
 8009df4:	2300      	movs	r3, #0
 8009df6:	6123      	str	r3, [r4, #16]
 8009df8:	4616      	mov	r6, r2
 8009dfa:	e7bc      	b.n	8009d76 <_printf_i+0x146>
 8009dfc:	6833      	ldr	r3, [r6, #0]
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	6032      	str	r2, [r6, #0]
 8009e02:	681e      	ldr	r6, [r3, #0]
 8009e04:	6862      	ldr	r2, [r4, #4]
 8009e06:	2100      	movs	r1, #0
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7f6 fa69 	bl	80002e0 <memchr>
 8009e0e:	b108      	cbz	r0, 8009e14 <_printf_i+0x1e4>
 8009e10:	1b80      	subs	r0, r0, r6
 8009e12:	6060      	str	r0, [r4, #4]
 8009e14:	6863      	ldr	r3, [r4, #4]
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e1e:	e7aa      	b.n	8009d76 <_printf_i+0x146>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	4632      	mov	r2, r6
 8009e24:	4649      	mov	r1, r9
 8009e26:	4640      	mov	r0, r8
 8009e28:	47d0      	blx	sl
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	d0ad      	beq.n	8009d8a <_printf_i+0x15a>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	079b      	lsls	r3, r3, #30
 8009e32:	d413      	bmi.n	8009e5c <_printf_i+0x22c>
 8009e34:	68e0      	ldr	r0, [r4, #12]
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	4298      	cmp	r0, r3
 8009e3a:	bfb8      	it	lt
 8009e3c:	4618      	movlt	r0, r3
 8009e3e:	e7a6      	b.n	8009d8e <_printf_i+0x15e>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4632      	mov	r2, r6
 8009e44:	4649      	mov	r1, r9
 8009e46:	4640      	mov	r0, r8
 8009e48:	47d0      	blx	sl
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d09d      	beq.n	8009d8a <_printf_i+0x15a>
 8009e4e:	3501      	adds	r5, #1
 8009e50:	68e3      	ldr	r3, [r4, #12]
 8009e52:	9903      	ldr	r1, [sp, #12]
 8009e54:	1a5b      	subs	r3, r3, r1
 8009e56:	42ab      	cmp	r3, r5
 8009e58:	dcf2      	bgt.n	8009e40 <_printf_i+0x210>
 8009e5a:	e7eb      	b.n	8009e34 <_printf_i+0x204>
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	f104 0619 	add.w	r6, r4, #25
 8009e62:	e7f5      	b.n	8009e50 <_printf_i+0x220>
 8009e64:	0800dbba 	.word	0x0800dbba
 8009e68:	0800dbcb 	.word	0x0800dbcb

08009e6c <_scanf_float>:
 8009e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	b087      	sub	sp, #28
 8009e72:	4691      	mov	r9, r2
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	688b      	ldr	r3, [r1, #8]
 8009e78:	1e5a      	subs	r2, r3, #1
 8009e7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e7e:	bf81      	itttt	hi
 8009e80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e84:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e8c:	608b      	strhi	r3, [r1, #8]
 8009e8e:	680b      	ldr	r3, [r1, #0]
 8009e90:	460a      	mov	r2, r1
 8009e92:	f04f 0500 	mov.w	r5, #0
 8009e96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e9a:	f842 3b1c 	str.w	r3, [r2], #28
 8009e9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	bf98      	it	ls
 8009ea8:	f04f 0b00 	movls.w	fp, #0
 8009eac:	9201      	str	r2, [sp, #4]
 8009eae:	4616      	mov	r6, r2
 8009eb0:	46aa      	mov	sl, r5
 8009eb2:	462f      	mov	r7, r5
 8009eb4:	9502      	str	r5, [sp, #8]
 8009eb6:	68a2      	ldr	r2, [r4, #8]
 8009eb8:	b15a      	cbz	r2, 8009ed2 <_scanf_float+0x66>
 8009eba:	f8d9 3000 	ldr.w	r3, [r9]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b4e      	cmp	r3, #78	@ 0x4e
 8009ec2:	d863      	bhi.n	8009f8c <_scanf_float+0x120>
 8009ec4:	2b40      	cmp	r3, #64	@ 0x40
 8009ec6:	d83b      	bhi.n	8009f40 <_scanf_float+0xd4>
 8009ec8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009ecc:	b2c8      	uxtb	r0, r1
 8009ece:	280e      	cmp	r0, #14
 8009ed0:	d939      	bls.n	8009f46 <_scanf_float+0xda>
 8009ed2:	b11f      	cbz	r7, 8009edc <_scanf_float+0x70>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ee0:	f1ba 0f01 	cmp.w	sl, #1
 8009ee4:	f200 8114 	bhi.w	800a110 <_scanf_float+0x2a4>
 8009ee8:	9b01      	ldr	r3, [sp, #4]
 8009eea:	429e      	cmp	r6, r3
 8009eec:	f200 8105 	bhi.w	800a0fa <_scanf_float+0x28e>
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	b007      	add	sp, #28
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009efc:	2a0d      	cmp	r2, #13
 8009efe:	d8e8      	bhi.n	8009ed2 <_scanf_float+0x66>
 8009f00:	a101      	add	r1, pc, #4	@ (adr r1, 8009f08 <_scanf_float+0x9c>)
 8009f02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	0800a051 	.word	0x0800a051
 8009f0c:	08009ed3 	.word	0x08009ed3
 8009f10:	08009ed3 	.word	0x08009ed3
 8009f14:	08009ed3 	.word	0x08009ed3
 8009f18:	0800a0ad 	.word	0x0800a0ad
 8009f1c:	0800a087 	.word	0x0800a087
 8009f20:	08009ed3 	.word	0x08009ed3
 8009f24:	08009ed3 	.word	0x08009ed3
 8009f28:	0800a05f 	.word	0x0800a05f
 8009f2c:	08009ed3 	.word	0x08009ed3
 8009f30:	08009ed3 	.word	0x08009ed3
 8009f34:	08009ed3 	.word	0x08009ed3
 8009f38:	08009ed3 	.word	0x08009ed3
 8009f3c:	0800a01b 	.word	0x0800a01b
 8009f40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f44:	e7da      	b.n	8009efc <_scanf_float+0x90>
 8009f46:	290e      	cmp	r1, #14
 8009f48:	d8c3      	bhi.n	8009ed2 <_scanf_float+0x66>
 8009f4a:	a001      	add	r0, pc, #4	@ (adr r0, 8009f50 <_scanf_float+0xe4>)
 8009f4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f50:	0800a00b 	.word	0x0800a00b
 8009f54:	08009ed3 	.word	0x08009ed3
 8009f58:	0800a00b 	.word	0x0800a00b
 8009f5c:	0800a09b 	.word	0x0800a09b
 8009f60:	08009ed3 	.word	0x08009ed3
 8009f64:	08009fad 	.word	0x08009fad
 8009f68:	08009ff1 	.word	0x08009ff1
 8009f6c:	08009ff1 	.word	0x08009ff1
 8009f70:	08009ff1 	.word	0x08009ff1
 8009f74:	08009ff1 	.word	0x08009ff1
 8009f78:	08009ff1 	.word	0x08009ff1
 8009f7c:	08009ff1 	.word	0x08009ff1
 8009f80:	08009ff1 	.word	0x08009ff1
 8009f84:	08009ff1 	.word	0x08009ff1
 8009f88:	08009ff1 	.word	0x08009ff1
 8009f8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f8e:	d809      	bhi.n	8009fa4 <_scanf_float+0x138>
 8009f90:	2b60      	cmp	r3, #96	@ 0x60
 8009f92:	d8b1      	bhi.n	8009ef8 <_scanf_float+0x8c>
 8009f94:	2b54      	cmp	r3, #84	@ 0x54
 8009f96:	d07b      	beq.n	800a090 <_scanf_float+0x224>
 8009f98:	2b59      	cmp	r3, #89	@ 0x59
 8009f9a:	d19a      	bne.n	8009ed2 <_scanf_float+0x66>
 8009f9c:	2d07      	cmp	r5, #7
 8009f9e:	d198      	bne.n	8009ed2 <_scanf_float+0x66>
 8009fa0:	2508      	movs	r5, #8
 8009fa2:	e02f      	b.n	800a004 <_scanf_float+0x198>
 8009fa4:	2b74      	cmp	r3, #116	@ 0x74
 8009fa6:	d073      	beq.n	800a090 <_scanf_float+0x224>
 8009fa8:	2b79      	cmp	r3, #121	@ 0x79
 8009faa:	e7f6      	b.n	8009f9a <_scanf_float+0x12e>
 8009fac:	6821      	ldr	r1, [r4, #0]
 8009fae:	05c8      	lsls	r0, r1, #23
 8009fb0:	d51e      	bpl.n	8009ff0 <_scanf_float+0x184>
 8009fb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009fb6:	6021      	str	r1, [r4, #0]
 8009fb8:	3701      	adds	r7, #1
 8009fba:	f1bb 0f00 	cmp.w	fp, #0
 8009fbe:	d003      	beq.n	8009fc8 <_scanf_float+0x15c>
 8009fc0:	3201      	adds	r2, #1
 8009fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fc6:	60a2      	str	r2, [r4, #8]
 8009fc8:	68a3      	ldr	r3, [r4, #8]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	6123      	str	r3, [r4, #16]
 8009fd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f8c9 3004 	str.w	r3, [r9, #4]
 8009fe0:	f340 8082 	ble.w	800a0e8 <_scanf_float+0x27c>
 8009fe4:	f8d9 3000 	ldr.w	r3, [r9]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	f8c9 3000 	str.w	r3, [r9]
 8009fee:	e762      	b.n	8009eb6 <_scanf_float+0x4a>
 8009ff0:	eb1a 0105 	adds.w	r1, sl, r5
 8009ff4:	f47f af6d 	bne.w	8009ed2 <_scanf_float+0x66>
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	460d      	mov	r5, r1
 800a002:	468a      	mov	sl, r1
 800a004:	f806 3b01 	strb.w	r3, [r6], #1
 800a008:	e7de      	b.n	8009fc8 <_scanf_float+0x15c>
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	0610      	lsls	r0, r2, #24
 800a00e:	f57f af60 	bpl.w	8009ed2 <_scanf_float+0x66>
 800a012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a016:	6022      	str	r2, [r4, #0]
 800a018:	e7f4      	b.n	800a004 <_scanf_float+0x198>
 800a01a:	f1ba 0f00 	cmp.w	sl, #0
 800a01e:	d10c      	bne.n	800a03a <_scanf_float+0x1ce>
 800a020:	b977      	cbnz	r7, 800a040 <_scanf_float+0x1d4>
 800a022:	6822      	ldr	r2, [r4, #0]
 800a024:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a028:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a02c:	d108      	bne.n	800a040 <_scanf_float+0x1d4>
 800a02e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a032:	6022      	str	r2, [r4, #0]
 800a034:	f04f 0a01 	mov.w	sl, #1
 800a038:	e7e4      	b.n	800a004 <_scanf_float+0x198>
 800a03a:	f1ba 0f02 	cmp.w	sl, #2
 800a03e:	d050      	beq.n	800a0e2 <_scanf_float+0x276>
 800a040:	2d01      	cmp	r5, #1
 800a042:	d002      	beq.n	800a04a <_scanf_float+0x1de>
 800a044:	2d04      	cmp	r5, #4
 800a046:	f47f af44 	bne.w	8009ed2 <_scanf_float+0x66>
 800a04a:	3501      	adds	r5, #1
 800a04c:	b2ed      	uxtb	r5, r5
 800a04e:	e7d9      	b.n	800a004 <_scanf_float+0x198>
 800a050:	f1ba 0f01 	cmp.w	sl, #1
 800a054:	f47f af3d 	bne.w	8009ed2 <_scanf_float+0x66>
 800a058:	f04f 0a02 	mov.w	sl, #2
 800a05c:	e7d2      	b.n	800a004 <_scanf_float+0x198>
 800a05e:	b975      	cbnz	r5, 800a07e <_scanf_float+0x212>
 800a060:	2f00      	cmp	r7, #0
 800a062:	f47f af37 	bne.w	8009ed4 <_scanf_float+0x68>
 800a066:	6822      	ldr	r2, [r4, #0]
 800a068:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a06c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a070:	f040 80fc 	bne.w	800a26c <_scanf_float+0x400>
 800a074:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a078:	6022      	str	r2, [r4, #0]
 800a07a:	2501      	movs	r5, #1
 800a07c:	e7c2      	b.n	800a004 <_scanf_float+0x198>
 800a07e:	2d03      	cmp	r5, #3
 800a080:	d0e3      	beq.n	800a04a <_scanf_float+0x1de>
 800a082:	2d05      	cmp	r5, #5
 800a084:	e7df      	b.n	800a046 <_scanf_float+0x1da>
 800a086:	2d02      	cmp	r5, #2
 800a088:	f47f af23 	bne.w	8009ed2 <_scanf_float+0x66>
 800a08c:	2503      	movs	r5, #3
 800a08e:	e7b9      	b.n	800a004 <_scanf_float+0x198>
 800a090:	2d06      	cmp	r5, #6
 800a092:	f47f af1e 	bne.w	8009ed2 <_scanf_float+0x66>
 800a096:	2507      	movs	r5, #7
 800a098:	e7b4      	b.n	800a004 <_scanf_float+0x198>
 800a09a:	6822      	ldr	r2, [r4, #0]
 800a09c:	0591      	lsls	r1, r2, #22
 800a09e:	f57f af18 	bpl.w	8009ed2 <_scanf_float+0x66>
 800a0a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0a6:	6022      	str	r2, [r4, #0]
 800a0a8:	9702      	str	r7, [sp, #8]
 800a0aa:	e7ab      	b.n	800a004 <_scanf_float+0x198>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a0b2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a0b6:	d005      	beq.n	800a0c4 <_scanf_float+0x258>
 800a0b8:	0550      	lsls	r0, r2, #21
 800a0ba:	f57f af0a 	bpl.w	8009ed2 <_scanf_float+0x66>
 800a0be:	2f00      	cmp	r7, #0
 800a0c0:	f000 80d4 	beq.w	800a26c <_scanf_float+0x400>
 800a0c4:	0591      	lsls	r1, r2, #22
 800a0c6:	bf58      	it	pl
 800a0c8:	9902      	ldrpl	r1, [sp, #8]
 800a0ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0ce:	bf58      	it	pl
 800a0d0:	1a79      	subpl	r1, r7, r1
 800a0d2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a0d6:	bf58      	it	pl
 800a0d8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0dc:	6022      	str	r2, [r4, #0]
 800a0de:	2700      	movs	r7, #0
 800a0e0:	e790      	b.n	800a004 <_scanf_float+0x198>
 800a0e2:	f04f 0a03 	mov.w	sl, #3
 800a0e6:	e78d      	b.n	800a004 <_scanf_float+0x198>
 800a0e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	4798      	blx	r3
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	f43f aedf 	beq.w	8009eb6 <_scanf_float+0x4a>
 800a0f8:	e6eb      	b.n	8009ed2 <_scanf_float+0x66>
 800a0fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a102:	464a      	mov	r2, r9
 800a104:	4640      	mov	r0, r8
 800a106:	4798      	blx	r3
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	6123      	str	r3, [r4, #16]
 800a10e:	e6eb      	b.n	8009ee8 <_scanf_float+0x7c>
 800a110:	1e6b      	subs	r3, r5, #1
 800a112:	2b06      	cmp	r3, #6
 800a114:	d824      	bhi.n	800a160 <_scanf_float+0x2f4>
 800a116:	2d02      	cmp	r5, #2
 800a118:	d836      	bhi.n	800a188 <_scanf_float+0x31c>
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	429e      	cmp	r6, r3
 800a11e:	f67f aee7 	bls.w	8009ef0 <_scanf_float+0x84>
 800a122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a12a:	464a      	mov	r2, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	4798      	blx	r3
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	3b01      	subs	r3, #1
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	e7f0      	b.n	800a11a <_scanf_float+0x2ae>
 800a138:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a13c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a140:	464a      	mov	r2, r9
 800a142:	4640      	mov	r0, r8
 800a144:	4798      	blx	r3
 800a146:	6923      	ldr	r3, [r4, #16]
 800a148:	3b01      	subs	r3, #1
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a150:	fa5f fa8a 	uxtb.w	sl, sl
 800a154:	f1ba 0f02 	cmp.w	sl, #2
 800a158:	d1ee      	bne.n	800a138 <_scanf_float+0x2cc>
 800a15a:	3d03      	subs	r5, #3
 800a15c:	b2ed      	uxtb	r5, r5
 800a15e:	1b76      	subs	r6, r6, r5
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	05da      	lsls	r2, r3, #23
 800a164:	d530      	bpl.n	800a1c8 <_scanf_float+0x35c>
 800a166:	055b      	lsls	r3, r3, #21
 800a168:	d511      	bpl.n	800a18e <_scanf_float+0x322>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	429e      	cmp	r6, r3
 800a16e:	f67f aebf 	bls.w	8009ef0 <_scanf_float+0x84>
 800a172:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a17a:	464a      	mov	r2, r9
 800a17c:	4640      	mov	r0, r8
 800a17e:	4798      	blx	r3
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	3b01      	subs	r3, #1
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	e7f0      	b.n	800a16a <_scanf_float+0x2fe>
 800a188:	46aa      	mov	sl, r5
 800a18a:	46b3      	mov	fp, r6
 800a18c:	e7de      	b.n	800a14c <_scanf_float+0x2e0>
 800a18e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	2965      	cmp	r1, #101	@ 0x65
 800a196:	f103 33ff 	add.w	r3, r3, #4294967295
 800a19a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	d00c      	beq.n	800a1bc <_scanf_float+0x350>
 800a1a2:	2945      	cmp	r1, #69	@ 0x45
 800a1a4:	d00a      	beq.n	800a1bc <_scanf_float+0x350>
 800a1a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1aa:	464a      	mov	r2, r9
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4798      	blx	r3
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	1eb5      	subs	r5, r6, #2
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1c0:	464a      	mov	r2, r9
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4798      	blx	r3
 800a1c6:	462e      	mov	r6, r5
 800a1c8:	6822      	ldr	r2, [r4, #0]
 800a1ca:	f012 0210 	ands.w	r2, r2, #16
 800a1ce:	d001      	beq.n	800a1d4 <_scanf_float+0x368>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e68e      	b.n	8009ef2 <_scanf_float+0x86>
 800a1d4:	7032      	strb	r2, [r6, #0]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a1dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1e0:	d123      	bne.n	800a22a <_scanf_float+0x3be>
 800a1e2:	9b02      	ldr	r3, [sp, #8]
 800a1e4:	429f      	cmp	r7, r3
 800a1e6:	d00a      	beq.n	800a1fe <_scanf_float+0x392>
 800a1e8:	1bda      	subs	r2, r3, r7
 800a1ea:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a1ee:	429e      	cmp	r6, r3
 800a1f0:	bf28      	it	cs
 800a1f2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a1f6:	491e      	ldr	r1, [pc, #120]	@ (800a270 <_scanf_float+0x404>)
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f8ff 	bl	800a3fc <siprintf>
 800a1fe:	9901      	ldr	r1, [sp, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	4640      	mov	r0, r8
 800a204:	f002 fb2a 	bl	800c85c <_strtod_r>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	6821      	ldr	r1, [r4, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f011 0f02 	tst.w	r1, #2
 800a212:	f103 0204 	add.w	r2, r3, #4
 800a216:	d015      	beq.n	800a244 <_scanf_float+0x3d8>
 800a218:	9903      	ldr	r1, [sp, #12]
 800a21a:	600a      	str	r2, [r1, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	ed83 0b00 	vstr	d0, [r3]
 800a222:	68e3      	ldr	r3, [r4, #12]
 800a224:	3301      	adds	r3, #1
 800a226:	60e3      	str	r3, [r4, #12]
 800a228:	e7d2      	b.n	800a1d0 <_scanf_float+0x364>
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0e6      	beq.n	800a1fe <_scanf_float+0x392>
 800a230:	9905      	ldr	r1, [sp, #20]
 800a232:	230a      	movs	r3, #10
 800a234:	3101      	adds	r1, #1
 800a236:	4640      	mov	r0, r8
 800a238:	f002 fb90 	bl	800c95c <_strtol_r>
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	9e05      	ldr	r6, [sp, #20]
 800a240:	1ac2      	subs	r2, r0, r3
 800a242:	e7d2      	b.n	800a1ea <_scanf_float+0x37e>
 800a244:	f011 0f04 	tst.w	r1, #4
 800a248:	9903      	ldr	r1, [sp, #12]
 800a24a:	600a      	str	r2, [r1, #0]
 800a24c:	d1e6      	bne.n	800a21c <_scanf_float+0x3b0>
 800a24e:	eeb4 0b40 	vcmp.f64	d0, d0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	681d      	ldr	r5, [r3, #0]
 800a258:	d705      	bvc.n	800a266 <_scanf_float+0x3fa>
 800a25a:	4806      	ldr	r0, [pc, #24]	@ (800a274 <_scanf_float+0x408>)
 800a25c:	f000 f9b4 	bl	800a5c8 <nanf>
 800a260:	ed85 0a00 	vstr	s0, [r5]
 800a264:	e7dd      	b.n	800a222 <_scanf_float+0x3b6>
 800a266:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a26a:	e7f9      	b.n	800a260 <_scanf_float+0x3f4>
 800a26c:	2700      	movs	r7, #0
 800a26e:	e635      	b.n	8009edc <_scanf_float+0x70>
 800a270:	0800dbdc 	.word	0x0800dbdc
 800a274:	0800dd1d 	.word	0x0800dd1d

0800a278 <std>:
 800a278:	2300      	movs	r3, #0
 800a27a:	b510      	push	{r4, lr}
 800a27c:	4604      	mov	r4, r0
 800a27e:	e9c0 3300 	strd	r3, r3, [r0]
 800a282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a286:	6083      	str	r3, [r0, #8]
 800a288:	8181      	strh	r1, [r0, #12]
 800a28a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a28c:	81c2      	strh	r2, [r0, #14]
 800a28e:	6183      	str	r3, [r0, #24]
 800a290:	4619      	mov	r1, r3
 800a292:	2208      	movs	r2, #8
 800a294:	305c      	adds	r0, #92	@ 0x5c
 800a296:	f000 f916 	bl	800a4c6 <memset>
 800a29a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <std+0x58>)
 800a29c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a29e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <std+0x5c>)
 800a2a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <std+0x60>)
 800a2a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <std+0x64>)
 800a2a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <std+0x68>)
 800a2ac:	6224      	str	r4, [r4, #32]
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d006      	beq.n	800a2c0 <std+0x48>
 800a2b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2b6:	4294      	cmp	r4, r2
 800a2b8:	d002      	beq.n	800a2c0 <std+0x48>
 800a2ba:	33d0      	adds	r3, #208	@ 0xd0
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d105      	bne.n	800a2cc <std+0x54>
 800a2c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c8:	f000 b97a 	b.w	800a5c0 <__retarget_lock_init_recursive>
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a441 	.word	0x0800a441
 800a2d4:	0800a463 	.word	0x0800a463
 800a2d8:	0800a49b 	.word	0x0800a49b
 800a2dc:	0800a4bf 	.word	0x0800a4bf
 800a2e0:	24000488 	.word	0x24000488

0800a2e4 <stdio_exit_handler>:
 800a2e4:	4a02      	ldr	r2, [pc, #8]	@ (800a2f0 <stdio_exit_handler+0xc>)
 800a2e6:	4903      	ldr	r1, [pc, #12]	@ (800a2f4 <stdio_exit_handler+0x10>)
 800a2e8:	4803      	ldr	r0, [pc, #12]	@ (800a2f8 <stdio_exit_handler+0x14>)
 800a2ea:	f000 b869 	b.w	800a3c0 <_fwalk_sglue>
 800a2ee:	bf00      	nop
 800a2f0:	24000010 	.word	0x24000010
 800a2f4:	0800cd19 	.word	0x0800cd19
 800a2f8:	24000020 	.word	0x24000020

0800a2fc <cleanup_stdio>:
 800a2fc:	6841      	ldr	r1, [r0, #4]
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a330 <cleanup_stdio+0x34>)
 800a300:	4299      	cmp	r1, r3
 800a302:	b510      	push	{r4, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	d001      	beq.n	800a30c <cleanup_stdio+0x10>
 800a308:	f002 fd06 	bl	800cd18 <_fflush_r>
 800a30c:	68a1      	ldr	r1, [r4, #8]
 800a30e:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <cleanup_stdio+0x38>)
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <cleanup_stdio+0x1e>
 800a314:	4620      	mov	r0, r4
 800a316:	f002 fcff 	bl	800cd18 <_fflush_r>
 800a31a:	68e1      	ldr	r1, [r4, #12]
 800a31c:	4b06      	ldr	r3, [pc, #24]	@ (800a338 <cleanup_stdio+0x3c>)
 800a31e:	4299      	cmp	r1, r3
 800a320:	d004      	beq.n	800a32c <cleanup_stdio+0x30>
 800a322:	4620      	mov	r0, r4
 800a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a328:	f002 bcf6 	b.w	800cd18 <_fflush_r>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	bf00      	nop
 800a330:	24000488 	.word	0x24000488
 800a334:	240004f0 	.word	0x240004f0
 800a338:	24000558 	.word	0x24000558

0800a33c <global_stdio_init.part.0>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <global_stdio_init.part.0+0x30>)
 800a340:	4c0b      	ldr	r4, [pc, #44]	@ (800a370 <global_stdio_init.part.0+0x34>)
 800a342:	4a0c      	ldr	r2, [pc, #48]	@ (800a374 <global_stdio_init.part.0+0x38>)
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	4620      	mov	r0, r4
 800a348:	2200      	movs	r2, #0
 800a34a:	2104      	movs	r1, #4
 800a34c:	f7ff ff94 	bl	800a278 <std>
 800a350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a354:	2201      	movs	r2, #1
 800a356:	2109      	movs	r1, #9
 800a358:	f7ff ff8e 	bl	800a278 <std>
 800a35c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a360:	2202      	movs	r2, #2
 800a362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a366:	2112      	movs	r1, #18
 800a368:	f7ff bf86 	b.w	800a278 <std>
 800a36c:	240005c0 	.word	0x240005c0
 800a370:	24000488 	.word	0x24000488
 800a374:	0800a2e5 	.word	0x0800a2e5

0800a378 <__sfp_lock_acquire>:
 800a378:	4801      	ldr	r0, [pc, #4]	@ (800a380 <__sfp_lock_acquire+0x8>)
 800a37a:	f000 b922 	b.w	800a5c2 <__retarget_lock_acquire_recursive>
 800a37e:	bf00      	nop
 800a380:	240005c9 	.word	0x240005c9

0800a384 <__sfp_lock_release>:
 800a384:	4801      	ldr	r0, [pc, #4]	@ (800a38c <__sfp_lock_release+0x8>)
 800a386:	f000 b91d 	b.w	800a5c4 <__retarget_lock_release_recursive>
 800a38a:	bf00      	nop
 800a38c:	240005c9 	.word	0x240005c9

0800a390 <__sinit>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
 800a394:	f7ff fff0 	bl	800a378 <__sfp_lock_acquire>
 800a398:	6a23      	ldr	r3, [r4, #32]
 800a39a:	b11b      	cbz	r3, 800a3a4 <__sinit+0x14>
 800a39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a0:	f7ff bff0 	b.w	800a384 <__sfp_lock_release>
 800a3a4:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <__sinit+0x28>)
 800a3a6:	6223      	str	r3, [r4, #32]
 800a3a8:	4b04      	ldr	r3, [pc, #16]	@ (800a3bc <__sinit+0x2c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f5      	bne.n	800a39c <__sinit+0xc>
 800a3b0:	f7ff ffc4 	bl	800a33c <global_stdio_init.part.0>
 800a3b4:	e7f2      	b.n	800a39c <__sinit+0xc>
 800a3b6:	bf00      	nop
 800a3b8:	0800a2fd 	.word	0x0800a2fd
 800a3bc:	240005c0 	.word	0x240005c0

0800a3c0 <_fwalk_sglue>:
 800a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	4688      	mov	r8, r1
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	2600      	movs	r6, #0
 800a3cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3d0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d4:	d505      	bpl.n	800a3e2 <_fwalk_sglue+0x22>
 800a3d6:	6824      	ldr	r4, [r4, #0]
 800a3d8:	2c00      	cmp	r4, #0
 800a3da:	d1f7      	bne.n	800a3cc <_fwalk_sglue+0xc>
 800a3dc:	4630      	mov	r0, r6
 800a3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d907      	bls.n	800a3f8 <_fwalk_sglue+0x38>
 800a3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	d003      	beq.n	800a3f8 <_fwalk_sglue+0x38>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	47c0      	blx	r8
 800a3f6:	4306      	orrs	r6, r0
 800a3f8:	3568      	adds	r5, #104	@ 0x68
 800a3fa:	e7e9      	b.n	800a3d0 <_fwalk_sglue+0x10>

0800a3fc <siprintf>:
 800a3fc:	b40e      	push	{r1, r2, r3}
 800a3fe:	b510      	push	{r4, lr}
 800a400:	b09d      	sub	sp, #116	@ 0x74
 800a402:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	9006      	str	r0, [sp, #24]
 800a408:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a40c:	480a      	ldr	r0, [pc, #40]	@ (800a438 <siprintf+0x3c>)
 800a40e:	9107      	str	r1, [sp, #28]
 800a410:	9104      	str	r1, [sp, #16]
 800a412:	490a      	ldr	r1, [pc, #40]	@ (800a43c <siprintf+0x40>)
 800a414:	f853 2b04 	ldr.w	r2, [r3], #4
 800a418:	9105      	str	r1, [sp, #20]
 800a41a:	2400      	movs	r4, #0
 800a41c:	a902      	add	r1, sp, #8
 800a41e:	6800      	ldr	r0, [r0, #0]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a424:	f002 faf8 	bl	800ca18 <_svfiprintf_r>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	701c      	strb	r4, [r3, #0]
 800a42c:	b01d      	add	sp, #116	@ 0x74
 800a42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a432:	b003      	add	sp, #12
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	2400001c 	.word	0x2400001c
 800a43c:	ffff0208 	.word	0xffff0208

0800a440 <__sread>:
 800a440:	b510      	push	{r4, lr}
 800a442:	460c      	mov	r4, r1
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	f000 f86c 	bl	800a524 <_read_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	bfab      	itete	ge
 800a450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a452:	89a3      	ldrhlt	r3, [r4, #12]
 800a454:	181b      	addge	r3, r3, r0
 800a456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a45a:	bfac      	ite	ge
 800a45c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a45e:	81a3      	strhlt	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__swrite>:
 800a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	461f      	mov	r7, r3
 800a468:	898b      	ldrh	r3, [r1, #12]
 800a46a:	05db      	lsls	r3, r3, #23
 800a46c:	4605      	mov	r5, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	4616      	mov	r6, r2
 800a472:	d505      	bpl.n	800a480 <__swrite+0x1e>
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	2302      	movs	r3, #2
 800a47a:	2200      	movs	r2, #0
 800a47c:	f000 f840 	bl	800a500 <_lseek_r>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	4628      	mov	r0, r5
 800a492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	f000 b857 	b.w	800a548 <_write_r>

0800a49a <__sseek>:
 800a49a:	b510      	push	{r4, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 f82d 	bl	800a500 <_lseek_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	bf15      	itete	ne
 800a4ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4b6:	81a3      	strheq	r3, [r4, #12]
 800a4b8:	bf18      	it	ne
 800a4ba:	81a3      	strhne	r3, [r4, #12]
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <__sclose>:
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	f000 b80d 	b.w	800a4e0 <_close_r>

0800a4c6 <memset>:
 800a4c6:	4402      	add	r2, r0
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d100      	bne.n	800a4d0 <memset+0xa>
 800a4ce:	4770      	bx	lr
 800a4d0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4d4:	e7f9      	b.n	800a4ca <memset+0x4>
	...

0800a4d8 <_localeconv_r>:
 800a4d8:	4800      	ldr	r0, [pc, #0]	@ (800a4dc <_localeconv_r+0x4>)
 800a4da:	4770      	bx	lr
 800a4dc:	2400015c 	.word	0x2400015c

0800a4e0 <_close_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4d06      	ldr	r5, [pc, #24]	@ (800a4fc <_close_r+0x1c>)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	602b      	str	r3, [r5, #0]
 800a4ec:	f7f6 ff6c 	bl	80013c8 <_close>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_close_r+0x1a>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_close_r+0x1a>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	240005c4 	.word	0x240005c4

0800a500 <_lseek_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d07      	ldr	r5, [pc, #28]	@ (800a520 <_lseek_r+0x20>)
 800a504:	4604      	mov	r4, r0
 800a506:	4608      	mov	r0, r1
 800a508:	4611      	mov	r1, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	602a      	str	r2, [r5, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	f7f6 ff81 	bl	8001416 <_lseek>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_lseek_r+0x1e>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_lseek_r+0x1e>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	240005c4 	.word	0x240005c4

0800a524 <_read_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	@ (800a544 <_read_r+0x20>)
 800a528:	4604      	mov	r4, r0
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	f7f6 ff0f 	bl	8001356 <_read>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_read_r+0x1e>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_read_r+0x1e>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	240005c4 	.word	0x240005c4

0800a548 <_write_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	@ (800a568 <_write_r+0x20>)
 800a54c:	4604      	mov	r4, r0
 800a54e:	4608      	mov	r0, r1
 800a550:	4611      	mov	r1, r2
 800a552:	2200      	movs	r2, #0
 800a554:	602a      	str	r2, [r5, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	f7f6 ff1a 	bl	8001390 <_write>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d102      	bne.n	800a566 <_write_r+0x1e>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	b103      	cbz	r3, 800a566 <_write_r+0x1e>
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	240005c4 	.word	0x240005c4

0800a56c <__errno>:
 800a56c:	4b01      	ldr	r3, [pc, #4]	@ (800a574 <__errno+0x8>)
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	2400001c 	.word	0x2400001c

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4d0d      	ldr	r5, [pc, #52]	@ (800a5b0 <__libc_init_array+0x38>)
 800a57c:	4c0d      	ldr	r4, [pc, #52]	@ (800a5b4 <__libc_init_array+0x3c>)
 800a57e:	1b64      	subs	r4, r4, r5
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	2600      	movs	r6, #0
 800a584:	42a6      	cmp	r6, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	4d0b      	ldr	r5, [pc, #44]	@ (800a5b8 <__libc_init_array+0x40>)
 800a58a:	4c0c      	ldr	r4, [pc, #48]	@ (800a5bc <__libc_init_array+0x44>)
 800a58c:	f003 fab6 	bl	800dafc <_init>
 800a590:	1b64      	subs	r4, r4, r5
 800a592:	10a4      	asrs	r4, r4, #2
 800a594:	2600      	movs	r6, #0
 800a596:	42a6      	cmp	r6, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a0:	4798      	blx	r3
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5aa:	4798      	blx	r3
 800a5ac:	3601      	adds	r6, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800dfdc 	.word	0x0800dfdc
 800a5b4:	0800dfdc 	.word	0x0800dfdc
 800a5b8:	0800dfdc 	.word	0x0800dfdc
 800a5bc:	0800dfe0 	.word	0x0800dfe0

0800a5c0 <__retarget_lock_init_recursive>:
 800a5c0:	4770      	bx	lr

0800a5c2 <__retarget_lock_acquire_recursive>:
 800a5c2:	4770      	bx	lr

0800a5c4 <__retarget_lock_release_recursive>:
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <nanf>:
 800a5c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a5d0 <nanf+0x8>
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	7fc00000 	.word	0x7fc00000

0800a5d4 <quorem>:
 800a5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	6903      	ldr	r3, [r0, #16]
 800a5da:	690c      	ldr	r4, [r1, #16]
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	4607      	mov	r7, r0
 800a5e0:	db7e      	blt.n	800a6e0 <quorem+0x10c>
 800a5e2:	3c01      	subs	r4, #1
 800a5e4:	f101 0814 	add.w	r8, r1, #20
 800a5e8:	00a3      	lsls	r3, r4, #2
 800a5ea:	f100 0514 	add.w	r5, r0, #20
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5fe:	3301      	adds	r3, #1
 800a600:	429a      	cmp	r2, r3
 800a602:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a606:	fbb2 f6f3 	udiv	r6, r2, r3
 800a60a:	d32e      	bcc.n	800a66a <quorem+0x96>
 800a60c:	f04f 0a00 	mov.w	sl, #0
 800a610:	46c4      	mov	ip, r8
 800a612:	46ae      	mov	lr, r5
 800a614:	46d3      	mov	fp, sl
 800a616:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a61a:	b298      	uxth	r0, r3
 800a61c:	fb06 a000 	mla	r0, r6, r0, sl
 800a620:	0c02      	lsrs	r2, r0, #16
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	fb06 2303 	mla	r3, r6, r3, r2
 800a628:	f8de 2000 	ldr.w	r2, [lr]
 800a62c:	b280      	uxth	r0, r0
 800a62e:	b292      	uxth	r2, r2
 800a630:	1a12      	subs	r2, r2, r0
 800a632:	445a      	add	r2, fp
 800a634:	f8de 0000 	ldr.w	r0, [lr]
 800a638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a642:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a646:	b292      	uxth	r2, r2
 800a648:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a64c:	45e1      	cmp	r9, ip
 800a64e:	f84e 2b04 	str.w	r2, [lr], #4
 800a652:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a656:	d2de      	bcs.n	800a616 <quorem+0x42>
 800a658:	9b00      	ldr	r3, [sp, #0]
 800a65a:	58eb      	ldr	r3, [r5, r3]
 800a65c:	b92b      	cbnz	r3, 800a66a <quorem+0x96>
 800a65e:	9b01      	ldr	r3, [sp, #4]
 800a660:	3b04      	subs	r3, #4
 800a662:	429d      	cmp	r5, r3
 800a664:	461a      	mov	r2, r3
 800a666:	d32f      	bcc.n	800a6c8 <quorem+0xf4>
 800a668:	613c      	str	r4, [r7, #16]
 800a66a:	4638      	mov	r0, r7
 800a66c:	f001 f956 	bl	800b91c <__mcmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	db25      	blt.n	800a6c0 <quorem+0xec>
 800a674:	4629      	mov	r1, r5
 800a676:	2000      	movs	r0, #0
 800a678:	f858 2b04 	ldr.w	r2, [r8], #4
 800a67c:	f8d1 c000 	ldr.w	ip, [r1]
 800a680:	fa1f fe82 	uxth.w	lr, r2
 800a684:	fa1f f38c 	uxth.w	r3, ip
 800a688:	eba3 030e 	sub.w	r3, r3, lr
 800a68c:	4403      	add	r3, r0
 800a68e:	0c12      	lsrs	r2, r2, #16
 800a690:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a694:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a698:	b29b      	uxth	r3, r3
 800a69a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a69e:	45c1      	cmp	r9, r8
 800a6a0:	f841 3b04 	str.w	r3, [r1], #4
 800a6a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6a8:	d2e6      	bcs.n	800a678 <quorem+0xa4>
 800a6aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6b2:	b922      	cbnz	r2, 800a6be <quorem+0xea>
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	429d      	cmp	r5, r3
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	d30b      	bcc.n	800a6d4 <quorem+0x100>
 800a6bc:	613c      	str	r4, [r7, #16]
 800a6be:	3601      	adds	r6, #1
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	b003      	add	sp, #12
 800a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	d1cb      	bne.n	800a668 <quorem+0x94>
 800a6d0:	3c01      	subs	r4, #1
 800a6d2:	e7c6      	b.n	800a662 <quorem+0x8e>
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	3b04      	subs	r3, #4
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	d1ef      	bne.n	800a6bc <quorem+0xe8>
 800a6dc:	3c01      	subs	r4, #1
 800a6de:	e7ea      	b.n	800a6b6 <quorem+0xe2>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e7ee      	b.n	800a6c2 <quorem+0xee>
 800a6e4:	0000      	movs	r0, r0
	...

0800a6e8 <_dtoa_r>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	ed2d 8b02 	vpush	{d8}
 800a6f0:	69c7      	ldr	r7, [r0, #28]
 800a6f2:	b091      	sub	sp, #68	@ 0x44
 800a6f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6f8:	ec55 4b10 	vmov	r4, r5, d0
 800a6fc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a6fe:	9107      	str	r1, [sp, #28]
 800a700:	4681      	mov	r9, r0
 800a702:	9209      	str	r2, [sp, #36]	@ 0x24
 800a704:	930d      	str	r3, [sp, #52]	@ 0x34
 800a706:	b97f      	cbnz	r7, 800a728 <_dtoa_r+0x40>
 800a708:	2010      	movs	r0, #16
 800a70a:	f000 fd95 	bl	800b238 <malloc>
 800a70e:	4602      	mov	r2, r0
 800a710:	f8c9 001c 	str.w	r0, [r9, #28]
 800a714:	b920      	cbnz	r0, 800a720 <_dtoa_r+0x38>
 800a716:	4ba0      	ldr	r3, [pc, #640]	@ (800a998 <_dtoa_r+0x2b0>)
 800a718:	21ef      	movs	r1, #239	@ 0xef
 800a71a:	48a0      	ldr	r0, [pc, #640]	@ (800a99c <_dtoa_r+0x2b4>)
 800a71c:	f002 fb78 	bl	800ce10 <__assert_func>
 800a720:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a724:	6007      	str	r7, [r0, #0]
 800a726:	60c7      	str	r7, [r0, #12]
 800a728:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a72c:	6819      	ldr	r1, [r3, #0]
 800a72e:	b159      	cbz	r1, 800a748 <_dtoa_r+0x60>
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	604a      	str	r2, [r1, #4]
 800a734:	2301      	movs	r3, #1
 800a736:	4093      	lsls	r3, r2
 800a738:	608b      	str	r3, [r1, #8]
 800a73a:	4648      	mov	r0, r9
 800a73c:	f000 fe72 	bl	800b424 <_Bfree>
 800a740:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	1e2b      	subs	r3, r5, #0
 800a74a:	bfbb      	ittet	lt
 800a74c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a750:	9303      	strlt	r3, [sp, #12]
 800a752:	2300      	movge	r3, #0
 800a754:	2201      	movlt	r2, #1
 800a756:	bfac      	ite	ge
 800a758:	6033      	strge	r3, [r6, #0]
 800a75a:	6032      	strlt	r2, [r6, #0]
 800a75c:	4b90      	ldr	r3, [pc, #576]	@ (800a9a0 <_dtoa_r+0x2b8>)
 800a75e:	9e03      	ldr	r6, [sp, #12]
 800a760:	43b3      	bics	r3, r6
 800a762:	d110      	bne.n	800a786 <_dtoa_r+0x9e>
 800a764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a766:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a770:	4323      	orrs	r3, r4
 800a772:	f000 84e6 	beq.w	800b142 <_dtoa_r+0xa5a>
 800a776:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a778:	4f8a      	ldr	r7, [pc, #552]	@ (800a9a4 <_dtoa_r+0x2bc>)
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 84e8 	beq.w	800b150 <_dtoa_r+0xa68>
 800a780:	1cfb      	adds	r3, r7, #3
 800a782:	f000 bce3 	b.w	800b14c <_dtoa_r+0xa64>
 800a786:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a78a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a792:	d10a      	bne.n	800a7aa <_dtoa_r+0xc2>
 800a794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a796:	2301      	movs	r3, #1
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a79c:	b113      	cbz	r3, 800a7a4 <_dtoa_r+0xbc>
 800a79e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a7a0:	4b81      	ldr	r3, [pc, #516]	@ (800a9a8 <_dtoa_r+0x2c0>)
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	4f81      	ldr	r7, [pc, #516]	@ (800a9ac <_dtoa_r+0x2c4>)
 800a7a6:	f000 bcd3 	b.w	800b150 <_dtoa_r+0xa68>
 800a7aa:	aa0e      	add	r2, sp, #56	@ 0x38
 800a7ac:	a90f      	add	r1, sp, #60	@ 0x3c
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	eeb0 0b48 	vmov.f64	d0, d8
 800a7b4:	f001 f9d2 	bl	800bb5c <__d2b>
 800a7b8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7be:	9001      	str	r0, [sp, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d045      	beq.n	800a850 <_dtoa_r+0x168>
 800a7c4:	eeb0 7b48 	vmov.f64	d7, d8
 800a7c8:	ee18 1a90 	vmov	r1, s17
 800a7cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a7d0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a7d4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a7d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a7dc:	2500      	movs	r5, #0
 800a7de:	ee07 1a90 	vmov	s15, r1
 800a7e2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a7e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a980 <_dtoa_r+0x298>
 800a7ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7ee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a988 <_dtoa_r+0x2a0>
 800a7f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a7f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a990 <_dtoa_r+0x2a8>
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a802:	eeb0 7b46 	vmov.f64	d7, d6
 800a806:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a80a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a80e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	ee16 8a90 	vmov	r8, s13
 800a81a:	d508      	bpl.n	800a82e <_dtoa_r+0x146>
 800a81c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a820:	eeb4 6b47 	vcmp.f64	d6, d7
 800a824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a828:	bf18      	it	ne
 800a82a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a82e:	f1b8 0f16 	cmp.w	r8, #22
 800a832:	d82b      	bhi.n	800a88c <_dtoa_r+0x1a4>
 800a834:	495e      	ldr	r1, [pc, #376]	@ (800a9b0 <_dtoa_r+0x2c8>)
 800a836:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a83a:	ed91 7b00 	vldr	d7, [r1]
 800a83e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a846:	d501      	bpl.n	800a84c <_dtoa_r+0x164>
 800a848:	f108 38ff 	add.w	r8, r8, #4294967295
 800a84c:	2100      	movs	r1, #0
 800a84e:	e01e      	b.n	800a88e <_dtoa_r+0x1a6>
 800a850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a852:	4413      	add	r3, r2
 800a854:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a858:	2920      	cmp	r1, #32
 800a85a:	bfc1      	itttt	gt
 800a85c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a860:	408e      	lslgt	r6, r1
 800a862:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a866:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a86a:	bfd6      	itet	le
 800a86c:	f1c1 0120 	rsble	r1, r1, #32
 800a870:	4331      	orrgt	r1, r6
 800a872:	fa04 f101 	lslle.w	r1, r4, r1
 800a876:	ee07 1a90 	vmov	s15, r1
 800a87a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a87e:	3b01      	subs	r3, #1
 800a880:	ee17 1a90 	vmov	r1, s15
 800a884:	2501      	movs	r5, #1
 800a886:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a88a:	e7a8      	b.n	800a7de <_dtoa_r+0xf6>
 800a88c:	2101      	movs	r1, #1
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	1e53      	subs	r3, r2, #1
 800a892:	9306      	str	r3, [sp, #24]
 800a894:	bf45      	ittet	mi
 800a896:	f1c2 0301 	rsbmi	r3, r2, #1
 800a89a:	9304      	strmi	r3, [sp, #16]
 800a89c:	2300      	movpl	r3, #0
 800a89e:	2300      	movmi	r3, #0
 800a8a0:	bf4c      	ite	mi
 800a8a2:	9306      	strmi	r3, [sp, #24]
 800a8a4:	9304      	strpl	r3, [sp, #16]
 800a8a6:	f1b8 0f00 	cmp.w	r8, #0
 800a8aa:	910c      	str	r1, [sp, #48]	@ 0x30
 800a8ac:	db18      	blt.n	800a8e0 <_dtoa_r+0x1f8>
 800a8ae:	9b06      	ldr	r3, [sp, #24]
 800a8b0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a8b4:	4443      	add	r3, r8
 800a8b6:	9306      	str	r3, [sp, #24]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9a07      	ldr	r2, [sp, #28]
 800a8bc:	2a09      	cmp	r2, #9
 800a8be:	d845      	bhi.n	800a94c <_dtoa_r+0x264>
 800a8c0:	2a05      	cmp	r2, #5
 800a8c2:	bfc4      	itt	gt
 800a8c4:	3a04      	subgt	r2, #4
 800a8c6:	9207      	strgt	r2, [sp, #28]
 800a8c8:	9a07      	ldr	r2, [sp, #28]
 800a8ca:	f1a2 0202 	sub.w	r2, r2, #2
 800a8ce:	bfcc      	ite	gt
 800a8d0:	2400      	movgt	r4, #0
 800a8d2:	2401      	movle	r4, #1
 800a8d4:	2a03      	cmp	r2, #3
 800a8d6:	d844      	bhi.n	800a962 <_dtoa_r+0x27a>
 800a8d8:	e8df f002 	tbb	[pc, r2]
 800a8dc:	0b173634 	.word	0x0b173634
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	eba3 0308 	sub.w	r3, r3, r8
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	920a      	str	r2, [sp, #40]	@ 0x28
 800a8ec:	f1c8 0300 	rsb	r3, r8, #0
 800a8f0:	e7e3      	b.n	800a8ba <_dtoa_r+0x1d2>
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	9208      	str	r2, [sp, #32]
 800a8f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8f8:	eb08 0b02 	add.w	fp, r8, r2
 800a8fc:	f10b 0a01 	add.w	sl, fp, #1
 800a900:	4652      	mov	r2, sl
 800a902:	2a01      	cmp	r2, #1
 800a904:	bfb8      	it	lt
 800a906:	2201      	movlt	r2, #1
 800a908:	e006      	b.n	800a918 <_dtoa_r+0x230>
 800a90a:	2201      	movs	r2, #1
 800a90c:	9208      	str	r2, [sp, #32]
 800a90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a910:	2a00      	cmp	r2, #0
 800a912:	dd29      	ble.n	800a968 <_dtoa_r+0x280>
 800a914:	4693      	mov	fp, r2
 800a916:	4692      	mov	sl, r2
 800a918:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a91c:	2100      	movs	r1, #0
 800a91e:	2004      	movs	r0, #4
 800a920:	f100 0614 	add.w	r6, r0, #20
 800a924:	4296      	cmp	r6, r2
 800a926:	d926      	bls.n	800a976 <_dtoa_r+0x28e>
 800a928:	6079      	str	r1, [r7, #4]
 800a92a:	4648      	mov	r0, r9
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	f000 fd39 	bl	800b3a4 <_Balloc>
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	4607      	mov	r7, r0
 800a936:	2800      	cmp	r0, #0
 800a938:	d13e      	bne.n	800a9b8 <_dtoa_r+0x2d0>
 800a93a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9b4 <_dtoa_r+0x2cc>)
 800a93c:	4602      	mov	r2, r0
 800a93e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a942:	e6ea      	b.n	800a71a <_dtoa_r+0x32>
 800a944:	2200      	movs	r2, #0
 800a946:	e7e1      	b.n	800a90c <_dtoa_r+0x224>
 800a948:	2200      	movs	r2, #0
 800a94a:	e7d3      	b.n	800a8f4 <_dtoa_r+0x20c>
 800a94c:	2401      	movs	r4, #1
 800a94e:	2200      	movs	r2, #0
 800a950:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a954:	f04f 3bff 	mov.w	fp, #4294967295
 800a958:	2100      	movs	r1, #0
 800a95a:	46da      	mov	sl, fp
 800a95c:	2212      	movs	r2, #18
 800a95e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a960:	e7da      	b.n	800a918 <_dtoa_r+0x230>
 800a962:	2201      	movs	r2, #1
 800a964:	9208      	str	r2, [sp, #32]
 800a966:	e7f5      	b.n	800a954 <_dtoa_r+0x26c>
 800a968:	f04f 0b01 	mov.w	fp, #1
 800a96c:	46da      	mov	sl, fp
 800a96e:	465a      	mov	r2, fp
 800a970:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a974:	e7d0      	b.n	800a918 <_dtoa_r+0x230>
 800a976:	3101      	adds	r1, #1
 800a978:	0040      	lsls	r0, r0, #1
 800a97a:	e7d1      	b.n	800a920 <_dtoa_r+0x238>
 800a97c:	f3af 8000 	nop.w
 800a980:	636f4361 	.word	0x636f4361
 800a984:	3fd287a7 	.word	0x3fd287a7
 800a988:	8b60c8b3 	.word	0x8b60c8b3
 800a98c:	3fc68a28 	.word	0x3fc68a28
 800a990:	509f79fb 	.word	0x509f79fb
 800a994:	3fd34413 	.word	0x3fd34413
 800a998:	0800dbee 	.word	0x0800dbee
 800a99c:	0800dc05 	.word	0x0800dc05
 800a9a0:	7ff00000 	.word	0x7ff00000
 800a9a4:	0800dbea 	.word	0x0800dbea
 800a9a8:	0800dbb9 	.word	0x0800dbb9
 800a9ac:	0800dbb8 	.word	0x0800dbb8
 800a9b0:	0800ddb8 	.word	0x0800ddb8
 800a9b4:	0800dc5d 	.word	0x0800dc5d
 800a9b8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a9bc:	f1ba 0f0e 	cmp.w	sl, #14
 800a9c0:	6010      	str	r0, [r2, #0]
 800a9c2:	d86e      	bhi.n	800aaa2 <_dtoa_r+0x3ba>
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	d06c      	beq.n	800aaa2 <_dtoa_r+0x3ba>
 800a9c8:	f1b8 0f00 	cmp.w	r8, #0
 800a9cc:	f340 80b4 	ble.w	800ab38 <_dtoa_r+0x450>
 800a9d0:	4ac8      	ldr	r2, [pc, #800]	@ (800acf4 <_dtoa_r+0x60c>)
 800a9d2:	f008 010f 	and.w	r1, r8, #15
 800a9d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a9da:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a9de:	ed92 7b00 	vldr	d7, [r2]
 800a9e2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a9e6:	f000 809b 	beq.w	800ab20 <_dtoa_r+0x438>
 800a9ea:	4ac3      	ldr	r2, [pc, #780]	@ (800acf8 <_dtoa_r+0x610>)
 800a9ec:	ed92 6b08 	vldr	d6, [r2, #32]
 800a9f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a9f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a9f8:	f001 010f 	and.w	r1, r1, #15
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	48be      	ldr	r0, [pc, #760]	@ (800acf8 <_dtoa_r+0x610>)
 800aa00:	2900      	cmp	r1, #0
 800aa02:	f040 808f 	bne.w	800ab24 <_dtoa_r+0x43c>
 800aa06:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aa0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aa0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	f000 80b3 	beq.w	800ab84 <_dtoa_r+0x49c>
 800aa1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800aa22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	f140 80ab 	bpl.w	800ab84 <_dtoa_r+0x49c>
 800aa2e:	f1ba 0f00 	cmp.w	sl, #0
 800aa32:	f000 80a7 	beq.w	800ab84 <_dtoa_r+0x49c>
 800aa36:	f1bb 0f00 	cmp.w	fp, #0
 800aa3a:	dd30      	ble.n	800aa9e <_dtoa_r+0x3b6>
 800aa3c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800aa40:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa48:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa4c:	9105      	str	r1, [sp, #20]
 800aa4e:	3201      	adds	r2, #1
 800aa50:	465c      	mov	r4, fp
 800aa52:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aa56:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800aa5a:	ee07 2a90 	vmov	s15, r2
 800aa5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aa62:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aa66:	ee15 2a90 	vmov	r2, s11
 800aa6a:	ec51 0b15 	vmov	r0, r1, d5
 800aa6e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aa72:	2c00      	cmp	r4, #0
 800aa74:	f040 808a 	bne.w	800ab8c <_dtoa_r+0x4a4>
 800aa78:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa80:	ec41 0b17 	vmov	d7, r0, r1
 800aa84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8c:	f300 826a 	bgt.w	800af64 <_dtoa_r+0x87c>
 800aa90:	eeb1 7b47 	vneg.f64	d7, d7
 800aa94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9c:	d423      	bmi.n	800aae6 <_dtoa_r+0x3fe>
 800aa9e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aaa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	f2c0 8129 	blt.w	800acfc <_dtoa_r+0x614>
 800aaaa:	f1b8 0f0e 	cmp.w	r8, #14
 800aaae:	f300 8125 	bgt.w	800acfc <_dtoa_r+0x614>
 800aab2:	4b90      	ldr	r3, [pc, #576]	@ (800acf4 <_dtoa_r+0x60c>)
 800aab4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aab8:	ed93 6b00 	vldr	d6, [r3]
 800aabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f280 80c8 	bge.w	800ac54 <_dtoa_r+0x56c>
 800aac4:	f1ba 0f00 	cmp.w	sl, #0
 800aac8:	f300 80c4 	bgt.w	800ac54 <_dtoa_r+0x56c>
 800aacc:	d10b      	bne.n	800aae6 <_dtoa_r+0x3fe>
 800aace:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aad2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aada:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae2:	f2c0 823c 	blt.w	800af5e <_dtoa_r+0x876>
 800aae6:	2400      	movs	r4, #0
 800aae8:	4625      	mov	r5, r4
 800aaea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaec:	43db      	mvns	r3, r3
 800aaee:	9305      	str	r3, [sp, #20]
 800aaf0:	463e      	mov	r6, r7
 800aaf2:	f04f 0800 	mov.w	r8, #0
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4648      	mov	r0, r9
 800aafa:	f000 fc93 	bl	800b424 <_Bfree>
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	f000 80a2 	beq.w	800ac48 <_dtoa_r+0x560>
 800ab04:	f1b8 0f00 	cmp.w	r8, #0
 800ab08:	d005      	beq.n	800ab16 <_dtoa_r+0x42e>
 800ab0a:	45a8      	cmp	r8, r5
 800ab0c:	d003      	beq.n	800ab16 <_dtoa_r+0x42e>
 800ab0e:	4641      	mov	r1, r8
 800ab10:	4648      	mov	r0, r9
 800ab12:	f000 fc87 	bl	800b424 <_Bfree>
 800ab16:	4629      	mov	r1, r5
 800ab18:	4648      	mov	r0, r9
 800ab1a:	f000 fc83 	bl	800b424 <_Bfree>
 800ab1e:	e093      	b.n	800ac48 <_dtoa_r+0x560>
 800ab20:	2202      	movs	r2, #2
 800ab22:	e76c      	b.n	800a9fe <_dtoa_r+0x316>
 800ab24:	07cc      	lsls	r4, r1, #31
 800ab26:	d504      	bpl.n	800ab32 <_dtoa_r+0x44a>
 800ab28:	ed90 6b00 	vldr	d6, [r0]
 800ab2c:	3201      	adds	r2, #1
 800ab2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab32:	1049      	asrs	r1, r1, #1
 800ab34:	3008      	adds	r0, #8
 800ab36:	e763      	b.n	800aa00 <_dtoa_r+0x318>
 800ab38:	d022      	beq.n	800ab80 <_dtoa_r+0x498>
 800ab3a:	f1c8 0100 	rsb	r1, r8, #0
 800ab3e:	4a6d      	ldr	r2, [pc, #436]	@ (800acf4 <_dtoa_r+0x60c>)
 800ab40:	f001 000f 	and.w	r0, r1, #15
 800ab44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ab48:	ed92 7b00 	vldr	d7, [r2]
 800ab4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ab50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab54:	4868      	ldr	r0, [pc, #416]	@ (800acf8 <_dtoa_r+0x610>)
 800ab56:	1109      	asrs	r1, r1, #4
 800ab58:	2400      	movs	r4, #0
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	b929      	cbnz	r1, 800ab6a <_dtoa_r+0x482>
 800ab5e:	2c00      	cmp	r4, #0
 800ab60:	f43f af57 	beq.w	800aa12 <_dtoa_r+0x32a>
 800ab64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab68:	e753      	b.n	800aa12 <_dtoa_r+0x32a>
 800ab6a:	07ce      	lsls	r6, r1, #31
 800ab6c:	d505      	bpl.n	800ab7a <_dtoa_r+0x492>
 800ab6e:	ed90 6b00 	vldr	d6, [r0]
 800ab72:	3201      	adds	r2, #1
 800ab74:	2401      	movs	r4, #1
 800ab76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab7a:	1049      	asrs	r1, r1, #1
 800ab7c:	3008      	adds	r0, #8
 800ab7e:	e7ed      	b.n	800ab5c <_dtoa_r+0x474>
 800ab80:	2202      	movs	r2, #2
 800ab82:	e746      	b.n	800aa12 <_dtoa_r+0x32a>
 800ab84:	f8cd 8014 	str.w	r8, [sp, #20]
 800ab88:	4654      	mov	r4, sl
 800ab8a:	e762      	b.n	800aa52 <_dtoa_r+0x36a>
 800ab8c:	4a59      	ldr	r2, [pc, #356]	@ (800acf4 <_dtoa_r+0x60c>)
 800ab8e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ab92:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ab96:	9a08      	ldr	r2, [sp, #32]
 800ab98:	ec41 0b17 	vmov	d7, r0, r1
 800ab9c:	443c      	add	r4, r7
 800ab9e:	b34a      	cbz	r2, 800abf4 <_dtoa_r+0x50c>
 800aba0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800aba4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800aba8:	463e      	mov	r6, r7
 800abaa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800abae:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800abb2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800abb6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800abba:	ee14 2a90 	vmov	r2, s9
 800abbe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800abc2:	3230      	adds	r2, #48	@ 0x30
 800abc4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800abc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd0:	f806 2b01 	strb.w	r2, [r6], #1
 800abd4:	d438      	bmi.n	800ac48 <_dtoa_r+0x560>
 800abd6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800abda:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800abde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe2:	d46e      	bmi.n	800acc2 <_dtoa_r+0x5da>
 800abe4:	42a6      	cmp	r6, r4
 800abe6:	f43f af5a 	beq.w	800aa9e <_dtoa_r+0x3b6>
 800abea:	ee27 7b03 	vmul.f64	d7, d7, d3
 800abee:	ee26 6b03 	vmul.f64	d6, d6, d3
 800abf2:	e7e0      	b.n	800abb6 <_dtoa_r+0x4ce>
 800abf4:	4621      	mov	r1, r4
 800abf6:	463e      	mov	r6, r7
 800abf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abfc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ac00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac04:	ee14 2a90 	vmov	r2, s9
 800ac08:	3230      	adds	r2, #48	@ 0x30
 800ac0a:	f806 2b01 	strb.w	r2, [r6], #1
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac14:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac18:	d119      	bne.n	800ac4e <_dtoa_r+0x566>
 800ac1a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ac1e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ac22:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ac26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2a:	dc4a      	bgt.n	800acc2 <_dtoa_r+0x5da>
 800ac2c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ac30:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ac34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac38:	f57f af31 	bpl.w	800aa9e <_dtoa_r+0x3b6>
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	3901      	subs	r1, #1
 800ac40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac44:	2b30      	cmp	r3, #48	@ 0x30
 800ac46:	d0f9      	beq.n	800ac3c <_dtoa_r+0x554>
 800ac48:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ac4c:	e027      	b.n	800ac9e <_dtoa_r+0x5b6>
 800ac4e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ac52:	e7d5      	b.n	800ac00 <_dtoa_r+0x518>
 800ac54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac58:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ac5c:	463e      	mov	r6, r7
 800ac5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ac62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ac66:	ee15 3a10 	vmov	r3, s10
 800ac6a:	3330      	adds	r3, #48	@ 0x30
 800ac6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ac70:	1bf3      	subs	r3, r6, r7
 800ac72:	459a      	cmp	sl, r3
 800ac74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ac78:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ac7c:	d132      	bne.n	800ace4 <_dtoa_r+0x5fc>
 800ac7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ac82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8a:	dc18      	bgt.n	800acbe <_dtoa_r+0x5d6>
 800ac8c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac94:	d103      	bne.n	800ac9e <_dtoa_r+0x5b6>
 800ac96:	ee15 3a10 	vmov	r3, s10
 800ac9a:	07db      	lsls	r3, r3, #31
 800ac9c:	d40f      	bmi.n	800acbe <_dtoa_r+0x5d6>
 800ac9e:	9901      	ldr	r1, [sp, #4]
 800aca0:	4648      	mov	r0, r9
 800aca2:	f000 fbbf 	bl	800b424 <_Bfree>
 800aca6:	2300      	movs	r3, #0
 800aca8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acaa:	7033      	strb	r3, [r6, #0]
 800acac:	f108 0301 	add.w	r3, r8, #1
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 824b 	beq.w	800b150 <_dtoa_r+0xa68>
 800acba:	601e      	str	r6, [r3, #0]
 800acbc:	e248      	b.n	800b150 <_dtoa_r+0xa68>
 800acbe:	f8cd 8014 	str.w	r8, [sp, #20]
 800acc2:	4633      	mov	r3, r6
 800acc4:	461e      	mov	r6, r3
 800acc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acca:	2a39      	cmp	r2, #57	@ 0x39
 800accc:	d106      	bne.n	800acdc <_dtoa_r+0x5f4>
 800acce:	429f      	cmp	r7, r3
 800acd0:	d1f8      	bne.n	800acc4 <_dtoa_r+0x5dc>
 800acd2:	9a05      	ldr	r2, [sp, #20]
 800acd4:	3201      	adds	r2, #1
 800acd6:	9205      	str	r2, [sp, #20]
 800acd8:	2230      	movs	r2, #48	@ 0x30
 800acda:	703a      	strb	r2, [r7, #0]
 800acdc:	781a      	ldrb	r2, [r3, #0]
 800acde:	3201      	adds	r2, #1
 800ace0:	701a      	strb	r2, [r3, #0]
 800ace2:	e7b1      	b.n	800ac48 <_dtoa_r+0x560>
 800ace4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ace8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf0:	d1b5      	bne.n	800ac5e <_dtoa_r+0x576>
 800acf2:	e7d4      	b.n	800ac9e <_dtoa_r+0x5b6>
 800acf4:	0800ddb8 	.word	0x0800ddb8
 800acf8:	0800dd90 	.word	0x0800dd90
 800acfc:	9908      	ldr	r1, [sp, #32]
 800acfe:	2900      	cmp	r1, #0
 800ad00:	f000 80e9 	beq.w	800aed6 <_dtoa_r+0x7ee>
 800ad04:	9907      	ldr	r1, [sp, #28]
 800ad06:	2901      	cmp	r1, #1
 800ad08:	f300 80cb 	bgt.w	800aea2 <_dtoa_r+0x7ba>
 800ad0c:	2d00      	cmp	r5, #0
 800ad0e:	f000 80c4 	beq.w	800ae9a <_dtoa_r+0x7b2>
 800ad12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ad16:	9e04      	ldr	r6, [sp, #16]
 800ad18:	461c      	mov	r4, r3
 800ad1a:	9305      	str	r3, [sp, #20]
 800ad1c:	9b04      	ldr	r3, [sp, #16]
 800ad1e:	4413      	add	r3, r2
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	9b06      	ldr	r3, [sp, #24]
 800ad24:	2101      	movs	r1, #1
 800ad26:	4413      	add	r3, r2
 800ad28:	4648      	mov	r0, r9
 800ad2a:	9306      	str	r3, [sp, #24]
 800ad2c:	f000 fc78 	bl	800b620 <__i2b>
 800ad30:	9b05      	ldr	r3, [sp, #20]
 800ad32:	4605      	mov	r5, r0
 800ad34:	b166      	cbz	r6, 800ad50 <_dtoa_r+0x668>
 800ad36:	9a06      	ldr	r2, [sp, #24]
 800ad38:	2a00      	cmp	r2, #0
 800ad3a:	dd09      	ble.n	800ad50 <_dtoa_r+0x668>
 800ad3c:	42b2      	cmp	r2, r6
 800ad3e:	9904      	ldr	r1, [sp, #16]
 800ad40:	bfa8      	it	ge
 800ad42:	4632      	movge	r2, r6
 800ad44:	1a89      	subs	r1, r1, r2
 800ad46:	9104      	str	r1, [sp, #16]
 800ad48:	9906      	ldr	r1, [sp, #24]
 800ad4a:	1ab6      	subs	r6, r6, r2
 800ad4c:	1a8a      	subs	r2, r1, r2
 800ad4e:	9206      	str	r2, [sp, #24]
 800ad50:	b30b      	cbz	r3, 800ad96 <_dtoa_r+0x6ae>
 800ad52:	9a08      	ldr	r2, [sp, #32]
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	f000 80c5 	beq.w	800aee4 <_dtoa_r+0x7fc>
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	f000 80bf 	beq.w	800aede <_dtoa_r+0x7f6>
 800ad60:	4629      	mov	r1, r5
 800ad62:	4622      	mov	r2, r4
 800ad64:	4648      	mov	r0, r9
 800ad66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad68:	f000 fd12 	bl	800b790 <__pow5mult>
 800ad6c:	9a01      	ldr	r2, [sp, #4]
 800ad6e:	4601      	mov	r1, r0
 800ad70:	4605      	mov	r5, r0
 800ad72:	4648      	mov	r0, r9
 800ad74:	f000 fc6a 	bl	800b64c <__multiply>
 800ad78:	9901      	ldr	r1, [sp, #4]
 800ad7a:	9005      	str	r0, [sp, #20]
 800ad7c:	4648      	mov	r0, r9
 800ad7e:	f000 fb51 	bl	800b424 <_Bfree>
 800ad82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad84:	1b1b      	subs	r3, r3, r4
 800ad86:	f000 80b0 	beq.w	800aeea <_dtoa_r+0x802>
 800ad8a:	9905      	ldr	r1, [sp, #20]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f000 fcfe 	bl	800b790 <__pow5mult>
 800ad94:	9001      	str	r0, [sp, #4]
 800ad96:	2101      	movs	r1, #1
 800ad98:	4648      	mov	r0, r9
 800ad9a:	f000 fc41 	bl	800b620 <__i2b>
 800ad9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada0:	4604      	mov	r4, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 81da 	beq.w	800b15c <_dtoa_r+0xa74>
 800ada8:	461a      	mov	r2, r3
 800adaa:	4601      	mov	r1, r0
 800adac:	4648      	mov	r0, r9
 800adae:	f000 fcef 	bl	800b790 <__pow5mult>
 800adb2:	9b07      	ldr	r3, [sp, #28]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	4604      	mov	r4, r0
 800adb8:	f300 80a0 	bgt.w	800aefc <_dtoa_r+0x814>
 800adbc:	9b02      	ldr	r3, [sp, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f040 8096 	bne.w	800aef0 <_dtoa_r+0x808>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800adca:	2a00      	cmp	r2, #0
 800adcc:	f040 8092 	bne.w	800aef4 <_dtoa_r+0x80c>
 800add0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800add4:	0d12      	lsrs	r2, r2, #20
 800add6:	0512      	lsls	r2, r2, #20
 800add8:	2a00      	cmp	r2, #0
 800adda:	f000 808d 	beq.w	800aef8 <_dtoa_r+0x810>
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	3301      	adds	r3, #1
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	9b06      	ldr	r3, [sp, #24]
 800ade6:	3301      	adds	r3, #1
 800ade8:	9306      	str	r3, [sp, #24]
 800adea:	2301      	movs	r3, #1
 800adec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 81b9 	beq.w	800b168 <_dtoa_r+0xa80>
 800adf6:	6922      	ldr	r2, [r4, #16]
 800adf8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800adfc:	6910      	ldr	r0, [r2, #16]
 800adfe:	f000 fbc3 	bl	800b588 <__hi0bits>
 800ae02:	f1c0 0020 	rsb	r0, r0, #32
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	4418      	add	r0, r3
 800ae0a:	f010 001f 	ands.w	r0, r0, #31
 800ae0e:	f000 8081 	beq.w	800af14 <_dtoa_r+0x82c>
 800ae12:	f1c0 0220 	rsb	r2, r0, #32
 800ae16:	2a04      	cmp	r2, #4
 800ae18:	dd73      	ble.n	800af02 <_dtoa_r+0x81a>
 800ae1a:	9b04      	ldr	r3, [sp, #16]
 800ae1c:	f1c0 001c 	rsb	r0, r0, #28
 800ae20:	4403      	add	r3, r0
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	9b06      	ldr	r3, [sp, #24]
 800ae26:	4406      	add	r6, r0
 800ae28:	4403      	add	r3, r0
 800ae2a:	9306      	str	r3, [sp, #24]
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	dd05      	ble.n	800ae3e <_dtoa_r+0x756>
 800ae32:	9901      	ldr	r1, [sp, #4]
 800ae34:	461a      	mov	r2, r3
 800ae36:	4648      	mov	r0, r9
 800ae38:	f000 fd04 	bl	800b844 <__lshift>
 800ae3c:	9001      	str	r0, [sp, #4]
 800ae3e:	9b06      	ldr	r3, [sp, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dd05      	ble.n	800ae50 <_dtoa_r+0x768>
 800ae44:	4621      	mov	r1, r4
 800ae46:	461a      	mov	r2, r3
 800ae48:	4648      	mov	r0, r9
 800ae4a:	f000 fcfb 	bl	800b844 <__lshift>
 800ae4e:	4604      	mov	r4, r0
 800ae50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d060      	beq.n	800af18 <_dtoa_r+0x830>
 800ae56:	9801      	ldr	r0, [sp, #4]
 800ae58:	4621      	mov	r1, r4
 800ae5a:	f000 fd5f 	bl	800b91c <__mcmp>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	da5a      	bge.n	800af18 <_dtoa_r+0x830>
 800ae62:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae66:	9305      	str	r3, [sp, #20]
 800ae68:	9901      	ldr	r1, [sp, #4]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	220a      	movs	r2, #10
 800ae6e:	4648      	mov	r0, r9
 800ae70:	f000 fafa 	bl	800b468 <__multadd>
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	9001      	str	r0, [sp, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 8177 	beq.w	800b16c <_dtoa_r+0xa84>
 800ae7e:	4629      	mov	r1, r5
 800ae80:	2300      	movs	r3, #0
 800ae82:	220a      	movs	r2, #10
 800ae84:	4648      	mov	r0, r9
 800ae86:	f000 faef 	bl	800b468 <__multadd>
 800ae8a:	f1bb 0f00 	cmp.w	fp, #0
 800ae8e:	4605      	mov	r5, r0
 800ae90:	dc6e      	bgt.n	800af70 <_dtoa_r+0x888>
 800ae92:	9b07      	ldr	r3, [sp, #28]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	dc48      	bgt.n	800af2a <_dtoa_r+0x842>
 800ae98:	e06a      	b.n	800af70 <_dtoa_r+0x888>
 800ae9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aea0:	e739      	b.n	800ad16 <_dtoa_r+0x62e>
 800aea2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	db07      	blt.n	800aeba <_dtoa_r+0x7d2>
 800aeaa:	f1ba 0f00 	cmp.w	sl, #0
 800aeae:	eba3 0404 	sub.w	r4, r3, r4
 800aeb2:	db0b      	blt.n	800aecc <_dtoa_r+0x7e4>
 800aeb4:	9e04      	ldr	r6, [sp, #16]
 800aeb6:	4652      	mov	r2, sl
 800aeb8:	e72f      	b.n	800ad1a <_dtoa_r+0x632>
 800aeba:	1ae2      	subs	r2, r4, r3
 800aebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aebe:	9e04      	ldr	r6, [sp, #16]
 800aec0:	4413      	add	r3, r2
 800aec2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aec4:	4652      	mov	r2, sl
 800aec6:	4623      	mov	r3, r4
 800aec8:	2400      	movs	r4, #0
 800aeca:	e726      	b.n	800ad1a <_dtoa_r+0x632>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	eba2 060a 	sub.w	r6, r2, sl
 800aed2:	2200      	movs	r2, #0
 800aed4:	e721      	b.n	800ad1a <_dtoa_r+0x632>
 800aed6:	9e04      	ldr	r6, [sp, #16]
 800aed8:	9d08      	ldr	r5, [sp, #32]
 800aeda:	461c      	mov	r4, r3
 800aedc:	e72a      	b.n	800ad34 <_dtoa_r+0x64c>
 800aede:	9a01      	ldr	r2, [sp, #4]
 800aee0:	9205      	str	r2, [sp, #20]
 800aee2:	e752      	b.n	800ad8a <_dtoa_r+0x6a2>
 800aee4:	9901      	ldr	r1, [sp, #4]
 800aee6:	461a      	mov	r2, r3
 800aee8:	e751      	b.n	800ad8e <_dtoa_r+0x6a6>
 800aeea:	9b05      	ldr	r3, [sp, #20]
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	e752      	b.n	800ad96 <_dtoa_r+0x6ae>
 800aef0:	2300      	movs	r3, #0
 800aef2:	e77b      	b.n	800adec <_dtoa_r+0x704>
 800aef4:	9b02      	ldr	r3, [sp, #8]
 800aef6:	e779      	b.n	800adec <_dtoa_r+0x704>
 800aef8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aefa:	e778      	b.n	800adee <_dtoa_r+0x706>
 800aefc:	2300      	movs	r3, #0
 800aefe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af00:	e779      	b.n	800adf6 <_dtoa_r+0x70e>
 800af02:	d093      	beq.n	800ae2c <_dtoa_r+0x744>
 800af04:	9b04      	ldr	r3, [sp, #16]
 800af06:	321c      	adds	r2, #28
 800af08:	4413      	add	r3, r2
 800af0a:	9304      	str	r3, [sp, #16]
 800af0c:	9b06      	ldr	r3, [sp, #24]
 800af0e:	4416      	add	r6, r2
 800af10:	4413      	add	r3, r2
 800af12:	e78a      	b.n	800ae2a <_dtoa_r+0x742>
 800af14:	4602      	mov	r2, r0
 800af16:	e7f5      	b.n	800af04 <_dtoa_r+0x81c>
 800af18:	f1ba 0f00 	cmp.w	sl, #0
 800af1c:	f8cd 8014 	str.w	r8, [sp, #20]
 800af20:	46d3      	mov	fp, sl
 800af22:	dc21      	bgt.n	800af68 <_dtoa_r+0x880>
 800af24:	9b07      	ldr	r3, [sp, #28]
 800af26:	2b02      	cmp	r3, #2
 800af28:	dd1e      	ble.n	800af68 <_dtoa_r+0x880>
 800af2a:	f1bb 0f00 	cmp.w	fp, #0
 800af2e:	f47f addc 	bne.w	800aaea <_dtoa_r+0x402>
 800af32:	4621      	mov	r1, r4
 800af34:	465b      	mov	r3, fp
 800af36:	2205      	movs	r2, #5
 800af38:	4648      	mov	r0, r9
 800af3a:	f000 fa95 	bl	800b468 <__multadd>
 800af3e:	4601      	mov	r1, r0
 800af40:	4604      	mov	r4, r0
 800af42:	9801      	ldr	r0, [sp, #4]
 800af44:	f000 fcea 	bl	800b91c <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f77f adce 	ble.w	800aaea <_dtoa_r+0x402>
 800af4e:	463e      	mov	r6, r7
 800af50:	2331      	movs	r3, #49	@ 0x31
 800af52:	f806 3b01 	strb.w	r3, [r6], #1
 800af56:	9b05      	ldr	r3, [sp, #20]
 800af58:	3301      	adds	r3, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	e5c9      	b.n	800aaf2 <_dtoa_r+0x40a>
 800af5e:	f8cd 8014 	str.w	r8, [sp, #20]
 800af62:	4654      	mov	r4, sl
 800af64:	4625      	mov	r5, r4
 800af66:	e7f2      	b.n	800af4e <_dtoa_r+0x866>
 800af68:	9b08      	ldr	r3, [sp, #32]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 8102 	beq.w	800b174 <_dtoa_r+0xa8c>
 800af70:	2e00      	cmp	r6, #0
 800af72:	dd05      	ble.n	800af80 <_dtoa_r+0x898>
 800af74:	4629      	mov	r1, r5
 800af76:	4632      	mov	r2, r6
 800af78:	4648      	mov	r0, r9
 800af7a:	f000 fc63 	bl	800b844 <__lshift>
 800af7e:	4605      	mov	r5, r0
 800af80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d058      	beq.n	800b038 <_dtoa_r+0x950>
 800af86:	6869      	ldr	r1, [r5, #4]
 800af88:	4648      	mov	r0, r9
 800af8a:	f000 fa0b 	bl	800b3a4 <_Balloc>
 800af8e:	4606      	mov	r6, r0
 800af90:	b928      	cbnz	r0, 800af9e <_dtoa_r+0x8b6>
 800af92:	4b82      	ldr	r3, [pc, #520]	@ (800b19c <_dtoa_r+0xab4>)
 800af94:	4602      	mov	r2, r0
 800af96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af9a:	f7ff bbbe 	b.w	800a71a <_dtoa_r+0x32>
 800af9e:	692a      	ldr	r2, [r5, #16]
 800afa0:	3202      	adds	r2, #2
 800afa2:	0092      	lsls	r2, r2, #2
 800afa4:	f105 010c 	add.w	r1, r5, #12
 800afa8:	300c      	adds	r0, #12
 800afaa:	f001 ff19 	bl	800cde0 <memcpy>
 800afae:	2201      	movs	r2, #1
 800afb0:	4631      	mov	r1, r6
 800afb2:	4648      	mov	r0, r9
 800afb4:	f000 fc46 	bl	800b844 <__lshift>
 800afb8:	1c7b      	adds	r3, r7, #1
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	eb07 030b 	add.w	r3, r7, fp
 800afc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc2:	9b02      	ldr	r3, [sp, #8]
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	46a8      	mov	r8, r5
 800afca:	9308      	str	r3, [sp, #32]
 800afcc:	4605      	mov	r5, r0
 800afce:	9b04      	ldr	r3, [sp, #16]
 800afd0:	9801      	ldr	r0, [sp, #4]
 800afd2:	4621      	mov	r1, r4
 800afd4:	f103 3bff 	add.w	fp, r3, #4294967295
 800afd8:	f7ff fafc 	bl	800a5d4 <quorem>
 800afdc:	4641      	mov	r1, r8
 800afde:	9002      	str	r0, [sp, #8]
 800afe0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800afe4:	9801      	ldr	r0, [sp, #4]
 800afe6:	f000 fc99 	bl	800b91c <__mcmp>
 800afea:	462a      	mov	r2, r5
 800afec:	9006      	str	r0, [sp, #24]
 800afee:	4621      	mov	r1, r4
 800aff0:	4648      	mov	r0, r9
 800aff2:	f000 fcaf 	bl	800b954 <__mdiff>
 800aff6:	68c2      	ldr	r2, [r0, #12]
 800aff8:	4606      	mov	r6, r0
 800affa:	b9fa      	cbnz	r2, 800b03c <_dtoa_r+0x954>
 800affc:	4601      	mov	r1, r0
 800affe:	9801      	ldr	r0, [sp, #4]
 800b000:	f000 fc8c 	bl	800b91c <__mcmp>
 800b004:	4602      	mov	r2, r0
 800b006:	4631      	mov	r1, r6
 800b008:	4648      	mov	r0, r9
 800b00a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b00c:	f000 fa0a 	bl	800b424 <_Bfree>
 800b010:	9b07      	ldr	r3, [sp, #28]
 800b012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b014:	9e04      	ldr	r6, [sp, #16]
 800b016:	ea42 0103 	orr.w	r1, r2, r3
 800b01a:	9b08      	ldr	r3, [sp, #32]
 800b01c:	4319      	orrs	r1, r3
 800b01e:	d10f      	bne.n	800b040 <_dtoa_r+0x958>
 800b020:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b024:	d028      	beq.n	800b078 <_dtoa_r+0x990>
 800b026:	9b06      	ldr	r3, [sp, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dd02      	ble.n	800b032 <_dtoa_r+0x94a>
 800b02c:	9b02      	ldr	r3, [sp, #8]
 800b02e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b032:	f88b a000 	strb.w	sl, [fp]
 800b036:	e55e      	b.n	800aaf6 <_dtoa_r+0x40e>
 800b038:	4628      	mov	r0, r5
 800b03a:	e7bd      	b.n	800afb8 <_dtoa_r+0x8d0>
 800b03c:	2201      	movs	r2, #1
 800b03e:	e7e2      	b.n	800b006 <_dtoa_r+0x91e>
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	2b00      	cmp	r3, #0
 800b044:	db04      	blt.n	800b050 <_dtoa_r+0x968>
 800b046:	9907      	ldr	r1, [sp, #28]
 800b048:	430b      	orrs	r3, r1
 800b04a:	9908      	ldr	r1, [sp, #32]
 800b04c:	430b      	orrs	r3, r1
 800b04e:	d120      	bne.n	800b092 <_dtoa_r+0x9aa>
 800b050:	2a00      	cmp	r2, #0
 800b052:	ddee      	ble.n	800b032 <_dtoa_r+0x94a>
 800b054:	9901      	ldr	r1, [sp, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	4648      	mov	r0, r9
 800b05a:	f000 fbf3 	bl	800b844 <__lshift>
 800b05e:	4621      	mov	r1, r4
 800b060:	9001      	str	r0, [sp, #4]
 800b062:	f000 fc5b 	bl	800b91c <__mcmp>
 800b066:	2800      	cmp	r0, #0
 800b068:	dc03      	bgt.n	800b072 <_dtoa_r+0x98a>
 800b06a:	d1e2      	bne.n	800b032 <_dtoa_r+0x94a>
 800b06c:	f01a 0f01 	tst.w	sl, #1
 800b070:	d0df      	beq.n	800b032 <_dtoa_r+0x94a>
 800b072:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b076:	d1d9      	bne.n	800b02c <_dtoa_r+0x944>
 800b078:	2339      	movs	r3, #57	@ 0x39
 800b07a:	f88b 3000 	strb.w	r3, [fp]
 800b07e:	4633      	mov	r3, r6
 800b080:	461e      	mov	r6, r3
 800b082:	3b01      	subs	r3, #1
 800b084:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b088:	2a39      	cmp	r2, #57	@ 0x39
 800b08a:	d052      	beq.n	800b132 <_dtoa_r+0xa4a>
 800b08c:	3201      	adds	r2, #1
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	e531      	b.n	800aaf6 <_dtoa_r+0x40e>
 800b092:	2a00      	cmp	r2, #0
 800b094:	dd07      	ble.n	800b0a6 <_dtoa_r+0x9be>
 800b096:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b09a:	d0ed      	beq.n	800b078 <_dtoa_r+0x990>
 800b09c:	f10a 0301 	add.w	r3, sl, #1
 800b0a0:	f88b 3000 	strb.w	r3, [fp]
 800b0a4:	e527      	b.n	800aaf6 <_dtoa_r+0x40e>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0aa:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d029      	beq.n	800b106 <_dtoa_r+0xa1e>
 800b0b2:	9901      	ldr	r1, [sp, #4]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	220a      	movs	r2, #10
 800b0b8:	4648      	mov	r0, r9
 800b0ba:	f000 f9d5 	bl	800b468 <__multadd>
 800b0be:	45a8      	cmp	r8, r5
 800b0c0:	9001      	str	r0, [sp, #4]
 800b0c2:	f04f 0300 	mov.w	r3, #0
 800b0c6:	f04f 020a 	mov.w	r2, #10
 800b0ca:	4641      	mov	r1, r8
 800b0cc:	4648      	mov	r0, r9
 800b0ce:	d107      	bne.n	800b0e0 <_dtoa_r+0x9f8>
 800b0d0:	f000 f9ca 	bl	800b468 <__multadd>
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	9b04      	ldr	r3, [sp, #16]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	9304      	str	r3, [sp, #16]
 800b0de:	e776      	b.n	800afce <_dtoa_r+0x8e6>
 800b0e0:	f000 f9c2 	bl	800b468 <__multadd>
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	220a      	movs	r2, #10
 800b0ec:	4648      	mov	r0, r9
 800b0ee:	f000 f9bb 	bl	800b468 <__multadd>
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	e7f0      	b.n	800b0d8 <_dtoa_r+0x9f0>
 800b0f6:	f1bb 0f00 	cmp.w	fp, #0
 800b0fa:	bfcc      	ite	gt
 800b0fc:	465e      	movgt	r6, fp
 800b0fe:	2601      	movle	r6, #1
 800b100:	443e      	add	r6, r7
 800b102:	f04f 0800 	mov.w	r8, #0
 800b106:	9901      	ldr	r1, [sp, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	4648      	mov	r0, r9
 800b10c:	f000 fb9a 	bl	800b844 <__lshift>
 800b110:	4621      	mov	r1, r4
 800b112:	9001      	str	r0, [sp, #4]
 800b114:	f000 fc02 	bl	800b91c <__mcmp>
 800b118:	2800      	cmp	r0, #0
 800b11a:	dcb0      	bgt.n	800b07e <_dtoa_r+0x996>
 800b11c:	d102      	bne.n	800b124 <_dtoa_r+0xa3c>
 800b11e:	f01a 0f01 	tst.w	sl, #1
 800b122:	d1ac      	bne.n	800b07e <_dtoa_r+0x996>
 800b124:	4633      	mov	r3, r6
 800b126:	461e      	mov	r6, r3
 800b128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b12c:	2a30      	cmp	r2, #48	@ 0x30
 800b12e:	d0fa      	beq.n	800b126 <_dtoa_r+0xa3e>
 800b130:	e4e1      	b.n	800aaf6 <_dtoa_r+0x40e>
 800b132:	429f      	cmp	r7, r3
 800b134:	d1a4      	bne.n	800b080 <_dtoa_r+0x998>
 800b136:	9b05      	ldr	r3, [sp, #20]
 800b138:	3301      	adds	r3, #1
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	2331      	movs	r3, #49	@ 0x31
 800b13e:	703b      	strb	r3, [r7, #0]
 800b140:	e4d9      	b.n	800aaf6 <_dtoa_r+0x40e>
 800b142:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b144:	4f16      	ldr	r7, [pc, #88]	@ (800b1a0 <_dtoa_r+0xab8>)
 800b146:	b11b      	cbz	r3, 800b150 <_dtoa_r+0xa68>
 800b148:	f107 0308 	add.w	r3, r7, #8
 800b14c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	4638      	mov	r0, r7
 800b152:	b011      	add	sp, #68	@ 0x44
 800b154:	ecbd 8b02 	vpop	{d8}
 800b158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	f77f ae2c 	ble.w	800adbc <_dtoa_r+0x6d4>
 800b164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b168:	2001      	movs	r0, #1
 800b16a:	e64c      	b.n	800ae06 <_dtoa_r+0x71e>
 800b16c:	f1bb 0f00 	cmp.w	fp, #0
 800b170:	f77f aed8 	ble.w	800af24 <_dtoa_r+0x83c>
 800b174:	463e      	mov	r6, r7
 800b176:	9801      	ldr	r0, [sp, #4]
 800b178:	4621      	mov	r1, r4
 800b17a:	f7ff fa2b 	bl	800a5d4 <quorem>
 800b17e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b182:	f806 ab01 	strb.w	sl, [r6], #1
 800b186:	1bf2      	subs	r2, r6, r7
 800b188:	4593      	cmp	fp, r2
 800b18a:	ddb4      	ble.n	800b0f6 <_dtoa_r+0xa0e>
 800b18c:	9901      	ldr	r1, [sp, #4]
 800b18e:	2300      	movs	r3, #0
 800b190:	220a      	movs	r2, #10
 800b192:	4648      	mov	r0, r9
 800b194:	f000 f968 	bl	800b468 <__multadd>
 800b198:	9001      	str	r0, [sp, #4]
 800b19a:	e7ec      	b.n	800b176 <_dtoa_r+0xa8e>
 800b19c:	0800dc5d 	.word	0x0800dc5d
 800b1a0:	0800dbe1 	.word	0x0800dbe1

0800b1a4 <_free_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	d041      	beq.n	800b230 <_free_r+0x8c>
 800b1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b0:	1f0c      	subs	r4, r1, #4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bfb8      	it	lt
 800b1b6:	18e4      	addlt	r4, r4, r3
 800b1b8:	f000 f8e8 	bl	800b38c <__malloc_lock>
 800b1bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b234 <_free_r+0x90>)
 800b1be:	6813      	ldr	r3, [r2, #0]
 800b1c0:	b933      	cbnz	r3, 800b1d0 <_free_r+0x2c>
 800b1c2:	6063      	str	r3, [r4, #4]
 800b1c4:	6014      	str	r4, [r2, #0]
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1cc:	f000 b8e4 	b.w	800b398 <__malloc_unlock>
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d908      	bls.n	800b1e6 <_free_r+0x42>
 800b1d4:	6820      	ldr	r0, [r4, #0]
 800b1d6:	1821      	adds	r1, r4, r0
 800b1d8:	428b      	cmp	r3, r1
 800b1da:	bf01      	itttt	eq
 800b1dc:	6819      	ldreq	r1, [r3, #0]
 800b1de:	685b      	ldreq	r3, [r3, #4]
 800b1e0:	1809      	addeq	r1, r1, r0
 800b1e2:	6021      	streq	r1, [r4, #0]
 800b1e4:	e7ed      	b.n	800b1c2 <_free_r+0x1e>
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	b10b      	cbz	r3, 800b1f0 <_free_r+0x4c>
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d9fa      	bls.n	800b1e6 <_free_r+0x42>
 800b1f0:	6811      	ldr	r1, [r2, #0]
 800b1f2:	1850      	adds	r0, r2, r1
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d10b      	bne.n	800b210 <_free_r+0x6c>
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	4401      	add	r1, r0
 800b1fc:	1850      	adds	r0, r2, r1
 800b1fe:	4283      	cmp	r3, r0
 800b200:	6011      	str	r1, [r2, #0]
 800b202:	d1e0      	bne.n	800b1c6 <_free_r+0x22>
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	6053      	str	r3, [r2, #4]
 800b20a:	4408      	add	r0, r1
 800b20c:	6010      	str	r0, [r2, #0]
 800b20e:	e7da      	b.n	800b1c6 <_free_r+0x22>
 800b210:	d902      	bls.n	800b218 <_free_r+0x74>
 800b212:	230c      	movs	r3, #12
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	e7d6      	b.n	800b1c6 <_free_r+0x22>
 800b218:	6820      	ldr	r0, [r4, #0]
 800b21a:	1821      	adds	r1, r4, r0
 800b21c:	428b      	cmp	r3, r1
 800b21e:	bf04      	itt	eq
 800b220:	6819      	ldreq	r1, [r3, #0]
 800b222:	685b      	ldreq	r3, [r3, #4]
 800b224:	6063      	str	r3, [r4, #4]
 800b226:	bf04      	itt	eq
 800b228:	1809      	addeq	r1, r1, r0
 800b22a:	6021      	streq	r1, [r4, #0]
 800b22c:	6054      	str	r4, [r2, #4]
 800b22e:	e7ca      	b.n	800b1c6 <_free_r+0x22>
 800b230:	bd38      	pop	{r3, r4, r5, pc}
 800b232:	bf00      	nop
 800b234:	240005d0 	.word	0x240005d0

0800b238 <malloc>:
 800b238:	4b02      	ldr	r3, [pc, #8]	@ (800b244 <malloc+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f000 b825 	b.w	800b28c <_malloc_r>
 800b242:	bf00      	nop
 800b244:	2400001c 	.word	0x2400001c

0800b248 <sbrk_aligned>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4e0f      	ldr	r6, [pc, #60]	@ (800b288 <sbrk_aligned+0x40>)
 800b24c:	460c      	mov	r4, r1
 800b24e:	6831      	ldr	r1, [r6, #0]
 800b250:	4605      	mov	r5, r0
 800b252:	b911      	cbnz	r1, 800b25a <sbrk_aligned+0x12>
 800b254:	f001 fdb4 	bl	800cdc0 <_sbrk_r>
 800b258:	6030      	str	r0, [r6, #0]
 800b25a:	4621      	mov	r1, r4
 800b25c:	4628      	mov	r0, r5
 800b25e:	f001 fdaf 	bl	800cdc0 <_sbrk_r>
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	d103      	bne.n	800b26e <sbrk_aligned+0x26>
 800b266:	f04f 34ff 	mov.w	r4, #4294967295
 800b26a:	4620      	mov	r0, r4
 800b26c:	bd70      	pop	{r4, r5, r6, pc}
 800b26e:	1cc4      	adds	r4, r0, #3
 800b270:	f024 0403 	bic.w	r4, r4, #3
 800b274:	42a0      	cmp	r0, r4
 800b276:	d0f8      	beq.n	800b26a <sbrk_aligned+0x22>
 800b278:	1a21      	subs	r1, r4, r0
 800b27a:	4628      	mov	r0, r5
 800b27c:	f001 fda0 	bl	800cdc0 <_sbrk_r>
 800b280:	3001      	adds	r0, #1
 800b282:	d1f2      	bne.n	800b26a <sbrk_aligned+0x22>
 800b284:	e7ef      	b.n	800b266 <sbrk_aligned+0x1e>
 800b286:	bf00      	nop
 800b288:	240005cc 	.word	0x240005cc

0800b28c <_malloc_r>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	1ccd      	adds	r5, r1, #3
 800b292:	f025 0503 	bic.w	r5, r5, #3
 800b296:	3508      	adds	r5, #8
 800b298:	2d0c      	cmp	r5, #12
 800b29a:	bf38      	it	cc
 800b29c:	250c      	movcc	r5, #12
 800b29e:	2d00      	cmp	r5, #0
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	db01      	blt.n	800b2a8 <_malloc_r+0x1c>
 800b2a4:	42a9      	cmp	r1, r5
 800b2a6:	d904      	bls.n	800b2b2 <_malloc_r+0x26>
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	6033      	str	r3, [r6, #0]
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b388 <_malloc_r+0xfc>
 800b2b6:	f000 f869 	bl	800b38c <__malloc_lock>
 800b2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b2be:	461c      	mov	r4, r3
 800b2c0:	bb44      	cbnz	r4, 800b314 <_malloc_r+0x88>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f7ff ffbf 	bl	800b248 <sbrk_aligned>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	d158      	bne.n	800b382 <_malloc_r+0xf6>
 800b2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b2d4:	4627      	mov	r7, r4
 800b2d6:	2f00      	cmp	r7, #0
 800b2d8:	d143      	bne.n	800b362 <_malloc_r+0xd6>
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	d04b      	beq.n	800b376 <_malloc_r+0xea>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	eb04 0903 	add.w	r9, r4, r3
 800b2e8:	f001 fd6a 	bl	800cdc0 <_sbrk_r>
 800b2ec:	4581      	cmp	r9, r0
 800b2ee:	d142      	bne.n	800b376 <_malloc_r+0xea>
 800b2f0:	6821      	ldr	r1, [r4, #0]
 800b2f2:	1a6d      	subs	r5, r5, r1
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7ff ffa6 	bl	800b248 <sbrk_aligned>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d03a      	beq.n	800b376 <_malloc_r+0xea>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	442b      	add	r3, r5
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	f8d8 3000 	ldr.w	r3, [r8]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	bb62      	cbnz	r2, 800b368 <_malloc_r+0xdc>
 800b30e:	f8c8 7000 	str.w	r7, [r8]
 800b312:	e00f      	b.n	800b334 <_malloc_r+0xa8>
 800b314:	6822      	ldr	r2, [r4, #0]
 800b316:	1b52      	subs	r2, r2, r5
 800b318:	d420      	bmi.n	800b35c <_malloc_r+0xd0>
 800b31a:	2a0b      	cmp	r2, #11
 800b31c:	d917      	bls.n	800b34e <_malloc_r+0xc2>
 800b31e:	1961      	adds	r1, r4, r5
 800b320:	42a3      	cmp	r3, r4
 800b322:	6025      	str	r5, [r4, #0]
 800b324:	bf18      	it	ne
 800b326:	6059      	strne	r1, [r3, #4]
 800b328:	6863      	ldr	r3, [r4, #4]
 800b32a:	bf08      	it	eq
 800b32c:	f8c8 1000 	streq.w	r1, [r8]
 800b330:	5162      	str	r2, [r4, r5]
 800b332:	604b      	str	r3, [r1, #4]
 800b334:	4630      	mov	r0, r6
 800b336:	f000 f82f 	bl	800b398 <__malloc_unlock>
 800b33a:	f104 000b 	add.w	r0, r4, #11
 800b33e:	1d23      	adds	r3, r4, #4
 800b340:	f020 0007 	bic.w	r0, r0, #7
 800b344:	1ac2      	subs	r2, r0, r3
 800b346:	bf1c      	itt	ne
 800b348:	1a1b      	subne	r3, r3, r0
 800b34a:	50a3      	strne	r3, [r4, r2]
 800b34c:	e7af      	b.n	800b2ae <_malloc_r+0x22>
 800b34e:	6862      	ldr	r2, [r4, #4]
 800b350:	42a3      	cmp	r3, r4
 800b352:	bf0c      	ite	eq
 800b354:	f8c8 2000 	streq.w	r2, [r8]
 800b358:	605a      	strne	r2, [r3, #4]
 800b35a:	e7eb      	b.n	800b334 <_malloc_r+0xa8>
 800b35c:	4623      	mov	r3, r4
 800b35e:	6864      	ldr	r4, [r4, #4]
 800b360:	e7ae      	b.n	800b2c0 <_malloc_r+0x34>
 800b362:	463c      	mov	r4, r7
 800b364:	687f      	ldr	r7, [r7, #4]
 800b366:	e7b6      	b.n	800b2d6 <_malloc_r+0x4a>
 800b368:	461a      	mov	r2, r3
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d1fb      	bne.n	800b368 <_malloc_r+0xdc>
 800b370:	2300      	movs	r3, #0
 800b372:	6053      	str	r3, [r2, #4]
 800b374:	e7de      	b.n	800b334 <_malloc_r+0xa8>
 800b376:	230c      	movs	r3, #12
 800b378:	6033      	str	r3, [r6, #0]
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f80c 	bl	800b398 <__malloc_unlock>
 800b380:	e794      	b.n	800b2ac <_malloc_r+0x20>
 800b382:	6005      	str	r5, [r0, #0]
 800b384:	e7d6      	b.n	800b334 <_malloc_r+0xa8>
 800b386:	bf00      	nop
 800b388:	240005d0 	.word	0x240005d0

0800b38c <__malloc_lock>:
 800b38c:	4801      	ldr	r0, [pc, #4]	@ (800b394 <__malloc_lock+0x8>)
 800b38e:	f7ff b918 	b.w	800a5c2 <__retarget_lock_acquire_recursive>
 800b392:	bf00      	nop
 800b394:	240005c8 	.word	0x240005c8

0800b398 <__malloc_unlock>:
 800b398:	4801      	ldr	r0, [pc, #4]	@ (800b3a0 <__malloc_unlock+0x8>)
 800b39a:	f7ff b913 	b.w	800a5c4 <__retarget_lock_release_recursive>
 800b39e:	bf00      	nop
 800b3a0:	240005c8 	.word	0x240005c8

0800b3a4 <_Balloc>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	69c6      	ldr	r6, [r0, #28]
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	b976      	cbnz	r6, 800b3cc <_Balloc+0x28>
 800b3ae:	2010      	movs	r0, #16
 800b3b0:	f7ff ff42 	bl	800b238 <malloc>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	61e0      	str	r0, [r4, #28]
 800b3b8:	b920      	cbnz	r0, 800b3c4 <_Balloc+0x20>
 800b3ba:	4b18      	ldr	r3, [pc, #96]	@ (800b41c <_Balloc+0x78>)
 800b3bc:	4818      	ldr	r0, [pc, #96]	@ (800b420 <_Balloc+0x7c>)
 800b3be:	216b      	movs	r1, #107	@ 0x6b
 800b3c0:	f001 fd26 	bl	800ce10 <__assert_func>
 800b3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3c8:	6006      	str	r6, [r0, #0]
 800b3ca:	60c6      	str	r6, [r0, #12]
 800b3cc:	69e6      	ldr	r6, [r4, #28]
 800b3ce:	68f3      	ldr	r3, [r6, #12]
 800b3d0:	b183      	cbz	r3, 800b3f4 <_Balloc+0x50>
 800b3d2:	69e3      	ldr	r3, [r4, #28]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3da:	b9b8      	cbnz	r0, 800b40c <_Balloc+0x68>
 800b3dc:	2101      	movs	r1, #1
 800b3de:	fa01 f605 	lsl.w	r6, r1, r5
 800b3e2:	1d72      	adds	r2, r6, #5
 800b3e4:	0092      	lsls	r2, r2, #2
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f001 fd30 	bl	800ce4c <_calloc_r>
 800b3ec:	b160      	cbz	r0, 800b408 <_Balloc+0x64>
 800b3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3f2:	e00e      	b.n	800b412 <_Balloc+0x6e>
 800b3f4:	2221      	movs	r2, #33	@ 0x21
 800b3f6:	2104      	movs	r1, #4
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f001 fd27 	bl	800ce4c <_calloc_r>
 800b3fe:	69e3      	ldr	r3, [r4, #28]
 800b400:	60f0      	str	r0, [r6, #12]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e4      	bne.n	800b3d2 <_Balloc+0x2e>
 800b408:	2000      	movs	r0, #0
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	6802      	ldr	r2, [r0, #0]
 800b40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b412:	2300      	movs	r3, #0
 800b414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b418:	e7f7      	b.n	800b40a <_Balloc+0x66>
 800b41a:	bf00      	nop
 800b41c:	0800dbee 	.word	0x0800dbee
 800b420:	0800dc6e 	.word	0x0800dc6e

0800b424 <_Bfree>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	69c6      	ldr	r6, [r0, #28]
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	b976      	cbnz	r6, 800b44c <_Bfree+0x28>
 800b42e:	2010      	movs	r0, #16
 800b430:	f7ff ff02 	bl	800b238 <malloc>
 800b434:	4602      	mov	r2, r0
 800b436:	61e8      	str	r0, [r5, #28]
 800b438:	b920      	cbnz	r0, 800b444 <_Bfree+0x20>
 800b43a:	4b09      	ldr	r3, [pc, #36]	@ (800b460 <_Bfree+0x3c>)
 800b43c:	4809      	ldr	r0, [pc, #36]	@ (800b464 <_Bfree+0x40>)
 800b43e:	218f      	movs	r1, #143	@ 0x8f
 800b440:	f001 fce6 	bl	800ce10 <__assert_func>
 800b444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b448:	6006      	str	r6, [r0, #0]
 800b44a:	60c6      	str	r6, [r0, #12]
 800b44c:	b13c      	cbz	r4, 800b45e <_Bfree+0x3a>
 800b44e:	69eb      	ldr	r3, [r5, #28]
 800b450:	6862      	ldr	r2, [r4, #4]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b458:	6021      	str	r1, [r4, #0]
 800b45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b45e:	bd70      	pop	{r4, r5, r6, pc}
 800b460:	0800dbee 	.word	0x0800dbee
 800b464:	0800dc6e 	.word	0x0800dc6e

0800b468 <__multadd>:
 800b468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46c:	690d      	ldr	r5, [r1, #16]
 800b46e:	4607      	mov	r7, r0
 800b470:	460c      	mov	r4, r1
 800b472:	461e      	mov	r6, r3
 800b474:	f101 0c14 	add.w	ip, r1, #20
 800b478:	2000      	movs	r0, #0
 800b47a:	f8dc 3000 	ldr.w	r3, [ip]
 800b47e:	b299      	uxth	r1, r3
 800b480:	fb02 6101 	mla	r1, r2, r1, r6
 800b484:	0c1e      	lsrs	r6, r3, #16
 800b486:	0c0b      	lsrs	r3, r1, #16
 800b488:	fb02 3306 	mla	r3, r2, r6, r3
 800b48c:	b289      	uxth	r1, r1
 800b48e:	3001      	adds	r0, #1
 800b490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b494:	4285      	cmp	r5, r0
 800b496:	f84c 1b04 	str.w	r1, [ip], #4
 800b49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b49e:	dcec      	bgt.n	800b47a <__multadd+0x12>
 800b4a0:	b30e      	cbz	r6, 800b4e6 <__multadd+0x7e>
 800b4a2:	68a3      	ldr	r3, [r4, #8]
 800b4a4:	42ab      	cmp	r3, r5
 800b4a6:	dc19      	bgt.n	800b4dc <__multadd+0x74>
 800b4a8:	6861      	ldr	r1, [r4, #4]
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	3101      	adds	r1, #1
 800b4ae:	f7ff ff79 	bl	800b3a4 <_Balloc>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	b928      	cbnz	r0, 800b4c2 <__multadd+0x5a>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b4ec <__multadd+0x84>)
 800b4ba:	480d      	ldr	r0, [pc, #52]	@ (800b4f0 <__multadd+0x88>)
 800b4bc:	21ba      	movs	r1, #186	@ 0xba
 800b4be:	f001 fca7 	bl	800ce10 <__assert_func>
 800b4c2:	6922      	ldr	r2, [r4, #16]
 800b4c4:	3202      	adds	r2, #2
 800b4c6:	f104 010c 	add.w	r1, r4, #12
 800b4ca:	0092      	lsls	r2, r2, #2
 800b4cc:	300c      	adds	r0, #12
 800b4ce:	f001 fc87 	bl	800cde0 <memcpy>
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	f7ff ffa5 	bl	800b424 <_Bfree>
 800b4da:	4644      	mov	r4, r8
 800b4dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4e0:	3501      	adds	r5, #1
 800b4e2:	615e      	str	r6, [r3, #20]
 800b4e4:	6125      	str	r5, [r4, #16]
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ec:	0800dc5d 	.word	0x0800dc5d
 800b4f0:	0800dc6e 	.word	0x0800dc6e

0800b4f4 <__s2b>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	4615      	mov	r5, r2
 800b4fc:	461f      	mov	r7, r3
 800b4fe:	2209      	movs	r2, #9
 800b500:	3308      	adds	r3, #8
 800b502:	4606      	mov	r6, r0
 800b504:	fb93 f3f2 	sdiv	r3, r3, r2
 800b508:	2100      	movs	r1, #0
 800b50a:	2201      	movs	r2, #1
 800b50c:	429a      	cmp	r2, r3
 800b50e:	db09      	blt.n	800b524 <__s2b+0x30>
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff ff47 	bl	800b3a4 <_Balloc>
 800b516:	b940      	cbnz	r0, 800b52a <__s2b+0x36>
 800b518:	4602      	mov	r2, r0
 800b51a:	4b19      	ldr	r3, [pc, #100]	@ (800b580 <__s2b+0x8c>)
 800b51c:	4819      	ldr	r0, [pc, #100]	@ (800b584 <__s2b+0x90>)
 800b51e:	21d3      	movs	r1, #211	@ 0xd3
 800b520:	f001 fc76 	bl	800ce10 <__assert_func>
 800b524:	0052      	lsls	r2, r2, #1
 800b526:	3101      	adds	r1, #1
 800b528:	e7f0      	b.n	800b50c <__s2b+0x18>
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	6143      	str	r3, [r0, #20]
 800b52e:	2d09      	cmp	r5, #9
 800b530:	f04f 0301 	mov.w	r3, #1
 800b534:	6103      	str	r3, [r0, #16]
 800b536:	dd16      	ble.n	800b566 <__s2b+0x72>
 800b538:	f104 0909 	add.w	r9, r4, #9
 800b53c:	46c8      	mov	r8, r9
 800b53e:	442c      	add	r4, r5
 800b540:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b544:	4601      	mov	r1, r0
 800b546:	3b30      	subs	r3, #48	@ 0x30
 800b548:	220a      	movs	r2, #10
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7ff ff8c 	bl	800b468 <__multadd>
 800b550:	45a0      	cmp	r8, r4
 800b552:	d1f5      	bne.n	800b540 <__s2b+0x4c>
 800b554:	f1a5 0408 	sub.w	r4, r5, #8
 800b558:	444c      	add	r4, r9
 800b55a:	1b2d      	subs	r5, r5, r4
 800b55c:	1963      	adds	r3, r4, r5
 800b55e:	42bb      	cmp	r3, r7
 800b560:	db04      	blt.n	800b56c <__s2b+0x78>
 800b562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b566:	340a      	adds	r4, #10
 800b568:	2509      	movs	r5, #9
 800b56a:	e7f6      	b.n	800b55a <__s2b+0x66>
 800b56c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b570:	4601      	mov	r1, r0
 800b572:	3b30      	subs	r3, #48	@ 0x30
 800b574:	220a      	movs	r2, #10
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff ff76 	bl	800b468 <__multadd>
 800b57c:	e7ee      	b.n	800b55c <__s2b+0x68>
 800b57e:	bf00      	nop
 800b580:	0800dc5d 	.word	0x0800dc5d
 800b584:	0800dc6e 	.word	0x0800dc6e

0800b588 <__hi0bits>:
 800b588:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b58c:	4603      	mov	r3, r0
 800b58e:	bf36      	itet	cc
 800b590:	0403      	lslcc	r3, r0, #16
 800b592:	2000      	movcs	r0, #0
 800b594:	2010      	movcc	r0, #16
 800b596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b59a:	bf3c      	itt	cc
 800b59c:	021b      	lslcc	r3, r3, #8
 800b59e:	3008      	addcc	r0, #8
 800b5a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5a4:	bf3c      	itt	cc
 800b5a6:	011b      	lslcc	r3, r3, #4
 800b5a8:	3004      	addcc	r0, #4
 800b5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ae:	bf3c      	itt	cc
 800b5b0:	009b      	lslcc	r3, r3, #2
 800b5b2:	3002      	addcc	r0, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	db05      	blt.n	800b5c4 <__hi0bits+0x3c>
 800b5b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5bc:	f100 0001 	add.w	r0, r0, #1
 800b5c0:	bf08      	it	eq
 800b5c2:	2020      	moveq	r0, #32
 800b5c4:	4770      	bx	lr

0800b5c6 <__lo0bits>:
 800b5c6:	6803      	ldr	r3, [r0, #0]
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	f013 0007 	ands.w	r0, r3, #7
 800b5ce:	d00b      	beq.n	800b5e8 <__lo0bits+0x22>
 800b5d0:	07d9      	lsls	r1, r3, #31
 800b5d2:	d421      	bmi.n	800b618 <__lo0bits+0x52>
 800b5d4:	0798      	lsls	r0, r3, #30
 800b5d6:	bf49      	itett	mi
 800b5d8:	085b      	lsrmi	r3, r3, #1
 800b5da:	089b      	lsrpl	r3, r3, #2
 800b5dc:	2001      	movmi	r0, #1
 800b5de:	6013      	strmi	r3, [r2, #0]
 800b5e0:	bf5c      	itt	pl
 800b5e2:	6013      	strpl	r3, [r2, #0]
 800b5e4:	2002      	movpl	r0, #2
 800b5e6:	4770      	bx	lr
 800b5e8:	b299      	uxth	r1, r3
 800b5ea:	b909      	cbnz	r1, 800b5f0 <__lo0bits+0x2a>
 800b5ec:	0c1b      	lsrs	r3, r3, #16
 800b5ee:	2010      	movs	r0, #16
 800b5f0:	b2d9      	uxtb	r1, r3
 800b5f2:	b909      	cbnz	r1, 800b5f8 <__lo0bits+0x32>
 800b5f4:	3008      	adds	r0, #8
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	0719      	lsls	r1, r3, #28
 800b5fa:	bf04      	itt	eq
 800b5fc:	091b      	lsreq	r3, r3, #4
 800b5fe:	3004      	addeq	r0, #4
 800b600:	0799      	lsls	r1, r3, #30
 800b602:	bf04      	itt	eq
 800b604:	089b      	lsreq	r3, r3, #2
 800b606:	3002      	addeq	r0, #2
 800b608:	07d9      	lsls	r1, r3, #31
 800b60a:	d403      	bmi.n	800b614 <__lo0bits+0x4e>
 800b60c:	085b      	lsrs	r3, r3, #1
 800b60e:	f100 0001 	add.w	r0, r0, #1
 800b612:	d003      	beq.n	800b61c <__lo0bits+0x56>
 800b614:	6013      	str	r3, [r2, #0]
 800b616:	4770      	bx	lr
 800b618:	2000      	movs	r0, #0
 800b61a:	4770      	bx	lr
 800b61c:	2020      	movs	r0, #32
 800b61e:	4770      	bx	lr

0800b620 <__i2b>:
 800b620:	b510      	push	{r4, lr}
 800b622:	460c      	mov	r4, r1
 800b624:	2101      	movs	r1, #1
 800b626:	f7ff febd 	bl	800b3a4 <_Balloc>
 800b62a:	4602      	mov	r2, r0
 800b62c:	b928      	cbnz	r0, 800b63a <__i2b+0x1a>
 800b62e:	4b05      	ldr	r3, [pc, #20]	@ (800b644 <__i2b+0x24>)
 800b630:	4805      	ldr	r0, [pc, #20]	@ (800b648 <__i2b+0x28>)
 800b632:	f240 1145 	movw	r1, #325	@ 0x145
 800b636:	f001 fbeb 	bl	800ce10 <__assert_func>
 800b63a:	2301      	movs	r3, #1
 800b63c:	6144      	str	r4, [r0, #20]
 800b63e:	6103      	str	r3, [r0, #16]
 800b640:	bd10      	pop	{r4, pc}
 800b642:	bf00      	nop
 800b644:	0800dc5d 	.word	0x0800dc5d
 800b648:	0800dc6e 	.word	0x0800dc6e

0800b64c <__multiply>:
 800b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	4617      	mov	r7, r2
 800b652:	690a      	ldr	r2, [r1, #16]
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	429a      	cmp	r2, r3
 800b658:	bfa8      	it	ge
 800b65a:	463b      	movge	r3, r7
 800b65c:	4689      	mov	r9, r1
 800b65e:	bfa4      	itt	ge
 800b660:	460f      	movge	r7, r1
 800b662:	4699      	movge	r9, r3
 800b664:	693d      	ldr	r5, [r7, #16]
 800b666:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	eb05 060a 	add.w	r6, r5, sl
 800b672:	42b3      	cmp	r3, r6
 800b674:	b085      	sub	sp, #20
 800b676:	bfb8      	it	lt
 800b678:	3101      	addlt	r1, #1
 800b67a:	f7ff fe93 	bl	800b3a4 <_Balloc>
 800b67e:	b930      	cbnz	r0, 800b68e <__multiply+0x42>
 800b680:	4602      	mov	r2, r0
 800b682:	4b41      	ldr	r3, [pc, #260]	@ (800b788 <__multiply+0x13c>)
 800b684:	4841      	ldr	r0, [pc, #260]	@ (800b78c <__multiply+0x140>)
 800b686:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b68a:	f001 fbc1 	bl	800ce10 <__assert_func>
 800b68e:	f100 0414 	add.w	r4, r0, #20
 800b692:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b696:	4623      	mov	r3, r4
 800b698:	2200      	movs	r2, #0
 800b69a:	4573      	cmp	r3, lr
 800b69c:	d320      	bcc.n	800b6e0 <__multiply+0x94>
 800b69e:	f107 0814 	add.w	r8, r7, #20
 800b6a2:	f109 0114 	add.w	r1, r9, #20
 800b6a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	1beb      	subs	r3, r5, r7
 800b6b2:	3b15      	subs	r3, #21
 800b6b4:	f023 0303 	bic.w	r3, r3, #3
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	3715      	adds	r7, #21
 800b6bc:	42bd      	cmp	r5, r7
 800b6be:	bf38      	it	cc
 800b6c0:	2304      	movcc	r3, #4
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	9103      	str	r1, [sp, #12]
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	d80c      	bhi.n	800b6e6 <__multiply+0x9a>
 800b6cc:	2e00      	cmp	r6, #0
 800b6ce:	dd03      	ble.n	800b6d8 <__multiply+0x8c>
 800b6d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d055      	beq.n	800b784 <__multiply+0x138>
 800b6d8:	6106      	str	r6, [r0, #16]
 800b6da:	b005      	add	sp, #20
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e0:	f843 2b04 	str.w	r2, [r3], #4
 800b6e4:	e7d9      	b.n	800b69a <__multiply+0x4e>
 800b6e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6ea:	f1ba 0f00 	cmp.w	sl, #0
 800b6ee:	d01f      	beq.n	800b730 <__multiply+0xe4>
 800b6f0:	46c4      	mov	ip, r8
 800b6f2:	46a1      	mov	r9, r4
 800b6f4:	2700      	movs	r7, #0
 800b6f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6fa:	f8d9 3000 	ldr.w	r3, [r9]
 800b6fe:	fa1f fb82 	uxth.w	fp, r2
 800b702:	b29b      	uxth	r3, r3
 800b704:	fb0a 330b 	mla	r3, sl, fp, r3
 800b708:	443b      	add	r3, r7
 800b70a:	f8d9 7000 	ldr.w	r7, [r9]
 800b70e:	0c12      	lsrs	r2, r2, #16
 800b710:	0c3f      	lsrs	r7, r7, #16
 800b712:	fb0a 7202 	mla	r2, sl, r2, r7
 800b716:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b720:	4565      	cmp	r5, ip
 800b722:	f849 3b04 	str.w	r3, [r9], #4
 800b726:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b72a:	d8e4      	bhi.n	800b6f6 <__multiply+0xaa>
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	50e7      	str	r7, [r4, r3]
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b736:	3104      	adds	r1, #4
 800b738:	f1b9 0f00 	cmp.w	r9, #0
 800b73c:	d020      	beq.n	800b780 <__multiply+0x134>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	4647      	mov	r7, r8
 800b742:	46a4      	mov	ip, r4
 800b744:	f04f 0a00 	mov.w	sl, #0
 800b748:	f8b7 b000 	ldrh.w	fp, [r7]
 800b74c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b750:	fb09 220b 	mla	r2, r9, fp, r2
 800b754:	4452      	add	r2, sl
 800b756:	b29b      	uxth	r3, r3
 800b758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b75c:	f84c 3b04 	str.w	r3, [ip], #4
 800b760:	f857 3b04 	ldr.w	r3, [r7], #4
 800b764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b768:	f8bc 3000 	ldrh.w	r3, [ip]
 800b76c:	fb09 330a 	mla	r3, r9, sl, r3
 800b770:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b774:	42bd      	cmp	r5, r7
 800b776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b77a:	d8e5      	bhi.n	800b748 <__multiply+0xfc>
 800b77c:	9a01      	ldr	r2, [sp, #4]
 800b77e:	50a3      	str	r3, [r4, r2]
 800b780:	3404      	adds	r4, #4
 800b782:	e79f      	b.n	800b6c4 <__multiply+0x78>
 800b784:	3e01      	subs	r6, #1
 800b786:	e7a1      	b.n	800b6cc <__multiply+0x80>
 800b788:	0800dc5d 	.word	0x0800dc5d
 800b78c:	0800dc6e 	.word	0x0800dc6e

0800b790 <__pow5mult>:
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b794:	4615      	mov	r5, r2
 800b796:	f012 0203 	ands.w	r2, r2, #3
 800b79a:	4607      	mov	r7, r0
 800b79c:	460e      	mov	r6, r1
 800b79e:	d007      	beq.n	800b7b0 <__pow5mult+0x20>
 800b7a0:	4c25      	ldr	r4, [pc, #148]	@ (800b838 <__pow5mult+0xa8>)
 800b7a2:	3a01      	subs	r2, #1
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7aa:	f7ff fe5d 	bl	800b468 <__multadd>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	10ad      	asrs	r5, r5, #2
 800b7b2:	d03d      	beq.n	800b830 <__pow5mult+0xa0>
 800b7b4:	69fc      	ldr	r4, [r7, #28]
 800b7b6:	b97c      	cbnz	r4, 800b7d8 <__pow5mult+0x48>
 800b7b8:	2010      	movs	r0, #16
 800b7ba:	f7ff fd3d 	bl	800b238 <malloc>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	61f8      	str	r0, [r7, #28]
 800b7c2:	b928      	cbnz	r0, 800b7d0 <__pow5mult+0x40>
 800b7c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b83c <__pow5mult+0xac>)
 800b7c6:	481e      	ldr	r0, [pc, #120]	@ (800b840 <__pow5mult+0xb0>)
 800b7c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7cc:	f001 fb20 	bl	800ce10 <__assert_func>
 800b7d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7d4:	6004      	str	r4, [r0, #0]
 800b7d6:	60c4      	str	r4, [r0, #12]
 800b7d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7e0:	b94c      	cbnz	r4, 800b7f6 <__pow5mult+0x66>
 800b7e2:	f240 2171 	movw	r1, #625	@ 0x271
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	f7ff ff1a 	bl	800b620 <__i2b>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	6003      	str	r3, [r0, #0]
 800b7f6:	f04f 0900 	mov.w	r9, #0
 800b7fa:	07eb      	lsls	r3, r5, #31
 800b7fc:	d50a      	bpl.n	800b814 <__pow5mult+0x84>
 800b7fe:	4631      	mov	r1, r6
 800b800:	4622      	mov	r2, r4
 800b802:	4638      	mov	r0, r7
 800b804:	f7ff ff22 	bl	800b64c <__multiply>
 800b808:	4631      	mov	r1, r6
 800b80a:	4680      	mov	r8, r0
 800b80c:	4638      	mov	r0, r7
 800b80e:	f7ff fe09 	bl	800b424 <_Bfree>
 800b812:	4646      	mov	r6, r8
 800b814:	106d      	asrs	r5, r5, #1
 800b816:	d00b      	beq.n	800b830 <__pow5mult+0xa0>
 800b818:	6820      	ldr	r0, [r4, #0]
 800b81a:	b938      	cbnz	r0, 800b82c <__pow5mult+0x9c>
 800b81c:	4622      	mov	r2, r4
 800b81e:	4621      	mov	r1, r4
 800b820:	4638      	mov	r0, r7
 800b822:	f7ff ff13 	bl	800b64c <__multiply>
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	f8c0 9000 	str.w	r9, [r0]
 800b82c:	4604      	mov	r4, r0
 800b82e:	e7e4      	b.n	800b7fa <__pow5mult+0x6a>
 800b830:	4630      	mov	r0, r6
 800b832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b836:	bf00      	nop
 800b838:	0800dd80 	.word	0x0800dd80
 800b83c:	0800dbee 	.word	0x0800dbee
 800b840:	0800dc6e 	.word	0x0800dc6e

0800b844 <__lshift>:
 800b844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	460c      	mov	r4, r1
 800b84a:	6849      	ldr	r1, [r1, #4]
 800b84c:	6923      	ldr	r3, [r4, #16]
 800b84e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	4607      	mov	r7, r0
 800b856:	4691      	mov	r9, r2
 800b858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b85c:	f108 0601 	add.w	r6, r8, #1
 800b860:	42b3      	cmp	r3, r6
 800b862:	db0b      	blt.n	800b87c <__lshift+0x38>
 800b864:	4638      	mov	r0, r7
 800b866:	f7ff fd9d 	bl	800b3a4 <_Balloc>
 800b86a:	4605      	mov	r5, r0
 800b86c:	b948      	cbnz	r0, 800b882 <__lshift+0x3e>
 800b86e:	4602      	mov	r2, r0
 800b870:	4b28      	ldr	r3, [pc, #160]	@ (800b914 <__lshift+0xd0>)
 800b872:	4829      	ldr	r0, [pc, #164]	@ (800b918 <__lshift+0xd4>)
 800b874:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b878:	f001 faca 	bl	800ce10 <__assert_func>
 800b87c:	3101      	adds	r1, #1
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	e7ee      	b.n	800b860 <__lshift+0x1c>
 800b882:	2300      	movs	r3, #0
 800b884:	f100 0114 	add.w	r1, r0, #20
 800b888:	f100 0210 	add.w	r2, r0, #16
 800b88c:	4618      	mov	r0, r3
 800b88e:	4553      	cmp	r3, sl
 800b890:	db33      	blt.n	800b8fa <__lshift+0xb6>
 800b892:	6920      	ldr	r0, [r4, #16]
 800b894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b898:	f104 0314 	add.w	r3, r4, #20
 800b89c:	f019 091f 	ands.w	r9, r9, #31
 800b8a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8a8:	d02b      	beq.n	800b902 <__lshift+0xbe>
 800b8aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ae:	468a      	mov	sl, r1
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8b8:	4310      	orrs	r0, r2
 800b8ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8c2:	459c      	cmp	ip, r3
 800b8c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8c8:	d8f3      	bhi.n	800b8b2 <__lshift+0x6e>
 800b8ca:	ebac 0304 	sub.w	r3, ip, r4
 800b8ce:	3b15      	subs	r3, #21
 800b8d0:	f023 0303 	bic.w	r3, r3, #3
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	f104 0015 	add.w	r0, r4, #21
 800b8da:	4560      	cmp	r0, ip
 800b8dc:	bf88      	it	hi
 800b8de:	2304      	movhi	r3, #4
 800b8e0:	50ca      	str	r2, [r1, r3]
 800b8e2:	b10a      	cbz	r2, 800b8e8 <__lshift+0xa4>
 800b8e4:	f108 0602 	add.w	r6, r8, #2
 800b8e8:	3e01      	subs	r6, #1
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	612e      	str	r6, [r5, #16]
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	f7ff fd98 	bl	800b424 <_Bfree>
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8fe:	3301      	adds	r3, #1
 800b900:	e7c5      	b.n	800b88e <__lshift+0x4a>
 800b902:	3904      	subs	r1, #4
 800b904:	f853 2b04 	ldr.w	r2, [r3], #4
 800b908:	f841 2f04 	str.w	r2, [r1, #4]!
 800b90c:	459c      	cmp	ip, r3
 800b90e:	d8f9      	bhi.n	800b904 <__lshift+0xc0>
 800b910:	e7ea      	b.n	800b8e8 <__lshift+0xa4>
 800b912:	bf00      	nop
 800b914:	0800dc5d 	.word	0x0800dc5d
 800b918:	0800dc6e 	.word	0x0800dc6e

0800b91c <__mcmp>:
 800b91c:	690a      	ldr	r2, [r1, #16]
 800b91e:	4603      	mov	r3, r0
 800b920:	6900      	ldr	r0, [r0, #16]
 800b922:	1a80      	subs	r0, r0, r2
 800b924:	b530      	push	{r4, r5, lr}
 800b926:	d10e      	bne.n	800b946 <__mcmp+0x2a>
 800b928:	3314      	adds	r3, #20
 800b92a:	3114      	adds	r1, #20
 800b92c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b930:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b934:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b938:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b93c:	4295      	cmp	r5, r2
 800b93e:	d003      	beq.n	800b948 <__mcmp+0x2c>
 800b940:	d205      	bcs.n	800b94e <__mcmp+0x32>
 800b942:	f04f 30ff 	mov.w	r0, #4294967295
 800b946:	bd30      	pop	{r4, r5, pc}
 800b948:	42a3      	cmp	r3, r4
 800b94a:	d3f3      	bcc.n	800b934 <__mcmp+0x18>
 800b94c:	e7fb      	b.n	800b946 <__mcmp+0x2a>
 800b94e:	2001      	movs	r0, #1
 800b950:	e7f9      	b.n	800b946 <__mcmp+0x2a>
	...

0800b954 <__mdiff>:
 800b954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	4689      	mov	r9, r1
 800b95a:	4606      	mov	r6, r0
 800b95c:	4611      	mov	r1, r2
 800b95e:	4648      	mov	r0, r9
 800b960:	4614      	mov	r4, r2
 800b962:	f7ff ffdb 	bl	800b91c <__mcmp>
 800b966:	1e05      	subs	r5, r0, #0
 800b968:	d112      	bne.n	800b990 <__mdiff+0x3c>
 800b96a:	4629      	mov	r1, r5
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff fd19 	bl	800b3a4 <_Balloc>
 800b972:	4602      	mov	r2, r0
 800b974:	b928      	cbnz	r0, 800b982 <__mdiff+0x2e>
 800b976:	4b3f      	ldr	r3, [pc, #252]	@ (800ba74 <__mdiff+0x120>)
 800b978:	f240 2137 	movw	r1, #567	@ 0x237
 800b97c:	483e      	ldr	r0, [pc, #248]	@ (800ba78 <__mdiff+0x124>)
 800b97e:	f001 fa47 	bl	800ce10 <__assert_func>
 800b982:	2301      	movs	r3, #1
 800b984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b988:	4610      	mov	r0, r2
 800b98a:	b003      	add	sp, #12
 800b98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b990:	bfbc      	itt	lt
 800b992:	464b      	movlt	r3, r9
 800b994:	46a1      	movlt	r9, r4
 800b996:	4630      	mov	r0, r6
 800b998:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b99c:	bfba      	itte	lt
 800b99e:	461c      	movlt	r4, r3
 800b9a0:	2501      	movlt	r5, #1
 800b9a2:	2500      	movge	r5, #0
 800b9a4:	f7ff fcfe 	bl	800b3a4 <_Balloc>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	b918      	cbnz	r0, 800b9b4 <__mdiff+0x60>
 800b9ac:	4b31      	ldr	r3, [pc, #196]	@ (800ba74 <__mdiff+0x120>)
 800b9ae:	f240 2145 	movw	r1, #581	@ 0x245
 800b9b2:	e7e3      	b.n	800b97c <__mdiff+0x28>
 800b9b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9b8:	6926      	ldr	r6, [r4, #16]
 800b9ba:	60c5      	str	r5, [r0, #12]
 800b9bc:	f109 0310 	add.w	r3, r9, #16
 800b9c0:	f109 0514 	add.w	r5, r9, #20
 800b9c4:	f104 0e14 	add.w	lr, r4, #20
 800b9c8:	f100 0b14 	add.w	fp, r0, #20
 800b9cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	46d9      	mov	r9, fp
 800b9d8:	f04f 0c00 	mov.w	ip, #0
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	fa1f f38a 	uxth.w	r3, sl
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	b283      	uxth	r3, r0
 800b9f0:	1acb      	subs	r3, r1, r3
 800b9f2:	0c00      	lsrs	r0, r0, #16
 800b9f4:	4463      	add	r3, ip
 800b9f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba04:	4576      	cmp	r6, lr
 800ba06:	f849 3b04 	str.w	r3, [r9], #4
 800ba0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba0e:	d8e5      	bhi.n	800b9dc <__mdiff+0x88>
 800ba10:	1b33      	subs	r3, r6, r4
 800ba12:	3b15      	subs	r3, #21
 800ba14:	f023 0303 	bic.w	r3, r3, #3
 800ba18:	3415      	adds	r4, #21
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	42a6      	cmp	r6, r4
 800ba1e:	bf38      	it	cc
 800ba20:	2304      	movcc	r3, #4
 800ba22:	441d      	add	r5, r3
 800ba24:	445b      	add	r3, fp
 800ba26:	461e      	mov	r6, r3
 800ba28:	462c      	mov	r4, r5
 800ba2a:	4544      	cmp	r4, r8
 800ba2c:	d30e      	bcc.n	800ba4c <__mdiff+0xf8>
 800ba2e:	f108 0103 	add.w	r1, r8, #3
 800ba32:	1b49      	subs	r1, r1, r5
 800ba34:	f021 0103 	bic.w	r1, r1, #3
 800ba38:	3d03      	subs	r5, #3
 800ba3a:	45a8      	cmp	r8, r5
 800ba3c:	bf38      	it	cc
 800ba3e:	2100      	movcc	r1, #0
 800ba40:	440b      	add	r3, r1
 800ba42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba46:	b191      	cbz	r1, 800ba6e <__mdiff+0x11a>
 800ba48:	6117      	str	r7, [r2, #16]
 800ba4a:	e79d      	b.n	800b988 <__mdiff+0x34>
 800ba4c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba50:	46e6      	mov	lr, ip
 800ba52:	0c08      	lsrs	r0, r1, #16
 800ba54:	fa1c fc81 	uxtah	ip, ip, r1
 800ba58:	4471      	add	r1, lr
 800ba5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba5e:	b289      	uxth	r1, r1
 800ba60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba64:	f846 1b04 	str.w	r1, [r6], #4
 800ba68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba6c:	e7dd      	b.n	800ba2a <__mdiff+0xd6>
 800ba6e:	3f01      	subs	r7, #1
 800ba70:	e7e7      	b.n	800ba42 <__mdiff+0xee>
 800ba72:	bf00      	nop
 800ba74:	0800dc5d 	.word	0x0800dc5d
 800ba78:	0800dc6e 	.word	0x0800dc6e

0800ba7c <__ulp>:
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	ed8d 0b00 	vstr	d0, [sp]
 800ba82:	9a01      	ldr	r2, [sp, #4]
 800ba84:	4b0f      	ldr	r3, [pc, #60]	@ (800bac4 <__ulp+0x48>)
 800ba86:	4013      	ands	r3, r2
 800ba88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dc08      	bgt.n	800baa2 <__ulp+0x26>
 800ba90:	425b      	negs	r3, r3
 800ba92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ba96:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba9a:	da04      	bge.n	800baa6 <__ulp+0x2a>
 800ba9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800baa0:	4113      	asrs	r3, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	e008      	b.n	800bab8 <__ulp+0x3c>
 800baa6:	f1a2 0314 	sub.w	r3, r2, #20
 800baaa:	2b1e      	cmp	r3, #30
 800baac:	bfda      	itte	le
 800baae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bab2:	40da      	lsrle	r2, r3
 800bab4:	2201      	movgt	r2, #1
 800bab6:	2300      	movs	r3, #0
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	ec41 0b10 	vmov	d0, r0, r1
 800bac0:	b002      	add	sp, #8
 800bac2:	4770      	bx	lr
 800bac4:	7ff00000 	.word	0x7ff00000

0800bac8 <__b2d>:
 800bac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bacc:	6906      	ldr	r6, [r0, #16]
 800bace:	f100 0814 	add.w	r8, r0, #20
 800bad2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bad6:	1f37      	subs	r7, r6, #4
 800bad8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800badc:	4610      	mov	r0, r2
 800bade:	f7ff fd53 	bl	800b588 <__hi0bits>
 800bae2:	f1c0 0320 	rsb	r3, r0, #32
 800bae6:	280a      	cmp	r0, #10
 800bae8:	600b      	str	r3, [r1, #0]
 800baea:	491b      	ldr	r1, [pc, #108]	@ (800bb58 <__b2d+0x90>)
 800baec:	dc15      	bgt.n	800bb1a <__b2d+0x52>
 800baee:	f1c0 0c0b 	rsb	ip, r0, #11
 800baf2:	fa22 f30c 	lsr.w	r3, r2, ip
 800baf6:	45b8      	cmp	r8, r7
 800baf8:	ea43 0501 	orr.w	r5, r3, r1
 800bafc:	bf34      	ite	cc
 800bafe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb02:	2300      	movcs	r3, #0
 800bb04:	3015      	adds	r0, #21
 800bb06:	fa02 f000 	lsl.w	r0, r2, r0
 800bb0a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb0e:	4303      	orrs	r3, r0
 800bb10:	461c      	mov	r4, r3
 800bb12:	ec45 4b10 	vmov	d0, r4, r5
 800bb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1a:	45b8      	cmp	r8, r7
 800bb1c:	bf3a      	itte	cc
 800bb1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb22:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb26:	2300      	movcs	r3, #0
 800bb28:	380b      	subs	r0, #11
 800bb2a:	d012      	beq.n	800bb52 <__b2d+0x8a>
 800bb2c:	f1c0 0120 	rsb	r1, r0, #32
 800bb30:	fa23 f401 	lsr.w	r4, r3, r1
 800bb34:	4082      	lsls	r2, r0
 800bb36:	4322      	orrs	r2, r4
 800bb38:	4547      	cmp	r7, r8
 800bb3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb3e:	bf8c      	ite	hi
 800bb40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb44:	2200      	movls	r2, #0
 800bb46:	4083      	lsls	r3, r0
 800bb48:	40ca      	lsrs	r2, r1
 800bb4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	e7de      	b.n	800bb10 <__b2d+0x48>
 800bb52:	ea42 0501 	orr.w	r5, r2, r1
 800bb56:	e7db      	b.n	800bb10 <__b2d+0x48>
 800bb58:	3ff00000 	.word	0x3ff00000

0800bb5c <__d2b>:
 800bb5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb60:	460f      	mov	r7, r1
 800bb62:	2101      	movs	r1, #1
 800bb64:	ec59 8b10 	vmov	r8, r9, d0
 800bb68:	4616      	mov	r6, r2
 800bb6a:	f7ff fc1b 	bl	800b3a4 <_Balloc>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	b930      	cbnz	r0, 800bb80 <__d2b+0x24>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4b23      	ldr	r3, [pc, #140]	@ (800bc04 <__d2b+0xa8>)
 800bb76:	4824      	ldr	r0, [pc, #144]	@ (800bc08 <__d2b+0xac>)
 800bb78:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb7c:	f001 f948 	bl	800ce10 <__assert_func>
 800bb80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb88:	b10d      	cbz	r5, 800bb8e <__d2b+0x32>
 800bb8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	f1b8 0300 	subs.w	r3, r8, #0
 800bb94:	d023      	beq.n	800bbde <__d2b+0x82>
 800bb96:	4668      	mov	r0, sp
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	f7ff fd14 	bl	800b5c6 <__lo0bits>
 800bb9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bba2:	b1d0      	cbz	r0, 800bbda <__d2b+0x7e>
 800bba4:	f1c0 0320 	rsb	r3, r0, #32
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	430b      	orrs	r3, r1
 800bbae:	40c2      	lsrs	r2, r0
 800bbb0:	6163      	str	r3, [r4, #20]
 800bbb2:	9201      	str	r2, [sp, #4]
 800bbb4:	9b01      	ldr	r3, [sp, #4]
 800bbb6:	61a3      	str	r3, [r4, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bf0c      	ite	eq
 800bbbc:	2201      	moveq	r2, #1
 800bbbe:	2202      	movne	r2, #2
 800bbc0:	6122      	str	r2, [r4, #16]
 800bbc2:	b1a5      	cbz	r5, 800bbee <__d2b+0x92>
 800bbc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbc8:	4405      	add	r5, r0
 800bbca:	603d      	str	r5, [r7, #0]
 800bbcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	b003      	add	sp, #12
 800bbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbda:	6161      	str	r1, [r4, #20]
 800bbdc:	e7ea      	b.n	800bbb4 <__d2b+0x58>
 800bbde:	a801      	add	r0, sp, #4
 800bbe0:	f7ff fcf1 	bl	800b5c6 <__lo0bits>
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	6163      	str	r3, [r4, #20]
 800bbe8:	3020      	adds	r0, #32
 800bbea:	2201      	movs	r2, #1
 800bbec:	e7e8      	b.n	800bbc0 <__d2b+0x64>
 800bbee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbf6:	6038      	str	r0, [r7, #0]
 800bbf8:	6918      	ldr	r0, [r3, #16]
 800bbfa:	f7ff fcc5 	bl	800b588 <__hi0bits>
 800bbfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc02:	e7e5      	b.n	800bbd0 <__d2b+0x74>
 800bc04:	0800dc5d 	.word	0x0800dc5d
 800bc08:	0800dc6e 	.word	0x0800dc6e

0800bc0c <__ratio>:
 800bc0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	4688      	mov	r8, r1
 800bc12:	4669      	mov	r1, sp
 800bc14:	4681      	mov	r9, r0
 800bc16:	f7ff ff57 	bl	800bac8 <__b2d>
 800bc1a:	a901      	add	r1, sp, #4
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	ec55 4b10 	vmov	r4, r5, d0
 800bc22:	f7ff ff51 	bl	800bac8 <__b2d>
 800bc26:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bc2a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bc2e:	1ad2      	subs	r2, r2, r3
 800bc30:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bc34:	1a5b      	subs	r3, r3, r1
 800bc36:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bc3a:	ec57 6b10 	vmov	r6, r7, d0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	bfd6      	itet	le
 800bc42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc46:	462a      	movgt	r2, r5
 800bc48:	463a      	movle	r2, r7
 800bc4a:	46ab      	mov	fp, r5
 800bc4c:	46a2      	mov	sl, r4
 800bc4e:	bfce      	itee	gt
 800bc50:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bc54:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bc58:	ee00 3a90 	vmovle	s1, r3
 800bc5c:	ec4b ab17 	vmov	d7, sl, fp
 800bc60:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bc64:	b003      	add	sp, #12
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc6a <__copybits>:
 800bc6a:	3901      	subs	r1, #1
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	1149      	asrs	r1, r1, #5
 800bc70:	6914      	ldr	r4, [r2, #16]
 800bc72:	3101      	adds	r1, #1
 800bc74:	f102 0314 	add.w	r3, r2, #20
 800bc78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc80:	1f05      	subs	r5, r0, #4
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	d30c      	bcc.n	800bca0 <__copybits+0x36>
 800bc86:	1aa3      	subs	r3, r4, r2
 800bc88:	3b11      	subs	r3, #17
 800bc8a:	f023 0303 	bic.w	r3, r3, #3
 800bc8e:	3211      	adds	r2, #17
 800bc90:	42a2      	cmp	r2, r4
 800bc92:	bf88      	it	hi
 800bc94:	2300      	movhi	r3, #0
 800bc96:	4418      	add	r0, r3
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4288      	cmp	r0, r1
 800bc9c:	d305      	bcc.n	800bcaa <__copybits+0x40>
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
 800bca0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bca4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bca8:	e7eb      	b.n	800bc82 <__copybits+0x18>
 800bcaa:	f840 3b04 	str.w	r3, [r0], #4
 800bcae:	e7f4      	b.n	800bc9a <__copybits+0x30>

0800bcb0 <__any_on>:
 800bcb0:	f100 0214 	add.w	r2, r0, #20
 800bcb4:	6900      	ldr	r0, [r0, #16]
 800bcb6:	114b      	asrs	r3, r1, #5
 800bcb8:	4298      	cmp	r0, r3
 800bcba:	b510      	push	{r4, lr}
 800bcbc:	db11      	blt.n	800bce2 <__any_on+0x32>
 800bcbe:	dd0a      	ble.n	800bcd6 <__any_on+0x26>
 800bcc0:	f011 011f 	ands.w	r1, r1, #31
 800bcc4:	d007      	beq.n	800bcd6 <__any_on+0x26>
 800bcc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcca:	fa24 f001 	lsr.w	r0, r4, r1
 800bcce:	fa00 f101 	lsl.w	r1, r0, r1
 800bcd2:	428c      	cmp	r4, r1
 800bcd4:	d10b      	bne.n	800bcee <__any_on+0x3e>
 800bcd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d803      	bhi.n	800bce6 <__any_on+0x36>
 800bcde:	2000      	movs	r0, #0
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	4603      	mov	r3, r0
 800bce4:	e7f7      	b.n	800bcd6 <__any_on+0x26>
 800bce6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcea:	2900      	cmp	r1, #0
 800bcec:	d0f5      	beq.n	800bcda <__any_on+0x2a>
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e7f6      	b.n	800bce0 <__any_on+0x30>

0800bcf2 <sulp>:
 800bcf2:	b570      	push	{r4, r5, r6, lr}
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	4616      	mov	r6, r2
 800bcfa:	ec45 4b10 	vmov	d0, r4, r5
 800bcfe:	f7ff febd 	bl	800ba7c <__ulp>
 800bd02:	b17e      	cbz	r6, 800bd24 <sulp+0x32>
 800bd04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dd09      	ble.n	800bd24 <sulp+0x32>
 800bd10:	051b      	lsls	r3, r3, #20
 800bd12:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800bd16:	2000      	movs	r0, #0
 800bd18:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800bd1c:	ec41 0b17 	vmov	d7, r0, r1
 800bd20:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd28 <_strtod_l>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	ed2d 8b0a 	vpush	{d8-d12}
 800bd30:	b097      	sub	sp, #92	@ 0x5c
 800bd32:	4688      	mov	r8, r1
 800bd34:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd36:	2200      	movs	r2, #0
 800bd38:	9212      	str	r2, [sp, #72]	@ 0x48
 800bd3a:	9005      	str	r0, [sp, #20]
 800bd3c:	f04f 0a00 	mov.w	sl, #0
 800bd40:	f04f 0b00 	mov.w	fp, #0
 800bd44:	460a      	mov	r2, r1
 800bd46:	9211      	str	r2, [sp, #68]	@ 0x44
 800bd48:	7811      	ldrb	r1, [r2, #0]
 800bd4a:	292b      	cmp	r1, #43	@ 0x2b
 800bd4c:	d04c      	beq.n	800bde8 <_strtod_l+0xc0>
 800bd4e:	d839      	bhi.n	800bdc4 <_strtod_l+0x9c>
 800bd50:	290d      	cmp	r1, #13
 800bd52:	d833      	bhi.n	800bdbc <_strtod_l+0x94>
 800bd54:	2908      	cmp	r1, #8
 800bd56:	d833      	bhi.n	800bdc0 <_strtod_l+0x98>
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	d03c      	beq.n	800bdd6 <_strtod_l+0xae>
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	9208      	str	r2, [sp, #32]
 800bd60:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800bd62:	782a      	ldrb	r2, [r5, #0]
 800bd64:	2a30      	cmp	r2, #48	@ 0x30
 800bd66:	f040 80b7 	bne.w	800bed8 <_strtod_l+0x1b0>
 800bd6a:	786a      	ldrb	r2, [r5, #1]
 800bd6c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd70:	2a58      	cmp	r2, #88	@ 0x58
 800bd72:	d170      	bne.n	800be56 <_strtod_l+0x12e>
 800bd74:	9302      	str	r3, [sp, #8]
 800bd76:	9b08      	ldr	r3, [sp, #32]
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	ab12      	add	r3, sp, #72	@ 0x48
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	4a90      	ldr	r2, [pc, #576]	@ (800bfc0 <_strtod_l+0x298>)
 800bd80:	9805      	ldr	r0, [sp, #20]
 800bd82:	ab13      	add	r3, sp, #76	@ 0x4c
 800bd84:	a911      	add	r1, sp, #68	@ 0x44
 800bd86:	f001 f8dd 	bl	800cf44 <__gethex>
 800bd8a:	f010 060f 	ands.w	r6, r0, #15
 800bd8e:	4604      	mov	r4, r0
 800bd90:	d005      	beq.n	800bd9e <_strtod_l+0x76>
 800bd92:	2e06      	cmp	r6, #6
 800bd94:	d12a      	bne.n	800bdec <_strtod_l+0xc4>
 800bd96:	3501      	adds	r5, #1
 800bd98:	2300      	movs	r3, #0
 800bd9a:	9511      	str	r5, [sp, #68]	@ 0x44
 800bd9c:	9308      	str	r3, [sp, #32]
 800bd9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 8537 	bne.w	800c814 <_strtod_l+0xaec>
 800bda6:	9b08      	ldr	r3, [sp, #32]
 800bda8:	ec4b ab10 	vmov	d0, sl, fp
 800bdac:	b1cb      	cbz	r3, 800bde2 <_strtod_l+0xba>
 800bdae:	eeb1 0b40 	vneg.f64	d0, d0
 800bdb2:	b017      	add	sp, #92	@ 0x5c
 800bdb4:	ecbd 8b0a 	vpop	{d8-d12}
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	2920      	cmp	r1, #32
 800bdbe:	d1cd      	bne.n	800bd5c <_strtod_l+0x34>
 800bdc0:	3201      	adds	r2, #1
 800bdc2:	e7c0      	b.n	800bd46 <_strtod_l+0x1e>
 800bdc4:	292d      	cmp	r1, #45	@ 0x2d
 800bdc6:	d1c9      	bne.n	800bd5c <_strtod_l+0x34>
 800bdc8:	2101      	movs	r1, #1
 800bdca:	9108      	str	r1, [sp, #32]
 800bdcc:	1c51      	adds	r1, r2, #1
 800bdce:	9111      	str	r1, [sp, #68]	@ 0x44
 800bdd0:	7852      	ldrb	r2, [r2, #1]
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	d1c4      	bne.n	800bd60 <_strtod_l+0x38>
 800bdd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 8517 	bne.w	800c810 <_strtod_l+0xae8>
 800bde2:	ec4b ab10 	vmov	d0, sl, fp
 800bde6:	e7e4      	b.n	800bdb2 <_strtod_l+0x8a>
 800bde8:	2100      	movs	r1, #0
 800bdea:	e7ee      	b.n	800bdca <_strtod_l+0xa2>
 800bdec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bdee:	b13a      	cbz	r2, 800be00 <_strtod_l+0xd8>
 800bdf0:	2135      	movs	r1, #53	@ 0x35
 800bdf2:	a814      	add	r0, sp, #80	@ 0x50
 800bdf4:	f7ff ff39 	bl	800bc6a <__copybits>
 800bdf8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bdfa:	9805      	ldr	r0, [sp, #20]
 800bdfc:	f7ff fb12 	bl	800b424 <_Bfree>
 800be00:	1e73      	subs	r3, r6, #1
 800be02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be04:	2b04      	cmp	r3, #4
 800be06:	d806      	bhi.n	800be16 <_strtod_l+0xee>
 800be08:	e8df f003 	tbb	[pc, r3]
 800be0c:	201d0314 	.word	0x201d0314
 800be10:	14          	.byte	0x14
 800be11:	00          	.byte	0x00
 800be12:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800be16:	05e3      	lsls	r3, r4, #23
 800be18:	bf48      	it	mi
 800be1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800be1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be22:	0d1b      	lsrs	r3, r3, #20
 800be24:	051b      	lsls	r3, r3, #20
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1b9      	bne.n	800bd9e <_strtod_l+0x76>
 800be2a:	f7fe fb9f 	bl	800a56c <__errno>
 800be2e:	2322      	movs	r3, #34	@ 0x22
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	e7b4      	b.n	800bd9e <_strtod_l+0x76>
 800be34:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800be38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800be40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be44:	e7e7      	b.n	800be16 <_strtod_l+0xee>
 800be46:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800bfc8 <_strtod_l+0x2a0>
 800be4a:	e7e4      	b.n	800be16 <_strtod_l+0xee>
 800be4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800be50:	f04f 3aff 	mov.w	sl, #4294967295
 800be54:	e7df      	b.n	800be16 <_strtod_l+0xee>
 800be56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	9211      	str	r2, [sp, #68]	@ 0x44
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b30      	cmp	r3, #48	@ 0x30
 800be60:	d0f9      	beq.n	800be56 <_strtod_l+0x12e>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d09b      	beq.n	800bd9e <_strtod_l+0x76>
 800be66:	2301      	movs	r3, #1
 800be68:	9307      	str	r3, [sp, #28]
 800be6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be6e:	2300      	movs	r3, #0
 800be70:	9306      	str	r3, [sp, #24]
 800be72:	4699      	mov	r9, r3
 800be74:	461d      	mov	r5, r3
 800be76:	220a      	movs	r2, #10
 800be78:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800be7a:	7804      	ldrb	r4, [r0, #0]
 800be7c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800be80:	b2d9      	uxtb	r1, r3
 800be82:	2909      	cmp	r1, #9
 800be84:	d92a      	bls.n	800bedc <_strtod_l+0x1b4>
 800be86:	494f      	ldr	r1, [pc, #316]	@ (800bfc4 <_strtod_l+0x29c>)
 800be88:	2201      	movs	r2, #1
 800be8a:	f000 ff87 	bl	800cd9c <strncmp>
 800be8e:	b398      	cbz	r0, 800bef8 <_strtod_l+0x1d0>
 800be90:	2000      	movs	r0, #0
 800be92:	4622      	mov	r2, r4
 800be94:	462b      	mov	r3, r5
 800be96:	4607      	mov	r7, r0
 800be98:	4601      	mov	r1, r0
 800be9a:	2a65      	cmp	r2, #101	@ 0x65
 800be9c:	d001      	beq.n	800bea2 <_strtod_l+0x17a>
 800be9e:	2a45      	cmp	r2, #69	@ 0x45
 800bea0:	d118      	bne.n	800bed4 <_strtod_l+0x1ac>
 800bea2:	b91b      	cbnz	r3, 800beac <_strtod_l+0x184>
 800bea4:	9b07      	ldr	r3, [sp, #28]
 800bea6:	4303      	orrs	r3, r0
 800bea8:	d095      	beq.n	800bdd6 <_strtod_l+0xae>
 800beaa:	2300      	movs	r3, #0
 800beac:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800beb0:	f108 0201 	add.w	r2, r8, #1
 800beb4:	9211      	str	r2, [sp, #68]	@ 0x44
 800beb6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800beba:	2a2b      	cmp	r2, #43	@ 0x2b
 800bebc:	d074      	beq.n	800bfa8 <_strtod_l+0x280>
 800bebe:	2a2d      	cmp	r2, #45	@ 0x2d
 800bec0:	d07a      	beq.n	800bfb8 <_strtod_l+0x290>
 800bec2:	f04f 0e00 	mov.w	lr, #0
 800bec6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800beca:	2c09      	cmp	r4, #9
 800becc:	f240 8082 	bls.w	800bfd4 <_strtod_l+0x2ac>
 800bed0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bed4:	2400      	movs	r4, #0
 800bed6:	e09d      	b.n	800c014 <_strtod_l+0x2ec>
 800bed8:	2300      	movs	r3, #0
 800beda:	e7c5      	b.n	800be68 <_strtod_l+0x140>
 800bedc:	2d08      	cmp	r5, #8
 800bede:	bfc8      	it	gt
 800bee0:	9906      	ldrgt	r1, [sp, #24]
 800bee2:	f100 0001 	add.w	r0, r0, #1
 800bee6:	bfca      	itet	gt
 800bee8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800beec:	fb02 3909 	mlale	r9, r2, r9, r3
 800bef0:	9306      	strgt	r3, [sp, #24]
 800bef2:	3501      	adds	r5, #1
 800bef4:	9011      	str	r0, [sp, #68]	@ 0x44
 800bef6:	e7bf      	b.n	800be78 <_strtod_l+0x150>
 800bef8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	9211      	str	r2, [sp, #68]	@ 0x44
 800befe:	785a      	ldrb	r2, [r3, #1]
 800bf00:	b3bd      	cbz	r5, 800bf72 <_strtod_l+0x24a>
 800bf02:	4607      	mov	r7, r0
 800bf04:	462b      	mov	r3, r5
 800bf06:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bf0a:	2909      	cmp	r1, #9
 800bf0c:	d912      	bls.n	800bf34 <_strtod_l+0x20c>
 800bf0e:	2101      	movs	r1, #1
 800bf10:	e7c3      	b.n	800be9a <_strtod_l+0x172>
 800bf12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf18:	785a      	ldrb	r2, [r3, #1]
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	2a30      	cmp	r2, #48	@ 0x30
 800bf1e:	d0f8      	beq.n	800bf12 <_strtod_l+0x1ea>
 800bf20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bf24:	2b08      	cmp	r3, #8
 800bf26:	f200 847a 	bhi.w	800c81e <_strtod_l+0xaf6>
 800bf2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf2e:	4607      	mov	r7, r0
 800bf30:	2000      	movs	r0, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	3a30      	subs	r2, #48	@ 0x30
 800bf36:	f100 0101 	add.w	r1, r0, #1
 800bf3a:	d014      	beq.n	800bf66 <_strtod_l+0x23e>
 800bf3c:	440f      	add	r7, r1
 800bf3e:	469c      	mov	ip, r3
 800bf40:	f04f 0e0a 	mov.w	lr, #10
 800bf44:	f10c 0401 	add.w	r4, ip, #1
 800bf48:	1ae6      	subs	r6, r4, r3
 800bf4a:	42b1      	cmp	r1, r6
 800bf4c:	dc13      	bgt.n	800bf76 <_strtod_l+0x24e>
 800bf4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bf52:	1819      	adds	r1, r3, r0
 800bf54:	2908      	cmp	r1, #8
 800bf56:	f103 0301 	add.w	r3, r3, #1
 800bf5a:	4403      	add	r3, r0
 800bf5c:	dc19      	bgt.n	800bf92 <_strtod_l+0x26a>
 800bf5e:	210a      	movs	r1, #10
 800bf60:	fb01 2909 	mla	r9, r1, r9, r2
 800bf64:	2100      	movs	r1, #0
 800bf66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf68:	1c50      	adds	r0, r2, #1
 800bf6a:	9011      	str	r0, [sp, #68]	@ 0x44
 800bf6c:	7852      	ldrb	r2, [r2, #1]
 800bf6e:	4608      	mov	r0, r1
 800bf70:	e7c9      	b.n	800bf06 <_strtod_l+0x1de>
 800bf72:	4628      	mov	r0, r5
 800bf74:	e7d2      	b.n	800bf1c <_strtod_l+0x1f4>
 800bf76:	f1bc 0f08 	cmp.w	ip, #8
 800bf7a:	dc03      	bgt.n	800bf84 <_strtod_l+0x25c>
 800bf7c:	fb0e f909 	mul.w	r9, lr, r9
 800bf80:	46a4      	mov	ip, r4
 800bf82:	e7df      	b.n	800bf44 <_strtod_l+0x21c>
 800bf84:	2c10      	cmp	r4, #16
 800bf86:	bfde      	ittt	le
 800bf88:	9e06      	ldrle	r6, [sp, #24]
 800bf8a:	fb0e f606 	mulle.w	r6, lr, r6
 800bf8e:	9606      	strle	r6, [sp, #24]
 800bf90:	e7f6      	b.n	800bf80 <_strtod_l+0x258>
 800bf92:	290f      	cmp	r1, #15
 800bf94:	bfdf      	itttt	le
 800bf96:	9806      	ldrle	r0, [sp, #24]
 800bf98:	210a      	movle	r1, #10
 800bf9a:	fb01 2200 	mlale	r2, r1, r0, r2
 800bf9e:	9206      	strle	r2, [sp, #24]
 800bfa0:	e7e0      	b.n	800bf64 <_strtod_l+0x23c>
 800bfa2:	2700      	movs	r7, #0
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	e77d      	b.n	800bea4 <_strtod_l+0x17c>
 800bfa8:	f04f 0e00 	mov.w	lr, #0
 800bfac:	f108 0202 	add.w	r2, r8, #2
 800bfb0:	9211      	str	r2, [sp, #68]	@ 0x44
 800bfb2:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bfb6:	e786      	b.n	800bec6 <_strtod_l+0x19e>
 800bfb8:	f04f 0e01 	mov.w	lr, #1
 800bfbc:	e7f6      	b.n	800bfac <_strtod_l+0x284>
 800bfbe:	bf00      	nop
 800bfc0:	0800de94 	.word	0x0800de94
 800bfc4:	0800dcc7 	.word	0x0800dcc7
 800bfc8:	7ff00000 	.word	0x7ff00000
 800bfcc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfce:	1c54      	adds	r4, r2, #1
 800bfd0:	9411      	str	r4, [sp, #68]	@ 0x44
 800bfd2:	7852      	ldrb	r2, [r2, #1]
 800bfd4:	2a30      	cmp	r2, #48	@ 0x30
 800bfd6:	d0f9      	beq.n	800bfcc <_strtod_l+0x2a4>
 800bfd8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800bfdc:	2c08      	cmp	r4, #8
 800bfde:	f63f af79 	bhi.w	800bed4 <_strtod_l+0x1ac>
 800bfe2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800bfe6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfe8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfec:	1c54      	adds	r4, r2, #1
 800bfee:	9411      	str	r4, [sp, #68]	@ 0x44
 800bff0:	7852      	ldrb	r2, [r2, #1]
 800bff2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800bff6:	2e09      	cmp	r6, #9
 800bff8:	d937      	bls.n	800c06a <_strtod_l+0x342>
 800bffa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bffc:	1ba4      	subs	r4, r4, r6
 800bffe:	2c08      	cmp	r4, #8
 800c000:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c004:	dc02      	bgt.n	800c00c <_strtod_l+0x2e4>
 800c006:	4564      	cmp	r4, ip
 800c008:	bfa8      	it	ge
 800c00a:	4664      	movge	r4, ip
 800c00c:	f1be 0f00 	cmp.w	lr, #0
 800c010:	d000      	beq.n	800c014 <_strtod_l+0x2ec>
 800c012:	4264      	negs	r4, r4
 800c014:	2b00      	cmp	r3, #0
 800c016:	d14d      	bne.n	800c0b4 <_strtod_l+0x38c>
 800c018:	9b07      	ldr	r3, [sp, #28]
 800c01a:	4318      	orrs	r0, r3
 800c01c:	f47f aebf 	bne.w	800bd9e <_strtod_l+0x76>
 800c020:	2900      	cmp	r1, #0
 800c022:	f47f aed8 	bne.w	800bdd6 <_strtod_l+0xae>
 800c026:	2a69      	cmp	r2, #105	@ 0x69
 800c028:	d027      	beq.n	800c07a <_strtod_l+0x352>
 800c02a:	dc24      	bgt.n	800c076 <_strtod_l+0x34e>
 800c02c:	2a49      	cmp	r2, #73	@ 0x49
 800c02e:	d024      	beq.n	800c07a <_strtod_l+0x352>
 800c030:	2a4e      	cmp	r2, #78	@ 0x4e
 800c032:	f47f aed0 	bne.w	800bdd6 <_strtod_l+0xae>
 800c036:	4997      	ldr	r1, [pc, #604]	@ (800c294 <_strtod_l+0x56c>)
 800c038:	a811      	add	r0, sp, #68	@ 0x44
 800c03a:	f001 f9a5 	bl	800d388 <__match>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f43f aec9 	beq.w	800bdd6 <_strtod_l+0xae>
 800c044:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b28      	cmp	r3, #40	@ 0x28
 800c04a:	d12d      	bne.n	800c0a8 <_strtod_l+0x380>
 800c04c:	4992      	ldr	r1, [pc, #584]	@ (800c298 <_strtod_l+0x570>)
 800c04e:	aa14      	add	r2, sp, #80	@ 0x50
 800c050:	a811      	add	r0, sp, #68	@ 0x44
 800c052:	f001 f9ad 	bl	800d3b0 <__hexnan>
 800c056:	2805      	cmp	r0, #5
 800c058:	d126      	bne.n	800c0a8 <_strtod_l+0x380>
 800c05a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c05c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c060:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c064:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c068:	e699      	b.n	800bd9e <_strtod_l+0x76>
 800c06a:	240a      	movs	r4, #10
 800c06c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c070:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c074:	e7b9      	b.n	800bfea <_strtod_l+0x2c2>
 800c076:	2a6e      	cmp	r2, #110	@ 0x6e
 800c078:	e7db      	b.n	800c032 <_strtod_l+0x30a>
 800c07a:	4988      	ldr	r1, [pc, #544]	@ (800c29c <_strtod_l+0x574>)
 800c07c:	a811      	add	r0, sp, #68	@ 0x44
 800c07e:	f001 f983 	bl	800d388 <__match>
 800c082:	2800      	cmp	r0, #0
 800c084:	f43f aea7 	beq.w	800bdd6 <_strtod_l+0xae>
 800c088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c08a:	4985      	ldr	r1, [pc, #532]	@ (800c2a0 <_strtod_l+0x578>)
 800c08c:	3b01      	subs	r3, #1
 800c08e:	a811      	add	r0, sp, #68	@ 0x44
 800c090:	9311      	str	r3, [sp, #68]	@ 0x44
 800c092:	f001 f979 	bl	800d388 <__match>
 800c096:	b910      	cbnz	r0, 800c09e <_strtod_l+0x376>
 800c098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c09a:	3301      	adds	r3, #1
 800c09c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c09e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c2b4 <_strtod_l+0x58c>
 800c0a2:	f04f 0a00 	mov.w	sl, #0
 800c0a6:	e67a      	b.n	800bd9e <_strtod_l+0x76>
 800c0a8:	487e      	ldr	r0, [pc, #504]	@ (800c2a4 <_strtod_l+0x57c>)
 800c0aa:	f000 fea9 	bl	800ce00 <nan>
 800c0ae:	ec5b ab10 	vmov	sl, fp, d0
 800c0b2:	e674      	b.n	800bd9e <_strtod_l+0x76>
 800c0b4:	ee07 9a90 	vmov	s15, r9
 800c0b8:	1be2      	subs	r2, r4, r7
 800c0ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c0be:	2d00      	cmp	r5, #0
 800c0c0:	bf08      	it	eq
 800c0c2:	461d      	moveq	r5, r3
 800c0c4:	2b10      	cmp	r3, #16
 800c0c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	bfa8      	it	ge
 800c0cc:	2210      	movge	r2, #16
 800c0ce:	2b09      	cmp	r3, #9
 800c0d0:	ec5b ab17 	vmov	sl, fp, d7
 800c0d4:	dc15      	bgt.n	800c102 <_strtod_l+0x3da>
 800c0d6:	1be1      	subs	r1, r4, r7
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	f43f ae60 	beq.w	800bd9e <_strtod_l+0x76>
 800c0de:	eba4 0107 	sub.w	r1, r4, r7
 800c0e2:	dd72      	ble.n	800c1ca <_strtod_l+0x4a2>
 800c0e4:	2916      	cmp	r1, #22
 800c0e6:	dc59      	bgt.n	800c19c <_strtod_l+0x474>
 800c0e8:	4b6f      	ldr	r3, [pc, #444]	@ (800c2a8 <_strtod_l+0x580>)
 800c0ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0f0:	ed93 7b00 	vldr	d7, [r3]
 800c0f4:	ec4b ab16 	vmov	d6, sl, fp
 800c0f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0fc:	ec5b ab17 	vmov	sl, fp, d7
 800c100:	e64d      	b.n	800bd9e <_strtod_l+0x76>
 800c102:	4969      	ldr	r1, [pc, #420]	@ (800c2a8 <_strtod_l+0x580>)
 800c104:	eddd 6a06 	vldr	s13, [sp, #24]
 800c108:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c10c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c110:	2b0f      	cmp	r3, #15
 800c112:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c116:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c11a:	ec5b ab16 	vmov	sl, fp, d6
 800c11e:	ddda      	ble.n	800c0d6 <_strtod_l+0x3ae>
 800c120:	1a9a      	subs	r2, r3, r2
 800c122:	1be1      	subs	r1, r4, r7
 800c124:	440a      	add	r2, r1
 800c126:	2a00      	cmp	r2, #0
 800c128:	f340 8094 	ble.w	800c254 <_strtod_l+0x52c>
 800c12c:	f012 000f 	ands.w	r0, r2, #15
 800c130:	d00a      	beq.n	800c148 <_strtod_l+0x420>
 800c132:	495d      	ldr	r1, [pc, #372]	@ (800c2a8 <_strtod_l+0x580>)
 800c134:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c138:	ed91 7b00 	vldr	d7, [r1]
 800c13c:	ec4b ab16 	vmov	d6, sl, fp
 800c140:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c144:	ec5b ab17 	vmov	sl, fp, d7
 800c148:	f032 020f 	bics.w	r2, r2, #15
 800c14c:	d073      	beq.n	800c236 <_strtod_l+0x50e>
 800c14e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c152:	dd47      	ble.n	800c1e4 <_strtod_l+0x4bc>
 800c154:	2400      	movs	r4, #0
 800c156:	4625      	mov	r5, r4
 800c158:	9407      	str	r4, [sp, #28]
 800c15a:	4626      	mov	r6, r4
 800c15c:	9a05      	ldr	r2, [sp, #20]
 800c15e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c2b4 <_strtod_l+0x58c>
 800c162:	2322      	movs	r3, #34	@ 0x22
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	f04f 0a00 	mov.w	sl, #0
 800c16a:	9b07      	ldr	r3, [sp, #28]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f43f ae16 	beq.w	800bd9e <_strtod_l+0x76>
 800c172:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c174:	9805      	ldr	r0, [sp, #20]
 800c176:	f7ff f955 	bl	800b424 <_Bfree>
 800c17a:	9805      	ldr	r0, [sp, #20]
 800c17c:	4631      	mov	r1, r6
 800c17e:	f7ff f951 	bl	800b424 <_Bfree>
 800c182:	9805      	ldr	r0, [sp, #20]
 800c184:	4629      	mov	r1, r5
 800c186:	f7ff f94d 	bl	800b424 <_Bfree>
 800c18a:	9907      	ldr	r1, [sp, #28]
 800c18c:	9805      	ldr	r0, [sp, #20]
 800c18e:	f7ff f949 	bl	800b424 <_Bfree>
 800c192:	9805      	ldr	r0, [sp, #20]
 800c194:	4621      	mov	r1, r4
 800c196:	f7ff f945 	bl	800b424 <_Bfree>
 800c19a:	e600      	b.n	800bd9e <_strtod_l+0x76>
 800c19c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c1a0:	1be0      	subs	r0, r4, r7
 800c1a2:	4281      	cmp	r1, r0
 800c1a4:	dbbc      	blt.n	800c120 <_strtod_l+0x3f8>
 800c1a6:	4a40      	ldr	r2, [pc, #256]	@ (800c2a8 <_strtod_l+0x580>)
 800c1a8:	f1c3 030f 	rsb	r3, r3, #15
 800c1ac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c1b0:	ed91 7b00 	vldr	d7, [r1]
 800c1b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1b6:	ec4b ab16 	vmov	d6, sl, fp
 800c1ba:	1acb      	subs	r3, r1, r3
 800c1bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c1c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1c4:	ed92 6b00 	vldr	d6, [r2]
 800c1c8:	e796      	b.n	800c0f8 <_strtod_l+0x3d0>
 800c1ca:	3116      	adds	r1, #22
 800c1cc:	dba8      	blt.n	800c120 <_strtod_l+0x3f8>
 800c1ce:	4b36      	ldr	r3, [pc, #216]	@ (800c2a8 <_strtod_l+0x580>)
 800c1d0:	1b3c      	subs	r4, r7, r4
 800c1d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c1d6:	ed94 7b00 	vldr	d7, [r4]
 800c1da:	ec4b ab16 	vmov	d6, sl, fp
 800c1de:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1e2:	e78b      	b.n	800c0fc <_strtod_l+0x3d4>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	ec4b ab17 	vmov	d7, sl, fp
 800c1ea:	4e30      	ldr	r6, [pc, #192]	@ (800c2ac <_strtod_l+0x584>)
 800c1ec:	1112      	asrs	r2, r2, #4
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	2a01      	cmp	r2, #1
 800c1f2:	dc23      	bgt.n	800c23c <_strtod_l+0x514>
 800c1f4:	b108      	cbz	r0, 800c1fa <_strtod_l+0x4d2>
 800c1f6:	ec5b ab17 	vmov	sl, fp, d7
 800c1fa:	4a2c      	ldr	r2, [pc, #176]	@ (800c2ac <_strtod_l+0x584>)
 800c1fc:	482c      	ldr	r0, [pc, #176]	@ (800c2b0 <_strtod_l+0x588>)
 800c1fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c202:	ed92 7b00 	vldr	d7, [r2]
 800c206:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c20a:	ec4b ab16 	vmov	d6, sl, fp
 800c20e:	4a29      	ldr	r2, [pc, #164]	@ (800c2b4 <_strtod_l+0x58c>)
 800c210:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c214:	ee17 1a90 	vmov	r1, s15
 800c218:	400a      	ands	r2, r1
 800c21a:	4282      	cmp	r2, r0
 800c21c:	ec5b ab17 	vmov	sl, fp, d7
 800c220:	d898      	bhi.n	800c154 <_strtod_l+0x42c>
 800c222:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c226:	4282      	cmp	r2, r0
 800c228:	bf86      	itte	hi
 800c22a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c2b8 <_strtod_l+0x590>
 800c22e:	f04f 3aff 	movhi.w	sl, #4294967295
 800c232:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c236:	2200      	movs	r2, #0
 800c238:	9206      	str	r2, [sp, #24]
 800c23a:	e076      	b.n	800c32a <_strtod_l+0x602>
 800c23c:	f012 0f01 	tst.w	r2, #1
 800c240:	d004      	beq.n	800c24c <_strtod_l+0x524>
 800c242:	ed96 6b00 	vldr	d6, [r6]
 800c246:	2001      	movs	r0, #1
 800c248:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c24c:	3101      	adds	r1, #1
 800c24e:	1052      	asrs	r2, r2, #1
 800c250:	3608      	adds	r6, #8
 800c252:	e7cd      	b.n	800c1f0 <_strtod_l+0x4c8>
 800c254:	d0ef      	beq.n	800c236 <_strtod_l+0x50e>
 800c256:	4252      	negs	r2, r2
 800c258:	f012 000f 	ands.w	r0, r2, #15
 800c25c:	d00a      	beq.n	800c274 <_strtod_l+0x54c>
 800c25e:	4912      	ldr	r1, [pc, #72]	@ (800c2a8 <_strtod_l+0x580>)
 800c260:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c264:	ed91 7b00 	vldr	d7, [r1]
 800c268:	ec4b ab16 	vmov	d6, sl, fp
 800c26c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c270:	ec5b ab17 	vmov	sl, fp, d7
 800c274:	1112      	asrs	r2, r2, #4
 800c276:	d0de      	beq.n	800c236 <_strtod_l+0x50e>
 800c278:	2a1f      	cmp	r2, #31
 800c27a:	dd1f      	ble.n	800c2bc <_strtod_l+0x594>
 800c27c:	2400      	movs	r4, #0
 800c27e:	4625      	mov	r5, r4
 800c280:	9407      	str	r4, [sp, #28]
 800c282:	4626      	mov	r6, r4
 800c284:	9a05      	ldr	r2, [sp, #20]
 800c286:	2322      	movs	r3, #34	@ 0x22
 800c288:	f04f 0a00 	mov.w	sl, #0
 800c28c:	f04f 0b00 	mov.w	fp, #0
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	e76a      	b.n	800c16a <_strtod_l+0x442>
 800c294:	0800dbb5 	.word	0x0800dbb5
 800c298:	0800de80 	.word	0x0800de80
 800c29c:	0800dbad 	.word	0x0800dbad
 800c2a0:	0800dbe4 	.word	0x0800dbe4
 800c2a4:	0800dd1d 	.word	0x0800dd1d
 800c2a8:	0800ddb8 	.word	0x0800ddb8
 800c2ac:	0800dd90 	.word	0x0800dd90
 800c2b0:	7ca00000 	.word	0x7ca00000
 800c2b4:	7ff00000 	.word	0x7ff00000
 800c2b8:	7fefffff 	.word	0x7fefffff
 800c2bc:	f012 0110 	ands.w	r1, r2, #16
 800c2c0:	bf18      	it	ne
 800c2c2:	216a      	movne	r1, #106	@ 0x6a
 800c2c4:	9106      	str	r1, [sp, #24]
 800c2c6:	ec4b ab17 	vmov	d7, sl, fp
 800c2ca:	49af      	ldr	r1, [pc, #700]	@ (800c588 <_strtod_l+0x860>)
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	07d6      	lsls	r6, r2, #31
 800c2d0:	d504      	bpl.n	800c2dc <_strtod_l+0x5b4>
 800c2d2:	ed91 6b00 	vldr	d6, [r1]
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2dc:	1052      	asrs	r2, r2, #1
 800c2de:	f101 0108 	add.w	r1, r1, #8
 800c2e2:	d1f4      	bne.n	800c2ce <_strtod_l+0x5a6>
 800c2e4:	b108      	cbz	r0, 800c2ea <_strtod_l+0x5c2>
 800c2e6:	ec5b ab17 	vmov	sl, fp, d7
 800c2ea:	9a06      	ldr	r2, [sp, #24]
 800c2ec:	b1b2      	cbz	r2, 800c31c <_strtod_l+0x5f4>
 800c2ee:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c2f2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	4658      	mov	r0, fp
 800c2fa:	dd0f      	ble.n	800c31c <_strtod_l+0x5f4>
 800c2fc:	2a1f      	cmp	r2, #31
 800c2fe:	dd55      	ble.n	800c3ac <_strtod_l+0x684>
 800c300:	2a34      	cmp	r2, #52	@ 0x34
 800c302:	bfde      	ittt	le
 800c304:	f04f 32ff 	movle.w	r2, #4294967295
 800c308:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c30c:	408a      	lslle	r2, r1
 800c30e:	f04f 0a00 	mov.w	sl, #0
 800c312:	bfcc      	ite	gt
 800c314:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c318:	ea02 0b00 	andle.w	fp, r2, r0
 800c31c:	ec4b ab17 	vmov	d7, sl, fp
 800c320:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	d0a8      	beq.n	800c27c <_strtod_l+0x554>
 800c32a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c32c:	9805      	ldr	r0, [sp, #20]
 800c32e:	f8cd 9000 	str.w	r9, [sp]
 800c332:	462a      	mov	r2, r5
 800c334:	f7ff f8de 	bl	800b4f4 <__s2b>
 800c338:	9007      	str	r0, [sp, #28]
 800c33a:	2800      	cmp	r0, #0
 800c33c:	f43f af0a 	beq.w	800c154 <_strtod_l+0x42c>
 800c340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c342:	1b3f      	subs	r7, r7, r4
 800c344:	2b00      	cmp	r3, #0
 800c346:	bfb4      	ite	lt
 800c348:	463b      	movlt	r3, r7
 800c34a:	2300      	movge	r3, #0
 800c34c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c350:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800c578 <_strtod_l+0x850>
 800c354:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c358:	2400      	movs	r4, #0
 800c35a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c35c:	4625      	mov	r5, r4
 800c35e:	9b07      	ldr	r3, [sp, #28]
 800c360:	9805      	ldr	r0, [sp, #20]
 800c362:	6859      	ldr	r1, [r3, #4]
 800c364:	f7ff f81e 	bl	800b3a4 <_Balloc>
 800c368:	4606      	mov	r6, r0
 800c36a:	2800      	cmp	r0, #0
 800c36c:	f43f aef6 	beq.w	800c15c <_strtod_l+0x434>
 800c370:	9b07      	ldr	r3, [sp, #28]
 800c372:	691a      	ldr	r2, [r3, #16]
 800c374:	ec4b ab19 	vmov	d9, sl, fp
 800c378:	3202      	adds	r2, #2
 800c37a:	f103 010c 	add.w	r1, r3, #12
 800c37e:	0092      	lsls	r2, r2, #2
 800c380:	300c      	adds	r0, #12
 800c382:	f000 fd2d 	bl	800cde0 <memcpy>
 800c386:	eeb0 0b49 	vmov.f64	d0, d9
 800c38a:	9805      	ldr	r0, [sp, #20]
 800c38c:	aa14      	add	r2, sp, #80	@ 0x50
 800c38e:	a913      	add	r1, sp, #76	@ 0x4c
 800c390:	f7ff fbe4 	bl	800bb5c <__d2b>
 800c394:	9012      	str	r0, [sp, #72]	@ 0x48
 800c396:	2800      	cmp	r0, #0
 800c398:	f43f aee0 	beq.w	800c15c <_strtod_l+0x434>
 800c39c:	9805      	ldr	r0, [sp, #20]
 800c39e:	2101      	movs	r1, #1
 800c3a0:	f7ff f93e 	bl	800b620 <__i2b>
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	b940      	cbnz	r0, 800c3ba <_strtod_l+0x692>
 800c3a8:	2500      	movs	r5, #0
 800c3aa:	e6d7      	b.n	800c15c <_strtod_l+0x434>
 800c3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800c3b0:	fa01 f202 	lsl.w	r2, r1, r2
 800c3b4:	ea02 0a0a 	and.w	sl, r2, sl
 800c3b8:	e7b0      	b.n	800c31c <_strtod_l+0x5f4>
 800c3ba:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c3bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c3be:	2f00      	cmp	r7, #0
 800c3c0:	bfab      	itete	ge
 800c3c2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c3c4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c3c6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c3ca:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c3ce:	bfac      	ite	ge
 800c3d0:	eb07 0903 	addge.w	r9, r7, r3
 800c3d4:	eba3 0807 	sublt.w	r8, r3, r7
 800c3d8:	9b06      	ldr	r3, [sp, #24]
 800c3da:	1aff      	subs	r7, r7, r3
 800c3dc:	4417      	add	r7, r2
 800c3de:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c3e2:	4a6a      	ldr	r2, [pc, #424]	@ (800c58c <_strtod_l+0x864>)
 800c3e4:	3f01      	subs	r7, #1
 800c3e6:	4297      	cmp	r7, r2
 800c3e8:	da51      	bge.n	800c48e <_strtod_l+0x766>
 800c3ea:	1bd1      	subs	r1, r2, r7
 800c3ec:	291f      	cmp	r1, #31
 800c3ee:	eba3 0301 	sub.w	r3, r3, r1
 800c3f2:	f04f 0201 	mov.w	r2, #1
 800c3f6:	dc3e      	bgt.n	800c476 <_strtod_l+0x74e>
 800c3f8:	408a      	lsls	r2, r1
 800c3fa:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c400:	eb09 0703 	add.w	r7, r9, r3
 800c404:	4498      	add	r8, r3
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	45b9      	cmp	r9, r7
 800c40a:	4498      	add	r8, r3
 800c40c:	464b      	mov	r3, r9
 800c40e:	bfa8      	it	ge
 800c410:	463b      	movge	r3, r7
 800c412:	4543      	cmp	r3, r8
 800c414:	bfa8      	it	ge
 800c416:	4643      	movge	r3, r8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bfc2      	ittt	gt
 800c41c:	1aff      	subgt	r7, r7, r3
 800c41e:	eba8 0803 	subgt.w	r8, r8, r3
 800c422:	eba9 0903 	subgt.w	r9, r9, r3
 800c426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c428:	2b00      	cmp	r3, #0
 800c42a:	dd16      	ble.n	800c45a <_strtod_l+0x732>
 800c42c:	4629      	mov	r1, r5
 800c42e:	9805      	ldr	r0, [sp, #20]
 800c430:	461a      	mov	r2, r3
 800c432:	f7ff f9ad 	bl	800b790 <__pow5mult>
 800c436:	4605      	mov	r5, r0
 800c438:	2800      	cmp	r0, #0
 800c43a:	d0b5      	beq.n	800c3a8 <_strtod_l+0x680>
 800c43c:	4601      	mov	r1, r0
 800c43e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c440:	9805      	ldr	r0, [sp, #20]
 800c442:	f7ff f903 	bl	800b64c <__multiply>
 800c446:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c448:	2800      	cmp	r0, #0
 800c44a:	f43f ae87 	beq.w	800c15c <_strtod_l+0x434>
 800c44e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c450:	9805      	ldr	r0, [sp, #20]
 800c452:	f7fe ffe7 	bl	800b424 <_Bfree>
 800c456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c458:	9312      	str	r3, [sp, #72]	@ 0x48
 800c45a:	2f00      	cmp	r7, #0
 800c45c:	dc1b      	bgt.n	800c496 <_strtod_l+0x76e>
 800c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	dd21      	ble.n	800c4a8 <_strtod_l+0x780>
 800c464:	4631      	mov	r1, r6
 800c466:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c468:	9805      	ldr	r0, [sp, #20]
 800c46a:	f7ff f991 	bl	800b790 <__pow5mult>
 800c46e:	4606      	mov	r6, r0
 800c470:	b9d0      	cbnz	r0, 800c4a8 <_strtod_l+0x780>
 800c472:	2600      	movs	r6, #0
 800c474:	e672      	b.n	800c15c <_strtod_l+0x434>
 800c476:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c47a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c47e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c482:	37e2      	adds	r7, #226	@ 0xe2
 800c484:	fa02 f107 	lsl.w	r1, r2, r7
 800c488:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c48a:	920c      	str	r2, [sp, #48]	@ 0x30
 800c48c:	e7b8      	b.n	800c400 <_strtod_l+0x6d8>
 800c48e:	2200      	movs	r2, #0
 800c490:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c492:	2201      	movs	r2, #1
 800c494:	e7f9      	b.n	800c48a <_strtod_l+0x762>
 800c496:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c498:	9805      	ldr	r0, [sp, #20]
 800c49a:	463a      	mov	r2, r7
 800c49c:	f7ff f9d2 	bl	800b844 <__lshift>
 800c4a0:	9012      	str	r0, [sp, #72]	@ 0x48
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d1db      	bne.n	800c45e <_strtod_l+0x736>
 800c4a6:	e659      	b.n	800c15c <_strtod_l+0x434>
 800c4a8:	f1b8 0f00 	cmp.w	r8, #0
 800c4ac:	dd07      	ble.n	800c4be <_strtod_l+0x796>
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	9805      	ldr	r0, [sp, #20]
 800c4b2:	4642      	mov	r2, r8
 800c4b4:	f7ff f9c6 	bl	800b844 <__lshift>
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d0d9      	beq.n	800c472 <_strtod_l+0x74a>
 800c4be:	f1b9 0f00 	cmp.w	r9, #0
 800c4c2:	dd08      	ble.n	800c4d6 <_strtod_l+0x7ae>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	9805      	ldr	r0, [sp, #20]
 800c4c8:	464a      	mov	r2, r9
 800c4ca:	f7ff f9bb 	bl	800b844 <__lshift>
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	f43f ae43 	beq.w	800c15c <_strtod_l+0x434>
 800c4d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c4d8:	9805      	ldr	r0, [sp, #20]
 800c4da:	4632      	mov	r2, r6
 800c4dc:	f7ff fa3a 	bl	800b954 <__mdiff>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	f43f ae3a 	beq.w	800c15c <_strtod_l+0x434>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c4ee:	60c3      	str	r3, [r0, #12]
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	f7ff fa13 	bl	800b91c <__mcmp>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	da4c      	bge.n	800c594 <_strtod_l+0x86c>
 800c4fa:	ea58 080a 	orrs.w	r8, r8, sl
 800c4fe:	d172      	bne.n	800c5e6 <_strtod_l+0x8be>
 800c500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c504:	2b00      	cmp	r3, #0
 800c506:	d16e      	bne.n	800c5e6 <_strtod_l+0x8be>
 800c508:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c50c:	0d1b      	lsrs	r3, r3, #20
 800c50e:	051b      	lsls	r3, r3, #20
 800c510:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c514:	d967      	bls.n	800c5e6 <_strtod_l+0x8be>
 800c516:	6963      	ldr	r3, [r4, #20]
 800c518:	b913      	cbnz	r3, 800c520 <_strtod_l+0x7f8>
 800c51a:	6923      	ldr	r3, [r4, #16]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	dd62      	ble.n	800c5e6 <_strtod_l+0x8be>
 800c520:	4621      	mov	r1, r4
 800c522:	2201      	movs	r2, #1
 800c524:	9805      	ldr	r0, [sp, #20]
 800c526:	f7ff f98d 	bl	800b844 <__lshift>
 800c52a:	4629      	mov	r1, r5
 800c52c:	4604      	mov	r4, r0
 800c52e:	f7ff f9f5 	bl	800b91c <__mcmp>
 800c532:	2800      	cmp	r0, #0
 800c534:	dd57      	ble.n	800c5e6 <_strtod_l+0x8be>
 800c536:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c53a:	9a06      	ldr	r2, [sp, #24]
 800c53c:	0d1b      	lsrs	r3, r3, #20
 800c53e:	051b      	lsls	r3, r3, #20
 800c540:	2a00      	cmp	r2, #0
 800c542:	d06e      	beq.n	800c622 <_strtod_l+0x8fa>
 800c544:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c548:	d86b      	bhi.n	800c622 <_strtod_l+0x8fa>
 800c54a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c54e:	f67f ae99 	bls.w	800c284 <_strtod_l+0x55c>
 800c552:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800c580 <_strtod_l+0x858>
 800c556:	ec4b ab16 	vmov	d6, sl, fp
 800c55a:	4b0d      	ldr	r3, [pc, #52]	@ (800c590 <_strtod_l+0x868>)
 800c55c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c560:	ee17 2a90 	vmov	r2, s15
 800c564:	4013      	ands	r3, r2
 800c566:	ec5b ab17 	vmov	sl, fp, d7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f47f ae01 	bne.w	800c172 <_strtod_l+0x44a>
 800c570:	9a05      	ldr	r2, [sp, #20]
 800c572:	2322      	movs	r3, #34	@ 0x22
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	e5fc      	b.n	800c172 <_strtod_l+0x44a>
 800c578:	ffc00000 	.word	0xffc00000
 800c57c:	41dfffff 	.word	0x41dfffff
 800c580:	00000000 	.word	0x00000000
 800c584:	39500000 	.word	0x39500000
 800c588:	0800dea8 	.word	0x0800dea8
 800c58c:	fffffc02 	.word	0xfffffc02
 800c590:	7ff00000 	.word	0x7ff00000
 800c594:	46d9      	mov	r9, fp
 800c596:	d15d      	bne.n	800c654 <_strtod_l+0x92c>
 800c598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c59c:	f1b8 0f00 	cmp.w	r8, #0
 800c5a0:	d02a      	beq.n	800c5f8 <_strtod_l+0x8d0>
 800c5a2:	4aa9      	ldr	r2, [pc, #676]	@ (800c848 <_strtod_l+0xb20>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d12a      	bne.n	800c5fe <_strtod_l+0x8d6>
 800c5a8:	9b06      	ldr	r3, [sp, #24]
 800c5aa:	4652      	mov	r2, sl
 800c5ac:	b1fb      	cbz	r3, 800c5ee <_strtod_l+0x8c6>
 800c5ae:	4ba7      	ldr	r3, [pc, #668]	@ (800c84c <_strtod_l+0xb24>)
 800c5b0:	ea0b 0303 	and.w	r3, fp, r3
 800c5b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5bc:	d81a      	bhi.n	800c5f4 <_strtod_l+0x8cc>
 800c5be:	0d1b      	lsrs	r3, r3, #20
 800c5c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c5c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d118      	bne.n	800c5fe <_strtod_l+0x8d6>
 800c5cc:	4ba0      	ldr	r3, [pc, #640]	@ (800c850 <_strtod_l+0xb28>)
 800c5ce:	4599      	cmp	r9, r3
 800c5d0:	d102      	bne.n	800c5d8 <_strtod_l+0x8b0>
 800c5d2:	3201      	adds	r2, #1
 800c5d4:	f43f adc2 	beq.w	800c15c <_strtod_l+0x434>
 800c5d8:	4b9c      	ldr	r3, [pc, #624]	@ (800c84c <_strtod_l+0xb24>)
 800c5da:	ea09 0303 	and.w	r3, r9, r3
 800c5de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c5e2:	f04f 0a00 	mov.w	sl, #0
 800c5e6:	9b06      	ldr	r3, [sp, #24]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1b2      	bne.n	800c552 <_strtod_l+0x82a>
 800c5ec:	e5c1      	b.n	800c172 <_strtod_l+0x44a>
 800c5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f2:	e7e9      	b.n	800c5c8 <_strtod_l+0x8a0>
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	e7e7      	b.n	800c5c8 <_strtod_l+0x8a0>
 800c5f8:	ea53 030a 	orrs.w	r3, r3, sl
 800c5fc:	d09b      	beq.n	800c536 <_strtod_l+0x80e>
 800c5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c600:	b1c3      	cbz	r3, 800c634 <_strtod_l+0x90c>
 800c602:	ea13 0f09 	tst.w	r3, r9
 800c606:	d0ee      	beq.n	800c5e6 <_strtod_l+0x8be>
 800c608:	9a06      	ldr	r2, [sp, #24]
 800c60a:	4650      	mov	r0, sl
 800c60c:	4659      	mov	r1, fp
 800c60e:	f1b8 0f00 	cmp.w	r8, #0
 800c612:	d013      	beq.n	800c63c <_strtod_l+0x914>
 800c614:	f7ff fb6d 	bl	800bcf2 <sulp>
 800c618:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c61c:	ec5b ab17 	vmov	sl, fp, d7
 800c620:	e7e1      	b.n	800c5e6 <_strtod_l+0x8be>
 800c622:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c626:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c62a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c62e:	f04f 3aff 	mov.w	sl, #4294967295
 800c632:	e7d8      	b.n	800c5e6 <_strtod_l+0x8be>
 800c634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c636:	ea13 0f0a 	tst.w	r3, sl
 800c63a:	e7e4      	b.n	800c606 <_strtod_l+0x8de>
 800c63c:	f7ff fb59 	bl	800bcf2 <sulp>
 800c640:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c644:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64c:	ec5b ab10 	vmov	sl, fp, d0
 800c650:	d1c9      	bne.n	800c5e6 <_strtod_l+0x8be>
 800c652:	e617      	b.n	800c284 <_strtod_l+0x55c>
 800c654:	4629      	mov	r1, r5
 800c656:	4620      	mov	r0, r4
 800c658:	f7ff fad8 	bl	800bc0c <__ratio>
 800c65c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c660:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c668:	d85d      	bhi.n	800c726 <_strtod_l+0x9fe>
 800c66a:	f1b8 0f00 	cmp.w	r8, #0
 800c66e:	d164      	bne.n	800c73a <_strtod_l+0xa12>
 800c670:	f1ba 0f00 	cmp.w	sl, #0
 800c674:	d14b      	bne.n	800c70e <_strtod_l+0x9e6>
 800c676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c67a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d160      	bne.n	800c744 <_strtod_l+0xa1c>
 800c682:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c686:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68e:	d401      	bmi.n	800c694 <_strtod_l+0x96c>
 800c690:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c694:	eeb1 ab48 	vneg.f64	d10, d8
 800c698:	486c      	ldr	r0, [pc, #432]	@ (800c84c <_strtod_l+0xb24>)
 800c69a:	496e      	ldr	r1, [pc, #440]	@ (800c854 <_strtod_l+0xb2c>)
 800c69c:	ea09 0700 	and.w	r7, r9, r0
 800c6a0:	428f      	cmp	r7, r1
 800c6a2:	ec53 2b1a 	vmov	r2, r3, d10
 800c6a6:	d17d      	bne.n	800c7a4 <_strtod_l+0xa7c>
 800c6a8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c6ac:	ec4b ab1c 	vmov	d12, sl, fp
 800c6b0:	eeb0 0b4c 	vmov.f64	d0, d12
 800c6b4:	f7ff f9e2 	bl	800ba7c <__ulp>
 800c6b8:	4864      	ldr	r0, [pc, #400]	@ (800c84c <_strtod_l+0xb24>)
 800c6ba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c6be:	ee1c 3a90 	vmov	r3, s25
 800c6c2:	4a65      	ldr	r2, [pc, #404]	@ (800c858 <_strtod_l+0xb30>)
 800c6c4:	ea03 0100 	and.w	r1, r3, r0
 800c6c8:	4291      	cmp	r1, r2
 800c6ca:	ec5b ab1c 	vmov	sl, fp, d12
 800c6ce:	d93c      	bls.n	800c74a <_strtod_l+0xa22>
 800c6d0:	ee19 2a90 	vmov	r2, s19
 800c6d4:	4b5e      	ldr	r3, [pc, #376]	@ (800c850 <_strtod_l+0xb28>)
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d104      	bne.n	800c6e4 <_strtod_l+0x9bc>
 800c6da:	ee19 3a10 	vmov	r3, s18
 800c6de:	3301      	adds	r3, #1
 800c6e0:	f43f ad3c 	beq.w	800c15c <_strtod_l+0x434>
 800c6e4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800c850 <_strtod_l+0xb28>
 800c6e8:	f04f 3aff 	mov.w	sl, #4294967295
 800c6ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c6ee:	9805      	ldr	r0, [sp, #20]
 800c6f0:	f7fe fe98 	bl	800b424 <_Bfree>
 800c6f4:	9805      	ldr	r0, [sp, #20]
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	f7fe fe94 	bl	800b424 <_Bfree>
 800c6fc:	9805      	ldr	r0, [sp, #20]
 800c6fe:	4629      	mov	r1, r5
 800c700:	f7fe fe90 	bl	800b424 <_Bfree>
 800c704:	9805      	ldr	r0, [sp, #20]
 800c706:	4621      	mov	r1, r4
 800c708:	f7fe fe8c 	bl	800b424 <_Bfree>
 800c70c:	e627      	b.n	800c35e <_strtod_l+0x636>
 800c70e:	f1ba 0f01 	cmp.w	sl, #1
 800c712:	d103      	bne.n	800c71c <_strtod_l+0x9f4>
 800c714:	f1bb 0f00 	cmp.w	fp, #0
 800c718:	f43f adb4 	beq.w	800c284 <_strtod_l+0x55c>
 800c71c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c720:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c724:	e7b8      	b.n	800c698 <_strtod_l+0x970>
 800c726:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c72a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c72e:	f1b8 0f00 	cmp.w	r8, #0
 800c732:	d0af      	beq.n	800c694 <_strtod_l+0x96c>
 800c734:	eeb0 ab48 	vmov.f64	d10, d8
 800c738:	e7ae      	b.n	800c698 <_strtod_l+0x970>
 800c73a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c73e:	eeb0 8b4a 	vmov.f64	d8, d10
 800c742:	e7a9      	b.n	800c698 <_strtod_l+0x970>
 800c744:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c748:	e7a6      	b.n	800c698 <_strtod_l+0x970>
 800c74a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c74e:	9b06      	ldr	r3, [sp, #24]
 800c750:	46d9      	mov	r9, fp
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1ca      	bne.n	800c6ec <_strtod_l+0x9c4>
 800c756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c75a:	0d1b      	lsrs	r3, r3, #20
 800c75c:	051b      	lsls	r3, r3, #20
 800c75e:	429f      	cmp	r7, r3
 800c760:	d1c4      	bne.n	800c6ec <_strtod_l+0x9c4>
 800c762:	ec51 0b18 	vmov	r0, r1, d8
 800c766:	f7f3 ffe7 	bl	8000738 <__aeabi_d2lz>
 800c76a:	f7f3 ff9f 	bl	80006ac <__aeabi_l2d>
 800c76e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c772:	ec41 0b17 	vmov	d7, r0, r1
 800c776:	ea49 090a 	orr.w	r9, r9, sl
 800c77a:	ea59 0908 	orrs.w	r9, r9, r8
 800c77e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c782:	d03c      	beq.n	800c7fe <_strtod_l+0xad6>
 800c784:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c830 <_strtod_l+0xb08>
 800c788:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c790:	f53f acef 	bmi.w	800c172 <_strtod_l+0x44a>
 800c794:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800c838 <_strtod_l+0xb10>
 800c798:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	dda4      	ble.n	800c6ec <_strtod_l+0x9c4>
 800c7a2:	e4e6      	b.n	800c172 <_strtod_l+0x44a>
 800c7a4:	9906      	ldr	r1, [sp, #24]
 800c7a6:	b1e1      	cbz	r1, 800c7e2 <_strtod_l+0xaba>
 800c7a8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c7ac:	d819      	bhi.n	800c7e2 <_strtod_l+0xaba>
 800c7ae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b6:	d811      	bhi.n	800c7dc <_strtod_l+0xab4>
 800c7b8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c7bc:	ee18 3a10 	vmov	r3, s16
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	bf38      	it	cc
 800c7c4:	2301      	movcc	r3, #1
 800c7c6:	ee08 3a10 	vmov	s16, r3
 800c7ca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c7ce:	f1b8 0f00 	cmp.w	r8, #0
 800c7d2:	d111      	bne.n	800c7f8 <_strtod_l+0xad0>
 800c7d4:	eeb1 7b48 	vneg.f64	d7, d8
 800c7d8:	ec53 2b17 	vmov	r2, r3, d7
 800c7dc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c7e0:	1bcb      	subs	r3, r1, r7
 800c7e2:	eeb0 0b49 	vmov.f64	d0, d9
 800c7e6:	ec43 2b1a 	vmov	d10, r2, r3
 800c7ea:	f7ff f947 	bl	800ba7c <__ulp>
 800c7ee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c7f2:	ec5b ab19 	vmov	sl, fp, d9
 800c7f6:	e7aa      	b.n	800c74e <_strtod_l+0xa26>
 800c7f8:	eeb0 7b48 	vmov.f64	d7, d8
 800c7fc:	e7ec      	b.n	800c7d8 <_strtod_l+0xab0>
 800c7fe:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800c840 <_strtod_l+0xb18>
 800c802:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c80a:	f57f af6f 	bpl.w	800c6ec <_strtod_l+0x9c4>
 800c80e:	e4b0      	b.n	800c172 <_strtod_l+0x44a>
 800c810:	2300      	movs	r3, #0
 800c812:	9308      	str	r3, [sp, #32]
 800c814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c816:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	f7ff bac4 	b.w	800bda6 <_strtod_l+0x7e>
 800c81e:	2a65      	cmp	r2, #101	@ 0x65
 800c820:	f43f abbf 	beq.w	800bfa2 <_strtod_l+0x27a>
 800c824:	2a45      	cmp	r2, #69	@ 0x45
 800c826:	f43f abbc 	beq.w	800bfa2 <_strtod_l+0x27a>
 800c82a:	2101      	movs	r1, #1
 800c82c:	f7ff bbf4 	b.w	800c018 <_strtod_l+0x2f0>
 800c830:	94a03595 	.word	0x94a03595
 800c834:	3fdfffff 	.word	0x3fdfffff
 800c838:	35afe535 	.word	0x35afe535
 800c83c:	3fe00000 	.word	0x3fe00000
 800c840:	94a03595 	.word	0x94a03595
 800c844:	3fcfffff 	.word	0x3fcfffff
 800c848:	000fffff 	.word	0x000fffff
 800c84c:	7ff00000 	.word	0x7ff00000
 800c850:	7fefffff 	.word	0x7fefffff
 800c854:	7fe00000 	.word	0x7fe00000
 800c858:	7c9fffff 	.word	0x7c9fffff

0800c85c <_strtod_r>:
 800c85c:	4b01      	ldr	r3, [pc, #4]	@ (800c864 <_strtod_r+0x8>)
 800c85e:	f7ff ba63 	b.w	800bd28 <_strtod_l>
 800c862:	bf00      	nop
 800c864:	2400006c 	.word	0x2400006c

0800c868 <_strtol_l.isra.0>:
 800c868:	2b24      	cmp	r3, #36	@ 0x24
 800c86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c86e:	4686      	mov	lr, r0
 800c870:	4690      	mov	r8, r2
 800c872:	d801      	bhi.n	800c878 <_strtol_l.isra.0+0x10>
 800c874:	2b01      	cmp	r3, #1
 800c876:	d106      	bne.n	800c886 <_strtol_l.isra.0+0x1e>
 800c878:	f7fd fe78 	bl	800a56c <__errno>
 800c87c:	2316      	movs	r3, #22
 800c87e:	6003      	str	r3, [r0, #0]
 800c880:	2000      	movs	r0, #0
 800c882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c886:	4834      	ldr	r0, [pc, #208]	@ (800c958 <_strtol_l.isra.0+0xf0>)
 800c888:	460d      	mov	r5, r1
 800c88a:	462a      	mov	r2, r5
 800c88c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c890:	5d06      	ldrb	r6, [r0, r4]
 800c892:	f016 0608 	ands.w	r6, r6, #8
 800c896:	d1f8      	bne.n	800c88a <_strtol_l.isra.0+0x22>
 800c898:	2c2d      	cmp	r4, #45	@ 0x2d
 800c89a:	d110      	bne.n	800c8be <_strtol_l.isra.0+0x56>
 800c89c:	782c      	ldrb	r4, [r5, #0]
 800c89e:	2601      	movs	r6, #1
 800c8a0:	1c95      	adds	r5, r2, #2
 800c8a2:	f033 0210 	bics.w	r2, r3, #16
 800c8a6:	d115      	bne.n	800c8d4 <_strtol_l.isra.0+0x6c>
 800c8a8:	2c30      	cmp	r4, #48	@ 0x30
 800c8aa:	d10d      	bne.n	800c8c8 <_strtol_l.isra.0+0x60>
 800c8ac:	782a      	ldrb	r2, [r5, #0]
 800c8ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8b2:	2a58      	cmp	r2, #88	@ 0x58
 800c8b4:	d108      	bne.n	800c8c8 <_strtol_l.isra.0+0x60>
 800c8b6:	786c      	ldrb	r4, [r5, #1]
 800c8b8:	3502      	adds	r5, #2
 800c8ba:	2310      	movs	r3, #16
 800c8bc:	e00a      	b.n	800c8d4 <_strtol_l.isra.0+0x6c>
 800c8be:	2c2b      	cmp	r4, #43	@ 0x2b
 800c8c0:	bf04      	itt	eq
 800c8c2:	782c      	ldrbeq	r4, [r5, #0]
 800c8c4:	1c95      	addeq	r5, r2, #2
 800c8c6:	e7ec      	b.n	800c8a2 <_strtol_l.isra.0+0x3a>
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1f6      	bne.n	800c8ba <_strtol_l.isra.0+0x52>
 800c8cc:	2c30      	cmp	r4, #48	@ 0x30
 800c8ce:	bf14      	ite	ne
 800c8d0:	230a      	movne	r3, #10
 800c8d2:	2308      	moveq	r3, #8
 800c8d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c8d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c8dc:	2200      	movs	r2, #0
 800c8de:	fbbc f9f3 	udiv	r9, ip, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c8e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c8ec:	2f09      	cmp	r7, #9
 800c8ee:	d80f      	bhi.n	800c910 <_strtol_l.isra.0+0xa8>
 800c8f0:	463c      	mov	r4, r7
 800c8f2:	42a3      	cmp	r3, r4
 800c8f4:	dd1b      	ble.n	800c92e <_strtol_l.isra.0+0xc6>
 800c8f6:	1c57      	adds	r7, r2, #1
 800c8f8:	d007      	beq.n	800c90a <_strtol_l.isra.0+0xa2>
 800c8fa:	4581      	cmp	r9, r0
 800c8fc:	d314      	bcc.n	800c928 <_strtol_l.isra.0+0xc0>
 800c8fe:	d101      	bne.n	800c904 <_strtol_l.isra.0+0x9c>
 800c900:	45a2      	cmp	sl, r4
 800c902:	db11      	blt.n	800c928 <_strtol_l.isra.0+0xc0>
 800c904:	fb00 4003 	mla	r0, r0, r3, r4
 800c908:	2201      	movs	r2, #1
 800c90a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c90e:	e7eb      	b.n	800c8e8 <_strtol_l.isra.0+0x80>
 800c910:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c914:	2f19      	cmp	r7, #25
 800c916:	d801      	bhi.n	800c91c <_strtol_l.isra.0+0xb4>
 800c918:	3c37      	subs	r4, #55	@ 0x37
 800c91a:	e7ea      	b.n	800c8f2 <_strtol_l.isra.0+0x8a>
 800c91c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c920:	2f19      	cmp	r7, #25
 800c922:	d804      	bhi.n	800c92e <_strtol_l.isra.0+0xc6>
 800c924:	3c57      	subs	r4, #87	@ 0x57
 800c926:	e7e4      	b.n	800c8f2 <_strtol_l.isra.0+0x8a>
 800c928:	f04f 32ff 	mov.w	r2, #4294967295
 800c92c:	e7ed      	b.n	800c90a <_strtol_l.isra.0+0xa2>
 800c92e:	1c53      	adds	r3, r2, #1
 800c930:	d108      	bne.n	800c944 <_strtol_l.isra.0+0xdc>
 800c932:	2322      	movs	r3, #34	@ 0x22
 800c934:	f8ce 3000 	str.w	r3, [lr]
 800c938:	4660      	mov	r0, ip
 800c93a:	f1b8 0f00 	cmp.w	r8, #0
 800c93e:	d0a0      	beq.n	800c882 <_strtol_l.isra.0+0x1a>
 800c940:	1e69      	subs	r1, r5, #1
 800c942:	e006      	b.n	800c952 <_strtol_l.isra.0+0xea>
 800c944:	b106      	cbz	r6, 800c948 <_strtol_l.isra.0+0xe0>
 800c946:	4240      	negs	r0, r0
 800c948:	f1b8 0f00 	cmp.w	r8, #0
 800c94c:	d099      	beq.n	800c882 <_strtol_l.isra.0+0x1a>
 800c94e:	2a00      	cmp	r2, #0
 800c950:	d1f6      	bne.n	800c940 <_strtol_l.isra.0+0xd8>
 800c952:	f8c8 1000 	str.w	r1, [r8]
 800c956:	e794      	b.n	800c882 <_strtol_l.isra.0+0x1a>
 800c958:	0800ded1 	.word	0x0800ded1

0800c95c <_strtol_r>:
 800c95c:	f7ff bf84 	b.w	800c868 <_strtol_l.isra.0>

0800c960 <__ssputs_r>:
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	688e      	ldr	r6, [r1, #8]
 800c966:	461f      	mov	r7, r3
 800c968:	42be      	cmp	r6, r7
 800c96a:	680b      	ldr	r3, [r1, #0]
 800c96c:	4682      	mov	sl, r0
 800c96e:	460c      	mov	r4, r1
 800c970:	4690      	mov	r8, r2
 800c972:	d82d      	bhi.n	800c9d0 <__ssputs_r+0x70>
 800c974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c978:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c97c:	d026      	beq.n	800c9cc <__ssputs_r+0x6c>
 800c97e:	6965      	ldr	r5, [r4, #20]
 800c980:	6909      	ldr	r1, [r1, #16]
 800c982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c986:	eba3 0901 	sub.w	r9, r3, r1
 800c98a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c98e:	1c7b      	adds	r3, r7, #1
 800c990:	444b      	add	r3, r9
 800c992:	106d      	asrs	r5, r5, #1
 800c994:	429d      	cmp	r5, r3
 800c996:	bf38      	it	cc
 800c998:	461d      	movcc	r5, r3
 800c99a:	0553      	lsls	r3, r2, #21
 800c99c:	d527      	bpl.n	800c9ee <__ssputs_r+0x8e>
 800c99e:	4629      	mov	r1, r5
 800c9a0:	f7fe fc74 	bl	800b28c <_malloc_r>
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	b360      	cbz	r0, 800ca02 <__ssputs_r+0xa2>
 800c9a8:	6921      	ldr	r1, [r4, #16]
 800c9aa:	464a      	mov	r2, r9
 800c9ac:	f000 fa18 	bl	800cde0 <memcpy>
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	6126      	str	r6, [r4, #16]
 800c9be:	6165      	str	r5, [r4, #20]
 800c9c0:	444e      	add	r6, r9
 800c9c2:	eba5 0509 	sub.w	r5, r5, r9
 800c9c6:	6026      	str	r6, [r4, #0]
 800c9c8:	60a5      	str	r5, [r4, #8]
 800c9ca:	463e      	mov	r6, r7
 800c9cc:	42be      	cmp	r6, r7
 800c9ce:	d900      	bls.n	800c9d2 <__ssputs_r+0x72>
 800c9d0:	463e      	mov	r6, r7
 800c9d2:	6820      	ldr	r0, [r4, #0]
 800c9d4:	4632      	mov	r2, r6
 800c9d6:	4641      	mov	r1, r8
 800c9d8:	f000 f9c6 	bl	800cd68 <memmove>
 800c9dc:	68a3      	ldr	r3, [r4, #8]
 800c9de:	1b9b      	subs	r3, r3, r6
 800c9e0:	60a3      	str	r3, [r4, #8]
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	4433      	add	r3, r6
 800c9e6:	6023      	str	r3, [r4, #0]
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ee:	462a      	mov	r2, r5
 800c9f0:	f000 fd8b 	bl	800d50a <_realloc_r>
 800c9f4:	4606      	mov	r6, r0
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d1e0      	bne.n	800c9bc <__ssputs_r+0x5c>
 800c9fa:	6921      	ldr	r1, [r4, #16]
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	f7fe fbd1 	bl	800b1a4 <_free_r>
 800ca02:	230c      	movs	r3, #12
 800ca04:	f8ca 3000 	str.w	r3, [sl]
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca0e:	81a3      	strh	r3, [r4, #12]
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	e7e9      	b.n	800c9ea <__ssputs_r+0x8a>
	...

0800ca18 <_svfiprintf_r>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	4698      	mov	r8, r3
 800ca1e:	898b      	ldrh	r3, [r1, #12]
 800ca20:	061b      	lsls	r3, r3, #24
 800ca22:	b09d      	sub	sp, #116	@ 0x74
 800ca24:	4607      	mov	r7, r0
 800ca26:	460d      	mov	r5, r1
 800ca28:	4614      	mov	r4, r2
 800ca2a:	d510      	bpl.n	800ca4e <_svfiprintf_r+0x36>
 800ca2c:	690b      	ldr	r3, [r1, #16]
 800ca2e:	b973      	cbnz	r3, 800ca4e <_svfiprintf_r+0x36>
 800ca30:	2140      	movs	r1, #64	@ 0x40
 800ca32:	f7fe fc2b 	bl	800b28c <_malloc_r>
 800ca36:	6028      	str	r0, [r5, #0]
 800ca38:	6128      	str	r0, [r5, #16]
 800ca3a:	b930      	cbnz	r0, 800ca4a <_svfiprintf_r+0x32>
 800ca3c:	230c      	movs	r3, #12
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	b01d      	add	sp, #116	@ 0x74
 800ca46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4a:	2340      	movs	r3, #64	@ 0x40
 800ca4c:	616b      	str	r3, [r5, #20]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca52:	2320      	movs	r3, #32
 800ca54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca5c:	2330      	movs	r3, #48	@ 0x30
 800ca5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbfc <_svfiprintf_r+0x1e4>
 800ca62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca66:	f04f 0901 	mov.w	r9, #1
 800ca6a:	4623      	mov	r3, r4
 800ca6c:	469a      	mov	sl, r3
 800ca6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca72:	b10a      	cbz	r2, 800ca78 <_svfiprintf_r+0x60>
 800ca74:	2a25      	cmp	r2, #37	@ 0x25
 800ca76:	d1f9      	bne.n	800ca6c <_svfiprintf_r+0x54>
 800ca78:	ebba 0b04 	subs.w	fp, sl, r4
 800ca7c:	d00b      	beq.n	800ca96 <_svfiprintf_r+0x7e>
 800ca7e:	465b      	mov	r3, fp
 800ca80:	4622      	mov	r2, r4
 800ca82:	4629      	mov	r1, r5
 800ca84:	4638      	mov	r0, r7
 800ca86:	f7ff ff6b 	bl	800c960 <__ssputs_r>
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	f000 80a7 	beq.w	800cbde <_svfiprintf_r+0x1c6>
 800ca90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca92:	445a      	add	r2, fp
 800ca94:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca96:	f89a 3000 	ldrb.w	r3, [sl]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 809f 	beq.w	800cbde <_svfiprintf_r+0x1c6>
 800caa0:	2300      	movs	r3, #0
 800caa2:	f04f 32ff 	mov.w	r2, #4294967295
 800caa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caaa:	f10a 0a01 	add.w	sl, sl, #1
 800caae:	9304      	str	r3, [sp, #16]
 800cab0:	9307      	str	r3, [sp, #28]
 800cab2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cab6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cab8:	4654      	mov	r4, sl
 800caba:	2205      	movs	r2, #5
 800cabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac0:	484e      	ldr	r0, [pc, #312]	@ (800cbfc <_svfiprintf_r+0x1e4>)
 800cac2:	f7f3 fc0d 	bl	80002e0 <memchr>
 800cac6:	9a04      	ldr	r2, [sp, #16]
 800cac8:	b9d8      	cbnz	r0, 800cb02 <_svfiprintf_r+0xea>
 800caca:	06d0      	lsls	r0, r2, #27
 800cacc:	bf44      	itt	mi
 800cace:	2320      	movmi	r3, #32
 800cad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cad4:	0711      	lsls	r1, r2, #28
 800cad6:	bf44      	itt	mi
 800cad8:	232b      	movmi	r3, #43	@ 0x2b
 800cada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cade:	f89a 3000 	ldrb.w	r3, [sl]
 800cae2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cae4:	d015      	beq.n	800cb12 <_svfiprintf_r+0xfa>
 800cae6:	9a07      	ldr	r2, [sp, #28]
 800cae8:	4654      	mov	r4, sl
 800caea:	2000      	movs	r0, #0
 800caec:	f04f 0c0a 	mov.w	ip, #10
 800caf0:	4621      	mov	r1, r4
 800caf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caf6:	3b30      	subs	r3, #48	@ 0x30
 800caf8:	2b09      	cmp	r3, #9
 800cafa:	d94b      	bls.n	800cb94 <_svfiprintf_r+0x17c>
 800cafc:	b1b0      	cbz	r0, 800cb2c <_svfiprintf_r+0x114>
 800cafe:	9207      	str	r2, [sp, #28]
 800cb00:	e014      	b.n	800cb2c <_svfiprintf_r+0x114>
 800cb02:	eba0 0308 	sub.w	r3, r0, r8
 800cb06:	fa09 f303 	lsl.w	r3, r9, r3
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	46a2      	mov	sl, r4
 800cb10:	e7d2      	b.n	800cab8 <_svfiprintf_r+0xa0>
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	1d19      	adds	r1, r3, #4
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	9103      	str	r1, [sp, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bfbb      	ittet	lt
 800cb1e:	425b      	neglt	r3, r3
 800cb20:	f042 0202 	orrlt.w	r2, r2, #2
 800cb24:	9307      	strge	r3, [sp, #28]
 800cb26:	9307      	strlt	r3, [sp, #28]
 800cb28:	bfb8      	it	lt
 800cb2a:	9204      	strlt	r2, [sp, #16]
 800cb2c:	7823      	ldrb	r3, [r4, #0]
 800cb2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb30:	d10a      	bne.n	800cb48 <_svfiprintf_r+0x130>
 800cb32:	7863      	ldrb	r3, [r4, #1]
 800cb34:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb36:	d132      	bne.n	800cb9e <_svfiprintf_r+0x186>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	1d1a      	adds	r2, r3, #4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	9203      	str	r2, [sp, #12]
 800cb40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb44:	3402      	adds	r4, #2
 800cb46:	9305      	str	r3, [sp, #20]
 800cb48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc0c <_svfiprintf_r+0x1f4>
 800cb4c:	7821      	ldrb	r1, [r4, #0]
 800cb4e:	2203      	movs	r2, #3
 800cb50:	4650      	mov	r0, sl
 800cb52:	f7f3 fbc5 	bl	80002e0 <memchr>
 800cb56:	b138      	cbz	r0, 800cb68 <_svfiprintf_r+0x150>
 800cb58:	9b04      	ldr	r3, [sp, #16]
 800cb5a:	eba0 000a 	sub.w	r0, r0, sl
 800cb5e:	2240      	movs	r2, #64	@ 0x40
 800cb60:	4082      	lsls	r2, r0
 800cb62:	4313      	orrs	r3, r2
 800cb64:	3401      	adds	r4, #1
 800cb66:	9304      	str	r3, [sp, #16]
 800cb68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb6c:	4824      	ldr	r0, [pc, #144]	@ (800cc00 <_svfiprintf_r+0x1e8>)
 800cb6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb72:	2206      	movs	r2, #6
 800cb74:	f7f3 fbb4 	bl	80002e0 <memchr>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d036      	beq.n	800cbea <_svfiprintf_r+0x1d2>
 800cb7c:	4b21      	ldr	r3, [pc, #132]	@ (800cc04 <_svfiprintf_r+0x1ec>)
 800cb7e:	bb1b      	cbnz	r3, 800cbc8 <_svfiprintf_r+0x1b0>
 800cb80:	9b03      	ldr	r3, [sp, #12]
 800cb82:	3307      	adds	r3, #7
 800cb84:	f023 0307 	bic.w	r3, r3, #7
 800cb88:	3308      	adds	r3, #8
 800cb8a:	9303      	str	r3, [sp, #12]
 800cb8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb8e:	4433      	add	r3, r6
 800cb90:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb92:	e76a      	b.n	800ca6a <_svfiprintf_r+0x52>
 800cb94:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb98:	460c      	mov	r4, r1
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	e7a8      	b.n	800caf0 <_svfiprintf_r+0xd8>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	3401      	adds	r4, #1
 800cba2:	9305      	str	r3, [sp, #20]
 800cba4:	4619      	mov	r1, r3
 800cba6:	f04f 0c0a 	mov.w	ip, #10
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb0:	3a30      	subs	r2, #48	@ 0x30
 800cbb2:	2a09      	cmp	r2, #9
 800cbb4:	d903      	bls.n	800cbbe <_svfiprintf_r+0x1a6>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d0c6      	beq.n	800cb48 <_svfiprintf_r+0x130>
 800cbba:	9105      	str	r1, [sp, #20]
 800cbbc:	e7c4      	b.n	800cb48 <_svfiprintf_r+0x130>
 800cbbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e7f0      	b.n	800cbaa <_svfiprintf_r+0x192>
 800cbc8:	ab03      	add	r3, sp, #12
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	462a      	mov	r2, r5
 800cbce:	4b0e      	ldr	r3, [pc, #56]	@ (800cc08 <_svfiprintf_r+0x1f0>)
 800cbd0:	a904      	add	r1, sp, #16
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7fc fda4 	bl	8009720 <_printf_float>
 800cbd8:	1c42      	adds	r2, r0, #1
 800cbda:	4606      	mov	r6, r0
 800cbdc:	d1d6      	bne.n	800cb8c <_svfiprintf_r+0x174>
 800cbde:	89ab      	ldrh	r3, [r5, #12]
 800cbe0:	065b      	lsls	r3, r3, #25
 800cbe2:	f53f af2d 	bmi.w	800ca40 <_svfiprintf_r+0x28>
 800cbe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbe8:	e72c      	b.n	800ca44 <_svfiprintf_r+0x2c>
 800cbea:	ab03      	add	r3, sp, #12
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <_svfiprintf_r+0x1f0>)
 800cbf2:	a904      	add	r1, sp, #16
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f7fd f81b 	bl	8009c30 <_printf_i>
 800cbfa:	e7ed      	b.n	800cbd8 <_svfiprintf_r+0x1c0>
 800cbfc:	0800dcc9 	.word	0x0800dcc9
 800cc00:	0800dcd3 	.word	0x0800dcd3
 800cc04:	08009721 	.word	0x08009721
 800cc08:	0800c961 	.word	0x0800c961
 800cc0c:	0800dccf 	.word	0x0800dccf

0800cc10 <__sflush_r>:
 800cc10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc18:	0716      	lsls	r6, r2, #28
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	d454      	bmi.n	800ccca <__sflush_r+0xba>
 800cc20:	684b      	ldr	r3, [r1, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	dc02      	bgt.n	800cc2c <__sflush_r+0x1c>
 800cc26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	dd48      	ble.n	800ccbe <__sflush_r+0xae>
 800cc2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc2e:	2e00      	cmp	r6, #0
 800cc30:	d045      	beq.n	800ccbe <__sflush_r+0xae>
 800cc32:	2300      	movs	r3, #0
 800cc34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc38:	682f      	ldr	r7, [r5, #0]
 800cc3a:	6a21      	ldr	r1, [r4, #32]
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	d030      	beq.n	800cca2 <__sflush_r+0x92>
 800cc40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	0759      	lsls	r1, r3, #29
 800cc46:	d505      	bpl.n	800cc54 <__sflush_r+0x44>
 800cc48:	6863      	ldr	r3, [r4, #4]
 800cc4a:	1ad2      	subs	r2, r2, r3
 800cc4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc4e:	b10b      	cbz	r3, 800cc54 <__sflush_r+0x44>
 800cc50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc52:	1ad2      	subs	r2, r2, r3
 800cc54:	2300      	movs	r3, #0
 800cc56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc58:	6a21      	ldr	r1, [r4, #32]
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b0      	blx	r6
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	d106      	bne.n	800cc72 <__sflush_r+0x62>
 800cc64:	6829      	ldr	r1, [r5, #0]
 800cc66:	291d      	cmp	r1, #29
 800cc68:	d82b      	bhi.n	800ccc2 <__sflush_r+0xb2>
 800cc6a:	4a2a      	ldr	r2, [pc, #168]	@ (800cd14 <__sflush_r+0x104>)
 800cc6c:	40ca      	lsrs	r2, r1
 800cc6e:	07d6      	lsls	r6, r2, #31
 800cc70:	d527      	bpl.n	800ccc2 <__sflush_r+0xb2>
 800cc72:	2200      	movs	r2, #0
 800cc74:	6062      	str	r2, [r4, #4]
 800cc76:	04d9      	lsls	r1, r3, #19
 800cc78:	6922      	ldr	r2, [r4, #16]
 800cc7a:	6022      	str	r2, [r4, #0]
 800cc7c:	d504      	bpl.n	800cc88 <__sflush_r+0x78>
 800cc7e:	1c42      	adds	r2, r0, #1
 800cc80:	d101      	bne.n	800cc86 <__sflush_r+0x76>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	b903      	cbnz	r3, 800cc88 <__sflush_r+0x78>
 800cc86:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc8a:	602f      	str	r7, [r5, #0]
 800cc8c:	b1b9      	cbz	r1, 800ccbe <__sflush_r+0xae>
 800cc8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc92:	4299      	cmp	r1, r3
 800cc94:	d002      	beq.n	800cc9c <__sflush_r+0x8c>
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7fe fa84 	bl	800b1a4 <_free_r>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cca0:	e00d      	b.n	800ccbe <__sflush_r+0xae>
 800cca2:	2301      	movs	r3, #1
 800cca4:	4628      	mov	r0, r5
 800cca6:	47b0      	blx	r6
 800cca8:	4602      	mov	r2, r0
 800ccaa:	1c50      	adds	r0, r2, #1
 800ccac:	d1c9      	bne.n	800cc42 <__sflush_r+0x32>
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0c6      	beq.n	800cc42 <__sflush_r+0x32>
 800ccb4:	2b1d      	cmp	r3, #29
 800ccb6:	d001      	beq.n	800ccbc <__sflush_r+0xac>
 800ccb8:	2b16      	cmp	r3, #22
 800ccba:	d11e      	bne.n	800ccfa <__sflush_r+0xea>
 800ccbc:	602f      	str	r7, [r5, #0]
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	e022      	b.n	800cd08 <__sflush_r+0xf8>
 800ccc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccc6:	b21b      	sxth	r3, r3
 800ccc8:	e01b      	b.n	800cd02 <__sflush_r+0xf2>
 800ccca:	690f      	ldr	r7, [r1, #16]
 800cccc:	2f00      	cmp	r7, #0
 800ccce:	d0f6      	beq.n	800ccbe <__sflush_r+0xae>
 800ccd0:	0793      	lsls	r3, r2, #30
 800ccd2:	680e      	ldr	r6, [r1, #0]
 800ccd4:	bf08      	it	eq
 800ccd6:	694b      	ldreq	r3, [r1, #20]
 800ccd8:	600f      	str	r7, [r1, #0]
 800ccda:	bf18      	it	ne
 800ccdc:	2300      	movne	r3, #0
 800ccde:	eba6 0807 	sub.w	r8, r6, r7
 800cce2:	608b      	str	r3, [r1, #8]
 800cce4:	f1b8 0f00 	cmp.w	r8, #0
 800cce8:	dde9      	ble.n	800ccbe <__sflush_r+0xae>
 800ccea:	6a21      	ldr	r1, [r4, #32]
 800ccec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ccee:	4643      	mov	r3, r8
 800ccf0:	463a      	mov	r2, r7
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	47b0      	blx	r6
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	dc08      	bgt.n	800cd0c <__sflush_r+0xfc>
 800ccfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	f04f 30ff 	mov.w	r0, #4294967295
 800cd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd0c:	4407      	add	r7, r0
 800cd0e:	eba8 0800 	sub.w	r8, r8, r0
 800cd12:	e7e7      	b.n	800cce4 <__sflush_r+0xd4>
 800cd14:	20400001 	.word	0x20400001

0800cd18 <_fflush_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	690b      	ldr	r3, [r1, #16]
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	b913      	cbnz	r3, 800cd28 <_fflush_r+0x10>
 800cd22:	2500      	movs	r5, #0
 800cd24:	4628      	mov	r0, r5
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	b118      	cbz	r0, 800cd32 <_fflush_r+0x1a>
 800cd2a:	6a03      	ldr	r3, [r0, #32]
 800cd2c:	b90b      	cbnz	r3, 800cd32 <_fflush_r+0x1a>
 800cd2e:	f7fd fb2f 	bl	800a390 <__sinit>
 800cd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0f3      	beq.n	800cd22 <_fflush_r+0xa>
 800cd3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd3c:	07d0      	lsls	r0, r2, #31
 800cd3e:	d404      	bmi.n	800cd4a <_fflush_r+0x32>
 800cd40:	0599      	lsls	r1, r3, #22
 800cd42:	d402      	bmi.n	800cd4a <_fflush_r+0x32>
 800cd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd46:	f7fd fc3c 	bl	800a5c2 <__retarget_lock_acquire_recursive>
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f7ff ff5f 	bl	800cc10 <__sflush_r>
 800cd52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd54:	07da      	lsls	r2, r3, #31
 800cd56:	4605      	mov	r5, r0
 800cd58:	d4e4      	bmi.n	800cd24 <_fflush_r+0xc>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	059b      	lsls	r3, r3, #22
 800cd5e:	d4e1      	bmi.n	800cd24 <_fflush_r+0xc>
 800cd60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd62:	f7fd fc2f 	bl	800a5c4 <__retarget_lock_release_recursive>
 800cd66:	e7dd      	b.n	800cd24 <_fflush_r+0xc>

0800cd68 <memmove>:
 800cd68:	4288      	cmp	r0, r1
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	eb01 0402 	add.w	r4, r1, r2
 800cd70:	d902      	bls.n	800cd78 <memmove+0x10>
 800cd72:	4284      	cmp	r4, r0
 800cd74:	4623      	mov	r3, r4
 800cd76:	d807      	bhi.n	800cd88 <memmove+0x20>
 800cd78:	1e43      	subs	r3, r0, #1
 800cd7a:	42a1      	cmp	r1, r4
 800cd7c:	d008      	beq.n	800cd90 <memmove+0x28>
 800cd7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd86:	e7f8      	b.n	800cd7a <memmove+0x12>
 800cd88:	4402      	add	r2, r0
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	428a      	cmp	r2, r1
 800cd8e:	d100      	bne.n	800cd92 <memmove+0x2a>
 800cd90:	bd10      	pop	{r4, pc}
 800cd92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd9a:	e7f7      	b.n	800cd8c <memmove+0x24>

0800cd9c <strncmp>:
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	b16a      	cbz	r2, 800cdbc <strncmp+0x20>
 800cda0:	3901      	subs	r1, #1
 800cda2:	1884      	adds	r4, r0, r2
 800cda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d103      	bne.n	800cdb8 <strncmp+0x1c>
 800cdb0:	42a0      	cmp	r0, r4
 800cdb2:	d001      	beq.n	800cdb8 <strncmp+0x1c>
 800cdb4:	2a00      	cmp	r2, #0
 800cdb6:	d1f5      	bne.n	800cda4 <strncmp+0x8>
 800cdb8:	1ad0      	subs	r0, r2, r3
 800cdba:	bd10      	pop	{r4, pc}
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	e7fc      	b.n	800cdba <strncmp+0x1e>

0800cdc0 <_sbrk_r>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	4d06      	ldr	r5, [pc, #24]	@ (800cddc <_sbrk_r+0x1c>)
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	4608      	mov	r0, r1
 800cdca:	602b      	str	r3, [r5, #0]
 800cdcc:	f7f4 fb30 	bl	8001430 <_sbrk>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d102      	bne.n	800cdda <_sbrk_r+0x1a>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b103      	cbz	r3, 800cdda <_sbrk_r+0x1a>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	240005c4 	.word	0x240005c4

0800cde0 <memcpy>:
 800cde0:	440a      	add	r2, r1
 800cde2:	4291      	cmp	r1, r2
 800cde4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cde8:	d100      	bne.n	800cdec <memcpy+0xc>
 800cdea:	4770      	bx	lr
 800cdec:	b510      	push	{r4, lr}
 800cdee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf6:	4291      	cmp	r1, r2
 800cdf8:	d1f9      	bne.n	800cdee <memcpy+0xe>
 800cdfa:	bd10      	pop	{r4, pc}
 800cdfc:	0000      	movs	r0, r0
	...

0800ce00 <nan>:
 800ce00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce08 <nan+0x8>
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	00000000 	.word	0x00000000
 800ce0c:	7ff80000 	.word	0x7ff80000

0800ce10 <__assert_func>:
 800ce10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce12:	4614      	mov	r4, r2
 800ce14:	461a      	mov	r2, r3
 800ce16:	4b09      	ldr	r3, [pc, #36]	@ (800ce3c <__assert_func+0x2c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	68d8      	ldr	r0, [r3, #12]
 800ce1e:	b14c      	cbz	r4, 800ce34 <__assert_func+0x24>
 800ce20:	4b07      	ldr	r3, [pc, #28]	@ (800ce40 <__assert_func+0x30>)
 800ce22:	9100      	str	r1, [sp, #0]
 800ce24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce28:	4906      	ldr	r1, [pc, #24]	@ (800ce44 <__assert_func+0x34>)
 800ce2a:	462b      	mov	r3, r5
 800ce2c:	f000 fba8 	bl	800d580 <fiprintf>
 800ce30:	f000 fbb8 	bl	800d5a4 <abort>
 800ce34:	4b04      	ldr	r3, [pc, #16]	@ (800ce48 <__assert_func+0x38>)
 800ce36:	461c      	mov	r4, r3
 800ce38:	e7f3      	b.n	800ce22 <__assert_func+0x12>
 800ce3a:	bf00      	nop
 800ce3c:	2400001c 	.word	0x2400001c
 800ce40:	0800dce2 	.word	0x0800dce2
 800ce44:	0800dcef 	.word	0x0800dcef
 800ce48:	0800dd1d 	.word	0x0800dd1d

0800ce4c <_calloc_r>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	fba1 5402 	umull	r5, r4, r1, r2
 800ce52:	b934      	cbnz	r4, 800ce62 <_calloc_r+0x16>
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7fe fa19 	bl	800b28c <_malloc_r>
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	b928      	cbnz	r0, 800ce6a <_calloc_r+0x1e>
 800ce5e:	4630      	mov	r0, r6
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
 800ce62:	220c      	movs	r2, #12
 800ce64:	6002      	str	r2, [r0, #0]
 800ce66:	2600      	movs	r6, #0
 800ce68:	e7f9      	b.n	800ce5e <_calloc_r+0x12>
 800ce6a:	462a      	mov	r2, r5
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	f7fd fb2a 	bl	800a4c6 <memset>
 800ce72:	e7f4      	b.n	800ce5e <_calloc_r+0x12>

0800ce74 <rshift>:
 800ce74:	6903      	ldr	r3, [r0, #16]
 800ce76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce82:	f100 0414 	add.w	r4, r0, #20
 800ce86:	dd45      	ble.n	800cf14 <rshift+0xa0>
 800ce88:	f011 011f 	ands.w	r1, r1, #31
 800ce8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce94:	d10c      	bne.n	800ceb0 <rshift+0x3c>
 800ce96:	f100 0710 	add.w	r7, r0, #16
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	42b1      	cmp	r1, r6
 800ce9e:	d334      	bcc.n	800cf0a <rshift+0x96>
 800cea0:	1a9b      	subs	r3, r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	1eea      	subs	r2, r5, #3
 800cea6:	4296      	cmp	r6, r2
 800cea8:	bf38      	it	cc
 800ceaa:	2300      	movcc	r3, #0
 800ceac:	4423      	add	r3, r4
 800ceae:	e015      	b.n	800cedc <rshift+0x68>
 800ceb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ceb4:	f1c1 0820 	rsb	r8, r1, #32
 800ceb8:	40cf      	lsrs	r7, r1
 800ceba:	f105 0e04 	add.w	lr, r5, #4
 800cebe:	46a1      	mov	r9, r4
 800cec0:	4576      	cmp	r6, lr
 800cec2:	46f4      	mov	ip, lr
 800cec4:	d815      	bhi.n	800cef2 <rshift+0x7e>
 800cec6:	1a9a      	subs	r2, r3, r2
 800cec8:	0092      	lsls	r2, r2, #2
 800ceca:	3a04      	subs	r2, #4
 800cecc:	3501      	adds	r5, #1
 800cece:	42ae      	cmp	r6, r5
 800ced0:	bf38      	it	cc
 800ced2:	2200      	movcc	r2, #0
 800ced4:	18a3      	adds	r3, r4, r2
 800ced6:	50a7      	str	r7, [r4, r2]
 800ced8:	b107      	cbz	r7, 800cedc <rshift+0x68>
 800ceda:	3304      	adds	r3, #4
 800cedc:	1b1a      	subs	r2, r3, r4
 800cede:	42a3      	cmp	r3, r4
 800cee0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cee4:	bf08      	it	eq
 800cee6:	2300      	moveq	r3, #0
 800cee8:	6102      	str	r2, [r0, #16]
 800ceea:	bf08      	it	eq
 800ceec:	6143      	streq	r3, [r0, #20]
 800ceee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cef2:	f8dc c000 	ldr.w	ip, [ip]
 800cef6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cefa:	ea4c 0707 	orr.w	r7, ip, r7
 800cefe:	f849 7b04 	str.w	r7, [r9], #4
 800cf02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf06:	40cf      	lsrs	r7, r1
 800cf08:	e7da      	b.n	800cec0 <rshift+0x4c>
 800cf0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf12:	e7c3      	b.n	800ce9c <rshift+0x28>
 800cf14:	4623      	mov	r3, r4
 800cf16:	e7e1      	b.n	800cedc <rshift+0x68>

0800cf18 <__hexdig_fun>:
 800cf18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cf1c:	2b09      	cmp	r3, #9
 800cf1e:	d802      	bhi.n	800cf26 <__hexdig_fun+0xe>
 800cf20:	3820      	subs	r0, #32
 800cf22:	b2c0      	uxtb	r0, r0
 800cf24:	4770      	bx	lr
 800cf26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cf2a:	2b05      	cmp	r3, #5
 800cf2c:	d801      	bhi.n	800cf32 <__hexdig_fun+0x1a>
 800cf2e:	3847      	subs	r0, #71	@ 0x47
 800cf30:	e7f7      	b.n	800cf22 <__hexdig_fun+0xa>
 800cf32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cf36:	2b05      	cmp	r3, #5
 800cf38:	d801      	bhi.n	800cf3e <__hexdig_fun+0x26>
 800cf3a:	3827      	subs	r0, #39	@ 0x27
 800cf3c:	e7f1      	b.n	800cf22 <__hexdig_fun+0xa>
 800cf3e:	2000      	movs	r0, #0
 800cf40:	4770      	bx	lr
	...

0800cf44 <__gethex>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	b085      	sub	sp, #20
 800cf4a:	468a      	mov	sl, r1
 800cf4c:	9302      	str	r3, [sp, #8]
 800cf4e:	680b      	ldr	r3, [r1, #0]
 800cf50:	9001      	str	r0, [sp, #4]
 800cf52:	4690      	mov	r8, r2
 800cf54:	1c9c      	adds	r4, r3, #2
 800cf56:	46a1      	mov	r9, r4
 800cf58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf5c:	2830      	cmp	r0, #48	@ 0x30
 800cf5e:	d0fa      	beq.n	800cf56 <__gethex+0x12>
 800cf60:	eba9 0303 	sub.w	r3, r9, r3
 800cf64:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf68:	f7ff ffd6 	bl	800cf18 <__hexdig_fun>
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d168      	bne.n	800d044 <__gethex+0x100>
 800cf72:	49a0      	ldr	r1, [pc, #640]	@ (800d1f4 <__gethex+0x2b0>)
 800cf74:	2201      	movs	r2, #1
 800cf76:	4648      	mov	r0, r9
 800cf78:	f7ff ff10 	bl	800cd9c <strncmp>
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d167      	bne.n	800d052 <__gethex+0x10e>
 800cf82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf86:	4626      	mov	r6, r4
 800cf88:	f7ff ffc6 	bl	800cf18 <__hexdig_fun>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d062      	beq.n	800d056 <__gethex+0x112>
 800cf90:	4623      	mov	r3, r4
 800cf92:	7818      	ldrb	r0, [r3, #0]
 800cf94:	2830      	cmp	r0, #48	@ 0x30
 800cf96:	4699      	mov	r9, r3
 800cf98:	f103 0301 	add.w	r3, r3, #1
 800cf9c:	d0f9      	beq.n	800cf92 <__gethex+0x4e>
 800cf9e:	f7ff ffbb 	bl	800cf18 <__hexdig_fun>
 800cfa2:	fab0 f580 	clz	r5, r0
 800cfa6:	096d      	lsrs	r5, r5, #5
 800cfa8:	f04f 0b01 	mov.w	fp, #1
 800cfac:	464a      	mov	r2, r9
 800cfae:	4616      	mov	r6, r2
 800cfb0:	3201      	adds	r2, #1
 800cfb2:	7830      	ldrb	r0, [r6, #0]
 800cfb4:	f7ff ffb0 	bl	800cf18 <__hexdig_fun>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d1f8      	bne.n	800cfae <__gethex+0x6a>
 800cfbc:	498d      	ldr	r1, [pc, #564]	@ (800d1f4 <__gethex+0x2b0>)
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7ff feeb 	bl	800cd9c <strncmp>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d13f      	bne.n	800d04a <__gethex+0x106>
 800cfca:	b944      	cbnz	r4, 800cfde <__gethex+0x9a>
 800cfcc:	1c74      	adds	r4, r6, #1
 800cfce:	4622      	mov	r2, r4
 800cfd0:	4616      	mov	r6, r2
 800cfd2:	3201      	adds	r2, #1
 800cfd4:	7830      	ldrb	r0, [r6, #0]
 800cfd6:	f7ff ff9f 	bl	800cf18 <__hexdig_fun>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d1f8      	bne.n	800cfd0 <__gethex+0x8c>
 800cfde:	1ba4      	subs	r4, r4, r6
 800cfe0:	00a7      	lsls	r7, r4, #2
 800cfe2:	7833      	ldrb	r3, [r6, #0]
 800cfe4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cfe8:	2b50      	cmp	r3, #80	@ 0x50
 800cfea:	d13e      	bne.n	800d06a <__gethex+0x126>
 800cfec:	7873      	ldrb	r3, [r6, #1]
 800cfee:	2b2b      	cmp	r3, #43	@ 0x2b
 800cff0:	d033      	beq.n	800d05a <__gethex+0x116>
 800cff2:	2b2d      	cmp	r3, #45	@ 0x2d
 800cff4:	d034      	beq.n	800d060 <__gethex+0x11c>
 800cff6:	1c71      	adds	r1, r6, #1
 800cff8:	2400      	movs	r4, #0
 800cffa:	7808      	ldrb	r0, [r1, #0]
 800cffc:	f7ff ff8c 	bl	800cf18 <__hexdig_fun>
 800d000:	1e43      	subs	r3, r0, #1
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b18      	cmp	r3, #24
 800d006:	d830      	bhi.n	800d06a <__gethex+0x126>
 800d008:	f1a0 0210 	sub.w	r2, r0, #16
 800d00c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d010:	f7ff ff82 	bl	800cf18 <__hexdig_fun>
 800d014:	f100 3cff 	add.w	ip, r0, #4294967295
 800d018:	fa5f fc8c 	uxtb.w	ip, ip
 800d01c:	f1bc 0f18 	cmp.w	ip, #24
 800d020:	f04f 030a 	mov.w	r3, #10
 800d024:	d91e      	bls.n	800d064 <__gethex+0x120>
 800d026:	b104      	cbz	r4, 800d02a <__gethex+0xe6>
 800d028:	4252      	negs	r2, r2
 800d02a:	4417      	add	r7, r2
 800d02c:	f8ca 1000 	str.w	r1, [sl]
 800d030:	b1ed      	cbz	r5, 800d06e <__gethex+0x12a>
 800d032:	f1bb 0f00 	cmp.w	fp, #0
 800d036:	bf0c      	ite	eq
 800d038:	2506      	moveq	r5, #6
 800d03a:	2500      	movne	r5, #0
 800d03c:	4628      	mov	r0, r5
 800d03e:	b005      	add	sp, #20
 800d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d044:	2500      	movs	r5, #0
 800d046:	462c      	mov	r4, r5
 800d048:	e7b0      	b.n	800cfac <__gethex+0x68>
 800d04a:	2c00      	cmp	r4, #0
 800d04c:	d1c7      	bne.n	800cfde <__gethex+0x9a>
 800d04e:	4627      	mov	r7, r4
 800d050:	e7c7      	b.n	800cfe2 <__gethex+0x9e>
 800d052:	464e      	mov	r6, r9
 800d054:	462f      	mov	r7, r5
 800d056:	2501      	movs	r5, #1
 800d058:	e7c3      	b.n	800cfe2 <__gethex+0x9e>
 800d05a:	2400      	movs	r4, #0
 800d05c:	1cb1      	adds	r1, r6, #2
 800d05e:	e7cc      	b.n	800cffa <__gethex+0xb6>
 800d060:	2401      	movs	r4, #1
 800d062:	e7fb      	b.n	800d05c <__gethex+0x118>
 800d064:	fb03 0002 	mla	r0, r3, r2, r0
 800d068:	e7ce      	b.n	800d008 <__gethex+0xc4>
 800d06a:	4631      	mov	r1, r6
 800d06c:	e7de      	b.n	800d02c <__gethex+0xe8>
 800d06e:	eba6 0309 	sub.w	r3, r6, r9
 800d072:	3b01      	subs	r3, #1
 800d074:	4629      	mov	r1, r5
 800d076:	2b07      	cmp	r3, #7
 800d078:	dc0a      	bgt.n	800d090 <__gethex+0x14c>
 800d07a:	9801      	ldr	r0, [sp, #4]
 800d07c:	f7fe f992 	bl	800b3a4 <_Balloc>
 800d080:	4604      	mov	r4, r0
 800d082:	b940      	cbnz	r0, 800d096 <__gethex+0x152>
 800d084:	4b5c      	ldr	r3, [pc, #368]	@ (800d1f8 <__gethex+0x2b4>)
 800d086:	4602      	mov	r2, r0
 800d088:	21e4      	movs	r1, #228	@ 0xe4
 800d08a:	485c      	ldr	r0, [pc, #368]	@ (800d1fc <__gethex+0x2b8>)
 800d08c:	f7ff fec0 	bl	800ce10 <__assert_func>
 800d090:	3101      	adds	r1, #1
 800d092:	105b      	asrs	r3, r3, #1
 800d094:	e7ef      	b.n	800d076 <__gethex+0x132>
 800d096:	f100 0a14 	add.w	sl, r0, #20
 800d09a:	2300      	movs	r3, #0
 800d09c:	4655      	mov	r5, sl
 800d09e:	469b      	mov	fp, r3
 800d0a0:	45b1      	cmp	r9, r6
 800d0a2:	d337      	bcc.n	800d114 <__gethex+0x1d0>
 800d0a4:	f845 bb04 	str.w	fp, [r5], #4
 800d0a8:	eba5 050a 	sub.w	r5, r5, sl
 800d0ac:	10ad      	asrs	r5, r5, #2
 800d0ae:	6125      	str	r5, [r4, #16]
 800d0b0:	4658      	mov	r0, fp
 800d0b2:	f7fe fa69 	bl	800b588 <__hi0bits>
 800d0b6:	016d      	lsls	r5, r5, #5
 800d0b8:	f8d8 6000 	ldr.w	r6, [r8]
 800d0bc:	1a2d      	subs	r5, r5, r0
 800d0be:	42b5      	cmp	r5, r6
 800d0c0:	dd54      	ble.n	800d16c <__gethex+0x228>
 800d0c2:	1bad      	subs	r5, r5, r6
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f7fe fdf2 	bl	800bcb0 <__any_on>
 800d0cc:	4681      	mov	r9, r0
 800d0ce:	b178      	cbz	r0, 800d0f0 <__gethex+0x1ac>
 800d0d0:	1e6b      	subs	r3, r5, #1
 800d0d2:	1159      	asrs	r1, r3, #5
 800d0d4:	f003 021f 	and.w	r2, r3, #31
 800d0d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d0dc:	f04f 0901 	mov.w	r9, #1
 800d0e0:	fa09 f202 	lsl.w	r2, r9, r2
 800d0e4:	420a      	tst	r2, r1
 800d0e6:	d003      	beq.n	800d0f0 <__gethex+0x1ac>
 800d0e8:	454b      	cmp	r3, r9
 800d0ea:	dc36      	bgt.n	800d15a <__gethex+0x216>
 800d0ec:	f04f 0902 	mov.w	r9, #2
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f7ff febe 	bl	800ce74 <rshift>
 800d0f8:	442f      	add	r7, r5
 800d0fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0fe:	42bb      	cmp	r3, r7
 800d100:	da42      	bge.n	800d188 <__gethex+0x244>
 800d102:	9801      	ldr	r0, [sp, #4]
 800d104:	4621      	mov	r1, r4
 800d106:	f7fe f98d 	bl	800b424 <_Bfree>
 800d10a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d10c:	2300      	movs	r3, #0
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	25a3      	movs	r5, #163	@ 0xa3
 800d112:	e793      	b.n	800d03c <__gethex+0xf8>
 800d114:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d118:	2a2e      	cmp	r2, #46	@ 0x2e
 800d11a:	d012      	beq.n	800d142 <__gethex+0x1fe>
 800d11c:	2b20      	cmp	r3, #32
 800d11e:	d104      	bne.n	800d12a <__gethex+0x1e6>
 800d120:	f845 bb04 	str.w	fp, [r5], #4
 800d124:	f04f 0b00 	mov.w	fp, #0
 800d128:	465b      	mov	r3, fp
 800d12a:	7830      	ldrb	r0, [r6, #0]
 800d12c:	9303      	str	r3, [sp, #12]
 800d12e:	f7ff fef3 	bl	800cf18 <__hexdig_fun>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	f000 000f 	and.w	r0, r0, #15
 800d138:	4098      	lsls	r0, r3
 800d13a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d13e:	3304      	adds	r3, #4
 800d140:	e7ae      	b.n	800d0a0 <__gethex+0x15c>
 800d142:	45b1      	cmp	r9, r6
 800d144:	d8ea      	bhi.n	800d11c <__gethex+0x1d8>
 800d146:	492b      	ldr	r1, [pc, #172]	@ (800d1f4 <__gethex+0x2b0>)
 800d148:	9303      	str	r3, [sp, #12]
 800d14a:	2201      	movs	r2, #1
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff fe25 	bl	800cd9c <strncmp>
 800d152:	9b03      	ldr	r3, [sp, #12]
 800d154:	2800      	cmp	r0, #0
 800d156:	d1e1      	bne.n	800d11c <__gethex+0x1d8>
 800d158:	e7a2      	b.n	800d0a0 <__gethex+0x15c>
 800d15a:	1ea9      	subs	r1, r5, #2
 800d15c:	4620      	mov	r0, r4
 800d15e:	f7fe fda7 	bl	800bcb0 <__any_on>
 800d162:	2800      	cmp	r0, #0
 800d164:	d0c2      	beq.n	800d0ec <__gethex+0x1a8>
 800d166:	f04f 0903 	mov.w	r9, #3
 800d16a:	e7c1      	b.n	800d0f0 <__gethex+0x1ac>
 800d16c:	da09      	bge.n	800d182 <__gethex+0x23e>
 800d16e:	1b75      	subs	r5, r6, r5
 800d170:	4621      	mov	r1, r4
 800d172:	9801      	ldr	r0, [sp, #4]
 800d174:	462a      	mov	r2, r5
 800d176:	f7fe fb65 	bl	800b844 <__lshift>
 800d17a:	1b7f      	subs	r7, r7, r5
 800d17c:	4604      	mov	r4, r0
 800d17e:	f100 0a14 	add.w	sl, r0, #20
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	e7b8      	b.n	800d0fa <__gethex+0x1b6>
 800d188:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d18c:	42bd      	cmp	r5, r7
 800d18e:	dd6f      	ble.n	800d270 <__gethex+0x32c>
 800d190:	1bed      	subs	r5, r5, r7
 800d192:	42ae      	cmp	r6, r5
 800d194:	dc34      	bgt.n	800d200 <__gethex+0x2bc>
 800d196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d022      	beq.n	800d1e4 <__gethex+0x2a0>
 800d19e:	2b03      	cmp	r3, #3
 800d1a0:	d024      	beq.n	800d1ec <__gethex+0x2a8>
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d115      	bne.n	800d1d2 <__gethex+0x28e>
 800d1a6:	42ae      	cmp	r6, r5
 800d1a8:	d113      	bne.n	800d1d2 <__gethex+0x28e>
 800d1aa:	2e01      	cmp	r6, #1
 800d1ac:	d10b      	bne.n	800d1c6 <__gethex+0x282>
 800d1ae:	9a02      	ldr	r2, [sp, #8]
 800d1b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	6123      	str	r3, [r4, #16]
 800d1ba:	f8ca 3000 	str.w	r3, [sl]
 800d1be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1c0:	2562      	movs	r5, #98	@ 0x62
 800d1c2:	601c      	str	r4, [r3, #0]
 800d1c4:	e73a      	b.n	800d03c <__gethex+0xf8>
 800d1c6:	1e71      	subs	r1, r6, #1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f7fe fd71 	bl	800bcb0 <__any_on>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d1ed      	bne.n	800d1ae <__gethex+0x26a>
 800d1d2:	9801      	ldr	r0, [sp, #4]
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	f7fe f925 	bl	800b424 <_Bfree>
 800d1da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1dc:	2300      	movs	r3, #0
 800d1de:	6013      	str	r3, [r2, #0]
 800d1e0:	2550      	movs	r5, #80	@ 0x50
 800d1e2:	e72b      	b.n	800d03c <__gethex+0xf8>
 800d1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1f3      	bne.n	800d1d2 <__gethex+0x28e>
 800d1ea:	e7e0      	b.n	800d1ae <__gethex+0x26a>
 800d1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1dd      	bne.n	800d1ae <__gethex+0x26a>
 800d1f2:	e7ee      	b.n	800d1d2 <__gethex+0x28e>
 800d1f4:	0800dcc7 	.word	0x0800dcc7
 800d1f8:	0800dc5d 	.word	0x0800dc5d
 800d1fc:	0800dd1e 	.word	0x0800dd1e
 800d200:	1e6f      	subs	r7, r5, #1
 800d202:	f1b9 0f00 	cmp.w	r9, #0
 800d206:	d130      	bne.n	800d26a <__gethex+0x326>
 800d208:	b127      	cbz	r7, 800d214 <__gethex+0x2d0>
 800d20a:	4639      	mov	r1, r7
 800d20c:	4620      	mov	r0, r4
 800d20e:	f7fe fd4f 	bl	800bcb0 <__any_on>
 800d212:	4681      	mov	r9, r0
 800d214:	117a      	asrs	r2, r7, #5
 800d216:	2301      	movs	r3, #1
 800d218:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d21c:	f007 071f 	and.w	r7, r7, #31
 800d220:	40bb      	lsls	r3, r7
 800d222:	4213      	tst	r3, r2
 800d224:	4629      	mov	r1, r5
 800d226:	4620      	mov	r0, r4
 800d228:	bf18      	it	ne
 800d22a:	f049 0902 	orrne.w	r9, r9, #2
 800d22e:	f7ff fe21 	bl	800ce74 <rshift>
 800d232:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d236:	1b76      	subs	r6, r6, r5
 800d238:	2502      	movs	r5, #2
 800d23a:	f1b9 0f00 	cmp.w	r9, #0
 800d23e:	d047      	beq.n	800d2d0 <__gethex+0x38c>
 800d240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d244:	2b02      	cmp	r3, #2
 800d246:	d015      	beq.n	800d274 <__gethex+0x330>
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d017      	beq.n	800d27c <__gethex+0x338>
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d109      	bne.n	800d264 <__gethex+0x320>
 800d250:	f019 0f02 	tst.w	r9, #2
 800d254:	d006      	beq.n	800d264 <__gethex+0x320>
 800d256:	f8da 3000 	ldr.w	r3, [sl]
 800d25a:	ea49 0903 	orr.w	r9, r9, r3
 800d25e:	f019 0f01 	tst.w	r9, #1
 800d262:	d10e      	bne.n	800d282 <__gethex+0x33e>
 800d264:	f045 0510 	orr.w	r5, r5, #16
 800d268:	e032      	b.n	800d2d0 <__gethex+0x38c>
 800d26a:	f04f 0901 	mov.w	r9, #1
 800d26e:	e7d1      	b.n	800d214 <__gethex+0x2d0>
 800d270:	2501      	movs	r5, #1
 800d272:	e7e2      	b.n	800d23a <__gethex+0x2f6>
 800d274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d276:	f1c3 0301 	rsb	r3, r3, #1
 800d27a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0f0      	beq.n	800d264 <__gethex+0x320>
 800d282:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d286:	f104 0314 	add.w	r3, r4, #20
 800d28a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d28e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d292:	f04f 0c00 	mov.w	ip, #0
 800d296:	4618      	mov	r0, r3
 800d298:	f853 2b04 	ldr.w	r2, [r3], #4
 800d29c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d2a0:	d01b      	beq.n	800d2da <__gethex+0x396>
 800d2a2:	3201      	adds	r2, #1
 800d2a4:	6002      	str	r2, [r0, #0]
 800d2a6:	2d02      	cmp	r5, #2
 800d2a8:	f104 0314 	add.w	r3, r4, #20
 800d2ac:	d13c      	bne.n	800d328 <__gethex+0x3e4>
 800d2ae:	f8d8 2000 	ldr.w	r2, [r8]
 800d2b2:	3a01      	subs	r2, #1
 800d2b4:	42b2      	cmp	r2, r6
 800d2b6:	d109      	bne.n	800d2cc <__gethex+0x388>
 800d2b8:	1171      	asrs	r1, r6, #5
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2c0:	f006 061f 	and.w	r6, r6, #31
 800d2c4:	fa02 f606 	lsl.w	r6, r2, r6
 800d2c8:	421e      	tst	r6, r3
 800d2ca:	d13a      	bne.n	800d342 <__gethex+0x3fe>
 800d2cc:	f045 0520 	orr.w	r5, r5, #32
 800d2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2d2:	601c      	str	r4, [r3, #0]
 800d2d4:	9b02      	ldr	r3, [sp, #8]
 800d2d6:	601f      	str	r7, [r3, #0]
 800d2d8:	e6b0      	b.n	800d03c <__gethex+0xf8>
 800d2da:	4299      	cmp	r1, r3
 800d2dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2e0:	d8d9      	bhi.n	800d296 <__gethex+0x352>
 800d2e2:	68a3      	ldr	r3, [r4, #8]
 800d2e4:	459b      	cmp	fp, r3
 800d2e6:	db17      	blt.n	800d318 <__gethex+0x3d4>
 800d2e8:	6861      	ldr	r1, [r4, #4]
 800d2ea:	9801      	ldr	r0, [sp, #4]
 800d2ec:	3101      	adds	r1, #1
 800d2ee:	f7fe f859 	bl	800b3a4 <_Balloc>
 800d2f2:	4681      	mov	r9, r0
 800d2f4:	b918      	cbnz	r0, 800d2fe <__gethex+0x3ba>
 800d2f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d360 <__gethex+0x41c>)
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	2184      	movs	r1, #132	@ 0x84
 800d2fc:	e6c5      	b.n	800d08a <__gethex+0x146>
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	3202      	adds	r2, #2
 800d302:	f104 010c 	add.w	r1, r4, #12
 800d306:	0092      	lsls	r2, r2, #2
 800d308:	300c      	adds	r0, #12
 800d30a:	f7ff fd69 	bl	800cde0 <memcpy>
 800d30e:	4621      	mov	r1, r4
 800d310:	9801      	ldr	r0, [sp, #4]
 800d312:	f7fe f887 	bl	800b424 <_Bfree>
 800d316:	464c      	mov	r4, r9
 800d318:	6923      	ldr	r3, [r4, #16]
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d320:	6122      	str	r2, [r4, #16]
 800d322:	2201      	movs	r2, #1
 800d324:	615a      	str	r2, [r3, #20]
 800d326:	e7be      	b.n	800d2a6 <__gethex+0x362>
 800d328:	6922      	ldr	r2, [r4, #16]
 800d32a:	455a      	cmp	r2, fp
 800d32c:	dd0b      	ble.n	800d346 <__gethex+0x402>
 800d32e:	2101      	movs	r1, #1
 800d330:	4620      	mov	r0, r4
 800d332:	f7ff fd9f 	bl	800ce74 <rshift>
 800d336:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d33a:	3701      	adds	r7, #1
 800d33c:	42bb      	cmp	r3, r7
 800d33e:	f6ff aee0 	blt.w	800d102 <__gethex+0x1be>
 800d342:	2501      	movs	r5, #1
 800d344:	e7c2      	b.n	800d2cc <__gethex+0x388>
 800d346:	f016 061f 	ands.w	r6, r6, #31
 800d34a:	d0fa      	beq.n	800d342 <__gethex+0x3fe>
 800d34c:	4453      	add	r3, sl
 800d34e:	f1c6 0620 	rsb	r6, r6, #32
 800d352:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d356:	f7fe f917 	bl	800b588 <__hi0bits>
 800d35a:	42b0      	cmp	r0, r6
 800d35c:	dbe7      	blt.n	800d32e <__gethex+0x3ea>
 800d35e:	e7f0      	b.n	800d342 <__gethex+0x3fe>
 800d360:	0800dc5d 	.word	0x0800dc5d

0800d364 <L_shift>:
 800d364:	f1c2 0208 	rsb	r2, r2, #8
 800d368:	0092      	lsls	r2, r2, #2
 800d36a:	b570      	push	{r4, r5, r6, lr}
 800d36c:	f1c2 0620 	rsb	r6, r2, #32
 800d370:	6843      	ldr	r3, [r0, #4]
 800d372:	6804      	ldr	r4, [r0, #0]
 800d374:	fa03 f506 	lsl.w	r5, r3, r6
 800d378:	432c      	orrs	r4, r5
 800d37a:	40d3      	lsrs	r3, r2
 800d37c:	6004      	str	r4, [r0, #0]
 800d37e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d382:	4288      	cmp	r0, r1
 800d384:	d3f4      	bcc.n	800d370 <L_shift+0xc>
 800d386:	bd70      	pop	{r4, r5, r6, pc}

0800d388 <__match>:
 800d388:	b530      	push	{r4, r5, lr}
 800d38a:	6803      	ldr	r3, [r0, #0]
 800d38c:	3301      	adds	r3, #1
 800d38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d392:	b914      	cbnz	r4, 800d39a <__match+0x12>
 800d394:	6003      	str	r3, [r0, #0]
 800d396:	2001      	movs	r0, #1
 800d398:	bd30      	pop	{r4, r5, pc}
 800d39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d39e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d3a2:	2d19      	cmp	r5, #25
 800d3a4:	bf98      	it	ls
 800d3a6:	3220      	addls	r2, #32
 800d3a8:	42a2      	cmp	r2, r4
 800d3aa:	d0f0      	beq.n	800d38e <__match+0x6>
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	e7f3      	b.n	800d398 <__match+0x10>

0800d3b0 <__hexnan>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	680b      	ldr	r3, [r1, #0]
 800d3b6:	6801      	ldr	r1, [r0, #0]
 800d3b8:	115e      	asrs	r6, r3, #5
 800d3ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3be:	f013 031f 	ands.w	r3, r3, #31
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	bf18      	it	ne
 800d3c6:	3604      	addne	r6, #4
 800d3c8:	2500      	movs	r5, #0
 800d3ca:	1f37      	subs	r7, r6, #4
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	4690      	mov	r8, r2
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3d6:	46b9      	mov	r9, r7
 800d3d8:	463c      	mov	r4, r7
 800d3da:	9502      	str	r5, [sp, #8]
 800d3dc:	46ab      	mov	fp, r5
 800d3de:	784a      	ldrb	r2, [r1, #1]
 800d3e0:	1c4b      	adds	r3, r1, #1
 800d3e2:	9303      	str	r3, [sp, #12]
 800d3e4:	b342      	cbz	r2, 800d438 <__hexnan+0x88>
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	9105      	str	r1, [sp, #20]
 800d3ea:	9204      	str	r2, [sp, #16]
 800d3ec:	f7ff fd94 	bl	800cf18 <__hexdig_fun>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d151      	bne.n	800d498 <__hexnan+0xe8>
 800d3f4:	9a04      	ldr	r2, [sp, #16]
 800d3f6:	9905      	ldr	r1, [sp, #20]
 800d3f8:	2a20      	cmp	r2, #32
 800d3fa:	d818      	bhi.n	800d42e <__hexnan+0x7e>
 800d3fc:	9b02      	ldr	r3, [sp, #8]
 800d3fe:	459b      	cmp	fp, r3
 800d400:	dd13      	ble.n	800d42a <__hexnan+0x7a>
 800d402:	454c      	cmp	r4, r9
 800d404:	d206      	bcs.n	800d414 <__hexnan+0x64>
 800d406:	2d07      	cmp	r5, #7
 800d408:	dc04      	bgt.n	800d414 <__hexnan+0x64>
 800d40a:	462a      	mov	r2, r5
 800d40c:	4649      	mov	r1, r9
 800d40e:	4620      	mov	r0, r4
 800d410:	f7ff ffa8 	bl	800d364 <L_shift>
 800d414:	4544      	cmp	r4, r8
 800d416:	d952      	bls.n	800d4be <__hexnan+0x10e>
 800d418:	2300      	movs	r3, #0
 800d41a:	f1a4 0904 	sub.w	r9, r4, #4
 800d41e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d422:	f8cd b008 	str.w	fp, [sp, #8]
 800d426:	464c      	mov	r4, r9
 800d428:	461d      	mov	r5, r3
 800d42a:	9903      	ldr	r1, [sp, #12]
 800d42c:	e7d7      	b.n	800d3de <__hexnan+0x2e>
 800d42e:	2a29      	cmp	r2, #41	@ 0x29
 800d430:	d157      	bne.n	800d4e2 <__hexnan+0x132>
 800d432:	3102      	adds	r1, #2
 800d434:	f8ca 1000 	str.w	r1, [sl]
 800d438:	f1bb 0f00 	cmp.w	fp, #0
 800d43c:	d051      	beq.n	800d4e2 <__hexnan+0x132>
 800d43e:	454c      	cmp	r4, r9
 800d440:	d206      	bcs.n	800d450 <__hexnan+0xa0>
 800d442:	2d07      	cmp	r5, #7
 800d444:	dc04      	bgt.n	800d450 <__hexnan+0xa0>
 800d446:	462a      	mov	r2, r5
 800d448:	4649      	mov	r1, r9
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7ff ff8a 	bl	800d364 <L_shift>
 800d450:	4544      	cmp	r4, r8
 800d452:	d936      	bls.n	800d4c2 <__hexnan+0x112>
 800d454:	f1a8 0204 	sub.w	r2, r8, #4
 800d458:	4623      	mov	r3, r4
 800d45a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d45e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d462:	429f      	cmp	r7, r3
 800d464:	d2f9      	bcs.n	800d45a <__hexnan+0xaa>
 800d466:	1b3b      	subs	r3, r7, r4
 800d468:	f023 0303 	bic.w	r3, r3, #3
 800d46c:	3304      	adds	r3, #4
 800d46e:	3401      	adds	r4, #1
 800d470:	3e03      	subs	r6, #3
 800d472:	42b4      	cmp	r4, r6
 800d474:	bf88      	it	hi
 800d476:	2304      	movhi	r3, #4
 800d478:	4443      	add	r3, r8
 800d47a:	2200      	movs	r2, #0
 800d47c:	f843 2b04 	str.w	r2, [r3], #4
 800d480:	429f      	cmp	r7, r3
 800d482:	d2fb      	bcs.n	800d47c <__hexnan+0xcc>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	b91b      	cbnz	r3, 800d490 <__hexnan+0xe0>
 800d488:	4547      	cmp	r7, r8
 800d48a:	d128      	bne.n	800d4de <__hexnan+0x12e>
 800d48c:	2301      	movs	r3, #1
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	2005      	movs	r0, #5
 800d492:	b007      	add	sp, #28
 800d494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d498:	3501      	adds	r5, #1
 800d49a:	2d08      	cmp	r5, #8
 800d49c:	f10b 0b01 	add.w	fp, fp, #1
 800d4a0:	dd06      	ble.n	800d4b0 <__hexnan+0x100>
 800d4a2:	4544      	cmp	r4, r8
 800d4a4:	d9c1      	bls.n	800d42a <__hexnan+0x7a>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4ac:	2501      	movs	r5, #1
 800d4ae:	3c04      	subs	r4, #4
 800d4b0:	6822      	ldr	r2, [r4, #0]
 800d4b2:	f000 000f 	and.w	r0, r0, #15
 800d4b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d4ba:	6020      	str	r0, [r4, #0]
 800d4bc:	e7b5      	b.n	800d42a <__hexnan+0x7a>
 800d4be:	2508      	movs	r5, #8
 800d4c0:	e7b3      	b.n	800d42a <__hexnan+0x7a>
 800d4c2:	9b01      	ldr	r3, [sp, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d0dd      	beq.n	800d484 <__hexnan+0xd4>
 800d4c8:	f1c3 0320 	rsb	r3, r3, #32
 800d4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d0:	40da      	lsrs	r2, r3
 800d4d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d4dc:	e7d2      	b.n	800d484 <__hexnan+0xd4>
 800d4de:	3f04      	subs	r7, #4
 800d4e0:	e7d0      	b.n	800d484 <__hexnan+0xd4>
 800d4e2:	2004      	movs	r0, #4
 800d4e4:	e7d5      	b.n	800d492 <__hexnan+0xe2>

0800d4e6 <__ascii_mbtowc>:
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	b901      	cbnz	r1, 800d4ec <__ascii_mbtowc+0x6>
 800d4ea:	a901      	add	r1, sp, #4
 800d4ec:	b142      	cbz	r2, 800d500 <__ascii_mbtowc+0x1a>
 800d4ee:	b14b      	cbz	r3, 800d504 <__ascii_mbtowc+0x1e>
 800d4f0:	7813      	ldrb	r3, [r2, #0]
 800d4f2:	600b      	str	r3, [r1, #0]
 800d4f4:	7812      	ldrb	r2, [r2, #0]
 800d4f6:	1e10      	subs	r0, r2, #0
 800d4f8:	bf18      	it	ne
 800d4fa:	2001      	movne	r0, #1
 800d4fc:	b002      	add	sp, #8
 800d4fe:	4770      	bx	lr
 800d500:	4610      	mov	r0, r2
 800d502:	e7fb      	b.n	800d4fc <__ascii_mbtowc+0x16>
 800d504:	f06f 0001 	mvn.w	r0, #1
 800d508:	e7f8      	b.n	800d4fc <__ascii_mbtowc+0x16>

0800d50a <_realloc_r>:
 800d50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d50e:	4607      	mov	r7, r0
 800d510:	4614      	mov	r4, r2
 800d512:	460d      	mov	r5, r1
 800d514:	b921      	cbnz	r1, 800d520 <_realloc_r+0x16>
 800d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d51a:	4611      	mov	r1, r2
 800d51c:	f7fd beb6 	b.w	800b28c <_malloc_r>
 800d520:	b92a      	cbnz	r2, 800d52e <_realloc_r+0x24>
 800d522:	f7fd fe3f 	bl	800b1a4 <_free_r>
 800d526:	4625      	mov	r5, r4
 800d528:	4628      	mov	r0, r5
 800d52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d52e:	f000 f840 	bl	800d5b2 <_malloc_usable_size_r>
 800d532:	4284      	cmp	r4, r0
 800d534:	4606      	mov	r6, r0
 800d536:	d802      	bhi.n	800d53e <_realloc_r+0x34>
 800d538:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d53c:	d8f4      	bhi.n	800d528 <_realloc_r+0x1e>
 800d53e:	4621      	mov	r1, r4
 800d540:	4638      	mov	r0, r7
 800d542:	f7fd fea3 	bl	800b28c <_malloc_r>
 800d546:	4680      	mov	r8, r0
 800d548:	b908      	cbnz	r0, 800d54e <_realloc_r+0x44>
 800d54a:	4645      	mov	r5, r8
 800d54c:	e7ec      	b.n	800d528 <_realloc_r+0x1e>
 800d54e:	42b4      	cmp	r4, r6
 800d550:	4622      	mov	r2, r4
 800d552:	4629      	mov	r1, r5
 800d554:	bf28      	it	cs
 800d556:	4632      	movcs	r2, r6
 800d558:	f7ff fc42 	bl	800cde0 <memcpy>
 800d55c:	4629      	mov	r1, r5
 800d55e:	4638      	mov	r0, r7
 800d560:	f7fd fe20 	bl	800b1a4 <_free_r>
 800d564:	e7f1      	b.n	800d54a <_realloc_r+0x40>

0800d566 <__ascii_wctomb>:
 800d566:	4603      	mov	r3, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	b141      	cbz	r1, 800d57e <__ascii_wctomb+0x18>
 800d56c:	2aff      	cmp	r2, #255	@ 0xff
 800d56e:	d904      	bls.n	800d57a <__ascii_wctomb+0x14>
 800d570:	228a      	movs	r2, #138	@ 0x8a
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	f04f 30ff 	mov.w	r0, #4294967295
 800d578:	4770      	bx	lr
 800d57a:	700a      	strb	r2, [r1, #0]
 800d57c:	2001      	movs	r0, #1
 800d57e:	4770      	bx	lr

0800d580 <fiprintf>:
 800d580:	b40e      	push	{r1, r2, r3}
 800d582:	b503      	push	{r0, r1, lr}
 800d584:	4601      	mov	r1, r0
 800d586:	ab03      	add	r3, sp, #12
 800d588:	4805      	ldr	r0, [pc, #20]	@ (800d5a0 <fiprintf+0x20>)
 800d58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d58e:	6800      	ldr	r0, [r0, #0]
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	f000 f83f 	bl	800d614 <_vfiprintf_r>
 800d596:	b002      	add	sp, #8
 800d598:	f85d eb04 	ldr.w	lr, [sp], #4
 800d59c:	b003      	add	sp, #12
 800d59e:	4770      	bx	lr
 800d5a0:	2400001c 	.word	0x2400001c

0800d5a4 <abort>:
 800d5a4:	b508      	push	{r3, lr}
 800d5a6:	2006      	movs	r0, #6
 800d5a8:	f000 fa08 	bl	800d9bc <raise>
 800d5ac:	2001      	movs	r0, #1
 800d5ae:	f7f3 fec7 	bl	8001340 <_exit>

0800d5b2 <_malloc_usable_size_r>:
 800d5b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b6:	1f18      	subs	r0, r3, #4
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfbc      	itt	lt
 800d5bc:	580b      	ldrlt	r3, [r1, r0]
 800d5be:	18c0      	addlt	r0, r0, r3
 800d5c0:	4770      	bx	lr

0800d5c2 <__sfputc_r>:
 800d5c2:	6893      	ldr	r3, [r2, #8]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	b410      	push	{r4}
 800d5ca:	6093      	str	r3, [r2, #8]
 800d5cc:	da08      	bge.n	800d5e0 <__sfputc_r+0x1e>
 800d5ce:	6994      	ldr	r4, [r2, #24]
 800d5d0:	42a3      	cmp	r3, r4
 800d5d2:	db01      	blt.n	800d5d8 <__sfputc_r+0x16>
 800d5d4:	290a      	cmp	r1, #10
 800d5d6:	d103      	bne.n	800d5e0 <__sfputc_r+0x1e>
 800d5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5dc:	f000 b932 	b.w	800d844 <__swbuf_r>
 800d5e0:	6813      	ldr	r3, [r2, #0]
 800d5e2:	1c58      	adds	r0, r3, #1
 800d5e4:	6010      	str	r0, [r2, #0]
 800d5e6:	7019      	strb	r1, [r3, #0]
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <__sfputs_r>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	4614      	mov	r4, r2
 800d5f8:	18d5      	adds	r5, r2, r3
 800d5fa:	42ac      	cmp	r4, r5
 800d5fc:	d101      	bne.n	800d602 <__sfputs_r+0x12>
 800d5fe:	2000      	movs	r0, #0
 800d600:	e007      	b.n	800d612 <__sfputs_r+0x22>
 800d602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d606:	463a      	mov	r2, r7
 800d608:	4630      	mov	r0, r6
 800d60a:	f7ff ffda 	bl	800d5c2 <__sfputc_r>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	d1f3      	bne.n	800d5fa <__sfputs_r+0xa>
 800d612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d614 <_vfiprintf_r>:
 800d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	460d      	mov	r5, r1
 800d61a:	b09d      	sub	sp, #116	@ 0x74
 800d61c:	4614      	mov	r4, r2
 800d61e:	4698      	mov	r8, r3
 800d620:	4606      	mov	r6, r0
 800d622:	b118      	cbz	r0, 800d62c <_vfiprintf_r+0x18>
 800d624:	6a03      	ldr	r3, [r0, #32]
 800d626:	b90b      	cbnz	r3, 800d62c <_vfiprintf_r+0x18>
 800d628:	f7fc feb2 	bl	800a390 <__sinit>
 800d62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d62e:	07d9      	lsls	r1, r3, #31
 800d630:	d405      	bmi.n	800d63e <_vfiprintf_r+0x2a>
 800d632:	89ab      	ldrh	r3, [r5, #12]
 800d634:	059a      	lsls	r2, r3, #22
 800d636:	d402      	bmi.n	800d63e <_vfiprintf_r+0x2a>
 800d638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d63a:	f7fc ffc2 	bl	800a5c2 <__retarget_lock_acquire_recursive>
 800d63e:	89ab      	ldrh	r3, [r5, #12]
 800d640:	071b      	lsls	r3, r3, #28
 800d642:	d501      	bpl.n	800d648 <_vfiprintf_r+0x34>
 800d644:	692b      	ldr	r3, [r5, #16]
 800d646:	b99b      	cbnz	r3, 800d670 <_vfiprintf_r+0x5c>
 800d648:	4629      	mov	r1, r5
 800d64a:	4630      	mov	r0, r6
 800d64c:	f000 f938 	bl	800d8c0 <__swsetup_r>
 800d650:	b170      	cbz	r0, 800d670 <_vfiprintf_r+0x5c>
 800d652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d654:	07dc      	lsls	r4, r3, #31
 800d656:	d504      	bpl.n	800d662 <_vfiprintf_r+0x4e>
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	b01d      	add	sp, #116	@ 0x74
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	0598      	lsls	r0, r3, #22
 800d666:	d4f7      	bmi.n	800d658 <_vfiprintf_r+0x44>
 800d668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d66a:	f7fc ffab 	bl	800a5c4 <__retarget_lock_release_recursive>
 800d66e:	e7f3      	b.n	800d658 <_vfiprintf_r+0x44>
 800d670:	2300      	movs	r3, #0
 800d672:	9309      	str	r3, [sp, #36]	@ 0x24
 800d674:	2320      	movs	r3, #32
 800d676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d67e:	2330      	movs	r3, #48	@ 0x30
 800d680:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d830 <_vfiprintf_r+0x21c>
 800d684:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d688:	f04f 0901 	mov.w	r9, #1
 800d68c:	4623      	mov	r3, r4
 800d68e:	469a      	mov	sl, r3
 800d690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d694:	b10a      	cbz	r2, 800d69a <_vfiprintf_r+0x86>
 800d696:	2a25      	cmp	r2, #37	@ 0x25
 800d698:	d1f9      	bne.n	800d68e <_vfiprintf_r+0x7a>
 800d69a:	ebba 0b04 	subs.w	fp, sl, r4
 800d69e:	d00b      	beq.n	800d6b8 <_vfiprintf_r+0xa4>
 800d6a0:	465b      	mov	r3, fp
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f7ff ffa2 	bl	800d5f0 <__sfputs_r>
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	f000 80a7 	beq.w	800d800 <_vfiprintf_r+0x1ec>
 800d6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6b4:	445a      	add	r2, fp
 800d6b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 809f 	beq.w	800d800 <_vfiprintf_r+0x1ec>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6cc:	f10a 0a01 	add.w	sl, sl, #1
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	9307      	str	r3, [sp, #28]
 800d6d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6da:	4654      	mov	r4, sl
 800d6dc:	2205      	movs	r2, #5
 800d6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e2:	4853      	ldr	r0, [pc, #332]	@ (800d830 <_vfiprintf_r+0x21c>)
 800d6e4:	f7f2 fdfc 	bl	80002e0 <memchr>
 800d6e8:	9a04      	ldr	r2, [sp, #16]
 800d6ea:	b9d8      	cbnz	r0, 800d724 <_vfiprintf_r+0x110>
 800d6ec:	06d1      	lsls	r1, r2, #27
 800d6ee:	bf44      	itt	mi
 800d6f0:	2320      	movmi	r3, #32
 800d6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6f6:	0713      	lsls	r3, r2, #28
 800d6f8:	bf44      	itt	mi
 800d6fa:	232b      	movmi	r3, #43	@ 0x2b
 800d6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d700:	f89a 3000 	ldrb.w	r3, [sl]
 800d704:	2b2a      	cmp	r3, #42	@ 0x2a
 800d706:	d015      	beq.n	800d734 <_vfiprintf_r+0x120>
 800d708:	9a07      	ldr	r2, [sp, #28]
 800d70a:	4654      	mov	r4, sl
 800d70c:	2000      	movs	r0, #0
 800d70e:	f04f 0c0a 	mov.w	ip, #10
 800d712:	4621      	mov	r1, r4
 800d714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d718:	3b30      	subs	r3, #48	@ 0x30
 800d71a:	2b09      	cmp	r3, #9
 800d71c:	d94b      	bls.n	800d7b6 <_vfiprintf_r+0x1a2>
 800d71e:	b1b0      	cbz	r0, 800d74e <_vfiprintf_r+0x13a>
 800d720:	9207      	str	r2, [sp, #28]
 800d722:	e014      	b.n	800d74e <_vfiprintf_r+0x13a>
 800d724:	eba0 0308 	sub.w	r3, r0, r8
 800d728:	fa09 f303 	lsl.w	r3, r9, r3
 800d72c:	4313      	orrs	r3, r2
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	46a2      	mov	sl, r4
 800d732:	e7d2      	b.n	800d6da <_vfiprintf_r+0xc6>
 800d734:	9b03      	ldr	r3, [sp, #12]
 800d736:	1d19      	adds	r1, r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	9103      	str	r1, [sp, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	bfbb      	ittet	lt
 800d740:	425b      	neglt	r3, r3
 800d742:	f042 0202 	orrlt.w	r2, r2, #2
 800d746:	9307      	strge	r3, [sp, #28]
 800d748:	9307      	strlt	r3, [sp, #28]
 800d74a:	bfb8      	it	lt
 800d74c:	9204      	strlt	r2, [sp, #16]
 800d74e:	7823      	ldrb	r3, [r4, #0]
 800d750:	2b2e      	cmp	r3, #46	@ 0x2e
 800d752:	d10a      	bne.n	800d76a <_vfiprintf_r+0x156>
 800d754:	7863      	ldrb	r3, [r4, #1]
 800d756:	2b2a      	cmp	r3, #42	@ 0x2a
 800d758:	d132      	bne.n	800d7c0 <_vfiprintf_r+0x1ac>
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	1d1a      	adds	r2, r3, #4
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	9203      	str	r2, [sp, #12]
 800d762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d766:	3402      	adds	r4, #2
 800d768:	9305      	str	r3, [sp, #20]
 800d76a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d840 <_vfiprintf_r+0x22c>
 800d76e:	7821      	ldrb	r1, [r4, #0]
 800d770:	2203      	movs	r2, #3
 800d772:	4650      	mov	r0, sl
 800d774:	f7f2 fdb4 	bl	80002e0 <memchr>
 800d778:	b138      	cbz	r0, 800d78a <_vfiprintf_r+0x176>
 800d77a:	9b04      	ldr	r3, [sp, #16]
 800d77c:	eba0 000a 	sub.w	r0, r0, sl
 800d780:	2240      	movs	r2, #64	@ 0x40
 800d782:	4082      	lsls	r2, r0
 800d784:	4313      	orrs	r3, r2
 800d786:	3401      	adds	r4, #1
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78e:	4829      	ldr	r0, [pc, #164]	@ (800d834 <_vfiprintf_r+0x220>)
 800d790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d794:	2206      	movs	r2, #6
 800d796:	f7f2 fda3 	bl	80002e0 <memchr>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d03f      	beq.n	800d81e <_vfiprintf_r+0x20a>
 800d79e:	4b26      	ldr	r3, [pc, #152]	@ (800d838 <_vfiprintf_r+0x224>)
 800d7a0:	bb1b      	cbnz	r3, 800d7ea <_vfiprintf_r+0x1d6>
 800d7a2:	9b03      	ldr	r3, [sp, #12]
 800d7a4:	3307      	adds	r3, #7
 800d7a6:	f023 0307 	bic.w	r3, r3, #7
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	9303      	str	r3, [sp, #12]
 800d7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b0:	443b      	add	r3, r7
 800d7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7b4:	e76a      	b.n	800d68c <_vfiprintf_r+0x78>
 800d7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ba:	460c      	mov	r4, r1
 800d7bc:	2001      	movs	r0, #1
 800d7be:	e7a8      	b.n	800d712 <_vfiprintf_r+0xfe>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	3401      	adds	r4, #1
 800d7c4:	9305      	str	r3, [sp, #20]
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	f04f 0c0a 	mov.w	ip, #10
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7d2:	3a30      	subs	r2, #48	@ 0x30
 800d7d4:	2a09      	cmp	r2, #9
 800d7d6:	d903      	bls.n	800d7e0 <_vfiprintf_r+0x1cc>
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d0c6      	beq.n	800d76a <_vfiprintf_r+0x156>
 800d7dc:	9105      	str	r1, [sp, #20]
 800d7de:	e7c4      	b.n	800d76a <_vfiprintf_r+0x156>
 800d7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e7f0      	b.n	800d7cc <_vfiprintf_r+0x1b8>
 800d7ea:	ab03      	add	r3, sp, #12
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	462a      	mov	r2, r5
 800d7f0:	4b12      	ldr	r3, [pc, #72]	@ (800d83c <_vfiprintf_r+0x228>)
 800d7f2:	a904      	add	r1, sp, #16
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7fb ff93 	bl	8009720 <_printf_float>
 800d7fa:	4607      	mov	r7, r0
 800d7fc:	1c78      	adds	r0, r7, #1
 800d7fe:	d1d6      	bne.n	800d7ae <_vfiprintf_r+0x19a>
 800d800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d802:	07d9      	lsls	r1, r3, #31
 800d804:	d405      	bmi.n	800d812 <_vfiprintf_r+0x1fe>
 800d806:	89ab      	ldrh	r3, [r5, #12]
 800d808:	059a      	lsls	r2, r3, #22
 800d80a:	d402      	bmi.n	800d812 <_vfiprintf_r+0x1fe>
 800d80c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d80e:	f7fc fed9 	bl	800a5c4 <__retarget_lock_release_recursive>
 800d812:	89ab      	ldrh	r3, [r5, #12]
 800d814:	065b      	lsls	r3, r3, #25
 800d816:	f53f af1f 	bmi.w	800d658 <_vfiprintf_r+0x44>
 800d81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d81c:	e71e      	b.n	800d65c <_vfiprintf_r+0x48>
 800d81e:	ab03      	add	r3, sp, #12
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	462a      	mov	r2, r5
 800d824:	4b05      	ldr	r3, [pc, #20]	@ (800d83c <_vfiprintf_r+0x228>)
 800d826:	a904      	add	r1, sp, #16
 800d828:	4630      	mov	r0, r6
 800d82a:	f7fc fa01 	bl	8009c30 <_printf_i>
 800d82e:	e7e4      	b.n	800d7fa <_vfiprintf_r+0x1e6>
 800d830:	0800dcc9 	.word	0x0800dcc9
 800d834:	0800dcd3 	.word	0x0800dcd3
 800d838:	08009721 	.word	0x08009721
 800d83c:	0800d5f1 	.word	0x0800d5f1
 800d840:	0800dccf 	.word	0x0800dccf

0800d844 <__swbuf_r>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	460e      	mov	r6, r1
 800d848:	4614      	mov	r4, r2
 800d84a:	4605      	mov	r5, r0
 800d84c:	b118      	cbz	r0, 800d856 <__swbuf_r+0x12>
 800d84e:	6a03      	ldr	r3, [r0, #32]
 800d850:	b90b      	cbnz	r3, 800d856 <__swbuf_r+0x12>
 800d852:	f7fc fd9d 	bl	800a390 <__sinit>
 800d856:	69a3      	ldr	r3, [r4, #24]
 800d858:	60a3      	str	r3, [r4, #8]
 800d85a:	89a3      	ldrh	r3, [r4, #12]
 800d85c:	071a      	lsls	r2, r3, #28
 800d85e:	d501      	bpl.n	800d864 <__swbuf_r+0x20>
 800d860:	6923      	ldr	r3, [r4, #16]
 800d862:	b943      	cbnz	r3, 800d876 <__swbuf_r+0x32>
 800d864:	4621      	mov	r1, r4
 800d866:	4628      	mov	r0, r5
 800d868:	f000 f82a 	bl	800d8c0 <__swsetup_r>
 800d86c:	b118      	cbz	r0, 800d876 <__swbuf_r+0x32>
 800d86e:	f04f 37ff 	mov.w	r7, #4294967295
 800d872:	4638      	mov	r0, r7
 800d874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	6922      	ldr	r2, [r4, #16]
 800d87a:	1a98      	subs	r0, r3, r2
 800d87c:	6963      	ldr	r3, [r4, #20]
 800d87e:	b2f6      	uxtb	r6, r6
 800d880:	4283      	cmp	r3, r0
 800d882:	4637      	mov	r7, r6
 800d884:	dc05      	bgt.n	800d892 <__swbuf_r+0x4e>
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	f7ff fa45 	bl	800cd18 <_fflush_r>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d1ed      	bne.n	800d86e <__swbuf_r+0x2a>
 800d892:	68a3      	ldr	r3, [r4, #8]
 800d894:	3b01      	subs	r3, #1
 800d896:	60a3      	str	r3, [r4, #8]
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	6022      	str	r2, [r4, #0]
 800d89e:	701e      	strb	r6, [r3, #0]
 800d8a0:	6962      	ldr	r2, [r4, #20]
 800d8a2:	1c43      	adds	r3, r0, #1
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d004      	beq.n	800d8b2 <__swbuf_r+0x6e>
 800d8a8:	89a3      	ldrh	r3, [r4, #12]
 800d8aa:	07db      	lsls	r3, r3, #31
 800d8ac:	d5e1      	bpl.n	800d872 <__swbuf_r+0x2e>
 800d8ae:	2e0a      	cmp	r6, #10
 800d8b0:	d1df      	bne.n	800d872 <__swbuf_r+0x2e>
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f7ff fa2f 	bl	800cd18 <_fflush_r>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d0d9      	beq.n	800d872 <__swbuf_r+0x2e>
 800d8be:	e7d6      	b.n	800d86e <__swbuf_r+0x2a>

0800d8c0 <__swsetup_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	4b29      	ldr	r3, [pc, #164]	@ (800d968 <__swsetup_r+0xa8>)
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	b118      	cbz	r0, 800d8d4 <__swsetup_r+0x14>
 800d8cc:	6a03      	ldr	r3, [r0, #32]
 800d8ce:	b90b      	cbnz	r3, 800d8d4 <__swsetup_r+0x14>
 800d8d0:	f7fc fd5e 	bl	800a390 <__sinit>
 800d8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d8:	0719      	lsls	r1, r3, #28
 800d8da:	d422      	bmi.n	800d922 <__swsetup_r+0x62>
 800d8dc:	06da      	lsls	r2, r3, #27
 800d8de:	d407      	bmi.n	800d8f0 <__swsetup_r+0x30>
 800d8e0:	2209      	movs	r2, #9
 800d8e2:	602a      	str	r2, [r5, #0]
 800d8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ee:	e033      	b.n	800d958 <__swsetup_r+0x98>
 800d8f0:	0758      	lsls	r0, r3, #29
 800d8f2:	d512      	bpl.n	800d91a <__swsetup_r+0x5a>
 800d8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8f6:	b141      	cbz	r1, 800d90a <__swsetup_r+0x4a>
 800d8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8fc:	4299      	cmp	r1, r3
 800d8fe:	d002      	beq.n	800d906 <__swsetup_r+0x46>
 800d900:	4628      	mov	r0, r5
 800d902:	f7fd fc4f 	bl	800b1a4 <_free_r>
 800d906:	2300      	movs	r3, #0
 800d908:	6363      	str	r3, [r4, #52]	@ 0x34
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d910:	81a3      	strh	r3, [r4, #12]
 800d912:	2300      	movs	r3, #0
 800d914:	6063      	str	r3, [r4, #4]
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	89a3      	ldrh	r3, [r4, #12]
 800d91c:	f043 0308 	orr.w	r3, r3, #8
 800d920:	81a3      	strh	r3, [r4, #12]
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	b94b      	cbnz	r3, 800d93a <__swsetup_r+0x7a>
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d930:	d003      	beq.n	800d93a <__swsetup_r+0x7a>
 800d932:	4621      	mov	r1, r4
 800d934:	4628      	mov	r0, r5
 800d936:	f000 f883 	bl	800da40 <__smakebuf_r>
 800d93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d93e:	f013 0201 	ands.w	r2, r3, #1
 800d942:	d00a      	beq.n	800d95a <__swsetup_r+0x9a>
 800d944:	2200      	movs	r2, #0
 800d946:	60a2      	str	r2, [r4, #8]
 800d948:	6962      	ldr	r2, [r4, #20]
 800d94a:	4252      	negs	r2, r2
 800d94c:	61a2      	str	r2, [r4, #24]
 800d94e:	6922      	ldr	r2, [r4, #16]
 800d950:	b942      	cbnz	r2, 800d964 <__swsetup_r+0xa4>
 800d952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d956:	d1c5      	bne.n	800d8e4 <__swsetup_r+0x24>
 800d958:	bd38      	pop	{r3, r4, r5, pc}
 800d95a:	0799      	lsls	r1, r3, #30
 800d95c:	bf58      	it	pl
 800d95e:	6962      	ldrpl	r2, [r4, #20]
 800d960:	60a2      	str	r2, [r4, #8]
 800d962:	e7f4      	b.n	800d94e <__swsetup_r+0x8e>
 800d964:	2000      	movs	r0, #0
 800d966:	e7f7      	b.n	800d958 <__swsetup_r+0x98>
 800d968:	2400001c 	.word	0x2400001c

0800d96c <_raise_r>:
 800d96c:	291f      	cmp	r1, #31
 800d96e:	b538      	push	{r3, r4, r5, lr}
 800d970:	4605      	mov	r5, r0
 800d972:	460c      	mov	r4, r1
 800d974:	d904      	bls.n	800d980 <_raise_r+0x14>
 800d976:	2316      	movs	r3, #22
 800d978:	6003      	str	r3, [r0, #0]
 800d97a:	f04f 30ff 	mov.w	r0, #4294967295
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d982:	b112      	cbz	r2, 800d98a <_raise_r+0x1e>
 800d984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d988:	b94b      	cbnz	r3, 800d99e <_raise_r+0x32>
 800d98a:	4628      	mov	r0, r5
 800d98c:	f000 f830 	bl	800d9f0 <_getpid_r>
 800d990:	4622      	mov	r2, r4
 800d992:	4601      	mov	r1, r0
 800d994:	4628      	mov	r0, r5
 800d996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d99a:	f000 b817 	b.w	800d9cc <_kill_r>
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d00a      	beq.n	800d9b8 <_raise_r+0x4c>
 800d9a2:	1c59      	adds	r1, r3, #1
 800d9a4:	d103      	bne.n	800d9ae <_raise_r+0x42>
 800d9a6:	2316      	movs	r3, #22
 800d9a8:	6003      	str	r3, [r0, #0]
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	e7e7      	b.n	800d97e <_raise_r+0x12>
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	4798      	blx	r3
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e7e0      	b.n	800d97e <_raise_r+0x12>

0800d9bc <raise>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	@ (800d9c8 <raise+0xc>)
 800d9be:	4601      	mov	r1, r0
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	f7ff bfd3 	b.w	800d96c <_raise_r>
 800d9c6:	bf00      	nop
 800d9c8:	2400001c 	.word	0x2400001c

0800d9cc <_kill_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d07      	ldr	r5, [pc, #28]	@ (800d9ec <_kill_r+0x20>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	f7f3 fca1 	bl	8001320 <_kill>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d102      	bne.n	800d9e8 <_kill_r+0x1c>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b103      	cbz	r3, 800d9e8 <_kill_r+0x1c>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ea:	bf00      	nop
 800d9ec:	240005c4 	.word	0x240005c4

0800d9f0 <_getpid_r>:
 800d9f0:	f7f3 bc8e 	b.w	8001310 <_getpid>

0800d9f4 <__swhatbuf_r>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fc:	2900      	cmp	r1, #0
 800d9fe:	b096      	sub	sp, #88	@ 0x58
 800da00:	4615      	mov	r5, r2
 800da02:	461e      	mov	r6, r3
 800da04:	da0d      	bge.n	800da22 <__swhatbuf_r+0x2e>
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da0c:	f04f 0100 	mov.w	r1, #0
 800da10:	bf14      	ite	ne
 800da12:	2340      	movne	r3, #64	@ 0x40
 800da14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da18:	2000      	movs	r0, #0
 800da1a:	6031      	str	r1, [r6, #0]
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	b016      	add	sp, #88	@ 0x58
 800da20:	bd70      	pop	{r4, r5, r6, pc}
 800da22:	466a      	mov	r2, sp
 800da24:	f000 f848 	bl	800dab8 <_fstat_r>
 800da28:	2800      	cmp	r0, #0
 800da2a:	dbec      	blt.n	800da06 <__swhatbuf_r+0x12>
 800da2c:	9901      	ldr	r1, [sp, #4]
 800da2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da36:	4259      	negs	r1, r3
 800da38:	4159      	adcs	r1, r3
 800da3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da3e:	e7eb      	b.n	800da18 <__swhatbuf_r+0x24>

0800da40 <__smakebuf_r>:
 800da40:	898b      	ldrh	r3, [r1, #12]
 800da42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da44:	079d      	lsls	r5, r3, #30
 800da46:	4606      	mov	r6, r0
 800da48:	460c      	mov	r4, r1
 800da4a:	d507      	bpl.n	800da5c <__smakebuf_r+0x1c>
 800da4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	6123      	str	r3, [r4, #16]
 800da54:	2301      	movs	r3, #1
 800da56:	6163      	str	r3, [r4, #20]
 800da58:	b003      	add	sp, #12
 800da5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5c:	ab01      	add	r3, sp, #4
 800da5e:	466a      	mov	r2, sp
 800da60:	f7ff ffc8 	bl	800d9f4 <__swhatbuf_r>
 800da64:	9f00      	ldr	r7, [sp, #0]
 800da66:	4605      	mov	r5, r0
 800da68:	4639      	mov	r1, r7
 800da6a:	4630      	mov	r0, r6
 800da6c:	f7fd fc0e 	bl	800b28c <_malloc_r>
 800da70:	b948      	cbnz	r0, 800da86 <__smakebuf_r+0x46>
 800da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da76:	059a      	lsls	r2, r3, #22
 800da78:	d4ee      	bmi.n	800da58 <__smakebuf_r+0x18>
 800da7a:	f023 0303 	bic.w	r3, r3, #3
 800da7e:	f043 0302 	orr.w	r3, r3, #2
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	e7e2      	b.n	800da4c <__smakebuf_r+0xc>
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	6020      	str	r0, [r4, #0]
 800da8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da8e:	81a3      	strh	r3, [r4, #12]
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da96:	b15b      	cbz	r3, 800dab0 <__smakebuf_r+0x70>
 800da98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da9c:	4630      	mov	r0, r6
 800da9e:	f000 f81d 	bl	800dadc <_isatty_r>
 800daa2:	b128      	cbz	r0, 800dab0 <__smakebuf_r+0x70>
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f023 0303 	bic.w	r3, r3, #3
 800daaa:	f043 0301 	orr.w	r3, r3, #1
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	431d      	orrs	r5, r3
 800dab4:	81a5      	strh	r5, [r4, #12]
 800dab6:	e7cf      	b.n	800da58 <__smakebuf_r+0x18>

0800dab8 <_fstat_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d07      	ldr	r5, [pc, #28]	@ (800dad8 <_fstat_r+0x20>)
 800dabc:	2300      	movs	r3, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	4611      	mov	r1, r2
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	f7f3 fc8b 	bl	80013e0 <_fstat>
 800daca:	1c43      	adds	r3, r0, #1
 800dacc:	d102      	bne.n	800dad4 <_fstat_r+0x1c>
 800dace:	682b      	ldr	r3, [r5, #0]
 800dad0:	b103      	cbz	r3, 800dad4 <_fstat_r+0x1c>
 800dad2:	6023      	str	r3, [r4, #0]
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop
 800dad8:	240005c4 	.word	0x240005c4

0800dadc <_isatty_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d06      	ldr	r5, [pc, #24]	@ (800daf8 <_isatty_r+0x1c>)
 800dae0:	2300      	movs	r3, #0
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f3 fc8a 	bl	8001400 <_isatty>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_isatty_r+0x1a>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_isatty_r+0x1a>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	240005c4 	.word	0x240005c4

0800dafc <_init>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr

0800db08 <_fini>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	bf00      	nop
 800db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db0e:	bc08      	pop	{r3}
 800db10:	469e      	mov	lr, r3
 800db12:	4770      	bx	lr
