
NovoTEst_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08013028  08013028  00014028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013660  08013660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013668  08013668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801366c  0801366c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08013670  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d28  240001e8  08013858  000151e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004f10  08013858  00015f10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027361  00000000  00000000  00015216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004da0  00000000  00000000  0003c577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f70  00000000  00000000  00041318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018a6  00000000  00000000  00043288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1d6  00000000  00000000  00044b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028a93  00000000  00000000  00081d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178fdf  00000000  00000000  000aa797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00223776  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b94  00000000  00000000  002237bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  0022d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801300c 	.word	0x0801300c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0801300c 	.word	0x0801300c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e015      	b.n	8000aec <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fc5d 	bl	8000380 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	4798      	blx	r3
 8000ad4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e005      	b.n	8000aec <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f00f fb46 	bl	8010176 <memcpy>

    return copy;
 8000aea:	68bb      	ldr	r3, [r7, #8]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2028      	movs	r0, #40	@ 0x28
 8000b02:	4798      	blx	r3
 8000b04:	60f8      	str	r0, [r7, #12]
    if (node)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000b0c:	2228      	movs	r2, #40	@ 0x28
 8000b0e:	2100      	movs	r1, #0
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f00f fa8f 	bl	8010034 <memset>
    }

    return node;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000b2c:	e03d      	b.n	8000baa <cJSON_Delete+0x8a>
    {
        next = item->next;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <cJSON_Delete+0x32>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffe7 	bl	8000b20 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10c      	bne.n	8000b78 <cJSON_Delete+0x58>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d008      	beq.n	8000b78 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6912      	ldr	r2, [r2, #16]
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4798      	blx	r3
            item->valuestring = NULL;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10c      	bne.n	8000b9e <cJSON_Delete+0x7e>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d008      	beq.n	8000b9e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6a12      	ldr	r2, [r2, #32]
 8000b94:	4610      	mov	r0, r2
 8000b96:	4798      	blx	r3
            item->string = NULL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <cJSON_Delete+0x9c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	4798      	blx	r3
        item = next;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1be      	bne.n	8000b2e <cJSON_Delete+0xe>
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000000 	.word	0x24000000

08000bc0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000bc4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <ensure+0x20>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <ensure+0x24>
    {
        return NULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e083      	b.n	8000cfc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <ensure+0x3c>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d301      	bcc.n	8000c0c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e077      	b.n	8000cfc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da01      	bge.n	8000c16 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e072      	b.n	8000cfc <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d805      	bhi.n	8000c38 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	e061      	b.n	8000cfc <ensure+0x12c>
    }

    if (p->noalloc) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ensure+0x74>
        return NULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e05b      	b.n	8000cfc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c4a:	d308      	bcc.n	8000c5e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db03      	blt.n	8000c5a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8000c52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e004      	b.n	8000c64 <ensure+0x94>
        }
        else
        {
            return NULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e04e      	b.n	8000cfc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	4610      	mov	r0, r2
 8000c78:	4798      	blx	r3
 8000c7a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d132      	bne.n	8000ce8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4798      	blx	r3
            p->length = 0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]

            return NULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e02e      	b.n	8000cfc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	4798      	blx	r3
 8000ca6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10d      	bne.n	8000cca <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4798      	blx	r3
            p->length = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

            return NULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e018      	b.n	8000cfc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f00f fa4d 	bl	8010176 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4798      	blx	r3
    }
    p->length = newsize;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4413      	add	r3, r2
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d013      	beq.n	8000d3e <update_offset+0x3a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00f      	beq.n	8000d3e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689c      	ldr	r4, [r3, #8]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fb26 	bl	8000380 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	18e2      	adds	r2, r4, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	e000      	b.n	8000d40 <update_offset+0x3c>
        return;
 8000d3e:	bf00      	nop
}
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d52:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8000d56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d5a:	eeb0 6bc7 	vabs.f64	d6, d7
 8000d5e:	ed97 7b00 	vldr	d7, [r7]
 8000d62:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dd04      	ble.n	8000d7a <compare_double+0x32>
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d78:	e003      	b.n	8000d82 <compare_double+0x3a>
 8000d7a:	ed97 7b00 	vldr	d7, [r7]
 8000d7e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000d82:	ed87 7b04 	vstr	d7, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8000d86:	ed97 6b02 	vldr	d6, [r7, #8]
 8000d8a:	ed97 7b00 	vldr	d7, [r7]
 8000d8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d92:	eeb0 6bc7 	vabs.f64	d6, d7
 8000d96:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d9a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000dc0 <compare_double+0x78>
 8000d9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000da2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	3cb00000 	.word	0x3cb00000

08000dc8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	@ 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ddc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8000dfc:	f7ff fee0 	bl	8000bc0 <get_decimal_point>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <print_number+0x54>
    {
        return false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e0a2      	b.n	8000f62 <print_number+0x19a>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8000e1c:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000e20:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e24:	eeb4 6b47 	vcmp.f64	d6, d7
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	d612      	bvs.n	8000e54 <print_number+0x8c>
 8000e2e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000e32:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e36:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8000f70 <print_number+0x1a8>
 8000e3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	bfd4      	ite	le
 8000e44:	2301      	movle	r3, #1
 8000e46:	2300      	movgt	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f083 0301 	eor.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d007      	beq.n	8000e64 <print_number+0x9c>
    {
        length = sprintf((char*)number_buffer, "null");
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4947      	ldr	r1, [pc, #284]	@ (8000f78 <print_number+0x1b0>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00e ffc2 	bl	800fde4 <siprintf>
 8000e60:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e62:	e03c      	b.n	8000ede <print_number+0x116>
    }
    else if(d == (double)item->valueint)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e70:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000e74:	eeb4 6b47 	vcmp.f64	d6, d7
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d109      	bne.n	8000e92 <print_number+0xca>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	493d      	ldr	r1, [pc, #244]	@ (8000f7c <print_number+0x1b4>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00e ffab 	bl	800fde4 <siprintf>
 8000e8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e90:	e025      	b.n	8000ede <print_number+0x116>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8000e92:	f107 0014 	add.w	r0, r7, #20
 8000e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e9a:	4939      	ldr	r1, [pc, #228]	@ (8000f80 <print_number+0x1b8>)
 8000e9c:	f00e ffa2 	bl	800fde4 <siprintf>
 8000ea0:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <print_number+0x1bc>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00e ffbb 	bl	800fe28 <siscanf>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10a      	bne.n	8000ece <print_number+0x106>
 8000eb8:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ebc:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec4:	f7ff ff40 	bl	8000d48 <compare_double>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <print_number+0x116>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8000ece:	f107 0014 	add.w	r0, r7, #20
 8000ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ed6:	492c      	ldr	r1, [pc, #176]	@ (8000f88 <print_number+0x1c0>)
 8000ed8:	f00e ff84 	bl	800fde4 <siprintf>
 8000edc:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db02      	blt.n	8000eea <print_number+0x122>
 8000ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee6:	2b19      	cmp	r3, #25
 8000ee8:	dd01      	ble.n	8000eee <print_number+0x126>
    {
        return false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e039      	b.n	8000f62 <print_number+0x19a>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8000eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f7ff fe6b 	bl	8000bd0 <ensure>
 8000efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8000efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <print_number+0x13e>
    {
        return false;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e02d      	b.n	8000f62 <print_number+0x19a>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f0a:	e01a      	b.n	8000f42 <print_number+0x17a>
    {
        if (number_buffer[i] == decimal_point)
 8000f0c:	f107 0214 	add.w	r2, r7, #20
 8000f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d105      	bne.n	8000f2a <print_number+0x162>
        {
            output_pointer[i] = '.';
 8000f1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f22:	4413      	add	r3, r2
 8000f24:	222e      	movs	r2, #46	@ 0x2e
 8000f26:	701a      	strb	r2, [r3, #0]
            continue;
 8000f28:	e008      	b.n	8000f3c <print_number+0x174>
        }

        output_pointer[i] = number_buffer[i];
 8000f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f2e:	4413      	add	r3, r2
 8000f30:	f107 0114 	add.w	r1, r7, #20
 8000f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f36:	440a      	add	r2, r1
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f3e:	3301      	adds	r3, #1
 8000f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3e0      	bcc.n	8000f0c <print_number+0x144>
    }
    output_pointer[i] = '\0';
 8000f4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f4e:	4413      	add	r3, r2
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f5a:	441a      	add	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	609a      	str	r2, [r3, #8]

    return true;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3748      	adds	r7, #72	@ 0x48
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	ffffffff 	.word	0xffffffff
 8000f74:	7fefffff 	.word	0x7fefffff
 8000f78:	08013034 	.word	0x08013034
 8000f7c:	0801303c 	.word	0x0801303c
 8000f80:	08013040 	.word	0x08013040
 8000f84:	08013048 	.word	0x08013048
 8000f88:	0801304c 	.word	0x0801304c

08000f8c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <print_string_ptr+0x28>
    {
        return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e110      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d111      	bne.n	8000fde <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8000fba:	2103      	movs	r1, #3
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff fe07 	bl	8000bd0 <ensure>
 8000fc2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <print_string_ptr+0x42>
        {
            return false;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e103      	b.n	80011d6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4a83      	ldr	r2, [pc, #524]	@ (80011e0 <print_string_ptr+0x254>)
 8000fd2:	8811      	ldrh	r1, [r2, #0]
 8000fd4:	7892      	ldrb	r2, [r2, #2]
 8000fd6:	8019      	strh	r1, [r3, #0]
 8000fd8:	709a      	strb	r2, [r3, #2]

        return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0fb      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e024      	b.n	800102e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b22      	cmp	r3, #34	@ 0x22
 8000fea:	dc0f      	bgt.n	800100c <print_string_ptr+0x80>
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	db13      	blt.n	8001018 <print_string_ptr+0x8c>
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80011e4 <print_string_ptr+0x258>)
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <print_string_ptr+0x84>
 800100a:	e005      	b.n	8001018 <print_string_ptr+0x8c>
 800100c:	2b5c      	cmp	r3, #92	@ 0x5c
 800100e:	d103      	bne.n	8001018 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
                break;
 8001016:	e007      	b.n	8001028 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b1f      	cmp	r3, #31
 800101e:	d802      	bhi.n	8001026 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3305      	adds	r3, #5
 8001024:	617b      	str	r3, [r7, #20]
                }
                break;
 8001026:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3301      	adds	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1d6      	bne.n	8000fe4 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	461a      	mov	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3303      	adds	r3, #3
 8001048:	4619      	mov	r1, r3
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f7ff fdc0 	bl	8000bd0 <ensure>
 8001050:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <print_string_ptr+0xd0>
    {
        return false;
 8001058:	2300      	movs	r3, #0
 800105a:	e0bc      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d117      	bne.n	8001092 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2222      	movs	r2, #34	@ 0x22
 8001066:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f00f f880 	bl	8010176 <memcpy>
        output[output_length + 1] = '\"';
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	2222      	movs	r2, #34	@ 0x22
 8001080:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

        return true;
 800108e:	2301      	movs	r3, #1
 8001090:	e0a1      	b.n	80011d6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2222      	movs	r2, #34	@ 0x22
 8001096:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	3301      	adds	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e086      	b.n	80011b2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	d90c      	bls.n	80010c6 <print_string_ptr+0x13a>
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b22      	cmp	r3, #34	@ 0x22
 80010b2:	d008      	beq.n	80010c6 <print_string_ptr+0x13a>
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80010ba:	d004      	beq.n	80010c6 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e06f      	b.n	80011a6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	61ba      	str	r2, [r7, #24]
 80010cc:	225c      	movs	r2, #92	@ 0x5c
 80010ce:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b22      	cmp	r3, #34	@ 0x22
 80010d6:	dc3d      	bgt.n	8001154 <print_string_ptr+0x1c8>
 80010d8:	2b08      	cmp	r3, #8
 80010da:	db59      	blt.n	8001190 <print_string_ptr+0x204>
 80010dc:	3b08      	subs	r3, #8
 80010de:	2b1a      	cmp	r3, #26
 80010e0:	d856      	bhi.n	8001190 <print_string_ptr+0x204>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <print_string_ptr+0x15c>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001169 	.word	0x08001169
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001179 	.word	0x08001179
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001171 	.word	0x08001171
 80010fc:	08001181 	.word	0x08001181
 8001100:	08001191 	.word	0x08001191
 8001104:	08001191 	.word	0x08001191
 8001108:	08001191 	.word	0x08001191
 800110c:	08001191 	.word	0x08001191
 8001110:	08001191 	.word	0x08001191
 8001114:	08001191 	.word	0x08001191
 8001118:	08001191 	.word	0x08001191
 800111c:	08001191 	.word	0x08001191
 8001120:	08001191 	.word	0x08001191
 8001124:	08001191 	.word	0x08001191
 8001128:	08001191 	.word	0x08001191
 800112c:	08001191 	.word	0x08001191
 8001130:	08001191 	.word	0x08001191
 8001134:	08001191 	.word	0x08001191
 8001138:	08001191 	.word	0x08001191
 800113c:	08001191 	.word	0x08001191
 8001140:	08001191 	.word	0x08001191
 8001144:	08001191 	.word	0x08001191
 8001148:	08001191 	.word	0x08001191
 800114c:	08001191 	.word	0x08001191
 8001150:	08001161 	.word	0x08001161
 8001154:	2b5c      	cmp	r3, #92	@ 0x5c
 8001156:	d11b      	bne.n	8001190 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	225c      	movs	r2, #92	@ 0x5c
 800115c:	701a      	strb	r2, [r3, #0]
                    break;
 800115e:	e022      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2222      	movs	r2, #34	@ 0x22
 8001164:	701a      	strb	r2, [r3, #0]
                    break;
 8001166:	e01e      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2262      	movs	r2, #98	@ 0x62
 800116c:	701a      	strb	r2, [r3, #0]
                    break;
 800116e:	e01a      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2266      	movs	r2, #102	@ 0x66
 8001174:	701a      	strb	r2, [r3, #0]
                    break;
 8001176:	e016      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	226e      	movs	r2, #110	@ 0x6e
 800117c:	701a      	strb	r2, [r3, #0]
                    break;
 800117e:	e012      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2272      	movs	r2, #114	@ 0x72
 8001184:	701a      	strb	r2, [r3, #0]
                    break;
 8001186:	e00e      	b.n	80011a6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2274      	movs	r2, #116	@ 0x74
 800118c:	701a      	strb	r2, [r3, #0]
                    break;
 800118e:	e00a      	b.n	80011a6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4914      	ldr	r1, [pc, #80]	@ (80011e8 <print_string_ptr+0x25c>)
 8001198:	69b8      	ldr	r0, [r7, #24]
 800119a:	f00e fe23 	bl	800fde4 <siprintf>
                    output_pointer += 4;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3304      	adds	r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
                    break;
 80011a4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f af74 	bne.w	80010a4 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	2222      	movs	r2, #34	@ 0x22
 80011c6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3302      	adds	r3, #2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4413      	add	r3, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

    return true;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	08013054 	.word	0x08013054
 80011e4:	04000037 	.word	0x04000037
 80011e8:	08013058 	.word	0x08013058

080011ec <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fec5 	bl	8000f8c <print_string_ptr>
 8001202:	4603      	mov	r3, r0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	@ 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2224      	movs	r2, #36	@ 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00e ff05 	bl	8010034 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a3b      	ldr	r2, [pc, #236]	@ (800131c <print+0x110>)
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	4610      	mov	r0, r2
 8001234:	4798      	blx	r3
 8001236:	4603      	mov	r3, r0
 8001238:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <print+0x110>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	ca07      	ldmia	r2, {r0, r1, r2}
 800124c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d042      	beq.n	80012dc <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f86f 	bl	8001340 <print_value>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03b      	beq.n	80012e0 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fd49 	bl	8000d04 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	3201      	adds	r2, #1
 8001284:	4611      	mov	r1, r2
 8001286:	4798      	blx	r3
 8001288:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800128a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800128c:	2b00      	cmp	r3, #0
 800128e:	d029      	beq.n	80012e4 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e020      	b.n	80012d8 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	3201      	adds	r2, #1
 800129e:	4610      	mov	r0, r2
 80012a0:	4798      	blx	r3
 80012a2:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 80012a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01e      	beq.n	80012e8 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	bf28      	it	cs
 80012b6:	4613      	movcs	r3, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012bc:	f00e ff5b 	bl	8010176 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012c4:	4413      	add	r3, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4610      	mov	r0, r2
 80012d2:	4798      	blx	r3
        buffer->buffer = NULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80012d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012da:	e01a      	b.n	8001312 <print+0x106>
        goto fail;
 80012dc:	bf00      	nop
 80012de:	e004      	b.n	80012ea <print+0xde>
        goto fail;
 80012e0:	bf00      	nop
 80012e2:	e002      	b.n	80012ea <print+0xde>
            goto fail;
 80012e4:	bf00      	nop
 80012e6:	e000      	b.n	80012ea <print+0xde>
            goto fail;
 80012e8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4610      	mov	r0, r2
 80012f8:	4798      	blx	r3
        buffer->buffer = NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <print+0x104>
    {
        hooks->deallocate(printed);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800130a:	4798      	blx	r3
        printed = NULL;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3738      	adds	r7, #56	@ 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	08013158 	.word	0x08013158

08001320 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <cJSON_Print+0x1c>)
 800132a:	2101      	movs	r1, #1
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff6d 	bl	800120c <print>
 8001332:	4603      	mov	r3, r0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24000000 	.word	0x24000000

08001340 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <print_value+0x1a>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <print_value+0x1e>
    {
        return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e0c9      	b.n	80014f2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b80      	cmp	r3, #128	@ 0x80
 8001366:	f000 808e 	beq.w	8001486 <print_value+0x146>
 800136a:	2b80      	cmp	r3, #128	@ 0x80
 800136c:	f300 80c0 	bgt.w	80014f0 <print_value+0x1b0>
 8001370:	2b20      	cmp	r3, #32
 8001372:	dc49      	bgt.n	8001408 <print_value+0xc8>
 8001374:	2b00      	cmp	r3, #0
 8001376:	f340 80bb 	ble.w	80014f0 <print_value+0x1b0>
 800137a:	3b01      	subs	r3, #1
 800137c:	2b1f      	cmp	r3, #31
 800137e:	f200 80b7 	bhi.w	80014f0 <print_value+0x1b0>
 8001382:	a201      	add	r2, pc, #4	@ (adr r2, 8001388 <print_value+0x48>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001433 	.word	0x08001433
 800138c:	08001457 	.word	0x08001457
 8001390:	080014f1 	.word	0x080014f1
 8001394:	0800140f 	.word	0x0800140f
 8001398:	080014f1 	.word	0x080014f1
 800139c:	080014f1 	.word	0x080014f1
 80013a0:	080014f1 	.word	0x080014f1
 80013a4:	0800147b 	.word	0x0800147b
 80013a8:	080014f1 	.word	0x080014f1
 80013ac:	080014f1 	.word	0x080014f1
 80013b0:	080014f1 	.word	0x080014f1
 80013b4:	080014f1 	.word	0x080014f1
 80013b8:	080014f1 	.word	0x080014f1
 80013bc:	080014f1 	.word	0x080014f1
 80013c0:	080014f1 	.word	0x080014f1
 80013c4:	080014cd 	.word	0x080014cd
 80013c8:	080014f1 	.word	0x080014f1
 80013cc:	080014f1 	.word	0x080014f1
 80013d0:	080014f1 	.word	0x080014f1
 80013d4:	080014f1 	.word	0x080014f1
 80013d8:	080014f1 	.word	0x080014f1
 80013dc:	080014f1 	.word	0x080014f1
 80013e0:	080014f1 	.word	0x080014f1
 80013e4:	080014f1 	.word	0x080014f1
 80013e8:	080014f1 	.word	0x080014f1
 80013ec:	080014f1 	.word	0x080014f1
 80013f0:	080014f1 	.word	0x080014f1
 80013f4:	080014f1 	.word	0x080014f1
 80013f8:	080014f1 	.word	0x080014f1
 80013fc:	080014f1 	.word	0x080014f1
 8001400:	080014f1 	.word	0x080014f1
 8001404:	080014d9 	.word	0x080014d9
 8001408:	2b40      	cmp	r3, #64	@ 0x40
 800140a:	d06b      	beq.n	80014e4 <print_value+0x1a4>
 800140c:	e070      	b.n	80014f0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800140e:	2105      	movs	r1, #5
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f7ff fbdd 	bl	8000bd0 <ensure>
 8001416:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <print_value+0xe2>
            {
                return false;
 800141e:	2300      	movs	r3, #0
 8001420:	e067      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <print_value+0x1bc>)
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	6018      	str	r0, [r3, #0]
 800142a:	7912      	ldrb	r2, [r2, #4]
 800142c:	711a      	strb	r2, [r3, #4]
            return true;
 800142e:	2301      	movs	r3, #1
 8001430:	e05f      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001432:	2106      	movs	r1, #6
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f7ff fbcb 	bl	8000bd0 <ensure>
 800143a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <print_value+0x106>
            {
                return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e055      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <print_value+0x1c0>)
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	6018      	str	r0, [r3, #0]
 800144e:	8892      	ldrh	r2, [r2, #4]
 8001450:	809a      	strh	r2, [r3, #4]
            return true;
 8001452:	2301      	movs	r3, #1
 8001454:	e04d      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8001456:	2105      	movs	r1, #5
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff fbb9 	bl	8000bd0 <ensure>
 800145e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <print_value+0x12a>
            {
                return false;
 8001466:	2300      	movs	r3, #0
 8001468:	e043      	b.n	80014f2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <print_value+0x1c4>)
 800146e:	6810      	ldr	r0, [r2, #0]
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	7912      	ldrb	r2, [r2, #4]
 8001474:	711a      	strb	r2, [r3, #4]
            return true;
 8001476:	2301      	movs	r3, #1
 8001478:	e03b      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fca3 	bl	8000dc8 <print_number>
 8001482:	4603      	mov	r3, r0
 8001484:	e035      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <print_value+0x156>
            {
                return false;
 8001492:	2300      	movs	r3, #0
 8001494:	e02d      	b.n	80014f2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff70 	bl	8000380 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	3301      	adds	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f7ff fb91 	bl	8000bd0 <ensure>
 80014ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <print_value+0x17a>
            {
                return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e01b      	b.n	80014f2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4619      	mov	r1, r3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f00e fe57 	bl	8010176 <memcpy>
            return true;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e012      	b.n	80014f2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fe8c 	bl	80011ec <print_string>
 80014d4:	4603      	mov	r3, r0
 80014d6:	e00c      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f814 	bl	8001508 <print_array>
 80014e0:	4603      	mov	r3, r0
 80014e2:	e006      	b.n	80014f2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f894 	bl	8001614 <print_object>
 80014ec:	4603      	mov	r3, r0
 80014ee:	e000      	b.n	80014f2 <print_value+0x1b2>

        default:
            return false;
 80014f0:	2300      	movs	r3, #0
    }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08013034 	.word	0x08013034
 8001500:	08013064 	.word	0x08013064
 8001504:	0801306c 	.word	0x0801306c

08001508 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <print_array+0x22>
    {
        return false;
 8001526:	2300      	movs	r3, #0
 8001528:	e070      	b.n	800160c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800152a:	2101      	movs	r1, #1
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff fb4f 	bl	8000bd0 <ensure>
 8001532:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <print_array+0x36>
    {
        return false;
 800153a:	2300      	movs	r3, #0
 800153c:	e066      	b.n	800160c <print_array+0x104>
    }

    *output_pointer = '[';
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	225b      	movs	r2, #91	@ 0x5b
 8001542:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001558:	e03d      	b.n	80015d6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	6938      	ldr	r0, [r7, #16]
 800155e:	f7ff feef 	bl	8001340 <print_value>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <print_array+0x64>
        {
            return false;
 8001568:	2300      	movs	r3, #0
 800156a:	e04f      	b.n	800160c <print_array+0x104>
        }
        update_offset(output_buffer);
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7ff fbc9 	bl	8000d04 <update_offset>
        if (current_element->next)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d02a      	beq.n	80015d0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <print_array+0x7e>
 8001582:	2302      	movs	r3, #2
 8001584:	e000      	b.n	8001588 <print_array+0x80>
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	4619      	mov	r1, r3
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f7ff fb1d 	bl	8000bd0 <ensure>
 8001596:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <print_array+0x9a>
            {
                return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e034      	b.n	800160c <print_array+0x104>
            }
            *output_pointer++ = ',';
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	617a      	str	r2, [r7, #20]
 80015a8:	222c      	movs	r2, #44	@ 0x2c
 80015aa:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	617a      	str	r2, [r7, #20]
 80015ba:	2220      	movs	r2, #32
 80015bc:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	441a      	add	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1be      	bne.n	800155a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80015dc:	2102      	movs	r1, #2
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff faf6 	bl	8000bd0 <ensure>
 80015e4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <print_array+0xe8>
    {
        return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e00d      	b.n	800160c <print_array+0x104>
    }
    *output_pointer++ = ']';
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	617a      	str	r2, [r7, #20]
 80015f6:	225d      	movs	r2, #93	@ 0x5d
 80015f8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	60da      	str	r2, [r3, #12]

    return true;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <print_object+0x22>
    {
        return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e108      	b.n	8001848 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <print_object+0x2e>
 800163e:	2302      	movs	r3, #2
 8001640:	e000      	b.n	8001644 <print_object+0x30>
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	4619      	mov	r1, r3
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f7ff fabf 	bl	8000bd0 <ensure>
 8001652:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <print_object+0x4a>
    {
        return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e0f4      	b.n	8001848 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	61fa      	str	r2, [r7, #28]
 8001664:	227b      	movs	r2, #123	@ 0x7b
 8001666:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	61fa      	str	r2, [r7, #28]
 8001680:	220a      	movs	r2, #10
 8001682:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	441a      	add	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001690:	e0a0      	b.n	80017d4 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d022      	beq.n	80016e0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4619      	mov	r1, r3
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7ff fa95 	bl	8000bd0 <ensure>
 80016a6:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <print_object+0x9e>
            {
                return false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e0ca      	b.n	8001848 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e007      	b.n	80016c8 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	61fa      	str	r2, [r7, #28]
 80016be:	2209      	movs	r2, #9
 80016c0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3f2      	bcc.n	80016b8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	441a      	add	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc50 	bl	8000f8c <print_string_ptr>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <print_object+0xe2>
        {
            return false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e0a8      	b.n	8001848 <print_object+0x234>
        }
        update_offset(output_buffer);
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f7ff fb04 	bl	8000d04 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <print_object+0xf4>
 8001704:	2302      	movs	r3, #2
 8001706:	e000      	b.n	800170a <print_object+0xf6>
 8001708:	2301      	movs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f7ff fa5e 	bl	8000bd0 <ensure>
 8001714:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <print_object+0x10c>
        {
            return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e093      	b.n	8001848 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	223a      	movs	r2, #58	@ 0x3a
 8001728:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	61fa      	str	r2, [r7, #28]
 8001738:	2209      	movs	r2, #9
 800173a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	441a      	add	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	69b8      	ldr	r0, [r7, #24]
 800174c:	f7ff fdf8 	bl	8001340 <print_value>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <print_object+0x146>
        {
            return false;
 8001756:	2300      	movs	r3, #0
 8001758:	e076      	b.n	8001848 <print_object+0x234>
        }
        update_offset(output_buffer);
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f7ff fad2 	bl	8000d04 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <print_object+0x158>
 8001768:	2201      	movs	r2, #1
 800176a:	e000      	b.n	800176e <print_object+0x15a>
 800176c:	2200      	movs	r2, #0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <print_object+0x166>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <print_object+0x168>
 800177a:	2300      	movs	r3, #0
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	4619      	mov	r1, r3
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f7ff fa22 	bl	8000bd0 <ensure>
 800178c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <print_object+0x184>
        {
            return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e057      	b.n	8001848 <print_object+0x234>
        }
        if (current_item->next)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <print_object+0x196>
        {
            *output_pointer++ = ',';
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	61fa      	str	r2, [r7, #28]
 80017a6:	222c      	movs	r2, #44	@ 0x2c
 80017a8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	61fa      	str	r2, [r7, #28]
 80017b8:	220a      	movs	r2, #10
 80017ba:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	441a      	add	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f af5b 	bne.w	8001692 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <print_object+0x1d8>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	e000      	b.n	80017ee <print_object+0x1da>
 80017ec:	2302      	movs	r3, #2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff f9ed 	bl	8000bd0 <ensure>
 80017f6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <print_object+0x1ee>
    {
        return false;
 80017fe:	2300      	movs	r3, #0
 8001800:	e022      	b.n	8001848 <print_object+0x234>
    }
    if (output_buffer->format)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d010      	beq.n	800182c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e007      	b.n	8001820 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	2209      	movs	r2, #9
 8001818:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	3301      	adds	r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	3b01      	subs	r3, #1
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3f1      	bcc.n	8001810 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	61fa      	str	r2, [r7, #28]
 8001832:	227d      	movs	r2, #125	@ 0x7d
 8001834:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	60da      	str	r2, [r3, #12]

    return true;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <add_item_to_array+0x22>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <add_item_to_array+0x22>
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d101      	bne.n	8001898 <add_item_to_array+0x26>
    {
        return false;
 8001894:	2300      	movs	r3, #0
 8001896:	e01e      	b.n	80018d6 <add_item_to_array+0x64>
    }

    child = array->child;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	609a      	str	r2, [r3, #8]
        item->prev = item;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e00d      	b.n	80018d4 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ffc2 	bl	8001850 <suffix_object>
            array->child->prev = item;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <add_item_to_object+0x30>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <add_item_to_object+0x30>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <add_item_to_object+0x30>
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d101      	bne.n	8001928 <add_item_to_object+0x34>
    {
        return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e036      	b.n	8001996 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ffd5 	bl	80018de <cast_away_const>
 8001934:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e00e      	b.n	8001960 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f7ff f8ad 	bl	8000aa4 <cJSON_strdup>
 800194a:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <add_item_to_object+0x62>
        {
            return false;
 8001952:	2300      	movs	r3, #0
 8001954:	e01f      	b.n	8001996 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800195e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <add_item_to_object+0x8c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a12      	ldr	r2, [r2, #32]
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
    }

    item->string = new_key;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff6f 	bl	8001872 <add_item_to_array>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 80019ae:	ed97 0b00 	vldr	d0, [r7]
 80019b2:	f000 f819 	bl	80019e8 <cJSON_CreateNumber>
 80019b6:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <cJSON_AddNumberToObject+0x44>)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ff96 	bl	80018f4 <add_item_to_object>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	e003      	b.n	80019da <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff f8a4 	bl	8000b20 <cJSON_Delete>
    return NULL;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24000000 	.word	0x24000000

080019e8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80019f2:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <cJSON_CreateNumber+0x90>)
 80019f4:	f7ff f87e 	bl	8000af4 <cJSON_New_Item>
 80019f8:	60f8      	str	r0, [r7, #12]
    if(item)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d02b      	beq.n	8001a58 <cJSON_CreateNumber+0x70>
    {
        item->type = cJSON_Number;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2208      	movs	r2, #8
 8001a04:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001a10:	ed97 7b00 	vldr	d7, [r7]
 8001a14:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001a68 <cJSON_CreateNumber+0x80>
 8001a18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	db04      	blt.n	8001a2c <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	e015      	b.n	8001a58 <cJSON_CreateNumber+0x70>
        }
        else if (num <= (double)INT_MIN)
 8001a2c:	ed97 7b00 	vldr	d7, [r7]
 8001a30:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001a70 <cJSON_CreateNumber+0x88>
 8001a34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d804      	bhi.n	8001a48 <cJSON_CreateNumber+0x60>
        {
            item->valueint = INT_MIN;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	e007      	b.n	8001a58 <cJSON_CreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 8001a48:	ed97 7b00 	vldr	d7, [r7]
 8001a4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a50:	ee17 2a90 	vmov	r2, s15
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	ffc00000 	.word	0xffc00000
 8001a6c:	41dfffff 	.word	0x41dfffff
 8001a70:	00000000 	.word	0x00000000
 8001a74:	c1e00000 	.word	0xc1e00000
 8001a78:	24000000 	.word	0x24000000

08001a7c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <cJSON_CreateObject+0x24>)
 8001a84:	f7ff f836 	bl	8000af4 <cJSON_New_Item>
 8001a88:	6078      	str	r0, [r7, #4]
    if (item)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24000000 	.word	0x24000000

08001aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <MX_DMA_Init+0x4c>)
 8001abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	200b      	movs	r0, #11
 8001ace:	f001 f991 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ad2:	200b      	movs	r0, #11
 8001ad4:	f001 f9a8 	bl	8002e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	200c      	movs	r0, #12
 8001ade:	f001 f989 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ae2:	200c      	movs	r0, #12
 8001ae4:	f001 f9a0 	bl	8002e28 <HAL_NVIC_EnableIRQ>

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400

08001af4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorDataQueue */
	sensorDataQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &sensorDataQueue_attributes);
 8001af8:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <MX_FREERTOS_Init+0x48>)
 8001afa:	2102      	movs	r1, #2
 8001afc:	200a      	movs	r0, #10
 8001afe:	f009 fcda 	bl	800b4b6 <osMessageQueueNew>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <MX_FREERTOS_Init+0x4c>)
 8001b06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b08:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <MX_FREERTOS_Init+0x50>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <MX_FREERTOS_Init+0x54>)
 8001b0e:	f009 fc25 	bl	800b35c <osThreadNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <MX_FREERTOS_Init+0x58>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <MX_FREERTOS_Init+0x5c>)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_FREERTOS_Init+0x60>)
 8001b1e:	f009 fc1d 	bl	800b35c <osThreadNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <MX_FREERTOS_Init+0x64>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 8001b28:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <MX_FREERTOS_Init+0x68>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <MX_FREERTOS_Init+0x6c>)
 8001b2e:	f009 fc15 	bl	800b35c <osThreadNew>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <MX_FREERTOS_Init+0x70>)
 8001b36:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	080131c8 	.word	0x080131c8
 8001b40:	24000210 	.word	0x24000210
 8001b44:	0801315c 	.word	0x0801315c
 8001b48:	08001b69 	.word	0x08001b69
 8001b4c:	24000204 	.word	0x24000204
 8001b50:	08013180 	.word	0x08013180
 8001b54:	08001b79 	.word	0x08001b79
 8001b58:	24000208 	.word	0x24000208
 8001b5c:	080131a4 	.word	0x080131a4
 8001b60:	08001bd1 	.word	0x08001bd1
 8001b64:	2400020c 	.word	0x2400020c

08001b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f009 fc85 	bl	800b480 <osDelay>
 8001b76:	e7fb      	b.n	8001b70 <StartDefaultTask+0x8>

08001b78 <StartProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // 1. Realiza a leitura filtrada do ADC
    sensor_data.raw_adc = get_filtered_reading();
 8001b80:	f000 fa16 	bl	8001fb0 <get_filtered_reading>
 8001b84:	4603      	mov	r3, r0
 8001b86:	81bb      	strh	r3, [r7, #12]

    // 2. Converte o valor bruto para tensão
    sensor_data.voltage_mv = raw_to_voltage_mV(sensor_data.raw_adc);
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fa34 	bl	8001ff8 <raw_to_voltage_mV>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	edc7 7a04 	vstr	s15, [r7, #16]

    // 3. Converte a tensão para corrente
    sensor_data.current_ma = voltage_to_current_mA(sensor_data.voltage_mv);
 8001b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f000 fa48 	bl	8002034 <voltage_to_current_mA>
 8001ba4:	eef0 7a40 	vmov.f32	s15, s0
 8001ba8:	edc7 7a05 	vstr	s15, [r7, #20]

    // 4. Envia a estrutura completa para a fila
    osMessageQueuePut(sensorDataQueueHandle, &sensor_data, 0U, osWaitForever);
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <StartProducerTask+0x54>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	f107 010c 	add.w	r1, r7, #12
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f009 fcef 	bl	800b59c <osMessageQueuePut>

    // 5. Aguarda um tempo antes da próxima medição (ex: 1 segundo)
    osDelay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc2:	f009 fc5d 	bl	800b480 <osDelay>
    sensor_data.raw_adc = get_filtered_reading();
 8001bc6:	bf00      	nop
 8001bc8:	e7da      	b.n	8001b80 <StartProducerTask+0x8>
 8001bca:	bf00      	nop
 8001bcc:	24000210 	.word	0x24000210

08001bd0 <StartConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  // Loop infinito da tarefa
  for(;;)
  {
    // 1. Esperar para receber um item da fila (a tarefa dorme aqui, economizando CPU)
    status = osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever);
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <StartConsumerTask+0xf8>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f107 010c 	add.w	r1, r7, #12
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	2200      	movs	r2, #0
 8001be6:	f009 fd39 	bl	800b65c <osMessageQueueGet>
 8001bea:	6238      	str	r0, [r7, #32]

    if (status == osOK)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f2      	bne.n	8001bd8 <StartConsumerTask+0x8>
    {
      // Pisca o LED azul (LD3) para indicar que está a processar e a enviar
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001bf2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bf6:	4835      	ldr	r0, [pc, #212]	@ (8001ccc <StartConsumerTask+0xfc>)
 8001bf8:	f003 fd8b 	bl	8005712 <HAL_GPIO_TogglePin>

      // 2. Calcular a percentagem (lógica de apresentação)
      float percentage = ((received_data.current_ma - MIN_CURRENT_MA) / (MAX_CURRENT_MA - MIN_CURRENT_MA)) * 100.0f;
 8001bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c00:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001c04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c08:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c10:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001cd0 <StartConsumerTask+0x100>
 8001c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      if (percentage < 0.0f) percentage = 0.0f;
 8001c1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d502      	bpl.n	8001c30 <StartConsumerTask+0x60>
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      if (percentage > 100.0f) percentage = 100.0f;
 8001c30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c34:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001cd0 <StartConsumerTask+0x100>
 8001c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	dd01      	ble.n	8001c46 <StartConsumerTask+0x76>
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <StartConsumerTask+0x104>)
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24

      // 3. Criar o objeto JSON
      cJSON *root = cJSON_CreateObject();
 8001c46:	f7ff ff19 	bl	8001a7c <cJSON_CreateObject>
 8001c4a:	61f8      	str	r0, [r7, #28]
      if (root != NULL)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0c2      	beq.n	8001bd8 <StartConsumerTask+0x8>
      {
        cJSON_AddNumberToObject(root, "raw_adc", received_data.raw_adc);
 8001c52:	89bb      	ldrh	r3, [r7, #12]
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c5c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c60:	491d      	ldr	r1, [pc, #116]	@ (8001cd8 <StartConsumerTask+0x108>)
 8001c62:	69f8      	ldr	r0, [r7, #28]
 8001c64:	f7ff fe9c 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "voltage_mV", received_data.voltage_mv);
 8001c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c70:	eeb0 0b47 	vmov.f64	d0, d7
 8001c74:	4919      	ldr	r1, [pc, #100]	@ (8001cdc <StartConsumerTask+0x10c>)
 8001c76:	69f8      	ldr	r0, [r7, #28]
 8001c78:	f7ff fe92 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "current_mA", received_data.current_ma);
 8001c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c84:	eeb0 0b47 	vmov.f64	d0, d7
 8001c88:	4915      	ldr	r1, [pc, #84]	@ (8001ce0 <StartConsumerTask+0x110>)
 8001c8a:	69f8      	ldr	r0, [r7, #28]
 8001c8c:	f7ff fe88 	bl	80019a0 <cJSON_AddNumberToObject>
        cJSON_AddNumberToObject(root, "percentage", percentage);
 8001c90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c98:	eeb0 0b47 	vmov.f64	d0, d7
 8001c9c:	4911      	ldr	r1, [pc, #68]	@ (8001ce4 <StartConsumerTask+0x114>)
 8001c9e:	69f8      	ldr	r0, [r7, #28]
 8001ca0:	f7ff fe7e 	bl	80019a0 <cJSON_AddNumberToObject>

        // 4. Converter o objeto JSON para uma string
        char *json_string = cJSON_Print(root);
 8001ca4:	69f8      	ldr	r0, [r7, #28]
 8001ca6:	f7ff fb3b 	bl	8001320 <cJSON_Print>
 8001caa:	61b8      	str	r0, [r7, #24]
        if (json_string != NULL)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <StartConsumerTask+0xf0>
        {
          // 5. Enviar a string JSON pela UART3 usando printf
          printf("%s\r\n", json_string);
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <StartConsumerTask+0x118>)
 8001cb6:	f00e f825 	bl	800fd04 <iprintf>

          // 6. LIBERAR A MEMÓRIA ALOCADA! (Muito importante)
          free(json_string);
 8001cba:	69b8      	ldr	r0, [r7, #24]
 8001cbc:	f00c fa7c 	bl	800e1b8 <free>
        }

        // 7. Liberar a memória do objeto JSON
        cJSON_Delete(root);
 8001cc0:	69f8      	ldr	r0, [r7, #28]
 8001cc2:	f7fe ff2d 	bl	8000b20 <cJSON_Delete>
    status = osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever);
 8001cc6:	e787      	b.n	8001bd8 <StartConsumerTask+0x8>
 8001cc8:	24000210 	.word	0x24000210
 8001ccc:	58020400 	.word	0x58020400
 8001cd0:	42c80000 	.word	0x42c80000
 8001cd4:	42c80000 	.word	0x42c80000
 8001cd8:	080130b0 	.word	0x080130b0
 8001cdc:	080130b8 	.word	0x080130b8
 8001ce0:	080130c4 	.word	0x080130c4
 8001ce4:	080130d0 	.word	0x080130d0
 8001ce8:	080130dc 	.word	0x080130dc

08001cec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	@ 0x28
 8001cf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d02:	4b56      	ldr	r3, [pc, #344]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d08:	4a54      	ldr	r2, [pc, #336]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d12:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b4e      	ldr	r3, [pc, #312]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	4a4d      	ldr	r2, [pc, #308]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d30:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	4a45      	ldr	r2, [pc, #276]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d4e:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	4a3e      	ldr	r2, [pc, #248]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d7a:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d80:	4a36      	ldr	r2, [pc, #216]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <MX_GPIO_Init+0x170>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	4830      	ldr	r0, [pc, #192]	@ (8001e60 <MX_GPIO_Init+0x174>)
 8001d9e:	f003 fc9f 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001da8:	482e      	ldr	r0, [pc, #184]	@ (8001e64 <MX_GPIO_Init+0x178>)
 8001daa:	f003 fc99 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001db4:	482c      	ldr	r0, [pc, #176]	@ (8001e68 <MX_GPIO_Init+0x17c>)
 8001db6:	f003 fc93 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	482b      	ldr	r0, [pc, #172]	@ (8001e6c <MX_GPIO_Init+0x180>)
 8001dc0:	f003 fc8e 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4825      	ldr	r0, [pc, #148]	@ (8001e70 <MX_GPIO_Init+0x184>)
 8001ddc:	f003 fad0 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001de0:	2310      	movs	r3, #16
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	481a      	ldr	r0, [pc, #104]	@ (8001e60 <MX_GPIO_Init+0x174>)
 8001df8:	f003 fac2 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001dfc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <MX_GPIO_Init+0x178>)
 8001e16:	f003 fab3 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8001e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_GPIO_Init+0x17c>)
 8001e34:	f003 faa4 	bl	8005380 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <MX_GPIO_Init+0x180>)
 8001e50:	f003 fa96 	bl	8005380 <HAL_GPIO_Init>

}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	@ 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	58020000 	.word	0x58020000
 8001e64:	58020400 	.word	0x58020400
 8001e68:	58020c00 	.word	0x58020c00
 8001e6c:	58021000 	.word	0x58021000
 8001e70:	58021400 	.word	0x58021400

08001e74 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e7c:	1d39      	adds	r1, r7, #4
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	2201      	movs	r2, #1
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <__io_putchar+0x20>)
 8001e86:	f007 fc71 	bl	800976c <HAL_UART_Transmit>
  return ch;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	240002ec 	.word	0x240002ec

08001e98 <AD7091R_Init>:

void AD7091R_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4816      	ldr	r0, [pc, #88]	@ (8001efc <AD7091R_Init+0x64>)
 8001ea4:	f003 fc1c 	bl	80056e0 <HAL_GPIO_WritePin>
    uint16_t reset_cmd_tx = AD7091R_CMD_RESET;
 8001ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eac:	80fb      	strh	r3, [r7, #6]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&reset_cmd_tx, 2, HAL_MAX_DELAY);
 8001eae:	1db9      	adds	r1, r7, #6
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4812      	ldr	r0, [pc, #72]	@ (8001f00 <AD7091R_Init+0x68>)
 8001eb8:	f006 fbf8 	bl	80086ac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	480e      	ldr	r0, [pc, #56]	@ (8001efc <AD7091R_Init+0x64>)
 8001ec2:	f003 fc0d 	bl	80056e0 <HAL_GPIO_WritePin>
    HAL_Delay(100); // HAL_Delay é aceitável aqui, pois é antes do RTOS iniciar
 8001ec6:	2064      	movs	r0, #100	@ 0x64
 8001ec8:	f000 feac 	bl	8002c24 <HAL_Delay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2110      	movs	r1, #16
 8001ed0:	480a      	ldr	r0, [pc, #40]	@ (8001efc <AD7091R_Init+0x64>)
 8001ed2:	f003 fc05 	bl	80056e0 <HAL_GPIO_WritePin>
    uint16_t normal_cmd_tx = AD7091R_CMD_NORMAL;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	80bb      	strh	r3, [r7, #4]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY);
 8001eda:	1d39      	adds	r1, r7, #4
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <AD7091R_Init+0x68>)
 8001ee4:	f006 fbe2 	bl	80086ac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2110      	movs	r1, #16
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <AD7091R_Init+0x64>)
 8001eee:	f003 fbf7 	bl	80056e0 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020000 	.word	0x58020000
 8001f00:	24000214 	.word	0x24000214

08001f04 <AD7091R_ReadData>:

uint16_t AD7091R_ReadData(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
    uint8_t rx_buf[2] = {0};
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	803b      	strh	r3, [r7, #0]
    uint16_t adc_raw_16bits, adc_value_12bits;

    osDelay(1); // Pequena pausa com osDelay
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f009 fab6 	bl	800b480 <osDelay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2110      	movs	r1, #16
 8001f18:	4820      	ldr	r0, [pc, #128]	@ (8001f9c <AD7091R_ReadData+0x98>)
 8001f1a:	f003 fbe1 	bl	80056e0 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8001f1e:	4639      	mov	r1, r7
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	2202      	movs	r2, #2
 8001f26:	481e      	ldr	r0, [pc, #120]	@ (8001fa0 <AD7091R_ReadData+0x9c>)
 8001f28:	f006 fdae 	bl	8008a88 <HAL_SPI_Receive>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <AD7091R_ReadData+0x5c>
    {
        HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	2110      	movs	r1, #16
 8001f36:	4819      	ldr	r0, [pc, #100]	@ (8001f9c <AD7091R_ReadData+0x98>)
 8001f38:	f003 fbd2 	bl	80056e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4818      	ldr	r0, [pc, #96]	@ (8001fa4 <AD7091R_ReadData+0xa0>)
 8001f42:	f003 fbcd 	bl	80056e0 <HAL_GPIO_WritePin>
        osDelay(100);
 8001f46:	2064      	movs	r0, #100	@ 0x64
 8001f48:	f009 fa9a 	bl	800b480 <osDelay>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4814      	ldr	r0, [pc, #80]	@ (8001fa4 <AD7091R_ReadData+0xa0>)
 8001f52:	f003 fbc5 	bl	80056e0 <HAL_GPIO_WritePin>
        printf("Erro na comunicacao SPI!\r\n");
 8001f56:	4814      	ldr	r0, [pc, #80]	@ (8001fa8 <AD7091R_ReadData+0xa4>)
 8001f58:	f00d ff3c 	bl	800fdd4 <puts>
        return 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e018      	b.n	8001f92 <AD7091R_ReadData+0x8e>
    }
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2110      	movs	r1, #16
 8001f64:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <AD7091R_ReadData+0x98>)
 8001f66:	f003 fbbb 	bl	80056e0 <HAL_GPIO_WritePin>

    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	480f      	ldr	r0, [pc, #60]	@ (8001fac <AD7091R_ReadData+0xa8>)
 8001f6e:	f003 fbd0 	bl	8005712 <HAL_GPIO_TogglePin>

    adc_raw_16bits = (rx_buf[0] << 8) | rx_buf[1];
 8001f72:	783b      	ldrb	r3, [r7, #0]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	787b      	ldrb	r3, [r7, #1]
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	80fb      	strh	r3, [r7, #6]
    adc_value_12bits = (adc_raw_16bits >> 2) & 0x0FFF;
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8e:	80bb      	strh	r3, [r7, #4]

    return adc_value_12bits;
 8001f90:	88bb      	ldrh	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	24000214 	.word	0x24000214
 8001fa4:	58021000 	.word	0x58021000
 8001fa8:	080130e4 	.word	0x080130e4
 8001fac:	58020400 	.word	0x58020400

08001fb0 <get_filtered_reading>:

uint16_t get_filtered_reading(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	70fb      	strb	r3, [r7, #3]
 8001fbe:	e00c      	b.n	8001fda <get_filtered_reading+0x2a>
        sum += AD7091R_ReadData();
 8001fc0:	f7ff ffa0 	bl	8001f04 <AD7091R_ReadData>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	607b      	str	r3, [r7, #4]
        osDelay(10);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f009 fa56 	bl	800b480 <osDelay>
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	70fb      	strb	r3, [r7, #3]
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	2b1d      	cmp	r3, #29
 8001fde:	d9ef      	bls.n	8001fc0 <get_filtered_reading+0x10>
    }
    return (uint16_t)(sum / NUM_SAMPLES);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <get_filtered_reading+0x44>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	b29b      	uxth	r3, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	88888889 	.word	0x88888889

08001ff8 <raw_to_voltage_mV>:

float raw_to_voltage_mV(uint16_t raw_value)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
    return ((float)raw_value / ADC_MAX_VALUE) * VREF_MV;
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800200c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800202c <raw_to_voltage_mV+0x34>
 8002010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002014:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002030 <raw_to_voltage_mV+0x38>
 8002018:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	457ff000 	.word	0x457ff000
 8002030:	451c4000 	.word	0x451c4000

08002034 <voltage_to_current_mA>:

float voltage_to_current_mA(float voltage_mv)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage_mv < MIN_VOLTAGE_ADC_MV) voltage_mv = MIN_VOLTAGE_ADC_MV;
 800203e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002042:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002094 <voltage_to_current_mA+0x60>
 8002046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	d501      	bpl.n	8002054 <voltage_to_current_mA+0x20>
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <voltage_to_current_mA+0x64>)
 8002052:	607b      	str	r3, [r7, #4]
    if (voltage_mv > MAX_VOLTAGE_ADC_MV) voltage_mv = MAX_VOLTAGE_ADC_MV;
 8002054:	edd7 7a01 	vldr	s15, [r7, #4]
 8002058:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800209c <voltage_to_current_mA+0x68>
 800205c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd01      	ble.n	800206a <voltage_to_current_mA+0x36>
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <voltage_to_current_mA+0x6c>)
 8002068:	607b      	str	r3, [r7, #4]

    return 4.0f + ((voltage_mv - MIN_VOLTAGE_ADC_MV) * (16.0f / (MAX_VOLTAGE_ADC_MV - MIN_VOLTAGE_ADC_MV)));
 800206a:	edd7 7a01 	vldr	s15, [r7, #4]
 800206e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002094 <voltage_to_current_mA+0x60>
 8002072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002076:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80020a4 <voltage_to_current_mA+0x70>
 800207a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002082:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002086:	eeb0 0a67 	vmov.f32	s0, s15
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	42c80000 	.word	0x42c80000
 8002098:	42c80000 	.word	0x42c80000
 800209c:	45160000 	.word	0x45160000
 80020a0:	45160000 	.word	0x45160000
 80020a4:	3be3f389 	.word	0x3be3f389

080020a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80020ac:	f000 f89c 	bl	80021e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b0:	f000 fd5c 	bl	8002b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b4:	f000 f81c 	bl	80020f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b8:	f7ff fe18 	bl	8001cec <MX_GPIO_Init>
  MX_DMA_Init();
 80020bc:	f7ff fcf2 	bl	8001aa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80020c0:	f000 fc06 	bl	80028d0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80020c4:	f000 f8d4 	bl	8002270 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Inicializando ADC AD7091R...\r\n");
 80020c8:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <main+0x40>)
 80020ca:	f00d fe83 	bl	800fdd4 <puts>
  AD7091R_Init();
 80020ce:	f7ff fee3 	bl	8001e98 <AD7091R_Init>
  printf("Sistema pronto.\r\n");
 80020d2:	4806      	ldr	r0, [pc, #24]	@ (80020ec <main+0x44>)
 80020d4:	f00d fe7e 	bl	800fdd4 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80020d8:	f009 f8f6 	bl	800b2c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80020dc:	f7ff fd0a 	bl	8001af4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020e0:	f009 f916 	bl	800b310 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <main+0x3c>
 80020e8:	08013100 	.word	0x08013100
 80020ec:	08013120 	.word	0x08013120

080020f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09c      	sub	sp, #112	@ 0x70
 80020f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fa:	224c      	movs	r2, #76	@ 0x4c
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f00d ff98 	bl	8010034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2220      	movs	r2, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f00d ff92 	bl	8010034 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002110:	2002      	movs	r0, #2
 8002112:	f003 fb19 	bl	8005748 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002116:	2300      	movs	r3, #0
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <SystemClock_Config+0xf0>)
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <SystemClock_Config+0xf0>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002126:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <SystemClock_Config+0xf0>)
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <SystemClock_Config+0xf4>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002138:	4a2a      	ldr	r2, [pc, #168]	@ (80021e4 <SystemClock_Config+0xf4>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <SystemClock_Config+0xf4>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800214c:	bf00      	nop
 800214e:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <SystemClock_Config+0xf4>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800215a:	d1f8      	bne.n	800214e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800215c:	2302      	movs	r3, #2
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002160:	2301      	movs	r3, #1
 8002162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002164:	2340      	movs	r3, #64	@ 0x40
 8002166:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002168:	2302      	movs	r3, #2
 800216a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800216c:	2300      	movs	r3, #0
 800216e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002170:	2304      	movs	r3, #4
 8002172:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002174:	230a      	movs	r3, #10
 8002176:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002178:	2302      	movs	r3, #2
 800217a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800217c:	2302      	movs	r3, #2
 800217e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002180:	2302      	movs	r3, #2
 8002182:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002184:	230c      	movs	r3, #12
 8002186:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002188:	2302      	movs	r3, #2
 800218a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002194:	4618      	mov	r0, r3
 8002196:	f003 fb11 	bl	80057bc <HAL_RCC_OscConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80021a0:	f000 f860 	bl	8002264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a4:	233f      	movs	r3, #63	@ 0x3f
 80021a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021b8:	2340      	movs	r3, #64	@ 0x40
 80021ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 ff51 	bl	8006070 <HAL_RCC_ClockConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80021d4:	f000 f846 	bl	8002264 <Error_Handler>
  }
}
 80021d8:	bf00      	nop
 80021da:	3770      	adds	r7, #112	@ 0x70
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	58000400 	.word	0x58000400
 80021e4:	58024800 	.word	0x58024800

080021e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80021ee:	463b      	mov	r3, r7
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80021fa:	f000 fe23 	bl	8002e44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021fe:	2301      	movs	r3, #1
 8002200:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002202:	2300      	movs	r3, #0
 8002204:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800220a:	231f      	movs	r3, #31
 800220c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800220e:	2387      	movs	r3, #135	@ 0x87
 8002210:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002212:	2300      	movs	r3, #0
 8002214:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002216:	2300      	movs	r3, #0
 8002218:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800221a:	2301      	movs	r3, #1
 800221c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800221e:	2301      	movs	r3, #1
 8002220:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800222a:	463b      	mov	r3, r7
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fe41 	bl	8002eb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002232:	2004      	movs	r0, #4
 8002234:	f000 fe1e 	bl	8002e74 <HAL_MPU_Enable>

}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002252:	f000 fcc7 	bl	8002be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40001400 	.word	0x40001400

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <Error_Handler+0x8>

08002270 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002274:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <MX_SPI1_Init+0xa4>)
 8002276:	4a28      	ldr	r2, [pc, #160]	@ (8002318 <MX_SPI1_Init+0xa8>)
 8002278:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800227a:	4b26      	ldr	r3, [pc, #152]	@ (8002314 <MX_SPI1_Init+0xa4>)
 800227c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002280:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002282:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <MX_SPI1_Init+0xa4>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002288:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <MX_SPI1_Init+0xa4>)
 800228a:	220f      	movs	r2, #15
 800228c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <MX_SPI1_Init+0xa4>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <MX_SPI1_Init+0xa4>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <MX_SPI1_Init+0xa4>)
 800229c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022a4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80022a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b0:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b6:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c2:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022ca:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022d0:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <MX_SPI1_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <MX_SPI1_Init+0xa4>)
 8002302:	f006 f8af 	bl	8008464 <HAL_SPI_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800230c:	f7ff ffaa 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	24000214 	.word	0x24000214
 8002318:	40013000 	.word	0x40013000

0800231c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0bc      	sub	sp, #240	@ 0xf0
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002334:	f107 0318 	add.w	r3, r7, #24
 8002338:	22c0      	movs	r2, #192	@ 0xc0
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f00d fe79 	bl	8010034 <memset>
  if(spiHandle->Instance==SPI1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a38      	ldr	r2, [pc, #224]	@ (8002428 <HAL_SPI_MspInit+0x10c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d168      	bne.n	800241e <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800234c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002358:	2300      	movs	r3, #0
 800235a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	4618      	mov	r0, r3
 8002362:	f004 fa53 	bl	800680c <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800236c:	f7ff ff7a 	bl	8002264 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002370:	4b2e      	ldr	r3, [pc, #184]	@ (800242c <HAL_SPI_MspInit+0x110>)
 8002372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002376:	4a2d      	ldr	r2, [pc, #180]	@ (800242c <HAL_SPI_MspInit+0x110>)
 8002378:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800237c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002380:	4b2a      	ldr	r3, [pc, #168]	@ (800242c <HAL_SPI_MspInit+0x110>)
 8002382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	4b27      	ldr	r3, [pc, #156]	@ (800242c <HAL_SPI_MspInit+0x110>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	4a25      	ldr	r2, [pc, #148]	@ (800242c <HAL_SPI_MspInit+0x110>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239e:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_SPI_MspInit+0x110>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <HAL_SPI_MspInit+0x110>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b2:	4a1e      	ldr	r2, [pc, #120]	@ (800242c <HAL_SPI_MspInit+0x110>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023bc:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_SPI_MspInit+0x110>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023ca:	2360      	movs	r3, #96	@ 0x60
 80023cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023e2:	2305      	movs	r3, #5
 80023e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023ec:	4619      	mov	r1, r3
 80023ee:	4810      	ldr	r0, [pc, #64]	@ (8002430 <HAL_SPI_MspInit+0x114>)
 80023f0:	f002 ffc6 	bl	8005380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023f4:	2320      	movs	r3, #32
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240c:	2305      	movs	r3, #5
 800240e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002412:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002416:	4619      	mov	r1, r3
 8002418:	4806      	ldr	r0, [pc, #24]	@ (8002434 <HAL_SPI_MspInit+0x118>)
 800241a:	f002 ffb1 	bl	8005380 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800241e:	bf00      	nop
 8002420:	37f0      	adds	r7, #240	@ 0xf0
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40013000 	.word	0x40013000
 800242c:	58024400 	.word	0x58024400
 8002430:	58020000 	.word	0x58020000
 8002434:	58020400 	.word	0x58020400

08002438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_MspInit+0x38>)
 8002440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_MspInit+0x38>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_MspInit+0x38>)
 8002450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	210f      	movs	r1, #15
 8002460:	f06f 0001 	mvn.w	r0, #1
 8002464:	f000 fcc6 	bl	8002df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400

08002474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b090      	sub	sp, #64	@ 0x40
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d827      	bhi.n	80024d2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002482:	2200      	movs	r2, #0
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	2037      	movs	r0, #55	@ 0x37
 8002488:	f000 fcb4 	bl	8002df4 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800248c:	2037      	movs	r0, #55	@ 0x37
 800248e:	f000 fccb 	bl	8002e28 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002492:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_InitTick+0xc4>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_InitTick+0xc8>)
 800249a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800249e:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_InitTick+0xc8>)
 80024a0:	f043 0320 	orr.w	r3, r3, #32
 80024a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_InitTick+0xc8>)
 80024aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024b6:	f107 0210 	add.w	r2, r7, #16
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 f961 	bl	8006788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_InitTick+0x6a>
 80024d0:	e001      	b.n	80024d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e02b      	b.n	800252e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024d6:	f004 f92b 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 80024da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80024dc:	e004      	b.n	80024e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024de:	f004 f927 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 80024e2:	4603      	mov	r3, r0
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ea:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_InitTick+0xcc>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	0c9b      	lsrs	r3, r3, #18
 80024f2:	3b01      	subs	r3, #1
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <HAL_InitTick+0xd0>)
 80024f8:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <HAL_InitTick+0xd4>)
 80024fa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_InitTick+0xd0>)
 80024fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002502:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002504:	4a0f      	ldr	r2, [pc, #60]	@ (8002544 <HAL_InitTick+0xd0>)
 8002506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002508:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_InitTick+0xd0>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_InitTick+0xd0>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002516:	480b      	ldr	r0, [pc, #44]	@ (8002544 <HAL_InitTick+0xd0>)
 8002518:	f006 fe11 	bl	800913e <HAL_TIM_Base_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002522:	4808      	ldr	r0, [pc, #32]	@ (8002544 <HAL_InitTick+0xd0>)
 8002524:	f006 fe6c 	bl	8009200 <HAL_TIM_Base_Start_IT>
 8002528:	4603      	mov	r3, r0
 800252a:	e000      	b.n	800252e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	3740      	adds	r7, #64	@ 0x40
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	24000014 	.word	0x24000014
 800253c:	58024400 	.word	0x58024400
 8002540:	431bde83 	.word	0x431bde83
 8002544:	2400029c 	.word	0x2400029c
 8002548:	40001400 	.word	0x40001400

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <NMI_Handler+0x4>

08002554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <MemManage_Handler+0x4>

08002564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <UsageFault_Handler+0x4>

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <DMA1_Stream0_IRQHandler+0x10>)
 800258a:	f001 fd93 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	24000380 	.word	0x24000380

08002598 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x10>)
 800259e:	f001 fd89 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	240003f8 	.word	0x240003f8

080025ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <USART3_IRQHandler+0x10>)
 80025b2:	f007 f969 	bl	8009888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	240002ec 	.word	0x240002ec

080025c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <TIM7_IRQHandler+0x10>)
 80025c6:	f006 fe93 	bl	80092f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2400029c 	.word	0x2400029c

080025d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_kill>:

int _kill(int pid, int sig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ee:	f00d fd95 	bl	801011c <__errno>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2216      	movs	r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
  return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_exit>:

void _exit (int status)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffe7 	bl	80025e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002616:	bf00      	nop
 8002618:	e7fd      	b.n	8002616 <_exit+0x12>

0800261a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e00a      	b.n	8002642 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800262c:	f3af 8000 	nop.w
 8002630:	4601      	mov	r1, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	60ba      	str	r2, [r7, #8]
 8002638:	b2ca      	uxtb	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	dbf0      	blt.n	800262c <_read+0x12>
  }

  return len;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e009      	b.n	800267a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	60ba      	str	r2, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fc00 	bl	8001e74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbf1      	blt.n	8002666 <_write+0x12>
  }
  return len;
 8002682:	687b      	ldr	r3, [r7, #4]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_close>:

int _close(int file)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b4:	605a      	str	r2, [r3, #4]
  return 0;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_isatty>:

int _isatty(int file)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f00d fcfa 	bl	801011c <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	24080000 	.word	0x24080000
 8002754:	00000400 	.word	0x00000400
 8002758:	240002e8 	.word	0x240002e8
 800275c:	24004f10 	.word	0x24004f10

08002760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002764:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <SystemInit+0x114>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	4a42      	ldr	r2, [pc, #264]	@ (8002874 <SystemInit+0x114>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002774:	4b40      	ldr	r3, [pc, #256]	@ (8002878 <SystemInit+0x118>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	2b06      	cmp	r3, #6
 800277e:	d807      	bhi.n	8002790 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002780:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <SystemInit+0x118>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 030f 	bic.w	r3, r3, #15
 8002788:	4a3b      	ldr	r2, [pc, #236]	@ (8002878 <SystemInit+0x118>)
 800278a:	f043 0307 	orr.w	r3, r3, #7
 800278e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002790:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <SystemInit+0x11c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a39      	ldr	r2, [pc, #228]	@ (800287c <SystemInit+0x11c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800279c:	4b37      	ldr	r3, [pc, #220]	@ (800287c <SystemInit+0x11c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027a2:	4b36      	ldr	r3, [pc, #216]	@ (800287c <SystemInit+0x11c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4935      	ldr	r1, [pc, #212]	@ (800287c <SystemInit+0x11c>)
 80027a8:	4b35      	ldr	r3, [pc, #212]	@ (8002880 <SystemInit+0x120>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027ae:	4b32      	ldr	r3, [pc, #200]	@ (8002878 <SystemInit+0x118>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <SystemInit+0x118>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 030f 	bic.w	r3, r3, #15
 80027c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002878 <SystemInit+0x118>)
 80027c4:	f043 0307 	orr.w	r3, r3, #7
 80027c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027ca:	4b2c      	ldr	r3, [pc, #176]	@ (800287c <SystemInit+0x11c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027d0:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <SystemInit+0x11c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027d6:	4b29      	ldr	r3, [pc, #164]	@ (800287c <SystemInit+0x11c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <SystemInit+0x11c>)
 80027de:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <SystemInit+0x124>)
 80027e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <SystemInit+0x11c>)
 80027e4:	4a28      	ldr	r2, [pc, #160]	@ (8002888 <SystemInit+0x128>)
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <SystemInit+0x11c>)
 80027ea:	4a28      	ldr	r2, [pc, #160]	@ (800288c <SystemInit+0x12c>)
 80027ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <SystemInit+0x11c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027f4:	4b21      	ldr	r3, [pc, #132]	@ (800287c <SystemInit+0x11c>)
 80027f6:	4a25      	ldr	r2, [pc, #148]	@ (800288c <SystemInit+0x12c>)
 80027f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <SystemInit+0x11c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002800:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <SystemInit+0x11c>)
 8002802:	4a22      	ldr	r2, [pc, #136]	@ (800288c <SystemInit+0x12c>)
 8002804:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002806:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <SystemInit+0x11c>)
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800280c:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <SystemInit+0x11c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <SystemInit+0x11c>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002818:	4b18      	ldr	r3, [pc, #96]	@ (800287c <SystemInit+0x11c>)
 800281a:	2200      	movs	r2, #0
 800281c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <SystemInit+0x130>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b1c      	ldr	r3, [pc, #112]	@ (8002894 <SystemInit+0x134>)
 8002824:	4013      	ands	r3, r2
 8002826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800282a:	d202      	bcs.n	8002832 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <SystemInit+0x138>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002832:	4b12      	ldr	r3, [pc, #72]	@ (800287c <SystemInit+0x11c>)
 8002834:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d113      	bne.n	8002868 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002840:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <SystemInit+0x11c>)
 8002842:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002846:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <SystemInit+0x11c>)
 8002848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800284c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <SystemInit+0x13c>)
 8002852:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002856:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <SystemInit+0x11c>)
 800285a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800285e:	4a07      	ldr	r2, [pc, #28]	@ (800287c <SystemInit+0x11c>)
 8002860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002864:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	52002000 	.word	0x52002000
 800287c:	58024400 	.word	0x58024400
 8002880:	eaf6ed7f 	.word	0xeaf6ed7f
 8002884:	02020200 	.word	0x02020200
 8002888:	01ff0000 	.word	0x01ff0000
 800288c:	01010280 	.word	0x01010280
 8002890:	5c001000 	.word	0x5c001000
 8002894:	ffff0000 	.word	0xffff0000
 8002898:	51008108 	.word	0x51008108
 800289c:	52004000 	.word	0x52004000

080028a0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <ExitRun0Mode+0x2c>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <ExitRun0Mode+0x2c>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80028b0:	bf00      	nop
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <ExitRun0Mode+0x2c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f9      	beq.n	80028b2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	58024800 	.word	0x58024800

080028d0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028d4:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028d6:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <MX_USART3_UART_Init+0x94>)
 80028d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028da:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028f6:	220c      	movs	r2, #12
 80028f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002900:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 8002914:	2200      	movs	r2, #0
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002918:	4811      	ldr	r0, [pc, #68]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 800291a:	f006 fed7 	bl	80096cc <HAL_UART_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002924:	f7ff fc9e 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002928:	2100      	movs	r1, #0
 800292a:	480d      	ldr	r0, [pc, #52]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 800292c:	f008 fbbe 	bl	800b0ac <HAL_UARTEx_SetTxFifoThreshold>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002936:	f7ff fc95 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293a:	2100      	movs	r1, #0
 800293c:	4808      	ldr	r0, [pc, #32]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 800293e:	f008 fbf3 	bl	800b128 <HAL_UARTEx_SetRxFifoThreshold>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002948:	f7ff fc8c 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800294c:	4804      	ldr	r0, [pc, #16]	@ (8002960 <MX_USART3_UART_Init+0x90>)
 800294e:	f008 fb74 	bl	800b03a <HAL_UARTEx_DisableFifoMode>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002958:	f7ff fc84 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	240002ec 	.word	0x240002ec
 8002964:	40004800 	.word	0x40004800

08002968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ba      	sub	sp, #232	@ 0xe8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	22c0      	movs	r2, #192	@ 0xc0
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f00d fb53 	bl	8010034 <memset>
  if(uartHandle->Instance==USART3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a59      	ldr	r2, [pc, #356]	@ (8002af8 <HAL_UART_MspInit+0x190>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 80aa 	bne.w	8002aee <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800299a:	f04f 0202 	mov.w	r2, #2
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 ff2b 	bl	800680c <HAL_RCCEx_PeriphCLKConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80029bc:	f7ff fc52 	bl	8002264 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029c0:	4b4e      	ldr	r3, [pc, #312]	@ (8002afc <HAL_UART_MspInit+0x194>)
 80029c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029c6:	4a4d      	ldr	r2, [pc, #308]	@ (8002afc <HAL_UART_MspInit+0x194>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029d0:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <HAL_UART_MspInit+0x194>)
 80029d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_UART_MspInit+0x194>)
 80029e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e4:	4a45      	ldr	r2, [pc, #276]	@ (8002afc <HAL_UART_MspInit+0x194>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ee:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_UART_MspInit+0x194>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a16:	2307      	movs	r3, #7
 8002a18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4837      	ldr	r0, [pc, #220]	@ (8002b00 <HAL_UART_MspInit+0x198>)
 8002a24:	f002 fcac 	bl	8005380 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002a28:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a2a:	4a37      	ldr	r2, [pc, #220]	@ (8002b08 <HAL_UART_MspInit+0x1a0>)
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002a2e:	4b35      	ldr	r3, [pc, #212]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a30:	222d      	movs	r2, #45	@ 0x2d
 8002a32:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a34:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3a:	4b32      	ldr	r3, [pc, #200]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a40:	4b30      	ldr	r3, [pc, #192]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a46:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a54:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a60:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a66:	4827      	ldr	r0, [pc, #156]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a68:	f000 fa64 	bl	8002f34 <HAL_DMA_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002a72:	f7ff fbf7 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a22      	ldr	r2, [pc, #136]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a7e:	4a21      	ldr	r2, [pc, #132]	@ (8002b04 <HAL_UART_MspInit+0x19c>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002a86:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_UART_MspInit+0x1a8>)
 8002a88:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002a8c:	222e      	movs	r2, #46	@ 0x2e
 8002a8e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a90:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002a92:	2240      	movs	r2, #64	@ 0x40
 8002a94:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aa2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aaa:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ab0:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ac2:	4812      	ldr	r0, [pc, #72]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002ac4:	f000 fa36 	bl	8002f34 <HAL_DMA_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002ace:	f7ff fbc9 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002ad6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_UART_MspInit+0x1a4>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2105      	movs	r1, #5
 8002ae2:	2027      	movs	r0, #39	@ 0x27
 8002ae4:	f000 f986 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ae8:	2027      	movs	r0, #39	@ 0x27
 8002aea:	f000 f99d 	bl	8002e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002aee:	bf00      	nop
 8002af0:	37e8      	adds	r7, #232	@ 0xe8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40004800 	.word	0x40004800
 8002afc:	58024400 	.word	0x58024400
 8002b00:	58020c00 	.word	0x58020c00
 8002b04:	24000380 	.word	0x24000380
 8002b08:	40020010 	.word	0x40020010
 8002b0c:	240003f8 	.word	0x240003f8
 8002b10:	40020028 	.word	0x40020028

08002b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b14:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002b50 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002b18:	f7ff fec2 	bl	80028a0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b1c:	f7ff fe20 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b20:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b22:	490d      	ldr	r1, [pc, #52]	@ (8002b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b24:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b28:	e002      	b.n	8002b30 <LoopCopyDataInit>

08002b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2e:	3304      	adds	r3, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b34:	d3f9      	bcc.n	8002b2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b38:	4c0a      	ldr	r4, [pc, #40]	@ (8002b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b3c:	e001      	b.n	8002b42 <LoopFillZerobss>

08002b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b40:	3204      	adds	r2, #4

08002b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b44:	d3fb      	bcc.n	8002b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b46:	f00d faef 	bl	8010128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4a:	f7ff faad 	bl	80020a8 <main>
  bx  lr
 8002b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b58:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002b5c:	08013670 	.word	0x08013670
  ldr r2, =_sbss
 8002b60:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002b64:	24004f10 	.word	0x24004f10

08002b68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b68:	e7fe      	b.n	8002b68 <ADC3_IRQHandler>
	...

08002b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b72:	2003      	movs	r0, #3
 8002b74:	f000 f933 	bl	8002dde <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b78:	f003 fc30 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <HAL_Init+0x68>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	4913      	ldr	r1, [pc, #76]	@ (8002bd8 <HAL_Init+0x6c>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_Init+0x68>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd8 <HAL_Init+0x6c>)
 8002ba0:	5cd3      	ldrb	r3, [r2, r3]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bac:	4a0b      	ldr	r2, [pc, #44]	@ (8002bdc <HAL_Init+0x70>)
 8002bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002be0 <HAL_Init+0x74>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bb6:	200f      	movs	r0, #15
 8002bb8:	f7ff fc5c 	bl	8002474 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e002      	b.n	8002bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc6:	f7ff fc37 	bl	8002438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	080131e0 	.word	0x080131e0
 8002bdc:	24000010 	.word	0x24000010
 8002be0:	2400000c 	.word	0x2400000c

08002be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	24000018 	.word	0x24000018
 8002c08:	24000470 	.word	0x24000470

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	24000470 	.word	0x24000470

08002c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff ffee 	bl	8002c0c <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d005      	beq.n	8002c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_Delay+0x44>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4a:	bf00      	nop
 8002c4c:	f7ff ffde 	bl	8002c0c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8f7      	bhi.n	8002c4c <HAL_Delay+0x28>
  {
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	24000018 	.word	0x24000018

08002c6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_GetREVID+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0c1b      	lsrs	r3, r3, #16
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	5c001000 	.word	0x5c001000

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	05fa0000 	.word	0x05fa0000

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	@ (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff4c 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e02:	f7ff ff63 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6978      	ldr	r0, [r7, #20]
 8002e0e:	f7ff ffb3 	bl	8002d78 <NVIC_EncodePriority>
 8002e12:	4602      	mov	r2, r0
 8002e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff82 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff56 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002e48:	f3bf 8f5f 	dmb	sy
}
 8002e4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_MPU_Disable+0x28>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	4a06      	ldr	r2, [pc, #24]	@ (8002e6c <HAL_MPU_Disable+0x28>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e58:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_MPU_Disable+0x2c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	605a      	str	r2, [r3, #4]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00
 8002e70:	e000ed90 	.word	0xe000ed90

08002e74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002eac <HAL_MPU_Enable+0x38>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_MPU_Enable+0x3c>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	4a09      	ldr	r2, [pc, #36]	@ (8002eb0 <HAL_MPU_Enable+0x3c>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e92:	f3bf 8f4f 	dsb	sy
}
 8002e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e98:	f3bf 8f6f 	isb	sy
}
 8002e9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed90 	.word	0xe000ed90
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	785a      	ldrb	r2, [r3, #1]
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_MPU_ConfigRegion+0x7c>)
 8002ec2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <HAL_MPU_ConfigRegion+0x7c>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <HAL_MPU_ConfigRegion+0x7c>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002ed0:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <HAL_MPU_ConfigRegion+0x7c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7b1b      	ldrb	r3, [r3, #12]
 8002edc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7adb      	ldrb	r3, [r3, #11]
 8002ee2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7a9b      	ldrb	r3, [r3, #10]
 8002eea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7b5b      	ldrb	r3, [r3, #13]
 8002ef2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7b9b      	ldrb	r3, [r3, #14]
 8002efa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7bdb      	ldrb	r3, [r3, #15]
 8002f02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7a5b      	ldrb	r3, [r3, #9]
 8002f0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7a1b      	ldrb	r3, [r3, #8]
 8002f12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f1c:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f20:	6113      	str	r3, [r2, #16]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000ed90 	.word	0xe000ed90

08002f34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fe66 	bl	8002c0c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e316      	b.n	800357a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a66      	ldr	r2, [pc, #408]	@ (80030ec <HAL_DMA_Init+0x1b8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04a      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a65      	ldr	r2, [pc, #404]	@ (80030f0 <HAL_DMA_Init+0x1bc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d045      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a63      	ldr	r2, [pc, #396]	@ (80030f4 <HAL_DMA_Init+0x1c0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d040      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a62      	ldr	r2, [pc, #392]	@ (80030f8 <HAL_DMA_Init+0x1c4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03b      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a60      	ldr	r2, [pc, #384]	@ (80030fc <HAL_DMA_Init+0x1c8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d036      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5f      	ldr	r2, [pc, #380]	@ (8003100 <HAL_DMA_Init+0x1cc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003104 <HAL_DMA_Init+0x1d0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02c      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5c      	ldr	r2, [pc, #368]	@ (8003108 <HAL_DMA_Init+0x1d4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d027      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5a      	ldr	r2, [pc, #360]	@ (800310c <HAL_DMA_Init+0x1d8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d022      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a59      	ldr	r2, [pc, #356]	@ (8003110 <HAL_DMA_Init+0x1dc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01d      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a57      	ldr	r2, [pc, #348]	@ (8003114 <HAL_DMA_Init+0x1e0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a56      	ldr	r2, [pc, #344]	@ (8003118 <HAL_DMA_Init+0x1e4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a54      	ldr	r2, [pc, #336]	@ (800311c <HAL_DMA_Init+0x1e8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a53      	ldr	r2, [pc, #332]	@ (8003120 <HAL_DMA_Init+0x1ec>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a51      	ldr	r2, [pc, #324]	@ (8003124 <HAL_DMA_Init+0x1f0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_Init+0xb8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a50      	ldr	r2, [pc, #320]	@ (8003128 <HAL_DMA_Init+0x1f4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Init+0xbc>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_Init+0xbe>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 813b 	beq.w	800326e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a37      	ldr	r2, [pc, #220]	@ (80030ec <HAL_DMA_Init+0x1b8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04a      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a36      	ldr	r2, [pc, #216]	@ (80030f0 <HAL_DMA_Init+0x1bc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d045      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a34      	ldr	r2, [pc, #208]	@ (80030f4 <HAL_DMA_Init+0x1c0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d040      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a33      	ldr	r2, [pc, #204]	@ (80030f8 <HAL_DMA_Init+0x1c4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d03b      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <HAL_DMA_Init+0x1c8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d036      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a30      	ldr	r2, [pc, #192]	@ (8003100 <HAL_DMA_Init+0x1cc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d031      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <HAL_DMA_Init+0x1d0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02c      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <HAL_DMA_Init+0x1d4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d027      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2b      	ldr	r2, [pc, #172]	@ (800310c <HAL_DMA_Init+0x1d8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <HAL_DMA_Init+0x1dc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01d      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a28      	ldr	r2, [pc, #160]	@ (8003114 <HAL_DMA_Init+0x1e0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <HAL_DMA_Init+0x1e4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a25      	ldr	r2, [pc, #148]	@ (800311c <HAL_DMA_Init+0x1e8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <HAL_DMA_Init+0x1ec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_DMA_Init+0x1f0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_DMA_Init+0x174>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	@ (8003128 <HAL_DMA_Init+0x1f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <HAL_DMA_Init+0x186>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e007      	b.n	80030ca <HAL_DMA_Init+0x196>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030ca:	e02f      	b.n	800312c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030cc:	f7ff fd9e 	bl	8002c0c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d928      	bls.n	800312c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e246      	b.n	800357a <HAL_DMA_Init+0x646>
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1c8      	bne.n	80030cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4b83      	ldr	r3, [pc, #524]	@ (8003354 <HAL_DMA_Init+0x420>)
 8003146:	4013      	ands	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003152:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	2b04      	cmp	r3, #4
 800317e:	d107      	bne.n	8003190 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	4313      	orrs	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003190:	4b71      	ldr	r3, [pc, #452]	@ (8003358 <HAL_DMA_Init+0x424>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b71      	ldr	r3, [pc, #452]	@ (800335c <HAL_DMA_Init+0x428>)
 8003196:	4013      	ands	r3, r2
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319c:	d328      	bcc.n	80031f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b28      	cmp	r3, #40	@ 0x28
 80031a4:	d903      	bls.n	80031ae <HAL_DMA_Init+0x27a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80031ac:	d917      	bls.n	80031de <HAL_DMA_Init+0x2aa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80031b4:	d903      	bls.n	80031be <HAL_DMA_Init+0x28a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b42      	cmp	r3, #66	@ 0x42
 80031bc:	d90f      	bls.n	80031de <HAL_DMA_Init+0x2aa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b46      	cmp	r3, #70	@ 0x46
 80031c4:	d903      	bls.n	80031ce <HAL_DMA_Init+0x29a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b48      	cmp	r3, #72	@ 0x48
 80031cc:	d907      	bls.n	80031de <HAL_DMA_Init+0x2aa>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80031d4:	d905      	bls.n	80031e2 <HAL_DMA_Init+0x2ae>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b52      	cmp	r3, #82	@ 0x52
 80031dc:	d801      	bhi.n	80031e2 <HAL_DMA_Init+0x2ae>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_DMA_Init+0x2b0>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	2b04      	cmp	r3, #4
 8003218:	d117      	bne.n	800324a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f001 ff1d 	bl	800506c <DMA_CheckFifoParam>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2240      	movs	r2, #64	@ 0x40
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e197      	b.n	800357a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f001 fe58 	bl	8004f08 <DMA_CalcBaseAndBitshift>
 8003258:	4603      	mov	r3, r0
 800325a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	223f      	movs	r2, #63	@ 0x3f
 8003266:	409a      	lsls	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	e0cd      	b.n	800340a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a3b      	ldr	r2, [pc, #236]	@ (8003360 <HAL_DMA_Init+0x42c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMA_Init+0x38a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a39      	ldr	r2, [pc, #228]	@ (8003364 <HAL_DMA_Init+0x430>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01d      	beq.n	80032be <HAL_DMA_Init+0x38a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a38      	ldr	r2, [pc, #224]	@ (8003368 <HAL_DMA_Init+0x434>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d018      	beq.n	80032be <HAL_DMA_Init+0x38a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a36      	ldr	r2, [pc, #216]	@ (800336c <HAL_DMA_Init+0x438>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_DMA_Init+0x38a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a35      	ldr	r2, [pc, #212]	@ (8003370 <HAL_DMA_Init+0x43c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_DMA_Init+0x38a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a33      	ldr	r2, [pc, #204]	@ (8003374 <HAL_DMA_Init+0x440>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_DMA_Init+0x38a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a32      	ldr	r2, [pc, #200]	@ (8003378 <HAL_DMA_Init+0x444>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_DMA_Init+0x38a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a30      	ldr	r2, [pc, #192]	@ (800337c <HAL_DMA_Init+0x448>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_DMA_Init+0x38e>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_DMA_Init+0x390>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8097 	beq.w	80033f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <HAL_DMA_Init+0x42c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d021      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a22      	ldr	r2, [pc, #136]	@ (8003364 <HAL_DMA_Init+0x430>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01c      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <HAL_DMA_Init+0x434>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d017      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <HAL_DMA_Init+0x438>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d012      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003370 <HAL_DMA_Init+0x43c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00d      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <HAL_DMA_Init+0x440>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d008      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1b      	ldr	r2, [pc, #108]	@ (8003378 <HAL_DMA_Init+0x444>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <HAL_DMA_Init+0x3e4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <HAL_DMA_Init+0x448>)
 8003316:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <HAL_DMA_Init+0x44c>)
 8003334:	4013      	ands	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d021      	beq.n	8003384 <HAL_DMA_Init+0x450>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b80      	cmp	r3, #128	@ 0x80
 8003346:	d102      	bne.n	800334e <HAL_DMA_Init+0x41a>
 8003348:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800334c:	e01b      	b.n	8003386 <HAL_DMA_Init+0x452>
 800334e:	2300      	movs	r3, #0
 8003350:	e019      	b.n	8003386 <HAL_DMA_Init+0x452>
 8003352:	bf00      	nop
 8003354:	fe10803f 	.word	0xfe10803f
 8003358:	5c001000 	.word	0x5c001000
 800335c:	ffff0000 	.word	0xffff0000
 8003360:	58025408 	.word	0x58025408
 8003364:	5802541c 	.word	0x5802541c
 8003368:	58025430 	.word	0x58025430
 800336c:	58025444 	.word	0x58025444
 8003370:	58025458 	.word	0x58025458
 8003374:	5802546c 	.word	0x5802546c
 8003378:	58025480 	.word	0x58025480
 800337c:	58025494 	.word	0x58025494
 8003380:	fffe000f 	.word	0xfffe000f
 8003384:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800338c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800339c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003584 <HAL_DMA_Init+0x650>)
 80033cc:	4413      	add	r3, r2
 80033ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003588 <HAL_DMA_Init+0x654>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	009a      	lsls	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 fd93 	bl	8004f08 <DMA_CalcBaseAndBitshift>
 80033e2:	4603      	mov	r3, r0
 80033e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2201      	movs	r2, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	e008      	b.n	800340a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2203      	movs	r2, #3
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0b7      	b.n	800357a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5f      	ldr	r2, [pc, #380]	@ (800358c <HAL_DMA_Init+0x658>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d072      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5d      	ldr	r2, [pc, #372]	@ (8003590 <HAL_DMA_Init+0x65c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d06d      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5c      	ldr	r2, [pc, #368]	@ (8003594 <HAL_DMA_Init+0x660>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d068      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5a      	ldr	r2, [pc, #360]	@ (8003598 <HAL_DMA_Init+0x664>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d063      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a59      	ldr	r2, [pc, #356]	@ (800359c <HAL_DMA_Init+0x668>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d05e      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a57      	ldr	r2, [pc, #348]	@ (80035a0 <HAL_DMA_Init+0x66c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d059      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a56      	ldr	r2, [pc, #344]	@ (80035a4 <HAL_DMA_Init+0x670>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d054      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a54      	ldr	r2, [pc, #336]	@ (80035a8 <HAL_DMA_Init+0x674>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d04f      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a53      	ldr	r2, [pc, #332]	@ (80035ac <HAL_DMA_Init+0x678>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04a      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a51      	ldr	r2, [pc, #324]	@ (80035b0 <HAL_DMA_Init+0x67c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d045      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a50      	ldr	r2, [pc, #320]	@ (80035b4 <HAL_DMA_Init+0x680>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d040      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a4e      	ldr	r2, [pc, #312]	@ (80035b8 <HAL_DMA_Init+0x684>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03b      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a4d      	ldr	r2, [pc, #308]	@ (80035bc <HAL_DMA_Init+0x688>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d036      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a4b      	ldr	r2, [pc, #300]	@ (80035c0 <HAL_DMA_Init+0x68c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a4a      	ldr	r2, [pc, #296]	@ (80035c4 <HAL_DMA_Init+0x690>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d02c      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a48      	ldr	r2, [pc, #288]	@ (80035c8 <HAL_DMA_Init+0x694>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a47      	ldr	r2, [pc, #284]	@ (80035cc <HAL_DMA_Init+0x698>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a45      	ldr	r2, [pc, #276]	@ (80035d0 <HAL_DMA_Init+0x69c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a44      	ldr	r2, [pc, #272]	@ (80035d4 <HAL_DMA_Init+0x6a0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a42      	ldr	r2, [pc, #264]	@ (80035d8 <HAL_DMA_Init+0x6a4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a41      	ldr	r2, [pc, #260]	@ (80035dc <HAL_DMA_Init+0x6a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3f      	ldr	r2, [pc, #252]	@ (80035e0 <HAL_DMA_Init+0x6ac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a3e      	ldr	r2, [pc, #248]	@ (80035e4 <HAL_DMA_Init+0x6b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_Init+0x5c6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3c      	ldr	r2, [pc, #240]	@ (80035e8 <HAL_DMA_Init+0x6b4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_DMA_Init+0x5ca>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_DMA_Init+0x5cc>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d032      	beq.n	800356a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f001 fe2d 	bl	8005164 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b80      	cmp	r3, #128	@ 0x80
 8003510:	d102      	bne.n	8003518 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800352c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_DMA_Init+0x624>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d80c      	bhi.n	8003558 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f001 feaa 	bl	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	e008      	b.n	800356a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	a7fdabf8 	.word	0xa7fdabf8
 8003588:	cccccccd 	.word	0xcccccccd
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8
 80035cc:	58025408 	.word	0x58025408
 80035d0:	5802541c 	.word	0x5802541c
 80035d4:	58025430 	.word	0x58025430
 80035d8:	58025444 	.word	0x58025444
 80035dc:	58025458 	.word	0x58025458
 80035e0:	5802546c 	.word	0x5802546c
 80035e4:	58025480 	.word	0x58025480
 80035e8:	58025494 	.word	0x58025494

080035ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff fb0a 	bl	8002c0c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e2dc      	b.n	8003bbe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d008      	beq.n	8003622 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e2cd      	b.n	8003bbe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a76      	ldr	r2, [pc, #472]	@ (8003800 <HAL_DMA_Abort+0x214>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d04a      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a74      	ldr	r2, [pc, #464]	@ (8003804 <HAL_DMA_Abort+0x218>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d045      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a73      	ldr	r2, [pc, #460]	@ (8003808 <HAL_DMA_Abort+0x21c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d040      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a71      	ldr	r2, [pc, #452]	@ (800380c <HAL_DMA_Abort+0x220>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d03b      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a70      	ldr	r2, [pc, #448]	@ (8003810 <HAL_DMA_Abort+0x224>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d036      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6e      	ldr	r2, [pc, #440]	@ (8003814 <HAL_DMA_Abort+0x228>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d031      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6d      	ldr	r2, [pc, #436]	@ (8003818 <HAL_DMA_Abort+0x22c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d02c      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6b      	ldr	r2, [pc, #428]	@ (800381c <HAL_DMA_Abort+0x230>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d027      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6a      	ldr	r2, [pc, #424]	@ (8003820 <HAL_DMA_Abort+0x234>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a68      	ldr	r2, [pc, #416]	@ (8003824 <HAL_DMA_Abort+0x238>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01d      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a67      	ldr	r2, [pc, #412]	@ (8003828 <HAL_DMA_Abort+0x23c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a65      	ldr	r2, [pc, #404]	@ (800382c <HAL_DMA_Abort+0x240>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a64      	ldr	r2, [pc, #400]	@ (8003830 <HAL_DMA_Abort+0x244>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a62      	ldr	r2, [pc, #392]	@ (8003834 <HAL_DMA_Abort+0x248>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a61      	ldr	r2, [pc, #388]	@ (8003838 <HAL_DMA_Abort+0x24c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_DMA_Abort+0xd6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5f      	ldr	r2, [pc, #380]	@ (800383c <HAL_DMA_Abort+0x250>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_DMA_Abort+0xda>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_Abort+0xdc>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 021e 	bic.w	r2, r2, #30
 80036da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e00a      	b.n	800370a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020e 	bic.w	r2, r2, #14
 8003702:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3c      	ldr	r2, [pc, #240]	@ (8003800 <HAL_DMA_Abort+0x214>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d072      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3a      	ldr	r2, [pc, #232]	@ (8003804 <HAL_DMA_Abort+0x218>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d06d      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a39      	ldr	r2, [pc, #228]	@ (8003808 <HAL_DMA_Abort+0x21c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d068      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a37      	ldr	r2, [pc, #220]	@ (800380c <HAL_DMA_Abort+0x220>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d063      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a36      	ldr	r2, [pc, #216]	@ (8003810 <HAL_DMA_Abort+0x224>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d05e      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <HAL_DMA_Abort+0x228>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d059      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a33      	ldr	r2, [pc, #204]	@ (8003818 <HAL_DMA_Abort+0x22c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d054      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_DMA_Abort+0x230>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d04f      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a30      	ldr	r2, [pc, #192]	@ (8003820 <HAL_DMA_Abort+0x234>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d04a      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <HAL_DMA_Abort+0x238>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d045      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <HAL_DMA_Abort+0x23c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d040      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2b      	ldr	r2, [pc, #172]	@ (800382c <HAL_DMA_Abort+0x240>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d03b      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2a      	ldr	r2, [pc, #168]	@ (8003830 <HAL_DMA_Abort+0x244>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d036      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a28      	ldr	r2, [pc, #160]	@ (8003834 <HAL_DMA_Abort+0x248>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d031      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a27      	ldr	r2, [pc, #156]	@ (8003838 <HAL_DMA_Abort+0x24c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d02c      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a25      	ldr	r2, [pc, #148]	@ (800383c <HAL_DMA_Abort+0x250>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d027      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a24      	ldr	r2, [pc, #144]	@ (8003840 <HAL_DMA_Abort+0x254>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d022      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <HAL_DMA_Abort+0x258>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_DMA_Abort+0x25c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d018      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1f      	ldr	r2, [pc, #124]	@ (800384c <HAL_DMA_Abort+0x260>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003850 <HAL_DMA_Abort+0x264>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <HAL_DMA_Abort+0x268>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <HAL_DMA_Abort+0x26c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_DMA_Abort+0x20e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_DMA_Abort+0x270>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d132      	bne.n	8003860 <HAL_DMA_Abort+0x274>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e031      	b.n	8003862 <HAL_DMA_Abort+0x276>
 80037fe:	bf00      	nop
 8003800:	40020010 	.word	0x40020010
 8003804:	40020028 	.word	0x40020028
 8003808:	40020040 	.word	0x40020040
 800380c:	40020058 	.word	0x40020058
 8003810:	40020070 	.word	0x40020070
 8003814:	40020088 	.word	0x40020088
 8003818:	400200a0 	.word	0x400200a0
 800381c:	400200b8 	.word	0x400200b8
 8003820:	40020410 	.word	0x40020410
 8003824:	40020428 	.word	0x40020428
 8003828:	40020440 	.word	0x40020440
 800382c:	40020458 	.word	0x40020458
 8003830:	40020470 	.word	0x40020470
 8003834:	40020488 	.word	0x40020488
 8003838:	400204a0 	.word	0x400204a0
 800383c:	400204b8 	.word	0x400204b8
 8003840:	58025408 	.word	0x58025408
 8003844:	5802541c 	.word	0x5802541c
 8003848:	58025430 	.word	0x58025430
 800384c:	58025444 	.word	0x58025444
 8003850:	58025458 	.word	0x58025458
 8003854:	5802546c 	.word	0x5802546c
 8003858:	58025480 	.word	0x58025480
 800385c:	58025494 	.word	0x58025494
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003874:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a30 <HAL_DMA_Abort+0x444>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04a      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6b      	ldr	r2, [pc, #428]	@ (8003a34 <HAL_DMA_Abort+0x448>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d045      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6a      	ldr	r2, [pc, #424]	@ (8003a38 <HAL_DMA_Abort+0x44c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d040      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a68      	ldr	r2, [pc, #416]	@ (8003a3c <HAL_DMA_Abort+0x450>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d03b      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a67      	ldr	r2, [pc, #412]	@ (8003a40 <HAL_DMA_Abort+0x454>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d036      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a65      	ldr	r2, [pc, #404]	@ (8003a44 <HAL_DMA_Abort+0x458>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a64      	ldr	r2, [pc, #400]	@ (8003a48 <HAL_DMA_Abort+0x45c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d02c      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a62      	ldr	r2, [pc, #392]	@ (8003a4c <HAL_DMA_Abort+0x460>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a61      	ldr	r2, [pc, #388]	@ (8003a50 <HAL_DMA_Abort+0x464>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5f      	ldr	r2, [pc, #380]	@ (8003a54 <HAL_DMA_Abort+0x468>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5e      	ldr	r2, [pc, #376]	@ (8003a58 <HAL_DMA_Abort+0x46c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a5c <HAL_DMA_Abort+0x470>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a60 <HAL_DMA_Abort+0x474>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a59      	ldr	r2, [pc, #356]	@ (8003a64 <HAL_DMA_Abort+0x478>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a58      	ldr	r2, [pc, #352]	@ (8003a68 <HAL_DMA_Abort+0x47c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Abort+0x32a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a56      	ldr	r2, [pc, #344]	@ (8003a6c <HAL_DMA_Abort+0x480>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <HAL_DMA_Abort+0x33c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <HAL_DMA_Abort+0x34c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003938:	e013      	b.n	8003962 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393a:	f7ff f967 	bl	8002c0c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b05      	cmp	r3, #5
 8003946:	d90c      	bls.n	8003962 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2203      	movs	r2, #3
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e12d      	b.n	8003bbe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e5      	bne.n	800393a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2f      	ldr	r2, [pc, #188]	@ (8003a30 <HAL_DMA_Abort+0x444>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a34 <HAL_DMA_Abort+0x448>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2c      	ldr	r2, [pc, #176]	@ (8003a38 <HAL_DMA_Abort+0x44c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2a      	ldr	r2, [pc, #168]	@ (8003a3c <HAL_DMA_Abort+0x450>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a29      	ldr	r2, [pc, #164]	@ (8003a40 <HAL_DMA_Abort+0x454>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a27      	ldr	r2, [pc, #156]	@ (8003a44 <HAL_DMA_Abort+0x458>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a26      	ldr	r2, [pc, #152]	@ (8003a48 <HAL_DMA_Abort+0x45c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a24      	ldr	r2, [pc, #144]	@ (8003a4c <HAL_DMA_Abort+0x460>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a23      	ldr	r2, [pc, #140]	@ (8003a50 <HAL_DMA_Abort+0x464>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a21      	ldr	r2, [pc, #132]	@ (8003a54 <HAL_DMA_Abort+0x468>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a20      	ldr	r2, [pc, #128]	@ (8003a58 <HAL_DMA_Abort+0x46c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a5c <HAL_DMA_Abort+0x470>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <HAL_DMA_Abort+0x474>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a64 <HAL_DMA_Abort+0x478>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003a68 <HAL_DMA_Abort+0x47c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_Abort+0x422>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <HAL_DMA_Abort+0x480>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Abort+0x426>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_Abort+0x428>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02b      	beq.n	8003a70 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	223f      	movs	r2, #63	@ 0x3f
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	e02a      	b.n	8003a86 <HAL_DMA_Abort+0x49a>
 8003a30:	40020010 	.word	0x40020010
 8003a34:	40020028 	.word	0x40020028
 8003a38:	40020040 	.word	0x40020040
 8003a3c:	40020058 	.word	0x40020058
 8003a40:	40020070 	.word	0x40020070
 8003a44:	40020088 	.word	0x40020088
 8003a48:	400200a0 	.word	0x400200a0
 8003a4c:	400200b8 	.word	0x400200b8
 8003a50:	40020410 	.word	0x40020410
 8003a54:	40020428 	.word	0x40020428
 8003a58:	40020440 	.word	0x40020440
 8003a5c:	40020458 	.word	0x40020458
 8003a60:	40020470 	.word	0x40020470
 8003a64:	40020488 	.word	0x40020488
 8003a68:	400204a0 	.word	0x400204a0
 8003a6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2201      	movs	r2, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc8 <HAL_DMA_Abort+0x5dc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d072      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4d      	ldr	r2, [pc, #308]	@ (8003bcc <HAL_DMA_Abort+0x5e0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d06d      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd0 <HAL_DMA_Abort+0x5e4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d068      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd4 <HAL_DMA_Abort+0x5e8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d063      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a49      	ldr	r2, [pc, #292]	@ (8003bd8 <HAL_DMA_Abort+0x5ec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d05e      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a47      	ldr	r2, [pc, #284]	@ (8003bdc <HAL_DMA_Abort+0x5f0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d059      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a46      	ldr	r2, [pc, #280]	@ (8003be0 <HAL_DMA_Abort+0x5f4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d054      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a44      	ldr	r2, [pc, #272]	@ (8003be4 <HAL_DMA_Abort+0x5f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d04f      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a43      	ldr	r2, [pc, #268]	@ (8003be8 <HAL_DMA_Abort+0x5fc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04a      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a41      	ldr	r2, [pc, #260]	@ (8003bec <HAL_DMA_Abort+0x600>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a40      	ldr	r2, [pc, #256]	@ (8003bf0 <HAL_DMA_Abort+0x604>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d040      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf4 <HAL_DMA_Abort+0x608>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d03b      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	@ (8003bf8 <HAL_DMA_Abort+0x60c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d036      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003bfc <HAL_DMA_Abort+0x610>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d031      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3a      	ldr	r2, [pc, #232]	@ (8003c00 <HAL_DMA_Abort+0x614>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d02c      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a38      	ldr	r2, [pc, #224]	@ (8003c04 <HAL_DMA_Abort+0x618>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d027      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a37      	ldr	r2, [pc, #220]	@ (8003c08 <HAL_DMA_Abort+0x61c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a35      	ldr	r2, [pc, #212]	@ (8003c0c <HAL_DMA_Abort+0x620>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01d      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a34      	ldr	r2, [pc, #208]	@ (8003c10 <HAL_DMA_Abort+0x624>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a32      	ldr	r2, [pc, #200]	@ (8003c14 <HAL_DMA_Abort+0x628>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a31      	ldr	r2, [pc, #196]	@ (8003c18 <HAL_DMA_Abort+0x62c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c1c <HAL_DMA_Abort+0x630>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2e      	ldr	r2, [pc, #184]	@ (8003c20 <HAL_DMA_Abort+0x634>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_Abort+0x58a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2c      	ldr	r2, [pc, #176]	@ (8003c24 <HAL_DMA_Abort+0x638>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_DMA_Abort+0x58e>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_DMA_Abort+0x590>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003baa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	58025408 	.word	0x58025408
 8003c0c:	5802541c 	.word	0x5802541c
 8003c10:	58025430 	.word	0x58025430
 8003c14:	58025444 	.word	0x58025444
 8003c18:	58025458 	.word	0x58025458
 8003c1c:	5802546c 	.word	0x5802546c
 8003c20:	58025480 	.word	0x58025480
 8003c24:	58025494 	.word	0x58025494

08003c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e237      	b.n	80040aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e22c      	b.n	80040aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc8 <HAL_DMA_Abort_IT+0x1a0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d04a      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dcc <HAL_DMA_Abort_IT+0x1a4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d045      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a59      	ldr	r2, [pc, #356]	@ (8003dd0 <HAL_DMA_Abort_IT+0x1a8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d040      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a58      	ldr	r2, [pc, #352]	@ (8003dd4 <HAL_DMA_Abort_IT+0x1ac>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d03b      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a56      	ldr	r2, [pc, #344]	@ (8003dd8 <HAL_DMA_Abort_IT+0x1b0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d036      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a55      	ldr	r2, [pc, #340]	@ (8003ddc <HAL_DMA_Abort_IT+0x1b4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d031      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a53      	ldr	r2, [pc, #332]	@ (8003de0 <HAL_DMA_Abort_IT+0x1b8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02c      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a52      	ldr	r2, [pc, #328]	@ (8003de4 <HAL_DMA_Abort_IT+0x1bc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d027      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a50      	ldr	r2, [pc, #320]	@ (8003de8 <HAL_DMA_Abort_IT+0x1c0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4f      	ldr	r2, [pc, #316]	@ (8003dec <HAL_DMA_Abort_IT+0x1c4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8003df0 <HAL_DMA_Abort_IT+0x1c8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8003df4 <HAL_DMA_Abort_IT+0x1cc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8003df8 <HAL_DMA_Abort_IT+0x1d0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a49      	ldr	r2, [pc, #292]	@ (8003dfc <HAL_DMA_Abort_IT+0x1d4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a47      	ldr	r2, [pc, #284]	@ (8003e00 <HAL_DMA_Abort_IT+0x1d8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0xc8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a46      	ldr	r2, [pc, #280]	@ (8003e04 <HAL_DMA_Abort_IT+0x1dc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Abort_IT+0xcc>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xce>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8086 	beq.w	8003e08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2204      	movs	r2, #4
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc8 <HAL_DMA_Abort_IT+0x1a0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d04a      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2e      	ldr	r2, [pc, #184]	@ (8003dcc <HAL_DMA_Abort_IT+0x1a4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d045      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd0 <HAL_DMA_Abort_IT+0x1a8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d040      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd4 <HAL_DMA_Abort_IT+0x1ac>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d03b      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a29      	ldr	r2, [pc, #164]	@ (8003dd8 <HAL_DMA_Abort_IT+0x1b0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d036      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a28      	ldr	r2, [pc, #160]	@ (8003ddc <HAL_DMA_Abort_IT+0x1b4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d031      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a26      	ldr	r2, [pc, #152]	@ (8003de0 <HAL_DMA_Abort_IT+0x1b8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02c      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a25      	ldr	r2, [pc, #148]	@ (8003de4 <HAL_DMA_Abort_IT+0x1bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d027      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a23      	ldr	r2, [pc, #140]	@ (8003de8 <HAL_DMA_Abort_IT+0x1c0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a22      	ldr	r2, [pc, #136]	@ (8003dec <HAL_DMA_Abort_IT+0x1c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d01d      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a20      	ldr	r2, [pc, #128]	@ (8003df0 <HAL_DMA_Abort_IT+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1f      	ldr	r2, [pc, #124]	@ (8003df4 <HAL_DMA_Abort_IT+0x1cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_DMA_Abort_IT+0x1d0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <HAL_DMA_Abort_IT+0x1d4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1a      	ldr	r2, [pc, #104]	@ (8003e00 <HAL_DMA_Abort_IT+0x1d8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x17c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a19      	ldr	r2, [pc, #100]	@ (8003e04 <HAL_DMA_Abort_IT+0x1dc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d108      	bne.n	8003db6 <HAL_DMA_Abort_IT+0x18e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e178      	b.n	80040a8 <HAL_DMA_Abort_IT+0x480>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e16f      	b.n	80040a8 <HAL_DMA_Abort_IT+0x480>
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020058 	.word	0x40020058
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	40020088 	.word	0x40020088
 8003de0:	400200a0 	.word	0x400200a0
 8003de4:	400200b8 	.word	0x400200b8
 8003de8:	40020410 	.word	0x40020410
 8003dec:	40020428 	.word	0x40020428
 8003df0:	40020440 	.word	0x40020440
 8003df4:	40020458 	.word	0x40020458
 8003df8:	40020470 	.word	0x40020470
 8003dfc:	40020488 	.word	0x40020488
 8003e00:	400204a0 	.word	0x400204a0
 8003e04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 020e 	bic.w	r2, r2, #14
 8003e16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6c      	ldr	r2, [pc, #432]	@ (8003fd0 <HAL_DMA_Abort_IT+0x3a8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d04a      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd4 <HAL_DMA_Abort_IT+0x3ac>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d045      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a69      	ldr	r2, [pc, #420]	@ (8003fd8 <HAL_DMA_Abort_IT+0x3b0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d040      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a68      	ldr	r2, [pc, #416]	@ (8003fdc <HAL_DMA_Abort_IT+0x3b4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d03b      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a66      	ldr	r2, [pc, #408]	@ (8003fe0 <HAL_DMA_Abort_IT+0x3b8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d036      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a65      	ldr	r2, [pc, #404]	@ (8003fe4 <HAL_DMA_Abort_IT+0x3bc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d031      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a63      	ldr	r2, [pc, #396]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3c0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a62      	ldr	r2, [pc, #392]	@ (8003fec <HAL_DMA_Abort_IT+0x3c4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d027      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a60      	ldr	r2, [pc, #384]	@ (8003ff0 <HAL_DMA_Abort_IT+0x3c8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d022      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff4 <HAL_DMA_Abort_IT+0x3cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d01d      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ff8 <HAL_DMA_Abort_IT+0x3d0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d018      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ffc <HAL_DMA_Abort_IT+0x3d4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5a      	ldr	r2, [pc, #360]	@ (8004000 <HAL_DMA_Abort_IT+0x3d8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a59      	ldr	r2, [pc, #356]	@ (8004004 <HAL_DMA_Abort_IT+0x3dc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a57      	ldr	r2, [pc, #348]	@ (8004008 <HAL_DMA_Abort_IT+0x3e0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x290>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a56      	ldr	r2, [pc, #344]	@ (800400c <HAL_DMA_Abort_IT+0x3e4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <HAL_DMA_Abort_IT+0x2a2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e007      	b.n	8003eda <HAL_DMA_Abort_IT+0x2b2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd0 <HAL_DMA_Abort_IT+0x3a8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d072      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd4 <HAL_DMA_Abort_IT+0x3ac>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d06d      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a39      	ldr	r2, [pc, #228]	@ (8003fd8 <HAL_DMA_Abort_IT+0x3b0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d068      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a37      	ldr	r2, [pc, #220]	@ (8003fdc <HAL_DMA_Abort_IT+0x3b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d063      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a36      	ldr	r2, [pc, #216]	@ (8003fe0 <HAL_DMA_Abort_IT+0x3b8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d05e      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <HAL_DMA_Abort_IT+0x3bc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d059      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3c0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d054      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a31      	ldr	r2, [pc, #196]	@ (8003fec <HAL_DMA_Abort_IT+0x3c4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d04f      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <HAL_DMA_Abort_IT+0x3c8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <HAL_DMA_Abort_IT+0x3cc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff8 <HAL_DMA_Abort_IT+0x3d0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ffc <HAL_DMA_Abort_IT+0x3d4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <HAL_DMA_Abort_IT+0x3d8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <HAL_DMA_Abort_IT+0x3dc>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <HAL_DMA_Abort_IT+0x3e0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a25      	ldr	r2, [pc, #148]	@ (800400c <HAL_DMA_Abort_IT+0x3e4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <HAL_DMA_Abort_IT+0x3e8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a22      	ldr	r2, [pc, #136]	@ (8004014 <HAL_DMA_Abort_IT+0x3ec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_DMA_Abort_IT+0x3f0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800401c <HAL_DMA_Abort_IT+0x3f4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_DMA_Abort_IT+0x3f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <HAL_DMA_Abort_IT+0x3fc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_DMA_Abort_IT+0x400>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_Abort_IT+0x3a2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <HAL_DMA_Abort_IT+0x404>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d132      	bne.n	8004030 <HAL_DMA_Abort_IT+0x408>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e031      	b.n	8004032 <HAL_DMA_Abort_IT+0x40a>
 8003fce:	bf00      	nop
 8003fd0:	40020010 	.word	0x40020010
 8003fd4:	40020028 	.word	0x40020028
 8003fd8:	40020040 	.word	0x40020040
 8003fdc:	40020058 	.word	0x40020058
 8003fe0:	40020070 	.word	0x40020070
 8003fe4:	40020088 	.word	0x40020088
 8003fe8:	400200a0 	.word	0x400200a0
 8003fec:	400200b8 	.word	0x400200b8
 8003ff0:	40020410 	.word	0x40020410
 8003ff4:	40020428 	.word	0x40020428
 8003ff8:	40020440 	.word	0x40020440
 8003ffc:	40020458 	.word	0x40020458
 8004000:	40020470 	.word	0x40020470
 8004004:	40020488 	.word	0x40020488
 8004008:	400204a0 	.word	0x400204a0
 800400c:	400204b8 	.word	0x400204b8
 8004010:	58025408 	.word	0x58025408
 8004014:	5802541c 	.word	0x5802541c
 8004018:	58025430 	.word	0x58025430
 800401c:	58025444 	.word	0x58025444
 8004020:	58025458 	.word	0x58025458
 8004024:	5802546c 	.word	0x5802546c
 8004028:	58025480 	.word	0x58025480
 800402c:	58025494 	.word	0x58025494
 8004030:	2300      	movs	r3, #0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d028      	beq.n	8004088 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004044:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2201      	movs	r2, #1
 8004056:	409a      	lsls	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004064:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800407c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004086:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop

080040b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040c0:	4b67      	ldr	r3, [pc, #412]	@ (8004260 <HAL_DMA_IRQHandler+0x1ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a67      	ldr	r2, [pc, #412]	@ (8004264 <HAL_DMA_IRQHandler+0x1b0>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a9b      	lsrs	r3, r3, #10
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004268 <HAL_DMA_IRQHandler+0x1b4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d04a      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a5d      	ldr	r2, [pc, #372]	@ (800426c <HAL_DMA_IRQHandler+0x1b8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d045      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004270 <HAL_DMA_IRQHandler+0x1bc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d040      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5a      	ldr	r2, [pc, #360]	@ (8004274 <HAL_DMA_IRQHandler+0x1c0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d03b      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a59      	ldr	r2, [pc, #356]	@ (8004278 <HAL_DMA_IRQHandler+0x1c4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d036      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a57      	ldr	r2, [pc, #348]	@ (800427c <HAL_DMA_IRQHandler+0x1c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d031      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a56      	ldr	r2, [pc, #344]	@ (8004280 <HAL_DMA_IRQHandler+0x1cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d02c      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a54      	ldr	r2, [pc, #336]	@ (8004284 <HAL_DMA_IRQHandler+0x1d0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d027      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a53      	ldr	r2, [pc, #332]	@ (8004288 <HAL_DMA_IRQHandler+0x1d4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a51      	ldr	r2, [pc, #324]	@ (800428c <HAL_DMA_IRQHandler+0x1d8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01d      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a50      	ldr	r2, [pc, #320]	@ (8004290 <HAL_DMA_IRQHandler+0x1dc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d018      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a4e      	ldr	r2, [pc, #312]	@ (8004294 <HAL_DMA_IRQHandler+0x1e0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4d      	ldr	r2, [pc, #308]	@ (8004298 <HAL_DMA_IRQHandler+0x1e4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4b      	ldr	r2, [pc, #300]	@ (800429c <HAL_DMA_IRQHandler+0x1e8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a4a      	ldr	r2, [pc, #296]	@ (80042a0 <HAL_DMA_IRQHandler+0x1ec>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_DMA_IRQHandler+0xd2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a48      	ldr	r2, [pc, #288]	@ (80042a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_DMA_IRQHandler+0xd6>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_DMA_IRQHandler+0xd8>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 842b 	beq.w	80049e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2208      	movs	r2, #8
 800419c:	409a      	lsls	r2, r3
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a2 	beq.w	80042ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004268 <HAL_DMA_IRQHandler+0x1b4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d04a      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2d      	ldr	r2, [pc, #180]	@ (800426c <HAL_DMA_IRQHandler+0x1b8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d045      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004270 <HAL_DMA_IRQHandler+0x1bc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d040      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004274 <HAL_DMA_IRQHandler+0x1c0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d03b      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a28      	ldr	r2, [pc, #160]	@ (8004278 <HAL_DMA_IRQHandler+0x1c4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d036      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a27      	ldr	r2, [pc, #156]	@ (800427c <HAL_DMA_IRQHandler+0x1c8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d031      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a25      	ldr	r2, [pc, #148]	@ (8004280 <HAL_DMA_IRQHandler+0x1cc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02c      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a24      	ldr	r2, [pc, #144]	@ (8004284 <HAL_DMA_IRQHandler+0x1d0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d027      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a22      	ldr	r2, [pc, #136]	@ (8004288 <HAL_DMA_IRQHandler+0x1d4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a21      	ldr	r2, [pc, #132]	@ (800428c <HAL_DMA_IRQHandler+0x1d8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01d      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1f      	ldr	r2, [pc, #124]	@ (8004290 <HAL_DMA_IRQHandler+0x1dc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1e      	ldr	r2, [pc, #120]	@ (8004294 <HAL_DMA_IRQHandler+0x1e0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <HAL_DMA_IRQHandler+0x1e4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1b      	ldr	r2, [pc, #108]	@ (800429c <HAL_DMA_IRQHandler+0x1e8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <HAL_DMA_IRQHandler+0x1ec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_DMA_IRQHandler+0x194>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d12f      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x1f4>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf14      	ite	ne
 8004256:	2301      	movne	r3, #1
 8004258:	2300      	moveq	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e02e      	b.n	80042bc <HAL_DMA_IRQHandler+0x208>
 800425e:	bf00      	nop
 8004260:	2400000c 	.word	0x2400000c
 8004264:	1b4e81b5 	.word	0x1b4e81b5
 8004268:	40020010 	.word	0x40020010
 800426c:	40020028 	.word	0x40020028
 8004270:	40020040 	.word	0x40020040
 8004274:	40020058 	.word	0x40020058
 8004278:	40020070 	.word	0x40020070
 800427c:	40020088 	.word	0x40020088
 8004280:	400200a0 	.word	0x400200a0
 8004284:	400200b8 	.word	0x400200b8
 8004288:	40020410 	.word	0x40020410
 800428c:	40020428 	.word	0x40020428
 8004290:	40020440 	.word	0x40020440
 8004294:	40020458 	.word	0x40020458
 8004298:	40020470 	.word	0x40020470
 800429c:	40020488 	.word	0x40020488
 80042a0:	400204a0 	.word	0x400204a0
 80042a4:	400204b8 	.word	0x400204b8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf14      	ite	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	2300      	moveq	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2208      	movs	r2, #8
 80042da:	409a      	lsls	r2, r3
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	fa22 f303 	lsr.w	r3, r2, r3
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d06e      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <HAL_DMA_IRQHandler+0x3f8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04a      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a67      	ldr	r2, [pc, #412]	@ (80044b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d045      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a66      	ldr	r2, [pc, #408]	@ (80044b4 <HAL_DMA_IRQHandler+0x400>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d040      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a64      	ldr	r2, [pc, #400]	@ (80044b8 <HAL_DMA_IRQHandler+0x404>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03b      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a63      	ldr	r2, [pc, #396]	@ (80044bc <HAL_DMA_IRQHandler+0x408>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d036      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a61      	ldr	r2, [pc, #388]	@ (80044c0 <HAL_DMA_IRQHandler+0x40c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a60      	ldr	r2, [pc, #384]	@ (80044c4 <HAL_DMA_IRQHandler+0x410>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a5e      	ldr	r2, [pc, #376]	@ (80044c8 <HAL_DMA_IRQHandler+0x414>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d027      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5d      	ldr	r2, [pc, #372]	@ (80044cc <HAL_DMA_IRQHandler+0x418>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5b      	ldr	r2, [pc, #364]	@ (80044d0 <HAL_DMA_IRQHandler+0x41c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5a      	ldr	r2, [pc, #360]	@ (80044d4 <HAL_DMA_IRQHandler+0x420>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a58      	ldr	r2, [pc, #352]	@ (80044d8 <HAL_DMA_IRQHandler+0x424>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a57      	ldr	r2, [pc, #348]	@ (80044dc <HAL_DMA_IRQHandler+0x428>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a55      	ldr	r2, [pc, #340]	@ (80044e0 <HAL_DMA_IRQHandler+0x42c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a54      	ldr	r2, [pc, #336]	@ (80044e4 <HAL_DMA_IRQHandler+0x430>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2ee>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a52      	ldr	r2, [pc, #328]	@ (80044e8 <HAL_DMA_IRQHandler+0x434>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10a      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x304>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e003      	b.n	80043c0 <HAL_DMA_IRQHandler+0x30c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f043 0202 	orr.w	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2204      	movs	r2, #4
 80043ea:	409a      	lsls	r2, r3
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 808f 	beq.w	8004514 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <HAL_DMA_IRQHandler+0x3f8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d04a      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2a      	ldr	r2, [pc, #168]	@ (80044b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d045      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a29      	ldr	r2, [pc, #164]	@ (80044b4 <HAL_DMA_IRQHandler+0x400>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d040      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a27      	ldr	r2, [pc, #156]	@ (80044b8 <HAL_DMA_IRQHandler+0x404>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d03b      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <HAL_DMA_IRQHandler+0x408>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d036      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a24      	ldr	r2, [pc, #144]	@ (80044c0 <HAL_DMA_IRQHandler+0x40c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d031      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a23      	ldr	r2, [pc, #140]	@ (80044c4 <HAL_DMA_IRQHandler+0x410>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d02c      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a21      	ldr	r2, [pc, #132]	@ (80044c8 <HAL_DMA_IRQHandler+0x414>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d027      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a20      	ldr	r2, [pc, #128]	@ (80044cc <HAL_DMA_IRQHandler+0x418>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1e      	ldr	r2, [pc, #120]	@ (80044d0 <HAL_DMA_IRQHandler+0x41c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01d      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <HAL_DMA_IRQHandler+0x420>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <HAL_DMA_IRQHandler+0x424>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <HAL_DMA_IRQHandler+0x428>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	@ (80044e0 <HAL_DMA_IRQHandler+0x42c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_DMA_IRQHandler+0x430>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_DMA_IRQHandler+0x3e2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <HAL_DMA_IRQHandler+0x434>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d12a      	bne.n	80044ec <HAL_DMA_IRQHandler+0x438>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e023      	b.n	80044f4 <HAL_DMA_IRQHandler+0x440>
 80044ac:	40020010 	.word	0x40020010
 80044b0:	40020028 	.word	0x40020028
 80044b4:	40020040 	.word	0x40020040
 80044b8:	40020058 	.word	0x40020058
 80044bc:	40020070 	.word	0x40020070
 80044c0:	40020088 	.word	0x40020088
 80044c4:	400200a0 	.word	0x400200a0
 80044c8:	400200b8 	.word	0x400200b8
 80044cc:	40020410 	.word	0x40020410
 80044d0:	40020428 	.word	0x40020428
 80044d4:	40020440 	.word	0x40020440
 80044d8:	40020458 	.word	0x40020458
 80044dc:	40020470 	.word	0x40020470
 80044e0:	40020488 	.word	0x40020488
 80044e4:	400204a0 	.word	0x400204a0
 80044e8:	400204b8 	.word	0x400204b8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2204      	movs	r2, #4
 8004502:	409a      	lsls	r2, r3
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450c:	f043 0204 	orr.w	r2, r3, #4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2210      	movs	r2, #16
 800451e:	409a      	lsls	r2, r3
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a6 	beq.w	8004676 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a85      	ldr	r2, [pc, #532]	@ (8004744 <HAL_DMA_IRQHandler+0x690>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d04a      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a83      	ldr	r2, [pc, #524]	@ (8004748 <HAL_DMA_IRQHandler+0x694>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d045      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a82      	ldr	r2, [pc, #520]	@ (800474c <HAL_DMA_IRQHandler+0x698>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d040      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a80      	ldr	r2, [pc, #512]	@ (8004750 <HAL_DMA_IRQHandler+0x69c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d03b      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a7f      	ldr	r2, [pc, #508]	@ (8004754 <HAL_DMA_IRQHandler+0x6a0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d036      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a7d      	ldr	r2, [pc, #500]	@ (8004758 <HAL_DMA_IRQHandler+0x6a4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d031      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7c      	ldr	r2, [pc, #496]	@ (800475c <HAL_DMA_IRQHandler+0x6a8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d02c      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a7a      	ldr	r2, [pc, #488]	@ (8004760 <HAL_DMA_IRQHandler+0x6ac>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d027      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a79      	ldr	r2, [pc, #484]	@ (8004764 <HAL_DMA_IRQHandler+0x6b0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a77      	ldr	r2, [pc, #476]	@ (8004768 <HAL_DMA_IRQHandler+0x6b4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a76      	ldr	r2, [pc, #472]	@ (800476c <HAL_DMA_IRQHandler+0x6b8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a74      	ldr	r2, [pc, #464]	@ (8004770 <HAL_DMA_IRQHandler+0x6bc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a73      	ldr	r2, [pc, #460]	@ (8004774 <HAL_DMA_IRQHandler+0x6c0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a71      	ldr	r2, [pc, #452]	@ (8004778 <HAL_DMA_IRQHandler+0x6c4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a70      	ldr	r2, [pc, #448]	@ (800477c <HAL_DMA_IRQHandler+0x6c8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_DMA_IRQHandler+0x516>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004780 <HAL_DMA_IRQHandler+0x6cc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10a      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x52c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e009      	b.n	80045f4 <HAL_DMA_IRQHandler+0x540>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d03e      	beq.n	8004676 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2210      	movs	r2, #16
 8004602:	409a      	lsls	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d024      	beq.n	8004676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
 8004634:	e01f      	b.n	8004676 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01b      	beq.n	8004676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e016      	b.n	8004676 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2220      	movs	r2, #32
 8004680:	409a      	lsls	r2, r3
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8110 	beq.w	80048ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <HAL_DMA_IRQHandler+0x690>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2b      	ldr	r2, [pc, #172]	@ (8004748 <HAL_DMA_IRQHandler+0x694>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a29      	ldr	r2, [pc, #164]	@ (800474c <HAL_DMA_IRQHandler+0x698>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a28      	ldr	r2, [pc, #160]	@ (8004750 <HAL_DMA_IRQHandler+0x69c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a26      	ldr	r2, [pc, #152]	@ (8004754 <HAL_DMA_IRQHandler+0x6a0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a25      	ldr	r2, [pc, #148]	@ (8004758 <HAL_DMA_IRQHandler+0x6a4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a23      	ldr	r2, [pc, #140]	@ (800475c <HAL_DMA_IRQHandler+0x6a8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a22      	ldr	r2, [pc, #136]	@ (8004760 <HAL_DMA_IRQHandler+0x6ac>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a20      	ldr	r2, [pc, #128]	@ (8004764 <HAL_DMA_IRQHandler+0x6b0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004768 <HAL_DMA_IRQHandler+0x6b4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_DMA_IRQHandler+0x6b8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <HAL_DMA_IRQHandler+0x6bc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <HAL_DMA_IRQHandler+0x6c0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <HAL_DMA_IRQHandler+0x6c4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <HAL_DMA_IRQHandler+0x6c8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_DMA_IRQHandler+0x678>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <HAL_DMA_IRQHandler+0x6cc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d12b      	bne.n	8004784 <HAL_DMA_IRQHandler+0x6d0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e02a      	b.n	8004798 <HAL_DMA_IRQHandler+0x6e4>
 8004742:	bf00      	nop
 8004744:	40020010 	.word	0x40020010
 8004748:	40020028 	.word	0x40020028
 800474c:	40020040 	.word	0x40020040
 8004750:	40020058 	.word	0x40020058
 8004754:	40020070 	.word	0x40020070
 8004758:	40020088 	.word	0x40020088
 800475c:	400200a0 	.word	0x400200a0
 8004760:	400200b8 	.word	0x400200b8
 8004764:	40020410 	.word	0x40020410
 8004768:	40020428 	.word	0x40020428
 800476c:	40020440 	.word	0x40020440
 8004770:	40020458 	.word	0x40020458
 8004774:	40020470 	.word	0x40020470
 8004778:	40020488 	.word	0x40020488
 800477c:	400204a0 	.word	0x400204a0
 8004780:	400204b8 	.word	0x400204b8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8087 	beq.w	80048ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2220      	movs	r2, #32
 80047a8:	409a      	lsls	r2, r3
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d139      	bne.n	800482e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0216 	bic.w	r2, r2, #22
 80047c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <HAL_DMA_IRQHandler+0x736>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0208 	bic.w	r2, r2, #8
 80047f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	223f      	movs	r2, #63	@ 0x3f
 8004804:	409a      	lsls	r2, r3
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 834a 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
          }
          return;
 800482c:	e344      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02c      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
 800485a:	e027      	b.n	80048ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d023      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
 800486c:	e01e      	b.n	80048ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10f      	bne.n	800489c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0210 	bic.w	r2, r2, #16
 800488a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8306 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8088 	beq.w	80049d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2204      	movs	r2, #4
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a7a      	ldr	r2, [pc, #488]	@ (8004abc <HAL_DMA_IRQHandler+0xa08>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d04a      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a79      	ldr	r2, [pc, #484]	@ (8004ac0 <HAL_DMA_IRQHandler+0xa0c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d045      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a77      	ldr	r2, [pc, #476]	@ (8004ac4 <HAL_DMA_IRQHandler+0xa10>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d040      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a76      	ldr	r2, [pc, #472]	@ (8004ac8 <HAL_DMA_IRQHandler+0xa14>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d03b      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a74      	ldr	r2, [pc, #464]	@ (8004acc <HAL_DMA_IRQHandler+0xa18>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d036      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a73      	ldr	r2, [pc, #460]	@ (8004ad0 <HAL_DMA_IRQHandler+0xa1c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d031      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a71      	ldr	r2, [pc, #452]	@ (8004ad4 <HAL_DMA_IRQHandler+0xa20>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02c      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a70      	ldr	r2, [pc, #448]	@ (8004ad8 <HAL_DMA_IRQHandler+0xa24>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d027      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a6e      	ldr	r2, [pc, #440]	@ (8004adc <HAL_DMA_IRQHandler+0xa28>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ae0 <HAL_DMA_IRQHandler+0xa2c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01d      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae4 <HAL_DMA_IRQHandler+0xa30>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae8 <HAL_DMA_IRQHandler+0xa34>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a68      	ldr	r2, [pc, #416]	@ (8004aec <HAL_DMA_IRQHandler+0xa38>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a67      	ldr	r2, [pc, #412]	@ (8004af0 <HAL_DMA_IRQHandler+0xa3c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a65      	ldr	r2, [pc, #404]	@ (8004af4 <HAL_DMA_IRQHandler+0xa40>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_DMA_IRQHandler+0x8b8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a64      	ldr	r2, [pc, #400]	@ (8004af8 <HAL_DMA_IRQHandler+0xa44>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <HAL_DMA_IRQHandler+0x8ca>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e007      	b.n	800498e <HAL_DMA_IRQHandler+0x8da>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004996:	429a      	cmp	r2, r3
 8004998:	d307      	bcc.n	80049aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f2      	bne.n	800498e <HAL_DMA_IRQHandler+0x8da>
 80049a8:	e000      	b.n	80049ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80049c2:	e003      	b.n	80049cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8272 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
 80049e6:	e26c      	b.n	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a43      	ldr	r2, [pc, #268]	@ (8004afc <HAL_DMA_IRQHandler+0xa48>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a42      	ldr	r2, [pc, #264]	@ (8004b00 <HAL_DMA_IRQHandler+0xa4c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d01d      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_DMA_IRQHandler+0xa50>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004b08 <HAL_DMA_IRQHandler+0xa54>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3d      	ldr	r2, [pc, #244]	@ (8004b0c <HAL_DMA_IRQHandler+0xa58>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b10 <HAL_DMA_IRQHandler+0xa5c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3a      	ldr	r2, [pc, #232]	@ (8004b14 <HAL_DMA_IRQHandler+0xa60>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x984>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a39      	ldr	r2, [pc, #228]	@ (8004b18 <HAL_DMA_IRQHandler+0xa64>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x988>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_DMA_IRQHandler+0x98a>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 823f 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2204      	movs	r2, #4
 8004a56:	409a      	lsls	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80cd 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xb48>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80c7 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2204      	movs	r2, #4
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d049      	beq.n	8004b1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8210 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa4:	e20a      	b.n	8004ebc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8206 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab8:	e200      	b.n	8004ebc <HAL_DMA_IRQHandler+0xe08>
 8004aba:	bf00      	nop
 8004abc:	40020010 	.word	0x40020010
 8004ac0:	40020028 	.word	0x40020028
 8004ac4:	40020040 	.word	0x40020040
 8004ac8:	40020058 	.word	0x40020058
 8004acc:	40020070 	.word	0x40020070
 8004ad0:	40020088 	.word	0x40020088
 8004ad4:	400200a0 	.word	0x400200a0
 8004ad8:	400200b8 	.word	0x400200b8
 8004adc:	40020410 	.word	0x40020410
 8004ae0:	40020428 	.word	0x40020428
 8004ae4:	40020440 	.word	0x40020440
 8004ae8:	40020458 	.word	0x40020458
 8004aec:	40020470 	.word	0x40020470
 8004af0:	40020488 	.word	0x40020488
 8004af4:	400204a0 	.word	0x400204a0
 8004af8:	400204b8 	.word	0x400204b8
 8004afc:	58025408 	.word	0x58025408
 8004b00:	5802541c 	.word	0x5802541c
 8004b04:	58025430 	.word	0x58025430
 8004b08:	58025444 	.word	0x58025444
 8004b0c:	58025458 	.word	0x58025458
 8004b10:	5802546c 	.word	0x5802546c
 8004b14:	58025480 	.word	0x58025480
 8004b18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d160      	bne.n	8004be8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a7f      	ldr	r2, [pc, #508]	@ (8004d28 <HAL_DMA_IRQHandler+0xc74>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d04a      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7d      	ldr	r2, [pc, #500]	@ (8004d2c <HAL_DMA_IRQHandler+0xc78>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d045      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d30 <HAL_DMA_IRQHandler+0xc7c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d040      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a7a      	ldr	r2, [pc, #488]	@ (8004d34 <HAL_DMA_IRQHandler+0xc80>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d03b      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a79      	ldr	r2, [pc, #484]	@ (8004d38 <HAL_DMA_IRQHandler+0xc84>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d036      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a77      	ldr	r2, [pc, #476]	@ (8004d3c <HAL_DMA_IRQHandler+0xc88>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d031      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a76      	ldr	r2, [pc, #472]	@ (8004d40 <HAL_DMA_IRQHandler+0xc8c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d02c      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a74      	ldr	r2, [pc, #464]	@ (8004d44 <HAL_DMA_IRQHandler+0xc90>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d027      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a73      	ldr	r2, [pc, #460]	@ (8004d48 <HAL_DMA_IRQHandler+0xc94>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a71      	ldr	r2, [pc, #452]	@ (8004d4c <HAL_DMA_IRQHandler+0xc98>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01d      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a70      	ldr	r2, [pc, #448]	@ (8004d50 <HAL_DMA_IRQHandler+0xc9c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6e      	ldr	r2, [pc, #440]	@ (8004d54 <HAL_DMA_IRQHandler+0xca0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6d      	ldr	r2, [pc, #436]	@ (8004d58 <HAL_DMA_IRQHandler+0xca4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6b      	ldr	r2, [pc, #428]	@ (8004d5c <HAL_DMA_IRQHandler+0xca8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6a      	ldr	r2, [pc, #424]	@ (8004d60 <HAL_DMA_IRQHandler+0xcac>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xb12>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a68      	ldr	r2, [pc, #416]	@ (8004d64 <HAL_DMA_IRQHandler+0xcb0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0xb24>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0208 	bic.w	r2, r2, #8
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e007      	b.n	8004be8 <HAL_DMA_IRQHandler+0xb34>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8165 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bfa:	e15f      	b.n	8004ebc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2202      	movs	r2, #2
 8004c06:	409a      	lsls	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80c5 	beq.w	8004d9c <HAL_DMA_IRQHandler+0xce8>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80bf 	beq.w	8004d9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2202      	movs	r2, #2
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d018      	beq.n	8004c6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 813a 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c54:	e134      	b.n	8004ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8130 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c68:	e12a      	b.n	8004ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 8089 	bne.w	8004d88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004d28 <HAL_DMA_IRQHandler+0xc74>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d04a      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a29      	ldr	r2, [pc, #164]	@ (8004d2c <HAL_DMA_IRQHandler+0xc78>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d045      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a28      	ldr	r2, [pc, #160]	@ (8004d30 <HAL_DMA_IRQHandler+0xc7c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d040      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a26      	ldr	r2, [pc, #152]	@ (8004d34 <HAL_DMA_IRQHandler+0xc80>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d03b      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a25      	ldr	r2, [pc, #148]	@ (8004d38 <HAL_DMA_IRQHandler+0xc84>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d036      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a23      	ldr	r2, [pc, #140]	@ (8004d3c <HAL_DMA_IRQHandler+0xc88>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d031      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a22      	ldr	r2, [pc, #136]	@ (8004d40 <HAL_DMA_IRQHandler+0xc8c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d02c      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a20      	ldr	r2, [pc, #128]	@ (8004d44 <HAL_DMA_IRQHandler+0xc90>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d027      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	@ (8004d48 <HAL_DMA_IRQHandler+0xc94>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d022      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d4c <HAL_DMA_IRQHandler+0xc98>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01d      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <HAL_DMA_IRQHandler+0xc9c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d54 <HAL_DMA_IRQHandler+0xca0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a19      	ldr	r2, [pc, #100]	@ (8004d58 <HAL_DMA_IRQHandler+0xca4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a17      	ldr	r2, [pc, #92]	@ (8004d5c <HAL_DMA_IRQHandler+0xca8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <HAL_DMA_IRQHandler+0xcac>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xc62>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a14      	ldr	r2, [pc, #80]	@ (8004d64 <HAL_DMA_IRQHandler+0xcb0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d128      	bne.n	8004d68 <HAL_DMA_IRQHandler+0xcb4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0214 	bic.w	r2, r2, #20
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e027      	b.n	8004d78 <HAL_DMA_IRQHandler+0xcc4>
 8004d28:	40020010 	.word	0x40020010
 8004d2c:	40020028 	.word	0x40020028
 8004d30:	40020040 	.word	0x40020040
 8004d34:	40020058 	.word	0x40020058
 8004d38:	40020070 	.word	0x40020070
 8004d3c:	40020088 	.word	0x40020088
 8004d40:	400200a0 	.word	0x400200a0
 8004d44:	400200b8 	.word	0x400200b8
 8004d48:	40020410 	.word	0x40020410
 8004d4c:	40020428 	.word	0x40020428
 8004d50:	40020440 	.word	0x40020440
 8004d54:	40020458 	.word	0x40020458
 8004d58:	40020470 	.word	0x40020470
 8004d5c:	40020488 	.word	0x40020488
 8004d60:	400204a0 	.word	0x400204a0
 8004d64:	400204b8 	.word	0x400204b8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 020a 	bic.w	r2, r2, #10
 8004d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8097 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d9a:	e091      	b.n	8004ec0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2208      	movs	r2, #8
 8004da6:	409a      	lsls	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8088 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8082 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a41      	ldr	r2, [pc, #260]	@ (8004ec8 <HAL_DMA_IRQHandler+0xe14>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d04a      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ecc <HAL_DMA_IRQHandler+0xe18>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d045      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed0 <HAL_DMA_IRQHandler+0xe1c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d040      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed4 <HAL_DMA_IRQHandler+0xe20>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d03b      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed8 <HAL_DMA_IRQHandler+0xe24>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d036      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a39      	ldr	r2, [pc, #228]	@ (8004edc <HAL_DMA_IRQHandler+0xe28>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d031      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a38      	ldr	r2, [pc, #224]	@ (8004ee0 <HAL_DMA_IRQHandler+0xe2c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d02c      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a36      	ldr	r2, [pc, #216]	@ (8004ee4 <HAL_DMA_IRQHandler+0xe30>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d027      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a35      	ldr	r2, [pc, #212]	@ (8004ee8 <HAL_DMA_IRQHandler+0xe34>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a33      	ldr	r2, [pc, #204]	@ (8004eec <HAL_DMA_IRQHandler+0xe38>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01d      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a32      	ldr	r2, [pc, #200]	@ (8004ef0 <HAL_DMA_IRQHandler+0xe3c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a30      	ldr	r2, [pc, #192]	@ (8004ef4 <HAL_DMA_IRQHandler+0xe40>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef8 <HAL_DMA_IRQHandler+0xe44>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2d      	ldr	r2, [pc, #180]	@ (8004efc <HAL_DMA_IRQHandler+0xe48>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f00 <HAL_DMA_IRQHandler+0xe4c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xdaa>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2a      	ldr	r2, [pc, #168]	@ (8004f04 <HAL_DMA_IRQHandler+0xe50>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <HAL_DMA_IRQHandler+0xdbc>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 021c 	bic.w	r2, r2, #28
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e007      	b.n	8004e80 <HAL_DMA_IRQHandler+0xdcc>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 020e 	bic.w	r2, r2, #14
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
 8004eb6:	e004      	b.n	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ec2:	3728      	adds	r7, #40	@ 0x28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8

08004f08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a42      	ldr	r2, [pc, #264]	@ (8005020 <DMA_CalcBaseAndBitshift+0x118>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04a      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a41      	ldr	r2, [pc, #260]	@ (8005024 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d045      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3f      	ldr	r2, [pc, #252]	@ (8005028 <DMA_CalcBaseAndBitshift+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d040      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3e      	ldr	r2, [pc, #248]	@ (800502c <DMA_CalcBaseAndBitshift+0x124>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d03b      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005030 <DMA_CalcBaseAndBitshift+0x128>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d036      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3b      	ldr	r2, [pc, #236]	@ (8005034 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d031      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a39      	ldr	r2, [pc, #228]	@ (8005038 <DMA_CalcBaseAndBitshift+0x130>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02c      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a38      	ldr	r2, [pc, #224]	@ (800503c <DMA_CalcBaseAndBitshift+0x134>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d027      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a36      	ldr	r2, [pc, #216]	@ (8005040 <DMA_CalcBaseAndBitshift+0x138>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a35      	ldr	r2, [pc, #212]	@ (8005044 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d01d      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a33      	ldr	r2, [pc, #204]	@ (8005048 <DMA_CalcBaseAndBitshift+0x140>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a32      	ldr	r2, [pc, #200]	@ (800504c <DMA_CalcBaseAndBitshift+0x144>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <DMA_CalcBaseAndBitshift+0x148>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	@ (8005054 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005058 <DMA_CalcBaseAndBitshift+0x150>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2c      	ldr	r2, [pc, #176]	@ (800505c <DMA_CalcBaseAndBitshift+0x154>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d101      	bne.n	8004fb4 <DMA_CalcBaseAndBitshift+0xac>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <DMA_CalcBaseAndBitshift+0xae>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d024      	beq.n	8005004 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	3b10      	subs	r3, #16
 8004fc2:	4a27      	ldr	r2, [pc, #156]	@ (8005060 <DMA_CalcBaseAndBitshift+0x158>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	4a24      	ldr	r2, [pc, #144]	@ (8005064 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d908      	bls.n	8004ff4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8005068 <DMA_CalcBaseAndBitshift+0x160>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ff2:	e00d      	b.n	8005010 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8005068 <DMA_CalcBaseAndBitshift+0x160>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6593      	str	r3, [r2, #88]	@ 0x58
 8005002:	e005      	b.n	8005010 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40020010 	.word	0x40020010
 8005024:	40020028 	.word	0x40020028
 8005028:	40020040 	.word	0x40020040
 800502c:	40020058 	.word	0x40020058
 8005030:	40020070 	.word	0x40020070
 8005034:	40020088 	.word	0x40020088
 8005038:	400200a0 	.word	0x400200a0
 800503c:	400200b8 	.word	0x400200b8
 8005040:	40020410 	.word	0x40020410
 8005044:	40020428 	.word	0x40020428
 8005048:	40020440 	.word	0x40020440
 800504c:	40020458 	.word	0x40020458
 8005050:	40020470 	.word	0x40020470
 8005054:	40020488 	.word	0x40020488
 8005058:	400204a0 	.word	0x400204a0
 800505c:	400204b8 	.word	0x400204b8
 8005060:	aaaaaaab 	.word	0xaaaaaaab
 8005064:	080131f0 	.word	0x080131f0
 8005068:	fffffc00 	.word	0xfffffc00

0800506c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d120      	bne.n	80050c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	2b03      	cmp	r3, #3
 8005086:	d858      	bhi.n	800513a <DMA_CheckFifoParam+0xce>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <DMA_CheckFifoParam+0x24>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050b3 	.word	0x080050b3
 8005098:	080050a1 	.word	0x080050a1
 800509c:	0800513b 	.word	0x0800513b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d048      	beq.n	800513e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b0:	e045      	b.n	800513e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050ba:	d142      	bne.n	8005142 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c0:	e03f      	b.n	8005142 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ca:	d123      	bne.n	8005114 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d838      	bhi.n	8005146 <DMA_CheckFifoParam+0xda>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <DMA_CheckFifoParam+0x70>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050f3 	.word	0x080050f3
 80050e4:	080050ed 	.word	0x080050ed
 80050e8:	08005105 	.word	0x08005105
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
        break;
 80050f0:	e030      	b.n	8005154 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d025      	beq.n	800514a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005102:	e022      	b.n	800514a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800510c:	d11f      	bne.n	800514e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005112:	e01c      	b.n	800514e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	2b02      	cmp	r3, #2
 800511a:	d902      	bls.n	8005122 <DMA_CheckFifoParam+0xb6>
 800511c:	2b03      	cmp	r3, #3
 800511e:	d003      	beq.n	8005128 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005120:	e018      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
        break;
 8005126:	e015      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00e      	beq.n	8005152 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
    break;
 8005138:	e00b      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
        break;
 800513a:	bf00      	nop
 800513c:	e00a      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        break;
 800513e:	bf00      	nop
 8005140:	e008      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e006      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e004      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        break;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
        break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <DMA_CheckFifoParam+0xe8>
    break;
 8005152:	bf00      	nop
    }
  }

  return status;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop

08005164 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a38      	ldr	r2, [pc, #224]	@ (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a36      	ldr	r2, [pc, #216]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01d      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a35      	ldr	r2, [pc, #212]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a33      	ldr	r2, [pc, #204]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a32      	ldr	r2, [pc, #200]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a30      	ldr	r2, [pc, #192]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	3b08      	subs	r3, #8
 80051d4:	4a28      	ldr	r2, [pc, #160]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4b26      	ldr	r3, [pc, #152]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a24      	ldr	r2, [pc, #144]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	2201      	movs	r2, #1
 80051fa:	409a      	lsls	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005200:	e024      	b.n	800524c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3b10      	subs	r3, #16
 800520a:	4a1e      	ldr	r2, [pc, #120]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a1c      	ldr	r2, [pc, #112]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d806      	bhi.n	800522a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a1b      	ldr	r2, [pc, #108]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d902      	bls.n	800522a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3308      	adds	r3, #8
 8005228:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4b18      	ldr	r3, [pc, #96]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a16      	ldr	r2, [pc, #88]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800523c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	58025408 	.word	0x58025408
 800525c:	5802541c 	.word	0x5802541c
 8005260:	58025430 	.word	0x58025430
 8005264:	58025444 	.word	0x58025444
 8005268:	58025458 	.word	0x58025458
 800526c:	5802546c 	.word	0x5802546c
 8005270:	58025480 	.word	0x58025480
 8005274:	58025494 	.word	0x58025494
 8005278:	cccccccd 	.word	0xcccccccd
 800527c:	16009600 	.word	0x16009600
 8005280:	58025880 	.word	0x58025880
 8005284:	aaaaaaab 	.word	0xaaaaaaab
 8005288:	400204b8 	.word	0x400204b8
 800528c:	4002040f 	.word	0x4002040f
 8005290:	10008200 	.word	0x10008200
 8005294:	40020880 	.word	0x40020880

08005298 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d04a      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d847      	bhi.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a25      	ldr	r2, [pc, #148]	@ (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d022      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a24      	ldr	r2, [pc, #144]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d01d      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a22      	ldr	r2, [pc, #136]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d018      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a21      	ldr	r2, [pc, #132]	@ (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00e      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d009      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4b17      	ldr	r3, [pc, #92]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	461a      	mov	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a15      	ldr	r2, [pc, #84]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005320:	671a      	str	r2, [r3, #112]	@ 0x70
 8005322:	e009      	b.n	8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4b14      	ldr	r3, [pc, #80]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	461a      	mov	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a11      	ldr	r2, [pc, #68]	@ (800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005336:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	2201      	movs	r2, #1
 800533e:	409a      	lsls	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	58025408 	.word	0x58025408
 8005354:	5802541c 	.word	0x5802541c
 8005358:	58025430 	.word	0x58025430
 800535c:	58025444 	.word	0x58025444
 8005360:	58025458 	.word	0x58025458
 8005364:	5802546c 	.word	0x5802546c
 8005368:	58025480 	.word	0x58025480
 800536c:	58025494 	.word	0x58025494
 8005370:	1600963f 	.word	0x1600963f
 8005374:	58025940 	.word	0x58025940
 8005378:	1000823f 	.word	0x1000823f
 800537c:	40020940 	.word	0x40020940

08005380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	@ 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800538e:	4b89      	ldr	r3, [pc, #548]	@ (80055b4 <HAL_GPIO_Init+0x234>)
 8005390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005392:	e194      	b.n	80056be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8186 	beq.w	80056b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d005      	beq.n	80053c4 <HAL_GPIO_Init+0x44>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d130      	bne.n	8005426 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	2203      	movs	r2, #3
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053fa:	2201      	movs	r2, #1
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f003 0201 	and.w	r2, r3, #1
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b03      	cmp	r3, #3
 8005430:	d017      	beq.n	8005462 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2203      	movs	r2, #3
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d123      	bne.n	80054b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	08da      	lsrs	r2, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3208      	adds	r2, #8
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	220f      	movs	r2, #15
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	08da      	lsrs	r2, r3, #3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3208      	adds	r2, #8
 80054b0:	69b9      	ldr	r1, [r7, #24]
 80054b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	2203      	movs	r2, #3
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 0203 	and.w	r2, r3, #3
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80e0 	beq.w	80056b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f8:	4b2f      	ldr	r3, [pc, #188]	@ (80055b8 <HAL_GPIO_Init+0x238>)
 80054fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054fe:	4a2e      	ldr	r2, [pc, #184]	@ (80055b8 <HAL_GPIO_Init+0x238>)
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005508:	4b2b      	ldr	r3, [pc, #172]	@ (80055b8 <HAL_GPIO_Init+0x238>)
 800550a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005516:	4a29      	ldr	r2, [pc, #164]	@ (80055bc <HAL_GPIO_Init+0x23c>)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	3302      	adds	r3, #2
 800551e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	220f      	movs	r2, #15
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4013      	ands	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a20      	ldr	r2, [pc, #128]	@ (80055c0 <HAL_GPIO_Init+0x240>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d052      	beq.n	80055e8 <HAL_GPIO_Init+0x268>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1f      	ldr	r2, [pc, #124]	@ (80055c4 <HAL_GPIO_Init+0x244>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d031      	beq.n	80055ae <HAL_GPIO_Init+0x22e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <HAL_GPIO_Init+0x248>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d02b      	beq.n	80055aa <HAL_GPIO_Init+0x22a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <HAL_GPIO_Init+0x24c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d025      	beq.n	80055a6 <HAL_GPIO_Init+0x226>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_GPIO_Init+0x250>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01f      	beq.n	80055a2 <HAL_GPIO_Init+0x222>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1b      	ldr	r2, [pc, #108]	@ (80055d4 <HAL_GPIO_Init+0x254>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d019      	beq.n	800559e <HAL_GPIO_Init+0x21e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1a      	ldr	r2, [pc, #104]	@ (80055d8 <HAL_GPIO_Init+0x258>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_GPIO_Init+0x21a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <HAL_GPIO_Init+0x25c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00d      	beq.n	8005596 <HAL_GPIO_Init+0x216>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <HAL_GPIO_Init+0x260>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <HAL_GPIO_Init+0x212>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a17      	ldr	r2, [pc, #92]	@ (80055e4 <HAL_GPIO_Init+0x264>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d101      	bne.n	800558e <HAL_GPIO_Init+0x20e>
 800558a:	2309      	movs	r3, #9
 800558c:	e02d      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 800558e:	230a      	movs	r3, #10
 8005590:	e02b      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 8005592:	2308      	movs	r3, #8
 8005594:	e029      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 8005596:	2307      	movs	r3, #7
 8005598:	e027      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 800559a:	2306      	movs	r3, #6
 800559c:	e025      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 800559e:	2305      	movs	r3, #5
 80055a0:	e023      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 80055a2:	2304      	movs	r3, #4
 80055a4:	e021      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 80055a6:	2303      	movs	r3, #3
 80055a8:	e01f      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e01d      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e01b      	b.n	80055ea <HAL_GPIO_Init+0x26a>
 80055b2:	bf00      	nop
 80055b4:	58000080 	.word	0x58000080
 80055b8:	58024400 	.word	0x58024400
 80055bc:	58000400 	.word	0x58000400
 80055c0:	58020000 	.word	0x58020000
 80055c4:	58020400 	.word	0x58020400
 80055c8:	58020800 	.word	0x58020800
 80055cc:	58020c00 	.word	0x58020c00
 80055d0:	58021000 	.word	0x58021000
 80055d4:	58021400 	.word	0x58021400
 80055d8:	58021800 	.word	0x58021800
 80055dc:	58021c00 	.word	0x58021c00
 80055e0:	58022000 	.word	0x58022000
 80055e4:	58022400 	.word	0x58022400
 80055e8:	2300      	movs	r3, #0
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	f002 0203 	and.w	r2, r2, #3
 80055f0:	0092      	lsls	r2, r2, #2
 80055f2:	4093      	lsls	r3, r2
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055fa:	4938      	ldr	r1, [pc, #224]	@ (80056dc <HAL_GPIO_Init+0x35c>)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	3302      	adds	r3, #2
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800562e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	43db      	mvns	r3, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4013      	ands	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800565c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f47f ae63 	bne.w	8005394 <HAL_GPIO_Init+0x14>
  }
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	3724      	adds	r7, #36	@ 0x24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	58000400 	.word	0x58000400

080056e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	807b      	strh	r3, [r7, #2]
 80056ec:	4613      	mov	r3, r2
 80056ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056f0:	787b      	ldrb	r3, [r7, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056f6:	887a      	ldrh	r2, [r7, #2]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80056fc:	e003      	b.n	8005706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	041a      	lsls	r2, r3, #16
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	619a      	str	r2, [r3, #24]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4013      	ands	r3, r2
 800572a:	041a      	lsls	r2, r3, #16
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	43d9      	mvns	r1, r3
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	400b      	ands	r3, r1
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	619a      	str	r2, [r3, #24]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005750:	4b19      	ldr	r3, [pc, #100]	@ (80057b8 <HAL_PWREx_ConfigSupply+0x70>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d00a      	beq.n	8005772 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800575c:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <HAL_PWREx_ConfigSupply+0x70>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e01f      	b.n	80057ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e01d      	b.n	80057ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005772:	4b11      	ldr	r3, [pc, #68]	@ (80057b8 <HAL_PWREx_ConfigSupply+0x70>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f023 0207 	bic.w	r2, r3, #7
 800577a:	490f      	ldr	r1, [pc, #60]	@ (80057b8 <HAL_PWREx_ConfigSupply+0x70>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4313      	orrs	r3, r2
 8005780:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005782:	f7fd fa43 	bl	8002c0c <HAL_GetTick>
 8005786:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005788:	e009      	b.n	800579e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800578a:	f7fd fa3f 	bl	8002c0c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005798:	d901      	bls.n	800579e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e007      	b.n	80057ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_PWREx_ConfigSupply+0x70>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057aa:	d1ee      	bne.n	800578a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	58024800 	.word	0x58024800

080057bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	@ 0x30
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f000 bc48 	b.w	8006060 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8088 	beq.w	80058ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057de:	4b99      	ldr	r3, [pc, #612]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057e8:	4b96      	ldr	r3, [pc, #600]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d007      	beq.n	8005804 <HAL_RCC_OscConfig+0x48>
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	2b18      	cmp	r3, #24
 80057f8:	d111      	bne.n	800581e <HAL_RCC_OscConfig+0x62>
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d10c      	bne.n	800581e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	4b8f      	ldr	r3, [pc, #572]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d06d      	beq.n	80058ec <HAL_RCC_OscConfig+0x130>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d169      	bne.n	80058ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f000 bc21 	b.w	8006060 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005826:	d106      	bne.n	8005836 <HAL_RCC_OscConfig+0x7a>
 8005828:	4b86      	ldr	r3, [pc, #536]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a85      	ldr	r2, [pc, #532]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800582e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e02e      	b.n	8005894 <HAL_RCC_OscConfig+0xd8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10c      	bne.n	8005858 <HAL_RCC_OscConfig+0x9c>
 800583e:	4b81      	ldr	r3, [pc, #516]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a80      	ldr	r2, [pc, #512]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e01d      	b.n	8005894 <HAL_RCC_OscConfig+0xd8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0xc0>
 8005862:	4b78      	ldr	r3, [pc, #480]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a77      	ldr	r2, [pc, #476]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4b75      	ldr	r3, [pc, #468]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a74      	ldr	r2, [pc, #464]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e00b      	b.n	8005894 <HAL_RCC_OscConfig+0xd8>
 800587c:	4b71      	ldr	r3, [pc, #452]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a70      	ldr	r2, [pc, #448]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4b6e      	ldr	r3, [pc, #440]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a6d      	ldr	r2, [pc, #436]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800588e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fd f9b6 	bl	8002c0c <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fd f9b2 	bl	8002c0c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	@ 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e3d4      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058b6:	4b63      	ldr	r3, [pc, #396]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0xe8>
 80058c2:	e014      	b.n	80058ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fd f9a2 	bl	8002c0c <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058cc:	f7fd f99e 	bl	8002c0c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	@ 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e3c0      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058de:	4b59      	ldr	r3, [pc, #356]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x110>
 80058ea:	e000      	b.n	80058ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80ca 	beq.w	8005a90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058fc:	4b51      	ldr	r3, [pc, #324]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005904:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005906:	4b4f      	ldr	r3, [pc, #316]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_RCC_OscConfig+0x166>
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2b18      	cmp	r3, #24
 8005916:	d156      	bne.n	80059c6 <HAL_RCC_OscConfig+0x20a>
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d151      	bne.n	80059c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005922:	4b48      	ldr	r3, [pc, #288]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_RCC_OscConfig+0x17e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e392      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800593a:	4b42      	ldr	r3, [pc, #264]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 0219 	bic.w	r2, r3, #25
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	493f      	ldr	r1, [pc, #252]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fd f95e 	bl	8002c0c <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005954:	f7fd f95a 	bl	8002c0c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e37c      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005966:	4b37      	ldr	r3, [pc, #220]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005972:	f7fd f97b 	bl	8002c6c <HAL_GetREVID>
 8005976:	4603      	mov	r3, r0
 8005978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800597c:	4293      	cmp	r3, r2
 800597e:	d817      	bhi.n	80059b0 <HAL_RCC_OscConfig+0x1f4>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d108      	bne.n	800599a <HAL_RCC_OscConfig+0x1de>
 8005988:	4b2e      	ldr	r3, [pc, #184]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005990:	4a2c      	ldr	r2, [pc, #176]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005996:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005998:	e07a      	b.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	031b      	lsls	r3, r3, #12
 80059a8:	4926      	ldr	r1, [pc, #152]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059ae:	e06f      	b.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b24      	ldr	r3, [pc, #144]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	4921      	ldr	r1, [pc, #132]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c4:	e064      	b.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d047      	beq.n	8005a5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 0219 	bic.w	r2, r3, #25
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	491a      	ldr	r1, [pc, #104]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fd f914 	bl	8002c0c <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e8:	f7fd f910 	bl	8002c0c <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e332      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059fa:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a06:	f7fd f931 	bl	8002c6c <HAL_GetREVID>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d819      	bhi.n	8005a48 <HAL_RCC_OscConfig+0x28c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d108      	bne.n	8005a2e <HAL_RCC_OscConfig+0x272>
 8005a1c:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005a24:	4a07      	ldr	r2, [pc, #28]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2a:	6053      	str	r3, [r2, #4]
 8005a2c:	e030      	b.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	031b      	lsls	r3, r3, #12
 8005a3c:	4901      	ldr	r1, [pc, #4]	@ (8005a44 <HAL_RCC_OscConfig+0x288>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	604b      	str	r3, [r1, #4]
 8005a42:	e025      	b.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
 8005a44:	58024400 	.word	0x58024400
 8005a48:	4b9a      	ldr	r3, [pc, #616]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	4997      	ldr	r1, [pc, #604]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
 8005a5c:	e018      	b.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a5e:	4b95      	ldr	r3, [pc, #596]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a94      	ldr	r2, [pc, #592]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fd f8cf 	bl	8002c0c <HAL_GetTick>
 8005a6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a72:	f7fd f8cb 	bl	8002c0c <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e2ed      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a84:	4b8b      	ldr	r3, [pc, #556]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80a9 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9e:	4b85      	ldr	r3, [pc, #532]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aa6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005aa8:	4b82      	ldr	r3, [pc, #520]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d007      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x308>
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b18      	cmp	r3, #24
 8005ab8:	d13a      	bne.n	8005b30 <HAL_RCC_OscConfig+0x374>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d135      	bne.n	8005b30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_RCC_OscConfig+0x320>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b80      	cmp	r3, #128	@ 0x80
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e2c1      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005adc:	f7fd f8c6 	bl	8002c6c <HAL_GetREVID>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d817      	bhi.n	8005b1a <HAL_RCC_OscConfig+0x35e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d108      	bne.n	8005b04 <HAL_RCC_OscConfig+0x348>
 8005af2:	4b70      	ldr	r3, [pc, #448]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005afa:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005afc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b00:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b02:	e075      	b.n	8005bf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b04:	4b6b      	ldr	r3, [pc, #428]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	069b      	lsls	r3, r3, #26
 8005b12:	4968      	ldr	r1, [pc, #416]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b18:	e06a      	b.n	8005bf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b1a:	4b66      	ldr	r3, [pc, #408]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	4962      	ldr	r1, [pc, #392]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b2e:	e05f      	b.n	8005bf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d042      	beq.n	8005bbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b38:	4b5e      	ldr	r3, [pc, #376]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fd f862 	bl	8002c0c <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b4c:	f7fd f85e 	bl	8002c0c <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e280      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b5e:	4b55      	ldr	r3, [pc, #340]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b6a:	f7fd f87f 	bl	8002c6c <HAL_GetREVID>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d817      	bhi.n	8005ba8 <HAL_RCC_OscConfig+0x3ec>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d108      	bne.n	8005b92 <HAL_RCC_OscConfig+0x3d6>
 8005b80:	4b4c      	ldr	r3, [pc, #304]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b88:	4a4a      	ldr	r2, [pc, #296]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b8e:	6053      	str	r3, [r2, #4]
 8005b90:	e02e      	b.n	8005bf0 <HAL_RCC_OscConfig+0x434>
 8005b92:	4b48      	ldr	r3, [pc, #288]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	069b      	lsls	r3, r3, #26
 8005ba0:	4944      	ldr	r1, [pc, #272]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
 8005ba6:	e023      	b.n	8005bf0 <HAL_RCC_OscConfig+0x434>
 8005ba8:	4b42      	ldr	r3, [pc, #264]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	493f      	ldr	r1, [pc, #252]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60cb      	str	r3, [r1, #12]
 8005bbc:	e018      	b.n	8005bf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fd f81f 	bl	8002c0c <HAL_GetTick>
 8005bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005bd2:	f7fd f81b 	bl	8002c0c <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e23d      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005be4:	4b33      	ldr	r3, [pc, #204]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f0      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d036      	beq.n	8005c6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d019      	beq.n	8005c38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c04:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c08:	4a2a      	ldr	r2, [pc, #168]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fc fffc 	bl	8002c0c <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c18:	f7fc fff8 	bl	8002c0c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e21a      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c2a:	4b22      	ldr	r3, [pc, #136]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x45c>
 8005c36:	e018      	b.n	8005c6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c38:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fc ffe2 	bl	8002c0c <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fc ffde 	bl	8002c0c <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e200      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c5e:	4b15      	ldr	r3, [pc, #84]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d039      	beq.n	8005cea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c8a:	f7fc ffbf 	bl	8002c0c <HAL_GetTick>
 8005c8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c92:	f7fc ffbb 	bl	8002c0c <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e1dd      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ca4:	4b03      	ldr	r3, [pc, #12]	@ (8005cb4 <HAL_RCC_OscConfig+0x4f8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x4d6>
 8005cb0:	e01b      	b.n	8005cea <HAL_RCC_OscConfig+0x52e>
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cb8:	4b9b      	ldr	r3, [pc, #620]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a9a      	ldr	r2, [pc, #616]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cc4:	f7fc ffa2 	bl	8002c0c <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ccc:	f7fc ff9e 	bl	8002c0c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e1c0      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cde:	4b92      	ldr	r3, [pc, #584]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8081 	beq.w	8005dfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8005f2c <HAL_RCC_OscConfig+0x770>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a8b      	ldr	r2, [pc, #556]	@ (8005f2c <HAL_RCC_OscConfig+0x770>)
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d04:	f7fc ff82 	bl	8002c0c <HAL_GetTick>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0c:	f7fc ff7e 	bl	8002c0c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	@ 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1a0      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1e:	4b83      	ldr	r3, [pc, #524]	@ (8005f2c <HAL_RCC_OscConfig+0x770>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d106      	bne.n	8005d40 <HAL_RCC_OscConfig+0x584>
 8005d32:	4b7d      	ldr	r3, [pc, #500]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d36:	4a7c      	ldr	r2, [pc, #496]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d3e:	e02d      	b.n	8005d9c <HAL_RCC_OscConfig+0x5e0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <HAL_RCC_OscConfig+0x5a6>
 8005d48:	4b77      	ldr	r3, [pc, #476]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4c:	4a76      	ldr	r2, [pc, #472]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d54:	4b74      	ldr	r3, [pc, #464]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d58:	4a73      	ldr	r2, [pc, #460]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d5a:	f023 0304 	bic.w	r3, r3, #4
 8005d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d60:	e01c      	b.n	8005d9c <HAL_RCC_OscConfig+0x5e0>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d10c      	bne.n	8005d84 <HAL_RCC_OscConfig+0x5c8>
 8005d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d70:	f043 0304 	orr.w	r3, r3, #4
 8005d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d76:	4b6c      	ldr	r3, [pc, #432]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	4a6b      	ldr	r2, [pc, #428]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d82:	e00b      	b.n	8005d9c <HAL_RCC_OscConfig+0x5e0>
 8005d84:	4b68      	ldr	r3, [pc, #416]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d88:	4a67      	ldr	r2, [pc, #412]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d90:	4b65      	ldr	r3, [pc, #404]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d94:	4a64      	ldr	r2, [pc, #400]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005d96:	f023 0304 	bic.w	r3, r3, #4
 8005d9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d015      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fc ff32 	bl	8002c0c <HAL_GetTick>
 8005da8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dac:	f7fc ff2e 	bl	8002c0c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e14e      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dc2:	4b59      	ldr	r3, [pc, #356]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0ee      	beq.n	8005dac <HAL_RCC_OscConfig+0x5f0>
 8005dce:	e014      	b.n	8005dfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7fc ff1c 	bl	8002c0c <HAL_GetTick>
 8005dd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dd6:	e00a      	b.n	8005dee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd8:	f7fc ff18 	bl	8002c0c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e138      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dee:	4b4e      	ldr	r3, [pc, #312]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1ee      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 812d 	beq.w	800605e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e04:	4b48      	ldr	r3, [pc, #288]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e0c:	2b18      	cmp	r3, #24
 8005e0e:	f000 80bd 	beq.w	8005f8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	f040 809e 	bne.w	8005f58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1c:	4b42      	ldr	r3, [pc, #264]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a41      	ldr	r2, [pc, #260]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fc fef0 	bl	8002c0c <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fc feec 	bl	8002c0c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e10e      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e42:	4b39      	ldr	r3, [pc, #228]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e4e:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e52:	4b37      	ldr	r3, [pc, #220]	@ (8005f30 <HAL_RCC_OscConfig+0x774>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e5e:	0112      	lsls	r2, r2, #4
 8005e60:	430a      	orrs	r2, r1
 8005e62:	4931      	ldr	r1, [pc, #196]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e76:	3b01      	subs	r3, #1
 8005e78:	025b      	lsls	r3, r3, #9
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	3b01      	subs	r3, #1
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e90:	3b01      	subs	r3, #1
 8005e92:	061b      	lsls	r3, r3, #24
 8005e94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e98:	4923      	ldr	r1, [pc, #140]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e9e:	4b22      	ldr	r3, [pc, #136]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	4a21      	ldr	r2, [pc, #132]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eae:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <HAL_RCC_OscConfig+0x778>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005eb6:	00d2      	lsls	r2, r2, #3
 8005eb8:	491b      	ldr	r1, [pc, #108]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	f023 020c 	bic.w	r2, r3, #12
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	4917      	ldr	r1, [pc, #92]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ed0:	4b15      	ldr	r3, [pc, #84]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	f023 0202 	bic.w	r2, r3, #2
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	4912      	ldr	r1, [pc, #72]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ee2:	4b11      	ldr	r3, [pc, #68]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	4a10      	ldr	r2, [pc, #64]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eee:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005efa:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efe:	4a0a      	ldr	r2, [pc, #40]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005f06:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0a:	4a07      	ldr	r2, [pc, #28]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f12:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a04      	ldr	r2, [pc, #16]	@ (8005f28 <HAL_RCC_OscConfig+0x76c>)
 8005f18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1e:	f7fc fe75 	bl	8002c0c <HAL_GetTick>
 8005f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f24:	e011      	b.n	8005f4a <HAL_RCC_OscConfig+0x78e>
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	58024800 	.word	0x58024800
 8005f30:	fffffc0c 	.word	0xfffffc0c
 8005f34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f38:	f7fc fe68 	bl	8002c0c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e08a      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f4a:	4b47      	ldr	r3, [pc, #284]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x77c>
 8005f56:	e082      	b.n	800605e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f58:	4b43      	ldr	r3, [pc, #268]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a42      	ldr	r2, [pc, #264]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8005f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fc fe52 	bl	8002c0c <HAL_GetTick>
 8005f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6c:	f7fc fe4e 	bl	8002c0c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e070      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x7b0>
 8005f8a:	e068      	b.n	800605e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f8c:	4b36      	ldr	r3, [pc, #216]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f92:	4b35      	ldr	r3, [pc, #212]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d031      	beq.n	8006004 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f003 0203 	and.w	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d12a      	bne.n	8006004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d122      	bne.n	8006004 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d11a      	bne.n	8006004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	0a5b      	lsrs	r3, r3, #9
 8005fd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d111      	bne.n	8006004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d108      	bne.n	8006004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	0e1b      	lsrs	r3, r3, #24
 8005ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e02b      	b.n	8006060 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006008:	4b17      	ldr	r3, [pc, #92]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 800600a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600c:	08db      	lsrs	r3, r3, #3
 800600e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006012:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	429a      	cmp	r2, r3
 800601c:	d01f      	beq.n	800605e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800601e:	4b12      	ldr	r3, [pc, #72]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8006020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006022:	4a11      	ldr	r2, [pc, #68]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800602a:	f7fc fdef 	bl	8002c0c <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006030:	bf00      	nop
 8006032:	f7fc fdeb 	bl	8002c0c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	4293      	cmp	r3, r2
 800603c:	d0f9      	beq.n	8006032 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800603e:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8006040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <HAL_RCC_OscConfig+0x8b0>)
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800604a:	00d2      	lsls	r2, r2, #3
 800604c:	4906      	ldr	r1, [pc, #24]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 800604e:	4313      	orrs	r3, r2
 8006050:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006052:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	4a04      	ldr	r2, [pc, #16]	@ (8006068 <HAL_RCC_OscConfig+0x8ac>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3730      	adds	r7, #48	@ 0x30
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	58024400 	.word	0x58024400
 800606c:	ffff0007 	.word	0xffff0007

08006070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e19c      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006084:	4b8a      	ldr	r3, [pc, #552]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d910      	bls.n	80060b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b87      	ldr	r3, [pc, #540]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f023 020f 	bic.w	r2, r3, #15
 800609a:	4985      	ldr	r1, [pc, #532]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b83      	ldr	r3, [pc, #524]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e184      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d010      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	4b7b      	ldr	r3, [pc, #492]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d908      	bls.n	80060e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060d0:	4b78      	ldr	r3, [pc, #480]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	4975      	ldr	r1, [pc, #468]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d010      	beq.n	8006110 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	4b70      	ldr	r3, [pc, #448]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d908      	bls.n	8006110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060fe:	4b6d      	ldr	r3, [pc, #436]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	496a      	ldr	r1, [pc, #424]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800610c:	4313      	orrs	r3, r2
 800610e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d010      	beq.n	800613e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	4b64      	ldr	r3, [pc, #400]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006128:	429a      	cmp	r2, r3
 800612a:	d908      	bls.n	800613e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800612c:	4b61      	ldr	r3, [pc, #388]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	495e      	ldr	r1, [pc, #376]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800613a:	4313      	orrs	r3, r2
 800613c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d010      	beq.n	800616c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	4b59      	ldr	r3, [pc, #356]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006156:	429a      	cmp	r2, r3
 8006158:	d908      	bls.n	800616c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800615a:	4b56      	ldr	r3, [pc, #344]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4953      	ldr	r1, [pc, #332]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006168:	4313      	orrs	r3, r2
 800616a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d010      	beq.n	800619a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	4b4d      	ldr	r3, [pc, #308]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	429a      	cmp	r2, r3
 8006186:	d908      	bls.n	800619a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006188:	4b4a      	ldr	r3, [pc, #296]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	f023 020f 	bic.w	r2, r3, #15
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4947      	ldr	r1, [pc, #284]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006196:	4313      	orrs	r3, r2
 8006198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d055      	beq.n	8006252 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80061a6:	4b43      	ldr	r3, [pc, #268]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	4940      	ldr	r1, [pc, #256]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d107      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061c0:	4b3c      	ldr	r3, [pc, #240]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d121      	bne.n	8006210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0f6      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d107      	bne.n	80061e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061d8:	4b36      	ldr	r3, [pc, #216]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d115      	bne.n	8006210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0ea      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d107      	bne.n	8006200 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061f0:	4b30      	ldr	r3, [pc, #192]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d109      	bne.n	8006210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0de      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006200:	4b2c      	ldr	r3, [pc, #176]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0d6      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006210:	4b28      	ldr	r3, [pc, #160]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f023 0207 	bic.w	r2, r3, #7
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4925      	ldr	r1, [pc, #148]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800621e:	4313      	orrs	r3, r2
 8006220:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006222:	f7fc fcf3 	bl	8002c0c <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006228:	e00a      	b.n	8006240 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800622a:	f7fc fcef 	bl	8002c0c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0be      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006240:	4b1c      	ldr	r3, [pc, #112]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	429a      	cmp	r2, r3
 8006250:	d1eb      	bne.n	800622a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	4b14      	ldr	r3, [pc, #80]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	429a      	cmp	r2, r3
 800626c:	d208      	bcs.n	8006280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626e:	4b11      	ldr	r3, [pc, #68]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f023 020f 	bic.w	r2, r3, #15
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	490e      	ldr	r1, [pc, #56]	@ (80062b4 <HAL_RCC_ClockConfig+0x244>)
 800627c:	4313      	orrs	r3, r2
 800627e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006280:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d214      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628e:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 020f 	bic.w	r2, r3, #15
 8006296:	4906      	ldr	r1, [pc, #24]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b04      	ldr	r3, [pc, #16]	@ (80062b0 <HAL_RCC_ClockConfig+0x240>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e086      	b.n	80063be <HAL_RCC_ClockConfig+0x34e>
 80062b0:	52002000 	.word	0x52002000
 80062b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d010      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	4b3f      	ldr	r3, [pc, #252]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d208      	bcs.n	80062e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062d4:	4b3c      	ldr	r3, [pc, #240]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	4939      	ldr	r1, [pc, #228]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695a      	ldr	r2, [r3, #20]
 80062f6:	4b34      	ldr	r3, [pc, #208]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062fe:	429a      	cmp	r2, r3
 8006300:	d208      	bcs.n	8006314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006302:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	492e      	ldr	r1, [pc, #184]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006310:	4313      	orrs	r3, r2
 8006312:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	d010      	beq.n	8006342 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	4b28      	ldr	r3, [pc, #160]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800632c:	429a      	cmp	r2, r3
 800632e:	d208      	bcs.n	8006342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006330:	4b25      	ldr	r3, [pc, #148]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	4922      	ldr	r1, [pc, #136]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 800633e:	4313      	orrs	r3, r2
 8006340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d010      	beq.n	8006370 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800635a:	429a      	cmp	r2, r3
 800635c:	d208      	bcs.n	8006370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800635e:	4b1a      	ldr	r3, [pc, #104]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	4917      	ldr	r1, [pc, #92]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 800636c:	4313      	orrs	r3, r2
 800636e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006370:	f000 f834 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b14      	ldr	r3, [pc, #80]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	4912      	ldr	r1, [pc, #72]	@ (80063cc <HAL_RCC_ClockConfig+0x35c>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	f003 031f 	and.w	r3, r3, #31
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
 800638c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800638e:	4b0e      	ldr	r3, [pc, #56]	@ (80063c8 <HAL_RCC_ClockConfig+0x358>)
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	4a0d      	ldr	r2, [pc, #52]	@ (80063cc <HAL_RCC_ClockConfig+0x35c>)
 8006398:	5cd3      	ldrb	r3, [r2, r3]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	4a0a      	ldr	r2, [pc, #40]	@ (80063d0 <HAL_RCC_ClockConfig+0x360>)
 80063a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063a8:	4a0a      	ldr	r2, [pc, #40]	@ (80063d4 <HAL_RCC_ClockConfig+0x364>)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80063ae:	4b0a      	ldr	r3, [pc, #40]	@ (80063d8 <HAL_RCC_ClockConfig+0x368>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fc f85e 	bl	8002474 <HAL_InitTick>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	58024400 	.word	0x58024400
 80063cc:	080131e0 	.word	0x080131e0
 80063d0:	24000010 	.word	0x24000010
 80063d4:	2400000c 	.word	0x2400000c
 80063d8:	24000014 	.word	0x24000014

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	@ 0x24
 80063e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063e2:	4bb3      	ldr	r3, [pc, #716]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ea:	2b18      	cmp	r3, #24
 80063ec:	f200 8155 	bhi.w	800669a <HAL_RCC_GetSysClockFreq+0x2be>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800645d 	.word	0x0800645d
 80063fc:	0800669b 	.word	0x0800669b
 8006400:	0800669b 	.word	0x0800669b
 8006404:	0800669b 	.word	0x0800669b
 8006408:	0800669b 	.word	0x0800669b
 800640c:	0800669b 	.word	0x0800669b
 8006410:	0800669b 	.word	0x0800669b
 8006414:	0800669b 	.word	0x0800669b
 8006418:	08006483 	.word	0x08006483
 800641c:	0800669b 	.word	0x0800669b
 8006420:	0800669b 	.word	0x0800669b
 8006424:	0800669b 	.word	0x0800669b
 8006428:	0800669b 	.word	0x0800669b
 800642c:	0800669b 	.word	0x0800669b
 8006430:	0800669b 	.word	0x0800669b
 8006434:	0800669b 	.word	0x0800669b
 8006438:	08006489 	.word	0x08006489
 800643c:	0800669b 	.word	0x0800669b
 8006440:	0800669b 	.word	0x0800669b
 8006444:	0800669b 	.word	0x0800669b
 8006448:	0800669b 	.word	0x0800669b
 800644c:	0800669b 	.word	0x0800669b
 8006450:	0800669b 	.word	0x0800669b
 8006454:	0800669b 	.word	0x0800669b
 8006458:	0800648f 	.word	0x0800648f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645c:	4b94      	ldr	r3, [pc, #592]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006468:	4b91      	ldr	r3, [pc, #580]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	4a90      	ldr	r2, [pc, #576]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800647a:	e111      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800647c:	4b8d      	ldr	r3, [pc, #564]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800647e:	61bb      	str	r3, [r7, #24]
      break;
 8006480:	e10e      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006482:	4b8d      	ldr	r3, [pc, #564]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006484:	61bb      	str	r3, [r7, #24]
      break;
 8006486:	e10b      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006488:	4b8c      	ldr	r3, [pc, #560]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800648a:	61bb      	str	r3, [r7, #24]
      break;
 800648c:	e108      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800648e:	4b88      	ldr	r3, [pc, #544]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006498:	4b85      	ldr	r3, [pc, #532]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064a4:	4b82      	ldr	r3, [pc, #520]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064ae:	4b80      	ldr	r3, [pc, #512]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80e1 	beq.w	8006694 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	f000 8083 	beq.w	80065e0 <HAL_RCC_GetSysClockFreq+0x204>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	f200 80a1 	bhi.w	8006624 <HAL_RCC_GetSysClockFreq+0x248>
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x114>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d056      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x1c0>
 80064ee:	e099      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f0:	4b6f      	ldr	r3, [pc, #444]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02d      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064fc:	4b6c      	ldr	r3, [pc, #432]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	08db      	lsrs	r3, r3, #3
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	4a6b      	ldr	r2, [pc, #428]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
 800650c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b62      	ldr	r3, [pc, #392]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a02 	vldr	s12, [r7, #8]
 800653a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006556:	e087      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80066c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b51      	ldr	r3, [pc, #324]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a02 	vldr	s12, [r7, #8]
 800657e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800659a:	e065      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80066c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065de:	e043      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80066cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b2f      	ldr	r3, [pc, #188]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a02 	vldr	s12, [r7, #8]
 8006606:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006622:	e021      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80066c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006636:	4b1e      	ldr	r3, [pc, #120]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a02 	vldr	s12, [r7, #8]
 800664a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80066c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006666:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006668:	4b11      	ldr	r3, [pc, #68]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666c:	0a5b      	lsrs	r3, r3, #9
 800666e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006672:	3301      	adds	r3, #1
 8006674:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006680:	edd7 6a07 	vldr	s13, [r7, #28]
 8006684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668c:	ee17 3a90 	vmov	r3, s15
 8006690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006692:	e005      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
      break;
 8006698:	e002      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800669a:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800669c:	61bb      	str	r3, [r7, #24]
      break;
 800669e:	bf00      	nop
  }

  return sysclockfreq;
 80066a0:	69bb      	ldr	r3, [r7, #24]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3724      	adds	r7, #36	@ 0x24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	58024400 	.word	0x58024400
 80066b4:	03d09000 	.word	0x03d09000
 80066b8:	003d0900 	.word	0x003d0900
 80066bc:	017d7840 	.word	0x017d7840
 80066c0:	46000000 	.word	0x46000000
 80066c4:	4c742400 	.word	0x4c742400
 80066c8:	4a742400 	.word	0x4a742400
 80066cc:	4bbebc20 	.word	0x4bbebc20

080066d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066d6:	f7ff fe81 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 80066da:	4602      	mov	r2, r0
 80066dc:	4b10      	ldr	r3, [pc, #64]	@ (8006720 <HAL_RCC_GetHCLKFreq+0x50>)
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	490f      	ldr	r1, [pc, #60]	@ (8006724 <HAL_RCC_GetHCLKFreq+0x54>)
 80066e8:	5ccb      	ldrb	r3, [r1, r3]
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	fa22 f303 	lsr.w	r3, r2, r3
 80066f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <HAL_RCC_GetHCLKFreq+0x50>)
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	4a09      	ldr	r2, [pc, #36]	@ (8006724 <HAL_RCC_GetHCLKFreq+0x54>)
 80066fe:	5cd3      	ldrb	r3, [r2, r3]
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	fa22 f303 	lsr.w	r3, r2, r3
 800670a:	4a07      	ldr	r2, [pc, #28]	@ (8006728 <HAL_RCC_GetHCLKFreq+0x58>)
 800670c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800670e:	4a07      	ldr	r2, [pc, #28]	@ (800672c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006714:	4b04      	ldr	r3, [pc, #16]	@ (8006728 <HAL_RCC_GetHCLKFreq+0x58>)
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	58024400 	.word	0x58024400
 8006724:	080131e0 	.word	0x080131e0
 8006728:	24000010 	.word	0x24000010
 800672c:	2400000c 	.word	0x2400000c

08006730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006734:	f7ff ffcc 	bl	80066d0 <HAL_RCC_GetHCLKFreq>
 8006738:	4602      	mov	r2, r0
 800673a:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	4904      	ldr	r1, [pc, #16]	@ (8006758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006746:	5ccb      	ldrb	r3, [r1, r3]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	58024400 	.word	0x58024400
 8006758:	080131e0 	.word	0x080131e0

0800675c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006760:	f7ff ffb6 	bl	80066d0 <HAL_RCC_GetHCLKFreq>
 8006764:	4602      	mov	r2, r0
 8006766:	4b06      	ldr	r3, [pc, #24]	@ (8006780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	4904      	ldr	r1, [pc, #16]	@ (8006784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800677c:	4618      	mov	r0, r3
 800677e:	bd80      	pop	{r7, pc}
 8006780:	58024400 	.word	0x58024400
 8006784:	080131e0 	.word	0x080131e0

08006788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	223f      	movs	r2, #63	@ 0x3f
 8006796:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006798:	4b1a      	ldr	r3, [pc, #104]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0207 	and.w	r2, r3, #7
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80067a4:	4b17      	ldr	r3, [pc, #92]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80067b0:	4b14      	ldr	r3, [pc, #80]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80067bc:	4b11      	ldr	r3, [pc, #68]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80067c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80067d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80067e0:	4b08      	ldr	r3, [pc, #32]	@ (8006804 <HAL_RCC_GetClockConfig+0x7c>)
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067ec:	4b06      	ldr	r3, [pc, #24]	@ (8006808 <HAL_RCC_GetClockConfig+0x80>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	58024400 	.word	0x58024400
 8006808:	52002000 	.word	0x52002000

0800680c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800680c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006810:	b0ca      	sub	sp, #296	@ 0x128
 8006812:	af00      	add	r7, sp, #0
 8006814:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006818:	2300      	movs	r3, #0
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800681e:	2300      	movs	r3, #0
 8006820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006830:	2500      	movs	r5, #0
 8006832:	ea54 0305 	orrs.w	r3, r4, r5
 8006836:	d049      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800683e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006842:	d02f      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006844:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006848:	d828      	bhi.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800684a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800684e:	d01a      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006854:	d822      	bhi.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800685a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685e:	d007      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006860:	e01c      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006862:	4bb8      	ldr	r3, [pc, #736]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	4ab7      	ldr	r2, [pc, #732]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800686c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800686e:	e01a      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006874:	3308      	adds	r3, #8
 8006876:	2102      	movs	r1, #2
 8006878:	4618      	mov	r0, r3
 800687a:	f001 fc8f 	bl	800819c <RCCEx_PLL2_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006884:	e00f      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	3328      	adds	r3, #40	@ 0x28
 800688c:	2102      	movs	r1, #2
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fd36 	bl	8008300 <RCCEx_PLL3_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800689a:	e004      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068ae:	4ba5      	ldr	r3, [pc, #660]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068bc:	4aa1      	ldr	r2, [pc, #644]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80068c2:	e003      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80068d8:	f04f 0900 	mov.w	r9, #0
 80068dc:	ea58 0309 	orrs.w	r3, r8, r9
 80068e0:	d047      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d82a      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068ec:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006909 	.word	0x08006909
 80068f8:	08006917 	.word	0x08006917
 80068fc:	0800692d 	.word	0x0800692d
 8006900:	0800694b 	.word	0x0800694b
 8006904:	0800694b 	.word	0x0800694b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006908:	4b8e      	ldr	r3, [pc, #568]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800690a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690c:	4a8d      	ldr	r2, [pc, #564]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800690e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006914:	e01a      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691a:	3308      	adds	r3, #8
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fc3c 	bl	800819c <RCCEx_PLL2_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800692a:	e00f      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006930:	3328      	adds	r3, #40	@ 0x28
 8006932:	2100      	movs	r1, #0
 8006934:	4618      	mov	r0, r3
 8006936:	f001 fce3 	bl	8008300 <RCCEx_PLL3_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800694a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006954:	4b7b      	ldr	r3, [pc, #492]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006958:	f023 0107 	bic.w	r1, r3, #7
 800695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006962:	4a78      	ldr	r2, [pc, #480]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006964:	430b      	orrs	r3, r1
 8006966:	6513      	str	r3, [r2, #80]	@ 0x50
 8006968:	e003      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800697e:	f04f 0b00 	mov.w	fp, #0
 8006982:	ea5a 030b 	orrs.w	r3, sl, fp
 8006986:	d04c      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006992:	d030      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006998:	d829      	bhi.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800699a:	2bc0      	cmp	r3, #192	@ 0xc0
 800699c:	d02d      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800699e:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a0:	d825      	bhi.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069a2:	2b80      	cmp	r3, #128	@ 0x80
 80069a4:	d018      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80069a6:	2b80      	cmp	r3, #128	@ 0x80
 80069a8:	d821      	bhi.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80069ae:	2b40      	cmp	r3, #64	@ 0x40
 80069b0:	d007      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80069b2:	e01c      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b4:	4b63      	ldr	r3, [pc, #396]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	4a62      	ldr	r2, [pc, #392]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069c0:	e01c      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c6:	3308      	adds	r3, #8
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fbe6 	bl	800819c <RCCEx_PLL2_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069d6:	e011      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	3328      	adds	r3, #40	@ 0x28
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fc8d 	bl	8008300 <RCCEx_PLL3_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069ec:	e006      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f4:	e002      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a04:	4b4f      	ldr	r3, [pc, #316]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a12:	4a4c      	ldr	r2, [pc, #304]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a18:	e003      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006a2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006a32:	2300      	movs	r3, #0
 8006a34:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006a38:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	d053      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a4e:	d035      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a54:	d82e      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a5a:	d031      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a60:	d828      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a66:	d01a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a6c:	d822      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a76:	d007      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a78:	e01c      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7a:	4b32      	ldr	r3, [pc, #200]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	4a31      	ldr	r2, [pc, #196]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a86:	e01c      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fb83 	bl	800819c <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e011      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 fc2a 	bl	8008300 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e006      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006aca:	4b1e      	ldr	r3, [pc, #120]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ada:	4a1a      	ldr	r2, [pc, #104]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae0:	e003      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006af6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006b00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d056      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b16:	d038      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b1c:	d831      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b22:	d034      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006b24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b28:	d82b      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b2e:	d01d      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006b30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b34:	d825      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b3e:	d00a      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b40:	e01f      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b42:	bf00      	nop
 8006b44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b48:	4ba2      	ldr	r3, [pc, #648]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	4aa1      	ldr	r2, [pc, #644]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b54:	e01c      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 fb1c 	bl	800819c <RCCEx_PLL2_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e011      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b70:	3328      	adds	r3, #40	@ 0x28
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fbc3 	bl	8008300 <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b80:	e006      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b88:	e002      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b98:	4b8e      	ldr	r3, [pc, #568]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ba8:	4a8a      	ldr	r2, [pc, #552]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006baa:	430b      	orrs	r3, r1
 8006bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bae:	e003      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d03a      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bde:	2b30      	cmp	r3, #48	@ 0x30
 8006be0:	d01f      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006be2:	2b30      	cmp	r3, #48	@ 0x30
 8006be4:	d819      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d00c      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d815      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d019      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d111      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf6:	4b77      	ldr	r3, [pc, #476]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	4a76      	ldr	r2, [pc, #472]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c02:	e011      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c08:	3308      	adds	r3, #8
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fac5 	bl	800819c <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c18:	e006      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c20:	e002      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c30:	4b68      	ldr	r3, [pc, #416]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3e:	4a65      	ldr	r2, [pc, #404]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c40:	430b      	orrs	r3, r1
 8006c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c44:	e003      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	d051      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c78:	d035      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c7e:	d82e      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c84:	d031      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006c86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c8a:	d828      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c90:	d01a      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c96:	d822      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca0:	d007      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ca2:	e01c      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cb0:	e01c      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f001 fa6e 	bl	800819c <RCCEx_PLL2_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cc6:	e011      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ccc:	3328      	adds	r3, #40	@ 0x28
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 fb15 	bl	8008300 <RCCEx_PLL3_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cdc:	e006      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cf4:	4b37      	ldr	r3, [pc, #220]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d02:	4a34      	ldr	r2, [pc, #208]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d08:	e003      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d22:	2300      	movs	r3, #0
 8006d24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	d056      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d3c:	d033      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006d3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d42:	d82c      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d48:	d02f      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006d4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d4e:	d826      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d54:	d02b      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006d56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d5a:	d820      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d60:	d012      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006d62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d66:	d81a      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d022      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d70:	d115      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	3308      	adds	r3, #8
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 fa0e 	bl	800819c <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d86:	e015      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8c:	3328      	adds	r3, #40	@ 0x28
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 fab5 	bl	8008300 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10d      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dca:	4a02      	ldr	r2, [pc, #8]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dd0:	e006      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006dd2:	bf00      	nop
 8006dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006df6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	d055      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e0c:	d033      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e12:	d82c      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e18:	d02f      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1e:	d826      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e24:	d02b      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e2a:	d820      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e30:	d012      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e36:	d81a      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d022      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e40:	d115      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	3308      	adds	r3, #8
 8006e48:	2101      	movs	r1, #1
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 f9a6 	bl	800819c <RCCEx_PLL2_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e56:	e015      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	3328      	adds	r3, #40	@ 0x28
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fa4d 	bl	8008300 <RCCEx_PLL3_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e6c:	e00a      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e74:	e006      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e76:	bf00      	nop
 8006e78:	e004      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e7a:	bf00      	nop
 8006e7c:	e002      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e7e:	bf00      	nop
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e8c:	4ba3      	ldr	r3, [pc, #652]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e9c:	4a9f      	ldr	r2, [pc, #636]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea2:	e003      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	d037      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006edc:	d816      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d018      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ee6:	d111      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a8b      	ldr	r2, [pc, #556]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ef4:	e00f      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2101      	movs	r1, #1
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 f94c 	bl	800819c <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f2c:	4a7b      	ldr	r2, [pc, #492]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f32:	e003      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	d039      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d81c      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006f66:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fa9 	.word	0x08006fa9
 8006f70:	08006f7d 	.word	0x08006f7d
 8006f74:	08006f8b 	.word	0x08006f8b
 8006f78:	08006fa9 	.word	0x08006fa9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7c:	4b67      	ldr	r3, [pc, #412]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	4a66      	ldr	r2, [pc, #408]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f88:	e00f      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	3308      	adds	r3, #8
 8006f90:	2102      	movs	r1, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 f902 	bl	800819c <RCCEx_PLL2_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f9e:	e004      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa6:	e000      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb6:	f023 0103 	bic.w	r1, r3, #3
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc0:	4a56      	ldr	r2, [pc, #344]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fc6:	e003      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fe6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fea:	460b      	mov	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f000 809f 	beq.w	8007130 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ffc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ffe:	f7fb fe05 	bl	8002c0c <HAL_GetTick>
 8007002:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007006:	e00b      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007008:	f7fb fe00 	bl	8002c0c <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b64      	cmp	r3, #100	@ 0x64
 8007016:	d903      	bls.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800701e:	e005      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007020:	4b3f      	ldr	r3, [pc, #252]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ed      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800702c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007030:	2b00      	cmp	r3, #0
 8007032:	d179      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007034:	4b39      	ldr	r3, [pc, #228]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007036:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007040:	4053      	eors	r3, r2
 8007042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800704a:	4b34      	ldr	r3, [pc, #208]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007052:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007056:	4b31      	ldr	r3, [pc, #196]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705a:	4a30      	ldr	r2, [pc, #192]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007060:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007062:	4b2e      	ldr	r3, [pc, #184]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007066:	4a2d      	ldr	r2, [pc, #180]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800706c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800706e:	4a2b      	ldr	r2, [pc, #172]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007074:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800707e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007082:	d118      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fb fdc2 	bl	8002c0c <HAL_GetTick>
 8007088:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800708c:	e00d      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708e:	f7fb fdbd 	bl	8002c0c <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007098:	1ad2      	subs	r2, r2, r3
 800709a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800709e:	429a      	cmp	r2, r3
 80070a0:	d903      	bls.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80070a8:	e005      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070aa:	4b1c      	ldr	r3, [pc, #112]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0eb      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80070b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d129      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ce:	d10e      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80070d0:	4b12      	ldr	r3, [pc, #72]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070e0:	091a      	lsrs	r2, r3, #4
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	4a0d      	ldr	r2, [pc, #52]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6113      	str	r3, [r2, #16]
 80070ec:	e005      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80070ee:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4a0a      	ldr	r2, [pc, #40]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070f8:	6113      	str	r3, [r2, #16]
 80070fa:	4b08      	ldr	r3, [pc, #32]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800710a:	4a04      	ldr	r2, [pc, #16]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800710c:	430b      	orrs	r3, r1
 800710e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007110:	e00e      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800711a:	e009      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800711c:	58024400 	.word	0x58024400
 8007120:	58024800 	.word	0x58024800
 8007124:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f002 0301 	and.w	r3, r2, #1
 800713c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007140:	2300      	movs	r3, #0
 8007142:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007146:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	f000 8089 	beq.w	8007264 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007158:	2b28      	cmp	r3, #40	@ 0x28
 800715a:	d86b      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800715c:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	0800723d 	.word	0x0800723d
 8007168:	08007235 	.word	0x08007235
 800716c:	08007235 	.word	0x08007235
 8007170:	08007235 	.word	0x08007235
 8007174:	08007235 	.word	0x08007235
 8007178:	08007235 	.word	0x08007235
 800717c:	08007235 	.word	0x08007235
 8007180:	08007235 	.word	0x08007235
 8007184:	08007209 	.word	0x08007209
 8007188:	08007235 	.word	0x08007235
 800718c:	08007235 	.word	0x08007235
 8007190:	08007235 	.word	0x08007235
 8007194:	08007235 	.word	0x08007235
 8007198:	08007235 	.word	0x08007235
 800719c:	08007235 	.word	0x08007235
 80071a0:	08007235 	.word	0x08007235
 80071a4:	0800721f 	.word	0x0800721f
 80071a8:	08007235 	.word	0x08007235
 80071ac:	08007235 	.word	0x08007235
 80071b0:	08007235 	.word	0x08007235
 80071b4:	08007235 	.word	0x08007235
 80071b8:	08007235 	.word	0x08007235
 80071bc:	08007235 	.word	0x08007235
 80071c0:	08007235 	.word	0x08007235
 80071c4:	0800723d 	.word	0x0800723d
 80071c8:	08007235 	.word	0x08007235
 80071cc:	08007235 	.word	0x08007235
 80071d0:	08007235 	.word	0x08007235
 80071d4:	08007235 	.word	0x08007235
 80071d8:	08007235 	.word	0x08007235
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007235 	.word	0x08007235
 80071e4:	0800723d 	.word	0x0800723d
 80071e8:	08007235 	.word	0x08007235
 80071ec:	08007235 	.word	0x08007235
 80071f0:	08007235 	.word	0x08007235
 80071f4:	08007235 	.word	0x08007235
 80071f8:	08007235 	.word	0x08007235
 80071fc:	08007235 	.word	0x08007235
 8007200:	08007235 	.word	0x08007235
 8007204:	0800723d 	.word	0x0800723d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720c:	3308      	adds	r3, #8
 800720e:	2101      	movs	r1, #1
 8007210:	4618      	mov	r0, r3
 8007212:	f000 ffc3 	bl	800819c <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800721c:	e00f      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007222:	3328      	adds	r3, #40	@ 0x28
 8007224:	2101      	movs	r1, #1
 8007226:	4618      	mov	r0, r3
 8007228:	f001 f86a 	bl	8008300 <RCCEx_PLL3_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007232:	e004      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800723a:	e000      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800723c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007246:	4bbf      	ldr	r3, [pc, #764]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007254:	4abb      	ldr	r2, [pc, #748]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007256:	430b      	orrs	r3, r1
 8007258:	6553      	str	r3, [r2, #84]	@ 0x54
 800725a:	e003      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f002 0302 	and.w	r3, r2, #2
 8007270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800727a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800727e:	460b      	mov	r3, r1
 8007280:	4313      	orrs	r3, r2
 8007282:	d041      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800728a:	2b05      	cmp	r3, #5
 800728c:	d824      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800728e:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072e1 	.word	0x080072e1
 8007298:	080072ad 	.word	0x080072ad
 800729c:	080072c3 	.word	0x080072c3
 80072a0:	080072e1 	.word	0x080072e1
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072e1 	.word	0x080072e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	3308      	adds	r3, #8
 80072b2:	2101      	movs	r1, #1
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 ff71 	bl	800819c <RCCEx_PLL2_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072c0:	e00f      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	3328      	adds	r3, #40	@ 0x28
 80072c8:	2101      	movs	r1, #1
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 f818 	bl	8008300 <RCCEx_PLL3_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072d6:	e004      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072de:	e000      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80072e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072ea:	4b96      	ldr	r3, [pc, #600]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ee:	f023 0107 	bic.w	r1, r3, #7
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072f8:	4a92      	ldr	r2, [pc, #584]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072fa:	430b      	orrs	r3, r1
 80072fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80072fe:	e003      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f002 0304 	and.w	r3, r2, #4
 8007314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800731e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d044      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007330:	2b05      	cmp	r3, #5
 8007332:	d825      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007334:	a201      	add	r2, pc, #4	@ (adr r2, 800733c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	08007389 	.word	0x08007389
 8007340:	08007355 	.word	0x08007355
 8007344:	0800736b 	.word	0x0800736b
 8007348:	08007389 	.word	0x08007389
 800734c:	08007389 	.word	0x08007389
 8007350:	08007389 	.word	0x08007389
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007358:	3308      	adds	r3, #8
 800735a:	2101      	movs	r1, #1
 800735c:	4618      	mov	r0, r3
 800735e:	f000 ff1d 	bl	800819c <RCCEx_PLL2_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007368:	e00f      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736e:	3328      	adds	r3, #40	@ 0x28
 8007370:	2101      	movs	r1, #1
 8007372:	4618      	mov	r0, r3
 8007374:	f000 ffc4 	bl	8008300 <RCCEx_PLL3_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800737e:	e004      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007386:	e000      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007392:	4b6c      	ldr	r3, [pc, #432]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007396:	f023 0107 	bic.w	r1, r3, #7
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073a2:	4a68      	ldr	r2, [pc, #416]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80073a8:	e003      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f002 0320 	and.w	r3, r2, #32
 80073be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c2:	2300      	movs	r3, #0
 80073c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073cc:	460b      	mov	r3, r1
 80073ce:	4313      	orrs	r3, r2
 80073d0:	d055      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073de:	d033      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80073e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e4:	d82c      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ea:	d02f      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80073ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f0:	d826      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073f6:	d02b      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80073f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073fc:	d820      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007402:	d012      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007408:	d81a      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d022      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800740e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007412:	d115      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	3308      	adds	r3, #8
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f000 febd 	bl	800819c <RCCEx_PLL2_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007428:	e015      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	3328      	adds	r3, #40	@ 0x28
 8007430:	2102      	movs	r1, #2
 8007432:	4618      	mov	r0, r3
 8007434:	f000 ff64 	bl	8008300 <RCCEx_PLL3_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800743e:	e00a      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007446:	e006      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007448:	bf00      	nop
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800744c:	bf00      	nop
 800744e:	e002      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800745e:	4b39      	ldr	r3, [pc, #228]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007462:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746e:	4a35      	ldr	r2, [pc, #212]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007470:	430b      	orrs	r3, r1
 8007472:	6553      	str	r3, [r2, #84]	@ 0x54
 8007474:	e003      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800748a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800748e:	2300      	movs	r3, #0
 8007490:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007494:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007498:	460b      	mov	r3, r1
 800749a:	4313      	orrs	r3, r2
 800749c:	d058      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80074aa:	d033      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80074ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80074b0:	d82c      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b6:	d02f      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074bc:	d826      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c2:	d02b      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80074c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c8:	d820      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ce:	d012      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80074d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d4:	d81a      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d022      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074de:	d115      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e4:	3308      	adds	r3, #8
 80074e6:	2100      	movs	r1, #0
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fe57 	bl	800819c <RCCEx_PLL2_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074f4:	e015      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fa:	3328      	adds	r3, #40	@ 0x28
 80074fc:	2102      	movs	r1, #2
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fefe 	bl	8008300 <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800750a:	e00a      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007512:	e006      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007514:	bf00      	nop
 8007516:	e004      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007518:	bf00      	nop
 800751a:	e002      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800751c:	bf00      	nop
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10e      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800752a:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800752c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800753a:	4a02      	ldr	r2, [pc, #8]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800753c:	430b      	orrs	r3, r1
 800753e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007540:	e006      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007542:	bf00      	nop
 8007544:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800755c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007566:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800756a:	460b      	mov	r3, r1
 800756c:	4313      	orrs	r3, r2
 800756e:	d055      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007578:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800757c:	d033      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800757e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007582:	d82c      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007588:	d02f      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800758e:	d826      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007590:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007594:	d02b      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007596:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800759a:	d820      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800759c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075a0:	d012      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80075a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075a6:	d81a      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d022      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b0:	d115      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b6:	3308      	adds	r3, #8
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fdee 	bl	800819c <RCCEx_PLL2_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075c6:	e015      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075cc:	3328      	adds	r3, #40	@ 0x28
 80075ce:	2102      	movs	r1, #2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fe95 	bl	8008300 <RCCEx_PLL3_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075dc:	e00a      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075e4:	e006      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075e6:	bf00      	nop
 80075e8:	e004      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075ea:	bf00      	nop
 80075ec:	e002      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10b      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075fc:	4ba1      	ldr	r3, [pc, #644]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007600:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007608:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800760c:	4a9d      	ldr	r2, [pc, #628]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800760e:	430b      	orrs	r3, r1
 8007610:	6593      	str	r3, [r2, #88]	@ 0x58
 8007612:	e003      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007618:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f002 0308 	and.w	r3, r2, #8
 8007628:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800762c:	2300      	movs	r3, #0
 800762e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007632:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007636:	460b      	mov	r3, r1
 8007638:	4313      	orrs	r3, r2
 800763a:	d01e      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007648:	d10c      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	3328      	adds	r3, #40	@ 0x28
 8007650:	2102      	movs	r1, #2
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fe54 	bl	8008300 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007664:	4b87      	ldr	r3, [pc, #540]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007668:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007674:	4a83      	ldr	r2, [pc, #524]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007676:	430b      	orrs	r3, r1
 8007678:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f002 0310 	and.w	r3, r2, #16
 8007686:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800768a:	2300      	movs	r3, #0
 800768c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007690:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007694:	460b      	mov	r3, r1
 8007696:	4313      	orrs	r3, r2
 8007698:	d01e      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a6:	d10c      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ac:	3328      	adds	r3, #40	@ 0x28
 80076ae:	2102      	movs	r1, #2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fe25 	bl	8008300 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076c2:	4b70      	ldr	r3, [pc, #448]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076f2:	460b      	mov	r3, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	d03e      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007704:	d022      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800770a:	d81b      	bhi.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007714:	d00b      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007716:	e015      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	3308      	adds	r3, #8
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fd3b 	bl	800819c <RCCEx_PLL2_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800772c:	e00f      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	3328      	adds	r3, #40	@ 0x28
 8007734:	2102      	movs	r1, #2
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fde2 	bl	8008300 <RCCEx_PLL3_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007756:	4b4b      	ldr	r3, [pc, #300]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007766:	4a47      	ldr	r2, [pc, #284]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007768:	430b      	orrs	r3, r1
 800776a:	6593      	str	r3, [r2, #88]	@ 0x58
 800776c:	e003      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007782:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007784:	2300      	movs	r3, #0
 8007786:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007788:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800778c:	460b      	mov	r3, r1
 800778e:	4313      	orrs	r3, r2
 8007790:	d03b      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800779e:	d01f      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80077a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077a4:	d818      	bhi.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80077a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077aa:	d003      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80077ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077b0:	d007      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80077b2:	e011      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b4:	4b33      	ldr	r3, [pc, #204]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	4a32      	ldr	r2, [pc, #200]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80077c0:	e00f      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c6:	3328      	adds	r3, #40	@ 0x28
 80077c8:	2101      	movs	r1, #1
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fd98 	bl	8008300 <RCCEx_PLL3_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80077d6:	e004      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077de:	e000      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80077e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077ea:	4b26      	ldr	r3, [pc, #152]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fa:	4a22      	ldr	r2, [pc, #136]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007800:	e003      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007816:	673b      	str	r3, [r7, #112]	@ 0x70
 8007818:	2300      	movs	r3, #0
 800781a:	677b      	str	r3, [r7, #116]	@ 0x74
 800781c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d034      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d007      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007836:	e011      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007838:	4b12      	ldr	r3, [pc, #72]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a11      	ldr	r2, [pc, #68]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800783e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007844:	e00e      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3308      	adds	r3, #8
 800784c:	2102      	movs	r1, #2
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fca4 	bl	800819c <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800785a:	e003      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800786c:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800786e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007870:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787a:	4a02      	ldr	r2, [pc, #8]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800787c:	430b      	orrs	r3, r1
 800787e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007880:	e006      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007882:	bf00      	nop
 8007884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800788c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800789c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800789e:	2300      	movs	r3, #0
 80078a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80078a6:	460b      	mov	r3, r1
 80078a8:	4313      	orrs	r3, r2
 80078aa:	d00c      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b0:	3328      	adds	r3, #40	@ 0x28
 80078b2:	2102      	movs	r1, #2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fd23 	bl	8008300 <RCCEx_PLL3_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80078d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80078d4:	2300      	movs	r3, #0
 80078d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80078d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80078dc:	460b      	mov	r3, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	d038      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ee:	d018      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80078f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078f4:	d811      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078fa:	d014      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80078fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007900:	d80b      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790a:	d106      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800790c:	4bc3      	ldr	r3, [pc, #780]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	4ac2      	ldr	r2, [pc, #776]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007918:	e008      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007920:	e004      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800792a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007934:	4bb9      	ldr	r3, [pc, #740]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007938:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007944:	4ab5      	ldr	r2, [pc, #724]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007946:	430b      	orrs	r3, r1
 8007948:	6553      	str	r3, [r2, #84]	@ 0x54
 800794a:	e003      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007962:	2300      	movs	r3, #0
 8007964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007966:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800796a:	460b      	mov	r3, r1
 800796c:	4313      	orrs	r3, r2
 800796e:	d009      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007970:	4baa      	ldr	r3, [pc, #680]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007974:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800797e:	4aa7      	ldr	r2, [pc, #668]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007980:	430b      	orrs	r3, r1
 8007982:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007990:	653b      	str	r3, [r7, #80]	@ 0x50
 8007992:	2300      	movs	r3, #0
 8007994:	657b      	str	r3, [r7, #84]	@ 0x54
 8007996:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800799a:	460b      	mov	r3, r1
 800799c:	4313      	orrs	r3, r2
 800799e:	d00a      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079a0:	4b9e      	ldr	r3, [pc, #632]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80079b0:	4a9a      	ldr	r2, [pc, #616]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b2:	430b      	orrs	r3, r1
 80079b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80079c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079c4:	2300      	movs	r3, #0
 80079c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079cc:	460b      	mov	r3, r1
 80079ce:	4313      	orrs	r3, r2
 80079d0:	d009      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079d2:	4b92      	ldr	r3, [pc, #584]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e0:	4a8e      	ldr	r2, [pc, #568]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079e2:	430b      	orrs	r3, r1
 80079e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f4:	2300      	movs	r3, #0
 80079f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80079fc:	460b      	mov	r3, r1
 80079fe:	4313      	orrs	r3, r2
 8007a00:	d00e      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a02:	4b86      	ldr	r3, [pc, #536]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	4a85      	ldr	r2, [pc, #532]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a0c:	6113      	str	r3, [r2, #16]
 8007a0e:	4b83      	ldr	r3, [pc, #524]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a10:	6919      	ldr	r1, [r3, #16]
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a1a:	4a80      	ldr	r2, [pc, #512]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a2e:	2300      	movs	r3, #0
 8007a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a32:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007a36:	460b      	mov	r3, r1
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d009      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a3c:	4b77      	ldr	r3, [pc, #476]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a40:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4a:	4a74      	ldr	r2, [pc, #464]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a5e:	2300      	movs	r3, #0
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a66:	460b      	mov	r3, r1
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	d00a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a70:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7c:	4a67      	ldr	r2, [pc, #412]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a94:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d011      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fb78 	bl	800819c <RCCEx_PLL2_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	2100      	movs	r1, #0
 8007acc:	6239      	str	r1, [r7, #32]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	d011      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fb58 	bl	800819c <RCCEx_PLL2_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	61b9      	str	r1, [r7, #24]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	d011      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	3308      	adds	r3, #8
 8007b24:	2102      	movs	r1, #2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fb38 	bl	800819c <RCCEx_PLL2_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6139      	str	r1, [r7, #16]
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	d011      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b62:	3328      	adds	r3, #40	@ 0x28
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fbca 	bl	8008300 <RCCEx_PLL3_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	d011      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3328      	adds	r3, #40	@ 0x28
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fbaa 	bl	8008300 <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	607b      	str	r3, [r7, #4]
 8007bd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	d011      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be2:	3328      	adds	r3, #40	@ 0x28
 8007be4:	2102      	movs	r1, #2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fb8a 	bl	8008300 <RCCEx_PLL3_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007c02:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007c16:	46bd      	mov	sp, r7
 8007c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c1c:	58024400 	.word	0x58024400

08007c20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c24:	f7fe fd54 	bl	80066d0 <HAL_RCC_GetHCLKFreq>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	4b06      	ldr	r3, [pc, #24]	@ (8007c44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	091b      	lsrs	r3, r3, #4
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	4904      	ldr	r1, [pc, #16]	@ (8007c48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c36:	5ccb      	ldrb	r3, [r1, r3]
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	58024400 	.word	0x58024400
 8007c48:	080131e0 	.word	0x080131e0

08007c4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b089      	sub	sp, #36	@ 0x24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c54:	4ba1      	ldr	r3, [pc, #644]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c5e:	4b9f      	ldr	r3, [pc, #636]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c62:	0b1b      	lsrs	r3, r3, #12
 8007c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	091b      	lsrs	r3, r3, #4
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c76:	4b99      	ldr	r3, [pc, #612]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7a:	08db      	lsrs	r3, r3, #3
 8007c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	fb02 f303 	mul.w	r3, r2, r3
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8111 	beq.w	8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	f000 8083 	beq.w	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	f200 80a1 	bhi.w	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d056      	beq.n	8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cb6:	e099      	b.n	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cb8:	4b88      	ldr	r3, [pc, #544]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02d      	beq.n	8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cc4:	4b85      	ldr	r3, [pc, #532]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	08db      	lsrs	r3, r3, #3
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	4a84      	ldr	r2, [pc, #528]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	ee07 3a90 	vmov	s15, r3
 8007cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cee:	4b7b      	ldr	r3, [pc, #492]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d1e:	e087      	b.n	8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b6a      	ldr	r3, [pc, #424]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d62:	e065      	b.n	8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b59      	ldr	r3, [pc, #356]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da6:	e043      	b.n	8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b48      	ldr	r3, [pc, #288]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dea:	e021      	b.n	8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfe:	4b37      	ldr	r3, [pc, #220]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e30:	4b2a      	ldr	r3, [pc, #168]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e34:	0a5b      	lsrs	r3, r3, #9
 8007e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e56:	ee17 2a90 	vmov	r2, s15
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e68:	ee07 3a90 	vmov	s15, r3
 8007e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e84:	ee17 2a90 	vmov	r2, s15
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e8c:	4b13      	ldr	r3, [pc, #76]	@ (8007edc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e90:	0e1b      	lsrs	r3, r3, #24
 8007e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb2:	ee17 2a90 	vmov	r2, s15
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007eba:	e008      	b.n	8007ece <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	609a      	str	r2, [r3, #8]
}
 8007ece:	bf00      	nop
 8007ed0:	3724      	adds	r7, #36	@ 0x24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	03d09000 	.word	0x03d09000
 8007ee4:	46000000 	.word	0x46000000
 8007ee8:	4c742400 	.word	0x4c742400
 8007eec:	4a742400 	.word	0x4a742400
 8007ef0:	4bbebc20 	.word	0x4bbebc20

08007ef4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b089      	sub	sp, #36	@ 0x24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007efc:	4ba1      	ldr	r3, [pc, #644]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f06:	4b9f      	ldr	r3, [pc, #636]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	0d1b      	lsrs	r3, r3, #20
 8007f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f12:	4b9c      	ldr	r3, [pc, #624]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f1e:	4b99      	ldr	r3, [pc, #612]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f22:	08db      	lsrs	r3, r3, #3
 8007f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8111 	beq.w	8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	f000 8083 	beq.w	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f200 80a1 	bhi.w	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d056      	beq.n	800800c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f5e:	e099      	b.n	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f60:	4b88      	ldr	r3, [pc, #544]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02d      	beq.n	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f6c:	4b85      	ldr	r3, [pc, #532]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	08db      	lsrs	r3, r3, #3
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	4a84      	ldr	r2, [pc, #528]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b7b      	ldr	r3, [pc, #492]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007faa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800818c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fc6:	e087      	b.n	80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b6a      	ldr	r3, [pc, #424]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800818c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800a:	e065      	b.n	80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b59      	ldr	r3, [pc, #356]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008032:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800818c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800804e:	e043      	b.n	80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800805e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008062:	4b48      	ldr	r3, [pc, #288]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008072:	ed97 6a03 	vldr	s12, [r7, #12]
 8008076:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800818c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008092:	e021      	b.n	80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a6:	4b37      	ldr	r3, [pc, #220]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800818c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	0a5b      	lsrs	r3, r3, #9
 80080de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008106:	4b1f      	ldr	r3, [pc, #124]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810a:	0c1b      	lsrs	r3, r3, #16
 800810c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800811c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008120:	edd7 6a07 	vldr	s13, [r7, #28]
 8008124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800812c:	ee17 2a90 	vmov	r2, s15
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008134:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008138:	0e1b      	lsrs	r3, r3, #24
 800813a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800814a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800814e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815a:	ee17 2a90 	vmov	r2, s15
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008162:	e008      	b.n	8008176 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
}
 8008176:	bf00      	nop
 8008178:	3724      	adds	r7, #36	@ 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400
 8008188:	03d09000 	.word	0x03d09000
 800818c:	46000000 	.word	0x46000000
 8008190:	4c742400 	.word	0x4c742400
 8008194:	4a742400 	.word	0x4a742400
 8008198:	4bbebc20 	.word	0x4bbebc20

0800819c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081aa:	4b53      	ldr	r3, [pc, #332]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d101      	bne.n	80081ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e099      	b.n	80082ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081ba:	4b4f      	ldr	r3, [pc, #316]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a4e      	ldr	r2, [pc, #312]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c6:	f7fa fd21 	bl	8002c0c <HAL_GetTick>
 80081ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081ce:	f7fa fd1d 	bl	8002c0c <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e086      	b.n	80082ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081e0:	4b45      	ldr	r3, [pc, #276]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f0      	bne.n	80081ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081ec:	4b42      	ldr	r3, [pc, #264]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	031b      	lsls	r3, r3, #12
 80081fa:	493f      	ldr	r1, [pc, #252]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	3b01      	subs	r3, #1
 8008206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	3b01      	subs	r3, #1
 8008210:	025b      	lsls	r3, r3, #9
 8008212:	b29b      	uxth	r3, r3
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	3b01      	subs	r3, #1
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	3b01      	subs	r3, #1
 800822a:	061b      	lsls	r3, r3, #24
 800822c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008230:	4931      	ldr	r1, [pc, #196]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008232:	4313      	orrs	r3, r2
 8008234:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008236:	4b30      	ldr	r3, [pc, #192]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	492d      	ldr	r1, [pc, #180]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008248:	4b2b      	ldr	r3, [pc, #172]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	f023 0220 	bic.w	r2, r3, #32
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	4928      	ldr	r1, [pc, #160]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008256:	4313      	orrs	r3, r2
 8008258:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800825a:	4b27      	ldr	r3, [pc, #156]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800825c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825e:	4a26      	ldr	r2, [pc, #152]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008260:	f023 0310 	bic.w	r3, r3, #16
 8008264:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008266:	4b24      	ldr	r3, [pc, #144]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800826a:	4b24      	ldr	r3, [pc, #144]	@ (80082fc <RCCEx_PLL2_Config+0x160>)
 800826c:	4013      	ands	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	69d2      	ldr	r2, [r2, #28]
 8008272:	00d2      	lsls	r2, r2, #3
 8008274:	4920      	ldr	r1, [pc, #128]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008276:	4313      	orrs	r3, r2
 8008278:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800827a:	4b1f      	ldr	r3, [pc, #124]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800827c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827e:	4a1e      	ldr	r2, [pc, #120]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008280:	f043 0310 	orr.w	r3, r3, #16
 8008284:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800828c:	4b1a      	ldr	r3, [pc, #104]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800828e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008290:	4a19      	ldr	r2, [pc, #100]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008292:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008296:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008298:	e00f      	b.n	80082ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d106      	bne.n	80082ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082a0:	4b15      	ldr	r3, [pc, #84]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a4:	4a14      	ldr	r2, [pc, #80]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082ac:	e005      	b.n	80082ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082ae:	4b12      	ldr	r3, [pc, #72]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b2:	4a11      	ldr	r2, [pc, #68]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082ba:	4b0f      	ldr	r3, [pc, #60]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a0e      	ldr	r2, [pc, #56]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c6:	f7fa fca1 	bl	8002c0c <HAL_GetTick>
 80082ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082cc:	e008      	b.n	80082e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082ce:	f7fa fc9d 	bl	8002c0c <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d901      	bls.n	80082e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e006      	b.n	80082ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082e0:	4b05      	ldr	r3, [pc, #20]	@ (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0f0      	beq.n	80082ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	58024400 	.word	0x58024400
 80082fc:	ffff0007 	.word	0xffff0007

08008300 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800830e:	4b53      	ldr	r3, [pc, #332]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	2b03      	cmp	r3, #3
 8008318:	d101      	bne.n	800831e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e099      	b.n	8008452 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800831e:	4b4f      	ldr	r3, [pc, #316]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a4e      	ldr	r2, [pc, #312]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832a:	f7fa fc6f 	bl	8002c0c <HAL_GetTick>
 800832e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008330:	e008      	b.n	8008344 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008332:	f7fa fc6b 	bl	8002c0c <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e086      	b.n	8008452 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008344:	4b45      	ldr	r3, [pc, #276]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f0      	bne.n	8008332 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008350:	4b42      	ldr	r3, [pc, #264]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	051b      	lsls	r3, r3, #20
 800835e:	493f      	ldr	r1, [pc, #252]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	628b      	str	r3, [r1, #40]	@ 0x28
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	3b01      	subs	r3, #1
 800836a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	3b01      	subs	r3, #1
 8008374:	025b      	lsls	r3, r3, #9
 8008376:	b29b      	uxth	r3, r3
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	3b01      	subs	r3, #1
 800838e:	061b      	lsls	r3, r3, #24
 8008390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008394:	4931      	ldr	r1, [pc, #196]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800839a:	4b30      	ldr	r3, [pc, #192]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	492d      	ldr	r1, [pc, #180]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083ac:	4b2b      	ldr	r3, [pc, #172]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	4928      	ldr	r1, [pc, #160]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083be:	4b27      	ldr	r3, [pc, #156]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c2:	4a26      	ldr	r2, [pc, #152]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ca:	4b24      	ldr	r3, [pc, #144]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ce:	4b24      	ldr	r3, [pc, #144]	@ (8008460 <RCCEx_PLL3_Config+0x160>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	69d2      	ldr	r2, [r2, #28]
 80083d6:	00d2      	lsls	r2, r2, #3
 80083d8:	4920      	ldr	r1, [pc, #128]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083de:	4b1f      	ldr	r3, [pc, #124]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083f0:	4b1a      	ldr	r3, [pc, #104]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	4a19      	ldr	r2, [pc, #100]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 80083f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083fc:	e00f      	b.n	800841e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d106      	bne.n	8008412 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008404:	4b15      	ldr	r3, [pc, #84]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	4a14      	ldr	r2, [pc, #80]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 800840a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800840e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008410:	e005      	b.n	800841e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008412:	4b12      	ldr	r3, [pc, #72]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	4a11      	ldr	r2, [pc, #68]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800841c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800841e:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a0e      	ldr	r2, [pc, #56]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842a:	f7fa fbef 	bl	8002c0c <HAL_GetTick>
 800842e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008430:	e008      	b.n	8008444 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008432:	f7fa fbeb 	bl	8002c0c <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e006      	b.n	8008452 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008444:	4b05      	ldr	r3, [pc, #20]	@ (800845c <RCCEx_PLL3_Config+0x15c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
 8008460:	ffff0007 	.word	0xffff0007

08008464 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e10f      	b.n	8008696 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a87      	ldr	r2, [pc, #540]	@ (80086a0 <HAL_SPI_Init+0x23c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00f      	beq.n	80084a6 <HAL_SPI_Init+0x42>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a86      	ldr	r2, [pc, #536]	@ (80086a4 <HAL_SPI_Init+0x240>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00a      	beq.n	80084a6 <HAL_SPI_Init+0x42>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a84      	ldr	r2, [pc, #528]	@ (80086a8 <HAL_SPI_Init+0x244>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d005      	beq.n	80084a6 <HAL_SPI_Init+0x42>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b0f      	cmp	r3, #15
 80084a0:	d901      	bls.n	80084a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e0f7      	b.n	8008696 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fe2e 	bl	8009108 <SPI_GetPacketSize>
 80084ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a7b      	ldr	r2, [pc, #492]	@ (80086a0 <HAL_SPI_Init+0x23c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00c      	beq.n	80084d2 <HAL_SPI_Init+0x6e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a79      	ldr	r2, [pc, #484]	@ (80086a4 <HAL_SPI_Init+0x240>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <HAL_SPI_Init+0x6e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a78      	ldr	r2, [pc, #480]	@ (80086a8 <HAL_SPI_Init+0x244>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d002      	beq.n	80084d2 <HAL_SPI_Init+0x6e>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d811      	bhi.n	80084f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084d6:	4a72      	ldr	r2, [pc, #456]	@ (80086a0 <HAL_SPI_Init+0x23c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d009      	beq.n	80084f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a70      	ldr	r2, [pc, #448]	@ (80086a4 <HAL_SPI_Init+0x240>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <HAL_SPI_Init+0x8c>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a6f      	ldr	r2, [pc, #444]	@ (80086a8 <HAL_SPI_Init+0x244>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d104      	bne.n	80084fa <HAL_SPI_Init+0x96>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b10      	cmp	r3, #16
 80084f4:	d901      	bls.n	80084fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e0cd      	b.n	8008696 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7f9 ff04 	bl	800231c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0201 	bic.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008536:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008540:	d119      	bne.n	8008576 <HAL_SPI_Init+0x112>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800854a:	d103      	bne.n	8008554 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10c      	bne.n	8008576 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008564:	d107      	bne.n	8008576 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008574:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00f      	beq.n	80085a2 <HAL_SPI_Init+0x13e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b06      	cmp	r3, #6
 8008588:	d90b      	bls.n	80085a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	e007      	b.n	80085b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	431a      	orrs	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c4:	ea42 0103 	orr.w	r1, r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085dc:	431a      	orrs	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e2:	431a      	orrs	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	431a      	orrs	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008612:	ea42 0103 	orr.w	r1, r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d113      	bne.n	8008652 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800863c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008650:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40013000 	.word	0x40013000
 80086a4:	40003800 	.word	0x40003800
 80086a8:	40003c00 	.word	0x40003c00

080086ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	4613      	mov	r3, r2
 80086ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3320      	adds	r3, #32
 80086c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086c4:	f7fa faa2 	bl	8002c0c <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d001      	beq.n	80086da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
 80086d8:	e1d1      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_SPI_Transmit+0x3a>
 80086e0:	88fb      	ldrh	r3, [r7, #6]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e1c9      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_SPI_Transmit+0x4c>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e1c2      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2203      	movs	r2, #3
 8008704:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	88fa      	ldrh	r2, [r7, #6]
 8008722:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008750:	d108      	bne.n	8008764 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	e009      	b.n	8008778 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008776:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	4b96      	ldr	r3, [pc, #600]	@ (80089d8 <HAL_SPI_Transmit+0x32c>)
 8008780:	4013      	ands	r3, r2
 8008782:	88f9      	ldrh	r1, [r7, #6]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	430b      	orrs	r3, r1
 800878a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a4:	d107      	bne.n	80087b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	2b0f      	cmp	r3, #15
 80087bc:	d947      	bls.n	800884e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087be:	e03f      	b.n	8008840 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d114      	bne.n	80087f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6812      	ldr	r2, [r2, #0]
 80087d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087f6:	e023      	b.n	8008840 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f8:	f7fa fa08 	bl	8002c0c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d803      	bhi.n	8008810 <HAL_SPI_Transmit+0x164>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d102      	bne.n	8008816 <HAL_SPI_Transmit+0x16a>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d114      	bne.n	8008840 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fba8 	bl	8008f6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008822:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e11e      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1b9      	bne.n	80087c0 <HAL_SPI_Transmit+0x114>
 800884c:	e0f1      	b.n	8008a32 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	2b07      	cmp	r3, #7
 8008854:	f240 80e6 	bls.w	8008a24 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008858:	e05d      	b.n	8008916 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b02      	cmp	r3, #2
 8008866:	d132      	bne.n	80088ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b01      	cmp	r3, #1
 8008872:	d918      	bls.n	80088a6 <HAL_SPI_Transmit+0x1fa>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d014      	beq.n	80088a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800888c:	1d1a      	adds	r2, r3, #4
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b02      	subs	r3, #2
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088a4:	e037      	b.n	8008916 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088aa:	881a      	ldrh	r2, [r3, #0]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b4:	1c9a      	adds	r2, r3, #2
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088cc:	e023      	b.n	8008916 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ce:	f7fa f99d 	bl	8002c0c <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d803      	bhi.n	80088e6 <HAL_SPI_Transmit+0x23a>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_Transmit+0x240>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d114      	bne.n	8008916 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fb3d 	bl	8008f6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e0b3      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d19b      	bne.n	800885a <HAL_SPI_Transmit+0x1ae>
 8008922:	e086      	b.n	8008a32 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b02      	cmp	r3, #2
 8008930:	d154      	bne.n	80089dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b03      	cmp	r3, #3
 800893c:	d918      	bls.n	8008970 <HAL_SPI_Transmit+0x2c4>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008942:	2b40      	cmp	r3, #64	@ 0x40
 8008944:	d914      	bls.n	8008970 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008956:	1d1a      	adds	r2, r3, #4
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b04      	subs	r3, #4
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800896e:	e059      	b.n	8008a24 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008976:	b29b      	uxth	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	d917      	bls.n	80089ac <HAL_SPI_Transmit+0x300>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d013      	beq.n	80089ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008988:	881a      	ldrh	r2, [r3, #0]
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008992:	1c9a      	adds	r2, r3, #2
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b02      	subs	r3, #2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089aa:	e03b      	b.n	8008a24 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3320      	adds	r3, #32
 80089b6:	7812      	ldrb	r2, [r2, #0]
 80089b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089d6:	e025      	b.n	8008a24 <HAL_SPI_Transmit+0x378>
 80089d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089dc:	f7fa f916 	bl	8002c0c <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d803      	bhi.n	80089f4 <HAL_SPI_Transmit+0x348>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f2:	d102      	bne.n	80089fa <HAL_SPI_Transmit+0x34e>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d114      	bne.n	8008a24 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fab6 	bl	8008f6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e02c      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f47f af79 	bne.w	8008924 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2108      	movs	r1, #8
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fb35 	bl	80090ac <SPI_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a4e:	f043 0220 	orr.w	r2, r3, #32
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fa87 	bl	8008f6c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
  }
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop

08008a88 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	4613      	mov	r3, r2
 8008a96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9c:	095b      	lsrs	r3, r3, #5
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3330      	adds	r3, #48	@ 0x30
 8008aaa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aac:	f7fa f8ae 	bl	8002c0c <HAL_GetTick>
 8008ab0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d001      	beq.n	8008ac2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e250      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <HAL_SPI_Receive+0x46>
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e248      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_SPI_Receive+0x58>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e241      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2204      	movs	r2, #4
 8008aec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	88fa      	ldrh	r2, [r7, #6]
 8008b02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	88fa      	ldrh	r2, [r7, #6]
 8008b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008b38:	d108      	bne.n	8008b4c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	e009      	b.n	8008b60 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008b5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4b95      	ldr	r3, [pc, #596]	@ (8008dbc <HAL_SPI_Receive+0x334>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	88f9      	ldrh	r1, [r7, #6]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	430b      	orrs	r3, r1
 8008b72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b8c:	d107      	bne.n	8008b9e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	2b0f      	cmp	r3, #15
 8008ba4:	d96c      	bls.n	8008c80 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008ba6:	e064      	b.n	8008c72 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d114      	bne.n	8008be8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bc8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008be6:	e044      	b.n	8008c72 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8bfa      	ldrh	r2, [r7, #30]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d919      	bls.n	8008c2a <HAL_SPI_Receive+0x1a2>
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d014      	beq.n	8008c2a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c0a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c10:	1d1a      	adds	r2, r3, #4
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c28:	e023      	b.n	8008c72 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c2a:	f7f9 ffef 	bl	8002c0c <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d803      	bhi.n	8008c42 <HAL_SPI_Receive+0x1ba>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d102      	bne.n	8008c48 <HAL_SPI_Receive+0x1c0>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d114      	bne.n	8008c72 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f98f 	bl	8008f6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e178      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d194      	bne.n	8008ba8 <HAL_SPI_Receive+0x120>
 8008c7e:	e15e      	b.n	8008f3e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b07      	cmp	r3, #7
 8008c86:	f240 8153 	bls.w	8008f30 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008c8a:	e08f      	b.n	8008dac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d114      	bne.n	8008ccc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	8812      	ldrh	r2, [r2, #0]
 8008caa:	b292      	uxth	r2, r2
 8008cac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cb2:	1c9a      	adds	r2, r3, #2
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cca:	e06f      	b.n	8008dac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	8bfa      	ldrh	r2, [r7, #30]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d924      	bls.n	8008d24 <HAL_SPI_Receive+0x29c>
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01f      	beq.n	8008d24 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	8812      	ldrh	r2, [r2, #0]
 8008cec:	b292      	uxth	r2, r2
 8008cee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf4:	1c9a      	adds	r2, r3, #2
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	8812      	ldrh	r2, [r2, #0]
 8008d02:	b292      	uxth	r2, r2
 8008d04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0a:	1c9a      	adds	r2, r3, #2
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b02      	subs	r3, #2
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d22:	e043      	b.n	8008dac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d119      	bne.n	8008d64 <HAL_SPI_Receive+0x2dc>
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d014      	beq.n	8008d64 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	8812      	ldrh	r2, [r2, #0]
 8008d42:	b292      	uxth	r2, r2
 8008d44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d4a:	1c9a      	adds	r2, r3, #2
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d62:	e023      	b.n	8008dac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d64:	f7f9 ff52 	bl	8002c0c <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d803      	bhi.n	8008d7c <HAL_SPI_Receive+0x2f4>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d102      	bne.n	8008d82 <HAL_SPI_Receive+0x2fa>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d114      	bne.n	8008dac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f8f2 	bl	8008f6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e0db      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f af69 	bne.w	8008c8c <HAL_SPI_Receive+0x204>
 8008dba:	e0c0      	b.n	8008f3e <HAL_SPI_Receive+0x4b6>
 8008dbc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d117      	bne.n	8008e06 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e04:	e094      	b.n	8008f30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	8bfa      	ldrh	r2, [r7, #30]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d946      	bls.n	8008ea2 <HAL_SPI_Receive+0x41a>
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d041      	beq.n	8008ea2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	b2d2      	uxtb	r2, r2
 8008e4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b04      	subs	r3, #4
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ea0:	e046      	b.n	8008f30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d81c      	bhi.n	8008ee8 <HAL_SPI_Receive+0x460>
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d017      	beq.n	8008ee8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ee6:	e023      	b.n	8008f30 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ee8:	f7f9 fe90 	bl	8002c0c <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d803      	bhi.n	8008f00 <HAL_SPI_Receive+0x478>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efe:	d102      	bne.n	8008f06 <HAL_SPI_Receive+0x47e>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d114      	bne.n	8008f30 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f830 	bl	8008f6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e019      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f47f af41 	bne.w	8008dc0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f814 	bl	8008f6c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0208 	orr.w	r2, r2, #8
 8008f8a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0210 	orr.w	r2, r2, #16
 8008f9a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0201 	bic.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6919      	ldr	r1, [r3, #16]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80090a8 <SPI_CloseTransfer+0x13c>)
 8008fb8:	400b      	ands	r3, r1
 8008fba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008fca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d014      	beq.n	8009002 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00f      	beq.n	8009002 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fe8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	699a      	ldr	r2, [r3, #24]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0220 	orr.w	r2, r2, #32
 8009000:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b03      	cmp	r3, #3
 800900c:	d014      	beq.n	8009038 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800901e:	f043 0204 	orr.w	r2, r3, #4
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	699a      	ldr	r2, [r3, #24]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009036:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00f      	beq.n	8009062 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009048:	f043 0201 	orr.w	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	699a      	ldr	r2, [r3, #24]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009060:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00f      	beq.n	800908c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009072:	f043 0208 	orr.w	r2, r3, #8
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800908a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800909c:	bf00      	nop
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	fffffc90 	.word	0xfffffc90

080090ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	4613      	mov	r3, r2
 80090ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090bc:	e010      	b.n	80090e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090be:	f7f9 fda5 	bl	8002c0c <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d803      	bhi.n	80090d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d4:	d102      	bne.n	80090dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e00f      	b.n	8009100 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	4013      	ands	r3, r2
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	bf0c      	ite	eq
 80090f0:	2301      	moveq	r3, #1
 80090f2:	2300      	movne	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	461a      	mov	r2, r3
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d0df      	beq.n	80090be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	3301      	adds	r3, #1
 8009120:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	3307      	adds	r3, #7
 8009126:	08db      	lsrs	r3, r3, #3
 8009128:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e049      	b.n	80091e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d106      	bne.n	800916a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f841 	bl	80091ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2202      	movs	r2, #2
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3304      	adds	r3, #4
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f000 f9e7 	bl	8009550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	d001      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e054      	b.n	80092c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a26      	ldr	r2, [pc, #152]	@ (80092d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d022      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009242:	d01d      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a22      	ldr	r2, [pc, #136]	@ (80092d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d018      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a21      	ldr	r2, [pc, #132]	@ (80092d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d013      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a1f      	ldr	r2, [pc, #124]	@ (80092dc <HAL_TIM_Base_Start_IT+0xdc>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00e      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a1e      	ldr	r2, [pc, #120]	@ (80092e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d009      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1c      	ldr	r2, [pc, #112]	@ (80092e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d004      	beq.n	8009280 <HAL_TIM_Base_Start_IT+0x80>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a1b      	ldr	r2, [pc, #108]	@ (80092e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d115      	bne.n	80092ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	4b19      	ldr	r3, [pc, #100]	@ (80092ec <HAL_TIM_Base_Start_IT+0xec>)
 8009288:	4013      	ands	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b06      	cmp	r3, #6
 8009290:	d015      	beq.n	80092be <HAL_TIM_Base_Start_IT+0xbe>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009298:	d011      	beq.n	80092be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0201 	orr.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092aa:	e008      	b.n	80092be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e000      	b.n	80092c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40010000 	.word	0x40010000
 80092d4:	40000400 	.word	0x40000400
 80092d8:	40000800 	.word	0x40000800
 80092dc:	40000c00 	.word	0x40000c00
 80092e0:	40010400 	.word	0x40010400
 80092e4:	40001800 	.word	0x40001800
 80092e8:	40014000 	.word	0x40014000
 80092ec:	00010007 	.word	0x00010007

080092f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d020      	beq.n	8009354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01b      	beq.n	8009354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f06f 0202 	mvn.w	r2, #2
 8009324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8e9 	bl	8009512 <HAL_TIM_IC_CaptureCallback>
 8009340:	e005      	b.n	800934e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8db 	bl	80094fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f8ec 	bl	8009526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b00      	cmp	r3, #0
 800935c:	d020      	beq.n	80093a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01b      	beq.n	80093a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f06f 0204 	mvn.w	r2, #4
 8009370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f8c3 	bl	8009512 <HAL_TIM_IC_CaptureCallback>
 800938c:	e005      	b.n	800939a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f8b5 	bl	80094fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f8c6 	bl	8009526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d020      	beq.n	80093ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01b      	beq.n	80093ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f06f 0208 	mvn.w	r2, #8
 80093bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2204      	movs	r2, #4
 80093c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f89d 	bl	8009512 <HAL_TIM_IC_CaptureCallback>
 80093d8:	e005      	b.n	80093e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f88f 	bl	80094fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f8a0 	bl	8009526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d020      	beq.n	8009438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01b      	beq.n	8009438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0210 	mvn.w	r2, #16
 8009408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2208      	movs	r2, #8
 800940e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f877 	bl	8009512 <HAL_TIM_IC_CaptureCallback>
 8009424:	e005      	b.n	8009432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f869 	bl	80094fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f87a 	bl	8009526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00c      	beq.n	800945c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0201 	mvn.w	r2, #1
 8009454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7f8 fef2 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f90d 	bl	80096a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f905 	bl	80096b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00c      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f834 	bl	800953a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f06f 0220 	mvn.w	r2, #32
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8cd 	bl	8009690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
	...

08009550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a43      	ldr	r2, [pc, #268]	@ (8009670 <TIM_Base_SetConfig+0x120>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d013      	beq.n	8009590 <TIM_Base_SetConfig+0x40>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800956e:	d00f      	beq.n	8009590 <TIM_Base_SetConfig+0x40>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a40      	ldr	r2, [pc, #256]	@ (8009674 <TIM_Base_SetConfig+0x124>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00b      	beq.n	8009590 <TIM_Base_SetConfig+0x40>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a3f      	ldr	r2, [pc, #252]	@ (8009678 <TIM_Base_SetConfig+0x128>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d007      	beq.n	8009590 <TIM_Base_SetConfig+0x40>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a3e      	ldr	r2, [pc, #248]	@ (800967c <TIM_Base_SetConfig+0x12c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d003      	beq.n	8009590 <TIM_Base_SetConfig+0x40>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a3d      	ldr	r2, [pc, #244]	@ (8009680 <TIM_Base_SetConfig+0x130>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d108      	bne.n	80095a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a32      	ldr	r2, [pc, #200]	@ (8009670 <TIM_Base_SetConfig+0x120>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d01f      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b0:	d01b      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009674 <TIM_Base_SetConfig+0x124>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d017      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009678 <TIM_Base_SetConfig+0x128>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d013      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a2d      	ldr	r2, [pc, #180]	@ (800967c <TIM_Base_SetConfig+0x12c>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00f      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009680 <TIM_Base_SetConfig+0x130>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00b      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a2b      	ldr	r2, [pc, #172]	@ (8009684 <TIM_Base_SetConfig+0x134>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009688 <TIM_Base_SetConfig+0x138>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_Base_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a29      	ldr	r2, [pc, #164]	@ (800968c <TIM_Base_SetConfig+0x13c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d108      	bne.n	80095fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a14      	ldr	r2, [pc, #80]	@ (8009670 <TIM_Base_SetConfig+0x120>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00f      	beq.n	8009642 <TIM_Base_SetConfig+0xf2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a16      	ldr	r2, [pc, #88]	@ (8009680 <TIM_Base_SetConfig+0x130>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00b      	beq.n	8009642 <TIM_Base_SetConfig+0xf2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <TIM_Base_SetConfig+0x134>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d007      	beq.n	8009642 <TIM_Base_SetConfig+0xf2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a14      	ldr	r2, [pc, #80]	@ (8009688 <TIM_Base_SetConfig+0x138>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d003      	beq.n	8009642 <TIM_Base_SetConfig+0xf2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a13      	ldr	r2, [pc, #76]	@ (800968c <TIM_Base_SetConfig+0x13c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d103      	bne.n	800964a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f043 0204 	orr.w	r2, r3, #4
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	601a      	str	r2, [r3, #0]
}
 8009662:	bf00      	nop
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40010000 	.word	0x40010000
 8009674:	40000400 	.word	0x40000400
 8009678:	40000800 	.word	0x40000800
 800967c:	40000c00 	.word	0x40000c00
 8009680:	40010400 	.word	0x40010400
 8009684:	40014000 	.word	0x40014000
 8009688:	40014400 	.word	0x40014400
 800968c:	40014800 	.word	0x40014800

08009690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e042      	b.n	8009764 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d106      	bne.n	80096f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7f9 f939 	bl	8002968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2224      	movs	r2, #36	@ 0x24
 80096fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 fa14 	bl	800ab44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fca9 	bl	800a074 <UART_SetConfig>
 8009722:	4603      	mov	r3, r0
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e01b      	b.n	8009764 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800973a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800974a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 fa93 	bl	800ac88 <UART_CheckIdleState>
 8009762:	4603      	mov	r3, r0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08a      	sub	sp, #40	@ 0x28
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009782:	2b20      	cmp	r3, #32
 8009784:	d17b      	bne.n	800987e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <HAL_UART_Transmit+0x26>
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e074      	b.n	8009880 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2221      	movs	r2, #33	@ 0x21
 80097a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097a6:	f7f9 fa31 	bl	8002c0c <HAL_GetTick>
 80097aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	88fa      	ldrh	r2, [r7, #6]
 80097b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c4:	d108      	bne.n	80097d8 <HAL_UART_Transmit+0x6c>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	e003      	b.n	80097e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097dc:	2300      	movs	r3, #0
 80097de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097e0:	e030      	b.n	8009844 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2200      	movs	r2, #0
 80097ea:	2180      	movs	r1, #128	@ 0x80
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f001 faf5 	bl	800addc <UART_WaitOnFlagUntilTimeout>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e03d      	b.n	8009880 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009818:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	3302      	adds	r3, #2
 800981e:	61bb      	str	r3, [r7, #24]
 8009820:	e007      	b.n	8009832 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	781a      	ldrb	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	3301      	adds	r3, #1
 8009830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1c8      	bne.n	80097e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2200      	movs	r2, #0
 8009858:	2140      	movs	r1, #64	@ 0x40
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f001 fabe 	bl	800addc <UART_WaitOnFlagUntilTimeout>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2220      	movs	r2, #32
 800986a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e006      	b.n	8009880 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	e000      	b.n	8009880 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800987e:	2302      	movs	r3, #2
  }
}
 8009880:	4618      	mov	r0, r3
 8009882:	3720      	adds	r7, #32
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b0ba      	sub	sp, #232	@ 0xe8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80098b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80098b6:	4013      	ands	r3, r2
 80098b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80098bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11b      	bne.n	80098fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c8:	f003 0320 	and.w	r3, r3, #32
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d015      	beq.n	80098fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d105      	bne.n	80098e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8393 	beq.w	800a018 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
      }
      return;
 80098fa:	e38d      	b.n	800a018 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 8123 	beq.w	8009b4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009906:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800990a:	4b8d      	ldr	r3, [pc, #564]	@ (8009b40 <HAL_UART_IRQHandler+0x2b8>)
 800990c:	4013      	ands	r3, r2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009912:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009916:	4b8b      	ldr	r3, [pc, #556]	@ (8009b44 <HAL_UART_IRQHandler+0x2bc>)
 8009918:	4013      	ands	r3, r2
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8116 	beq.w	8009b4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	d011      	beq.n	8009950 <HAL_UART_IRQHandler+0xc8>
 800992c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2201      	movs	r2, #1
 800993e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009946:	f043 0201 	orr.w	r2, r3, #1
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d011      	beq.n	8009980 <HAL_UART_IRQHandler+0xf8>
 800995c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2202      	movs	r2, #2
 800996e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009976:	f043 0204 	orr.w	r2, r3, #4
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d011      	beq.n	80099b0 <HAL_UART_IRQHandler+0x128>
 800998c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2204      	movs	r2, #4
 800999e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a6:	f043 0202 	orr.w	r2, r3, #2
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d017      	beq.n	80099ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d105      	bne.n	80099d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b40 <HAL_UART_IRQHandler+0x2b8>)
 80099ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2208      	movs	r2, #8
 80099da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e2:	f043 0208 	orr.w	r2, r3, #8
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d012      	beq.n	8009a1e <HAL_UART_IRQHandler+0x196>
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00c      	beq.n	8009a1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a14:	f043 0220 	orr.w	r2, r3, #32
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 82f9 	beq.w	800a01c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d013      	beq.n	8009a5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d007      	beq.n	8009a5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a72:	2b40      	cmp	r3, #64	@ 0x40
 8009a74:	d005      	beq.n	8009a82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d054      	beq.n	8009b2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 fa18 	bl	800aeb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a92:	2b40      	cmp	r3, #64	@ 0x40
 8009a94:	d146      	bne.n	8009b24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3308      	adds	r3, #8
 8009abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1d9      	bne.n	8009a96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d017      	beq.n	8009b1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af2:	4a15      	ldr	r2, [pc, #84]	@ (8009b48 <HAL_UART_IRQHandler+0x2c0>)
 8009af4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fa f893 	bl	8003c28 <HAL_DMA_Abort_IT>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d019      	beq.n	8009b3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009b16:	4610      	mov	r0, r2
 8009b18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1a:	e00f      	b.n	8009b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fa93 	bl	800a048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b22:	e00b      	b.n	8009b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fa8f 	bl	800a048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2a:	e007      	b.n	8009b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fa8b 	bl	800a048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009b3a:	e26f      	b.n	800a01c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b3c:	bf00      	nop
    return;
 8009b3e:	e26d      	b.n	800a01c <HAL_UART_IRQHandler+0x794>
 8009b40:	10000001 	.word	0x10000001
 8009b44:	04000120 	.word	0x04000120
 8009b48:	0800af85 	.word	0x0800af85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f040 8203 	bne.w	8009f5c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 81fc 	beq.w	8009f5c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 81f5 	beq.w	8009f5c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2210      	movs	r2, #16
 8009b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b84:	2b40      	cmp	r3, #64	@ 0x40
 8009b86:	f040 816d 	bne.w	8009e64 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4aa4      	ldr	r2, [pc, #656]	@ (8009e24 <HAL_UART_IRQHandler+0x59c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d068      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4aa1      	ldr	r2, [pc, #644]	@ (8009e28 <HAL_UART_IRQHandler+0x5a0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d061      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a9f      	ldr	r2, [pc, #636]	@ (8009e2c <HAL_UART_IRQHandler+0x5a4>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d05a      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a9c      	ldr	r2, [pc, #624]	@ (8009e30 <HAL_UART_IRQHandler+0x5a8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d053      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a9a      	ldr	r2, [pc, #616]	@ (8009e34 <HAL_UART_IRQHandler+0x5ac>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d04c      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a97      	ldr	r2, [pc, #604]	@ (8009e38 <HAL_UART_IRQHandler+0x5b0>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d045      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a95      	ldr	r2, [pc, #596]	@ (8009e3c <HAL_UART_IRQHandler+0x5b4>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d03e      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a92      	ldr	r2, [pc, #584]	@ (8009e40 <HAL_UART_IRQHandler+0x5b8>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d037      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a90      	ldr	r2, [pc, #576]	@ (8009e44 <HAL_UART_IRQHandler+0x5bc>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d030      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a8d      	ldr	r2, [pc, #564]	@ (8009e48 <HAL_UART_IRQHandler+0x5c0>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d029      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a8b      	ldr	r2, [pc, #556]	@ (8009e4c <HAL_UART_IRQHandler+0x5c4>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d022      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a88      	ldr	r2, [pc, #544]	@ (8009e50 <HAL_UART_IRQHandler+0x5c8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d01b      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a86      	ldr	r2, [pc, #536]	@ (8009e54 <HAL_UART_IRQHandler+0x5cc>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d014      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a83      	ldr	r2, [pc, #524]	@ (8009e58 <HAL_UART_IRQHandler+0x5d0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00d      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a81      	ldr	r2, [pc, #516]	@ (8009e5c <HAL_UART_IRQHandler+0x5d4>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d006      	beq.n	8009c6a <HAL_UART_IRQHandler+0x3e2>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a7e      	ldr	r2, [pc, #504]	@ (8009e60 <HAL_UART_IRQHandler+0x5d8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d106      	bne.n	8009c78 <HAL_UART_IRQHandler+0x3f0>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	e005      	b.n	8009c84 <HAL_UART_IRQHandler+0x3fc>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 80ad 	beq.w	8009dec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	f080 80a5 	bcs.w	8009dec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cb8:	f000 8087 	beq.w	8009dca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ce6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1da      	bne.n	8009cbc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3308      	adds	r3, #8
 8009d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e1      	bne.n	8009d06 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3308      	adds	r3, #8
 8009d48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d6e:	e841 2300 	strex	r3, r2, [r1]
 8009d72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e3      	bne.n	8009d42 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d98:	f023 0310 	bic.w	r3, r3, #16
 8009d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009daa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009dac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009db0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e4      	bne.n	8009d88 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7f9 fc11 	bl	80035ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f939 	bl	800a05c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009dea:	e119      	b.n	800a020 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009df6:	429a      	cmp	r2, r3
 8009df8:	f040 8112 	bne.w	800a020 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e08:	f040 810a 	bne.w	800a020 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f91e 	bl	800a05c <HAL_UARTEx_RxEventCallback>
      return;
 8009e20:	e0fe      	b.n	800a020 <HAL_UART_IRQHandler+0x798>
 8009e22:	bf00      	nop
 8009e24:	40020010 	.word	0x40020010
 8009e28:	40020028 	.word	0x40020028
 8009e2c:	40020040 	.word	0x40020040
 8009e30:	40020058 	.word	0x40020058
 8009e34:	40020070 	.word	0x40020070
 8009e38:	40020088 	.word	0x40020088
 8009e3c:	400200a0 	.word	0x400200a0
 8009e40:	400200b8 	.word	0x400200b8
 8009e44:	40020410 	.word	0x40020410
 8009e48:	40020428 	.word	0x40020428
 8009e4c:	40020440 	.word	0x40020440
 8009e50:	40020458 	.word	0x40020458
 8009e54:	40020470 	.word	0x40020470
 8009e58:	40020488 	.word	0x40020488
 8009e5c:	400204a0 	.word	0x400204a0
 8009e60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80cf 	beq.w	800a024 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 80ca 	beq.w	800a024 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eb4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e4      	bne.n	8009e90 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed6:	6a3a      	ldr	r2, [r7, #32]
 8009ed8:	4b55      	ldr	r3, [pc, #340]	@ (800a030 <HAL_UART_IRQHandler+0x7a8>)
 8009eda:	4013      	ands	r3, r2
 8009edc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8009eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e3      	bne.n	8009ec6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 0310 	bic.w	r3, r3, #16
 8009f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	69b9      	ldr	r1, [r7, #24]
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	617b      	str	r3, [r7, #20]
   return(result);
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e4      	bne.n	8009f12 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f881 	bl	800a05c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f5a:	e063      	b.n	800a024 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00e      	beq.n	8009f86 <HAL_UART_IRQHandler+0x6fe>
 8009f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d008      	beq.n	8009f86 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 f83d 	bl	800affe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f84:	e051      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d014      	beq.n	8009fbc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d105      	bne.n	8009faa <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d008      	beq.n	8009fbc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d03a      	beq.n	800a028 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
    }
    return;
 8009fba:	e035      	b.n	800a028 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d009      	beq.n	8009fdc <HAL_UART_IRQHandler+0x754>
 8009fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 ffe7 	bl	800afa8 <UART_EndTransmit_IT>
    return;
 8009fda:	e026      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d009      	beq.n	8009ffc <HAL_UART_IRQHandler+0x774>
 8009fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f816 	bl	800b026 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ffa:	e016      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a000:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d010      	beq.n	800a02a <HAL_UART_IRQHandler+0x7a2>
 800a008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da0c      	bge.n	800a02a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fffe 	bl	800b012 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a016:	e008      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a018:	bf00      	nop
 800a01a:	e006      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
    return;
 800a01c:	bf00      	nop
 800a01e:	e004      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a020:	bf00      	nop
 800a022:	e002      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <HAL_UART_IRQHandler+0x7a2>
    return;
 800a028:	bf00      	nop
  }
}
 800a02a:	37e8      	adds	r7, #232	@ 0xe8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	effffffe 	.word	0xeffffffe

0800a034 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a078:	b092      	sub	sp, #72	@ 0x48
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	431a      	orrs	r2, r3
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	431a      	orrs	r2, r3
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	4313      	orrs	r3, r2
 800a09a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	4bbe      	ldr	r3, [pc, #760]	@ (800a39c <UART_SetConfig+0x328>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0ac:	430b      	orrs	r3, r1
 800a0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4ab3      	ldr	r2, [pc, #716]	@ (800a3a0 <UART_SetConfig+0x32c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d004      	beq.n	800a0e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	4baf      	ldr	r3, [pc, #700]	@ (800a3a4 <UART_SetConfig+0x330>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fa:	f023 010f 	bic.w	r1, r3, #15
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4aa6      	ldr	r2, [pc, #664]	@ (800a3a8 <UART_SetConfig+0x334>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d177      	bne.n	800a204 <UART_SetConfig+0x190>
 800a114:	4ba5      	ldr	r3, [pc, #660]	@ (800a3ac <UART_SetConfig+0x338>)
 800a116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a11c:	2b28      	cmp	r3, #40	@ 0x28
 800a11e:	d86d      	bhi.n	800a1fc <UART_SetConfig+0x188>
 800a120:	a201      	add	r2, pc, #4	@ (adr r2, 800a128 <UART_SetConfig+0xb4>)
 800a122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a126:	bf00      	nop
 800a128:	0800a1cd 	.word	0x0800a1cd
 800a12c:	0800a1fd 	.word	0x0800a1fd
 800a130:	0800a1fd 	.word	0x0800a1fd
 800a134:	0800a1fd 	.word	0x0800a1fd
 800a138:	0800a1fd 	.word	0x0800a1fd
 800a13c:	0800a1fd 	.word	0x0800a1fd
 800a140:	0800a1fd 	.word	0x0800a1fd
 800a144:	0800a1fd 	.word	0x0800a1fd
 800a148:	0800a1d5 	.word	0x0800a1d5
 800a14c:	0800a1fd 	.word	0x0800a1fd
 800a150:	0800a1fd 	.word	0x0800a1fd
 800a154:	0800a1fd 	.word	0x0800a1fd
 800a158:	0800a1fd 	.word	0x0800a1fd
 800a15c:	0800a1fd 	.word	0x0800a1fd
 800a160:	0800a1fd 	.word	0x0800a1fd
 800a164:	0800a1fd 	.word	0x0800a1fd
 800a168:	0800a1dd 	.word	0x0800a1dd
 800a16c:	0800a1fd 	.word	0x0800a1fd
 800a170:	0800a1fd 	.word	0x0800a1fd
 800a174:	0800a1fd 	.word	0x0800a1fd
 800a178:	0800a1fd 	.word	0x0800a1fd
 800a17c:	0800a1fd 	.word	0x0800a1fd
 800a180:	0800a1fd 	.word	0x0800a1fd
 800a184:	0800a1fd 	.word	0x0800a1fd
 800a188:	0800a1e5 	.word	0x0800a1e5
 800a18c:	0800a1fd 	.word	0x0800a1fd
 800a190:	0800a1fd 	.word	0x0800a1fd
 800a194:	0800a1fd 	.word	0x0800a1fd
 800a198:	0800a1fd 	.word	0x0800a1fd
 800a19c:	0800a1fd 	.word	0x0800a1fd
 800a1a0:	0800a1fd 	.word	0x0800a1fd
 800a1a4:	0800a1fd 	.word	0x0800a1fd
 800a1a8:	0800a1ed 	.word	0x0800a1ed
 800a1ac:	0800a1fd 	.word	0x0800a1fd
 800a1b0:	0800a1fd 	.word	0x0800a1fd
 800a1b4:	0800a1fd 	.word	0x0800a1fd
 800a1b8:	0800a1fd 	.word	0x0800a1fd
 800a1bc:	0800a1fd 	.word	0x0800a1fd
 800a1c0:	0800a1fd 	.word	0x0800a1fd
 800a1c4:	0800a1fd 	.word	0x0800a1fd
 800a1c8:	0800a1f5 	.word	0x0800a1f5
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e222      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e21e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a1dc:	2308      	movs	r3, #8
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e21a      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e216      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a1ec:	2320      	movs	r3, #32
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e212      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a1f4:	2340      	movs	r3, #64	@ 0x40
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e20e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a1fc:	2380      	movs	r3, #128	@ 0x80
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e20a      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a69      	ldr	r2, [pc, #420]	@ (800a3b0 <UART_SetConfig+0x33c>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d130      	bne.n	800a270 <UART_SetConfig+0x1fc>
 800a20e:	4b67      	ldr	r3, [pc, #412]	@ (800a3ac <UART_SetConfig+0x338>)
 800a210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	2b05      	cmp	r3, #5
 800a218:	d826      	bhi.n	800a268 <UART_SetConfig+0x1f4>
 800a21a:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <UART_SetConfig+0x1ac>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a239 	.word	0x0800a239
 800a224:	0800a241 	.word	0x0800a241
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a251 	.word	0x0800a251
 800a230:	0800a259 	.word	0x0800a259
 800a234:	0800a261 	.word	0x0800a261
 800a238:	2300      	movs	r3, #0
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23e:	e1ec      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a240:	2304      	movs	r3, #4
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a246:	e1e8      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a248:	2308      	movs	r3, #8
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24e:	e1e4      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a250:	2310      	movs	r3, #16
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a256:	e1e0      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a258:	2320      	movs	r3, #32
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e1dc      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a260:	2340      	movs	r3, #64	@ 0x40
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e1d8      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a268:	2380      	movs	r3, #128	@ 0x80
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e1d4      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a4f      	ldr	r2, [pc, #316]	@ (800a3b4 <UART_SetConfig+0x340>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d130      	bne.n	800a2dc <UART_SetConfig+0x268>
 800a27a:	4b4c      	ldr	r3, [pc, #304]	@ (800a3ac <UART_SetConfig+0x338>)
 800a27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	2b05      	cmp	r3, #5
 800a284:	d826      	bhi.n	800a2d4 <UART_SetConfig+0x260>
 800a286:	a201      	add	r2, pc, #4	@ (adr r2, 800a28c <UART_SetConfig+0x218>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a2a5 	.word	0x0800a2a5
 800a290:	0800a2ad 	.word	0x0800a2ad
 800a294:	0800a2b5 	.word	0x0800a2b5
 800a298:	0800a2bd 	.word	0x0800a2bd
 800a29c:	0800a2c5 	.word	0x0800a2c5
 800a2a0:	0800a2cd 	.word	0x0800a2cd
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2aa:	e1b6      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b2:	e1b2      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	e1ae      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2bc:	2310      	movs	r3, #16
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e1aa      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e1a6      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2cc:	2340      	movs	r3, #64	@ 0x40
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e1a2      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2d4:	2380      	movs	r3, #128	@ 0x80
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e19e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a35      	ldr	r2, [pc, #212]	@ (800a3b8 <UART_SetConfig+0x344>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d130      	bne.n	800a348 <UART_SetConfig+0x2d4>
 800a2e6:	4b31      	ldr	r3, [pc, #196]	@ (800a3ac <UART_SetConfig+0x338>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d826      	bhi.n	800a340 <UART_SetConfig+0x2cc>
 800a2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x284>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a311 	.word	0x0800a311
 800a2fc:	0800a319 	.word	0x0800a319
 800a300:	0800a321 	.word	0x0800a321
 800a304:	0800a329 	.word	0x0800a329
 800a308:	0800a331 	.word	0x0800a331
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e180      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a318:	2304      	movs	r3, #4
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e17c      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a320:	2308      	movs	r3, #8
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a326:	e178      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a328:	2310      	movs	r3, #16
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e174      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a330:	2320      	movs	r3, #32
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e170      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a338:	2340      	movs	r3, #64	@ 0x40
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e16c      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a340:	2380      	movs	r3, #128	@ 0x80
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e168      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a1b      	ldr	r2, [pc, #108]	@ (800a3bc <UART_SetConfig+0x348>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d142      	bne.n	800a3d8 <UART_SetConfig+0x364>
 800a352:	4b16      	ldr	r3, [pc, #88]	@ (800a3ac <UART_SetConfig+0x338>)
 800a354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	d838      	bhi.n	800a3d0 <UART_SetConfig+0x35c>
 800a35e:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <UART_SetConfig+0x2f0>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a37d 	.word	0x0800a37d
 800a368:	0800a385 	.word	0x0800a385
 800a36c:	0800a38d 	.word	0x0800a38d
 800a370:	0800a395 	.word	0x0800a395
 800a374:	0800a3c1 	.word	0x0800a3c1
 800a378:	0800a3c9 	.word	0x0800a3c9
 800a37c:	2300      	movs	r3, #0
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e14a      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a384:	2304      	movs	r3, #4
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e146      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a38c:	2308      	movs	r3, #8
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e142      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a394:	2310      	movs	r3, #16
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e13e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a39c:	cfff69f3 	.word	0xcfff69f3
 800a3a0:	58000c00 	.word	0x58000c00
 800a3a4:	11fff4ff 	.word	0x11fff4ff
 800a3a8:	40011000 	.word	0x40011000
 800a3ac:	58024400 	.word	0x58024400
 800a3b0:	40004400 	.word	0x40004400
 800a3b4:	40004800 	.word	0x40004800
 800a3b8:	40004c00 	.word	0x40004c00
 800a3bc:	40005000 	.word	0x40005000
 800a3c0:	2320      	movs	r3, #32
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e128      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a3c8:	2340      	movs	r3, #64	@ 0x40
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e124      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a3d0:	2380      	movs	r3, #128	@ 0x80
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e120      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4acb      	ldr	r2, [pc, #812]	@ (800a70c <UART_SetConfig+0x698>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d176      	bne.n	800a4d0 <UART_SetConfig+0x45c>
 800a3e2:	4bcb      	ldr	r3, [pc, #812]	@ (800a710 <UART_SetConfig+0x69c>)
 800a3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3ea:	2b28      	cmp	r3, #40	@ 0x28
 800a3ec:	d86c      	bhi.n	800a4c8 <UART_SetConfig+0x454>
 800a3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f4 <UART_SetConfig+0x380>)
 800a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f4:	0800a499 	.word	0x0800a499
 800a3f8:	0800a4c9 	.word	0x0800a4c9
 800a3fc:	0800a4c9 	.word	0x0800a4c9
 800a400:	0800a4c9 	.word	0x0800a4c9
 800a404:	0800a4c9 	.word	0x0800a4c9
 800a408:	0800a4c9 	.word	0x0800a4c9
 800a40c:	0800a4c9 	.word	0x0800a4c9
 800a410:	0800a4c9 	.word	0x0800a4c9
 800a414:	0800a4a1 	.word	0x0800a4a1
 800a418:	0800a4c9 	.word	0x0800a4c9
 800a41c:	0800a4c9 	.word	0x0800a4c9
 800a420:	0800a4c9 	.word	0x0800a4c9
 800a424:	0800a4c9 	.word	0x0800a4c9
 800a428:	0800a4c9 	.word	0x0800a4c9
 800a42c:	0800a4c9 	.word	0x0800a4c9
 800a430:	0800a4c9 	.word	0x0800a4c9
 800a434:	0800a4a9 	.word	0x0800a4a9
 800a438:	0800a4c9 	.word	0x0800a4c9
 800a43c:	0800a4c9 	.word	0x0800a4c9
 800a440:	0800a4c9 	.word	0x0800a4c9
 800a444:	0800a4c9 	.word	0x0800a4c9
 800a448:	0800a4c9 	.word	0x0800a4c9
 800a44c:	0800a4c9 	.word	0x0800a4c9
 800a450:	0800a4c9 	.word	0x0800a4c9
 800a454:	0800a4b1 	.word	0x0800a4b1
 800a458:	0800a4c9 	.word	0x0800a4c9
 800a45c:	0800a4c9 	.word	0x0800a4c9
 800a460:	0800a4c9 	.word	0x0800a4c9
 800a464:	0800a4c9 	.word	0x0800a4c9
 800a468:	0800a4c9 	.word	0x0800a4c9
 800a46c:	0800a4c9 	.word	0x0800a4c9
 800a470:	0800a4c9 	.word	0x0800a4c9
 800a474:	0800a4b9 	.word	0x0800a4b9
 800a478:	0800a4c9 	.word	0x0800a4c9
 800a47c:	0800a4c9 	.word	0x0800a4c9
 800a480:	0800a4c9 	.word	0x0800a4c9
 800a484:	0800a4c9 	.word	0x0800a4c9
 800a488:	0800a4c9 	.word	0x0800a4c9
 800a48c:	0800a4c9 	.word	0x0800a4c9
 800a490:	0800a4c9 	.word	0x0800a4c9
 800a494:	0800a4c1 	.word	0x0800a4c1
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e0bc      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e0b8      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e0b4      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4b0:	2310      	movs	r3, #16
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e0b0      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4b8:	2320      	movs	r3, #32
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e0ac      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4c0:	2340      	movs	r3, #64	@ 0x40
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e0a8      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4c8:	2380      	movs	r3, #128	@ 0x80
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e0a4      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a8f      	ldr	r2, [pc, #572]	@ (800a714 <UART_SetConfig+0x6a0>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d130      	bne.n	800a53c <UART_SetConfig+0x4c8>
 800a4da:	4b8d      	ldr	r3, [pc, #564]	@ (800a710 <UART_SetConfig+0x69c>)
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	d826      	bhi.n	800a534 <UART_SetConfig+0x4c0>
 800a4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <UART_SetConfig+0x478>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a505 	.word	0x0800a505
 800a4f0:	0800a50d 	.word	0x0800a50d
 800a4f4:	0800a515 	.word	0x0800a515
 800a4f8:	0800a51d 	.word	0x0800a51d
 800a4fc:	0800a525 	.word	0x0800a525
 800a500:	0800a52d 	.word	0x0800a52d
 800a504:	2300      	movs	r3, #0
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e086      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a50c:	2304      	movs	r3, #4
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e082      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a514:	2308      	movs	r3, #8
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e07e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a51c:	2310      	movs	r3, #16
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e07a      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a524:	2320      	movs	r3, #32
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e076      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a52c:	2340      	movs	r3, #64	@ 0x40
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e072      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a534:	2380      	movs	r3, #128	@ 0x80
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e06e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a75      	ldr	r2, [pc, #468]	@ (800a718 <UART_SetConfig+0x6a4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d130      	bne.n	800a5a8 <UART_SetConfig+0x534>
 800a546:	4b72      	ldr	r3, [pc, #456]	@ (800a710 <UART_SetConfig+0x69c>)
 800a548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	2b05      	cmp	r3, #5
 800a550:	d826      	bhi.n	800a5a0 <UART_SetConfig+0x52c>
 800a552:	a201      	add	r2, pc, #4	@ (adr r2, 800a558 <UART_SetConfig+0x4e4>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a571 	.word	0x0800a571
 800a55c:	0800a579 	.word	0x0800a579
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a591 	.word	0x0800a591
 800a56c:	0800a599 	.word	0x0800a599
 800a570:	2300      	movs	r3, #0
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e050      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a578:	2304      	movs	r3, #4
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e04c      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a580:	2308      	movs	r3, #8
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e048      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a588:	2310      	movs	r3, #16
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e044      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a590:	2320      	movs	r3, #32
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e040      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a598:	2340      	movs	r3, #64	@ 0x40
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e03c      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a5a0:	2380      	movs	r3, #128	@ 0x80
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e038      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a5b      	ldr	r2, [pc, #364]	@ (800a71c <UART_SetConfig+0x6a8>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d130      	bne.n	800a614 <UART_SetConfig+0x5a0>
 800a5b2:	4b57      	ldr	r3, [pc, #348]	@ (800a710 <UART_SetConfig+0x69c>)
 800a5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d826      	bhi.n	800a60c <UART_SetConfig+0x598>
 800a5be:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c4 <UART_SetConfig+0x550>)
 800a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c4:	0800a5dd 	.word	0x0800a5dd
 800a5c8:	0800a5e5 	.word	0x0800a5e5
 800a5cc:	0800a5ed 	.word	0x0800a5ed
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a5fd 	.word	0x0800a5fd
 800a5d8:	0800a605 	.word	0x0800a605
 800a5dc:	2302      	movs	r3, #2
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e01a      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e016      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e012      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e00e      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a5fc:	2320      	movs	r3, #32
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e00a      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a604:	2340      	movs	r3, #64	@ 0x40
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e006      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a60c:	2380      	movs	r3, #128	@ 0x80
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a612:	e002      	b.n	800a61a <UART_SetConfig+0x5a6>
 800a614:	2380      	movs	r3, #128	@ 0x80
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a3f      	ldr	r2, [pc, #252]	@ (800a71c <UART_SetConfig+0x6a8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	f040 80f8 	bne.w	800a816 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a626:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	dc46      	bgt.n	800a6bc <UART_SetConfig+0x648>
 800a62e:	2b02      	cmp	r3, #2
 800a630:	f2c0 8082 	blt.w	800a738 <UART_SetConfig+0x6c4>
 800a634:	3b02      	subs	r3, #2
 800a636:	2b1e      	cmp	r3, #30
 800a638:	d87e      	bhi.n	800a738 <UART_SetConfig+0x6c4>
 800a63a:	a201      	add	r2, pc, #4	@ (adr r2, 800a640 <UART_SetConfig+0x5cc>)
 800a63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a640:	0800a6c3 	.word	0x0800a6c3
 800a644:	0800a739 	.word	0x0800a739
 800a648:	0800a6cb 	.word	0x0800a6cb
 800a64c:	0800a739 	.word	0x0800a739
 800a650:	0800a739 	.word	0x0800a739
 800a654:	0800a739 	.word	0x0800a739
 800a658:	0800a6db 	.word	0x0800a6db
 800a65c:	0800a739 	.word	0x0800a739
 800a660:	0800a739 	.word	0x0800a739
 800a664:	0800a739 	.word	0x0800a739
 800a668:	0800a739 	.word	0x0800a739
 800a66c:	0800a739 	.word	0x0800a739
 800a670:	0800a739 	.word	0x0800a739
 800a674:	0800a739 	.word	0x0800a739
 800a678:	0800a6eb 	.word	0x0800a6eb
 800a67c:	0800a739 	.word	0x0800a739
 800a680:	0800a739 	.word	0x0800a739
 800a684:	0800a739 	.word	0x0800a739
 800a688:	0800a739 	.word	0x0800a739
 800a68c:	0800a739 	.word	0x0800a739
 800a690:	0800a739 	.word	0x0800a739
 800a694:	0800a739 	.word	0x0800a739
 800a698:	0800a739 	.word	0x0800a739
 800a69c:	0800a739 	.word	0x0800a739
 800a6a0:	0800a739 	.word	0x0800a739
 800a6a4:	0800a739 	.word	0x0800a739
 800a6a8:	0800a739 	.word	0x0800a739
 800a6ac:	0800a739 	.word	0x0800a739
 800a6b0:	0800a739 	.word	0x0800a739
 800a6b4:	0800a739 	.word	0x0800a739
 800a6b8:	0800a72b 	.word	0x0800a72b
 800a6bc:	2b40      	cmp	r3, #64	@ 0x40
 800a6be:	d037      	beq.n	800a730 <UART_SetConfig+0x6bc>
 800a6c0:	e03a      	b.n	800a738 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6c2:	f7fd faad 	bl	8007c20 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6c8:	e03c      	b.n	800a744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd fabc 	bl	8007c4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e034      	b.n	800a744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6da:	f107 0318 	add.w	r3, r7, #24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd fc08 	bl	8007ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e8:	e02c      	b.n	800a744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ea:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <UART_SetConfig+0x69c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d016      	beq.n	800a724 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6f6:	4b06      	ldr	r3, [pc, #24]	@ (800a710 <UART_SetConfig+0x69c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	08db      	lsrs	r3, r3, #3
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	4a07      	ldr	r2, [pc, #28]	@ (800a720 <UART_SetConfig+0x6ac>)
 800a702:	fa22 f303 	lsr.w	r3, r2, r3
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a708:	e01c      	b.n	800a744 <UART_SetConfig+0x6d0>
 800a70a:	bf00      	nop
 800a70c:	40011400 	.word	0x40011400
 800a710:	58024400 	.word	0x58024400
 800a714:	40007800 	.word	0x40007800
 800a718:	40007c00 	.word	0x40007c00
 800a71c:	58000c00 	.word	0x58000c00
 800a720:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a724:	4b9d      	ldr	r3, [pc, #628]	@ (800a99c <UART_SetConfig+0x928>)
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e00c      	b.n	800a744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a72a:	4b9d      	ldr	r3, [pc, #628]	@ (800a9a0 <UART_SetConfig+0x92c>)
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72e:	e009      	b.n	800a744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a736:	e005      	b.n	800a744 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a742:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 81de 	beq.w	800ab08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a750:	4a94      	ldr	r2, [pc, #592]	@ (800a9a4 <UART_SetConfig+0x930>)
 800a752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a756:	461a      	mov	r2, r3
 800a758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a75e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	4613      	mov	r3, r2
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	4413      	add	r3, r2
 800a76a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d305      	bcc.n	800a77c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a778:	429a      	cmp	r2, r3
 800a77a:	d903      	bls.n	800a784 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a782:	e1c1      	b.n	800ab08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a786:	2200      	movs	r2, #0
 800a788:	60bb      	str	r3, [r7, #8]
 800a78a:	60fa      	str	r2, [r7, #12]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a790:	4a84      	ldr	r2, [pc, #528]	@ (800a9a4 <UART_SetConfig+0x930>)
 800a792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a796:	b29b      	uxth	r3, r3
 800a798:	2200      	movs	r2, #0
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7a6:	f7f5 ffaf 	bl	8000708 <__aeabi_uldivmod>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	f04f 0300 	mov.w	r3, #0
 800a7ba:	020b      	lsls	r3, r1, #8
 800a7bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7c0:	0202      	lsls	r2, r0, #8
 800a7c2:	6979      	ldr	r1, [r7, #20]
 800a7c4:	6849      	ldr	r1, [r1, #4]
 800a7c6:	0849      	lsrs	r1, r1, #1
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	eb12 0804 	adds.w	r8, r2, r4
 800a7d2:	eb43 0905 	adc.w	r9, r3, r5
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	469a      	mov	sl, r3
 800a7de:	4693      	mov	fp, r2
 800a7e0:	4652      	mov	r2, sl
 800a7e2:	465b      	mov	r3, fp
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f5 ff8e 	bl	8000708 <__aeabi_uldivmod>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7fa:	d308      	bcc.n	800a80e <UART_SetConfig+0x79a>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a802:	d204      	bcs.n	800a80e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a80a:	60da      	str	r2, [r3, #12]
 800a80c:	e17c      	b.n	800ab08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a814:	e178      	b.n	800ab08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a81e:	f040 80c5 	bne.w	800a9ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a822:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a826:	2b20      	cmp	r3, #32
 800a828:	dc48      	bgt.n	800a8bc <UART_SetConfig+0x848>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	db7b      	blt.n	800a926 <UART_SetConfig+0x8b2>
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d879      	bhi.n	800a926 <UART_SetConfig+0x8b2>
 800a832:	a201      	add	r2, pc, #4	@ (adr r2, 800a838 <UART_SetConfig+0x7c4>)
 800a834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a8cb 	.word	0x0800a8cb
 800a840:	0800a927 	.word	0x0800a927
 800a844:	0800a927 	.word	0x0800a927
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a927 	.word	0x0800a927
 800a850:	0800a927 	.word	0x0800a927
 800a854:	0800a927 	.word	0x0800a927
 800a858:	0800a8e3 	.word	0x0800a8e3
 800a85c:	0800a927 	.word	0x0800a927
 800a860:	0800a927 	.word	0x0800a927
 800a864:	0800a927 	.word	0x0800a927
 800a868:	0800a927 	.word	0x0800a927
 800a86c:	0800a927 	.word	0x0800a927
 800a870:	0800a927 	.word	0x0800a927
 800a874:	0800a927 	.word	0x0800a927
 800a878:	0800a8f3 	.word	0x0800a8f3
 800a87c:	0800a927 	.word	0x0800a927
 800a880:	0800a927 	.word	0x0800a927
 800a884:	0800a927 	.word	0x0800a927
 800a888:	0800a927 	.word	0x0800a927
 800a88c:	0800a927 	.word	0x0800a927
 800a890:	0800a927 	.word	0x0800a927
 800a894:	0800a927 	.word	0x0800a927
 800a898:	0800a927 	.word	0x0800a927
 800a89c:	0800a927 	.word	0x0800a927
 800a8a0:	0800a927 	.word	0x0800a927
 800a8a4:	0800a927 	.word	0x0800a927
 800a8a8:	0800a927 	.word	0x0800a927
 800a8ac:	0800a927 	.word	0x0800a927
 800a8b0:	0800a927 	.word	0x0800a927
 800a8b4:	0800a927 	.word	0x0800a927
 800a8b8:	0800a919 	.word	0x0800a919
 800a8bc:	2b40      	cmp	r3, #64	@ 0x40
 800a8be:	d02e      	beq.n	800a91e <UART_SetConfig+0x8aa>
 800a8c0:	e031      	b.n	800a926 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8c2:	f7fb ff35 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 800a8c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e033      	b.n	800a932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ca:	f7fb ff47 	bl	800675c <HAL_RCC_GetPCLK2Freq>
 800a8ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8d0:	e02f      	b.n	800a932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd f9b8 	bl	8007c4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e0:	e027      	b.n	800a932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8e2:	f107 0318 	add.w	r3, r7, #24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fd fb04 	bl	8007ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f0:	e01f      	b.n	800a932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8f2:	4b2d      	ldr	r3, [pc, #180]	@ (800a9a8 <UART_SetConfig+0x934>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d009      	beq.n	800a912 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a8 <UART_SetConfig+0x934>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	08db      	lsrs	r3, r3, #3
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	4a24      	ldr	r2, [pc, #144]	@ (800a99c <UART_SetConfig+0x928>)
 800a90a:	fa22 f303 	lsr.w	r3, r2, r3
 800a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a910:	e00f      	b.n	800a932 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a912:	4b22      	ldr	r3, [pc, #136]	@ (800a99c <UART_SetConfig+0x928>)
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a916:	e00c      	b.n	800a932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a918:	4b21      	ldr	r3, [pc, #132]	@ (800a9a0 <UART_SetConfig+0x92c>)
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91c:	e009      	b.n	800a932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a91e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e005      	b.n	800a932 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 80e7 	beq.w	800ab08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93e:	4a19      	ldr	r2, [pc, #100]	@ (800a9a4 <UART_SetConfig+0x930>)
 800a940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a944:	461a      	mov	r2, r3
 800a946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a948:	fbb3 f3f2 	udiv	r3, r3, r2
 800a94c:	005a      	lsls	r2, r3, #1
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	085b      	lsrs	r3, r3, #1
 800a954:	441a      	add	r2, r3
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a962:	2b0f      	cmp	r3, #15
 800a964:	d916      	bls.n	800a994 <UART_SetConfig+0x920>
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a96c:	d212      	bcs.n	800a994 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a970:	b29b      	uxth	r3, r3
 800a972:	f023 030f 	bic.w	r3, r3, #15
 800a976:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97a:	085b      	lsrs	r3, r3, #1
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	f003 0307 	and.w	r3, r3, #7
 800a982:	b29a      	uxth	r2, r3
 800a984:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a986:	4313      	orrs	r3, r2
 800a988:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a990:	60da      	str	r2, [r3, #12]
 800a992:	e0b9      	b.n	800ab08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a99a:	e0b5      	b.n	800ab08 <UART_SetConfig+0xa94>
 800a99c:	03d09000 	.word	0x03d09000
 800a9a0:	003d0900 	.word	0x003d0900
 800a9a4:	080131f8 	.word	0x080131f8
 800a9a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9b0:	2b20      	cmp	r3, #32
 800a9b2:	dc49      	bgt.n	800aa48 <UART_SetConfig+0x9d4>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	db7c      	blt.n	800aab2 <UART_SetConfig+0xa3e>
 800a9b8:	2b20      	cmp	r3, #32
 800a9ba:	d87a      	bhi.n	800aab2 <UART_SetConfig+0xa3e>
 800a9bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c4 <UART_SetConfig+0x950>)
 800a9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c2:	bf00      	nop
 800a9c4:	0800aa4f 	.word	0x0800aa4f
 800a9c8:	0800aa57 	.word	0x0800aa57
 800a9cc:	0800aab3 	.word	0x0800aab3
 800a9d0:	0800aab3 	.word	0x0800aab3
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aab3 	.word	0x0800aab3
 800a9dc:	0800aab3 	.word	0x0800aab3
 800a9e0:	0800aab3 	.word	0x0800aab3
 800a9e4:	0800aa6f 	.word	0x0800aa6f
 800a9e8:	0800aab3 	.word	0x0800aab3
 800a9ec:	0800aab3 	.word	0x0800aab3
 800a9f0:	0800aab3 	.word	0x0800aab3
 800a9f4:	0800aab3 	.word	0x0800aab3
 800a9f8:	0800aab3 	.word	0x0800aab3
 800a9fc:	0800aab3 	.word	0x0800aab3
 800aa00:	0800aab3 	.word	0x0800aab3
 800aa04:	0800aa7f 	.word	0x0800aa7f
 800aa08:	0800aab3 	.word	0x0800aab3
 800aa0c:	0800aab3 	.word	0x0800aab3
 800aa10:	0800aab3 	.word	0x0800aab3
 800aa14:	0800aab3 	.word	0x0800aab3
 800aa18:	0800aab3 	.word	0x0800aab3
 800aa1c:	0800aab3 	.word	0x0800aab3
 800aa20:	0800aab3 	.word	0x0800aab3
 800aa24:	0800aab3 	.word	0x0800aab3
 800aa28:	0800aab3 	.word	0x0800aab3
 800aa2c:	0800aab3 	.word	0x0800aab3
 800aa30:	0800aab3 	.word	0x0800aab3
 800aa34:	0800aab3 	.word	0x0800aab3
 800aa38:	0800aab3 	.word	0x0800aab3
 800aa3c:	0800aab3 	.word	0x0800aab3
 800aa40:	0800aab3 	.word	0x0800aab3
 800aa44:	0800aaa5 	.word	0x0800aaa5
 800aa48:	2b40      	cmp	r3, #64	@ 0x40
 800aa4a:	d02e      	beq.n	800aaaa <UART_SetConfig+0xa36>
 800aa4c:	e031      	b.n	800aab2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa4e:	f7fb fe6f 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 800aa52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa54:	e033      	b.n	800aabe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa56:	f7fb fe81 	bl	800675c <HAL_RCC_GetPCLK2Freq>
 800aa5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa5c:	e02f      	b.n	800aabe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fd f8f2 	bl	8007c4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6c:	e027      	b.n	800aabe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa6e:	f107 0318 	add.w	r3, r7, #24
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fd fa3e 	bl	8007ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa7c:	e01f      	b.n	800aabe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa7e:	4b2d      	ldr	r3, [pc, #180]	@ (800ab34 <UART_SetConfig+0xac0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0320 	and.w	r3, r3, #32
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ab34 <UART_SetConfig+0xac0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	4a28      	ldr	r2, [pc, #160]	@ (800ab38 <UART_SetConfig+0xac4>)
 800aa96:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa9c:	e00f      	b.n	800aabe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa9e:	4b26      	ldr	r3, [pc, #152]	@ (800ab38 <UART_SetConfig+0xac4>)
 800aaa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa2:	e00c      	b.n	800aabe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaa4:	4b25      	ldr	r3, [pc, #148]	@ (800ab3c <UART_SetConfig+0xac8>)
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa8:	e009      	b.n	800aabe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e005      	b.n	800aabe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aabc:	bf00      	nop
    }

    if (pclk != 0U)
 800aabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d021      	beq.n	800ab08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab40 <UART_SetConfig+0xacc>)
 800aaca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aace:	461a      	mov	r2, r3
 800aad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	441a      	add	r2, r3
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaea:	2b0f      	cmp	r3, #15
 800aaec:	d909      	bls.n	800ab02 <UART_SetConfig+0xa8e>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaf4:	d205      	bcs.n	800ab02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60da      	str	r2, [r3, #12]
 800ab00:	e002      	b.n	800ab08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2200      	movs	r2, #0
 800ab22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3748      	adds	r7, #72	@ 0x48
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab32:	bf00      	nop
 800ab34:	58024400 	.word	0x58024400
 800ab38:	03d09000 	.word	0x03d09000
 800ab3c:	003d0900 	.word	0x003d0900
 800ab40:	080131f8 	.word	0x080131f8

0800ab44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab50:	f003 0308 	and.w	r3, r3, #8
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00a      	beq.n	800ab6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd8:	f003 0310 	and.w	r3, r3, #16
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01a      	beq.n	800ac5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac42:	d10a      	bne.n	800ac5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	430a      	orrs	r2, r1
 800ac7a:	605a      	str	r2, [r3, #4]
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b098      	sub	sp, #96	@ 0x60
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac98:	f7f7 ffb8 	bl	8002c0c <HAL_GetTick>
 800ac9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d12f      	bne.n	800ad0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acb4:	2200      	movs	r2, #0
 800acb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f88e 	bl	800addc <UART_WaitOnFlagUntilTimeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d022      	beq.n	800ad0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acda:	653b      	str	r3, [r7, #80]	@ 0x50
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ace4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ace6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e6      	bne.n	800acc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e063      	b.n	800add4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d149      	bne.n	800adae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad22:	2200      	movs	r2, #0
 800ad24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f857 	bl	800addc <UART_WaitOnFlagUntilTimeout>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d03c      	beq.n	800adae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	623b      	str	r3, [r7, #32]
   return(result);
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad52:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f023 0301 	bic.w	r3, r3, #1
 800ad7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad86:	61fa      	str	r2, [r7, #28]
 800ad88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	69b9      	ldr	r1, [r7, #24]
 800ad8c:	69fa      	ldr	r2, [r7, #28]
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	617b      	str	r3, [r7, #20]
   return(result);
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e5      	bne.n	800ad66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e012      	b.n	800add4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3758      	adds	r7, #88	@ 0x58
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	603b      	str	r3, [r7, #0]
 800ade8:	4613      	mov	r3, r2
 800adea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adec:	e04f      	b.n	800ae8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d04b      	beq.n	800ae8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adf6:	f7f7 ff09 	bl	8002c0c <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d302      	bcc.n	800ae0c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e04e      	b.n	800aeae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0304 	and.w	r3, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d037      	beq.n	800ae8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b80      	cmp	r3, #128	@ 0x80
 800ae22:	d034      	beq.n	800ae8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b40      	cmp	r3, #64	@ 0x40
 800ae28:	d031      	beq.n	800ae8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b08      	cmp	r3, #8
 800ae36:	d110      	bne.n	800ae5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f839 	bl	800aeb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2208      	movs	r2, #8
 800ae4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e029      	b.n	800aeae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae68:	d111      	bne.n	800ae8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 f81f 	bl	800aeb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e00f      	b.n	800aeae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69da      	ldr	r2, [r3, #28]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4013      	ands	r3, r2
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	bf0c      	ite	eq
 800ae9e:	2301      	moveq	r3, #1
 800aea0:	2300      	movne	r3, #0
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d0a0      	beq.n	800adee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b095      	sub	sp, #84	@ 0x54
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aede:	643b      	str	r3, [r7, #64]	@ 0x40
 800aee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aeec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e6      	bne.n	800aec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3308      	adds	r3, #8
 800aef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	61fb      	str	r3, [r7, #28]
   return(result);
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	4b1e      	ldr	r3, [pc, #120]	@ (800af80 <UART_EndRxTransfer+0xc8>)
 800af06:	4013      	ands	r3, r2
 800af08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3308      	adds	r3, #8
 800af10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e5      	bne.n	800aef2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d118      	bne.n	800af60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f023 0310 	bic.w	r3, r3, #16
 800af42:	647b      	str	r3, [r7, #68]	@ 0x44
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af4c:	61bb      	str	r3, [r7, #24]
 800af4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6979      	ldr	r1, [r7, #20]
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	613b      	str	r3, [r7, #16]
   return(result);
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e6      	bne.n	800af2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2220      	movs	r2, #32
 800af64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af74:	bf00      	nop
 800af76:	3754      	adds	r7, #84	@ 0x54
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	effffffe 	.word	0xeffffffe

0800af84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff f854 	bl	800a048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa0:	bf00      	nop
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	61bb      	str	r3, [r7, #24]
 800afd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	6979      	ldr	r1, [r7, #20]
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	e841 2300 	strex	r3, r2, [r1]
 800afda:	613b      	str	r3, [r7, #16]
   return(result);
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e6      	bne.n	800afb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff f81f 	bl	800a034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aff6:	bf00      	nop
 800aff8:	3720      	adds	r7, #32
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b02e:	bf00      	nop
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b085      	sub	sp, #20
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d101      	bne.n	800b050 <HAL_UARTEx_DisableFifoMode+0x16>
 800b04c:	2302      	movs	r3, #2
 800b04e:	e027      	b.n	800b0a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2224      	movs	r2, #36	@ 0x24
 800b05c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 0201 	bic.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b07e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2220      	movs	r2, #32
 800b092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e02d      	b.n	800b120 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2224      	movs	r2, #36	@ 0x24
 800b0d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f022 0201 	bic.w	r2, r2, #1
 800b0ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f84f 	bl	800b1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2220      	movs	r2, #32
 800b112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d101      	bne.n	800b140 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b13c:	2302      	movs	r3, #2
 800b13e:	e02d      	b.n	800b19c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2224      	movs	r2, #36	@ 0x24
 800b14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0201 	bic.w	r2, r2, #1
 800b166:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	430a      	orrs	r2, r1
 800b17a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f811 	bl	800b1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d108      	bne.n	800b1c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1c4:	e031      	b.n	800b22a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1ca:	2310      	movs	r3, #16
 800b1cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	0e5b      	lsrs	r3, r3, #25
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	f003 0307 	and.w	r3, r3, #7
 800b1dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	0f5b      	lsrs	r3, r3, #29
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	7b3a      	ldrb	r2, [r7, #12]
 800b1f2:	4911      	ldr	r1, [pc, #68]	@ (800b238 <UARTEx_SetNbDataToProcess+0x94>)
 800b1f4:	5c8a      	ldrb	r2, [r1, r2]
 800b1f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1fa:	7b3a      	ldrb	r2, [r7, #12]
 800b1fc:	490f      	ldr	r1, [pc, #60]	@ (800b23c <UARTEx_SetNbDataToProcess+0x98>)
 800b1fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b200:	fb93 f3f2 	sdiv	r3, r3, r2
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	7b7a      	ldrb	r2, [r7, #13]
 800b210:	4909      	ldr	r1, [pc, #36]	@ (800b238 <UARTEx_SetNbDataToProcess+0x94>)
 800b212:	5c8a      	ldrb	r2, [r1, r2]
 800b214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b218:	7b7a      	ldrb	r2, [r7, #13]
 800b21a:	4908      	ldr	r1, [pc, #32]	@ (800b23c <UARTEx_SetNbDataToProcess+0x98>)
 800b21c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b21e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	08013210 	.word	0x08013210
 800b23c:	08013218 	.word	0x08013218

0800b240 <__NVIC_SetPriority>:
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	6039      	str	r1, [r7, #0]
 800b24a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b24c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b250:	2b00      	cmp	r3, #0
 800b252:	db0a      	blt.n	800b26a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	b2da      	uxtb	r2, r3
 800b258:	490c      	ldr	r1, [pc, #48]	@ (800b28c <__NVIC_SetPriority+0x4c>)
 800b25a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b25e:	0112      	lsls	r2, r2, #4
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	440b      	add	r3, r1
 800b264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b268:	e00a      	b.n	800b280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	4908      	ldr	r1, [pc, #32]	@ (800b290 <__NVIC_SetPriority+0x50>)
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	f003 030f 	and.w	r3, r3, #15
 800b276:	3b04      	subs	r3, #4
 800b278:	0112      	lsls	r2, r2, #4
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	440b      	add	r3, r1
 800b27e:	761a      	strb	r2, [r3, #24]
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	e000e100 	.word	0xe000e100
 800b290:	e000ed00 	.word	0xe000ed00

0800b294 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b298:	4b05      	ldr	r3, [pc, #20]	@ (800b2b0 <SysTick_Handler+0x1c>)
 800b29a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b29c:	f001 ff06 	bl	800d0ac <xTaskGetSchedulerState>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d001      	beq.n	800b2aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b2a6:	f002 fcff 	bl	800dca8 <xPortSysTickHandler>
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	e000e010 	.word	0xe000e010

0800b2b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	f06f 0004 	mvn.w	r0, #4
 800b2be:	f7ff ffbf 	bl	800b240 <__NVIC_SetPriority>
#endif
}
 800b2c2:	bf00      	nop
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2ce:	f3ef 8305 	mrs	r3, IPSR
 800b2d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b2d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b2da:	f06f 0305 	mvn.w	r3, #5
 800b2de:	607b      	str	r3, [r7, #4]
 800b2e0:	e00c      	b.n	800b2fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b30c <osKernelInitialize+0x44>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b2ea:	4b08      	ldr	r3, [pc, #32]	@ (800b30c <osKernelInitialize+0x44>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	607b      	str	r3, [r7, #4]
 800b2f4:	e002      	b.n	800b2fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2fc:	687b      	ldr	r3, [r7, #4]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	24000474 	.word	0x24000474

0800b310 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b316:	f3ef 8305 	mrs	r3, IPSR
 800b31a:	603b      	str	r3, [r7, #0]
  return(result);
 800b31c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b322:	f06f 0305 	mvn.w	r3, #5
 800b326:	607b      	str	r3, [r7, #4]
 800b328:	e010      	b.n	800b34c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b32a:	4b0b      	ldr	r3, [pc, #44]	@ (800b358 <osKernelStart+0x48>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d109      	bne.n	800b346 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b332:	f7ff ffbf 	bl	800b2b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b336:	4b08      	ldr	r3, [pc, #32]	@ (800b358 <osKernelStart+0x48>)
 800b338:	2202      	movs	r2, #2
 800b33a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b33c:	f001 fa68 	bl	800c810 <vTaskStartScheduler>
      stat = osOK;
 800b340:	2300      	movs	r3, #0
 800b342:	607b      	str	r3, [r7, #4]
 800b344:	e002      	b.n	800b34c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b346:	f04f 33ff 	mov.w	r3, #4294967295
 800b34a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b34c:	687b      	ldr	r3, [r7, #4]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	24000474 	.word	0x24000474

0800b35c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08e      	sub	sp, #56	@ 0x38
 800b360:	af04      	add	r7, sp, #16
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b36c:	f3ef 8305 	mrs	r3, IPSR
 800b370:	617b      	str	r3, [r7, #20]
  return(result);
 800b372:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b374:	2b00      	cmp	r3, #0
 800b376:	d17e      	bne.n	800b476 <osThreadNew+0x11a>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d07b      	beq.n	800b476 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b37e:	2380      	movs	r3, #128	@ 0x80
 800b380:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b382:	2318      	movs	r3, #24
 800b384:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b38a:	f04f 33ff 	mov.w	r3, #4294967295
 800b38e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d045      	beq.n	800b422 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <osThreadNew+0x48>
        name = attr->name;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d008      	beq.n	800b3ca <osThreadNew+0x6e>
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b38      	cmp	r3, #56	@ 0x38
 800b3bc:	d805      	bhi.n	800b3ca <osThreadNew+0x6e>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <osThreadNew+0x72>
        return (NULL);
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e054      	b.n	800b478 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	089b      	lsrs	r3, r3, #2
 800b3dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00e      	beq.n	800b404 <osThreadNew+0xa8>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	2b5b      	cmp	r3, #91	@ 0x5b
 800b3ec:	d90a      	bls.n	800b404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d006      	beq.n	800b404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <osThreadNew+0xa8>
        mem = 1;
 800b3fe:	2301      	movs	r3, #1
 800b400:	61bb      	str	r3, [r7, #24]
 800b402:	e010      	b.n	800b426 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10c      	bne.n	800b426 <osThreadNew+0xca>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d108      	bne.n	800b426 <osThreadNew+0xca>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d104      	bne.n	800b426 <osThreadNew+0xca>
          mem = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	61bb      	str	r3, [r7, #24]
 800b420:	e001      	b.n	800b426 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d110      	bne.n	800b44e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b434:	9202      	str	r2, [sp, #8]
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6a3a      	ldr	r2, [r7, #32]
 800b440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f001 f808 	bl	800c458 <xTaskCreateStatic>
 800b448:	4603      	mov	r3, r0
 800b44a:	613b      	str	r3, [r7, #16]
 800b44c:	e013      	b.n	800b476 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d110      	bne.n	800b476 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	b29a      	uxth	r2, r3
 800b458:	f107 0310 	add.w	r3, r7, #16
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f001 f856 	bl	800c518 <xTaskCreate>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d001      	beq.n	800b476 <osThreadNew+0x11a>
            hTask = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b476:	693b      	ldr	r3, [r7, #16]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3728      	adds	r7, #40	@ 0x28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b488:	f3ef 8305 	mrs	r3, IPSR
 800b48c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b48e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <osDelay+0x1c>
    stat = osErrorISR;
 800b494:	f06f 0305 	mvn.w	r3, #5
 800b498:	60fb      	str	r3, [r7, #12]
 800b49a:	e007      	b.n	800b4ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <osDelay+0x2c>
      vTaskDelay(ticks);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f001 f97c 	bl	800c7a4 <vTaskDelay>
    }
  }

  return (stat);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b08a      	sub	sp, #40	@ 0x28
 800b4ba:	af02      	add	r7, sp, #8
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	60b9      	str	r1, [r7, #8]
 800b4c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4c6:	f3ef 8305 	mrs	r3, IPSR
 800b4ca:	613b      	str	r3, [r7, #16]
  return(result);
 800b4cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d15f      	bne.n	800b592 <osMessageQueueNew+0xdc>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d05c      	beq.n	800b592 <osMessageQueueNew+0xdc>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d059      	beq.n	800b592 <osMessageQueueNew+0xdc>
    mem = -1;
 800b4de:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d029      	beq.n	800b53e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d012      	beq.n	800b518 <osMessageQueueNew+0x62>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	2b4f      	cmp	r3, #79	@ 0x4f
 800b4f8:	d90e      	bls.n	800b518 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	695a      	ldr	r2, [r3, #20]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	68b9      	ldr	r1, [r7, #8]
 800b50a:	fb01 f303 	mul.w	r3, r1, r3
 800b50e:	429a      	cmp	r2, r3
 800b510:	d302      	bcc.n	800b518 <osMessageQueueNew+0x62>
        mem = 1;
 800b512:	2301      	movs	r3, #1
 800b514:	61bb      	str	r3, [r7, #24]
 800b516:	e014      	b.n	800b542 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d110      	bne.n	800b542 <osMessageQueueNew+0x8c>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10c      	bne.n	800b542 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d108      	bne.n	800b542 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <osMessageQueueNew+0x8c>
          mem = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	e001      	b.n	800b542 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d10b      	bne.n	800b560 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691a      	ldr	r2, [r3, #16]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2100      	movs	r1, #0
 800b552:	9100      	str	r1, [sp, #0]
 800b554:	68b9      	ldr	r1, [r7, #8]
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fa30 	bl	800b9bc <xQueueGenericCreateStatic>
 800b55c:	61f8      	str	r0, [r7, #28]
 800b55e:	e008      	b.n	800b572 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d105      	bne.n	800b572 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b566:	2200      	movs	r2, #0
 800b568:	68b9      	ldr	r1, [r7, #8]
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 faa3 	bl	800bab6 <xQueueGenericCreate>
 800b570:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00c      	beq.n	800b592 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	e001      	b.n	800b58a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b58a:	6979      	ldr	r1, [r7, #20]
 800b58c:	69f8      	ldr	r0, [r7, #28]
 800b58e:	f000 ff05 	bl	800c39c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b592:	69fb      	ldr	r3, [r7, #28]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5b4:	f3ef 8305 	mrs	r3, IPSR
 800b5b8:	617b      	str	r3, [r7, #20]
  return(result);
 800b5ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d028      	beq.n	800b612 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d005      	beq.n	800b5d2 <osMessageQueuePut+0x36>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <osMessageQueuePut+0x36>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b5d2:	f06f 0303 	mvn.w	r3, #3
 800b5d6:	61fb      	str	r3, [r7, #28]
 800b5d8:	e038      	b.n	800b64c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b5de:	f107 0210 	add.w	r2, r7, #16
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	68b9      	ldr	r1, [r7, #8]
 800b5e6:	69b8      	ldr	r0, [r7, #24]
 800b5e8:	f000 fbc6 	bl	800bd78 <xQueueGenericSendFromISR>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d003      	beq.n	800b5fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b5f2:	f06f 0302 	mvn.w	r3, #2
 800b5f6:	61fb      	str	r3, [r7, #28]
 800b5f8:	e028      	b.n	800b64c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d025      	beq.n	800b64c <osMessageQueuePut+0xb0>
 800b600:	4b15      	ldr	r3, [pc, #84]	@ (800b658 <osMessageQueuePut+0xbc>)
 800b602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	e01c      	b.n	800b64c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <osMessageQueuePut+0x82>
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d103      	bne.n	800b626 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b61e:	f06f 0303 	mvn.w	r3, #3
 800b622:	61fb      	str	r3, [r7, #28]
 800b624:	e012      	b.n	800b64c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b626:	2300      	movs	r3, #0
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	69b8      	ldr	r0, [r7, #24]
 800b62e:	f000 faa1 	bl	800bb74 <xQueueGenericSend>
 800b632:	4603      	mov	r3, r0
 800b634:	2b01      	cmp	r3, #1
 800b636:	d009      	beq.n	800b64c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b63e:	f06f 0301 	mvn.w	r3, #1
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	e002      	b.n	800b64c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b646:	f06f 0302 	mvn.w	r3, #2
 800b64a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b64c:	69fb      	ldr	r3, [r7, #28]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3720      	adds	r7, #32
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b66e:	2300      	movs	r3, #0
 800b670:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b672:	f3ef 8305 	mrs	r3, IPSR
 800b676:	617b      	str	r3, [r7, #20]
  return(result);
 800b678:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d028      	beq.n	800b6d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <osMessageQueueGet+0x34>
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <osMessageQueueGet+0x34>
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b690:	f06f 0303 	mvn.w	r3, #3
 800b694:	61fb      	str	r3, [r7, #28]
 800b696:	e037      	b.n	800b708 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b698:	2300      	movs	r3, #0
 800b69a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b69c:	f107 0310 	add.w	r3, r7, #16
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	69b8      	ldr	r0, [r7, #24]
 800b6a6:	f000 fce7 	bl	800c078 <xQueueReceiveFromISR>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d003      	beq.n	800b6b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b6b0:	f06f 0302 	mvn.w	r3, #2
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	e027      	b.n	800b708 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d024      	beq.n	800b708 <osMessageQueueGet+0xac>
 800b6be:	4b15      	ldr	r3, [pc, #84]	@ (800b714 <osMessageQueueGet+0xb8>)
 800b6c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	e01b      	b.n	800b708 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <osMessageQueueGet+0x80>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d103      	bne.n	800b6e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b6dc:	f06f 0303 	mvn.w	r3, #3
 800b6e0:	61fb      	str	r3, [r7, #28]
 800b6e2:	e011      	b.n	800b708 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	69b8      	ldr	r0, [r7, #24]
 800b6ea:	f000 fbe3 	bl	800beb4 <xQueueReceive>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d009      	beq.n	800b708 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b6fa:	f06f 0301 	mvn.w	r3, #1
 800b6fe:	61fb      	str	r3, [r7, #28]
 800b700:	e002      	b.n	800b708 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b702:	f06f 0302 	mvn.w	r3, #2
 800b706:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b708:	69fb      	ldr	r3, [r7, #28]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3720      	adds	r7, #32
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	e000ed04 	.word	0xe000ed04

0800b718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	4a07      	ldr	r2, [pc, #28]	@ (800b744 <vApplicationGetIdleTaskMemory+0x2c>)
 800b728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	4a06      	ldr	r2, [pc, #24]	@ (800b748 <vApplicationGetIdleTaskMemory+0x30>)
 800b72e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2280      	movs	r2, #128	@ 0x80
 800b734:	601a      	str	r2, [r3, #0]
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	24000478 	.word	0x24000478
 800b748:	240004d4 	.word	0x240004d4

0800b74c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4a07      	ldr	r2, [pc, #28]	@ (800b778 <vApplicationGetTimerTaskMemory+0x2c>)
 800b75c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	4a06      	ldr	r2, [pc, #24]	@ (800b77c <vApplicationGetTimerTaskMemory+0x30>)
 800b762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b76a:	601a      	str	r2, [r3, #0]
}
 800b76c:	bf00      	nop
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	240006d4 	.word	0x240006d4
 800b77c:	24000730 	.word	0x24000730

0800b780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f103 0208 	add.w	r2, r3, #8
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f04f 32ff 	mov.w	r2, #4294967295
 800b798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f103 0208 	add.w	r2, r3, #8
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f103 0208 	add.w	r2, r3, #8
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b085      	sub	sp, #20
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	689a      	ldr	r2, [r3, #8]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	601a      	str	r2, [r3, #0]
}
 800b816:	bf00      	nop
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b822:	b480      	push	{r7}
 800b824:	b085      	sub	sp, #20
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d103      	bne.n	800b842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	60fb      	str	r3, [r7, #12]
 800b840:	e00c      	b.n	800b85c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3308      	adds	r3, #8
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	e002      	b.n	800b850 <vListInsert+0x2e>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d2f6      	bcs.n	800b84a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	601a      	str	r2, [r3, #0]
}
 800b888:	bf00      	nop
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	6892      	ldr	r2, [r2, #8]
 800b8aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6852      	ldr	r2, [r2, #4]
 800b8b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d103      	bne.n	800b8c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	1e5a      	subs	r2, r3, #1
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10b      	bne.n	800b914 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b90e:	bf00      	nop
 800b910:	bf00      	nop
 800b912:	e7fd      	b.n	800b910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b914:	f002 f938 	bl	800db88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b920:	68f9      	ldr	r1, [r7, #12]
 800b922:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b924:	fb01 f303 	mul.w	r3, r1, r3
 800b928:	441a      	add	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b944:	3b01      	subs	r3, #1
 800b946:	68f9      	ldr	r1, [r7, #12]
 800b948:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b94a:	fb01 f303 	mul.w	r3, r1, r3
 800b94e:	441a      	add	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	22ff      	movs	r2, #255	@ 0xff
 800b958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	22ff      	movs	r2, #255	@ 0xff
 800b960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d114      	bne.n	800b994 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d01a      	beq.n	800b9a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3310      	adds	r3, #16
 800b976:	4618      	mov	r0, r3
 800b978:	f001 f9d8 	bl	800cd2c <xTaskRemoveFromEventList>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d012      	beq.n	800b9a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <xQueueGenericReset+0xd0>)
 800b984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	e009      	b.n	800b9a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3310      	adds	r3, #16
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff fef1 	bl	800b780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3324      	adds	r3, #36	@ 0x24
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff feec 	bl	800b780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9a8:	f002 f920 	bl	800dbec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9ac:	2301      	movs	r3, #1
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08e      	sub	sp, #56	@ 0x38
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10b      	bne.n	800b9e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10b      	bne.n	800ba06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	e7fd      	b.n	800ba02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <xQueueGenericCreateStatic+0x56>
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <xQueueGenericCreateStatic+0x5a>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e000      	b.n	800ba18 <xQueueGenericCreateStatic+0x5c>
 800ba16:	2300      	movs	r3, #0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10b      	bne.n	800ba34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	623b      	str	r3, [r7, #32]
}
 800ba2e:	bf00      	nop
 800ba30:	bf00      	nop
 800ba32:	e7fd      	b.n	800ba30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <xQueueGenericCreateStatic+0x84>
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <xQueueGenericCreateStatic+0x88>
 800ba40:	2301      	movs	r3, #1
 800ba42:	e000      	b.n	800ba46 <xQueueGenericCreateStatic+0x8a>
 800ba44:	2300      	movs	r3, #0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	61fb      	str	r3, [r7, #28]
}
 800ba5c:	bf00      	nop
 800ba5e:	bf00      	nop
 800ba60:	e7fd      	b.n	800ba5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba62:	2350      	movs	r3, #80	@ 0x50
 800ba64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2b50      	cmp	r3, #80	@ 0x50
 800ba6a:	d00b      	beq.n	800ba84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	61bb      	str	r3, [r7, #24]
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	e7fd      	b.n	800ba80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ba8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00d      	beq.n	800baac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	4613      	mov	r3, r2
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f840 	bl	800bb2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800baac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800baae:	4618      	mov	r0, r3
 800bab0:	3730      	adds	r7, #48	@ 0x30
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b08a      	sub	sp, #40	@ 0x28
 800baba:	af02      	add	r7, sp, #8
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	60b9      	str	r1, [r7, #8]
 800bac0:	4613      	mov	r3, r2
 800bac2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10b      	bne.n	800bae2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	613b      	str	r3, [r7, #16]
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	e7fd      	b.n	800bade <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	fb02 f303 	mul.w	r3, r2, r3
 800baea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	3350      	adds	r3, #80	@ 0x50
 800baf0:	4618      	mov	r0, r3
 800baf2:	f002 f96b 	bl	800ddcc <pvPortMalloc>
 800baf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d011      	beq.n	800bb22 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	3350      	adds	r3, #80	@ 0x50
 800bb06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb10:	79fa      	ldrb	r2, [r7, #7]
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	4613      	mov	r3, r2
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f805 	bl	800bb2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb22:	69bb      	ldr	r3, [r7, #24]
	}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d103      	bne.n	800bb48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e002      	b.n	800bb4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	69b8      	ldr	r0, [r7, #24]
 800bb5e:	f7ff fec3 	bl	800b8e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	78fa      	ldrb	r2, [r7, #3]
 800bb66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb6a:	bf00      	nop
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08e      	sub	sp, #56	@ 0x38
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb82:	2300      	movs	r3, #0
 800bb84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10b      	bne.n	800bba8 <xQueueGenericSend+0x34>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d103      	bne.n	800bbb6 <xQueueGenericSend+0x42>
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <xQueueGenericSend+0x46>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <xQueueGenericSend+0x48>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10b      	bne.n	800bbd8 <xQueueGenericSend+0x64>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bbd2:	bf00      	nop
 800bbd4:	bf00      	nop
 800bbd6:	e7fd      	b.n	800bbd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d103      	bne.n	800bbe6 <xQueueGenericSend+0x72>
 800bbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d101      	bne.n	800bbea <xQueueGenericSend+0x76>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <xQueueGenericSend+0x78>
 800bbea:	2300      	movs	r3, #0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10b      	bne.n	800bc08 <xQueueGenericSend+0x94>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	623b      	str	r3, [r7, #32]
}
 800bc02:	bf00      	nop
 800bc04:	bf00      	nop
 800bc06:	e7fd      	b.n	800bc04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc08:	f001 fa50 	bl	800d0ac <xTaskGetSchedulerState>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d102      	bne.n	800bc18 <xQueueGenericSend+0xa4>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <xQueueGenericSend+0xa8>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e000      	b.n	800bc1e <xQueueGenericSend+0xaa>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <xQueueGenericSend+0xc6>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	61fb      	str	r3, [r7, #28]
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc3a:	f001 ffa5 	bl	800db88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d302      	bcc.n	800bc50 <xQueueGenericSend+0xdc>
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d129      	bne.n	800bca4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc56:	f000 fa91 	bl	800c17c <prvCopyDataToQueue>
 800bc5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d010      	beq.n	800bc86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc66:	3324      	adds	r3, #36	@ 0x24
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f001 f85f 	bl	800cd2c <xTaskRemoveFromEventList>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d013      	beq.n	800bc9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc74:	4b3f      	ldr	r3, [pc, #252]	@ (800bd74 <xQueueGenericSend+0x200>)
 800bc76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	e00a      	b.n	800bc9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc8c:	4b39      	ldr	r3, [pc, #228]	@ (800bd74 <xQueueGenericSend+0x200>)
 800bc8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc9c:	f001 ffa6 	bl	800dbec <vPortExitCritical>
				return pdPASS;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e063      	b.n	800bd6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcaa:	f001 ff9f 	bl	800dbec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e05c      	b.n	800bd6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcb8:	f107 0314 	add.w	r3, r7, #20
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 f899 	bl	800cdf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcc6:	f001 ff91 	bl	800dbec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcca:	f000 fe09 	bl	800c8e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcce:	f001 ff5b 	bl	800db88 <vPortEnterCritical>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcd8:	b25b      	sxtb	r3, r3
 800bcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcde:	d103      	bne.n	800bce8 <xQueueGenericSend+0x174>
 800bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcee:	b25b      	sxtb	r3, r3
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf4:	d103      	bne.n	800bcfe <xQueueGenericSend+0x18a>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bcfe:	f001 ff75 	bl	800dbec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd02:	1d3a      	adds	r2, r7, #4
 800bd04:	f107 0314 	add.w	r3, r7, #20
 800bd08:	4611      	mov	r1, r2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 f888 	bl	800ce20 <xTaskCheckForTimeOut>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d124      	bne.n	800bd60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd18:	f000 fb28 	bl	800c36c <prvIsQueueFull>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d018      	beq.n	800bd54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd24:	3310      	adds	r3, #16
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 ffac 	bl	800cc88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd32:	f000 fab3 	bl	800c29c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd36:	f000 fde1 	bl	800c8fc <xTaskResumeAll>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f47f af7c 	bne.w	800bc3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bd42:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <xQueueGenericSend+0x200>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	e772      	b.n	800bc3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd56:	f000 faa1 	bl	800c29c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd5a:	f000 fdcf 	bl	800c8fc <xTaskResumeAll>
 800bd5e:	e76c      	b.n	800bc3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd62:	f000 fa9b 	bl	800c29c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd66:	f000 fdc9 	bl	800c8fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3738      	adds	r7, #56	@ 0x38
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	e000ed04 	.word	0xe000ed04

0800bd78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b090      	sub	sp, #64	@ 0x40
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10b      	bne.n	800bda8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bda2:	bf00      	nop
 800bda4:	bf00      	nop
 800bda6:	e7fd      	b.n	800bda4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d103      	bne.n	800bdb6 <xQueueGenericSendFromISR+0x3e>
 800bdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <xQueueGenericSendFromISR+0x42>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e000      	b.n	800bdbc <xQueueGenericSendFromISR+0x44>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10b      	bne.n	800bdd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSendFromISR+0x6e>
 800bdde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <xQueueGenericSendFromISR+0x72>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <xQueueGenericSendFromISR+0x74>
 800bdea:	2300      	movs	r3, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10b      	bne.n	800be08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	623b      	str	r3, [r7, #32]
}
 800be02:	bf00      	nop
 800be04:	bf00      	nop
 800be06:	e7fd      	b.n	800be04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be08:	f001 ff9e 	bl	800dd48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be0c:	f3ef 8211 	mrs	r2, BASEPRI
 800be10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	61fa      	str	r2, [r7, #28]
 800be22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be30:	429a      	cmp	r2, r3
 800be32:	d302      	bcc.n	800be3a <xQueueGenericSendFromISR+0xc2>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2b02      	cmp	r3, #2
 800be38:	d12f      	bne.n	800be9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800be50:	f000 f994 	bl	800c17c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800be58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5c:	d112      	bne.n	800be84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	d016      	beq.n	800be94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be68:	3324      	adds	r3, #36	@ 0x24
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 ff5e 	bl	800cd2c <xTaskRemoveFromEventList>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00e      	beq.n	800be94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	601a      	str	r2, [r3, #0]
 800be82:	e007      	b.n	800be94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800be88:	3301      	adds	r3, #1
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	b25a      	sxtb	r2, r3
 800be8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800be94:	2301      	movs	r3, #1
 800be96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800be98:	e001      	b.n	800be9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bea0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bea8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800beac:	4618      	mov	r0, r3
 800beae:	3740      	adds	r7, #64	@ 0x40
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08c      	sub	sp, #48	@ 0x30
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10b      	bne.n	800bee6 <xQueueReceive+0x32>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	623b      	str	r3, [r7, #32]
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	e7fd      	b.n	800bee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d103      	bne.n	800bef4 <xQueueReceive+0x40>
 800beec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <xQueueReceive+0x44>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e000      	b.n	800befa <xQueueReceive+0x46>
 800bef8:	2300      	movs	r3, #0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10b      	bne.n	800bf16 <xQueueReceive+0x62>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	61fb      	str	r3, [r7, #28]
}
 800bf10:	bf00      	nop
 800bf12:	bf00      	nop
 800bf14:	e7fd      	b.n	800bf12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf16:	f001 f8c9 	bl	800d0ac <xTaskGetSchedulerState>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <xQueueReceive+0x72>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <xQueueReceive+0x76>
 800bf26:	2301      	movs	r3, #1
 800bf28:	e000      	b.n	800bf2c <xQueueReceive+0x78>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10b      	bne.n	800bf48 <xQueueReceive+0x94>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	61bb      	str	r3, [r7, #24]
}
 800bf42:	bf00      	nop
 800bf44:	bf00      	nop
 800bf46:	e7fd      	b.n	800bf44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf48:	f001 fe1e 	bl	800db88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01f      	beq.n	800bf98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf58:	68b9      	ldr	r1, [r7, #8]
 800bf5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf5c:	f000 f978 	bl	800c250 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf62:	1e5a      	subs	r2, r3, #1
 800bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00f      	beq.n	800bf90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf72:	3310      	adds	r3, #16
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 fed9 	bl	800cd2c <xTaskRemoveFromEventList>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d007      	beq.n	800bf90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf80:	4b3c      	ldr	r3, [pc, #240]	@ (800c074 <xQueueReceive+0x1c0>)
 800bf82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf90:	f001 fe2c 	bl	800dbec <vPortExitCritical>
				return pdPASS;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e069      	b.n	800c06c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d103      	bne.n	800bfa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf9e:	f001 fe25 	bl	800dbec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e062      	b.n	800c06c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d106      	bne.n	800bfba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfac:	f107 0310 	add.w	r3, r7, #16
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 ff1f 	bl	800cdf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfba:	f001 fe17 	bl	800dbec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfbe:	f000 fc8f 	bl	800c8e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfc2:	f001 fde1 	bl	800db88 <vPortEnterCritical>
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bfcc:	b25b      	sxtb	r3, r3
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	d103      	bne.n	800bfdc <xQueueReceive+0x128>
 800bfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfe2:	b25b      	sxtb	r3, r3
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe8:	d103      	bne.n	800bff2 <xQueueReceive+0x13e>
 800bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bff2:	f001 fdfb 	bl	800dbec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bff6:	1d3a      	adds	r2, r7, #4
 800bff8:	f107 0310 	add.w	r3, r7, #16
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 ff0e 	bl	800ce20 <xTaskCheckForTimeOut>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d123      	bne.n	800c052 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c00a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c00c:	f000 f998 	bl	800c340 <prvIsQueueEmpty>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d017      	beq.n	800c046 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c018:	3324      	adds	r3, #36	@ 0x24
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 fe32 	bl	800cc88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c026:	f000 f939 	bl	800c29c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c02a:	f000 fc67 	bl	800c8fc <xTaskResumeAll>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d189      	bne.n	800bf48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c034:	4b0f      	ldr	r3, [pc, #60]	@ (800c074 <xQueueReceive+0x1c0>)
 800c036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	e780      	b.n	800bf48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c048:	f000 f928 	bl	800c29c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c04c:	f000 fc56 	bl	800c8fc <xTaskResumeAll>
 800c050:	e77a      	b.n	800bf48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c054:	f000 f922 	bl	800c29c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c058:	f000 fc50 	bl	800c8fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c05c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c05e:	f000 f96f 	bl	800c340 <prvIsQueueEmpty>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	f43f af6f 	beq.w	800bf48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c06a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3730      	adds	r7, #48	@ 0x30
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	e000ed04 	.word	0xe000ed04

0800c078 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08e      	sub	sp, #56	@ 0x38
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10b      	bne.n	800c0a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	623b      	str	r3, [r7, #32]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d103      	bne.n	800c0b4 <xQueueReceiveFromISR+0x3c>
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <xQueueReceiveFromISR+0x40>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <xQueueReceiveFromISR+0x42>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10b      	bne.n	800c0d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	61fb      	str	r3, [r7, #28]
}
 800c0d0:	bf00      	nop
 800c0d2:	bf00      	nop
 800c0d4:	e7fd      	b.n	800c0d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d6:	f001 fe37 	bl	800dd48 <vPortValidateInterruptPriority>
	__asm volatile
 800c0da:	f3ef 8211 	mrs	r2, BASEPRI
 800c0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	61ba      	str	r2, [r7, #24]
 800c0f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d02f      	beq.n	800c162 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c10c:	68b9      	ldr	r1, [r7, #8]
 800c10e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c110:	f000 f89e 	bl	800c250 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c116:	1e5a      	subs	r2, r3, #1
 800c118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c11c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c124:	d112      	bne.n	800c14c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d016      	beq.n	800c15c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c130:	3310      	adds	r3, #16
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fdfa 	bl	800cd2c <xTaskRemoveFromEventList>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00e      	beq.n	800c15c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00b      	beq.n	800c15c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	e007      	b.n	800c15c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c14c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c150:	3301      	adds	r3, #1
 800c152:	b2db      	uxtb	r3, r3
 800c154:	b25a      	sxtb	r2, r3
 800c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c15c:	2301      	movs	r3, #1
 800c15e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c160:	e001      	b.n	800c166 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c162:	2300      	movs	r3, #0
 800c164:	637b      	str	r3, [r7, #52]	@ 0x34
 800c166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c168:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f383 8811 	msr	BASEPRI, r3
}
 800c170:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c174:	4618      	mov	r0, r3
 800c176:	3738      	adds	r7, #56	@ 0x38
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c188:	2300      	movs	r3, #0
 800c18a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c190:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10d      	bne.n	800c1b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d14d      	bne.n	800c23e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 ff9e 	bl	800d0e8 <xTaskPriorityDisinherit>
 800c1ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	609a      	str	r2, [r3, #8]
 800c1b4:	e043      	b.n	800c23e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d119      	bne.n	800c1f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6858      	ldr	r0, [r3, #4]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	68b9      	ldr	r1, [r7, #8]
 800c1c8:	f003 ffd5 	bl	8010176 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d4:	441a      	add	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	685a      	ldr	r2, [r3, #4]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d32b      	bcc.n	800c23e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	605a      	str	r2, [r3, #4]
 800c1ee:	e026      	b.n	800c23e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68d8      	ldr	r0, [r3, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	68b9      	ldr	r1, [r7, #8]
 800c1fc:	f003 ffbb 	bl	8010176 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	68da      	ldr	r2, [r3, #12]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c208:	425b      	negs	r3, r3
 800c20a:	441a      	add	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	68da      	ldr	r2, [r3, #12]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d207      	bcs.n	800c22c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c224:	425b      	negs	r3, r3
 800c226:	441a      	add	r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d105      	bne.n	800c23e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	3b01      	subs	r3, #1
 800c23c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c246:	697b      	ldr	r3, [r7, #20]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d018      	beq.n	800c294 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c26a:	441a      	add	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d303      	bcc.n	800c284 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	68d9      	ldr	r1, [r3, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c28c:	461a      	mov	r2, r3
 800c28e:	6838      	ldr	r0, [r7, #0]
 800c290:	f003 ff71 	bl	8010176 <memcpy>
	}
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2a4:	f001 fc70 	bl	800db88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2b0:	e011      	b.n	800c2d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d012      	beq.n	800c2e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3324      	adds	r3, #36	@ 0x24
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 fd34 	bl	800cd2c <xTaskRemoveFromEventList>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2ca:	f000 fe0d 	bl	800cee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dce9      	bgt.n	800c2b2 <prvUnlockQueue+0x16>
 800c2de:	e000      	b.n	800c2e2 <prvUnlockQueue+0x46>
					break;
 800c2e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	22ff      	movs	r2, #255	@ 0xff
 800c2e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c2ea:	f001 fc7f 	bl	800dbec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2ee:	f001 fc4b 	bl	800db88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2fa:	e011      	b.n	800c320 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d012      	beq.n	800c32a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3310      	adds	r3, #16
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 fd0f 	bl	800cd2c <xTaskRemoveFromEventList>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c314:	f000 fde8 	bl	800cee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c324:	2b00      	cmp	r3, #0
 800c326:	dce9      	bgt.n	800c2fc <prvUnlockQueue+0x60>
 800c328:	e000      	b.n	800c32c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c32a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	22ff      	movs	r2, #255	@ 0xff
 800c330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c334:	f001 fc5a 	bl	800dbec <vPortExitCritical>
}
 800c338:	bf00      	nop
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c348:	f001 fc1e 	bl	800db88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c354:	2301      	movs	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	e001      	b.n	800c35e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c35e:	f001 fc45 	bl	800dbec <vPortExitCritical>

	return xReturn;
 800c362:	68fb      	ldr	r3, [r7, #12]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c374:	f001 fc08 	bl	800db88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c380:	429a      	cmp	r2, r3
 800c382:	d102      	bne.n	800c38a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c384:	2301      	movs	r3, #1
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	e001      	b.n	800c38e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c38e:	f001 fc2d 	bl	800dbec <vPortExitCritical>

	return xReturn;
 800c392:	68fb      	ldr	r3, [r7, #12]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	e014      	b.n	800c3d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3ac:	4a0f      	ldr	r2, [pc, #60]	@ (800c3ec <vQueueAddToRegistry+0x50>)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10b      	bne.n	800c3d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3b8:	490c      	ldr	r1, [pc, #48]	@ (800c3ec <vQueueAddToRegistry+0x50>)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3c2:	4a0a      	ldr	r2, [pc, #40]	@ (800c3ec <vQueueAddToRegistry+0x50>)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	4413      	add	r3, r2
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3ce:	e006      	b.n	800c3de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	60fb      	str	r3, [r7, #12]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2b07      	cmp	r3, #7
 800c3da:	d9e7      	bls.n	800c3ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3dc:	bf00      	nop
 800c3de:	bf00      	nop
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	24000b30 	.word	0x24000b30

0800c3f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c400:	f001 fbc2 	bl	800db88 <vPortEnterCritical>
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c40a:	b25b      	sxtb	r3, r3
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d103      	bne.n	800c41a <vQueueWaitForMessageRestricted+0x2a>
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c420:	b25b      	sxtb	r3, r3
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d103      	bne.n	800c430 <vQueueWaitForMessageRestricted+0x40>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c430:	f001 fbdc 	bl	800dbec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d106      	bne.n	800c44a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	3324      	adds	r3, #36	@ 0x24
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	4618      	mov	r0, r3
 800c446:	f000 fc45 	bl	800ccd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c44a:	6978      	ldr	r0, [r7, #20]
 800c44c:	f7ff ff26 	bl	800c29c <prvUnlockQueue>
	}
 800c450:	bf00      	nop
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08e      	sub	sp, #56	@ 0x38
 800c45c:	af04      	add	r7, sp, #16
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10b      	bne.n	800c484 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	623b      	str	r3, [r7, #32]
}
 800c47e:	bf00      	nop
 800c480:	bf00      	nop
 800c482:	e7fd      	b.n	800c480 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10b      	bne.n	800c4a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	61fb      	str	r3, [r7, #28]
}
 800c49c:	bf00      	nop
 800c49e:	bf00      	nop
 800c4a0:	e7fd      	b.n	800c49e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4a2:	235c      	movs	r3, #92	@ 0x5c
 800c4a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c4aa:	d00b      	beq.n	800c4c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	61bb      	str	r3, [r7, #24]
}
 800c4be:	bf00      	nop
 800c4c0:	bf00      	nop
 800c4c2:	e7fd      	b.n	800c4c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01e      	beq.n	800c50a <xTaskCreateStatic+0xb2>
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01b      	beq.n	800c50a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9303      	str	r3, [sp, #12]
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	9302      	str	r3, [sp, #8]
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f000 f850 	bl	800c5a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c504:	f000 f8de 	bl	800c6c4 <prvAddNewTaskToReadyList>
 800c508:	e001      	b.n	800c50e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c50e:	697b      	ldr	r3, [r7, #20]
	}
 800c510:	4618      	mov	r0, r3
 800c512:	3728      	adds	r7, #40	@ 0x28
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08c      	sub	sp, #48	@ 0x30
 800c51c:	af04      	add	r7, sp, #16
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	4613      	mov	r3, r2
 800c526:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f001 fc4d 	bl	800ddcc <pvPortMalloc>
 800c532:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00e      	beq.n	800c558 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c53a:	205c      	movs	r0, #92	@ 0x5c
 800c53c:	f001 fc46 	bl	800ddcc <pvPortMalloc>
 800c540:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c54e:	e005      	b.n	800c55c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c550:	6978      	ldr	r0, [r7, #20]
 800c552:	f001 fd09 	bl	800df68 <vPortFree>
 800c556:	e001      	b.n	800c55c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d017      	beq.n	800c592 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c56a:	88fa      	ldrh	r2, [r7, #6]
 800c56c:	2300      	movs	r3, #0
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	9302      	str	r3, [sp, #8]
 800c574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f000 f80e 	bl	800c5a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c586:	69f8      	ldr	r0, [r7, #28]
 800c588:	f000 f89c 	bl	800c6c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c58c:	2301      	movs	r3, #1
 800c58e:	61bb      	str	r3, [r7, #24]
 800c590:	e002      	b.n	800c598 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c592:	f04f 33ff 	mov.w	r3, #4294967295
 800c596:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c598:	69bb      	ldr	r3, [r7, #24]
	}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b088      	sub	sp, #32
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	60f8      	str	r0, [r7, #12]
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	21a5      	movs	r1, #165	@ 0xa5
 800c5bc:	f003 fd3a 	bl	8010034 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c5ca:	440b      	add	r3, r1
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	f023 0307 	bic.w	r3, r3, #7
 800c5d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	f003 0307 	and.w	r3, r3, #7
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00b      	beq.n	800c5fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	617b      	str	r3, [r7, #20]
}
 800c5f6:	bf00      	nop
 800c5f8:	bf00      	nop
 800c5fa:	e7fd      	b.n	800c5f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d01f      	beq.n	800c642 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c602:	2300      	movs	r3, #0
 800c604:	61fb      	str	r3, [r7, #28]
 800c606:	e012      	b.n	800c62e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	7819      	ldrb	r1, [r3, #0]
 800c610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	4413      	add	r3, r2
 800c616:	3334      	adds	r3, #52	@ 0x34
 800c618:	460a      	mov	r2, r1
 800c61a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	4413      	add	r3, r2
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	3301      	adds	r3, #1
 800c62c:	61fb      	str	r3, [r7, #28]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	2b0f      	cmp	r3, #15
 800c632:	d9e9      	bls.n	800c608 <prvInitialiseNewTask+0x66>
 800c634:	e000      	b.n	800c638 <prvInitialiseNewTask+0x96>
			{
				break;
 800c636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c640:	e003      	b.n	800c64a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	2b37      	cmp	r3, #55	@ 0x37
 800c64e:	d901      	bls.n	800c654 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c650:	2337      	movs	r3, #55	@ 0x37
 800c652:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c658:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c65e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c662:	2200      	movs	r2, #0
 800c664:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c668:	3304      	adds	r3, #4
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff f8a8 	bl	800b7c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c672:	3318      	adds	r3, #24
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff f8a3 	bl	800b7c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c67e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c68e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c692:	2200      	movs	r2, #0
 800c694:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	68f9      	ldr	r1, [r7, #12]
 800c6a2:	69b8      	ldr	r0, [r7, #24]
 800c6a4:	f001 f93e 	bl	800d924 <pxPortInitialiseStack>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6cc:	f001 fa5c 	bl	800db88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6d0:	4b2d      	ldr	r3, [pc, #180]	@ (800c788 <prvAddNewTaskToReadyList+0xc4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	4a2c      	ldr	r2, [pc, #176]	@ (800c788 <prvAddNewTaskToReadyList+0xc4>)
 800c6d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6da:	4b2c      	ldr	r3, [pc, #176]	@ (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6e2:	4a2a      	ldr	r2, [pc, #168]	@ (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6e8:	4b27      	ldr	r3, [pc, #156]	@ (800c788 <prvAddNewTaskToReadyList+0xc4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d110      	bne.n	800c712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6f0:	f000 fc1e 	bl	800cf30 <prvInitialiseTaskLists>
 800c6f4:	e00d      	b.n	800c712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6f6:	4b26      	ldr	r3, [pc, #152]	@ (800c790 <prvAddNewTaskToReadyList+0xcc>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6fe:	4b23      	ldr	r3, [pc, #140]	@ (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c708:	429a      	cmp	r2, r3
 800c70a:	d802      	bhi.n	800c712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c70c:	4a1f      	ldr	r2, [pc, #124]	@ (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c712:	4b20      	ldr	r3, [pc, #128]	@ (800c794 <prvAddNewTaskToReadyList+0xd0>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3301      	adds	r3, #1
 800c718:	4a1e      	ldr	r2, [pc, #120]	@ (800c794 <prvAddNewTaskToReadyList+0xd0>)
 800c71a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c71c:	4b1d      	ldr	r3, [pc, #116]	@ (800c794 <prvAddNewTaskToReadyList+0xd0>)
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c728:	4b1b      	ldr	r3, [pc, #108]	@ (800c798 <prvAddNewTaskToReadyList+0xd4>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d903      	bls.n	800c738 <prvAddNewTaskToReadyList+0x74>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c734:	4a18      	ldr	r2, [pc, #96]	@ (800c798 <prvAddNewTaskToReadyList+0xd4>)
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4a15      	ldr	r2, [pc, #84]	@ (800c79c <prvAddNewTaskToReadyList+0xd8>)
 800c746:	441a      	add	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7ff f843 	bl	800b7da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c754:	f001 fa4a 	bl	800dbec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c758:	4b0d      	ldr	r3, [pc, #52]	@ (800c790 <prvAddNewTaskToReadyList+0xcc>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00e      	beq.n	800c77e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c760:	4b0a      	ldr	r3, [pc, #40]	@ (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d207      	bcs.n	800c77e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c76e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a0 <prvAddNewTaskToReadyList+0xdc>)
 800c770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c77e:	bf00      	nop
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	24001044 	.word	0x24001044
 800c78c:	24000b70 	.word	0x24000b70
 800c790:	24001050 	.word	0x24001050
 800c794:	24001060 	.word	0x24001060
 800c798:	2400104c 	.word	0x2400104c
 800c79c:	24000b74 	.word	0x24000b74
 800c7a0:	e000ed04 	.word	0xe000ed04

0800c7a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d018      	beq.n	800c7e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7b6:	4b14      	ldr	r3, [pc, #80]	@ (800c808 <vTaskDelay+0x64>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <vTaskDelay+0x32>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	60bb      	str	r3, [r7, #8]
}
 800c7d0:	bf00      	nop
 800c7d2:	bf00      	nop
 800c7d4:	e7fd      	b.n	800c7d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c7d6:	f000 f883 	bl	800c8e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7da:	2100      	movs	r1, #0
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fcf3 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7e2:	f000 f88b 	bl	800c8fc <xTaskResumeAll>
 800c7e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d107      	bne.n	800c7fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c7ee:	4b07      	ldr	r3, [pc, #28]	@ (800c80c <vTaskDelay+0x68>)
 800c7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7fe:	bf00      	nop
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	2400106c 	.word	0x2400106c
 800c80c:	e000ed04 	.word	0xe000ed04

0800c810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08a      	sub	sp, #40	@ 0x28
 800c814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c81e:	463a      	mov	r2, r7
 800c820:	1d39      	adds	r1, r7, #4
 800c822:	f107 0308 	add.w	r3, r7, #8
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe ff76 	bl	800b718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	9202      	str	r2, [sp, #8]
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	2300      	movs	r3, #0
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	2300      	movs	r3, #0
 800c83c:	460a      	mov	r2, r1
 800c83e:	4922      	ldr	r1, [pc, #136]	@ (800c8c8 <vTaskStartScheduler+0xb8>)
 800c840:	4822      	ldr	r0, [pc, #136]	@ (800c8cc <vTaskStartScheduler+0xbc>)
 800c842:	f7ff fe09 	bl	800c458 <xTaskCreateStatic>
 800c846:	4603      	mov	r3, r0
 800c848:	4a21      	ldr	r2, [pc, #132]	@ (800c8d0 <vTaskStartScheduler+0xc0>)
 800c84a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c84c:	4b20      	ldr	r3, [pc, #128]	@ (800c8d0 <vTaskStartScheduler+0xc0>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c854:	2301      	movs	r3, #1
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	e001      	b.n	800c85e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d102      	bne.n	800c86a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c864:	f000 fd04 	bl	800d270 <xTimerCreateTimerTask>
 800c868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d116      	bne.n	800c89e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c884:	4b13      	ldr	r3, [pc, #76]	@ (800c8d4 <vTaskStartScheduler+0xc4>)
 800c886:	f04f 32ff 	mov.w	r2, #4294967295
 800c88a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c88c:	4b12      	ldr	r3, [pc, #72]	@ (800c8d8 <vTaskStartScheduler+0xc8>)
 800c88e:	2201      	movs	r2, #1
 800c890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c892:	4b12      	ldr	r3, [pc, #72]	@ (800c8dc <vTaskStartScheduler+0xcc>)
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c898:	f001 f8d2 	bl	800da40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c89c:	e00f      	b.n	800c8be <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a4:	d10b      	bne.n	800c8be <vTaskStartScheduler+0xae>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	60fb      	str	r3, [r7, #12]
}
 800c8b8:	bf00      	nop
 800c8ba:	bf00      	nop
 800c8bc:	e7fd      	b.n	800c8ba <vTaskStartScheduler+0xaa>
}
 800c8be:	bf00      	nop
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	08013134 	.word	0x08013134
 800c8cc:	0800cf01 	.word	0x0800cf01
 800c8d0:	24001068 	.word	0x24001068
 800c8d4:	24001064 	.word	0x24001064
 800c8d8:	24001050 	.word	0x24001050
 800c8dc:	24001048 	.word	0x24001048

0800c8e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c8e4:	4b04      	ldr	r3, [pc, #16]	@ (800c8f8 <vTaskSuspendAll+0x18>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	4a03      	ldr	r2, [pc, #12]	@ (800c8f8 <vTaskSuspendAll+0x18>)
 800c8ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c8ee:	bf00      	nop
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	2400106c 	.word	0x2400106c

0800c8fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c906:	2300      	movs	r3, #0
 800c908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c90a:	4b42      	ldr	r3, [pc, #264]	@ (800ca14 <xTaskResumeAll+0x118>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d10b      	bne.n	800c92a <xTaskResumeAll+0x2e>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	603b      	str	r3, [r7, #0]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c92a:	f001 f92d 	bl	800db88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c92e:	4b39      	ldr	r3, [pc, #228]	@ (800ca14 <xTaskResumeAll+0x118>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3b01      	subs	r3, #1
 800c934:	4a37      	ldr	r2, [pc, #220]	@ (800ca14 <xTaskResumeAll+0x118>)
 800c936:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c938:	4b36      	ldr	r3, [pc, #216]	@ (800ca14 <xTaskResumeAll+0x118>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d162      	bne.n	800ca06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c940:	4b35      	ldr	r3, [pc, #212]	@ (800ca18 <xTaskResumeAll+0x11c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d05e      	beq.n	800ca06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c948:	e02f      	b.n	800c9aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c94a:	4b34      	ldr	r3, [pc, #208]	@ (800ca1c <xTaskResumeAll+0x120>)
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3318      	adds	r3, #24
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe ff9c 	bl	800b894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3304      	adds	r3, #4
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe ff97 	bl	800b894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96a:	4b2d      	ldr	r3, [pc, #180]	@ (800ca20 <xTaskResumeAll+0x124>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d903      	bls.n	800c97a <xTaskResumeAll+0x7e>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c976:	4a2a      	ldr	r2, [pc, #168]	@ (800ca20 <xTaskResumeAll+0x124>)
 800c978:	6013      	str	r3, [r2, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4a27      	ldr	r2, [pc, #156]	@ (800ca24 <xTaskResumeAll+0x128>)
 800c988:	441a      	add	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3304      	adds	r3, #4
 800c98e:	4619      	mov	r1, r3
 800c990:	4610      	mov	r0, r2
 800c992:	f7fe ff22 	bl	800b7da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c99a:	4b23      	ldr	r3, [pc, #140]	@ (800ca28 <xTaskResumeAll+0x12c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d302      	bcc.n	800c9aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c9a4:	4b21      	ldr	r3, [pc, #132]	@ (800ca2c <xTaskResumeAll+0x130>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9aa:	4b1c      	ldr	r3, [pc, #112]	@ (800ca1c <xTaskResumeAll+0x120>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1cb      	bne.n	800c94a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d001      	beq.n	800c9bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c9b8:	f000 fb58 	bl	800d06c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c9bc:	4b1c      	ldr	r3, [pc, #112]	@ (800ca30 <xTaskResumeAll+0x134>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d010      	beq.n	800c9ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c9c8:	f000 f846 	bl	800ca58 <xTaskIncrementTick>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c9d2:	4b16      	ldr	r3, [pc, #88]	@ (800ca2c <xTaskResumeAll+0x130>)
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1f1      	bne.n	800c9c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c9e4:	4b12      	ldr	r3, [pc, #72]	@ (800ca30 <xTaskResumeAll+0x134>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9ea:	4b10      	ldr	r3, [pc, #64]	@ (800ca2c <xTaskResumeAll+0x130>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d009      	beq.n	800ca06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca34 <xTaskResumeAll+0x138>)
 800c9f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca06:	f001 f8f1 	bl	800dbec <vPortExitCritical>

	return xAlreadyYielded;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	2400106c 	.word	0x2400106c
 800ca18:	24001044 	.word	0x24001044
 800ca1c:	24001004 	.word	0x24001004
 800ca20:	2400104c 	.word	0x2400104c
 800ca24:	24000b74 	.word	0x24000b74
 800ca28:	24000b70 	.word	0x24000b70
 800ca2c:	24001058 	.word	0x24001058
 800ca30:	24001054 	.word	0x24001054
 800ca34:	e000ed04 	.word	0xe000ed04

0800ca38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca3e:	4b05      	ldr	r3, [pc, #20]	@ (800ca54 <xTaskGetTickCount+0x1c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca44:	687b      	ldr	r3, [r7, #4]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	24001048 	.word	0x24001048

0800ca58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca62:	4b4f      	ldr	r3, [pc, #316]	@ (800cba0 <xTaskIncrementTick+0x148>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f040 8090 	bne.w	800cb8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cba4 <xTaskIncrementTick+0x14c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3301      	adds	r3, #1
 800ca72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca74:	4a4b      	ldr	r2, [pc, #300]	@ (800cba4 <xTaskIncrementTick+0x14c>)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d121      	bne.n	800cac4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca80:	4b49      	ldr	r3, [pc, #292]	@ (800cba8 <xTaskIncrementTick+0x150>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00b      	beq.n	800caa2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	603b      	str	r3, [r7, #0]
}
 800ca9c:	bf00      	nop
 800ca9e:	bf00      	nop
 800caa0:	e7fd      	b.n	800ca9e <xTaskIncrementTick+0x46>
 800caa2:	4b41      	ldr	r3, [pc, #260]	@ (800cba8 <xTaskIncrementTick+0x150>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	4b40      	ldr	r3, [pc, #256]	@ (800cbac <xTaskIncrementTick+0x154>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a3e      	ldr	r2, [pc, #248]	@ (800cba8 <xTaskIncrementTick+0x150>)
 800caae:	6013      	str	r3, [r2, #0]
 800cab0:	4a3e      	ldr	r2, [pc, #248]	@ (800cbac <xTaskIncrementTick+0x154>)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6013      	str	r3, [r2, #0]
 800cab6:	4b3e      	ldr	r3, [pc, #248]	@ (800cbb0 <xTaskIncrementTick+0x158>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3301      	adds	r3, #1
 800cabc:	4a3c      	ldr	r2, [pc, #240]	@ (800cbb0 <xTaskIncrementTick+0x158>)
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	f000 fad4 	bl	800d06c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cac4:	4b3b      	ldr	r3, [pc, #236]	@ (800cbb4 <xTaskIncrementTick+0x15c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d349      	bcc.n	800cb62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cace:	4b36      	ldr	r3, [pc, #216]	@ (800cba8 <xTaskIncrementTick+0x150>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d104      	bne.n	800cae2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad8:	4b36      	ldr	r3, [pc, #216]	@ (800cbb4 <xTaskIncrementTick+0x15c>)
 800cada:	f04f 32ff 	mov.w	r2, #4294967295
 800cade:	601a      	str	r2, [r3, #0]
					break;
 800cae0:	e03f      	b.n	800cb62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae2:	4b31      	ldr	r3, [pc, #196]	@ (800cba8 <xTaskIncrementTick+0x150>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d203      	bcs.n	800cb02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cafa:	4a2e      	ldr	r2, [pc, #184]	@ (800cbb4 <xTaskIncrementTick+0x15c>)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb00:	e02f      	b.n	800cb62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fec4 	bl	800b894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d004      	beq.n	800cb1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	3318      	adds	r3, #24
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe febb 	bl	800b894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb22:	4b25      	ldr	r3, [pc, #148]	@ (800cbb8 <xTaskIncrementTick+0x160>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d903      	bls.n	800cb32 <xTaskIncrementTick+0xda>
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb2e:	4a22      	ldr	r2, [pc, #136]	@ (800cbb8 <xTaskIncrementTick+0x160>)
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb36:	4613      	mov	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbbc <xTaskIncrementTick+0x164>)
 800cb40:	441a      	add	r2, r3
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	3304      	adds	r3, #4
 800cb46:	4619      	mov	r1, r3
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7fe fe46 	bl	800b7da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb52:	4b1b      	ldr	r3, [pc, #108]	@ (800cbc0 <xTaskIncrementTick+0x168>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d3b8      	bcc.n	800cace <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb60:	e7b5      	b.n	800cace <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb62:	4b17      	ldr	r3, [pc, #92]	@ (800cbc0 <xTaskIncrementTick+0x168>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb68:	4914      	ldr	r1, [pc, #80]	@ (800cbbc <xTaskIncrementTick+0x164>)
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d901      	bls.n	800cb7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb7e:	4b11      	ldr	r3, [pc, #68]	@ (800cbc4 <xTaskIncrementTick+0x16c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d007      	beq.n	800cb96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cb86:	2301      	movs	r3, #1
 800cb88:	617b      	str	r3, [r7, #20]
 800cb8a:	e004      	b.n	800cb96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb8c:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc8 <xTaskIncrementTick+0x170>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	4a0d      	ldr	r2, [pc, #52]	@ (800cbc8 <xTaskIncrementTick+0x170>)
 800cb94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb96:	697b      	ldr	r3, [r7, #20]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	2400106c 	.word	0x2400106c
 800cba4:	24001048 	.word	0x24001048
 800cba8:	24000ffc 	.word	0x24000ffc
 800cbac:	24001000 	.word	0x24001000
 800cbb0:	2400105c 	.word	0x2400105c
 800cbb4:	24001064 	.word	0x24001064
 800cbb8:	2400104c 	.word	0x2400104c
 800cbbc:	24000b74 	.word	0x24000b74
 800cbc0:	24000b70 	.word	0x24000b70
 800cbc4:	24001058 	.word	0x24001058
 800cbc8:	24001054 	.word	0x24001054

0800cbcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cbd2:	4b28      	ldr	r3, [pc, #160]	@ (800cc74 <vTaskSwitchContext+0xa8>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cbda:	4b27      	ldr	r3, [pc, #156]	@ (800cc78 <vTaskSwitchContext+0xac>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cbe0:	e042      	b.n	800cc68 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800cbe2:	4b25      	ldr	r3, [pc, #148]	@ (800cc78 <vTaskSwitchContext+0xac>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe8:	4b24      	ldr	r3, [pc, #144]	@ (800cc7c <vTaskSwitchContext+0xb0>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e011      	b.n	800cc14 <vTaskSwitchContext+0x48>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10b      	bne.n	800cc0e <vTaskSwitchContext+0x42>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	607b      	str	r3, [r7, #4]
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	e7fd      	b.n	800cc0a <vTaskSwitchContext+0x3e>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	60fb      	str	r3, [r7, #12]
 800cc14:	491a      	ldr	r1, [pc, #104]	@ (800cc80 <vTaskSwitchContext+0xb4>)
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	440b      	add	r3, r1
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d0e3      	beq.n	800cbf0 <vTaskSwitchContext+0x24>
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4a13      	ldr	r2, [pc, #76]	@ (800cc80 <vTaskSwitchContext+0xb4>)
 800cc34:	4413      	add	r3, r2
 800cc36:	60bb      	str	r3, [r7, #8]
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	605a      	str	r2, [r3, #4]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	3308      	adds	r3, #8
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d104      	bne.n	800cc58 <vTaskSwitchContext+0x8c>
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	685a      	ldr	r2, [r3, #4]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	605a      	str	r2, [r3, #4]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	4a09      	ldr	r2, [pc, #36]	@ (800cc84 <vTaskSwitchContext+0xb8>)
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	4a06      	ldr	r2, [pc, #24]	@ (800cc7c <vTaskSwitchContext+0xb0>)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6013      	str	r3, [r2, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	2400106c 	.word	0x2400106c
 800cc78:	24001058 	.word	0x24001058
 800cc7c:	2400104c 	.word	0x2400104c
 800cc80:	24000b74 	.word	0x24000b74
 800cc84:	24000b70 	.word	0x24000b70

0800cc88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10b      	bne.n	800ccb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	60fb      	str	r3, [r7, #12]
}
 800ccaa:	bf00      	nop
 800ccac:	bf00      	nop
 800ccae:	e7fd      	b.n	800ccac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccb0:	4b07      	ldr	r3, [pc, #28]	@ (800ccd0 <vTaskPlaceOnEventList+0x48>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3318      	adds	r3, #24
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7fe fdb2 	bl	800b822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	6838      	ldr	r0, [r7, #0]
 800ccc2:	f000 fa81 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
}
 800ccc6:	bf00      	nop
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	24000b70 	.word	0x24000b70

0800ccd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10b      	bne.n	800ccfe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	617b      	str	r3, [r7, #20]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	@ (800cd28 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	3318      	adds	r3, #24
 800cd04:	4619      	mov	r1, r3
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7fe fd67 	bl	800b7da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
 800cd16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd18:	6879      	ldr	r1, [r7, #4]
 800cd1a:	68b8      	ldr	r0, [r7, #8]
 800cd1c:	f000 fa54 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
	}
 800cd20:	bf00      	nop
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	24000b70 	.word	0x24000b70

0800cd2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	60fb      	str	r3, [r7, #12]
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
 800cd58:	e7fd      	b.n	800cd56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	3318      	adds	r3, #24
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fd98 	bl	800b894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd64:	4b1d      	ldr	r3, [pc, #116]	@ (800cddc <xTaskRemoveFromEventList+0xb0>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d11d      	bne.n	800cda8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fd8f 	bl	800b894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd7a:	4b19      	ldr	r3, [pc, #100]	@ (800cde0 <xTaskRemoveFromEventList+0xb4>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d903      	bls.n	800cd8a <xTaskRemoveFromEventList+0x5e>
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd86:	4a16      	ldr	r2, [pc, #88]	@ (800cde0 <xTaskRemoveFromEventList+0xb4>)
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd8e:	4613      	mov	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4a13      	ldr	r2, [pc, #76]	@ (800cde4 <xTaskRemoveFromEventList+0xb8>)
 800cd98:	441a      	add	r2, r3
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4610      	mov	r0, r2
 800cda2:	f7fe fd1a 	bl	800b7da <vListInsertEnd>
 800cda6:	e005      	b.n	800cdb4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	3318      	adds	r3, #24
 800cdac:	4619      	mov	r1, r3
 800cdae:	480e      	ldr	r0, [pc, #56]	@ (800cde8 <xTaskRemoveFromEventList+0xbc>)
 800cdb0:	f7fe fd13 	bl	800b7da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdb8:	4b0c      	ldr	r3, [pc, #48]	@ (800cdec <xTaskRemoveFromEventList+0xc0>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d905      	bls.n	800cdce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cdc6:	4b0a      	ldr	r3, [pc, #40]	@ (800cdf0 <xTaskRemoveFromEventList+0xc4>)
 800cdc8:	2201      	movs	r2, #1
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	e001      	b.n	800cdd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cdd2:	697b      	ldr	r3, [r7, #20]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	2400106c 	.word	0x2400106c
 800cde0:	2400104c 	.word	0x2400104c
 800cde4:	24000b74 	.word	0x24000b74
 800cde8:	24001004 	.word	0x24001004
 800cdec:	24000b70 	.word	0x24000b70
 800cdf0:	24001058 	.word	0x24001058

0800cdf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cdfc:	4b06      	ldr	r3, [pc, #24]	@ (800ce18 <vTaskInternalSetTimeOutState+0x24>)
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce04:	4b05      	ldr	r3, [pc, #20]	@ (800ce1c <vTaskInternalSetTimeOutState+0x28>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	605a      	str	r2, [r3, #4]
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	2400105c 	.word	0x2400105c
 800ce1c:	24001048 	.word	0x24001048

0800ce20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10b      	bne.n	800ce48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	613b      	str	r3, [r7, #16]
}
 800ce42:	bf00      	nop
 800ce44:	bf00      	nop
 800ce46:	e7fd      	b.n	800ce44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10b      	bne.n	800ce66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	60fb      	str	r3, [r7, #12]
}
 800ce60:	bf00      	nop
 800ce62:	bf00      	nop
 800ce64:	e7fd      	b.n	800ce62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ce66:	f000 fe8f 	bl	800db88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cee0 <xTaskCheckForTimeOut+0xc0>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce82:	d102      	bne.n	800ce8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce84:	2300      	movs	r3, #0
 800ce86:	61fb      	str	r3, [r7, #28]
 800ce88:	e023      	b.n	800ced2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	4b15      	ldr	r3, [pc, #84]	@ (800cee4 <xTaskCheckForTimeOut+0xc4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d007      	beq.n	800cea6 <xTaskCheckForTimeOut+0x86>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d302      	bcc.n	800cea6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cea0:	2301      	movs	r3, #1
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e015      	b.n	800ced2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d20b      	bcs.n	800cec8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	1ad2      	subs	r2, r2, r3
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff ff99 	bl	800cdf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cec2:	2300      	movs	r3, #0
 800cec4:	61fb      	str	r3, [r7, #28]
 800cec6:	e004      	b.n	800ced2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cece:	2301      	movs	r3, #1
 800ced0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ced2:	f000 fe8b 	bl	800dbec <vPortExitCritical>

	return xReturn;
 800ced6:	69fb      	ldr	r3, [r7, #28]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3720      	adds	r7, #32
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	24001048 	.word	0x24001048
 800cee4:	2400105c 	.word	0x2400105c

0800cee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cee8:	b480      	push	{r7}
 800ceea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ceec:	4b03      	ldr	r3, [pc, #12]	@ (800cefc <vTaskMissedYield+0x14>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
}
 800cef2:	bf00      	nop
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	24001058 	.word	0x24001058

0800cf00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf08:	f000 f852 	bl	800cfb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf0c:	4b06      	ldr	r3, [pc, #24]	@ (800cf28 <prvIdleTask+0x28>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d9f9      	bls.n	800cf08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf14:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <prvIdleTask+0x2c>)
 800cf16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf24:	e7f0      	b.n	800cf08 <prvIdleTask+0x8>
 800cf26:	bf00      	nop
 800cf28:	24000b74 	.word	0x24000b74
 800cf2c:	e000ed04 	.word	0xe000ed04

0800cf30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf36:	2300      	movs	r3, #0
 800cf38:	607b      	str	r3, [r7, #4]
 800cf3a:	e00c      	b.n	800cf56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4a12      	ldr	r2, [pc, #72]	@ (800cf90 <prvInitialiseTaskLists+0x60>)
 800cf48:	4413      	add	r3, r2
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe fc18 	bl	800b780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3301      	adds	r3, #1
 800cf54:	607b      	str	r3, [r7, #4]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b37      	cmp	r3, #55	@ 0x37
 800cf5a:	d9ef      	bls.n	800cf3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf5c:	480d      	ldr	r0, [pc, #52]	@ (800cf94 <prvInitialiseTaskLists+0x64>)
 800cf5e:	f7fe fc0f 	bl	800b780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf62:	480d      	ldr	r0, [pc, #52]	@ (800cf98 <prvInitialiseTaskLists+0x68>)
 800cf64:	f7fe fc0c 	bl	800b780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf68:	480c      	ldr	r0, [pc, #48]	@ (800cf9c <prvInitialiseTaskLists+0x6c>)
 800cf6a:	f7fe fc09 	bl	800b780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf6e:	480c      	ldr	r0, [pc, #48]	@ (800cfa0 <prvInitialiseTaskLists+0x70>)
 800cf70:	f7fe fc06 	bl	800b780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf74:	480b      	ldr	r0, [pc, #44]	@ (800cfa4 <prvInitialiseTaskLists+0x74>)
 800cf76:	f7fe fc03 	bl	800b780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa8 <prvInitialiseTaskLists+0x78>)
 800cf7c:	4a05      	ldr	r2, [pc, #20]	@ (800cf94 <prvInitialiseTaskLists+0x64>)
 800cf7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf80:	4b0a      	ldr	r3, [pc, #40]	@ (800cfac <prvInitialiseTaskLists+0x7c>)
 800cf82:	4a05      	ldr	r2, [pc, #20]	@ (800cf98 <prvInitialiseTaskLists+0x68>)
 800cf84:	601a      	str	r2, [r3, #0]
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	24000b74 	.word	0x24000b74
 800cf94:	24000fd4 	.word	0x24000fd4
 800cf98:	24000fe8 	.word	0x24000fe8
 800cf9c:	24001004 	.word	0x24001004
 800cfa0:	24001018 	.word	0x24001018
 800cfa4:	24001030 	.word	0x24001030
 800cfa8:	24000ffc 	.word	0x24000ffc
 800cfac:	24001000 	.word	0x24001000

0800cfb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfb6:	e019      	b.n	800cfec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfb8:	f000 fde6 	bl	800db88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfbc:	4b10      	ldr	r3, [pc, #64]	@ (800d000 <prvCheckTasksWaitingTermination+0x50>)
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe fc63 	bl	800b894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cfce:	4b0d      	ldr	r3, [pc, #52]	@ (800d004 <prvCheckTasksWaitingTermination+0x54>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	4a0b      	ldr	r2, [pc, #44]	@ (800d004 <prvCheckTasksWaitingTermination+0x54>)
 800cfd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cfd8:	4b0b      	ldr	r3, [pc, #44]	@ (800d008 <prvCheckTasksWaitingTermination+0x58>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	4a0a      	ldr	r2, [pc, #40]	@ (800d008 <prvCheckTasksWaitingTermination+0x58>)
 800cfe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cfe2:	f000 fe03 	bl	800dbec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f810 	bl	800d00c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfec:	4b06      	ldr	r3, [pc, #24]	@ (800d008 <prvCheckTasksWaitingTermination+0x58>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e1      	bne.n	800cfb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	24001018 	.word	0x24001018
 800d004:	24001044 	.word	0x24001044
 800d008:	2400102c 	.word	0x2400102c

0800d00c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d108      	bne.n	800d030 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d022:	4618      	mov	r0, r3
 800d024:	f000 ffa0 	bl	800df68 <vPortFree>
				vPortFree( pxTCB );
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 ff9d 	bl	800df68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d02e:	e019      	b.n	800d064 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d036:	2b01      	cmp	r3, #1
 800d038:	d103      	bne.n	800d042 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 ff94 	bl	800df68 <vPortFree>
	}
 800d040:	e010      	b.n	800d064 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d00b      	beq.n	800d064 <prvDeleteTCB+0x58>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	60fb      	str	r3, [r7, #12]
}
 800d05e:	bf00      	nop
 800d060:	bf00      	nop
 800d062:	e7fd      	b.n	800d060 <prvDeleteTCB+0x54>
	}
 800d064:	bf00      	nop
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d072:	4b0c      	ldr	r3, [pc, #48]	@ (800d0a4 <prvResetNextTaskUnblockTime+0x38>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d104      	bne.n	800d086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d07c:	4b0a      	ldr	r3, [pc, #40]	@ (800d0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d07e:	f04f 32ff 	mov.w	r2, #4294967295
 800d082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d084:	e008      	b.n	800d098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d086:	4b07      	ldr	r3, [pc, #28]	@ (800d0a4 <prvResetNextTaskUnblockTime+0x38>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	4a04      	ldr	r2, [pc, #16]	@ (800d0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d096:	6013      	str	r3, [r2, #0]
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	24000ffc 	.word	0x24000ffc
 800d0a8:	24001064 	.word	0x24001064

0800d0ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e0 <xTaskGetSchedulerState+0x34>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d102      	bne.n	800d0c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	607b      	str	r3, [r7, #4]
 800d0be:	e008      	b.n	800d0d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0c0:	4b08      	ldr	r3, [pc, #32]	@ (800d0e4 <xTaskGetSchedulerState+0x38>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d102      	bne.n	800d0ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	607b      	str	r3, [r7, #4]
 800d0cc:	e001      	b.n	800d0d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0d2:	687b      	ldr	r3, [r7, #4]
	}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	24001050 	.word	0x24001050
 800d0e4:	2400106c 	.word	0x2400106c

0800d0e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d058      	beq.n	800d1b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d1bc <xTaskPriorityDisinherit+0xd4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	429a      	cmp	r2, r3
 800d106:	d00b      	beq.n	800d120 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	60fb      	str	r3, [r7, #12]
}
 800d11a:	bf00      	nop
 800d11c:	bf00      	nop
 800d11e:	e7fd      	b.n	800d11c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10b      	bne.n	800d140 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	60bb      	str	r3, [r7, #8]
}
 800d13a:	bf00      	nop
 800d13c:	bf00      	nop
 800d13e:	e7fd      	b.n	800d13c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d144:	1e5a      	subs	r2, r3, #1
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d152:	429a      	cmp	r2, r3
 800d154:	d02c      	beq.n	800d1b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d128      	bne.n	800d1b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	3304      	adds	r3, #4
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fb96 	bl	800b894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d174:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d180:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c0 <xTaskPriorityDisinherit+0xd8>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	429a      	cmp	r2, r3
 800d186:	d903      	bls.n	800d190 <xTaskPriorityDisinherit+0xa8>
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d18c:	4a0c      	ldr	r2, [pc, #48]	@ (800d1c0 <xTaskPriorityDisinherit+0xd8>)
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d194:	4613      	mov	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4a09      	ldr	r2, [pc, #36]	@ (800d1c4 <xTaskPriorityDisinherit+0xdc>)
 800d19e:	441a      	add	r2, r3
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	f7fe fb17 	bl	800b7da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1b0:	697b      	ldr	r3, [r7, #20]
	}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	24000b70 	.word	0x24000b70
 800d1c0:	2400104c 	.word	0x2400104c
 800d1c4:	24000b74 	.word	0x24000b74

0800d1c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1d2:	4b21      	ldr	r3, [pc, #132]	@ (800d258 <prvAddCurrentTaskToDelayedList+0x90>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1d8:	4b20      	ldr	r3, [pc, #128]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe fb58 	bl	800b894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ea:	d10a      	bne.n	800d202 <prvAddCurrentTaskToDelayedList+0x3a>
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d007      	beq.n	800d202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4819      	ldr	r0, [pc, #100]	@ (800d260 <prvAddCurrentTaskToDelayedList+0x98>)
 800d1fc:	f7fe faed 	bl	800b7da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d200:	e026      	b.n	800d250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4413      	add	r3, r2
 800d208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d20a:	4b14      	ldr	r3, [pc, #80]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	429a      	cmp	r2, r3
 800d218:	d209      	bcs.n	800d22e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d21a:	4b12      	ldr	r3, [pc, #72]	@ (800d264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	4b0f      	ldr	r3, [pc, #60]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3304      	adds	r3, #4
 800d224:	4619      	mov	r1, r3
 800d226:	4610      	mov	r0, r2
 800d228:	f7fe fafb 	bl	800b822 <vListInsert>
}
 800d22c:	e010      	b.n	800d250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d22e:	4b0e      	ldr	r3, [pc, #56]	@ (800d268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b0a      	ldr	r3, [pc, #40]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3304      	adds	r3, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f7fe faf1 	bl	800b822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d240:	4b0a      	ldr	r3, [pc, #40]	@ (800d26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68ba      	ldr	r2, [r7, #8]
 800d246:	429a      	cmp	r2, r3
 800d248:	d202      	bcs.n	800d250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d24a:	4a08      	ldr	r2, [pc, #32]	@ (800d26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	6013      	str	r3, [r2, #0]
}
 800d250:	bf00      	nop
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	24001048 	.word	0x24001048
 800d25c:	24000b70 	.word	0x24000b70
 800d260:	24001030 	.word	0x24001030
 800d264:	24001000 	.word	0x24001000
 800d268:	24000ffc 	.word	0x24000ffc
 800d26c:	24001064 	.word	0x24001064

0800d270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	@ 0x28
 800d274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d276:	2300      	movs	r3, #0
 800d278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d27a:	f000 fb13 	bl	800d8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d27e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2f4 <xTimerCreateTimerTask+0x84>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d021      	beq.n	800d2ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d28e:	1d3a      	adds	r2, r7, #4
 800d290:	f107 0108 	add.w	r1, r7, #8
 800d294:	f107 030c 	add.w	r3, r7, #12
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fe fa57 	bl	800b74c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	9202      	str	r2, [sp, #8]
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	460a      	mov	r2, r1
 800d2b0:	4911      	ldr	r1, [pc, #68]	@ (800d2f8 <xTimerCreateTimerTask+0x88>)
 800d2b2:	4812      	ldr	r0, [pc, #72]	@ (800d2fc <xTimerCreateTimerTask+0x8c>)
 800d2b4:	f7ff f8d0 	bl	800c458 <xTaskCreateStatic>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	4a11      	ldr	r2, [pc, #68]	@ (800d300 <xTimerCreateTimerTask+0x90>)
 800d2bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2be:	4b10      	ldr	r3, [pc, #64]	@ (800d300 <xTimerCreateTimerTask+0x90>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10b      	bne.n	800d2e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	613b      	str	r3, [r7, #16]
}
 800d2e2:	bf00      	nop
 800d2e4:	bf00      	nop
 800d2e6:	e7fd      	b.n	800d2e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d2e8:	697b      	ldr	r3, [r7, #20]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	240010a0 	.word	0x240010a0
 800d2f8:	0801313c 	.word	0x0801313c
 800d2fc:	0800d43d 	.word	0x0800d43d
 800d300:	240010a4 	.word	0x240010a4

0800d304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	@ 0x28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d312:	2300      	movs	r3, #0
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10b      	bne.n	800d334 <xTimerGenericCommand+0x30>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d334:	4b19      	ldr	r3, [pc, #100]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d02a      	beq.n	800d392 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b05      	cmp	r3, #5
 800d34c:	dc18      	bgt.n	800d380 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d34e:	f7ff fead 	bl	800d0ac <xTaskGetSchedulerState>
 800d352:	4603      	mov	r3, r0
 800d354:	2b02      	cmp	r3, #2
 800d356:	d109      	bne.n	800d36c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d358:	4b10      	ldr	r3, [pc, #64]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	f107 0110 	add.w	r1, r7, #16
 800d360:	2300      	movs	r3, #0
 800d362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d364:	f7fe fc06 	bl	800bb74 <xQueueGenericSend>
 800d368:	6278      	str	r0, [r7, #36]	@ 0x24
 800d36a:	e012      	b.n	800d392 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d36c:	4b0b      	ldr	r3, [pc, #44]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d36e:	6818      	ldr	r0, [r3, #0]
 800d370:	f107 0110 	add.w	r1, r7, #16
 800d374:	2300      	movs	r3, #0
 800d376:	2200      	movs	r2, #0
 800d378:	f7fe fbfc 	bl	800bb74 <xQueueGenericSend>
 800d37c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d37e:	e008      	b.n	800d392 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d380:	4b06      	ldr	r3, [pc, #24]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	f107 0110 	add.w	r1, r7, #16
 800d388:	2300      	movs	r3, #0
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	f7fe fcf4 	bl	800bd78 <xQueueGenericSendFromISR>
 800d390:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d394:	4618      	mov	r0, r3
 800d396:	3728      	adds	r7, #40	@ 0x28
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	240010a0 	.word	0x240010a0

0800d3a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af02      	add	r7, sp, #8
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3aa:	4b23      	ldr	r3, [pc, #140]	@ (800d438 <prvProcessExpiredTimer+0x98>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe fa6b 	bl	800b894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d023      	beq.n	800d414 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	18d1      	adds	r1, r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	6978      	ldr	r0, [r7, #20]
 800d3da:	f000 f8d5 	bl	800d588 <prvInsertTimerInActiveList>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d020      	beq.n	800d426 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	6978      	ldr	r0, [r7, #20]
 800d3f0:	f7ff ff88 	bl	800d304 <xTimerGenericCommand>
 800d3f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d114      	bne.n	800d426 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	60fb      	str	r3, [r7, #12]
}
 800d40e:	bf00      	nop
 800d410:	bf00      	nop
 800d412:	e7fd      	b.n	800d410 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d41a:	f023 0301 	bic.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	6978      	ldr	r0, [r7, #20]
 800d42c:	4798      	blx	r3
}
 800d42e:	bf00      	nop
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	24001098 	.word	0x24001098

0800d43c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d444:	f107 0308 	add.w	r3, r7, #8
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 f859 	bl	800d500 <prvGetNextExpireTime>
 800d44e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	4619      	mov	r1, r3
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f805 	bl	800d464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d45a:	f000 f8d7 	bl	800d60c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d45e:	bf00      	nop
 800d460:	e7f0      	b.n	800d444 <prvTimerTask+0x8>
	...

0800d464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d46e:	f7ff fa37 	bl	800c8e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4618      	mov	r0, r3
 800d478:	f000 f866 	bl	800d548 <prvSampleTimeNow>
 800d47c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d130      	bne.n	800d4e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10a      	bne.n	800d4a0 <prvProcessTimerOrBlockTask+0x3c>
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d806      	bhi.n	800d4a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d492:	f7ff fa33 	bl	800c8fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d496:	68f9      	ldr	r1, [r7, #12]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff ff81 	bl	800d3a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d49e:	e024      	b.n	800d4ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d008      	beq.n	800d4b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4a6:	4b13      	ldr	r3, [pc, #76]	@ (800d4f4 <prvProcessTimerOrBlockTask+0x90>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <prvProcessTimerOrBlockTask+0x50>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e000      	b.n	800d4b6 <prvProcessTimerOrBlockTask+0x52>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d4f8 <prvProcessTimerOrBlockTask+0x94>)
 800d4ba:	6818      	ldr	r0, [r3, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	f7fe ff93 	bl	800c3f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4ca:	f7ff fa17 	bl	800c8fc <xTaskResumeAll>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10a      	bne.n	800d4ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4d4:	4b09      	ldr	r3, [pc, #36]	@ (800d4fc <prvProcessTimerOrBlockTask+0x98>)
 800d4d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	f3bf 8f6f 	isb	sy
}
 800d4e4:	e001      	b.n	800d4ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d4e6:	f7ff fa09 	bl	800c8fc <xTaskResumeAll>
}
 800d4ea:	bf00      	nop
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	2400109c 	.word	0x2400109c
 800d4f8:	240010a0 	.word	0x240010a0
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d508:	4b0e      	ldr	r3, [pc, #56]	@ (800d544 <prvGetNextExpireTime+0x44>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <prvGetNextExpireTime+0x16>
 800d512:	2201      	movs	r2, #1
 800d514:	e000      	b.n	800d518 <prvGetNextExpireTime+0x18>
 800d516:	2200      	movs	r2, #0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d105      	bne.n	800d530 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d524:	4b07      	ldr	r3, [pc, #28]	@ (800d544 <prvGetNextExpireTime+0x44>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	60fb      	str	r3, [r7, #12]
 800d52e:	e001      	b.n	800d534 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d534:	68fb      	ldr	r3, [r7, #12]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	24001098 	.word	0x24001098

0800d548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d550:	f7ff fa72 	bl	800ca38 <xTaskGetTickCount>
 800d554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d556:	4b0b      	ldr	r3, [pc, #44]	@ (800d584 <prvSampleTimeNow+0x3c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d205      	bcs.n	800d56c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d560:	f000 f93a 	bl	800d7d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	e002      	b.n	800d572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d572:	4a04      	ldr	r2, [pc, #16]	@ (800d584 <prvSampleTimeNow+0x3c>)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d578:	68fb      	ldr	r3, [r7, #12]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	240010a8 	.word	0x240010a8

0800d588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d596:	2300      	movs	r3, #0
 800d598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d812      	bhi.n	800d5d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	1ad2      	subs	r2, r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d302      	bcc.n	800d5c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	617b      	str	r3, [r7, #20]
 800d5c0:	e01b      	b.n	800d5fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5c2:	4b10      	ldr	r3, [pc, #64]	@ (800d604 <prvInsertTimerInActiveList+0x7c>)
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f7fe f928 	bl	800b822 <vListInsert>
 800d5d2:	e012      	b.n	800d5fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d206      	bcs.n	800d5ea <prvInsertTimerInActiveList+0x62>
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d302      	bcc.n	800d5ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	617b      	str	r3, [r7, #20]
 800d5e8:	e007      	b.n	800d5fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5ea:	4b07      	ldr	r3, [pc, #28]	@ (800d608 <prvInsertTimerInActiveList+0x80>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	f7fe f914 	bl	800b822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d5fa:	697b      	ldr	r3, [r7, #20]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3718      	adds	r7, #24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	2400109c 	.word	0x2400109c
 800d608:	24001098 	.word	0x24001098

0800d60c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b08e      	sub	sp, #56	@ 0x38
 800d610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d612:	e0ce      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	da19      	bge.n	800d64e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	3304      	adds	r3, #4
 800d61e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10b      	bne.n	800d63e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	61fb      	str	r3, [r7, #28]
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	e7fd      	b.n	800d63a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d644:	6850      	ldr	r0, [r2, #4]
 800d646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d648:	6892      	ldr	r2, [r2, #8]
 800d64a:	4611      	mov	r1, r2
 800d64c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	f2c0 80ae 	blt.w	800d7b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d004      	beq.n	800d66c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d664:	3304      	adds	r3, #4
 800d666:	4618      	mov	r0, r3
 800d668:	f7fe f914 	bl	800b894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d66c:	463b      	mov	r3, r7
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff ff6a 	bl	800d548 <prvSampleTimeNow>
 800d674:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b09      	cmp	r3, #9
 800d67a:	f200 8097 	bhi.w	800d7ac <prvProcessReceivedCommands+0x1a0>
 800d67e:	a201      	add	r2, pc, #4	@ (adr r2, 800d684 <prvProcessReceivedCommands+0x78>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d6ad 	.word	0x0800d6ad
 800d688:	0800d6ad 	.word	0x0800d6ad
 800d68c:	0800d6ad 	.word	0x0800d6ad
 800d690:	0800d723 	.word	0x0800d723
 800d694:	0800d737 	.word	0x0800d737
 800d698:	0800d783 	.word	0x0800d783
 800d69c:	0800d6ad 	.word	0x0800d6ad
 800d6a0:	0800d6ad 	.word	0x0800d6ad
 800d6a4:	0800d723 	.word	0x0800d723
 800d6a8:	0800d737 	.word	0x0800d737
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6b2:	f043 0301 	orr.w	r3, r3, #1
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	18d1      	adds	r1, r2, r3
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6cc:	f7ff ff5c 	bl	800d588 <prvInsertTimerInActiveList>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d06c      	beq.n	800d7b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d061      	beq.n	800d7b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6fe:	f7ff fe01 	bl	800d304 <xTimerGenericCommand>
 800d702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d152      	bne.n	800d7b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	61bb      	str	r3, [r7, #24]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d728:	f023 0301 	bic.w	r3, r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d734:	e03d      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d73c:	f043 0301 	orr.w	r3, r3, #1
 800d740:	b2da      	uxtb	r2, r3
 800d742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d748:	68ba      	ldr	r2, [r7, #8]
 800d74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10b      	bne.n	800d76e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	617b      	str	r3, [r7, #20]
}
 800d768:	bf00      	nop
 800d76a:	bf00      	nop
 800d76c:	e7fd      	b.n	800d76a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	699a      	ldr	r2, [r3, #24]
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	18d1      	adds	r1, r2, r3
 800d776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d77a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d77c:	f7ff ff04 	bl	800d588 <prvInsertTimerInActiveList>
					break;
 800d780:	e017      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d788:	f003 0302 	and.w	r3, r3, #2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d103      	bne.n	800d798 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d792:	f000 fbe9 	bl	800df68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d796:	e00c      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d79e:	f023 0301 	bic.w	r3, r3, #1
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d7aa:	e002      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d7ac:	bf00      	nop
 800d7ae:	e000      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d7b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7b2:	4b08      	ldr	r3, [pc, #32]	@ (800d7d4 <prvProcessReceivedCommands+0x1c8>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	1d39      	adds	r1, r7, #4
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe fb7a 	bl	800beb4 <xQueueReceive>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af26 	bne.w	800d614 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3730      	adds	r7, #48	@ 0x30
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	240010a0 	.word	0x240010a0

0800d7d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7de:	e049      	b.n	800d874 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ea:	4b2c      	ldr	r3, [pc, #176]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe f84b 	bl	800b894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	2b00      	cmp	r3, #0
 800d812:	d02f      	beq.n	800d874 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	4413      	add	r3, r2
 800d81c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	d90e      	bls.n	800d844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d832:	4b1a      	ldr	r3, [pc, #104]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3304      	adds	r3, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	f7fd fff0 	bl	800b822 <vListInsert>
 800d842:	e017      	b.n	800d874 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d844:	2300      	movs	r3, #0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	2300      	movs	r3, #0
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fd58 	bl	800d304 <xTimerGenericCommand>
 800d854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10b      	bne.n	800d874 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	603b      	str	r3, [r7, #0]
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	e7fd      	b.n	800d870 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d874:	4b09      	ldr	r3, [pc, #36]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1b0      	bne.n	800d7e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d87e:	4b07      	ldr	r3, [pc, #28]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d884:	4b06      	ldr	r3, [pc, #24]	@ (800d8a0 <prvSwitchTimerLists+0xc8>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a04      	ldr	r2, [pc, #16]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d88a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d88c:	4a04      	ldr	r2, [pc, #16]	@ (800d8a0 <prvSwitchTimerLists+0xc8>)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	6013      	str	r3, [r2, #0]
}
 800d892:	bf00      	nop
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	24001098 	.word	0x24001098
 800d8a0:	2400109c 	.word	0x2400109c

0800d8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8aa:	f000 f96d 	bl	800db88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8ae:	4b15      	ldr	r3, [pc, #84]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d120      	bne.n	800d8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8b6:	4814      	ldr	r0, [pc, #80]	@ (800d908 <prvCheckForValidListAndQueue+0x64>)
 800d8b8:	f7fd ff62 	bl	800b780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8bc:	4813      	ldr	r0, [pc, #76]	@ (800d90c <prvCheckForValidListAndQueue+0x68>)
 800d8be:	f7fd ff5f 	bl	800b780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8c2:	4b13      	ldr	r3, [pc, #76]	@ (800d910 <prvCheckForValidListAndQueue+0x6c>)
 800d8c4:	4a10      	ldr	r2, [pc, #64]	@ (800d908 <prvCheckForValidListAndQueue+0x64>)
 800d8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8c8:	4b12      	ldr	r3, [pc, #72]	@ (800d914 <prvCheckForValidListAndQueue+0x70>)
 800d8ca:	4a10      	ldr	r2, [pc, #64]	@ (800d90c <prvCheckForValidListAndQueue+0x68>)
 800d8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	4b11      	ldr	r3, [pc, #68]	@ (800d918 <prvCheckForValidListAndQueue+0x74>)
 800d8d4:	4a11      	ldr	r2, [pc, #68]	@ (800d91c <prvCheckForValidListAndQueue+0x78>)
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	200a      	movs	r0, #10
 800d8da:	f7fe f86f 	bl	800b9bc <xQueueGenericCreateStatic>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	4a08      	ldr	r2, [pc, #32]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d8e4:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d005      	beq.n	800d8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8ec:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	490b      	ldr	r1, [pc, #44]	@ (800d920 <prvCheckForValidListAndQueue+0x7c>)
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe fd52 	bl	800c39c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8f8:	f000 f978 	bl	800dbec <vPortExitCritical>
}
 800d8fc:	bf00      	nop
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	240010a0 	.word	0x240010a0
 800d908:	24001070 	.word	0x24001070
 800d90c:	24001084 	.word	0x24001084
 800d910:	24001098 	.word	0x24001098
 800d914:	2400109c 	.word	0x2400109c
 800d918:	2400114c 	.word	0x2400114c
 800d91c:	240010ac 	.word	0x240010ac
 800d920:	08013144 	.word	0x08013144

0800d924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	3b04      	subs	r3, #4
 800d934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3b04      	subs	r3, #4
 800d942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	f023 0201 	bic.w	r2, r3, #1
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3b04      	subs	r3, #4
 800d952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d954:	4a0c      	ldr	r2, [pc, #48]	@ (800d988 <pxPortInitialiseStack+0x64>)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3b14      	subs	r3, #20
 800d95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3b04      	subs	r3, #4
 800d96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f06f 0202 	mvn.w	r2, #2
 800d972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3b20      	subs	r3, #32
 800d978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d97a:	68fb      	ldr	r3, [r7, #12]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	0800d98d 	.word	0x0800d98d

0800d98c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d996:	4b13      	ldr	r3, [pc, #76]	@ (800d9e4 <prvTaskExitError+0x58>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99e:	d00b      	beq.n	800d9b8 <prvTaskExitError+0x2c>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	60fb      	str	r3, [r7, #12]
}
 800d9b2:	bf00      	nop
 800d9b4:	bf00      	nop
 800d9b6:	e7fd      	b.n	800d9b4 <prvTaskExitError+0x28>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	60bb      	str	r3, [r7, #8]
}
 800d9ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9cc:	bf00      	nop
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d0fc      	beq.n	800d9ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9d4:	bf00      	nop
 800d9d6:	bf00      	nop
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	2400001c 	.word	0x2400001c
	...

0800d9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9f0:	4b07      	ldr	r3, [pc, #28]	@ (800da10 <pxCurrentTCBConst2>)
 800d9f2:	6819      	ldr	r1, [r3, #0]
 800d9f4:	6808      	ldr	r0, [r1, #0]
 800d9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fa:	f380 8809 	msr	PSP, r0
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f04f 0000 	mov.w	r0, #0
 800da06:	f380 8811 	msr	BASEPRI, r0
 800da0a:	4770      	bx	lr
 800da0c:	f3af 8000 	nop.w

0800da10 <pxCurrentTCBConst2>:
 800da10:	24000b70 	.word	0x24000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop

0800da18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da18:	4808      	ldr	r0, [pc, #32]	@ (800da3c <prvPortStartFirstTask+0x24>)
 800da1a:	6800      	ldr	r0, [r0, #0]
 800da1c:	6800      	ldr	r0, [r0, #0]
 800da1e:	f380 8808 	msr	MSP, r0
 800da22:	f04f 0000 	mov.w	r0, #0
 800da26:	f380 8814 	msr	CONTROL, r0
 800da2a:	b662      	cpsie	i
 800da2c:	b661      	cpsie	f
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	df00      	svc	0
 800da38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da3a:	bf00      	nop
 800da3c:	e000ed08 	.word	0xe000ed08

0800da40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da46:	4b47      	ldr	r3, [pc, #284]	@ (800db64 <xPortStartScheduler+0x124>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a47      	ldr	r2, [pc, #284]	@ (800db68 <xPortStartScheduler+0x128>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d10b      	bne.n	800da68 <xPortStartScheduler+0x28>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	60fb      	str	r3, [r7, #12]
}
 800da62:	bf00      	nop
 800da64:	bf00      	nop
 800da66:	e7fd      	b.n	800da64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da68:	4b3e      	ldr	r3, [pc, #248]	@ (800db64 <xPortStartScheduler+0x124>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a3f      	ldr	r2, [pc, #252]	@ (800db6c <xPortStartScheduler+0x12c>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d10b      	bne.n	800da8a <xPortStartScheduler+0x4a>
	__asm volatile
 800da72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da76:	f383 8811 	msr	BASEPRI, r3
 800da7a:	f3bf 8f6f 	isb	sy
 800da7e:	f3bf 8f4f 	dsb	sy
 800da82:	613b      	str	r3, [r7, #16]
}
 800da84:	bf00      	nop
 800da86:	bf00      	nop
 800da88:	e7fd      	b.n	800da86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da8a:	4b39      	ldr	r3, [pc, #228]	@ (800db70 <xPortStartScheduler+0x130>)
 800da8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	22ff      	movs	r2, #255	@ 0xff
 800da9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800daa4:	78fb      	ldrb	r3, [r7, #3]
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800daac:	b2da      	uxtb	r2, r3
 800daae:	4b31      	ldr	r3, [pc, #196]	@ (800db74 <xPortStartScheduler+0x134>)
 800dab0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dab2:	4b31      	ldr	r3, [pc, #196]	@ (800db78 <xPortStartScheduler+0x138>)
 800dab4:	2207      	movs	r2, #7
 800dab6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dab8:	e009      	b.n	800dace <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800daba:	4b2f      	ldr	r3, [pc, #188]	@ (800db78 <xPortStartScheduler+0x138>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	3b01      	subs	r3, #1
 800dac0:	4a2d      	ldr	r2, [pc, #180]	@ (800db78 <xPortStartScheduler+0x138>)
 800dac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dac4:	78fb      	ldrb	r3, [r7, #3]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dace:	78fb      	ldrb	r3, [r7, #3]
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dad6:	2b80      	cmp	r3, #128	@ 0x80
 800dad8:	d0ef      	beq.n	800daba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dada:	4b27      	ldr	r3, [pc, #156]	@ (800db78 <xPortStartScheduler+0x138>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f1c3 0307 	rsb	r3, r3, #7
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	d00b      	beq.n	800dafe <xPortStartScheduler+0xbe>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	60bb      	str	r3, [r7, #8]
}
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	e7fd      	b.n	800dafa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dafe:	4b1e      	ldr	r3, [pc, #120]	@ (800db78 <xPortStartScheduler+0x138>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	021b      	lsls	r3, r3, #8
 800db04:	4a1c      	ldr	r2, [pc, #112]	@ (800db78 <xPortStartScheduler+0x138>)
 800db06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db08:	4b1b      	ldr	r3, [pc, #108]	@ (800db78 <xPortStartScheduler+0x138>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800db10:	4a19      	ldr	r2, [pc, #100]	@ (800db78 <xPortStartScheduler+0x138>)
 800db12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	b2da      	uxtb	r2, r3
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db1c:	4b17      	ldr	r3, [pc, #92]	@ (800db7c <xPortStartScheduler+0x13c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a16      	ldr	r2, [pc, #88]	@ (800db7c <xPortStartScheduler+0x13c>)
 800db22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800db26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db28:	4b14      	ldr	r3, [pc, #80]	@ (800db7c <xPortStartScheduler+0x13c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a13      	ldr	r2, [pc, #76]	@ (800db7c <xPortStartScheduler+0x13c>)
 800db2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800db32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db34:	f000 f8da 	bl	800dcec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db38:	4b11      	ldr	r3, [pc, #68]	@ (800db80 <xPortStartScheduler+0x140>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db3e:	f000 f8f9 	bl	800dd34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db42:	4b10      	ldr	r3, [pc, #64]	@ (800db84 <xPortStartScheduler+0x144>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a0f      	ldr	r2, [pc, #60]	@ (800db84 <xPortStartScheduler+0x144>)
 800db48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800db4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db4e:	f7ff ff63 	bl	800da18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db52:	f7ff f83b 	bl	800cbcc <vTaskSwitchContext>
	prvTaskExitError();
 800db56:	f7ff ff19 	bl	800d98c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	e000ed00 	.word	0xe000ed00
 800db68:	410fc271 	.word	0x410fc271
 800db6c:	410fc270 	.word	0x410fc270
 800db70:	e000e400 	.word	0xe000e400
 800db74:	2400119c 	.word	0x2400119c
 800db78:	240011a0 	.word	0x240011a0
 800db7c:	e000ed20 	.word	0xe000ed20
 800db80:	2400001c 	.word	0x2400001c
 800db84:	e000ef34 	.word	0xe000ef34

0800db88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	607b      	str	r3, [r7, #4]
}
 800dba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dba2:	4b10      	ldr	r3, [pc, #64]	@ (800dbe4 <vPortEnterCritical+0x5c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	3301      	adds	r3, #1
 800dba8:	4a0e      	ldr	r2, [pc, #56]	@ (800dbe4 <vPortEnterCritical+0x5c>)
 800dbaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbac:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe4 <vPortEnterCritical+0x5c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d110      	bne.n	800dbd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbb4:	4b0c      	ldr	r3, [pc, #48]	@ (800dbe8 <vPortEnterCritical+0x60>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <vPortEnterCritical+0x4e>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	603b      	str	r3, [r7, #0]
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	e7fd      	b.n	800dbd2 <vPortEnterCritical+0x4a>
	}
}
 800dbd6:	bf00      	nop
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	2400001c 	.word	0x2400001c
 800dbe8:	e000ed04 	.word	0xe000ed04

0800dbec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbf2:	4b12      	ldr	r3, [pc, #72]	@ (800dc3c <vPortExitCritical+0x50>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10b      	bne.n	800dc12 <vPortExitCritical+0x26>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	607b      	str	r3, [r7, #4]
}
 800dc0c:	bf00      	nop
 800dc0e:	bf00      	nop
 800dc10:	e7fd      	b.n	800dc0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc12:	4b0a      	ldr	r3, [pc, #40]	@ (800dc3c <vPortExitCritical+0x50>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	4a08      	ldr	r2, [pc, #32]	@ (800dc3c <vPortExitCritical+0x50>)
 800dc1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc1c:	4b07      	ldr	r3, [pc, #28]	@ (800dc3c <vPortExitCritical+0x50>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d105      	bne.n	800dc30 <vPortExitCritical+0x44>
 800dc24:	2300      	movs	r3, #0
 800dc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	f383 8811 	msr	BASEPRI, r3
}
 800dc2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	2400001c 	.word	0x2400001c

0800dc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc40:	f3ef 8009 	mrs	r0, PSP
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	4b15      	ldr	r3, [pc, #84]	@ (800dca0 <pxCurrentTCBConst>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	f01e 0f10 	tst.w	lr, #16
 800dc50:	bf08      	it	eq
 800dc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5a:	6010      	str	r0, [r2, #0]
 800dc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dc64:	f380 8811 	msr	BASEPRI, r0
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f7fe ffac 	bl	800cbcc <vTaskSwitchContext>
 800dc74:	f04f 0000 	mov.w	r0, #0
 800dc78:	f380 8811 	msr	BASEPRI, r0
 800dc7c:	bc09      	pop	{r0, r3}
 800dc7e:	6819      	ldr	r1, [r3, #0]
 800dc80:	6808      	ldr	r0, [r1, #0]
 800dc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc86:	f01e 0f10 	tst.w	lr, #16
 800dc8a:	bf08      	it	eq
 800dc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc90:	f380 8809 	msr	PSP, r0
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w

0800dca0 <pxCurrentTCBConst>:
 800dca0:	24000b70 	.word	0x24000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dca4:	bf00      	nop
 800dca6:	bf00      	nop

0800dca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	607b      	str	r3, [r7, #4]
}
 800dcc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcc2:	f7fe fec9 	bl	800ca58 <xTaskIncrementTick>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dccc:	4b06      	ldr	r3, [pc, #24]	@ (800dce8 <xPortSysTickHandler+0x40>)
 800dcce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	f383 8811 	msr	BASEPRI, r3
}
 800dcde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcec:	b480      	push	{r7}
 800dcee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcf0:	4b0b      	ldr	r3, [pc, #44]	@ (800dd20 <vPortSetupTimerInterrupt+0x34>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcf6:	4b0b      	ldr	r3, [pc, #44]	@ (800dd24 <vPortSetupTimerInterrupt+0x38>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800dd28 <vPortSetupTimerInterrupt+0x3c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a0a      	ldr	r2, [pc, #40]	@ (800dd2c <vPortSetupTimerInterrupt+0x40>)
 800dd02:	fba2 2303 	umull	r2, r3, r2, r3
 800dd06:	099b      	lsrs	r3, r3, #6
 800dd08:	4a09      	ldr	r2, [pc, #36]	@ (800dd30 <vPortSetupTimerInterrupt+0x44>)
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd0e:	4b04      	ldr	r3, [pc, #16]	@ (800dd20 <vPortSetupTimerInterrupt+0x34>)
 800dd10:	2207      	movs	r2, #7
 800dd12:	601a      	str	r2, [r3, #0]
}
 800dd14:	bf00      	nop
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	e000e010 	.word	0xe000e010
 800dd24:	e000e018 	.word	0xe000e018
 800dd28:	2400000c 	.word	0x2400000c
 800dd2c:	10624dd3 	.word	0x10624dd3
 800dd30:	e000e014 	.word	0xe000e014

0800dd34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dd44 <vPortEnableVFP+0x10>
 800dd38:	6801      	ldr	r1, [r0, #0]
 800dd3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dd3e:	6001      	str	r1, [r0, #0]
 800dd40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd42:	bf00      	nop
 800dd44:	e000ed88 	.word	0xe000ed88

0800dd48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd4e:	f3ef 8305 	mrs	r3, IPSR
 800dd52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b0f      	cmp	r3, #15
 800dd58:	d915      	bls.n	800dd86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd5a:	4a18      	ldr	r2, [pc, #96]	@ (800ddbc <vPortValidateInterruptPriority+0x74>)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	4413      	add	r3, r2
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd64:	4b16      	ldr	r3, [pc, #88]	@ (800ddc0 <vPortValidateInterruptPriority+0x78>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	7afa      	ldrb	r2, [r7, #11]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d20b      	bcs.n	800dd86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	607b      	str	r3, [r7, #4]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd86:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc4 <vPortValidateInterruptPriority+0x7c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dd8e:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc8 <vPortValidateInterruptPriority+0x80>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d90b      	bls.n	800ddae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	603b      	str	r3, [r7, #0]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <vPortValidateInterruptPriority+0x62>
	}
 800ddae:	bf00      	nop
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	e000e3f0 	.word	0xe000e3f0
 800ddc0:	2400119c 	.word	0x2400119c
 800ddc4:	e000ed0c 	.word	0xe000ed0c
 800ddc8:	240011a0 	.word	0x240011a0

0800ddcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b08a      	sub	sp, #40	@ 0x28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ddd8:	f7fe fd82 	bl	800c8e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dddc:	4b5c      	ldr	r3, [pc, #368]	@ (800df50 <pvPortMalloc+0x184>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dde4:	f000 f924 	bl	800e030 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dde8:	4b5a      	ldr	r3, [pc, #360]	@ (800df54 <pvPortMalloc+0x188>)
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4013      	ands	r3, r2
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f040 8095 	bne.w	800df20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d01e      	beq.n	800de3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ddfc:	2208      	movs	r2, #8
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4413      	add	r3, r2
 800de02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f003 0307 	and.w	r3, r3, #7
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d015      	beq.n	800de3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f023 0307 	bic.w	r3, r3, #7
 800de14:	3308      	adds	r3, #8
 800de16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f003 0307 	and.w	r3, r3, #7
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00b      	beq.n	800de3a <pvPortMalloc+0x6e>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	617b      	str	r3, [r7, #20]
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	e7fd      	b.n	800de36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d06f      	beq.n	800df20 <pvPortMalloc+0x154>
 800de40:	4b45      	ldr	r3, [pc, #276]	@ (800df58 <pvPortMalloc+0x18c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	429a      	cmp	r2, r3
 800de48:	d86a      	bhi.n	800df20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de4a:	4b44      	ldr	r3, [pc, #272]	@ (800df5c <pvPortMalloc+0x190>)
 800de4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de4e:	4b43      	ldr	r3, [pc, #268]	@ (800df5c <pvPortMalloc+0x190>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de54:	e004      	b.n	800de60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800de56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	429a      	cmp	r2, r3
 800de68:	d903      	bls.n	800de72 <pvPortMalloc+0xa6>
 800de6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1f1      	bne.n	800de56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de72:	4b37      	ldr	r3, [pc, #220]	@ (800df50 <pvPortMalloc+0x184>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de78:	429a      	cmp	r2, r3
 800de7a:	d051      	beq.n	800df20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2208      	movs	r2, #8
 800de82:	4413      	add	r3, r2
 800de84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	1ad2      	subs	r2, r2, r3
 800de96:	2308      	movs	r3, #8
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d920      	bls.n	800dee0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4413      	add	r3, r2
 800dea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00b      	beq.n	800dec8 <pvPortMalloc+0xfc>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	613b      	str	r3, [r7, #16]
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	e7fd      	b.n	800dec4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ded4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800deda:	69b8      	ldr	r0, [r7, #24]
 800dedc:	f000 f90a 	bl	800e0f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dee0:	4b1d      	ldr	r3, [pc, #116]	@ (800df58 <pvPortMalloc+0x18c>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	4a1b      	ldr	r2, [pc, #108]	@ (800df58 <pvPortMalloc+0x18c>)
 800deec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800deee:	4b1a      	ldr	r3, [pc, #104]	@ (800df58 <pvPortMalloc+0x18c>)
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	4b1b      	ldr	r3, [pc, #108]	@ (800df60 <pvPortMalloc+0x194>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	429a      	cmp	r2, r3
 800def8:	d203      	bcs.n	800df02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800defa:	4b17      	ldr	r3, [pc, #92]	@ (800df58 <pvPortMalloc+0x18c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a18      	ldr	r2, [pc, #96]	@ (800df60 <pvPortMalloc+0x194>)
 800df00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	4b13      	ldr	r3, [pc, #76]	@ (800df54 <pvPortMalloc+0x188>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	431a      	orrs	r2, r3
 800df0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df12:	2200      	movs	r2, #0
 800df14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df16:	4b13      	ldr	r3, [pc, #76]	@ (800df64 <pvPortMalloc+0x198>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	3301      	adds	r3, #1
 800df1c:	4a11      	ldr	r2, [pc, #68]	@ (800df64 <pvPortMalloc+0x198>)
 800df1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df20:	f7fe fcec 	bl	800c8fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	f003 0307 	and.w	r3, r3, #7
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00b      	beq.n	800df46 <pvPortMalloc+0x17a>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	60fb      	str	r3, [r7, #12]
}
 800df40:	bf00      	nop
 800df42:	bf00      	nop
 800df44:	e7fd      	b.n	800df42 <pvPortMalloc+0x176>
	return pvReturn;
 800df46:	69fb      	ldr	r3, [r7, #28]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3728      	adds	r7, #40	@ 0x28
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	24004dac 	.word	0x24004dac
 800df54:	24004dc0 	.word	0x24004dc0
 800df58:	24004db0 	.word	0x24004db0
 800df5c:	24004da4 	.word	0x24004da4
 800df60:	24004db4 	.word	0x24004db4
 800df64:	24004db8 	.word	0x24004db8

0800df68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d04f      	beq.n	800e01a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df7a:	2308      	movs	r3, #8
 800df7c:	425b      	negs	r3, r3
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	4413      	add	r3, r2
 800df82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	4b25      	ldr	r3, [pc, #148]	@ (800e024 <vPortFree+0xbc>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4013      	ands	r3, r2
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10b      	bne.n	800dfae <vPortFree+0x46>
	__asm volatile
 800df96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	60fb      	str	r3, [r7, #12]
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	e7fd      	b.n	800dfaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00b      	beq.n	800dfce <vPortFree+0x66>
	__asm volatile
 800dfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	60bb      	str	r3, [r7, #8]
}
 800dfc8:	bf00      	nop
 800dfca:	bf00      	nop
 800dfcc:	e7fd      	b.n	800dfca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	685a      	ldr	r2, [r3, #4]
 800dfd2:	4b14      	ldr	r3, [pc, #80]	@ (800e024 <vPortFree+0xbc>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d01e      	beq.n	800e01a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d11a      	bne.n	800e01a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	4b0e      	ldr	r3, [pc, #56]	@ (800e024 <vPortFree+0xbc>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	43db      	mvns	r3, r3
 800dfee:	401a      	ands	r2, r3
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dff4:	f7fe fc74 	bl	800c8e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	4b0a      	ldr	r3, [pc, #40]	@ (800e028 <vPortFree+0xc0>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4413      	add	r3, r2
 800e002:	4a09      	ldr	r2, [pc, #36]	@ (800e028 <vPortFree+0xc0>)
 800e004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e006:	6938      	ldr	r0, [r7, #16]
 800e008:	f000 f874 	bl	800e0f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e00c:	4b07      	ldr	r3, [pc, #28]	@ (800e02c <vPortFree+0xc4>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3301      	adds	r3, #1
 800e012:	4a06      	ldr	r2, [pc, #24]	@ (800e02c <vPortFree+0xc4>)
 800e014:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e016:	f7fe fc71 	bl	800c8fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e01a:	bf00      	nop
 800e01c:	3718      	adds	r7, #24
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	24004dc0 	.word	0x24004dc0
 800e028:	24004db0 	.word	0x24004db0
 800e02c:	24004dbc 	.word	0x24004dbc

0800e030 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e036:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e03a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e03c:	4b27      	ldr	r3, [pc, #156]	@ (800e0dc <prvHeapInit+0xac>)
 800e03e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f003 0307 	and.w	r3, r3, #7
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00c      	beq.n	800e064 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3307      	adds	r3, #7
 800e04e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f023 0307 	bic.w	r3, r3, #7
 800e056:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	4a1f      	ldr	r2, [pc, #124]	@ (800e0dc <prvHeapInit+0xac>)
 800e060:	4413      	add	r3, r2
 800e062:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e068:	4a1d      	ldr	r2, [pc, #116]	@ (800e0e0 <prvHeapInit+0xb0>)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e06e:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e0 <prvHeapInit+0xb0>)
 800e070:	2200      	movs	r2, #0
 800e072:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	4413      	add	r3, r2
 800e07a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e07c:	2208      	movs	r2, #8
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	1a9b      	subs	r3, r3, r2
 800e082:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 0307 	bic.w	r3, r3, #7
 800e08a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	4a15      	ldr	r2, [pc, #84]	@ (800e0e4 <prvHeapInit+0xb4>)
 800e090:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e092:	4b14      	ldr	r3, [pc, #80]	@ (800e0e4 <prvHeapInit+0xb4>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2200      	movs	r2, #0
 800e098:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e09a:	4b12      	ldr	r3, [pc, #72]	@ (800e0e4 <prvHeapInit+0xb4>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	1ad2      	subs	r2, r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e4 <prvHeapInit+0xb4>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e0e8 <prvHeapInit+0xb8>)
 800e0be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	4a09      	ldr	r2, [pc, #36]	@ (800e0ec <prvHeapInit+0xbc>)
 800e0c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0c8:	4b09      	ldr	r3, [pc, #36]	@ (800e0f0 <prvHeapInit+0xc0>)
 800e0ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e0ce:	601a      	str	r2, [r3, #0]
}
 800e0d0:	bf00      	nop
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr
 800e0dc:	240011a4 	.word	0x240011a4
 800e0e0:	24004da4 	.word	0x24004da4
 800e0e4:	24004dac 	.word	0x24004dac
 800e0e8:	24004db4 	.word	0x24004db4
 800e0ec:	24004db0 	.word	0x24004db0
 800e0f0:	24004dc0 	.word	0x24004dc0

0800e0f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e0fc:	4b28      	ldr	r3, [pc, #160]	@ (800e1a0 <prvInsertBlockIntoFreeList+0xac>)
 800e0fe:	60fb      	str	r3, [r7, #12]
 800e100:	e002      	b.n	800e108 <prvInsertBlockIntoFreeList+0x14>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	60fb      	str	r3, [r7, #12]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d8f7      	bhi.n	800e102 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	4413      	add	r3, r2
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d108      	bne.n	800e136 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	685a      	ldr	r2, [r3, #4]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	441a      	add	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	441a      	add	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	429a      	cmp	r2, r3
 800e148:	d118      	bne.n	800e17c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	4b15      	ldr	r3, [pc, #84]	@ (800e1a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	429a      	cmp	r2, r3
 800e154:	d00d      	beq.n	800e172 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	441a      	add	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	601a      	str	r2, [r3, #0]
 800e170:	e008      	b.n	800e184 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e172:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	e003      	b.n	800e184 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d002      	beq.n	800e192 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e192:	bf00      	nop
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	24004da4 	.word	0x24004da4
 800e1a4:	24004dac 	.word	0x24004dac

0800e1a8 <malloc>:
 800e1a8:	4b02      	ldr	r3, [pc, #8]	@ (800e1b4 <malloc+0xc>)
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	6818      	ldr	r0, [r3, #0]
 800e1ae:	f000 b82d 	b.w	800e20c <_malloc_r>
 800e1b2:	bf00      	nop
 800e1b4:	24000198 	.word	0x24000198

0800e1b8 <free>:
 800e1b8:	4b02      	ldr	r3, [pc, #8]	@ (800e1c4 <free+0xc>)
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	6818      	ldr	r0, [r3, #0]
 800e1be:	f002 bde1 	b.w	8010d84 <_free_r>
 800e1c2:	bf00      	nop
 800e1c4:	24000198 	.word	0x24000198

0800e1c8 <sbrk_aligned>:
 800e1c8:	b570      	push	{r4, r5, r6, lr}
 800e1ca:	4e0f      	ldr	r6, [pc, #60]	@ (800e208 <sbrk_aligned+0x40>)
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	6831      	ldr	r1, [r6, #0]
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	b911      	cbnz	r1, 800e1da <sbrk_aligned+0x12>
 800e1d4:	f001 ff80 	bl	80100d8 <_sbrk_r>
 800e1d8:	6030      	str	r0, [r6, #0]
 800e1da:	4621      	mov	r1, r4
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f001 ff7b 	bl	80100d8 <_sbrk_r>
 800e1e2:	1c43      	adds	r3, r0, #1
 800e1e4:	d103      	bne.n	800e1ee <sbrk_aligned+0x26>
 800e1e6:	f04f 34ff 	mov.w	r4, #4294967295
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	bd70      	pop	{r4, r5, r6, pc}
 800e1ee:	1cc4      	adds	r4, r0, #3
 800e1f0:	f024 0403 	bic.w	r4, r4, #3
 800e1f4:	42a0      	cmp	r0, r4
 800e1f6:	d0f8      	beq.n	800e1ea <sbrk_aligned+0x22>
 800e1f8:	1a21      	subs	r1, r4, r0
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f001 ff6c 	bl	80100d8 <_sbrk_r>
 800e200:	3001      	adds	r0, #1
 800e202:	d1f2      	bne.n	800e1ea <sbrk_aligned+0x22>
 800e204:	e7ef      	b.n	800e1e6 <sbrk_aligned+0x1e>
 800e206:	bf00      	nop
 800e208:	24004dc4 	.word	0x24004dc4

0800e20c <_malloc_r>:
 800e20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e210:	1ccd      	adds	r5, r1, #3
 800e212:	f025 0503 	bic.w	r5, r5, #3
 800e216:	3508      	adds	r5, #8
 800e218:	2d0c      	cmp	r5, #12
 800e21a:	bf38      	it	cc
 800e21c:	250c      	movcc	r5, #12
 800e21e:	2d00      	cmp	r5, #0
 800e220:	4606      	mov	r6, r0
 800e222:	db01      	blt.n	800e228 <_malloc_r+0x1c>
 800e224:	42a9      	cmp	r1, r5
 800e226:	d904      	bls.n	800e232 <_malloc_r+0x26>
 800e228:	230c      	movs	r3, #12
 800e22a:	6033      	str	r3, [r6, #0]
 800e22c:	2000      	movs	r0, #0
 800e22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e308 <_malloc_r+0xfc>
 800e236:	f000 f869 	bl	800e30c <__malloc_lock>
 800e23a:	f8d8 3000 	ldr.w	r3, [r8]
 800e23e:	461c      	mov	r4, r3
 800e240:	bb44      	cbnz	r4, 800e294 <_malloc_r+0x88>
 800e242:	4629      	mov	r1, r5
 800e244:	4630      	mov	r0, r6
 800e246:	f7ff ffbf 	bl	800e1c8 <sbrk_aligned>
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	4604      	mov	r4, r0
 800e24e:	d158      	bne.n	800e302 <_malloc_r+0xf6>
 800e250:	f8d8 4000 	ldr.w	r4, [r8]
 800e254:	4627      	mov	r7, r4
 800e256:	2f00      	cmp	r7, #0
 800e258:	d143      	bne.n	800e2e2 <_malloc_r+0xd6>
 800e25a:	2c00      	cmp	r4, #0
 800e25c:	d04b      	beq.n	800e2f6 <_malloc_r+0xea>
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	4639      	mov	r1, r7
 800e262:	4630      	mov	r0, r6
 800e264:	eb04 0903 	add.w	r9, r4, r3
 800e268:	f001 ff36 	bl	80100d8 <_sbrk_r>
 800e26c:	4581      	cmp	r9, r0
 800e26e:	d142      	bne.n	800e2f6 <_malloc_r+0xea>
 800e270:	6821      	ldr	r1, [r4, #0]
 800e272:	1a6d      	subs	r5, r5, r1
 800e274:	4629      	mov	r1, r5
 800e276:	4630      	mov	r0, r6
 800e278:	f7ff ffa6 	bl	800e1c8 <sbrk_aligned>
 800e27c:	3001      	adds	r0, #1
 800e27e:	d03a      	beq.n	800e2f6 <_malloc_r+0xea>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	442b      	add	r3, r5
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	f8d8 3000 	ldr.w	r3, [r8]
 800e28a:	685a      	ldr	r2, [r3, #4]
 800e28c:	bb62      	cbnz	r2, 800e2e8 <_malloc_r+0xdc>
 800e28e:	f8c8 7000 	str.w	r7, [r8]
 800e292:	e00f      	b.n	800e2b4 <_malloc_r+0xa8>
 800e294:	6822      	ldr	r2, [r4, #0]
 800e296:	1b52      	subs	r2, r2, r5
 800e298:	d420      	bmi.n	800e2dc <_malloc_r+0xd0>
 800e29a:	2a0b      	cmp	r2, #11
 800e29c:	d917      	bls.n	800e2ce <_malloc_r+0xc2>
 800e29e:	1961      	adds	r1, r4, r5
 800e2a0:	42a3      	cmp	r3, r4
 800e2a2:	6025      	str	r5, [r4, #0]
 800e2a4:	bf18      	it	ne
 800e2a6:	6059      	strne	r1, [r3, #4]
 800e2a8:	6863      	ldr	r3, [r4, #4]
 800e2aa:	bf08      	it	eq
 800e2ac:	f8c8 1000 	streq.w	r1, [r8]
 800e2b0:	5162      	str	r2, [r4, r5]
 800e2b2:	604b      	str	r3, [r1, #4]
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f000 f82f 	bl	800e318 <__malloc_unlock>
 800e2ba:	f104 000b 	add.w	r0, r4, #11
 800e2be:	1d23      	adds	r3, r4, #4
 800e2c0:	f020 0007 	bic.w	r0, r0, #7
 800e2c4:	1ac2      	subs	r2, r0, r3
 800e2c6:	bf1c      	itt	ne
 800e2c8:	1a1b      	subne	r3, r3, r0
 800e2ca:	50a3      	strne	r3, [r4, r2]
 800e2cc:	e7af      	b.n	800e22e <_malloc_r+0x22>
 800e2ce:	6862      	ldr	r2, [r4, #4]
 800e2d0:	42a3      	cmp	r3, r4
 800e2d2:	bf0c      	ite	eq
 800e2d4:	f8c8 2000 	streq.w	r2, [r8]
 800e2d8:	605a      	strne	r2, [r3, #4]
 800e2da:	e7eb      	b.n	800e2b4 <_malloc_r+0xa8>
 800e2dc:	4623      	mov	r3, r4
 800e2de:	6864      	ldr	r4, [r4, #4]
 800e2e0:	e7ae      	b.n	800e240 <_malloc_r+0x34>
 800e2e2:	463c      	mov	r4, r7
 800e2e4:	687f      	ldr	r7, [r7, #4]
 800e2e6:	e7b6      	b.n	800e256 <_malloc_r+0x4a>
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	42a3      	cmp	r3, r4
 800e2ee:	d1fb      	bne.n	800e2e8 <_malloc_r+0xdc>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	6053      	str	r3, [r2, #4]
 800e2f4:	e7de      	b.n	800e2b4 <_malloc_r+0xa8>
 800e2f6:	230c      	movs	r3, #12
 800e2f8:	6033      	str	r3, [r6, #0]
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f000 f80c 	bl	800e318 <__malloc_unlock>
 800e300:	e794      	b.n	800e22c <_malloc_r+0x20>
 800e302:	6005      	str	r5, [r0, #0]
 800e304:	e7d6      	b.n	800e2b4 <_malloc_r+0xa8>
 800e306:	bf00      	nop
 800e308:	24004dc8 	.word	0x24004dc8

0800e30c <__malloc_lock>:
 800e30c:	4801      	ldr	r0, [pc, #4]	@ (800e314 <__malloc_lock+0x8>)
 800e30e:	f001 bf30 	b.w	8010172 <__retarget_lock_acquire_recursive>
 800e312:	bf00      	nop
 800e314:	24004f0c 	.word	0x24004f0c

0800e318 <__malloc_unlock>:
 800e318:	4801      	ldr	r0, [pc, #4]	@ (800e320 <__malloc_unlock+0x8>)
 800e31a:	f001 bf2b 	b.w	8010174 <__retarget_lock_release_recursive>
 800e31e:	bf00      	nop
 800e320:	24004f0c 	.word	0x24004f0c

0800e324 <realloc>:
 800e324:	4b02      	ldr	r3, [pc, #8]	@ (800e330 <realloc+0xc>)
 800e326:	460a      	mov	r2, r1
 800e328:	4601      	mov	r1, r0
 800e32a:	6818      	ldr	r0, [r3, #0]
 800e32c:	f000 b802 	b.w	800e334 <_realloc_r>
 800e330:	24000198 	.word	0x24000198

0800e334 <_realloc_r>:
 800e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	4607      	mov	r7, r0
 800e33a:	4614      	mov	r4, r2
 800e33c:	460d      	mov	r5, r1
 800e33e:	b921      	cbnz	r1, 800e34a <_realloc_r+0x16>
 800e340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e344:	4611      	mov	r1, r2
 800e346:	f7ff bf61 	b.w	800e20c <_malloc_r>
 800e34a:	b92a      	cbnz	r2, 800e358 <_realloc_r+0x24>
 800e34c:	f002 fd1a 	bl	8010d84 <_free_r>
 800e350:	4625      	mov	r5, r4
 800e352:	4628      	mov	r0, r5
 800e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e358:	f003 fd51 	bl	8011dfe <_malloc_usable_size_r>
 800e35c:	4284      	cmp	r4, r0
 800e35e:	4606      	mov	r6, r0
 800e360:	d802      	bhi.n	800e368 <_realloc_r+0x34>
 800e362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e366:	d8f4      	bhi.n	800e352 <_realloc_r+0x1e>
 800e368:	4621      	mov	r1, r4
 800e36a:	4638      	mov	r0, r7
 800e36c:	f7ff ff4e 	bl	800e20c <_malloc_r>
 800e370:	4680      	mov	r8, r0
 800e372:	b908      	cbnz	r0, 800e378 <_realloc_r+0x44>
 800e374:	4645      	mov	r5, r8
 800e376:	e7ec      	b.n	800e352 <_realloc_r+0x1e>
 800e378:	42b4      	cmp	r4, r6
 800e37a:	4622      	mov	r2, r4
 800e37c:	4629      	mov	r1, r5
 800e37e:	bf28      	it	cs
 800e380:	4632      	movcs	r2, r6
 800e382:	f001 fef8 	bl	8010176 <memcpy>
 800e386:	4629      	mov	r1, r5
 800e388:	4638      	mov	r0, r7
 800e38a:	f002 fcfb 	bl	8010d84 <_free_r>
 800e38e:	e7f1      	b.n	800e374 <_realloc_r+0x40>

0800e390 <sulp>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	4604      	mov	r4, r0
 800e394:	460d      	mov	r5, r1
 800e396:	4616      	mov	r6, r2
 800e398:	ec45 4b10 	vmov	d0, r4, r5
 800e39c:	f003 fbf4 	bl	8011b88 <__ulp>
 800e3a0:	b17e      	cbz	r6, 800e3c2 <sulp+0x32>
 800e3a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e3a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dd09      	ble.n	800e3c2 <sulp+0x32>
 800e3ae:	051b      	lsls	r3, r3, #20
 800e3b0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e3ba:	ec41 0b17 	vmov	d7, r0, r1
 800e3be:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3c2:	bd70      	pop	{r4, r5, r6, pc}
 800e3c4:	0000      	movs	r0, r0
	...

0800e3c8 <_strtod_l>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	ed2d 8b0a 	vpush	{d8-d12}
 800e3d0:	b097      	sub	sp, #92	@ 0x5c
 800e3d2:	4688      	mov	r8, r1
 800e3d4:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	9212      	str	r2, [sp, #72]	@ 0x48
 800e3da:	9005      	str	r0, [sp, #20]
 800e3dc:	f04f 0a00 	mov.w	sl, #0
 800e3e0:	f04f 0b00 	mov.w	fp, #0
 800e3e4:	460a      	mov	r2, r1
 800e3e6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e3e8:	7811      	ldrb	r1, [r2, #0]
 800e3ea:	292b      	cmp	r1, #43	@ 0x2b
 800e3ec:	d04c      	beq.n	800e488 <_strtod_l+0xc0>
 800e3ee:	d839      	bhi.n	800e464 <_strtod_l+0x9c>
 800e3f0:	290d      	cmp	r1, #13
 800e3f2:	d833      	bhi.n	800e45c <_strtod_l+0x94>
 800e3f4:	2908      	cmp	r1, #8
 800e3f6:	d833      	bhi.n	800e460 <_strtod_l+0x98>
 800e3f8:	2900      	cmp	r1, #0
 800e3fa:	d03c      	beq.n	800e476 <_strtod_l+0xae>
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	9208      	str	r2, [sp, #32]
 800e400:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e402:	782a      	ldrb	r2, [r5, #0]
 800e404:	2a30      	cmp	r2, #48	@ 0x30
 800e406:	f040 80b7 	bne.w	800e578 <_strtod_l+0x1b0>
 800e40a:	786a      	ldrb	r2, [r5, #1]
 800e40c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e410:	2a58      	cmp	r2, #88	@ 0x58
 800e412:	d170      	bne.n	800e4f6 <_strtod_l+0x12e>
 800e414:	9302      	str	r3, [sp, #8]
 800e416:	9b08      	ldr	r3, [sp, #32]
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	ab12      	add	r3, sp, #72	@ 0x48
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4a90      	ldr	r2, [pc, #576]	@ (800e660 <_strtod_l+0x298>)
 800e420:	9805      	ldr	r0, [sp, #20]
 800e422:	ab13      	add	r3, sp, #76	@ 0x4c
 800e424:	a911      	add	r1, sp, #68	@ 0x44
 800e426:	f002 fd5f 	bl	8010ee8 <__gethex>
 800e42a:	f010 060f 	ands.w	r6, r0, #15
 800e42e:	4604      	mov	r4, r0
 800e430:	d005      	beq.n	800e43e <_strtod_l+0x76>
 800e432:	2e06      	cmp	r6, #6
 800e434:	d12a      	bne.n	800e48c <_strtod_l+0xc4>
 800e436:	3501      	adds	r5, #1
 800e438:	2300      	movs	r3, #0
 800e43a:	9511      	str	r5, [sp, #68]	@ 0x44
 800e43c:	9308      	str	r3, [sp, #32]
 800e43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e440:	2b00      	cmp	r3, #0
 800e442:	f040 8537 	bne.w	800eeb4 <_strtod_l+0xaec>
 800e446:	9b08      	ldr	r3, [sp, #32]
 800e448:	ec4b ab10 	vmov	d0, sl, fp
 800e44c:	b1cb      	cbz	r3, 800e482 <_strtod_l+0xba>
 800e44e:	eeb1 0b40 	vneg.f64	d0, d0
 800e452:	b017      	add	sp, #92	@ 0x5c
 800e454:	ecbd 8b0a 	vpop	{d8-d12}
 800e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45c:	2920      	cmp	r1, #32
 800e45e:	d1cd      	bne.n	800e3fc <_strtod_l+0x34>
 800e460:	3201      	adds	r2, #1
 800e462:	e7c0      	b.n	800e3e6 <_strtod_l+0x1e>
 800e464:	292d      	cmp	r1, #45	@ 0x2d
 800e466:	d1c9      	bne.n	800e3fc <_strtod_l+0x34>
 800e468:	2101      	movs	r1, #1
 800e46a:	9108      	str	r1, [sp, #32]
 800e46c:	1c51      	adds	r1, r2, #1
 800e46e:	9111      	str	r1, [sp, #68]	@ 0x44
 800e470:	7852      	ldrb	r2, [r2, #1]
 800e472:	2a00      	cmp	r2, #0
 800e474:	d1c4      	bne.n	800e400 <_strtod_l+0x38>
 800e476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e478:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f040 8517 	bne.w	800eeb0 <_strtod_l+0xae8>
 800e482:	ec4b ab10 	vmov	d0, sl, fp
 800e486:	e7e4      	b.n	800e452 <_strtod_l+0x8a>
 800e488:	2100      	movs	r1, #0
 800e48a:	e7ee      	b.n	800e46a <_strtod_l+0xa2>
 800e48c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e48e:	b13a      	cbz	r2, 800e4a0 <_strtod_l+0xd8>
 800e490:	2135      	movs	r1, #53	@ 0x35
 800e492:	a814      	add	r0, sp, #80	@ 0x50
 800e494:	f003 fc6f 	bl	8011d76 <__copybits>
 800e498:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e49a:	9805      	ldr	r0, [sp, #20]
 800e49c:	f003 f848 	bl	8011530 <_Bfree>
 800e4a0:	1e73      	subs	r3, r6, #1
 800e4a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e4a4:	2b04      	cmp	r3, #4
 800e4a6:	d806      	bhi.n	800e4b6 <_strtod_l+0xee>
 800e4a8:	e8df f003 	tbb	[pc, r3]
 800e4ac:	201d0314 	.word	0x201d0314
 800e4b0:	14          	.byte	0x14
 800e4b1:	00          	.byte	0x00
 800e4b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e4b6:	05e3      	lsls	r3, r4, #23
 800e4b8:	bf48      	it	mi
 800e4ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e4be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4c2:	0d1b      	lsrs	r3, r3, #20
 800e4c4:	051b      	lsls	r3, r3, #20
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1b9      	bne.n	800e43e <_strtod_l+0x76>
 800e4ca:	f001 fe27 	bl	801011c <__errno>
 800e4ce:	2322      	movs	r3, #34	@ 0x22
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	e7b4      	b.n	800e43e <_strtod_l+0x76>
 800e4d4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e4d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e4dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e4e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e4e4:	e7e7      	b.n	800e4b6 <_strtod_l+0xee>
 800e4e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e668 <_strtod_l+0x2a0>
 800e4ea:	e7e4      	b.n	800e4b6 <_strtod_l+0xee>
 800e4ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e4f0:	f04f 3aff 	mov.w	sl, #4294967295
 800e4f4:	e7df      	b.n	800e4b6 <_strtod_l+0xee>
 800e4f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4fc:	785b      	ldrb	r3, [r3, #1]
 800e4fe:	2b30      	cmp	r3, #48	@ 0x30
 800e500:	d0f9      	beq.n	800e4f6 <_strtod_l+0x12e>
 800e502:	2b00      	cmp	r3, #0
 800e504:	d09b      	beq.n	800e43e <_strtod_l+0x76>
 800e506:	2301      	movs	r3, #1
 800e508:	9307      	str	r3, [sp, #28]
 800e50a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e50c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e50e:	2300      	movs	r3, #0
 800e510:	9306      	str	r3, [sp, #24]
 800e512:	4699      	mov	r9, r3
 800e514:	461d      	mov	r5, r3
 800e516:	220a      	movs	r2, #10
 800e518:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e51a:	7804      	ldrb	r4, [r0, #0]
 800e51c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e520:	b2d9      	uxtb	r1, r3
 800e522:	2909      	cmp	r1, #9
 800e524:	d92a      	bls.n	800e57c <_strtod_l+0x1b4>
 800e526:	494f      	ldr	r1, [pc, #316]	@ (800e664 <_strtod_l+0x29c>)
 800e528:	2201      	movs	r2, #1
 800e52a:	f001 fd8b 	bl	8010044 <strncmp>
 800e52e:	b398      	cbz	r0, 800e598 <_strtod_l+0x1d0>
 800e530:	2000      	movs	r0, #0
 800e532:	4622      	mov	r2, r4
 800e534:	462b      	mov	r3, r5
 800e536:	4607      	mov	r7, r0
 800e538:	4601      	mov	r1, r0
 800e53a:	2a65      	cmp	r2, #101	@ 0x65
 800e53c:	d001      	beq.n	800e542 <_strtod_l+0x17a>
 800e53e:	2a45      	cmp	r2, #69	@ 0x45
 800e540:	d118      	bne.n	800e574 <_strtod_l+0x1ac>
 800e542:	b91b      	cbnz	r3, 800e54c <_strtod_l+0x184>
 800e544:	9b07      	ldr	r3, [sp, #28]
 800e546:	4303      	orrs	r3, r0
 800e548:	d095      	beq.n	800e476 <_strtod_l+0xae>
 800e54a:	2300      	movs	r3, #0
 800e54c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e550:	f108 0201 	add.w	r2, r8, #1
 800e554:	9211      	str	r2, [sp, #68]	@ 0x44
 800e556:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e55a:	2a2b      	cmp	r2, #43	@ 0x2b
 800e55c:	d074      	beq.n	800e648 <_strtod_l+0x280>
 800e55e:	2a2d      	cmp	r2, #45	@ 0x2d
 800e560:	d07a      	beq.n	800e658 <_strtod_l+0x290>
 800e562:	f04f 0e00 	mov.w	lr, #0
 800e566:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e56a:	2c09      	cmp	r4, #9
 800e56c:	f240 8082 	bls.w	800e674 <_strtod_l+0x2ac>
 800e570:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e574:	2400      	movs	r4, #0
 800e576:	e09d      	b.n	800e6b4 <_strtod_l+0x2ec>
 800e578:	2300      	movs	r3, #0
 800e57a:	e7c5      	b.n	800e508 <_strtod_l+0x140>
 800e57c:	2d08      	cmp	r5, #8
 800e57e:	bfc8      	it	gt
 800e580:	9906      	ldrgt	r1, [sp, #24]
 800e582:	f100 0001 	add.w	r0, r0, #1
 800e586:	bfca      	itet	gt
 800e588:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e58c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e590:	9306      	strgt	r3, [sp, #24]
 800e592:	3501      	adds	r5, #1
 800e594:	9011      	str	r0, [sp, #68]	@ 0x44
 800e596:	e7bf      	b.n	800e518 <_strtod_l+0x150>
 800e598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	9211      	str	r2, [sp, #68]	@ 0x44
 800e59e:	785a      	ldrb	r2, [r3, #1]
 800e5a0:	b3bd      	cbz	r5, 800e612 <_strtod_l+0x24a>
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	462b      	mov	r3, r5
 800e5a6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e5aa:	2909      	cmp	r1, #9
 800e5ac:	d912      	bls.n	800e5d4 <_strtod_l+0x20c>
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	e7c3      	b.n	800e53a <_strtod_l+0x172>
 800e5b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5b4:	1c5a      	adds	r2, r3, #1
 800e5b6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5b8:	785a      	ldrb	r2, [r3, #1]
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	2a30      	cmp	r2, #48	@ 0x30
 800e5be:	d0f8      	beq.n	800e5b2 <_strtod_l+0x1ea>
 800e5c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	f200 847a 	bhi.w	800eebe <_strtod_l+0xaf6>
 800e5ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5ce:	4607      	mov	r7, r0
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	3a30      	subs	r2, #48	@ 0x30
 800e5d6:	f100 0101 	add.w	r1, r0, #1
 800e5da:	d014      	beq.n	800e606 <_strtod_l+0x23e>
 800e5dc:	440f      	add	r7, r1
 800e5de:	469c      	mov	ip, r3
 800e5e0:	f04f 0e0a 	mov.w	lr, #10
 800e5e4:	f10c 0401 	add.w	r4, ip, #1
 800e5e8:	1ae6      	subs	r6, r4, r3
 800e5ea:	42b1      	cmp	r1, r6
 800e5ec:	dc13      	bgt.n	800e616 <_strtod_l+0x24e>
 800e5ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e5f2:	1819      	adds	r1, r3, r0
 800e5f4:	2908      	cmp	r1, #8
 800e5f6:	f103 0301 	add.w	r3, r3, #1
 800e5fa:	4403      	add	r3, r0
 800e5fc:	dc19      	bgt.n	800e632 <_strtod_l+0x26a>
 800e5fe:	210a      	movs	r1, #10
 800e600:	fb01 2909 	mla	r9, r1, r9, r2
 800e604:	2100      	movs	r1, #0
 800e606:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e608:	1c50      	adds	r0, r2, #1
 800e60a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e60c:	7852      	ldrb	r2, [r2, #1]
 800e60e:	4608      	mov	r0, r1
 800e610:	e7c9      	b.n	800e5a6 <_strtod_l+0x1de>
 800e612:	4628      	mov	r0, r5
 800e614:	e7d2      	b.n	800e5bc <_strtod_l+0x1f4>
 800e616:	f1bc 0f08 	cmp.w	ip, #8
 800e61a:	dc03      	bgt.n	800e624 <_strtod_l+0x25c>
 800e61c:	fb0e f909 	mul.w	r9, lr, r9
 800e620:	46a4      	mov	ip, r4
 800e622:	e7df      	b.n	800e5e4 <_strtod_l+0x21c>
 800e624:	2c10      	cmp	r4, #16
 800e626:	bfde      	ittt	le
 800e628:	9e06      	ldrle	r6, [sp, #24]
 800e62a:	fb0e f606 	mulle.w	r6, lr, r6
 800e62e:	9606      	strle	r6, [sp, #24]
 800e630:	e7f6      	b.n	800e620 <_strtod_l+0x258>
 800e632:	290f      	cmp	r1, #15
 800e634:	bfdf      	itttt	le
 800e636:	9806      	ldrle	r0, [sp, #24]
 800e638:	210a      	movle	r1, #10
 800e63a:	fb01 2200 	mlale	r2, r1, r0, r2
 800e63e:	9206      	strle	r2, [sp, #24]
 800e640:	e7e0      	b.n	800e604 <_strtod_l+0x23c>
 800e642:	2700      	movs	r7, #0
 800e644:	2101      	movs	r1, #1
 800e646:	e77d      	b.n	800e544 <_strtod_l+0x17c>
 800e648:	f04f 0e00 	mov.w	lr, #0
 800e64c:	f108 0202 	add.w	r2, r8, #2
 800e650:	9211      	str	r2, [sp, #68]	@ 0x44
 800e652:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e656:	e786      	b.n	800e566 <_strtod_l+0x19e>
 800e658:	f04f 0e01 	mov.w	lr, #1
 800e65c:	e7f6      	b.n	800e64c <_strtod_l+0x284>
 800e65e:	bf00      	nop
 800e660:	08013424 	.word	0x08013424
 800e664:	08013220 	.word	0x08013220
 800e668:	7ff00000 	.word	0x7ff00000
 800e66c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e66e:	1c54      	adds	r4, r2, #1
 800e670:	9411      	str	r4, [sp, #68]	@ 0x44
 800e672:	7852      	ldrb	r2, [r2, #1]
 800e674:	2a30      	cmp	r2, #48	@ 0x30
 800e676:	d0f9      	beq.n	800e66c <_strtod_l+0x2a4>
 800e678:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e67c:	2c08      	cmp	r4, #8
 800e67e:	f63f af79 	bhi.w	800e574 <_strtod_l+0x1ac>
 800e682:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e686:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e688:	9209      	str	r2, [sp, #36]	@ 0x24
 800e68a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e68c:	1c54      	adds	r4, r2, #1
 800e68e:	9411      	str	r4, [sp, #68]	@ 0x44
 800e690:	7852      	ldrb	r2, [r2, #1]
 800e692:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800e696:	2e09      	cmp	r6, #9
 800e698:	d937      	bls.n	800e70a <_strtod_l+0x342>
 800e69a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e69c:	1ba4      	subs	r4, r4, r6
 800e69e:	2c08      	cmp	r4, #8
 800e6a0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e6a4:	dc02      	bgt.n	800e6ac <_strtod_l+0x2e4>
 800e6a6:	4564      	cmp	r4, ip
 800e6a8:	bfa8      	it	ge
 800e6aa:	4664      	movge	r4, ip
 800e6ac:	f1be 0f00 	cmp.w	lr, #0
 800e6b0:	d000      	beq.n	800e6b4 <_strtod_l+0x2ec>
 800e6b2:	4264      	negs	r4, r4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d14d      	bne.n	800e754 <_strtod_l+0x38c>
 800e6b8:	9b07      	ldr	r3, [sp, #28]
 800e6ba:	4318      	orrs	r0, r3
 800e6bc:	f47f aebf 	bne.w	800e43e <_strtod_l+0x76>
 800e6c0:	2900      	cmp	r1, #0
 800e6c2:	f47f aed8 	bne.w	800e476 <_strtod_l+0xae>
 800e6c6:	2a69      	cmp	r2, #105	@ 0x69
 800e6c8:	d027      	beq.n	800e71a <_strtod_l+0x352>
 800e6ca:	dc24      	bgt.n	800e716 <_strtod_l+0x34e>
 800e6cc:	2a49      	cmp	r2, #73	@ 0x49
 800e6ce:	d024      	beq.n	800e71a <_strtod_l+0x352>
 800e6d0:	2a4e      	cmp	r2, #78	@ 0x4e
 800e6d2:	f47f aed0 	bne.w	800e476 <_strtod_l+0xae>
 800e6d6:	4997      	ldr	r1, [pc, #604]	@ (800e934 <_strtod_l+0x56c>)
 800e6d8:	a811      	add	r0, sp, #68	@ 0x44
 800e6da:	f002 fe27 	bl	801132c <__match>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f43f aec9 	beq.w	800e476 <_strtod_l+0xae>
 800e6e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	2b28      	cmp	r3, #40	@ 0x28
 800e6ea:	d12d      	bne.n	800e748 <_strtod_l+0x380>
 800e6ec:	4992      	ldr	r1, [pc, #584]	@ (800e938 <_strtod_l+0x570>)
 800e6ee:	aa14      	add	r2, sp, #80	@ 0x50
 800e6f0:	a811      	add	r0, sp, #68	@ 0x44
 800e6f2:	f002 fe2f 	bl	8011354 <__hexnan>
 800e6f6:	2805      	cmp	r0, #5
 800e6f8:	d126      	bne.n	800e748 <_strtod_l+0x380>
 800e6fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e6fc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e700:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e704:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e708:	e699      	b.n	800e43e <_strtod_l+0x76>
 800e70a:	240a      	movs	r4, #10
 800e70c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e710:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e714:	e7b9      	b.n	800e68a <_strtod_l+0x2c2>
 800e716:	2a6e      	cmp	r2, #110	@ 0x6e
 800e718:	e7db      	b.n	800e6d2 <_strtod_l+0x30a>
 800e71a:	4988      	ldr	r1, [pc, #544]	@ (800e93c <_strtod_l+0x574>)
 800e71c:	a811      	add	r0, sp, #68	@ 0x44
 800e71e:	f002 fe05 	bl	801132c <__match>
 800e722:	2800      	cmp	r0, #0
 800e724:	f43f aea7 	beq.w	800e476 <_strtod_l+0xae>
 800e728:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e72a:	4985      	ldr	r1, [pc, #532]	@ (800e940 <_strtod_l+0x578>)
 800e72c:	3b01      	subs	r3, #1
 800e72e:	a811      	add	r0, sp, #68	@ 0x44
 800e730:	9311      	str	r3, [sp, #68]	@ 0x44
 800e732:	f002 fdfb 	bl	801132c <__match>
 800e736:	b910      	cbnz	r0, 800e73e <_strtod_l+0x376>
 800e738:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e73a:	3301      	adds	r3, #1
 800e73c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e73e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e954 <_strtod_l+0x58c>
 800e742:	f04f 0a00 	mov.w	sl, #0
 800e746:	e67a      	b.n	800e43e <_strtod_l+0x76>
 800e748:	487e      	ldr	r0, [pc, #504]	@ (800e944 <_strtod_l+0x57c>)
 800e74a:	f001 fd25 	bl	8010198 <nan>
 800e74e:	ec5b ab10 	vmov	sl, fp, d0
 800e752:	e674      	b.n	800e43e <_strtod_l+0x76>
 800e754:	ee07 9a90 	vmov	s15, r9
 800e758:	1be2      	subs	r2, r4, r7
 800e75a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e75e:	2d00      	cmp	r5, #0
 800e760:	bf08      	it	eq
 800e762:	461d      	moveq	r5, r3
 800e764:	2b10      	cmp	r3, #16
 800e766:	9209      	str	r2, [sp, #36]	@ 0x24
 800e768:	461a      	mov	r2, r3
 800e76a:	bfa8      	it	ge
 800e76c:	2210      	movge	r2, #16
 800e76e:	2b09      	cmp	r3, #9
 800e770:	ec5b ab17 	vmov	sl, fp, d7
 800e774:	dc15      	bgt.n	800e7a2 <_strtod_l+0x3da>
 800e776:	1be1      	subs	r1, r4, r7
 800e778:	2900      	cmp	r1, #0
 800e77a:	f43f ae60 	beq.w	800e43e <_strtod_l+0x76>
 800e77e:	eba4 0107 	sub.w	r1, r4, r7
 800e782:	dd72      	ble.n	800e86a <_strtod_l+0x4a2>
 800e784:	2916      	cmp	r1, #22
 800e786:	dc59      	bgt.n	800e83c <_strtod_l+0x474>
 800e788:	4b6f      	ldr	r3, [pc, #444]	@ (800e948 <_strtod_l+0x580>)
 800e78a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e790:	ed93 7b00 	vldr	d7, [r3]
 800e794:	ec4b ab16 	vmov	d6, sl, fp
 800e798:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e79c:	ec5b ab17 	vmov	sl, fp, d7
 800e7a0:	e64d      	b.n	800e43e <_strtod_l+0x76>
 800e7a2:	4969      	ldr	r1, [pc, #420]	@ (800e948 <_strtod_l+0x580>)
 800e7a4:	eddd 6a06 	vldr	s13, [sp, #24]
 800e7a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e7ac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e7b0:	2b0f      	cmp	r3, #15
 800e7b2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e7b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e7ba:	ec5b ab16 	vmov	sl, fp, d6
 800e7be:	ddda      	ble.n	800e776 <_strtod_l+0x3ae>
 800e7c0:	1a9a      	subs	r2, r3, r2
 800e7c2:	1be1      	subs	r1, r4, r7
 800e7c4:	440a      	add	r2, r1
 800e7c6:	2a00      	cmp	r2, #0
 800e7c8:	f340 8094 	ble.w	800e8f4 <_strtod_l+0x52c>
 800e7cc:	f012 000f 	ands.w	r0, r2, #15
 800e7d0:	d00a      	beq.n	800e7e8 <_strtod_l+0x420>
 800e7d2:	495d      	ldr	r1, [pc, #372]	@ (800e948 <_strtod_l+0x580>)
 800e7d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e7d8:	ed91 7b00 	vldr	d7, [r1]
 800e7dc:	ec4b ab16 	vmov	d6, sl, fp
 800e7e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7e4:	ec5b ab17 	vmov	sl, fp, d7
 800e7e8:	f032 020f 	bics.w	r2, r2, #15
 800e7ec:	d073      	beq.n	800e8d6 <_strtod_l+0x50e>
 800e7ee:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e7f2:	dd47      	ble.n	800e884 <_strtod_l+0x4bc>
 800e7f4:	2400      	movs	r4, #0
 800e7f6:	4625      	mov	r5, r4
 800e7f8:	9407      	str	r4, [sp, #28]
 800e7fa:	4626      	mov	r6, r4
 800e7fc:	9a05      	ldr	r2, [sp, #20]
 800e7fe:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e954 <_strtod_l+0x58c>
 800e802:	2322      	movs	r3, #34	@ 0x22
 800e804:	6013      	str	r3, [r2, #0]
 800e806:	f04f 0a00 	mov.w	sl, #0
 800e80a:	9b07      	ldr	r3, [sp, #28]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f43f ae16 	beq.w	800e43e <_strtod_l+0x76>
 800e812:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e814:	9805      	ldr	r0, [sp, #20]
 800e816:	f002 fe8b 	bl	8011530 <_Bfree>
 800e81a:	9805      	ldr	r0, [sp, #20]
 800e81c:	4631      	mov	r1, r6
 800e81e:	f002 fe87 	bl	8011530 <_Bfree>
 800e822:	9805      	ldr	r0, [sp, #20]
 800e824:	4629      	mov	r1, r5
 800e826:	f002 fe83 	bl	8011530 <_Bfree>
 800e82a:	9907      	ldr	r1, [sp, #28]
 800e82c:	9805      	ldr	r0, [sp, #20]
 800e82e:	f002 fe7f 	bl	8011530 <_Bfree>
 800e832:	9805      	ldr	r0, [sp, #20]
 800e834:	4621      	mov	r1, r4
 800e836:	f002 fe7b 	bl	8011530 <_Bfree>
 800e83a:	e600      	b.n	800e43e <_strtod_l+0x76>
 800e83c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e840:	1be0      	subs	r0, r4, r7
 800e842:	4281      	cmp	r1, r0
 800e844:	dbbc      	blt.n	800e7c0 <_strtod_l+0x3f8>
 800e846:	4a40      	ldr	r2, [pc, #256]	@ (800e948 <_strtod_l+0x580>)
 800e848:	f1c3 030f 	rsb	r3, r3, #15
 800e84c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e850:	ed91 7b00 	vldr	d7, [r1]
 800e854:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e856:	ec4b ab16 	vmov	d6, sl, fp
 800e85a:	1acb      	subs	r3, r1, r3
 800e85c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e860:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e864:	ed92 6b00 	vldr	d6, [r2]
 800e868:	e796      	b.n	800e798 <_strtod_l+0x3d0>
 800e86a:	3116      	adds	r1, #22
 800e86c:	dba8      	blt.n	800e7c0 <_strtod_l+0x3f8>
 800e86e:	4b36      	ldr	r3, [pc, #216]	@ (800e948 <_strtod_l+0x580>)
 800e870:	1b3c      	subs	r4, r7, r4
 800e872:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e876:	ed94 7b00 	vldr	d7, [r4]
 800e87a:	ec4b ab16 	vmov	d6, sl, fp
 800e87e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e882:	e78b      	b.n	800e79c <_strtod_l+0x3d4>
 800e884:	2000      	movs	r0, #0
 800e886:	ec4b ab17 	vmov	d7, sl, fp
 800e88a:	4e30      	ldr	r6, [pc, #192]	@ (800e94c <_strtod_l+0x584>)
 800e88c:	1112      	asrs	r2, r2, #4
 800e88e:	4601      	mov	r1, r0
 800e890:	2a01      	cmp	r2, #1
 800e892:	dc23      	bgt.n	800e8dc <_strtod_l+0x514>
 800e894:	b108      	cbz	r0, 800e89a <_strtod_l+0x4d2>
 800e896:	ec5b ab17 	vmov	sl, fp, d7
 800e89a:	4a2c      	ldr	r2, [pc, #176]	@ (800e94c <_strtod_l+0x584>)
 800e89c:	482c      	ldr	r0, [pc, #176]	@ (800e950 <_strtod_l+0x588>)
 800e89e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e8a2:	ed92 7b00 	vldr	d7, [r2]
 800e8a6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e8aa:	ec4b ab16 	vmov	d6, sl, fp
 800e8ae:	4a29      	ldr	r2, [pc, #164]	@ (800e954 <_strtod_l+0x58c>)
 800e8b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8b4:	ee17 1a90 	vmov	r1, s15
 800e8b8:	400a      	ands	r2, r1
 800e8ba:	4282      	cmp	r2, r0
 800e8bc:	ec5b ab17 	vmov	sl, fp, d7
 800e8c0:	d898      	bhi.n	800e7f4 <_strtod_l+0x42c>
 800e8c2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e8c6:	4282      	cmp	r2, r0
 800e8c8:	bf86      	itte	hi
 800e8ca:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e958 <_strtod_l+0x590>
 800e8ce:	f04f 3aff 	movhi.w	sl, #4294967295
 800e8d2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	9206      	str	r2, [sp, #24]
 800e8da:	e076      	b.n	800e9ca <_strtod_l+0x602>
 800e8dc:	f012 0f01 	tst.w	r2, #1
 800e8e0:	d004      	beq.n	800e8ec <_strtod_l+0x524>
 800e8e2:	ed96 6b00 	vldr	d6, [r6]
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8ec:	3101      	adds	r1, #1
 800e8ee:	1052      	asrs	r2, r2, #1
 800e8f0:	3608      	adds	r6, #8
 800e8f2:	e7cd      	b.n	800e890 <_strtod_l+0x4c8>
 800e8f4:	d0ef      	beq.n	800e8d6 <_strtod_l+0x50e>
 800e8f6:	4252      	negs	r2, r2
 800e8f8:	f012 000f 	ands.w	r0, r2, #15
 800e8fc:	d00a      	beq.n	800e914 <_strtod_l+0x54c>
 800e8fe:	4912      	ldr	r1, [pc, #72]	@ (800e948 <_strtod_l+0x580>)
 800e900:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e904:	ed91 7b00 	vldr	d7, [r1]
 800e908:	ec4b ab16 	vmov	d6, sl, fp
 800e90c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e910:	ec5b ab17 	vmov	sl, fp, d7
 800e914:	1112      	asrs	r2, r2, #4
 800e916:	d0de      	beq.n	800e8d6 <_strtod_l+0x50e>
 800e918:	2a1f      	cmp	r2, #31
 800e91a:	dd1f      	ble.n	800e95c <_strtod_l+0x594>
 800e91c:	2400      	movs	r4, #0
 800e91e:	4625      	mov	r5, r4
 800e920:	9407      	str	r4, [sp, #28]
 800e922:	4626      	mov	r6, r4
 800e924:	9a05      	ldr	r2, [sp, #20]
 800e926:	2322      	movs	r3, #34	@ 0x22
 800e928:	f04f 0a00 	mov.w	sl, #0
 800e92c:	f04f 0b00 	mov.w	fp, #0
 800e930:	6013      	str	r3, [r2, #0]
 800e932:	e76a      	b.n	800e80a <_strtod_l+0x442>
 800e934:	0801322f 	.word	0x0801322f
 800e938:	08013410 	.word	0x08013410
 800e93c:	08013227 	.word	0x08013227
 800e940:	08013264 	.word	0x08013264
 800e944:	0801340e 	.word	0x0801340e
 800e948:	08013598 	.word	0x08013598
 800e94c:	08013570 	.word	0x08013570
 800e950:	7ca00000 	.word	0x7ca00000
 800e954:	7ff00000 	.word	0x7ff00000
 800e958:	7fefffff 	.word	0x7fefffff
 800e95c:	f012 0110 	ands.w	r1, r2, #16
 800e960:	bf18      	it	ne
 800e962:	216a      	movne	r1, #106	@ 0x6a
 800e964:	9106      	str	r1, [sp, #24]
 800e966:	ec4b ab17 	vmov	d7, sl, fp
 800e96a:	49af      	ldr	r1, [pc, #700]	@ (800ec28 <_strtod_l+0x860>)
 800e96c:	2000      	movs	r0, #0
 800e96e:	07d6      	lsls	r6, r2, #31
 800e970:	d504      	bpl.n	800e97c <_strtod_l+0x5b4>
 800e972:	ed91 6b00 	vldr	d6, [r1]
 800e976:	2001      	movs	r0, #1
 800e978:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e97c:	1052      	asrs	r2, r2, #1
 800e97e:	f101 0108 	add.w	r1, r1, #8
 800e982:	d1f4      	bne.n	800e96e <_strtod_l+0x5a6>
 800e984:	b108      	cbz	r0, 800e98a <_strtod_l+0x5c2>
 800e986:	ec5b ab17 	vmov	sl, fp, d7
 800e98a:	9a06      	ldr	r2, [sp, #24]
 800e98c:	b1b2      	cbz	r2, 800e9bc <_strtod_l+0x5f4>
 800e98e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e992:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e996:	2a00      	cmp	r2, #0
 800e998:	4658      	mov	r0, fp
 800e99a:	dd0f      	ble.n	800e9bc <_strtod_l+0x5f4>
 800e99c:	2a1f      	cmp	r2, #31
 800e99e:	dd55      	ble.n	800ea4c <_strtod_l+0x684>
 800e9a0:	2a34      	cmp	r2, #52	@ 0x34
 800e9a2:	bfde      	ittt	le
 800e9a4:	f04f 32ff 	movle.w	r2, #4294967295
 800e9a8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e9ac:	408a      	lslle	r2, r1
 800e9ae:	f04f 0a00 	mov.w	sl, #0
 800e9b2:	bfcc      	ite	gt
 800e9b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e9b8:	ea02 0b00 	andle.w	fp, r2, r0
 800e9bc:	ec4b ab17 	vmov	d7, sl, fp
 800e9c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c8:	d0a8      	beq.n	800e91c <_strtod_l+0x554>
 800e9ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e9cc:	9805      	ldr	r0, [sp, #20]
 800e9ce:	f8cd 9000 	str.w	r9, [sp]
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	f002 fe14 	bl	8011600 <__s2b>
 800e9d8:	9007      	str	r0, [sp, #28]
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	f43f af0a 	beq.w	800e7f4 <_strtod_l+0x42c>
 800e9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e2:	1b3f      	subs	r7, r7, r4
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	bfb4      	ite	lt
 800e9e8:	463b      	movlt	r3, r7
 800e9ea:	2300      	movge	r3, #0
 800e9ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800ec18 <_strtod_l+0x850>
 800e9f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e9f8:	2400      	movs	r4, #0
 800e9fa:	930d      	str	r3, [sp, #52]	@ 0x34
 800e9fc:	4625      	mov	r5, r4
 800e9fe:	9b07      	ldr	r3, [sp, #28]
 800ea00:	9805      	ldr	r0, [sp, #20]
 800ea02:	6859      	ldr	r1, [r3, #4]
 800ea04:	f002 fd54 	bl	80114b0 <_Balloc>
 800ea08:	4606      	mov	r6, r0
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	f43f aef6 	beq.w	800e7fc <_strtod_l+0x434>
 800ea10:	9b07      	ldr	r3, [sp, #28]
 800ea12:	691a      	ldr	r2, [r3, #16]
 800ea14:	ec4b ab19 	vmov	d9, sl, fp
 800ea18:	3202      	adds	r2, #2
 800ea1a:	f103 010c 	add.w	r1, r3, #12
 800ea1e:	0092      	lsls	r2, r2, #2
 800ea20:	300c      	adds	r0, #12
 800ea22:	f001 fba8 	bl	8010176 <memcpy>
 800ea26:	eeb0 0b49 	vmov.f64	d0, d9
 800ea2a:	9805      	ldr	r0, [sp, #20]
 800ea2c:	aa14      	add	r2, sp, #80	@ 0x50
 800ea2e:	a913      	add	r1, sp, #76	@ 0x4c
 800ea30:	f003 f91a 	bl	8011c68 <__d2b>
 800ea34:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea36:	2800      	cmp	r0, #0
 800ea38:	f43f aee0 	beq.w	800e7fc <_strtod_l+0x434>
 800ea3c:	9805      	ldr	r0, [sp, #20]
 800ea3e:	2101      	movs	r1, #1
 800ea40:	f002 fe74 	bl	801172c <__i2b>
 800ea44:	4605      	mov	r5, r0
 800ea46:	b940      	cbnz	r0, 800ea5a <_strtod_l+0x692>
 800ea48:	2500      	movs	r5, #0
 800ea4a:	e6d7      	b.n	800e7fc <_strtod_l+0x434>
 800ea4c:	f04f 31ff 	mov.w	r1, #4294967295
 800ea50:	fa01 f202 	lsl.w	r2, r1, r2
 800ea54:	ea02 0a0a 	and.w	sl, r2, sl
 800ea58:	e7b0      	b.n	800e9bc <_strtod_l+0x5f4>
 800ea5a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ea5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ea5e:	2f00      	cmp	r7, #0
 800ea60:	bfab      	itete	ge
 800ea62:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ea64:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ea66:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ea6a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ea6e:	bfac      	ite	ge
 800ea70:	eb07 0903 	addge.w	r9, r7, r3
 800ea74:	eba3 0807 	sublt.w	r8, r3, r7
 800ea78:	9b06      	ldr	r3, [sp, #24]
 800ea7a:	1aff      	subs	r7, r7, r3
 800ea7c:	4417      	add	r7, r2
 800ea7e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ea82:	4a6a      	ldr	r2, [pc, #424]	@ (800ec2c <_strtod_l+0x864>)
 800ea84:	3f01      	subs	r7, #1
 800ea86:	4297      	cmp	r7, r2
 800ea88:	da51      	bge.n	800eb2e <_strtod_l+0x766>
 800ea8a:	1bd1      	subs	r1, r2, r7
 800ea8c:	291f      	cmp	r1, #31
 800ea8e:	eba3 0301 	sub.w	r3, r3, r1
 800ea92:	f04f 0201 	mov.w	r2, #1
 800ea96:	dc3e      	bgt.n	800eb16 <_strtod_l+0x74e>
 800ea98:	408a      	lsls	r2, r1
 800ea9a:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eaa0:	eb09 0703 	add.w	r7, r9, r3
 800eaa4:	4498      	add	r8, r3
 800eaa6:	9b06      	ldr	r3, [sp, #24]
 800eaa8:	45b9      	cmp	r9, r7
 800eaaa:	4498      	add	r8, r3
 800eaac:	464b      	mov	r3, r9
 800eaae:	bfa8      	it	ge
 800eab0:	463b      	movge	r3, r7
 800eab2:	4543      	cmp	r3, r8
 800eab4:	bfa8      	it	ge
 800eab6:	4643      	movge	r3, r8
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	bfc2      	ittt	gt
 800eabc:	1aff      	subgt	r7, r7, r3
 800eabe:	eba8 0803 	subgt.w	r8, r8, r3
 800eac2:	eba9 0903 	subgt.w	r9, r9, r3
 800eac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	dd16      	ble.n	800eafa <_strtod_l+0x732>
 800eacc:	4629      	mov	r1, r5
 800eace:	9805      	ldr	r0, [sp, #20]
 800ead0:	461a      	mov	r2, r3
 800ead2:	f002 fee3 	bl	801189c <__pow5mult>
 800ead6:	4605      	mov	r5, r0
 800ead8:	2800      	cmp	r0, #0
 800eada:	d0b5      	beq.n	800ea48 <_strtod_l+0x680>
 800eadc:	4601      	mov	r1, r0
 800eade:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eae0:	9805      	ldr	r0, [sp, #20]
 800eae2:	f002 fe39 	bl	8011758 <__multiply>
 800eae6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eae8:	2800      	cmp	r0, #0
 800eaea:	f43f ae87 	beq.w	800e7fc <_strtod_l+0x434>
 800eaee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eaf0:	9805      	ldr	r0, [sp, #20]
 800eaf2:	f002 fd1d 	bl	8011530 <_Bfree>
 800eaf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf8:	9312      	str	r3, [sp, #72]	@ 0x48
 800eafa:	2f00      	cmp	r7, #0
 800eafc:	dc1b      	bgt.n	800eb36 <_strtod_l+0x76e>
 800eafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dd21      	ble.n	800eb48 <_strtod_l+0x780>
 800eb04:	4631      	mov	r1, r6
 800eb06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb08:	9805      	ldr	r0, [sp, #20]
 800eb0a:	f002 fec7 	bl	801189c <__pow5mult>
 800eb0e:	4606      	mov	r6, r0
 800eb10:	b9d0      	cbnz	r0, 800eb48 <_strtod_l+0x780>
 800eb12:	2600      	movs	r6, #0
 800eb14:	e672      	b.n	800e7fc <_strtod_l+0x434>
 800eb16:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800eb1a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800eb1e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800eb22:	37e2      	adds	r7, #226	@ 0xe2
 800eb24:	fa02 f107 	lsl.w	r1, r2, r7
 800eb28:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb2a:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb2c:	e7b8      	b.n	800eaa0 <_strtod_l+0x6d8>
 800eb2e:	2200      	movs	r2, #0
 800eb30:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eb32:	2201      	movs	r2, #1
 800eb34:	e7f9      	b.n	800eb2a <_strtod_l+0x762>
 800eb36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eb38:	9805      	ldr	r0, [sp, #20]
 800eb3a:	463a      	mov	r2, r7
 800eb3c:	f002 ff08 	bl	8011950 <__lshift>
 800eb40:	9012      	str	r0, [sp, #72]	@ 0x48
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d1db      	bne.n	800eafe <_strtod_l+0x736>
 800eb46:	e659      	b.n	800e7fc <_strtod_l+0x434>
 800eb48:	f1b8 0f00 	cmp.w	r8, #0
 800eb4c:	dd07      	ble.n	800eb5e <_strtod_l+0x796>
 800eb4e:	4631      	mov	r1, r6
 800eb50:	9805      	ldr	r0, [sp, #20]
 800eb52:	4642      	mov	r2, r8
 800eb54:	f002 fefc 	bl	8011950 <__lshift>
 800eb58:	4606      	mov	r6, r0
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d0d9      	beq.n	800eb12 <_strtod_l+0x74a>
 800eb5e:	f1b9 0f00 	cmp.w	r9, #0
 800eb62:	dd08      	ble.n	800eb76 <_strtod_l+0x7ae>
 800eb64:	4629      	mov	r1, r5
 800eb66:	9805      	ldr	r0, [sp, #20]
 800eb68:	464a      	mov	r2, r9
 800eb6a:	f002 fef1 	bl	8011950 <__lshift>
 800eb6e:	4605      	mov	r5, r0
 800eb70:	2800      	cmp	r0, #0
 800eb72:	f43f ae43 	beq.w	800e7fc <_strtod_l+0x434>
 800eb76:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eb78:	9805      	ldr	r0, [sp, #20]
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	f002 ff70 	bl	8011a60 <__mdiff>
 800eb80:	4604      	mov	r4, r0
 800eb82:	2800      	cmp	r0, #0
 800eb84:	f43f ae3a 	beq.w	800e7fc <_strtod_l+0x434>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800eb8e:	60c3      	str	r3, [r0, #12]
 800eb90:	4629      	mov	r1, r5
 800eb92:	f002 ff49 	bl	8011a28 <__mcmp>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	da4c      	bge.n	800ec34 <_strtod_l+0x86c>
 800eb9a:	ea58 080a 	orrs.w	r8, r8, sl
 800eb9e:	d172      	bne.n	800ec86 <_strtod_l+0x8be>
 800eba0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d16e      	bne.n	800ec86 <_strtod_l+0x8be>
 800eba8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebac:	0d1b      	lsrs	r3, r3, #20
 800ebae:	051b      	lsls	r3, r3, #20
 800ebb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ebb4:	d967      	bls.n	800ec86 <_strtod_l+0x8be>
 800ebb6:	6963      	ldr	r3, [r4, #20]
 800ebb8:	b913      	cbnz	r3, 800ebc0 <_strtod_l+0x7f8>
 800ebba:	6923      	ldr	r3, [r4, #16]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	dd62      	ble.n	800ec86 <_strtod_l+0x8be>
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	9805      	ldr	r0, [sp, #20]
 800ebc6:	f002 fec3 	bl	8011950 <__lshift>
 800ebca:	4629      	mov	r1, r5
 800ebcc:	4604      	mov	r4, r0
 800ebce:	f002 ff2b 	bl	8011a28 <__mcmp>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	dd57      	ble.n	800ec86 <_strtod_l+0x8be>
 800ebd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebda:	9a06      	ldr	r2, [sp, #24]
 800ebdc:	0d1b      	lsrs	r3, r3, #20
 800ebde:	051b      	lsls	r3, r3, #20
 800ebe0:	2a00      	cmp	r2, #0
 800ebe2:	d06e      	beq.n	800ecc2 <_strtod_l+0x8fa>
 800ebe4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ebe8:	d86b      	bhi.n	800ecc2 <_strtod_l+0x8fa>
 800ebea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ebee:	f67f ae99 	bls.w	800e924 <_strtod_l+0x55c>
 800ebf2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800ec20 <_strtod_l+0x858>
 800ebf6:	ec4b ab16 	vmov	d6, sl, fp
 800ebfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ec30 <_strtod_l+0x868>)
 800ebfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ec00:	ee17 2a90 	vmov	r2, s15
 800ec04:	4013      	ands	r3, r2
 800ec06:	ec5b ab17 	vmov	sl, fp, d7
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f47f ae01 	bne.w	800e812 <_strtod_l+0x44a>
 800ec10:	9a05      	ldr	r2, [sp, #20]
 800ec12:	2322      	movs	r3, #34	@ 0x22
 800ec14:	6013      	str	r3, [r2, #0]
 800ec16:	e5fc      	b.n	800e812 <_strtod_l+0x44a>
 800ec18:	ffc00000 	.word	0xffc00000
 800ec1c:	41dfffff 	.word	0x41dfffff
 800ec20:	00000000 	.word	0x00000000
 800ec24:	39500000 	.word	0x39500000
 800ec28:	08013438 	.word	0x08013438
 800ec2c:	fffffc02 	.word	0xfffffc02
 800ec30:	7ff00000 	.word	0x7ff00000
 800ec34:	46d9      	mov	r9, fp
 800ec36:	d15d      	bne.n	800ecf4 <_strtod_l+0x92c>
 800ec38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec3c:	f1b8 0f00 	cmp.w	r8, #0
 800ec40:	d02a      	beq.n	800ec98 <_strtod_l+0x8d0>
 800ec42:	4aa9      	ldr	r2, [pc, #676]	@ (800eee8 <_strtod_l+0xb20>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d12a      	bne.n	800ec9e <_strtod_l+0x8d6>
 800ec48:	9b06      	ldr	r3, [sp, #24]
 800ec4a:	4652      	mov	r2, sl
 800ec4c:	b1fb      	cbz	r3, 800ec8e <_strtod_l+0x8c6>
 800ec4e:	4ba7      	ldr	r3, [pc, #668]	@ (800eeec <_strtod_l+0xb24>)
 800ec50:	ea0b 0303 	and.w	r3, fp, r3
 800ec54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ec58:	f04f 31ff 	mov.w	r1, #4294967295
 800ec5c:	d81a      	bhi.n	800ec94 <_strtod_l+0x8cc>
 800ec5e:	0d1b      	lsrs	r3, r3, #20
 800ec60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec64:	fa01 f303 	lsl.w	r3, r1, r3
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d118      	bne.n	800ec9e <_strtod_l+0x8d6>
 800ec6c:	4ba0      	ldr	r3, [pc, #640]	@ (800eef0 <_strtod_l+0xb28>)
 800ec6e:	4599      	cmp	r9, r3
 800ec70:	d102      	bne.n	800ec78 <_strtod_l+0x8b0>
 800ec72:	3201      	adds	r2, #1
 800ec74:	f43f adc2 	beq.w	800e7fc <_strtod_l+0x434>
 800ec78:	4b9c      	ldr	r3, [pc, #624]	@ (800eeec <_strtod_l+0xb24>)
 800ec7a:	ea09 0303 	and.w	r3, r9, r3
 800ec7e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ec82:	f04f 0a00 	mov.w	sl, #0
 800ec86:	9b06      	ldr	r3, [sp, #24]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1b2      	bne.n	800ebf2 <_strtod_l+0x82a>
 800ec8c:	e5c1      	b.n	800e812 <_strtod_l+0x44a>
 800ec8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec92:	e7e9      	b.n	800ec68 <_strtod_l+0x8a0>
 800ec94:	460b      	mov	r3, r1
 800ec96:	e7e7      	b.n	800ec68 <_strtod_l+0x8a0>
 800ec98:	ea53 030a 	orrs.w	r3, r3, sl
 800ec9c:	d09b      	beq.n	800ebd6 <_strtod_l+0x80e>
 800ec9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eca0:	b1c3      	cbz	r3, 800ecd4 <_strtod_l+0x90c>
 800eca2:	ea13 0f09 	tst.w	r3, r9
 800eca6:	d0ee      	beq.n	800ec86 <_strtod_l+0x8be>
 800eca8:	9a06      	ldr	r2, [sp, #24]
 800ecaa:	4650      	mov	r0, sl
 800ecac:	4659      	mov	r1, fp
 800ecae:	f1b8 0f00 	cmp.w	r8, #0
 800ecb2:	d013      	beq.n	800ecdc <_strtod_l+0x914>
 800ecb4:	f7ff fb6c 	bl	800e390 <sulp>
 800ecb8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ecbc:	ec5b ab17 	vmov	sl, fp, d7
 800ecc0:	e7e1      	b.n	800ec86 <_strtod_l+0x8be>
 800ecc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ecc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ecca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ecce:	f04f 3aff 	mov.w	sl, #4294967295
 800ecd2:	e7d8      	b.n	800ec86 <_strtod_l+0x8be>
 800ecd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecd6:	ea13 0f0a 	tst.w	r3, sl
 800ecda:	e7e4      	b.n	800eca6 <_strtod_l+0x8de>
 800ecdc:	f7ff fb58 	bl	800e390 <sulp>
 800ece0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ece4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	ec5b ab10 	vmov	sl, fp, d0
 800ecf0:	d1c9      	bne.n	800ec86 <_strtod_l+0x8be>
 800ecf2:	e617      	b.n	800e924 <_strtod_l+0x55c>
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f003 f80e 	bl	8011d18 <__ratio>
 800ecfc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ed00:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ed04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed08:	d85d      	bhi.n	800edc6 <_strtod_l+0x9fe>
 800ed0a:	f1b8 0f00 	cmp.w	r8, #0
 800ed0e:	d164      	bne.n	800edda <_strtod_l+0xa12>
 800ed10:	f1ba 0f00 	cmp.w	sl, #0
 800ed14:	d14b      	bne.n	800edae <_strtod_l+0x9e6>
 800ed16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d160      	bne.n	800ede4 <_strtod_l+0xa1c>
 800ed22:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ed26:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ed2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2e:	d401      	bmi.n	800ed34 <_strtod_l+0x96c>
 800ed30:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ed34:	eeb1 ab48 	vneg.f64	d10, d8
 800ed38:	486c      	ldr	r0, [pc, #432]	@ (800eeec <_strtod_l+0xb24>)
 800ed3a:	496e      	ldr	r1, [pc, #440]	@ (800eef4 <_strtod_l+0xb2c>)
 800ed3c:	ea09 0700 	and.w	r7, r9, r0
 800ed40:	428f      	cmp	r7, r1
 800ed42:	ec53 2b1a 	vmov	r2, r3, d10
 800ed46:	d17d      	bne.n	800ee44 <_strtod_l+0xa7c>
 800ed48:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ed4c:	ec4b ab1c 	vmov	d12, sl, fp
 800ed50:	eeb0 0b4c 	vmov.f64	d0, d12
 800ed54:	f002 ff18 	bl	8011b88 <__ulp>
 800ed58:	4864      	ldr	r0, [pc, #400]	@ (800eeec <_strtod_l+0xb24>)
 800ed5a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ed5e:	ee1c 3a90 	vmov	r3, s25
 800ed62:	4a65      	ldr	r2, [pc, #404]	@ (800eef8 <_strtod_l+0xb30>)
 800ed64:	ea03 0100 	and.w	r1, r3, r0
 800ed68:	4291      	cmp	r1, r2
 800ed6a:	ec5b ab1c 	vmov	sl, fp, d12
 800ed6e:	d93c      	bls.n	800edea <_strtod_l+0xa22>
 800ed70:	ee19 2a90 	vmov	r2, s19
 800ed74:	4b5e      	ldr	r3, [pc, #376]	@ (800eef0 <_strtod_l+0xb28>)
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d104      	bne.n	800ed84 <_strtod_l+0x9bc>
 800ed7a:	ee19 3a10 	vmov	r3, s18
 800ed7e:	3301      	adds	r3, #1
 800ed80:	f43f ad3c 	beq.w	800e7fc <_strtod_l+0x434>
 800ed84:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800eef0 <_strtod_l+0xb28>
 800ed88:	f04f 3aff 	mov.w	sl, #4294967295
 800ed8c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed8e:	9805      	ldr	r0, [sp, #20]
 800ed90:	f002 fbce 	bl	8011530 <_Bfree>
 800ed94:	9805      	ldr	r0, [sp, #20]
 800ed96:	4631      	mov	r1, r6
 800ed98:	f002 fbca 	bl	8011530 <_Bfree>
 800ed9c:	9805      	ldr	r0, [sp, #20]
 800ed9e:	4629      	mov	r1, r5
 800eda0:	f002 fbc6 	bl	8011530 <_Bfree>
 800eda4:	9805      	ldr	r0, [sp, #20]
 800eda6:	4621      	mov	r1, r4
 800eda8:	f002 fbc2 	bl	8011530 <_Bfree>
 800edac:	e627      	b.n	800e9fe <_strtod_l+0x636>
 800edae:	f1ba 0f01 	cmp.w	sl, #1
 800edb2:	d103      	bne.n	800edbc <_strtod_l+0x9f4>
 800edb4:	f1bb 0f00 	cmp.w	fp, #0
 800edb8:	f43f adb4 	beq.w	800e924 <_strtod_l+0x55c>
 800edbc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800edc0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800edc4:	e7b8      	b.n	800ed38 <_strtod_l+0x970>
 800edc6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800edca:	ee20 8b08 	vmul.f64	d8, d0, d8
 800edce:	f1b8 0f00 	cmp.w	r8, #0
 800edd2:	d0af      	beq.n	800ed34 <_strtod_l+0x96c>
 800edd4:	eeb0 ab48 	vmov.f64	d10, d8
 800edd8:	e7ae      	b.n	800ed38 <_strtod_l+0x970>
 800edda:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800edde:	eeb0 8b4a 	vmov.f64	d8, d10
 800ede2:	e7a9      	b.n	800ed38 <_strtod_l+0x970>
 800ede4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ede8:	e7a6      	b.n	800ed38 <_strtod_l+0x970>
 800edea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800edee:	9b06      	ldr	r3, [sp, #24]
 800edf0:	46d9      	mov	r9, fp
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1ca      	bne.n	800ed8c <_strtod_l+0x9c4>
 800edf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edfa:	0d1b      	lsrs	r3, r3, #20
 800edfc:	051b      	lsls	r3, r3, #20
 800edfe:	429f      	cmp	r7, r3
 800ee00:	d1c4      	bne.n	800ed8c <_strtod_l+0x9c4>
 800ee02:	ec51 0b18 	vmov	r0, r1, d8
 800ee06:	f7f1 fc97 	bl	8000738 <__aeabi_d2lz>
 800ee0a:	f7f1 fc4f 	bl	80006ac <__aeabi_l2d>
 800ee0e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ee12:	ec41 0b17 	vmov	d7, r0, r1
 800ee16:	ea49 090a 	orr.w	r9, r9, sl
 800ee1a:	ea59 0908 	orrs.w	r9, r9, r8
 800ee1e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ee22:	d03c      	beq.n	800ee9e <_strtod_l+0xad6>
 800ee24:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800eed0 <_strtod_l+0xb08>
 800ee28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ee2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee30:	f53f acef 	bmi.w	800e812 <_strtod_l+0x44a>
 800ee34:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800eed8 <_strtod_l+0xb10>
 800ee38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	dda4      	ble.n	800ed8c <_strtod_l+0x9c4>
 800ee42:	e4e6      	b.n	800e812 <_strtod_l+0x44a>
 800ee44:	9906      	ldr	r1, [sp, #24]
 800ee46:	b1e1      	cbz	r1, 800ee82 <_strtod_l+0xaba>
 800ee48:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ee4c:	d819      	bhi.n	800ee82 <_strtod_l+0xaba>
 800ee4e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ee52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee56:	d811      	bhi.n	800ee7c <_strtod_l+0xab4>
 800ee58:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ee5c:	ee18 3a10 	vmov	r3, s16
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	bf38      	it	cc
 800ee64:	2301      	movcc	r3, #1
 800ee66:	ee08 3a10 	vmov	s16, r3
 800ee6a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ee6e:	f1b8 0f00 	cmp.w	r8, #0
 800ee72:	d111      	bne.n	800ee98 <_strtod_l+0xad0>
 800ee74:	eeb1 7b48 	vneg.f64	d7, d8
 800ee78:	ec53 2b17 	vmov	r2, r3, d7
 800ee7c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ee80:	1bcb      	subs	r3, r1, r7
 800ee82:	eeb0 0b49 	vmov.f64	d0, d9
 800ee86:	ec43 2b1a 	vmov	d10, r2, r3
 800ee8a:	f002 fe7d 	bl	8011b88 <__ulp>
 800ee8e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ee92:	ec5b ab19 	vmov	sl, fp, d9
 800ee96:	e7aa      	b.n	800edee <_strtod_l+0xa26>
 800ee98:	eeb0 7b48 	vmov.f64	d7, d8
 800ee9c:	e7ec      	b.n	800ee78 <_strtod_l+0xab0>
 800ee9e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800eee0 <_strtod_l+0xb18>
 800eea2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeaa:	f57f af6f 	bpl.w	800ed8c <_strtod_l+0x9c4>
 800eeae:	e4b0      	b.n	800e812 <_strtod_l+0x44a>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	9308      	str	r3, [sp, #32]
 800eeb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eeb8:	6013      	str	r3, [r2, #0]
 800eeba:	f7ff bac4 	b.w	800e446 <_strtod_l+0x7e>
 800eebe:	2a65      	cmp	r2, #101	@ 0x65
 800eec0:	f43f abbf 	beq.w	800e642 <_strtod_l+0x27a>
 800eec4:	2a45      	cmp	r2, #69	@ 0x45
 800eec6:	f43f abbc 	beq.w	800e642 <_strtod_l+0x27a>
 800eeca:	2101      	movs	r1, #1
 800eecc:	f7ff bbf4 	b.w	800e6b8 <_strtod_l+0x2f0>
 800eed0:	94a03595 	.word	0x94a03595
 800eed4:	3fdfffff 	.word	0x3fdfffff
 800eed8:	35afe535 	.word	0x35afe535
 800eedc:	3fe00000 	.word	0x3fe00000
 800eee0:	94a03595 	.word	0x94a03595
 800eee4:	3fcfffff 	.word	0x3fcfffff
 800eee8:	000fffff 	.word	0x000fffff
 800eeec:	7ff00000 	.word	0x7ff00000
 800eef0:	7fefffff 	.word	0x7fefffff
 800eef4:	7fe00000 	.word	0x7fe00000
 800eef8:	7c9fffff 	.word	0x7c9fffff

0800eefc <_strtod_r>:
 800eefc:	4b01      	ldr	r3, [pc, #4]	@ (800ef04 <_strtod_r+0x8>)
 800eefe:	f7ff ba63 	b.w	800e3c8 <_strtod_l>
 800ef02:	bf00      	nop
 800ef04:	2400002c 	.word	0x2400002c

0800ef08 <__cvt>:
 800ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef0a:	ed2d 8b02 	vpush	{d8}
 800ef0e:	eeb0 8b40 	vmov.f64	d8, d0
 800ef12:	b085      	sub	sp, #20
 800ef14:	4617      	mov	r7, r2
 800ef16:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ef18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef1a:	ee18 2a90 	vmov	r2, s17
 800ef1e:	f025 0520 	bic.w	r5, r5, #32
 800ef22:	2a00      	cmp	r2, #0
 800ef24:	bfb6      	itet	lt
 800ef26:	222d      	movlt	r2, #45	@ 0x2d
 800ef28:	2200      	movge	r2, #0
 800ef2a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ef2e:	2d46      	cmp	r5, #70	@ 0x46
 800ef30:	460c      	mov	r4, r1
 800ef32:	701a      	strb	r2, [r3, #0]
 800ef34:	d004      	beq.n	800ef40 <__cvt+0x38>
 800ef36:	2d45      	cmp	r5, #69	@ 0x45
 800ef38:	d100      	bne.n	800ef3c <__cvt+0x34>
 800ef3a:	3401      	adds	r4, #1
 800ef3c:	2102      	movs	r1, #2
 800ef3e:	e000      	b.n	800ef42 <__cvt+0x3a>
 800ef40:	2103      	movs	r1, #3
 800ef42:	ab03      	add	r3, sp, #12
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	ab02      	add	r3, sp, #8
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	4633      	mov	r3, r6
 800ef4e:	eeb0 0b48 	vmov.f64	d0, d8
 800ef52:	f001 f9b9 	bl	80102c8 <_dtoa_r>
 800ef56:	2d47      	cmp	r5, #71	@ 0x47
 800ef58:	d114      	bne.n	800ef84 <__cvt+0x7c>
 800ef5a:	07fb      	lsls	r3, r7, #31
 800ef5c:	d50a      	bpl.n	800ef74 <__cvt+0x6c>
 800ef5e:	1902      	adds	r2, r0, r4
 800ef60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	bf08      	it	eq
 800ef6a:	9203      	streq	r2, [sp, #12]
 800ef6c:	2130      	movs	r1, #48	@ 0x30
 800ef6e:	9b03      	ldr	r3, [sp, #12]
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d319      	bcc.n	800efa8 <__cvt+0xa0>
 800ef74:	9b03      	ldr	r3, [sp, #12]
 800ef76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef78:	1a1b      	subs	r3, r3, r0
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	b005      	add	sp, #20
 800ef7e:	ecbd 8b02 	vpop	{d8}
 800ef82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef84:	2d46      	cmp	r5, #70	@ 0x46
 800ef86:	eb00 0204 	add.w	r2, r0, r4
 800ef8a:	d1e9      	bne.n	800ef60 <__cvt+0x58>
 800ef8c:	7803      	ldrb	r3, [r0, #0]
 800ef8e:	2b30      	cmp	r3, #48	@ 0x30
 800ef90:	d107      	bne.n	800efa2 <__cvt+0x9a>
 800ef92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9a:	bf1c      	itt	ne
 800ef9c:	f1c4 0401 	rsbne	r4, r4, #1
 800efa0:	6034      	strne	r4, [r6, #0]
 800efa2:	6833      	ldr	r3, [r6, #0]
 800efa4:	441a      	add	r2, r3
 800efa6:	e7db      	b.n	800ef60 <__cvt+0x58>
 800efa8:	1c5c      	adds	r4, r3, #1
 800efaa:	9403      	str	r4, [sp, #12]
 800efac:	7019      	strb	r1, [r3, #0]
 800efae:	e7de      	b.n	800ef6e <__cvt+0x66>

0800efb0 <__exponent>:
 800efb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efb2:	2900      	cmp	r1, #0
 800efb4:	bfba      	itte	lt
 800efb6:	4249      	neglt	r1, r1
 800efb8:	232d      	movlt	r3, #45	@ 0x2d
 800efba:	232b      	movge	r3, #43	@ 0x2b
 800efbc:	2909      	cmp	r1, #9
 800efbe:	7002      	strb	r2, [r0, #0]
 800efc0:	7043      	strb	r3, [r0, #1]
 800efc2:	dd29      	ble.n	800f018 <__exponent+0x68>
 800efc4:	f10d 0307 	add.w	r3, sp, #7
 800efc8:	461d      	mov	r5, r3
 800efca:	270a      	movs	r7, #10
 800efcc:	461a      	mov	r2, r3
 800efce:	fbb1 f6f7 	udiv	r6, r1, r7
 800efd2:	fb07 1416 	mls	r4, r7, r6, r1
 800efd6:	3430      	adds	r4, #48	@ 0x30
 800efd8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800efdc:	460c      	mov	r4, r1
 800efde:	2c63      	cmp	r4, #99	@ 0x63
 800efe0:	f103 33ff 	add.w	r3, r3, #4294967295
 800efe4:	4631      	mov	r1, r6
 800efe6:	dcf1      	bgt.n	800efcc <__exponent+0x1c>
 800efe8:	3130      	adds	r1, #48	@ 0x30
 800efea:	1e94      	subs	r4, r2, #2
 800efec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eff0:	1c41      	adds	r1, r0, #1
 800eff2:	4623      	mov	r3, r4
 800eff4:	42ab      	cmp	r3, r5
 800eff6:	d30a      	bcc.n	800f00e <__exponent+0x5e>
 800eff8:	f10d 0309 	add.w	r3, sp, #9
 800effc:	1a9b      	subs	r3, r3, r2
 800effe:	42ac      	cmp	r4, r5
 800f000:	bf88      	it	hi
 800f002:	2300      	movhi	r3, #0
 800f004:	3302      	adds	r3, #2
 800f006:	4403      	add	r3, r0
 800f008:	1a18      	subs	r0, r3, r0
 800f00a:	b003      	add	sp, #12
 800f00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f012:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f016:	e7ed      	b.n	800eff4 <__exponent+0x44>
 800f018:	2330      	movs	r3, #48	@ 0x30
 800f01a:	3130      	adds	r1, #48	@ 0x30
 800f01c:	7083      	strb	r3, [r0, #2]
 800f01e:	70c1      	strb	r1, [r0, #3]
 800f020:	1d03      	adds	r3, r0, #4
 800f022:	e7f1      	b.n	800f008 <__exponent+0x58>
 800f024:	0000      	movs	r0, r0
	...

0800f028 <_printf_float>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	b08d      	sub	sp, #52	@ 0x34
 800f02e:	460c      	mov	r4, r1
 800f030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f034:	4616      	mov	r6, r2
 800f036:	461f      	mov	r7, r3
 800f038:	4605      	mov	r5, r0
 800f03a:	f001 f815 	bl	8010068 <_localeconv_r>
 800f03e:	f8d0 b000 	ldr.w	fp, [r0]
 800f042:	4658      	mov	r0, fp
 800f044:	f7f1 f99c 	bl	8000380 <strlen>
 800f048:	2300      	movs	r3, #0
 800f04a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f04c:	f8d8 3000 	ldr.w	r3, [r8]
 800f050:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f054:	6822      	ldr	r2, [r4, #0]
 800f056:	9005      	str	r0, [sp, #20]
 800f058:	3307      	adds	r3, #7
 800f05a:	f023 0307 	bic.w	r3, r3, #7
 800f05e:	f103 0108 	add.w	r1, r3, #8
 800f062:	f8c8 1000 	str.w	r1, [r8]
 800f066:	ed93 0b00 	vldr	d0, [r3]
 800f06a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f2c8 <_printf_float+0x2a0>
 800f06e:	eeb0 7bc0 	vabs.f64	d7, d0
 800f072:	eeb4 7b46 	vcmp.f64	d7, d6
 800f076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f07e:	dd24      	ble.n	800f0ca <_printf_float+0xa2>
 800f080:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f088:	d502      	bpl.n	800f090 <_printf_float+0x68>
 800f08a:	232d      	movs	r3, #45	@ 0x2d
 800f08c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f090:	498f      	ldr	r1, [pc, #572]	@ (800f2d0 <_printf_float+0x2a8>)
 800f092:	4b90      	ldr	r3, [pc, #576]	@ (800f2d4 <_printf_float+0x2ac>)
 800f094:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f098:	bf8c      	ite	hi
 800f09a:	4688      	movhi	r8, r1
 800f09c:	4698      	movls	r8, r3
 800f09e:	f022 0204 	bic.w	r2, r2, #4
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	6123      	str	r3, [r4, #16]
 800f0a6:	6022      	str	r2, [r4, #0]
 800f0a8:	f04f 0a00 	mov.w	sl, #0
 800f0ac:	9700      	str	r7, [sp, #0]
 800f0ae:	4633      	mov	r3, r6
 800f0b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	f000 f9d1 	bl	800f45c <_printf_common>
 800f0ba:	3001      	adds	r0, #1
 800f0bc:	f040 8089 	bne.w	800f1d2 <_printf_float+0x1aa>
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	b00d      	add	sp, #52	@ 0x34
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	eeb4 0b40 	vcmp.f64	d0, d0
 800f0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d2:	d709      	bvc.n	800f0e8 <_printf_float+0xc0>
 800f0d4:	ee10 3a90 	vmov	r3, s1
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	bfbc      	itt	lt
 800f0dc:	232d      	movlt	r3, #45	@ 0x2d
 800f0de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f0e2:	497d      	ldr	r1, [pc, #500]	@ (800f2d8 <_printf_float+0x2b0>)
 800f0e4:	4b7d      	ldr	r3, [pc, #500]	@ (800f2dc <_printf_float+0x2b4>)
 800f0e6:	e7d5      	b.n	800f094 <_printf_float+0x6c>
 800f0e8:	6863      	ldr	r3, [r4, #4]
 800f0ea:	1c59      	adds	r1, r3, #1
 800f0ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f0f0:	d139      	bne.n	800f166 <_printf_float+0x13e>
 800f0f2:	2306      	movs	r3, #6
 800f0f4:	6063      	str	r3, [r4, #4]
 800f0f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	6022      	str	r2, [r4, #0]
 800f0fe:	9303      	str	r3, [sp, #12]
 800f100:	ab0a      	add	r3, sp, #40	@ 0x28
 800f102:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f106:	ab09      	add	r3, sp, #36	@ 0x24
 800f108:	9300      	str	r3, [sp, #0]
 800f10a:	6861      	ldr	r1, [r4, #4]
 800f10c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f110:	4628      	mov	r0, r5
 800f112:	f7ff fef9 	bl	800ef08 <__cvt>
 800f116:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f11a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f11c:	4680      	mov	r8, r0
 800f11e:	d129      	bne.n	800f174 <_printf_float+0x14c>
 800f120:	1cc8      	adds	r0, r1, #3
 800f122:	db02      	blt.n	800f12a <_printf_float+0x102>
 800f124:	6863      	ldr	r3, [r4, #4]
 800f126:	4299      	cmp	r1, r3
 800f128:	dd41      	ble.n	800f1ae <_printf_float+0x186>
 800f12a:	f1a9 0902 	sub.w	r9, r9, #2
 800f12e:	fa5f f989 	uxtb.w	r9, r9
 800f132:	3901      	subs	r1, #1
 800f134:	464a      	mov	r2, r9
 800f136:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f13a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f13c:	f7ff ff38 	bl	800efb0 <__exponent>
 800f140:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f142:	1813      	adds	r3, r2, r0
 800f144:	2a01      	cmp	r2, #1
 800f146:	4682      	mov	sl, r0
 800f148:	6123      	str	r3, [r4, #16]
 800f14a:	dc02      	bgt.n	800f152 <_printf_float+0x12a>
 800f14c:	6822      	ldr	r2, [r4, #0]
 800f14e:	07d2      	lsls	r2, r2, #31
 800f150:	d501      	bpl.n	800f156 <_printf_float+0x12e>
 800f152:	3301      	adds	r3, #1
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d0a6      	beq.n	800f0ac <_printf_float+0x84>
 800f15e:	232d      	movs	r3, #45	@ 0x2d
 800f160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f164:	e7a2      	b.n	800f0ac <_printf_float+0x84>
 800f166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f16a:	d1c4      	bne.n	800f0f6 <_printf_float+0xce>
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1c2      	bne.n	800f0f6 <_printf_float+0xce>
 800f170:	2301      	movs	r3, #1
 800f172:	e7bf      	b.n	800f0f4 <_printf_float+0xcc>
 800f174:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f178:	d9db      	bls.n	800f132 <_printf_float+0x10a>
 800f17a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f17e:	d118      	bne.n	800f1b2 <_printf_float+0x18a>
 800f180:	2900      	cmp	r1, #0
 800f182:	6863      	ldr	r3, [r4, #4]
 800f184:	dd0b      	ble.n	800f19e <_printf_float+0x176>
 800f186:	6121      	str	r1, [r4, #16]
 800f188:	b913      	cbnz	r3, 800f190 <_printf_float+0x168>
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	07d0      	lsls	r0, r2, #31
 800f18e:	d502      	bpl.n	800f196 <_printf_float+0x16e>
 800f190:	3301      	adds	r3, #1
 800f192:	440b      	add	r3, r1
 800f194:	6123      	str	r3, [r4, #16]
 800f196:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f198:	f04f 0a00 	mov.w	sl, #0
 800f19c:	e7db      	b.n	800f156 <_printf_float+0x12e>
 800f19e:	b913      	cbnz	r3, 800f1a6 <_printf_float+0x17e>
 800f1a0:	6822      	ldr	r2, [r4, #0]
 800f1a2:	07d2      	lsls	r2, r2, #31
 800f1a4:	d501      	bpl.n	800f1aa <_printf_float+0x182>
 800f1a6:	3302      	adds	r3, #2
 800f1a8:	e7f4      	b.n	800f194 <_printf_float+0x16c>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e7f2      	b.n	800f194 <_printf_float+0x16c>
 800f1ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1b4:	4299      	cmp	r1, r3
 800f1b6:	db05      	blt.n	800f1c4 <_printf_float+0x19c>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	6121      	str	r1, [r4, #16]
 800f1bc:	07d8      	lsls	r0, r3, #31
 800f1be:	d5ea      	bpl.n	800f196 <_printf_float+0x16e>
 800f1c0:	1c4b      	adds	r3, r1, #1
 800f1c2:	e7e7      	b.n	800f194 <_printf_float+0x16c>
 800f1c4:	2900      	cmp	r1, #0
 800f1c6:	bfd4      	ite	le
 800f1c8:	f1c1 0202 	rsble	r2, r1, #2
 800f1cc:	2201      	movgt	r2, #1
 800f1ce:	4413      	add	r3, r2
 800f1d0:	e7e0      	b.n	800f194 <_printf_float+0x16c>
 800f1d2:	6823      	ldr	r3, [r4, #0]
 800f1d4:	055a      	lsls	r2, r3, #21
 800f1d6:	d407      	bmi.n	800f1e8 <_printf_float+0x1c0>
 800f1d8:	6923      	ldr	r3, [r4, #16]
 800f1da:	4642      	mov	r2, r8
 800f1dc:	4631      	mov	r1, r6
 800f1de:	4628      	mov	r0, r5
 800f1e0:	47b8      	blx	r7
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	d12a      	bne.n	800f23c <_printf_float+0x214>
 800f1e6:	e76b      	b.n	800f0c0 <_printf_float+0x98>
 800f1e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f1ec:	f240 80e0 	bls.w	800f3b0 <_printf_float+0x388>
 800f1f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f1f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fc:	d133      	bne.n	800f266 <_printf_float+0x23e>
 800f1fe:	4a38      	ldr	r2, [pc, #224]	@ (800f2e0 <_printf_float+0x2b8>)
 800f200:	2301      	movs	r3, #1
 800f202:	4631      	mov	r1, r6
 800f204:	4628      	mov	r0, r5
 800f206:	47b8      	blx	r7
 800f208:	3001      	adds	r0, #1
 800f20a:	f43f af59 	beq.w	800f0c0 <_printf_float+0x98>
 800f20e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f212:	4543      	cmp	r3, r8
 800f214:	db02      	blt.n	800f21c <_printf_float+0x1f4>
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	07d8      	lsls	r0, r3, #31
 800f21a:	d50f      	bpl.n	800f23c <_printf_float+0x214>
 800f21c:	9b05      	ldr	r3, [sp, #20]
 800f21e:	465a      	mov	r2, fp
 800f220:	4631      	mov	r1, r6
 800f222:	4628      	mov	r0, r5
 800f224:	47b8      	blx	r7
 800f226:	3001      	adds	r0, #1
 800f228:	f43f af4a 	beq.w	800f0c0 <_printf_float+0x98>
 800f22c:	f04f 0900 	mov.w	r9, #0
 800f230:	f108 38ff 	add.w	r8, r8, #4294967295
 800f234:	f104 0a1a 	add.w	sl, r4, #26
 800f238:	45c8      	cmp	r8, r9
 800f23a:	dc09      	bgt.n	800f250 <_printf_float+0x228>
 800f23c:	6823      	ldr	r3, [r4, #0]
 800f23e:	079b      	lsls	r3, r3, #30
 800f240:	f100 8107 	bmi.w	800f452 <_printf_float+0x42a>
 800f244:	68e0      	ldr	r0, [r4, #12]
 800f246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f248:	4298      	cmp	r0, r3
 800f24a:	bfb8      	it	lt
 800f24c:	4618      	movlt	r0, r3
 800f24e:	e739      	b.n	800f0c4 <_printf_float+0x9c>
 800f250:	2301      	movs	r3, #1
 800f252:	4652      	mov	r2, sl
 800f254:	4631      	mov	r1, r6
 800f256:	4628      	mov	r0, r5
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	f43f af30 	beq.w	800f0c0 <_printf_float+0x98>
 800f260:	f109 0901 	add.w	r9, r9, #1
 800f264:	e7e8      	b.n	800f238 <_printf_float+0x210>
 800f266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f268:	2b00      	cmp	r3, #0
 800f26a:	dc3b      	bgt.n	800f2e4 <_printf_float+0x2bc>
 800f26c:	4a1c      	ldr	r2, [pc, #112]	@ (800f2e0 <_printf_float+0x2b8>)
 800f26e:	2301      	movs	r3, #1
 800f270:	4631      	mov	r1, r6
 800f272:	4628      	mov	r0, r5
 800f274:	47b8      	blx	r7
 800f276:	3001      	adds	r0, #1
 800f278:	f43f af22 	beq.w	800f0c0 <_printf_float+0x98>
 800f27c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f280:	ea59 0303 	orrs.w	r3, r9, r3
 800f284:	d102      	bne.n	800f28c <_printf_float+0x264>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	07d9      	lsls	r1, r3, #31
 800f28a:	d5d7      	bpl.n	800f23c <_printf_float+0x214>
 800f28c:	9b05      	ldr	r3, [sp, #20]
 800f28e:	465a      	mov	r2, fp
 800f290:	4631      	mov	r1, r6
 800f292:	4628      	mov	r0, r5
 800f294:	47b8      	blx	r7
 800f296:	3001      	adds	r0, #1
 800f298:	f43f af12 	beq.w	800f0c0 <_printf_float+0x98>
 800f29c:	f04f 0a00 	mov.w	sl, #0
 800f2a0:	f104 0b1a 	add.w	fp, r4, #26
 800f2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a6:	425b      	negs	r3, r3
 800f2a8:	4553      	cmp	r3, sl
 800f2aa:	dc01      	bgt.n	800f2b0 <_printf_float+0x288>
 800f2ac:	464b      	mov	r3, r9
 800f2ae:	e794      	b.n	800f1da <_printf_float+0x1b2>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	465a      	mov	r2, fp
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	47b8      	blx	r7
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	f43f af00 	beq.w	800f0c0 <_printf_float+0x98>
 800f2c0:	f10a 0a01 	add.w	sl, sl, #1
 800f2c4:	e7ee      	b.n	800f2a4 <_printf_float+0x27c>
 800f2c6:	bf00      	nop
 800f2c8:	ffffffff 	.word	0xffffffff
 800f2cc:	7fefffff 	.word	0x7fefffff
 800f2d0:	08013226 	.word	0x08013226
 800f2d4:	08013222 	.word	0x08013222
 800f2d8:	0801322e 	.word	0x0801322e
 800f2dc:	0801322a 	.word	0x0801322a
 800f2e0:	080133ce 	.word	0x080133ce
 800f2e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f2ea:	4553      	cmp	r3, sl
 800f2ec:	bfa8      	it	ge
 800f2ee:	4653      	movge	r3, sl
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	4699      	mov	r9, r3
 800f2f4:	dc37      	bgt.n	800f366 <_printf_float+0x33e>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	9307      	str	r3, [sp, #28]
 800f2fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2fe:	f104 021a 	add.w	r2, r4, #26
 800f302:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f304:	9907      	ldr	r1, [sp, #28]
 800f306:	9306      	str	r3, [sp, #24]
 800f308:	eba3 0309 	sub.w	r3, r3, r9
 800f30c:	428b      	cmp	r3, r1
 800f30e:	dc31      	bgt.n	800f374 <_printf_float+0x34c>
 800f310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f312:	459a      	cmp	sl, r3
 800f314:	dc3b      	bgt.n	800f38e <_printf_float+0x366>
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	07da      	lsls	r2, r3, #31
 800f31a:	d438      	bmi.n	800f38e <_printf_float+0x366>
 800f31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f31e:	ebaa 0903 	sub.w	r9, sl, r3
 800f322:	9b06      	ldr	r3, [sp, #24]
 800f324:	ebaa 0303 	sub.w	r3, sl, r3
 800f328:	4599      	cmp	r9, r3
 800f32a:	bfa8      	it	ge
 800f32c:	4699      	movge	r9, r3
 800f32e:	f1b9 0f00 	cmp.w	r9, #0
 800f332:	dc34      	bgt.n	800f39e <_printf_float+0x376>
 800f334:	f04f 0800 	mov.w	r8, #0
 800f338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f33c:	f104 0b1a 	add.w	fp, r4, #26
 800f340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f342:	ebaa 0303 	sub.w	r3, sl, r3
 800f346:	eba3 0309 	sub.w	r3, r3, r9
 800f34a:	4543      	cmp	r3, r8
 800f34c:	f77f af76 	ble.w	800f23c <_printf_float+0x214>
 800f350:	2301      	movs	r3, #1
 800f352:	465a      	mov	r2, fp
 800f354:	4631      	mov	r1, r6
 800f356:	4628      	mov	r0, r5
 800f358:	47b8      	blx	r7
 800f35a:	3001      	adds	r0, #1
 800f35c:	f43f aeb0 	beq.w	800f0c0 <_printf_float+0x98>
 800f360:	f108 0801 	add.w	r8, r8, #1
 800f364:	e7ec      	b.n	800f340 <_printf_float+0x318>
 800f366:	4642      	mov	r2, r8
 800f368:	4631      	mov	r1, r6
 800f36a:	4628      	mov	r0, r5
 800f36c:	47b8      	blx	r7
 800f36e:	3001      	adds	r0, #1
 800f370:	d1c1      	bne.n	800f2f6 <_printf_float+0x2ce>
 800f372:	e6a5      	b.n	800f0c0 <_printf_float+0x98>
 800f374:	2301      	movs	r3, #1
 800f376:	4631      	mov	r1, r6
 800f378:	4628      	mov	r0, r5
 800f37a:	9206      	str	r2, [sp, #24]
 800f37c:	47b8      	blx	r7
 800f37e:	3001      	adds	r0, #1
 800f380:	f43f ae9e 	beq.w	800f0c0 <_printf_float+0x98>
 800f384:	9b07      	ldr	r3, [sp, #28]
 800f386:	9a06      	ldr	r2, [sp, #24]
 800f388:	3301      	adds	r3, #1
 800f38a:	9307      	str	r3, [sp, #28]
 800f38c:	e7b9      	b.n	800f302 <_printf_float+0x2da>
 800f38e:	9b05      	ldr	r3, [sp, #20]
 800f390:	465a      	mov	r2, fp
 800f392:	4631      	mov	r1, r6
 800f394:	4628      	mov	r0, r5
 800f396:	47b8      	blx	r7
 800f398:	3001      	adds	r0, #1
 800f39a:	d1bf      	bne.n	800f31c <_printf_float+0x2f4>
 800f39c:	e690      	b.n	800f0c0 <_printf_float+0x98>
 800f39e:	9a06      	ldr	r2, [sp, #24]
 800f3a0:	464b      	mov	r3, r9
 800f3a2:	4442      	add	r2, r8
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	47b8      	blx	r7
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d1c2      	bne.n	800f334 <_printf_float+0x30c>
 800f3ae:	e687      	b.n	800f0c0 <_printf_float+0x98>
 800f3b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f3b4:	f1b9 0f01 	cmp.w	r9, #1
 800f3b8:	dc01      	bgt.n	800f3be <_printf_float+0x396>
 800f3ba:	07db      	lsls	r3, r3, #31
 800f3bc:	d536      	bpl.n	800f42c <_printf_float+0x404>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	4642      	mov	r2, r8
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	47b8      	blx	r7
 800f3c8:	3001      	adds	r0, #1
 800f3ca:	f43f ae79 	beq.w	800f0c0 <_printf_float+0x98>
 800f3ce:	9b05      	ldr	r3, [sp, #20]
 800f3d0:	465a      	mov	r2, fp
 800f3d2:	4631      	mov	r1, r6
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	47b8      	blx	r7
 800f3d8:	3001      	adds	r0, #1
 800f3da:	f43f ae71 	beq.w	800f0c0 <_printf_float+0x98>
 800f3de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f3e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ea:	f109 39ff 	add.w	r9, r9, #4294967295
 800f3ee:	d018      	beq.n	800f422 <_printf_float+0x3fa>
 800f3f0:	464b      	mov	r3, r9
 800f3f2:	f108 0201 	add.w	r2, r8, #1
 800f3f6:	4631      	mov	r1, r6
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	47b8      	blx	r7
 800f3fc:	3001      	adds	r0, #1
 800f3fe:	d10c      	bne.n	800f41a <_printf_float+0x3f2>
 800f400:	e65e      	b.n	800f0c0 <_printf_float+0x98>
 800f402:	2301      	movs	r3, #1
 800f404:	465a      	mov	r2, fp
 800f406:	4631      	mov	r1, r6
 800f408:	4628      	mov	r0, r5
 800f40a:	47b8      	blx	r7
 800f40c:	3001      	adds	r0, #1
 800f40e:	f43f ae57 	beq.w	800f0c0 <_printf_float+0x98>
 800f412:	f108 0801 	add.w	r8, r8, #1
 800f416:	45c8      	cmp	r8, r9
 800f418:	dbf3      	blt.n	800f402 <_printf_float+0x3da>
 800f41a:	4653      	mov	r3, sl
 800f41c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f420:	e6dc      	b.n	800f1dc <_printf_float+0x1b4>
 800f422:	f04f 0800 	mov.w	r8, #0
 800f426:	f104 0b1a 	add.w	fp, r4, #26
 800f42a:	e7f4      	b.n	800f416 <_printf_float+0x3ee>
 800f42c:	2301      	movs	r3, #1
 800f42e:	4642      	mov	r2, r8
 800f430:	e7e1      	b.n	800f3f6 <_printf_float+0x3ce>
 800f432:	2301      	movs	r3, #1
 800f434:	464a      	mov	r2, r9
 800f436:	4631      	mov	r1, r6
 800f438:	4628      	mov	r0, r5
 800f43a:	47b8      	blx	r7
 800f43c:	3001      	adds	r0, #1
 800f43e:	f43f ae3f 	beq.w	800f0c0 <_printf_float+0x98>
 800f442:	f108 0801 	add.w	r8, r8, #1
 800f446:	68e3      	ldr	r3, [r4, #12]
 800f448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f44a:	1a5b      	subs	r3, r3, r1
 800f44c:	4543      	cmp	r3, r8
 800f44e:	dcf0      	bgt.n	800f432 <_printf_float+0x40a>
 800f450:	e6f8      	b.n	800f244 <_printf_float+0x21c>
 800f452:	f04f 0800 	mov.w	r8, #0
 800f456:	f104 0919 	add.w	r9, r4, #25
 800f45a:	e7f4      	b.n	800f446 <_printf_float+0x41e>

0800f45c <_printf_common>:
 800f45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f460:	4616      	mov	r6, r2
 800f462:	4698      	mov	r8, r3
 800f464:	688a      	ldr	r2, [r1, #8]
 800f466:	690b      	ldr	r3, [r1, #16]
 800f468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f46c:	4293      	cmp	r3, r2
 800f46e:	bfb8      	it	lt
 800f470:	4613      	movlt	r3, r2
 800f472:	6033      	str	r3, [r6, #0]
 800f474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f478:	4607      	mov	r7, r0
 800f47a:	460c      	mov	r4, r1
 800f47c:	b10a      	cbz	r2, 800f482 <_printf_common+0x26>
 800f47e:	3301      	adds	r3, #1
 800f480:	6033      	str	r3, [r6, #0]
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	0699      	lsls	r1, r3, #26
 800f486:	bf42      	ittt	mi
 800f488:	6833      	ldrmi	r3, [r6, #0]
 800f48a:	3302      	addmi	r3, #2
 800f48c:	6033      	strmi	r3, [r6, #0]
 800f48e:	6825      	ldr	r5, [r4, #0]
 800f490:	f015 0506 	ands.w	r5, r5, #6
 800f494:	d106      	bne.n	800f4a4 <_printf_common+0x48>
 800f496:	f104 0a19 	add.w	sl, r4, #25
 800f49a:	68e3      	ldr	r3, [r4, #12]
 800f49c:	6832      	ldr	r2, [r6, #0]
 800f49e:	1a9b      	subs	r3, r3, r2
 800f4a0:	42ab      	cmp	r3, r5
 800f4a2:	dc26      	bgt.n	800f4f2 <_printf_common+0x96>
 800f4a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4a8:	6822      	ldr	r2, [r4, #0]
 800f4aa:	3b00      	subs	r3, #0
 800f4ac:	bf18      	it	ne
 800f4ae:	2301      	movne	r3, #1
 800f4b0:	0692      	lsls	r2, r2, #26
 800f4b2:	d42b      	bmi.n	800f50c <_printf_common+0xb0>
 800f4b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4b8:	4641      	mov	r1, r8
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	47c8      	blx	r9
 800f4be:	3001      	adds	r0, #1
 800f4c0:	d01e      	beq.n	800f500 <_printf_common+0xa4>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	6922      	ldr	r2, [r4, #16]
 800f4c6:	f003 0306 	and.w	r3, r3, #6
 800f4ca:	2b04      	cmp	r3, #4
 800f4cc:	bf02      	ittt	eq
 800f4ce:	68e5      	ldreq	r5, [r4, #12]
 800f4d0:	6833      	ldreq	r3, [r6, #0]
 800f4d2:	1aed      	subeq	r5, r5, r3
 800f4d4:	68a3      	ldr	r3, [r4, #8]
 800f4d6:	bf0c      	ite	eq
 800f4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4dc:	2500      	movne	r5, #0
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	bfc4      	itt	gt
 800f4e2:	1a9b      	subgt	r3, r3, r2
 800f4e4:	18ed      	addgt	r5, r5, r3
 800f4e6:	2600      	movs	r6, #0
 800f4e8:	341a      	adds	r4, #26
 800f4ea:	42b5      	cmp	r5, r6
 800f4ec:	d11a      	bne.n	800f524 <_printf_common+0xc8>
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	e008      	b.n	800f504 <_printf_common+0xa8>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	4652      	mov	r2, sl
 800f4f6:	4641      	mov	r1, r8
 800f4f8:	4638      	mov	r0, r7
 800f4fa:	47c8      	blx	r9
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	d103      	bne.n	800f508 <_printf_common+0xac>
 800f500:	f04f 30ff 	mov.w	r0, #4294967295
 800f504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f508:	3501      	adds	r5, #1
 800f50a:	e7c6      	b.n	800f49a <_printf_common+0x3e>
 800f50c:	18e1      	adds	r1, r4, r3
 800f50e:	1c5a      	adds	r2, r3, #1
 800f510:	2030      	movs	r0, #48	@ 0x30
 800f512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f516:	4422      	add	r2, r4
 800f518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f51c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f520:	3302      	adds	r3, #2
 800f522:	e7c7      	b.n	800f4b4 <_printf_common+0x58>
 800f524:	2301      	movs	r3, #1
 800f526:	4622      	mov	r2, r4
 800f528:	4641      	mov	r1, r8
 800f52a:	4638      	mov	r0, r7
 800f52c:	47c8      	blx	r9
 800f52e:	3001      	adds	r0, #1
 800f530:	d0e6      	beq.n	800f500 <_printf_common+0xa4>
 800f532:	3601      	adds	r6, #1
 800f534:	e7d9      	b.n	800f4ea <_printf_common+0x8e>
	...

0800f538 <_printf_i>:
 800f538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f53c:	7e0f      	ldrb	r7, [r1, #24]
 800f53e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f540:	2f78      	cmp	r7, #120	@ 0x78
 800f542:	4691      	mov	r9, r2
 800f544:	4680      	mov	r8, r0
 800f546:	460c      	mov	r4, r1
 800f548:	469a      	mov	sl, r3
 800f54a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f54e:	d807      	bhi.n	800f560 <_printf_i+0x28>
 800f550:	2f62      	cmp	r7, #98	@ 0x62
 800f552:	d80a      	bhi.n	800f56a <_printf_i+0x32>
 800f554:	2f00      	cmp	r7, #0
 800f556:	f000 80d1 	beq.w	800f6fc <_printf_i+0x1c4>
 800f55a:	2f58      	cmp	r7, #88	@ 0x58
 800f55c:	f000 80b8 	beq.w	800f6d0 <_printf_i+0x198>
 800f560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f568:	e03a      	b.n	800f5e0 <_printf_i+0xa8>
 800f56a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f56e:	2b15      	cmp	r3, #21
 800f570:	d8f6      	bhi.n	800f560 <_printf_i+0x28>
 800f572:	a101      	add	r1, pc, #4	@ (adr r1, 800f578 <_printf_i+0x40>)
 800f574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f578:	0800f5d1 	.word	0x0800f5d1
 800f57c:	0800f5e5 	.word	0x0800f5e5
 800f580:	0800f561 	.word	0x0800f561
 800f584:	0800f561 	.word	0x0800f561
 800f588:	0800f561 	.word	0x0800f561
 800f58c:	0800f561 	.word	0x0800f561
 800f590:	0800f5e5 	.word	0x0800f5e5
 800f594:	0800f561 	.word	0x0800f561
 800f598:	0800f561 	.word	0x0800f561
 800f59c:	0800f561 	.word	0x0800f561
 800f5a0:	0800f561 	.word	0x0800f561
 800f5a4:	0800f6e3 	.word	0x0800f6e3
 800f5a8:	0800f60f 	.word	0x0800f60f
 800f5ac:	0800f69d 	.word	0x0800f69d
 800f5b0:	0800f561 	.word	0x0800f561
 800f5b4:	0800f561 	.word	0x0800f561
 800f5b8:	0800f705 	.word	0x0800f705
 800f5bc:	0800f561 	.word	0x0800f561
 800f5c0:	0800f60f 	.word	0x0800f60f
 800f5c4:	0800f561 	.word	0x0800f561
 800f5c8:	0800f561 	.word	0x0800f561
 800f5cc:	0800f6a5 	.word	0x0800f6a5
 800f5d0:	6833      	ldr	r3, [r6, #0]
 800f5d2:	1d1a      	adds	r2, r3, #4
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	6032      	str	r2, [r6, #0]
 800f5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e09c      	b.n	800f71e <_printf_i+0x1e6>
 800f5e4:	6833      	ldr	r3, [r6, #0]
 800f5e6:	6820      	ldr	r0, [r4, #0]
 800f5e8:	1d19      	adds	r1, r3, #4
 800f5ea:	6031      	str	r1, [r6, #0]
 800f5ec:	0606      	lsls	r6, r0, #24
 800f5ee:	d501      	bpl.n	800f5f4 <_printf_i+0xbc>
 800f5f0:	681d      	ldr	r5, [r3, #0]
 800f5f2:	e003      	b.n	800f5fc <_printf_i+0xc4>
 800f5f4:	0645      	lsls	r5, r0, #25
 800f5f6:	d5fb      	bpl.n	800f5f0 <_printf_i+0xb8>
 800f5f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5fc:	2d00      	cmp	r5, #0
 800f5fe:	da03      	bge.n	800f608 <_printf_i+0xd0>
 800f600:	232d      	movs	r3, #45	@ 0x2d
 800f602:	426d      	negs	r5, r5
 800f604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f608:	4858      	ldr	r0, [pc, #352]	@ (800f76c <_printf_i+0x234>)
 800f60a:	230a      	movs	r3, #10
 800f60c:	e011      	b.n	800f632 <_printf_i+0xfa>
 800f60e:	6821      	ldr	r1, [r4, #0]
 800f610:	6833      	ldr	r3, [r6, #0]
 800f612:	0608      	lsls	r0, r1, #24
 800f614:	f853 5b04 	ldr.w	r5, [r3], #4
 800f618:	d402      	bmi.n	800f620 <_printf_i+0xe8>
 800f61a:	0649      	lsls	r1, r1, #25
 800f61c:	bf48      	it	mi
 800f61e:	b2ad      	uxthmi	r5, r5
 800f620:	2f6f      	cmp	r7, #111	@ 0x6f
 800f622:	4852      	ldr	r0, [pc, #328]	@ (800f76c <_printf_i+0x234>)
 800f624:	6033      	str	r3, [r6, #0]
 800f626:	bf14      	ite	ne
 800f628:	230a      	movne	r3, #10
 800f62a:	2308      	moveq	r3, #8
 800f62c:	2100      	movs	r1, #0
 800f62e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f632:	6866      	ldr	r6, [r4, #4]
 800f634:	60a6      	str	r6, [r4, #8]
 800f636:	2e00      	cmp	r6, #0
 800f638:	db05      	blt.n	800f646 <_printf_i+0x10e>
 800f63a:	6821      	ldr	r1, [r4, #0]
 800f63c:	432e      	orrs	r6, r5
 800f63e:	f021 0104 	bic.w	r1, r1, #4
 800f642:	6021      	str	r1, [r4, #0]
 800f644:	d04b      	beq.n	800f6de <_printf_i+0x1a6>
 800f646:	4616      	mov	r6, r2
 800f648:	fbb5 f1f3 	udiv	r1, r5, r3
 800f64c:	fb03 5711 	mls	r7, r3, r1, r5
 800f650:	5dc7      	ldrb	r7, [r0, r7]
 800f652:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f656:	462f      	mov	r7, r5
 800f658:	42bb      	cmp	r3, r7
 800f65a:	460d      	mov	r5, r1
 800f65c:	d9f4      	bls.n	800f648 <_printf_i+0x110>
 800f65e:	2b08      	cmp	r3, #8
 800f660:	d10b      	bne.n	800f67a <_printf_i+0x142>
 800f662:	6823      	ldr	r3, [r4, #0]
 800f664:	07df      	lsls	r7, r3, #31
 800f666:	d508      	bpl.n	800f67a <_printf_i+0x142>
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	6861      	ldr	r1, [r4, #4]
 800f66c:	4299      	cmp	r1, r3
 800f66e:	bfde      	ittt	le
 800f670:	2330      	movle	r3, #48	@ 0x30
 800f672:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f676:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f67a:	1b92      	subs	r2, r2, r6
 800f67c:	6122      	str	r2, [r4, #16]
 800f67e:	f8cd a000 	str.w	sl, [sp]
 800f682:	464b      	mov	r3, r9
 800f684:	aa03      	add	r2, sp, #12
 800f686:	4621      	mov	r1, r4
 800f688:	4640      	mov	r0, r8
 800f68a:	f7ff fee7 	bl	800f45c <_printf_common>
 800f68e:	3001      	adds	r0, #1
 800f690:	d14a      	bne.n	800f728 <_printf_i+0x1f0>
 800f692:	f04f 30ff 	mov.w	r0, #4294967295
 800f696:	b004      	add	sp, #16
 800f698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	f043 0320 	orr.w	r3, r3, #32
 800f6a2:	6023      	str	r3, [r4, #0]
 800f6a4:	4832      	ldr	r0, [pc, #200]	@ (800f770 <_printf_i+0x238>)
 800f6a6:	2778      	movs	r7, #120	@ 0x78
 800f6a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	6831      	ldr	r1, [r6, #0]
 800f6b0:	061f      	lsls	r7, r3, #24
 800f6b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6b6:	d402      	bmi.n	800f6be <_printf_i+0x186>
 800f6b8:	065f      	lsls	r7, r3, #25
 800f6ba:	bf48      	it	mi
 800f6bc:	b2ad      	uxthmi	r5, r5
 800f6be:	6031      	str	r1, [r6, #0]
 800f6c0:	07d9      	lsls	r1, r3, #31
 800f6c2:	bf44      	itt	mi
 800f6c4:	f043 0320 	orrmi.w	r3, r3, #32
 800f6c8:	6023      	strmi	r3, [r4, #0]
 800f6ca:	b11d      	cbz	r5, 800f6d4 <_printf_i+0x19c>
 800f6cc:	2310      	movs	r3, #16
 800f6ce:	e7ad      	b.n	800f62c <_printf_i+0xf4>
 800f6d0:	4826      	ldr	r0, [pc, #152]	@ (800f76c <_printf_i+0x234>)
 800f6d2:	e7e9      	b.n	800f6a8 <_printf_i+0x170>
 800f6d4:	6823      	ldr	r3, [r4, #0]
 800f6d6:	f023 0320 	bic.w	r3, r3, #32
 800f6da:	6023      	str	r3, [r4, #0]
 800f6dc:	e7f6      	b.n	800f6cc <_printf_i+0x194>
 800f6de:	4616      	mov	r6, r2
 800f6e0:	e7bd      	b.n	800f65e <_printf_i+0x126>
 800f6e2:	6833      	ldr	r3, [r6, #0]
 800f6e4:	6825      	ldr	r5, [r4, #0]
 800f6e6:	6961      	ldr	r1, [r4, #20]
 800f6e8:	1d18      	adds	r0, r3, #4
 800f6ea:	6030      	str	r0, [r6, #0]
 800f6ec:	062e      	lsls	r6, r5, #24
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	d501      	bpl.n	800f6f6 <_printf_i+0x1be>
 800f6f2:	6019      	str	r1, [r3, #0]
 800f6f4:	e002      	b.n	800f6fc <_printf_i+0x1c4>
 800f6f6:	0668      	lsls	r0, r5, #25
 800f6f8:	d5fb      	bpl.n	800f6f2 <_printf_i+0x1ba>
 800f6fa:	8019      	strh	r1, [r3, #0]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	6123      	str	r3, [r4, #16]
 800f700:	4616      	mov	r6, r2
 800f702:	e7bc      	b.n	800f67e <_printf_i+0x146>
 800f704:	6833      	ldr	r3, [r6, #0]
 800f706:	1d1a      	adds	r2, r3, #4
 800f708:	6032      	str	r2, [r6, #0]
 800f70a:	681e      	ldr	r6, [r3, #0]
 800f70c:	6862      	ldr	r2, [r4, #4]
 800f70e:	2100      	movs	r1, #0
 800f710:	4630      	mov	r0, r6
 800f712:	f7f0 fde5 	bl	80002e0 <memchr>
 800f716:	b108      	cbz	r0, 800f71c <_printf_i+0x1e4>
 800f718:	1b80      	subs	r0, r0, r6
 800f71a:	6060      	str	r0, [r4, #4]
 800f71c:	6863      	ldr	r3, [r4, #4]
 800f71e:	6123      	str	r3, [r4, #16]
 800f720:	2300      	movs	r3, #0
 800f722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f726:	e7aa      	b.n	800f67e <_printf_i+0x146>
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	4632      	mov	r2, r6
 800f72c:	4649      	mov	r1, r9
 800f72e:	4640      	mov	r0, r8
 800f730:	47d0      	blx	sl
 800f732:	3001      	adds	r0, #1
 800f734:	d0ad      	beq.n	800f692 <_printf_i+0x15a>
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	079b      	lsls	r3, r3, #30
 800f73a:	d413      	bmi.n	800f764 <_printf_i+0x22c>
 800f73c:	68e0      	ldr	r0, [r4, #12]
 800f73e:	9b03      	ldr	r3, [sp, #12]
 800f740:	4298      	cmp	r0, r3
 800f742:	bfb8      	it	lt
 800f744:	4618      	movlt	r0, r3
 800f746:	e7a6      	b.n	800f696 <_printf_i+0x15e>
 800f748:	2301      	movs	r3, #1
 800f74a:	4632      	mov	r2, r6
 800f74c:	4649      	mov	r1, r9
 800f74e:	4640      	mov	r0, r8
 800f750:	47d0      	blx	sl
 800f752:	3001      	adds	r0, #1
 800f754:	d09d      	beq.n	800f692 <_printf_i+0x15a>
 800f756:	3501      	adds	r5, #1
 800f758:	68e3      	ldr	r3, [r4, #12]
 800f75a:	9903      	ldr	r1, [sp, #12]
 800f75c:	1a5b      	subs	r3, r3, r1
 800f75e:	42ab      	cmp	r3, r5
 800f760:	dcf2      	bgt.n	800f748 <_printf_i+0x210>
 800f762:	e7eb      	b.n	800f73c <_printf_i+0x204>
 800f764:	2500      	movs	r5, #0
 800f766:	f104 0619 	add.w	r6, r4, #25
 800f76a:	e7f5      	b.n	800f758 <_printf_i+0x220>
 800f76c:	08013232 	.word	0x08013232
 800f770:	08013243 	.word	0x08013243

0800f774 <_scanf_float>:
 800f774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f778:	b087      	sub	sp, #28
 800f77a:	4691      	mov	r9, r2
 800f77c:	9303      	str	r3, [sp, #12]
 800f77e:	688b      	ldr	r3, [r1, #8]
 800f780:	1e5a      	subs	r2, r3, #1
 800f782:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f786:	bf81      	itttt	hi
 800f788:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f78c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f790:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f794:	608b      	strhi	r3, [r1, #8]
 800f796:	680b      	ldr	r3, [r1, #0]
 800f798:	460a      	mov	r2, r1
 800f79a:	f04f 0500 	mov.w	r5, #0
 800f79e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f7a2:	f842 3b1c 	str.w	r3, [r2], #28
 800f7a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f7aa:	4680      	mov	r8, r0
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	bf98      	it	ls
 800f7b0:	f04f 0b00 	movls.w	fp, #0
 800f7b4:	9201      	str	r2, [sp, #4]
 800f7b6:	4616      	mov	r6, r2
 800f7b8:	46aa      	mov	sl, r5
 800f7ba:	462f      	mov	r7, r5
 800f7bc:	9502      	str	r5, [sp, #8]
 800f7be:	68a2      	ldr	r2, [r4, #8]
 800f7c0:	b15a      	cbz	r2, 800f7da <_scanf_float+0x66>
 800f7c2:	f8d9 3000 	ldr.w	r3, [r9]
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	2b4e      	cmp	r3, #78	@ 0x4e
 800f7ca:	d863      	bhi.n	800f894 <_scanf_float+0x120>
 800f7cc:	2b40      	cmp	r3, #64	@ 0x40
 800f7ce:	d83b      	bhi.n	800f848 <_scanf_float+0xd4>
 800f7d0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f7d4:	b2c8      	uxtb	r0, r1
 800f7d6:	280e      	cmp	r0, #14
 800f7d8:	d939      	bls.n	800f84e <_scanf_float+0xda>
 800f7da:	b11f      	cbz	r7, 800f7e4 <_scanf_float+0x70>
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7e2:	6023      	str	r3, [r4, #0]
 800f7e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7e8:	f1ba 0f01 	cmp.w	sl, #1
 800f7ec:	f200 8114 	bhi.w	800fa18 <_scanf_float+0x2a4>
 800f7f0:	9b01      	ldr	r3, [sp, #4]
 800f7f2:	429e      	cmp	r6, r3
 800f7f4:	f200 8105 	bhi.w	800fa02 <_scanf_float+0x28e>
 800f7f8:	2001      	movs	r0, #1
 800f7fa:	b007      	add	sp, #28
 800f7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f800:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f804:	2a0d      	cmp	r2, #13
 800f806:	d8e8      	bhi.n	800f7da <_scanf_float+0x66>
 800f808:	a101      	add	r1, pc, #4	@ (adr r1, 800f810 <_scanf_float+0x9c>)
 800f80a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f80e:	bf00      	nop
 800f810:	0800f959 	.word	0x0800f959
 800f814:	0800f7db 	.word	0x0800f7db
 800f818:	0800f7db 	.word	0x0800f7db
 800f81c:	0800f7db 	.word	0x0800f7db
 800f820:	0800f9b5 	.word	0x0800f9b5
 800f824:	0800f98f 	.word	0x0800f98f
 800f828:	0800f7db 	.word	0x0800f7db
 800f82c:	0800f7db 	.word	0x0800f7db
 800f830:	0800f967 	.word	0x0800f967
 800f834:	0800f7db 	.word	0x0800f7db
 800f838:	0800f7db 	.word	0x0800f7db
 800f83c:	0800f7db 	.word	0x0800f7db
 800f840:	0800f7db 	.word	0x0800f7db
 800f844:	0800f923 	.word	0x0800f923
 800f848:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f84c:	e7da      	b.n	800f804 <_scanf_float+0x90>
 800f84e:	290e      	cmp	r1, #14
 800f850:	d8c3      	bhi.n	800f7da <_scanf_float+0x66>
 800f852:	a001      	add	r0, pc, #4	@ (adr r0, 800f858 <_scanf_float+0xe4>)
 800f854:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f858:	0800f913 	.word	0x0800f913
 800f85c:	0800f7db 	.word	0x0800f7db
 800f860:	0800f913 	.word	0x0800f913
 800f864:	0800f9a3 	.word	0x0800f9a3
 800f868:	0800f7db 	.word	0x0800f7db
 800f86c:	0800f8b5 	.word	0x0800f8b5
 800f870:	0800f8f9 	.word	0x0800f8f9
 800f874:	0800f8f9 	.word	0x0800f8f9
 800f878:	0800f8f9 	.word	0x0800f8f9
 800f87c:	0800f8f9 	.word	0x0800f8f9
 800f880:	0800f8f9 	.word	0x0800f8f9
 800f884:	0800f8f9 	.word	0x0800f8f9
 800f888:	0800f8f9 	.word	0x0800f8f9
 800f88c:	0800f8f9 	.word	0x0800f8f9
 800f890:	0800f8f9 	.word	0x0800f8f9
 800f894:	2b6e      	cmp	r3, #110	@ 0x6e
 800f896:	d809      	bhi.n	800f8ac <_scanf_float+0x138>
 800f898:	2b60      	cmp	r3, #96	@ 0x60
 800f89a:	d8b1      	bhi.n	800f800 <_scanf_float+0x8c>
 800f89c:	2b54      	cmp	r3, #84	@ 0x54
 800f89e:	d07b      	beq.n	800f998 <_scanf_float+0x224>
 800f8a0:	2b59      	cmp	r3, #89	@ 0x59
 800f8a2:	d19a      	bne.n	800f7da <_scanf_float+0x66>
 800f8a4:	2d07      	cmp	r5, #7
 800f8a6:	d198      	bne.n	800f7da <_scanf_float+0x66>
 800f8a8:	2508      	movs	r5, #8
 800f8aa:	e02f      	b.n	800f90c <_scanf_float+0x198>
 800f8ac:	2b74      	cmp	r3, #116	@ 0x74
 800f8ae:	d073      	beq.n	800f998 <_scanf_float+0x224>
 800f8b0:	2b79      	cmp	r3, #121	@ 0x79
 800f8b2:	e7f6      	b.n	800f8a2 <_scanf_float+0x12e>
 800f8b4:	6821      	ldr	r1, [r4, #0]
 800f8b6:	05c8      	lsls	r0, r1, #23
 800f8b8:	d51e      	bpl.n	800f8f8 <_scanf_float+0x184>
 800f8ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f8be:	6021      	str	r1, [r4, #0]
 800f8c0:	3701      	adds	r7, #1
 800f8c2:	f1bb 0f00 	cmp.w	fp, #0
 800f8c6:	d003      	beq.n	800f8d0 <_scanf_float+0x15c>
 800f8c8:	3201      	adds	r2, #1
 800f8ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8ce:	60a2      	str	r2, [r4, #8]
 800f8d0:	68a3      	ldr	r3, [r4, #8]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	60a3      	str	r3, [r4, #8]
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	6123      	str	r3, [r4, #16]
 800f8dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f8c9 3004 	str.w	r3, [r9, #4]
 800f8e8:	f340 8082 	ble.w	800f9f0 <_scanf_float+0x27c>
 800f8ec:	f8d9 3000 	ldr.w	r3, [r9]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	f8c9 3000 	str.w	r3, [r9]
 800f8f6:	e762      	b.n	800f7be <_scanf_float+0x4a>
 800f8f8:	eb1a 0105 	adds.w	r1, sl, r5
 800f8fc:	f47f af6d 	bne.w	800f7da <_scanf_float+0x66>
 800f900:	6822      	ldr	r2, [r4, #0]
 800f902:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f906:	6022      	str	r2, [r4, #0]
 800f908:	460d      	mov	r5, r1
 800f90a:	468a      	mov	sl, r1
 800f90c:	f806 3b01 	strb.w	r3, [r6], #1
 800f910:	e7de      	b.n	800f8d0 <_scanf_float+0x15c>
 800f912:	6822      	ldr	r2, [r4, #0]
 800f914:	0610      	lsls	r0, r2, #24
 800f916:	f57f af60 	bpl.w	800f7da <_scanf_float+0x66>
 800f91a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f91e:	6022      	str	r2, [r4, #0]
 800f920:	e7f4      	b.n	800f90c <_scanf_float+0x198>
 800f922:	f1ba 0f00 	cmp.w	sl, #0
 800f926:	d10c      	bne.n	800f942 <_scanf_float+0x1ce>
 800f928:	b977      	cbnz	r7, 800f948 <_scanf_float+0x1d4>
 800f92a:	6822      	ldr	r2, [r4, #0]
 800f92c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f930:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f934:	d108      	bne.n	800f948 <_scanf_float+0x1d4>
 800f936:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f93a:	6022      	str	r2, [r4, #0]
 800f93c:	f04f 0a01 	mov.w	sl, #1
 800f940:	e7e4      	b.n	800f90c <_scanf_float+0x198>
 800f942:	f1ba 0f02 	cmp.w	sl, #2
 800f946:	d050      	beq.n	800f9ea <_scanf_float+0x276>
 800f948:	2d01      	cmp	r5, #1
 800f94a:	d002      	beq.n	800f952 <_scanf_float+0x1de>
 800f94c:	2d04      	cmp	r5, #4
 800f94e:	f47f af44 	bne.w	800f7da <_scanf_float+0x66>
 800f952:	3501      	adds	r5, #1
 800f954:	b2ed      	uxtb	r5, r5
 800f956:	e7d9      	b.n	800f90c <_scanf_float+0x198>
 800f958:	f1ba 0f01 	cmp.w	sl, #1
 800f95c:	f47f af3d 	bne.w	800f7da <_scanf_float+0x66>
 800f960:	f04f 0a02 	mov.w	sl, #2
 800f964:	e7d2      	b.n	800f90c <_scanf_float+0x198>
 800f966:	b975      	cbnz	r5, 800f986 <_scanf_float+0x212>
 800f968:	2f00      	cmp	r7, #0
 800f96a:	f47f af37 	bne.w	800f7dc <_scanf_float+0x68>
 800f96e:	6822      	ldr	r2, [r4, #0]
 800f970:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f974:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f978:	f040 80fc 	bne.w	800fb74 <_scanf_float+0x400>
 800f97c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f980:	6022      	str	r2, [r4, #0]
 800f982:	2501      	movs	r5, #1
 800f984:	e7c2      	b.n	800f90c <_scanf_float+0x198>
 800f986:	2d03      	cmp	r5, #3
 800f988:	d0e3      	beq.n	800f952 <_scanf_float+0x1de>
 800f98a:	2d05      	cmp	r5, #5
 800f98c:	e7df      	b.n	800f94e <_scanf_float+0x1da>
 800f98e:	2d02      	cmp	r5, #2
 800f990:	f47f af23 	bne.w	800f7da <_scanf_float+0x66>
 800f994:	2503      	movs	r5, #3
 800f996:	e7b9      	b.n	800f90c <_scanf_float+0x198>
 800f998:	2d06      	cmp	r5, #6
 800f99a:	f47f af1e 	bne.w	800f7da <_scanf_float+0x66>
 800f99e:	2507      	movs	r5, #7
 800f9a0:	e7b4      	b.n	800f90c <_scanf_float+0x198>
 800f9a2:	6822      	ldr	r2, [r4, #0]
 800f9a4:	0591      	lsls	r1, r2, #22
 800f9a6:	f57f af18 	bpl.w	800f7da <_scanf_float+0x66>
 800f9aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f9ae:	6022      	str	r2, [r4, #0]
 800f9b0:	9702      	str	r7, [sp, #8]
 800f9b2:	e7ab      	b.n	800f90c <_scanf_float+0x198>
 800f9b4:	6822      	ldr	r2, [r4, #0]
 800f9b6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f9ba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f9be:	d005      	beq.n	800f9cc <_scanf_float+0x258>
 800f9c0:	0550      	lsls	r0, r2, #21
 800f9c2:	f57f af0a 	bpl.w	800f7da <_scanf_float+0x66>
 800f9c6:	2f00      	cmp	r7, #0
 800f9c8:	f000 80d4 	beq.w	800fb74 <_scanf_float+0x400>
 800f9cc:	0591      	lsls	r1, r2, #22
 800f9ce:	bf58      	it	pl
 800f9d0:	9902      	ldrpl	r1, [sp, #8]
 800f9d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f9d6:	bf58      	it	pl
 800f9d8:	1a79      	subpl	r1, r7, r1
 800f9da:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f9de:	bf58      	it	pl
 800f9e0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f9e4:	6022      	str	r2, [r4, #0]
 800f9e6:	2700      	movs	r7, #0
 800f9e8:	e790      	b.n	800f90c <_scanf_float+0x198>
 800f9ea:	f04f 0a03 	mov.w	sl, #3
 800f9ee:	e78d      	b.n	800f90c <_scanf_float+0x198>
 800f9f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f9f4:	4649      	mov	r1, r9
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	4798      	blx	r3
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	f43f aedf 	beq.w	800f7be <_scanf_float+0x4a>
 800fa00:	e6eb      	b.n	800f7da <_scanf_float+0x66>
 800fa02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa0a:	464a      	mov	r2, r9
 800fa0c:	4640      	mov	r0, r8
 800fa0e:	4798      	blx	r3
 800fa10:	6923      	ldr	r3, [r4, #16]
 800fa12:	3b01      	subs	r3, #1
 800fa14:	6123      	str	r3, [r4, #16]
 800fa16:	e6eb      	b.n	800f7f0 <_scanf_float+0x7c>
 800fa18:	1e6b      	subs	r3, r5, #1
 800fa1a:	2b06      	cmp	r3, #6
 800fa1c:	d824      	bhi.n	800fa68 <_scanf_float+0x2f4>
 800fa1e:	2d02      	cmp	r5, #2
 800fa20:	d836      	bhi.n	800fa90 <_scanf_float+0x31c>
 800fa22:	9b01      	ldr	r3, [sp, #4]
 800fa24:	429e      	cmp	r6, r3
 800fa26:	f67f aee7 	bls.w	800f7f8 <_scanf_float+0x84>
 800fa2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa32:	464a      	mov	r2, r9
 800fa34:	4640      	mov	r0, r8
 800fa36:	4798      	blx	r3
 800fa38:	6923      	ldr	r3, [r4, #16]
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	6123      	str	r3, [r4, #16]
 800fa3e:	e7f0      	b.n	800fa22 <_scanf_float+0x2ae>
 800fa40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fa48:	464a      	mov	r2, r9
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	4798      	blx	r3
 800fa4e:	6923      	ldr	r3, [r4, #16]
 800fa50:	3b01      	subs	r3, #1
 800fa52:	6123      	str	r3, [r4, #16]
 800fa54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa58:	fa5f fa8a 	uxtb.w	sl, sl
 800fa5c:	f1ba 0f02 	cmp.w	sl, #2
 800fa60:	d1ee      	bne.n	800fa40 <_scanf_float+0x2cc>
 800fa62:	3d03      	subs	r5, #3
 800fa64:	b2ed      	uxtb	r5, r5
 800fa66:	1b76      	subs	r6, r6, r5
 800fa68:	6823      	ldr	r3, [r4, #0]
 800fa6a:	05da      	lsls	r2, r3, #23
 800fa6c:	d530      	bpl.n	800fad0 <_scanf_float+0x35c>
 800fa6e:	055b      	lsls	r3, r3, #21
 800fa70:	d511      	bpl.n	800fa96 <_scanf_float+0x322>
 800fa72:	9b01      	ldr	r3, [sp, #4]
 800fa74:	429e      	cmp	r6, r3
 800fa76:	f67f aebf 	bls.w	800f7f8 <_scanf_float+0x84>
 800fa7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa82:	464a      	mov	r2, r9
 800fa84:	4640      	mov	r0, r8
 800fa86:	4798      	blx	r3
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	6123      	str	r3, [r4, #16]
 800fa8e:	e7f0      	b.n	800fa72 <_scanf_float+0x2fe>
 800fa90:	46aa      	mov	sl, r5
 800fa92:	46b3      	mov	fp, r6
 800fa94:	e7de      	b.n	800fa54 <_scanf_float+0x2e0>
 800fa96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa9a:	6923      	ldr	r3, [r4, #16]
 800fa9c:	2965      	cmp	r1, #101	@ 0x65
 800fa9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800faa2:	f106 35ff 	add.w	r5, r6, #4294967295
 800faa6:	6123      	str	r3, [r4, #16]
 800faa8:	d00c      	beq.n	800fac4 <_scanf_float+0x350>
 800faaa:	2945      	cmp	r1, #69	@ 0x45
 800faac:	d00a      	beq.n	800fac4 <_scanf_float+0x350>
 800faae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fab2:	464a      	mov	r2, r9
 800fab4:	4640      	mov	r0, r8
 800fab6:	4798      	blx	r3
 800fab8:	6923      	ldr	r3, [r4, #16]
 800faba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fabe:	3b01      	subs	r3, #1
 800fac0:	1eb5      	subs	r5, r6, #2
 800fac2:	6123      	str	r3, [r4, #16]
 800fac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fac8:	464a      	mov	r2, r9
 800faca:	4640      	mov	r0, r8
 800facc:	4798      	blx	r3
 800face:	462e      	mov	r6, r5
 800fad0:	6822      	ldr	r2, [r4, #0]
 800fad2:	f012 0210 	ands.w	r2, r2, #16
 800fad6:	d001      	beq.n	800fadc <_scanf_float+0x368>
 800fad8:	2000      	movs	r0, #0
 800fada:	e68e      	b.n	800f7fa <_scanf_float+0x86>
 800fadc:	7032      	strb	r2, [r6, #0]
 800fade:	6823      	ldr	r3, [r4, #0]
 800fae0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fae8:	d123      	bne.n	800fb32 <_scanf_float+0x3be>
 800faea:	9b02      	ldr	r3, [sp, #8]
 800faec:	429f      	cmp	r7, r3
 800faee:	d00a      	beq.n	800fb06 <_scanf_float+0x392>
 800faf0:	1bda      	subs	r2, r3, r7
 800faf2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800faf6:	429e      	cmp	r6, r3
 800faf8:	bf28      	it	cs
 800fafa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fafe:	491e      	ldr	r1, [pc, #120]	@ (800fb78 <_scanf_float+0x404>)
 800fb00:	4630      	mov	r0, r6
 800fb02:	f000 f96f 	bl	800fde4 <siprintf>
 800fb06:	9901      	ldr	r1, [sp, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	4640      	mov	r0, r8
 800fb0c:	f7ff f9f6 	bl	800eefc <_strtod_r>
 800fb10:	9b03      	ldr	r3, [sp, #12]
 800fb12:	6821      	ldr	r1, [r4, #0]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f011 0f02 	tst.w	r1, #2
 800fb1a:	f103 0204 	add.w	r2, r3, #4
 800fb1e:	d015      	beq.n	800fb4c <_scanf_float+0x3d8>
 800fb20:	9903      	ldr	r1, [sp, #12]
 800fb22:	600a      	str	r2, [r1, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	ed83 0b00 	vstr	d0, [r3]
 800fb2a:	68e3      	ldr	r3, [r4, #12]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	60e3      	str	r3, [r4, #12]
 800fb30:	e7d2      	b.n	800fad8 <_scanf_float+0x364>
 800fb32:	9b04      	ldr	r3, [sp, #16]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0e6      	beq.n	800fb06 <_scanf_float+0x392>
 800fb38:	9905      	ldr	r1, [sp, #20]
 800fb3a:	230a      	movs	r3, #10
 800fb3c:	3101      	adds	r1, #1
 800fb3e:	4640      	mov	r0, r8
 800fb40:	f002 f9e0 	bl	8011f04 <_strtol_r>
 800fb44:	9b04      	ldr	r3, [sp, #16]
 800fb46:	9e05      	ldr	r6, [sp, #20]
 800fb48:	1ac2      	subs	r2, r0, r3
 800fb4a:	e7d2      	b.n	800faf2 <_scanf_float+0x37e>
 800fb4c:	f011 0f04 	tst.w	r1, #4
 800fb50:	9903      	ldr	r1, [sp, #12]
 800fb52:	600a      	str	r2, [r1, #0]
 800fb54:	d1e6      	bne.n	800fb24 <_scanf_float+0x3b0>
 800fb56:	eeb4 0b40 	vcmp.f64	d0, d0
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	681d      	ldr	r5, [r3, #0]
 800fb60:	d705      	bvc.n	800fb6e <_scanf_float+0x3fa>
 800fb62:	4806      	ldr	r0, [pc, #24]	@ (800fb7c <_scanf_float+0x408>)
 800fb64:	f000 fb20 	bl	80101a8 <nanf>
 800fb68:	ed85 0a00 	vstr	s0, [r5]
 800fb6c:	e7dd      	b.n	800fb2a <_scanf_float+0x3b6>
 800fb6e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fb72:	e7f9      	b.n	800fb68 <_scanf_float+0x3f4>
 800fb74:	2700      	movs	r7, #0
 800fb76:	e635      	b.n	800f7e4 <_scanf_float+0x70>
 800fb78:	08013254 	.word	0x08013254
 800fb7c:	0801340e 	.word	0x0801340e

0800fb80 <std>:
 800fb80:	2300      	movs	r3, #0
 800fb82:	b510      	push	{r4, lr}
 800fb84:	4604      	mov	r4, r0
 800fb86:	e9c0 3300 	strd	r3, r3, [r0]
 800fb8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb8e:	6083      	str	r3, [r0, #8]
 800fb90:	8181      	strh	r1, [r0, #12]
 800fb92:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb94:	81c2      	strh	r2, [r0, #14]
 800fb96:	6183      	str	r3, [r0, #24]
 800fb98:	4619      	mov	r1, r3
 800fb9a:	2208      	movs	r2, #8
 800fb9c:	305c      	adds	r0, #92	@ 0x5c
 800fb9e:	f000 fa49 	bl	8010034 <memset>
 800fba2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd8 <std+0x58>)
 800fba4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fba6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbdc <std+0x5c>)
 800fba8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe0 <std+0x60>)
 800fbac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbae:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe4 <std+0x64>)
 800fbb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe8 <std+0x68>)
 800fbb4:	6224      	str	r4, [r4, #32]
 800fbb6:	429c      	cmp	r4, r3
 800fbb8:	d006      	beq.n	800fbc8 <std+0x48>
 800fbba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbbe:	4294      	cmp	r4, r2
 800fbc0:	d002      	beq.n	800fbc8 <std+0x48>
 800fbc2:	33d0      	adds	r3, #208	@ 0xd0
 800fbc4:	429c      	cmp	r4, r3
 800fbc6:	d105      	bne.n	800fbd4 <std+0x54>
 800fbc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbd0:	f000 bace 	b.w	8010170 <__retarget_lock_init_recursive>
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	bf00      	nop
 800fbd8:	0800fe81 	.word	0x0800fe81
 800fbdc:	0800fea7 	.word	0x0800fea7
 800fbe0:	0800fedf 	.word	0x0800fedf
 800fbe4:	0800ff03 	.word	0x0800ff03
 800fbe8:	24004dcc 	.word	0x24004dcc

0800fbec <stdio_exit_handler>:
 800fbec:	4a02      	ldr	r2, [pc, #8]	@ (800fbf8 <stdio_exit_handler+0xc>)
 800fbee:	4903      	ldr	r1, [pc, #12]	@ (800fbfc <stdio_exit_handler+0x10>)
 800fbf0:	4803      	ldr	r0, [pc, #12]	@ (800fc00 <stdio_exit_handler+0x14>)
 800fbf2:	f000 b869 	b.w	800fcc8 <_fwalk_sglue>
 800fbf6:	bf00      	nop
 800fbf8:	24000020 	.word	0x24000020
 800fbfc:	08012b99 	.word	0x08012b99
 800fc00:	2400019c 	.word	0x2400019c

0800fc04 <cleanup_stdio>:
 800fc04:	6841      	ldr	r1, [r0, #4]
 800fc06:	4b0c      	ldr	r3, [pc, #48]	@ (800fc38 <cleanup_stdio+0x34>)
 800fc08:	4299      	cmp	r1, r3
 800fc0a:	b510      	push	{r4, lr}
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	d001      	beq.n	800fc14 <cleanup_stdio+0x10>
 800fc10:	f002 ffc2 	bl	8012b98 <_fflush_r>
 800fc14:	68a1      	ldr	r1, [r4, #8]
 800fc16:	4b09      	ldr	r3, [pc, #36]	@ (800fc3c <cleanup_stdio+0x38>)
 800fc18:	4299      	cmp	r1, r3
 800fc1a:	d002      	beq.n	800fc22 <cleanup_stdio+0x1e>
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f002 ffbb 	bl	8012b98 <_fflush_r>
 800fc22:	68e1      	ldr	r1, [r4, #12]
 800fc24:	4b06      	ldr	r3, [pc, #24]	@ (800fc40 <cleanup_stdio+0x3c>)
 800fc26:	4299      	cmp	r1, r3
 800fc28:	d004      	beq.n	800fc34 <cleanup_stdio+0x30>
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc30:	f002 bfb2 	b.w	8012b98 <_fflush_r>
 800fc34:	bd10      	pop	{r4, pc}
 800fc36:	bf00      	nop
 800fc38:	24004dcc 	.word	0x24004dcc
 800fc3c:	24004e34 	.word	0x24004e34
 800fc40:	24004e9c 	.word	0x24004e9c

0800fc44 <global_stdio_init.part.0>:
 800fc44:	b510      	push	{r4, lr}
 800fc46:	4b0b      	ldr	r3, [pc, #44]	@ (800fc74 <global_stdio_init.part.0+0x30>)
 800fc48:	4c0b      	ldr	r4, [pc, #44]	@ (800fc78 <global_stdio_init.part.0+0x34>)
 800fc4a:	4a0c      	ldr	r2, [pc, #48]	@ (800fc7c <global_stdio_init.part.0+0x38>)
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	4620      	mov	r0, r4
 800fc50:	2200      	movs	r2, #0
 800fc52:	2104      	movs	r1, #4
 800fc54:	f7ff ff94 	bl	800fb80 <std>
 800fc58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	2109      	movs	r1, #9
 800fc60:	f7ff ff8e 	bl	800fb80 <std>
 800fc64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc68:	2202      	movs	r2, #2
 800fc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6e:	2112      	movs	r1, #18
 800fc70:	f7ff bf86 	b.w	800fb80 <std>
 800fc74:	24004f04 	.word	0x24004f04
 800fc78:	24004dcc 	.word	0x24004dcc
 800fc7c:	0800fbed 	.word	0x0800fbed

0800fc80 <__sfp_lock_acquire>:
 800fc80:	4801      	ldr	r0, [pc, #4]	@ (800fc88 <__sfp_lock_acquire+0x8>)
 800fc82:	f000 ba76 	b.w	8010172 <__retarget_lock_acquire_recursive>
 800fc86:	bf00      	nop
 800fc88:	24004f0d 	.word	0x24004f0d

0800fc8c <__sfp_lock_release>:
 800fc8c:	4801      	ldr	r0, [pc, #4]	@ (800fc94 <__sfp_lock_release+0x8>)
 800fc8e:	f000 ba71 	b.w	8010174 <__retarget_lock_release_recursive>
 800fc92:	bf00      	nop
 800fc94:	24004f0d 	.word	0x24004f0d

0800fc98 <__sinit>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	f7ff fff0 	bl	800fc80 <__sfp_lock_acquire>
 800fca0:	6a23      	ldr	r3, [r4, #32]
 800fca2:	b11b      	cbz	r3, 800fcac <__sinit+0x14>
 800fca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca8:	f7ff bff0 	b.w	800fc8c <__sfp_lock_release>
 800fcac:	4b04      	ldr	r3, [pc, #16]	@ (800fcc0 <__sinit+0x28>)
 800fcae:	6223      	str	r3, [r4, #32]
 800fcb0:	4b04      	ldr	r3, [pc, #16]	@ (800fcc4 <__sinit+0x2c>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1f5      	bne.n	800fca4 <__sinit+0xc>
 800fcb8:	f7ff ffc4 	bl	800fc44 <global_stdio_init.part.0>
 800fcbc:	e7f2      	b.n	800fca4 <__sinit+0xc>
 800fcbe:	bf00      	nop
 800fcc0:	0800fc05 	.word	0x0800fc05
 800fcc4:	24004f04 	.word	0x24004f04

0800fcc8 <_fwalk_sglue>:
 800fcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fccc:	4607      	mov	r7, r0
 800fcce:	4688      	mov	r8, r1
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	2600      	movs	r6, #0
 800fcd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcd8:	f1b9 0901 	subs.w	r9, r9, #1
 800fcdc:	d505      	bpl.n	800fcea <_fwalk_sglue+0x22>
 800fcde:	6824      	ldr	r4, [r4, #0]
 800fce0:	2c00      	cmp	r4, #0
 800fce2:	d1f7      	bne.n	800fcd4 <_fwalk_sglue+0xc>
 800fce4:	4630      	mov	r0, r6
 800fce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcea:	89ab      	ldrh	r3, [r5, #12]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d907      	bls.n	800fd00 <_fwalk_sglue+0x38>
 800fcf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	d003      	beq.n	800fd00 <_fwalk_sglue+0x38>
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	47c0      	blx	r8
 800fcfe:	4306      	orrs	r6, r0
 800fd00:	3568      	adds	r5, #104	@ 0x68
 800fd02:	e7e9      	b.n	800fcd8 <_fwalk_sglue+0x10>

0800fd04 <iprintf>:
 800fd04:	b40f      	push	{r0, r1, r2, r3}
 800fd06:	b507      	push	{r0, r1, r2, lr}
 800fd08:	4906      	ldr	r1, [pc, #24]	@ (800fd24 <iprintf+0x20>)
 800fd0a:	ab04      	add	r3, sp, #16
 800fd0c:	6808      	ldr	r0, [r1, #0]
 800fd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd12:	6881      	ldr	r1, [r0, #8]
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	f002 fc55 	bl	80125c4 <_vfiprintf_r>
 800fd1a:	b003      	add	sp, #12
 800fd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd20:	b004      	add	sp, #16
 800fd22:	4770      	bx	lr
 800fd24:	24000198 	.word	0x24000198

0800fd28 <_puts_r>:
 800fd28:	6a03      	ldr	r3, [r0, #32]
 800fd2a:	b570      	push	{r4, r5, r6, lr}
 800fd2c:	6884      	ldr	r4, [r0, #8]
 800fd2e:	4605      	mov	r5, r0
 800fd30:	460e      	mov	r6, r1
 800fd32:	b90b      	cbnz	r3, 800fd38 <_puts_r+0x10>
 800fd34:	f7ff ffb0 	bl	800fc98 <__sinit>
 800fd38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd3a:	07db      	lsls	r3, r3, #31
 800fd3c:	d405      	bmi.n	800fd4a <_puts_r+0x22>
 800fd3e:	89a3      	ldrh	r3, [r4, #12]
 800fd40:	0598      	lsls	r0, r3, #22
 800fd42:	d402      	bmi.n	800fd4a <_puts_r+0x22>
 800fd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd46:	f000 fa14 	bl	8010172 <__retarget_lock_acquire_recursive>
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	0719      	lsls	r1, r3, #28
 800fd4e:	d502      	bpl.n	800fd56 <_puts_r+0x2e>
 800fd50:	6923      	ldr	r3, [r4, #16]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d135      	bne.n	800fdc2 <_puts_r+0x9a>
 800fd56:	4621      	mov	r1, r4
 800fd58:	4628      	mov	r0, r5
 800fd5a:	f000 f915 	bl	800ff88 <__swsetup_r>
 800fd5e:	b380      	cbz	r0, 800fdc2 <_puts_r+0x9a>
 800fd60:	f04f 35ff 	mov.w	r5, #4294967295
 800fd64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd66:	07da      	lsls	r2, r3, #31
 800fd68:	d405      	bmi.n	800fd76 <_puts_r+0x4e>
 800fd6a:	89a3      	ldrh	r3, [r4, #12]
 800fd6c:	059b      	lsls	r3, r3, #22
 800fd6e:	d402      	bmi.n	800fd76 <_puts_r+0x4e>
 800fd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd72:	f000 f9ff 	bl	8010174 <__retarget_lock_release_recursive>
 800fd76:	4628      	mov	r0, r5
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	da04      	bge.n	800fd88 <_puts_r+0x60>
 800fd7e:	69a2      	ldr	r2, [r4, #24]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	dc17      	bgt.n	800fdb4 <_puts_r+0x8c>
 800fd84:	290a      	cmp	r1, #10
 800fd86:	d015      	beq.n	800fdb4 <_puts_r+0x8c>
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	1c5a      	adds	r2, r3, #1
 800fd8c:	6022      	str	r2, [r4, #0]
 800fd8e:	7019      	strb	r1, [r3, #0]
 800fd90:	68a3      	ldr	r3, [r4, #8]
 800fd92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd96:	3b01      	subs	r3, #1
 800fd98:	60a3      	str	r3, [r4, #8]
 800fd9a:	2900      	cmp	r1, #0
 800fd9c:	d1ed      	bne.n	800fd7a <_puts_r+0x52>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	da11      	bge.n	800fdc6 <_puts_r+0x9e>
 800fda2:	4622      	mov	r2, r4
 800fda4:	210a      	movs	r1, #10
 800fda6:	4628      	mov	r0, r5
 800fda8:	f000 f8af 	bl	800ff0a <__swbuf_r>
 800fdac:	3001      	adds	r0, #1
 800fdae:	d0d7      	beq.n	800fd60 <_puts_r+0x38>
 800fdb0:	250a      	movs	r5, #10
 800fdb2:	e7d7      	b.n	800fd64 <_puts_r+0x3c>
 800fdb4:	4622      	mov	r2, r4
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f000 f8a7 	bl	800ff0a <__swbuf_r>
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	d1e7      	bne.n	800fd90 <_puts_r+0x68>
 800fdc0:	e7ce      	b.n	800fd60 <_puts_r+0x38>
 800fdc2:	3e01      	subs	r6, #1
 800fdc4:	e7e4      	b.n	800fd90 <_puts_r+0x68>
 800fdc6:	6823      	ldr	r3, [r4, #0]
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	6022      	str	r2, [r4, #0]
 800fdcc:	220a      	movs	r2, #10
 800fdce:	701a      	strb	r2, [r3, #0]
 800fdd0:	e7ee      	b.n	800fdb0 <_puts_r+0x88>
	...

0800fdd4 <puts>:
 800fdd4:	4b02      	ldr	r3, [pc, #8]	@ (800fde0 <puts+0xc>)
 800fdd6:	4601      	mov	r1, r0
 800fdd8:	6818      	ldr	r0, [r3, #0]
 800fdda:	f7ff bfa5 	b.w	800fd28 <_puts_r>
 800fdde:	bf00      	nop
 800fde0:	24000198 	.word	0x24000198

0800fde4 <siprintf>:
 800fde4:	b40e      	push	{r1, r2, r3}
 800fde6:	b510      	push	{r4, lr}
 800fde8:	b09d      	sub	sp, #116	@ 0x74
 800fdea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fdec:	9002      	str	r0, [sp, #8]
 800fdee:	9006      	str	r0, [sp, #24]
 800fdf0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fdf4:	480a      	ldr	r0, [pc, #40]	@ (800fe20 <siprintf+0x3c>)
 800fdf6:	9107      	str	r1, [sp, #28]
 800fdf8:	9104      	str	r1, [sp, #16]
 800fdfa:	490a      	ldr	r1, [pc, #40]	@ (800fe24 <siprintf+0x40>)
 800fdfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe00:	9105      	str	r1, [sp, #20]
 800fe02:	2400      	movs	r4, #0
 800fe04:	a902      	add	r1, sp, #8
 800fe06:	6800      	ldr	r0, [r0, #0]
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fe0c:	f002 f8e4 	bl	8011fd8 <_svfiprintf_r>
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	701c      	strb	r4, [r3, #0]
 800fe14:	b01d      	add	sp, #116	@ 0x74
 800fe16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe1a:	b003      	add	sp, #12
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	24000198 	.word	0x24000198
 800fe24:	ffff0208 	.word	0xffff0208

0800fe28 <siscanf>:
 800fe28:	b40e      	push	{r1, r2, r3}
 800fe2a:	b570      	push	{r4, r5, r6, lr}
 800fe2c:	b09d      	sub	sp, #116	@ 0x74
 800fe2e:	ac21      	add	r4, sp, #132	@ 0x84
 800fe30:	2500      	movs	r5, #0
 800fe32:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fe36:	f854 6b04 	ldr.w	r6, [r4], #4
 800fe3a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fe3e:	951b      	str	r5, [sp, #108]	@ 0x6c
 800fe40:	9002      	str	r0, [sp, #8]
 800fe42:	9006      	str	r0, [sp, #24]
 800fe44:	f7f0 fa9c 	bl	8000380 <strlen>
 800fe48:	4b0b      	ldr	r3, [pc, #44]	@ (800fe78 <siscanf+0x50>)
 800fe4a:	9003      	str	r0, [sp, #12]
 800fe4c:	9007      	str	r0, [sp, #28]
 800fe4e:	480b      	ldr	r0, [pc, #44]	@ (800fe7c <siscanf+0x54>)
 800fe50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe5a:	4632      	mov	r2, r6
 800fe5c:	4623      	mov	r3, r4
 800fe5e:	a902      	add	r1, sp, #8
 800fe60:	6800      	ldr	r0, [r0, #0]
 800fe62:	950f      	str	r5, [sp, #60]	@ 0x3c
 800fe64:	9514      	str	r5, [sp, #80]	@ 0x50
 800fe66:	9401      	str	r4, [sp, #4]
 800fe68:	f002 fa0c 	bl	8012284 <__ssvfiscanf_r>
 800fe6c:	b01d      	add	sp, #116	@ 0x74
 800fe6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe72:	b003      	add	sp, #12
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	0800fea3 	.word	0x0800fea3
 800fe7c:	24000198 	.word	0x24000198

0800fe80 <__sread>:
 800fe80:	b510      	push	{r4, lr}
 800fe82:	460c      	mov	r4, r1
 800fe84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe88:	f000 f914 	bl	80100b4 <_read_r>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	bfab      	itete	ge
 800fe90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe92:	89a3      	ldrhlt	r3, [r4, #12]
 800fe94:	181b      	addge	r3, r3, r0
 800fe96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fe9a:	bfac      	ite	ge
 800fe9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fe9e:	81a3      	strhlt	r3, [r4, #12]
 800fea0:	bd10      	pop	{r4, pc}

0800fea2 <__seofread>:
 800fea2:	2000      	movs	r0, #0
 800fea4:	4770      	bx	lr

0800fea6 <__swrite>:
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	461f      	mov	r7, r3
 800feac:	898b      	ldrh	r3, [r1, #12]
 800feae:	05db      	lsls	r3, r3, #23
 800feb0:	4605      	mov	r5, r0
 800feb2:	460c      	mov	r4, r1
 800feb4:	4616      	mov	r6, r2
 800feb6:	d505      	bpl.n	800fec4 <__swrite+0x1e>
 800feb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800febc:	2302      	movs	r3, #2
 800febe:	2200      	movs	r2, #0
 800fec0:	f000 f8e6 	bl	8010090 <_lseek_r>
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fece:	81a3      	strh	r3, [r4, #12]
 800fed0:	4632      	mov	r2, r6
 800fed2:	463b      	mov	r3, r7
 800fed4:	4628      	mov	r0, r5
 800fed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feda:	f000 b90d 	b.w	80100f8 <_write_r>

0800fede <__sseek>:
 800fede:	b510      	push	{r4, lr}
 800fee0:	460c      	mov	r4, r1
 800fee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee6:	f000 f8d3 	bl	8010090 <_lseek_r>
 800feea:	1c43      	adds	r3, r0, #1
 800feec:	89a3      	ldrh	r3, [r4, #12]
 800feee:	bf15      	itete	ne
 800fef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fefa:	81a3      	strheq	r3, [r4, #12]
 800fefc:	bf18      	it	ne
 800fefe:	81a3      	strhne	r3, [r4, #12]
 800ff00:	bd10      	pop	{r4, pc}

0800ff02 <__sclose>:
 800ff02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff06:	f000 b8b3 	b.w	8010070 <_close_r>

0800ff0a <__swbuf_r>:
 800ff0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff0c:	460e      	mov	r6, r1
 800ff0e:	4614      	mov	r4, r2
 800ff10:	4605      	mov	r5, r0
 800ff12:	b118      	cbz	r0, 800ff1c <__swbuf_r+0x12>
 800ff14:	6a03      	ldr	r3, [r0, #32]
 800ff16:	b90b      	cbnz	r3, 800ff1c <__swbuf_r+0x12>
 800ff18:	f7ff febe 	bl	800fc98 <__sinit>
 800ff1c:	69a3      	ldr	r3, [r4, #24]
 800ff1e:	60a3      	str	r3, [r4, #8]
 800ff20:	89a3      	ldrh	r3, [r4, #12]
 800ff22:	071a      	lsls	r2, r3, #28
 800ff24:	d501      	bpl.n	800ff2a <__swbuf_r+0x20>
 800ff26:	6923      	ldr	r3, [r4, #16]
 800ff28:	b943      	cbnz	r3, 800ff3c <__swbuf_r+0x32>
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f000 f82b 	bl	800ff88 <__swsetup_r>
 800ff32:	b118      	cbz	r0, 800ff3c <__swbuf_r+0x32>
 800ff34:	f04f 37ff 	mov.w	r7, #4294967295
 800ff38:	4638      	mov	r0, r7
 800ff3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	6922      	ldr	r2, [r4, #16]
 800ff40:	1a98      	subs	r0, r3, r2
 800ff42:	6963      	ldr	r3, [r4, #20]
 800ff44:	b2f6      	uxtb	r6, r6
 800ff46:	4283      	cmp	r3, r0
 800ff48:	4637      	mov	r7, r6
 800ff4a:	dc05      	bgt.n	800ff58 <__swbuf_r+0x4e>
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f002 fe22 	bl	8012b98 <_fflush_r>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d1ed      	bne.n	800ff34 <__swbuf_r+0x2a>
 800ff58:	68a3      	ldr	r3, [r4, #8]
 800ff5a:	3b01      	subs	r3, #1
 800ff5c:	60a3      	str	r3, [r4, #8]
 800ff5e:	6823      	ldr	r3, [r4, #0]
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	6022      	str	r2, [r4, #0]
 800ff64:	701e      	strb	r6, [r3, #0]
 800ff66:	6962      	ldr	r2, [r4, #20]
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d004      	beq.n	800ff78 <__swbuf_r+0x6e>
 800ff6e:	89a3      	ldrh	r3, [r4, #12]
 800ff70:	07db      	lsls	r3, r3, #31
 800ff72:	d5e1      	bpl.n	800ff38 <__swbuf_r+0x2e>
 800ff74:	2e0a      	cmp	r6, #10
 800ff76:	d1df      	bne.n	800ff38 <__swbuf_r+0x2e>
 800ff78:	4621      	mov	r1, r4
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f002 fe0c 	bl	8012b98 <_fflush_r>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d0d9      	beq.n	800ff38 <__swbuf_r+0x2e>
 800ff84:	e7d6      	b.n	800ff34 <__swbuf_r+0x2a>
	...

0800ff88 <__swsetup_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4b29      	ldr	r3, [pc, #164]	@ (8010030 <__swsetup_r+0xa8>)
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	6818      	ldr	r0, [r3, #0]
 800ff90:	460c      	mov	r4, r1
 800ff92:	b118      	cbz	r0, 800ff9c <__swsetup_r+0x14>
 800ff94:	6a03      	ldr	r3, [r0, #32]
 800ff96:	b90b      	cbnz	r3, 800ff9c <__swsetup_r+0x14>
 800ff98:	f7ff fe7e 	bl	800fc98 <__sinit>
 800ff9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa0:	0719      	lsls	r1, r3, #28
 800ffa2:	d422      	bmi.n	800ffea <__swsetup_r+0x62>
 800ffa4:	06da      	lsls	r2, r3, #27
 800ffa6:	d407      	bmi.n	800ffb8 <__swsetup_r+0x30>
 800ffa8:	2209      	movs	r2, #9
 800ffaa:	602a      	str	r2, [r5, #0]
 800ffac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffb0:	81a3      	strh	r3, [r4, #12]
 800ffb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb6:	e033      	b.n	8010020 <__swsetup_r+0x98>
 800ffb8:	0758      	lsls	r0, r3, #29
 800ffba:	d512      	bpl.n	800ffe2 <__swsetup_r+0x5a>
 800ffbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffbe:	b141      	cbz	r1, 800ffd2 <__swsetup_r+0x4a>
 800ffc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffc4:	4299      	cmp	r1, r3
 800ffc6:	d002      	beq.n	800ffce <__swsetup_r+0x46>
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f000 fedb 	bl	8010d84 <_free_r>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ffd2:	89a3      	ldrh	r3, [r4, #12]
 800ffd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ffd8:	81a3      	strh	r3, [r4, #12]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	6063      	str	r3, [r4, #4]
 800ffde:	6923      	ldr	r3, [r4, #16]
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	89a3      	ldrh	r3, [r4, #12]
 800ffe4:	f043 0308 	orr.w	r3, r3, #8
 800ffe8:	81a3      	strh	r3, [r4, #12]
 800ffea:	6923      	ldr	r3, [r4, #16]
 800ffec:	b94b      	cbnz	r3, 8010002 <__swsetup_r+0x7a>
 800ffee:	89a3      	ldrh	r3, [r4, #12]
 800fff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fff8:	d003      	beq.n	8010002 <__swsetup_r+0x7a>
 800fffa:	4621      	mov	r1, r4
 800fffc:	4628      	mov	r0, r5
 800fffe:	f002 fe19 	bl	8012c34 <__smakebuf_r>
 8010002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010006:	f013 0201 	ands.w	r2, r3, #1
 801000a:	d00a      	beq.n	8010022 <__swsetup_r+0x9a>
 801000c:	2200      	movs	r2, #0
 801000e:	60a2      	str	r2, [r4, #8]
 8010010:	6962      	ldr	r2, [r4, #20]
 8010012:	4252      	negs	r2, r2
 8010014:	61a2      	str	r2, [r4, #24]
 8010016:	6922      	ldr	r2, [r4, #16]
 8010018:	b942      	cbnz	r2, 801002c <__swsetup_r+0xa4>
 801001a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801001e:	d1c5      	bne.n	800ffac <__swsetup_r+0x24>
 8010020:	bd38      	pop	{r3, r4, r5, pc}
 8010022:	0799      	lsls	r1, r3, #30
 8010024:	bf58      	it	pl
 8010026:	6962      	ldrpl	r2, [r4, #20]
 8010028:	60a2      	str	r2, [r4, #8]
 801002a:	e7f4      	b.n	8010016 <__swsetup_r+0x8e>
 801002c:	2000      	movs	r0, #0
 801002e:	e7f7      	b.n	8010020 <__swsetup_r+0x98>
 8010030:	24000198 	.word	0x24000198

08010034 <memset>:
 8010034:	4402      	add	r2, r0
 8010036:	4603      	mov	r3, r0
 8010038:	4293      	cmp	r3, r2
 801003a:	d100      	bne.n	801003e <memset+0xa>
 801003c:	4770      	bx	lr
 801003e:	f803 1b01 	strb.w	r1, [r3], #1
 8010042:	e7f9      	b.n	8010038 <memset+0x4>

08010044 <strncmp>:
 8010044:	b510      	push	{r4, lr}
 8010046:	b16a      	cbz	r2, 8010064 <strncmp+0x20>
 8010048:	3901      	subs	r1, #1
 801004a:	1884      	adds	r4, r0, r2
 801004c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010050:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010054:	429a      	cmp	r2, r3
 8010056:	d103      	bne.n	8010060 <strncmp+0x1c>
 8010058:	42a0      	cmp	r0, r4
 801005a:	d001      	beq.n	8010060 <strncmp+0x1c>
 801005c:	2a00      	cmp	r2, #0
 801005e:	d1f5      	bne.n	801004c <strncmp+0x8>
 8010060:	1ad0      	subs	r0, r2, r3
 8010062:	bd10      	pop	{r4, pc}
 8010064:	4610      	mov	r0, r2
 8010066:	e7fc      	b.n	8010062 <strncmp+0x1e>

08010068 <_localeconv_r>:
 8010068:	4800      	ldr	r0, [pc, #0]	@ (801006c <_localeconv_r+0x4>)
 801006a:	4770      	bx	lr
 801006c:	2400011c 	.word	0x2400011c

08010070 <_close_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4d06      	ldr	r5, [pc, #24]	@ (801008c <_close_r+0x1c>)
 8010074:	2300      	movs	r3, #0
 8010076:	4604      	mov	r4, r0
 8010078:	4608      	mov	r0, r1
 801007a:	602b      	str	r3, [r5, #0]
 801007c:	f7f2 fb06 	bl	800268c <_close>
 8010080:	1c43      	adds	r3, r0, #1
 8010082:	d102      	bne.n	801008a <_close_r+0x1a>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	b103      	cbz	r3, 801008a <_close_r+0x1a>
 8010088:	6023      	str	r3, [r4, #0]
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	24004f08 	.word	0x24004f08

08010090 <_lseek_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	4d07      	ldr	r5, [pc, #28]	@ (80100b0 <_lseek_r+0x20>)
 8010094:	4604      	mov	r4, r0
 8010096:	4608      	mov	r0, r1
 8010098:	4611      	mov	r1, r2
 801009a:	2200      	movs	r2, #0
 801009c:	602a      	str	r2, [r5, #0]
 801009e:	461a      	mov	r2, r3
 80100a0:	f7f2 fb1b 	bl	80026da <_lseek>
 80100a4:	1c43      	adds	r3, r0, #1
 80100a6:	d102      	bne.n	80100ae <_lseek_r+0x1e>
 80100a8:	682b      	ldr	r3, [r5, #0]
 80100aa:	b103      	cbz	r3, 80100ae <_lseek_r+0x1e>
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	bd38      	pop	{r3, r4, r5, pc}
 80100b0:	24004f08 	.word	0x24004f08

080100b4 <_read_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d07      	ldr	r5, [pc, #28]	@ (80100d4 <_read_r+0x20>)
 80100b8:	4604      	mov	r4, r0
 80100ba:	4608      	mov	r0, r1
 80100bc:	4611      	mov	r1, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	602a      	str	r2, [r5, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f7f2 faa9 	bl	800261a <_read>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_read_r+0x1e>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_read_r+0x1e>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	24004f08 	.word	0x24004f08

080100d8 <_sbrk_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d06      	ldr	r5, [pc, #24]	@ (80100f4 <_sbrk_r+0x1c>)
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	602b      	str	r3, [r5, #0]
 80100e4:	f7f2 fb06 	bl	80026f4 <_sbrk>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_sbrk_r+0x1a>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_sbrk_r+0x1a>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	24004f08 	.word	0x24004f08

080100f8 <_write_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d07      	ldr	r5, [pc, #28]	@ (8010118 <_write_r+0x20>)
 80100fc:	4604      	mov	r4, r0
 80100fe:	4608      	mov	r0, r1
 8010100:	4611      	mov	r1, r2
 8010102:	2200      	movs	r2, #0
 8010104:	602a      	str	r2, [r5, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	f7f2 faa4 	bl	8002654 <_write>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_write_r+0x1e>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	b103      	cbz	r3, 8010116 <_write_r+0x1e>
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	24004f08 	.word	0x24004f08

0801011c <__errno>:
 801011c:	4b01      	ldr	r3, [pc, #4]	@ (8010124 <__errno+0x8>)
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop
 8010124:	24000198 	.word	0x24000198

08010128 <__libc_init_array>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	4d0d      	ldr	r5, [pc, #52]	@ (8010160 <__libc_init_array+0x38>)
 801012c:	4c0d      	ldr	r4, [pc, #52]	@ (8010164 <__libc_init_array+0x3c>)
 801012e:	1b64      	subs	r4, r4, r5
 8010130:	10a4      	asrs	r4, r4, #2
 8010132:	2600      	movs	r6, #0
 8010134:	42a6      	cmp	r6, r4
 8010136:	d109      	bne.n	801014c <__libc_init_array+0x24>
 8010138:	4d0b      	ldr	r5, [pc, #44]	@ (8010168 <__libc_init_array+0x40>)
 801013a:	4c0c      	ldr	r4, [pc, #48]	@ (801016c <__libc_init_array+0x44>)
 801013c:	f002 ff66 	bl	801300c <_init>
 8010140:	1b64      	subs	r4, r4, r5
 8010142:	10a4      	asrs	r4, r4, #2
 8010144:	2600      	movs	r6, #0
 8010146:	42a6      	cmp	r6, r4
 8010148:	d105      	bne.n	8010156 <__libc_init_array+0x2e>
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010150:	4798      	blx	r3
 8010152:	3601      	adds	r6, #1
 8010154:	e7ee      	b.n	8010134 <__libc_init_array+0xc>
 8010156:	f855 3b04 	ldr.w	r3, [r5], #4
 801015a:	4798      	blx	r3
 801015c:	3601      	adds	r6, #1
 801015e:	e7f2      	b.n	8010146 <__libc_init_array+0x1e>
 8010160:	08013668 	.word	0x08013668
 8010164:	08013668 	.word	0x08013668
 8010168:	08013668 	.word	0x08013668
 801016c:	0801366c 	.word	0x0801366c

08010170 <__retarget_lock_init_recursive>:
 8010170:	4770      	bx	lr

08010172 <__retarget_lock_acquire_recursive>:
 8010172:	4770      	bx	lr

08010174 <__retarget_lock_release_recursive>:
 8010174:	4770      	bx	lr

08010176 <memcpy>:
 8010176:	440a      	add	r2, r1
 8010178:	4291      	cmp	r1, r2
 801017a:	f100 33ff 	add.w	r3, r0, #4294967295
 801017e:	d100      	bne.n	8010182 <memcpy+0xc>
 8010180:	4770      	bx	lr
 8010182:	b510      	push	{r4, lr}
 8010184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010188:	f803 4f01 	strb.w	r4, [r3, #1]!
 801018c:	4291      	cmp	r1, r2
 801018e:	d1f9      	bne.n	8010184 <memcpy+0xe>
 8010190:	bd10      	pop	{r4, pc}
 8010192:	0000      	movs	r0, r0
 8010194:	0000      	movs	r0, r0
	...

08010198 <nan>:
 8010198:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80101a0 <nan+0x8>
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	00000000 	.word	0x00000000
 80101a4:	7ff80000 	.word	0x7ff80000

080101a8 <nanf>:
 80101a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80101b0 <nanf+0x8>
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	7fc00000 	.word	0x7fc00000

080101b4 <quorem>:
 80101b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b8:	6903      	ldr	r3, [r0, #16]
 80101ba:	690c      	ldr	r4, [r1, #16]
 80101bc:	42a3      	cmp	r3, r4
 80101be:	4607      	mov	r7, r0
 80101c0:	db7e      	blt.n	80102c0 <quorem+0x10c>
 80101c2:	3c01      	subs	r4, #1
 80101c4:	f101 0814 	add.w	r8, r1, #20
 80101c8:	00a3      	lsls	r3, r4, #2
 80101ca:	f100 0514 	add.w	r5, r0, #20
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101d4:	9301      	str	r3, [sp, #4]
 80101d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101de:	3301      	adds	r3, #1
 80101e0:	429a      	cmp	r2, r3
 80101e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80101e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80101ea:	d32e      	bcc.n	801024a <quorem+0x96>
 80101ec:	f04f 0a00 	mov.w	sl, #0
 80101f0:	46c4      	mov	ip, r8
 80101f2:	46ae      	mov	lr, r5
 80101f4:	46d3      	mov	fp, sl
 80101f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80101fa:	b298      	uxth	r0, r3
 80101fc:	fb06 a000 	mla	r0, r6, r0, sl
 8010200:	0c02      	lsrs	r2, r0, #16
 8010202:	0c1b      	lsrs	r3, r3, #16
 8010204:	fb06 2303 	mla	r3, r6, r3, r2
 8010208:	f8de 2000 	ldr.w	r2, [lr]
 801020c:	b280      	uxth	r0, r0
 801020e:	b292      	uxth	r2, r2
 8010210:	1a12      	subs	r2, r2, r0
 8010212:	445a      	add	r2, fp
 8010214:	f8de 0000 	ldr.w	r0, [lr]
 8010218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801021c:	b29b      	uxth	r3, r3
 801021e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010222:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010226:	b292      	uxth	r2, r2
 8010228:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801022c:	45e1      	cmp	r9, ip
 801022e:	f84e 2b04 	str.w	r2, [lr], #4
 8010232:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010236:	d2de      	bcs.n	80101f6 <quorem+0x42>
 8010238:	9b00      	ldr	r3, [sp, #0]
 801023a:	58eb      	ldr	r3, [r5, r3]
 801023c:	b92b      	cbnz	r3, 801024a <quorem+0x96>
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	3b04      	subs	r3, #4
 8010242:	429d      	cmp	r5, r3
 8010244:	461a      	mov	r2, r3
 8010246:	d32f      	bcc.n	80102a8 <quorem+0xf4>
 8010248:	613c      	str	r4, [r7, #16]
 801024a:	4638      	mov	r0, r7
 801024c:	f001 fbec 	bl	8011a28 <__mcmp>
 8010250:	2800      	cmp	r0, #0
 8010252:	db25      	blt.n	80102a0 <quorem+0xec>
 8010254:	4629      	mov	r1, r5
 8010256:	2000      	movs	r0, #0
 8010258:	f858 2b04 	ldr.w	r2, [r8], #4
 801025c:	f8d1 c000 	ldr.w	ip, [r1]
 8010260:	fa1f fe82 	uxth.w	lr, r2
 8010264:	fa1f f38c 	uxth.w	r3, ip
 8010268:	eba3 030e 	sub.w	r3, r3, lr
 801026c:	4403      	add	r3, r0
 801026e:	0c12      	lsrs	r2, r2, #16
 8010270:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010274:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010278:	b29b      	uxth	r3, r3
 801027a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801027e:	45c1      	cmp	r9, r8
 8010280:	f841 3b04 	str.w	r3, [r1], #4
 8010284:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010288:	d2e6      	bcs.n	8010258 <quorem+0xa4>
 801028a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801028e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010292:	b922      	cbnz	r2, 801029e <quorem+0xea>
 8010294:	3b04      	subs	r3, #4
 8010296:	429d      	cmp	r5, r3
 8010298:	461a      	mov	r2, r3
 801029a:	d30b      	bcc.n	80102b4 <quorem+0x100>
 801029c:	613c      	str	r4, [r7, #16]
 801029e:	3601      	adds	r6, #1
 80102a0:	4630      	mov	r0, r6
 80102a2:	b003      	add	sp, #12
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	3b04      	subs	r3, #4
 80102ac:	2a00      	cmp	r2, #0
 80102ae:	d1cb      	bne.n	8010248 <quorem+0x94>
 80102b0:	3c01      	subs	r4, #1
 80102b2:	e7c6      	b.n	8010242 <quorem+0x8e>
 80102b4:	6812      	ldr	r2, [r2, #0]
 80102b6:	3b04      	subs	r3, #4
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	d1ef      	bne.n	801029c <quorem+0xe8>
 80102bc:	3c01      	subs	r4, #1
 80102be:	e7ea      	b.n	8010296 <quorem+0xe2>
 80102c0:	2000      	movs	r0, #0
 80102c2:	e7ee      	b.n	80102a2 <quorem+0xee>
 80102c4:	0000      	movs	r0, r0
	...

080102c8 <_dtoa_r>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ed2d 8b02 	vpush	{d8}
 80102d0:	69c7      	ldr	r7, [r0, #28]
 80102d2:	b091      	sub	sp, #68	@ 0x44
 80102d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102d8:	ec55 4b10 	vmov	r4, r5, d0
 80102dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80102de:	9107      	str	r1, [sp, #28]
 80102e0:	4681      	mov	r9, r0
 80102e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80102e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80102e6:	b97f      	cbnz	r7, 8010308 <_dtoa_r+0x40>
 80102e8:	2010      	movs	r0, #16
 80102ea:	f7fd ff5d 	bl	800e1a8 <malloc>
 80102ee:	4602      	mov	r2, r0
 80102f0:	f8c9 001c 	str.w	r0, [r9, #28]
 80102f4:	b920      	cbnz	r0, 8010300 <_dtoa_r+0x38>
 80102f6:	4ba0      	ldr	r3, [pc, #640]	@ (8010578 <_dtoa_r+0x2b0>)
 80102f8:	21ef      	movs	r1, #239	@ 0xef
 80102fa:	48a0      	ldr	r0, [pc, #640]	@ (801057c <_dtoa_r+0x2b4>)
 80102fc:	f002 fd86 	bl	8012e0c <__assert_func>
 8010300:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010304:	6007      	str	r7, [r0, #0]
 8010306:	60c7      	str	r7, [r0, #12]
 8010308:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801030c:	6819      	ldr	r1, [r3, #0]
 801030e:	b159      	cbz	r1, 8010328 <_dtoa_r+0x60>
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	604a      	str	r2, [r1, #4]
 8010314:	2301      	movs	r3, #1
 8010316:	4093      	lsls	r3, r2
 8010318:	608b      	str	r3, [r1, #8]
 801031a:	4648      	mov	r0, r9
 801031c:	f001 f908 	bl	8011530 <_Bfree>
 8010320:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]
 8010328:	1e2b      	subs	r3, r5, #0
 801032a:	bfbb      	ittet	lt
 801032c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010330:	9303      	strlt	r3, [sp, #12]
 8010332:	2300      	movge	r3, #0
 8010334:	2201      	movlt	r2, #1
 8010336:	bfac      	ite	ge
 8010338:	6033      	strge	r3, [r6, #0]
 801033a:	6032      	strlt	r2, [r6, #0]
 801033c:	4b90      	ldr	r3, [pc, #576]	@ (8010580 <_dtoa_r+0x2b8>)
 801033e:	9e03      	ldr	r6, [sp, #12]
 8010340:	43b3      	bics	r3, r6
 8010342:	d110      	bne.n	8010366 <_dtoa_r+0x9e>
 8010344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010346:	f242 730f 	movw	r3, #9999	@ 0x270f
 801034a:	6013      	str	r3, [r2, #0]
 801034c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010350:	4323      	orrs	r3, r4
 8010352:	f000 84e6 	beq.w	8010d22 <_dtoa_r+0xa5a>
 8010356:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010358:	4f8a      	ldr	r7, [pc, #552]	@ (8010584 <_dtoa_r+0x2bc>)
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 84e8 	beq.w	8010d30 <_dtoa_r+0xa68>
 8010360:	1cfb      	adds	r3, r7, #3
 8010362:	f000 bce3 	b.w	8010d2c <_dtoa_r+0xa64>
 8010366:	ed9d 8b02 	vldr	d8, [sp, #8]
 801036a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010372:	d10a      	bne.n	801038a <_dtoa_r+0xc2>
 8010374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010376:	2301      	movs	r3, #1
 8010378:	6013      	str	r3, [r2, #0]
 801037a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801037c:	b113      	cbz	r3, 8010384 <_dtoa_r+0xbc>
 801037e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010380:	4b81      	ldr	r3, [pc, #516]	@ (8010588 <_dtoa_r+0x2c0>)
 8010382:	6013      	str	r3, [r2, #0]
 8010384:	4f81      	ldr	r7, [pc, #516]	@ (801058c <_dtoa_r+0x2c4>)
 8010386:	f000 bcd3 	b.w	8010d30 <_dtoa_r+0xa68>
 801038a:	aa0e      	add	r2, sp, #56	@ 0x38
 801038c:	a90f      	add	r1, sp, #60	@ 0x3c
 801038e:	4648      	mov	r0, r9
 8010390:	eeb0 0b48 	vmov.f64	d0, d8
 8010394:	f001 fc68 	bl	8011c68 <__d2b>
 8010398:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801039c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801039e:	9001      	str	r0, [sp, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d045      	beq.n	8010430 <_dtoa_r+0x168>
 80103a4:	eeb0 7b48 	vmov.f64	d7, d8
 80103a8:	ee18 1a90 	vmov	r1, s17
 80103ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80103b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80103b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80103b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80103bc:	2500      	movs	r5, #0
 80103be:	ee07 1a90 	vmov	s15, r1
 80103c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80103c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010560 <_dtoa_r+0x298>
 80103ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010568 <_dtoa_r+0x2a0>
 80103d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80103d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010570 <_dtoa_r+0x2a8>
 80103da:	ee07 3a90 	vmov	s15, r3
 80103de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80103e2:	eeb0 7b46 	vmov.f64	d7, d6
 80103e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80103ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80103ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	ee16 8a90 	vmov	r8, s13
 80103fa:	d508      	bpl.n	801040e <_dtoa_r+0x146>
 80103fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010400:	eeb4 6b47 	vcmp.f64	d6, d7
 8010404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010408:	bf18      	it	ne
 801040a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801040e:	f1b8 0f16 	cmp.w	r8, #22
 8010412:	d82b      	bhi.n	801046c <_dtoa_r+0x1a4>
 8010414:	495e      	ldr	r1, [pc, #376]	@ (8010590 <_dtoa_r+0x2c8>)
 8010416:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801041a:	ed91 7b00 	vldr	d7, [r1]
 801041e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010426:	d501      	bpl.n	801042c <_dtoa_r+0x164>
 8010428:	f108 38ff 	add.w	r8, r8, #4294967295
 801042c:	2100      	movs	r1, #0
 801042e:	e01e      	b.n	801046e <_dtoa_r+0x1a6>
 8010430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010432:	4413      	add	r3, r2
 8010434:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010438:	2920      	cmp	r1, #32
 801043a:	bfc1      	itttt	gt
 801043c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010440:	408e      	lslgt	r6, r1
 8010442:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010446:	fa24 f101 	lsrgt.w	r1, r4, r1
 801044a:	bfd6      	itet	le
 801044c:	f1c1 0120 	rsble	r1, r1, #32
 8010450:	4331      	orrgt	r1, r6
 8010452:	fa04 f101 	lslle.w	r1, r4, r1
 8010456:	ee07 1a90 	vmov	s15, r1
 801045a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801045e:	3b01      	subs	r3, #1
 8010460:	ee17 1a90 	vmov	r1, s15
 8010464:	2501      	movs	r5, #1
 8010466:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801046a:	e7a8      	b.n	80103be <_dtoa_r+0xf6>
 801046c:	2101      	movs	r1, #1
 801046e:	1ad2      	subs	r2, r2, r3
 8010470:	1e53      	subs	r3, r2, #1
 8010472:	9306      	str	r3, [sp, #24]
 8010474:	bf45      	ittet	mi
 8010476:	f1c2 0301 	rsbmi	r3, r2, #1
 801047a:	9304      	strmi	r3, [sp, #16]
 801047c:	2300      	movpl	r3, #0
 801047e:	2300      	movmi	r3, #0
 8010480:	bf4c      	ite	mi
 8010482:	9306      	strmi	r3, [sp, #24]
 8010484:	9304      	strpl	r3, [sp, #16]
 8010486:	f1b8 0f00 	cmp.w	r8, #0
 801048a:	910c      	str	r1, [sp, #48]	@ 0x30
 801048c:	db18      	blt.n	80104c0 <_dtoa_r+0x1f8>
 801048e:	9b06      	ldr	r3, [sp, #24]
 8010490:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010494:	4443      	add	r3, r8
 8010496:	9306      	str	r3, [sp, #24]
 8010498:	2300      	movs	r3, #0
 801049a:	9a07      	ldr	r2, [sp, #28]
 801049c:	2a09      	cmp	r2, #9
 801049e:	d845      	bhi.n	801052c <_dtoa_r+0x264>
 80104a0:	2a05      	cmp	r2, #5
 80104a2:	bfc4      	itt	gt
 80104a4:	3a04      	subgt	r2, #4
 80104a6:	9207      	strgt	r2, [sp, #28]
 80104a8:	9a07      	ldr	r2, [sp, #28]
 80104aa:	f1a2 0202 	sub.w	r2, r2, #2
 80104ae:	bfcc      	ite	gt
 80104b0:	2400      	movgt	r4, #0
 80104b2:	2401      	movle	r4, #1
 80104b4:	2a03      	cmp	r2, #3
 80104b6:	d844      	bhi.n	8010542 <_dtoa_r+0x27a>
 80104b8:	e8df f002 	tbb	[pc, r2]
 80104bc:	0b173634 	.word	0x0b173634
 80104c0:	9b04      	ldr	r3, [sp, #16]
 80104c2:	2200      	movs	r2, #0
 80104c4:	eba3 0308 	sub.w	r3, r3, r8
 80104c8:	9304      	str	r3, [sp, #16]
 80104ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80104cc:	f1c8 0300 	rsb	r3, r8, #0
 80104d0:	e7e3      	b.n	801049a <_dtoa_r+0x1d2>
 80104d2:	2201      	movs	r2, #1
 80104d4:	9208      	str	r2, [sp, #32]
 80104d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104d8:	eb08 0b02 	add.w	fp, r8, r2
 80104dc:	f10b 0a01 	add.w	sl, fp, #1
 80104e0:	4652      	mov	r2, sl
 80104e2:	2a01      	cmp	r2, #1
 80104e4:	bfb8      	it	lt
 80104e6:	2201      	movlt	r2, #1
 80104e8:	e006      	b.n	80104f8 <_dtoa_r+0x230>
 80104ea:	2201      	movs	r2, #1
 80104ec:	9208      	str	r2, [sp, #32]
 80104ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104f0:	2a00      	cmp	r2, #0
 80104f2:	dd29      	ble.n	8010548 <_dtoa_r+0x280>
 80104f4:	4693      	mov	fp, r2
 80104f6:	4692      	mov	sl, r2
 80104f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80104fc:	2100      	movs	r1, #0
 80104fe:	2004      	movs	r0, #4
 8010500:	f100 0614 	add.w	r6, r0, #20
 8010504:	4296      	cmp	r6, r2
 8010506:	d926      	bls.n	8010556 <_dtoa_r+0x28e>
 8010508:	6079      	str	r1, [r7, #4]
 801050a:	4648      	mov	r0, r9
 801050c:	9305      	str	r3, [sp, #20]
 801050e:	f000 ffcf 	bl	80114b0 <_Balloc>
 8010512:	9b05      	ldr	r3, [sp, #20]
 8010514:	4607      	mov	r7, r0
 8010516:	2800      	cmp	r0, #0
 8010518:	d13e      	bne.n	8010598 <_dtoa_r+0x2d0>
 801051a:	4b1e      	ldr	r3, [pc, #120]	@ (8010594 <_dtoa_r+0x2cc>)
 801051c:	4602      	mov	r2, r0
 801051e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010522:	e6ea      	b.n	80102fa <_dtoa_r+0x32>
 8010524:	2200      	movs	r2, #0
 8010526:	e7e1      	b.n	80104ec <_dtoa_r+0x224>
 8010528:	2200      	movs	r2, #0
 801052a:	e7d3      	b.n	80104d4 <_dtoa_r+0x20c>
 801052c:	2401      	movs	r4, #1
 801052e:	2200      	movs	r2, #0
 8010530:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010534:	f04f 3bff 	mov.w	fp, #4294967295
 8010538:	2100      	movs	r1, #0
 801053a:	46da      	mov	sl, fp
 801053c:	2212      	movs	r2, #18
 801053e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010540:	e7da      	b.n	80104f8 <_dtoa_r+0x230>
 8010542:	2201      	movs	r2, #1
 8010544:	9208      	str	r2, [sp, #32]
 8010546:	e7f5      	b.n	8010534 <_dtoa_r+0x26c>
 8010548:	f04f 0b01 	mov.w	fp, #1
 801054c:	46da      	mov	sl, fp
 801054e:	465a      	mov	r2, fp
 8010550:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010554:	e7d0      	b.n	80104f8 <_dtoa_r+0x230>
 8010556:	3101      	adds	r1, #1
 8010558:	0040      	lsls	r0, r0, #1
 801055a:	e7d1      	b.n	8010500 <_dtoa_r+0x238>
 801055c:	f3af 8000 	nop.w
 8010560:	636f4361 	.word	0x636f4361
 8010564:	3fd287a7 	.word	0x3fd287a7
 8010568:	8b60c8b3 	.word	0x8b60c8b3
 801056c:	3fc68a28 	.word	0x3fc68a28
 8010570:	509f79fb 	.word	0x509f79fb
 8010574:	3fd34413 	.word	0x3fd34413
 8010578:	0801326e 	.word	0x0801326e
 801057c:	08013285 	.word	0x08013285
 8010580:	7ff00000 	.word	0x7ff00000
 8010584:	0801326a 	.word	0x0801326a
 8010588:	080133cf 	.word	0x080133cf
 801058c:	080133ce 	.word	0x080133ce
 8010590:	08013598 	.word	0x08013598
 8010594:	080132dd 	.word	0x080132dd
 8010598:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801059c:	f1ba 0f0e 	cmp.w	sl, #14
 80105a0:	6010      	str	r0, [r2, #0]
 80105a2:	d86e      	bhi.n	8010682 <_dtoa_r+0x3ba>
 80105a4:	2c00      	cmp	r4, #0
 80105a6:	d06c      	beq.n	8010682 <_dtoa_r+0x3ba>
 80105a8:	f1b8 0f00 	cmp.w	r8, #0
 80105ac:	f340 80b4 	ble.w	8010718 <_dtoa_r+0x450>
 80105b0:	4ac8      	ldr	r2, [pc, #800]	@ (80108d4 <_dtoa_r+0x60c>)
 80105b2:	f008 010f 	and.w	r1, r8, #15
 80105b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80105ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80105be:	ed92 7b00 	vldr	d7, [r2]
 80105c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80105c6:	f000 809b 	beq.w	8010700 <_dtoa_r+0x438>
 80105ca:	4ac3      	ldr	r2, [pc, #780]	@ (80108d8 <_dtoa_r+0x610>)
 80105cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80105d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80105d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80105d8:	f001 010f 	and.w	r1, r1, #15
 80105dc:	2203      	movs	r2, #3
 80105de:	48be      	ldr	r0, [pc, #760]	@ (80108d8 <_dtoa_r+0x610>)
 80105e0:	2900      	cmp	r1, #0
 80105e2:	f040 808f 	bne.w	8010704 <_dtoa_r+0x43c>
 80105e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80105ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80105ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80105f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105f8:	2900      	cmp	r1, #0
 80105fa:	f000 80b3 	beq.w	8010764 <_dtoa_r+0x49c>
 80105fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010602:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060a:	f140 80ab 	bpl.w	8010764 <_dtoa_r+0x49c>
 801060e:	f1ba 0f00 	cmp.w	sl, #0
 8010612:	f000 80a7 	beq.w	8010764 <_dtoa_r+0x49c>
 8010616:	f1bb 0f00 	cmp.w	fp, #0
 801061a:	dd30      	ble.n	801067e <_dtoa_r+0x3b6>
 801061c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010620:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010624:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010628:	f108 31ff 	add.w	r1, r8, #4294967295
 801062c:	9105      	str	r1, [sp, #20]
 801062e:	3201      	adds	r2, #1
 8010630:	465c      	mov	r4, fp
 8010632:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010636:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801063a:	ee07 2a90 	vmov	s15, r2
 801063e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010642:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010646:	ee15 2a90 	vmov	r2, s11
 801064a:	ec51 0b15 	vmov	r0, r1, d5
 801064e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010652:	2c00      	cmp	r4, #0
 8010654:	f040 808a 	bne.w	801076c <_dtoa_r+0x4a4>
 8010658:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801065c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010660:	ec41 0b17 	vmov	d7, r0, r1
 8010664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066c:	f300 826a 	bgt.w	8010b44 <_dtoa_r+0x87c>
 8010670:	eeb1 7b47 	vneg.f64	d7, d7
 8010674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801067c:	d423      	bmi.n	80106c6 <_dtoa_r+0x3fe>
 801067e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010682:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010684:	2a00      	cmp	r2, #0
 8010686:	f2c0 8129 	blt.w	80108dc <_dtoa_r+0x614>
 801068a:	f1b8 0f0e 	cmp.w	r8, #14
 801068e:	f300 8125 	bgt.w	80108dc <_dtoa_r+0x614>
 8010692:	4b90      	ldr	r3, [pc, #576]	@ (80108d4 <_dtoa_r+0x60c>)
 8010694:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010698:	ed93 6b00 	vldr	d6, [r3]
 801069c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f280 80c8 	bge.w	8010834 <_dtoa_r+0x56c>
 80106a4:	f1ba 0f00 	cmp.w	sl, #0
 80106a8:	f300 80c4 	bgt.w	8010834 <_dtoa_r+0x56c>
 80106ac:	d10b      	bne.n	80106c6 <_dtoa_r+0x3fe>
 80106ae:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80106b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80106b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80106be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c2:	f2c0 823c 	blt.w	8010b3e <_dtoa_r+0x876>
 80106c6:	2400      	movs	r4, #0
 80106c8:	4625      	mov	r5, r4
 80106ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106cc:	43db      	mvns	r3, r3
 80106ce:	9305      	str	r3, [sp, #20]
 80106d0:	463e      	mov	r6, r7
 80106d2:	f04f 0800 	mov.w	r8, #0
 80106d6:	4621      	mov	r1, r4
 80106d8:	4648      	mov	r0, r9
 80106da:	f000 ff29 	bl	8011530 <_Bfree>
 80106de:	2d00      	cmp	r5, #0
 80106e0:	f000 80a2 	beq.w	8010828 <_dtoa_r+0x560>
 80106e4:	f1b8 0f00 	cmp.w	r8, #0
 80106e8:	d005      	beq.n	80106f6 <_dtoa_r+0x42e>
 80106ea:	45a8      	cmp	r8, r5
 80106ec:	d003      	beq.n	80106f6 <_dtoa_r+0x42e>
 80106ee:	4641      	mov	r1, r8
 80106f0:	4648      	mov	r0, r9
 80106f2:	f000 ff1d 	bl	8011530 <_Bfree>
 80106f6:	4629      	mov	r1, r5
 80106f8:	4648      	mov	r0, r9
 80106fa:	f000 ff19 	bl	8011530 <_Bfree>
 80106fe:	e093      	b.n	8010828 <_dtoa_r+0x560>
 8010700:	2202      	movs	r2, #2
 8010702:	e76c      	b.n	80105de <_dtoa_r+0x316>
 8010704:	07cc      	lsls	r4, r1, #31
 8010706:	d504      	bpl.n	8010712 <_dtoa_r+0x44a>
 8010708:	ed90 6b00 	vldr	d6, [r0]
 801070c:	3201      	adds	r2, #1
 801070e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010712:	1049      	asrs	r1, r1, #1
 8010714:	3008      	adds	r0, #8
 8010716:	e763      	b.n	80105e0 <_dtoa_r+0x318>
 8010718:	d022      	beq.n	8010760 <_dtoa_r+0x498>
 801071a:	f1c8 0100 	rsb	r1, r8, #0
 801071e:	4a6d      	ldr	r2, [pc, #436]	@ (80108d4 <_dtoa_r+0x60c>)
 8010720:	f001 000f 	and.w	r0, r1, #15
 8010724:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010728:	ed92 7b00 	vldr	d7, [r2]
 801072c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010734:	4868      	ldr	r0, [pc, #416]	@ (80108d8 <_dtoa_r+0x610>)
 8010736:	1109      	asrs	r1, r1, #4
 8010738:	2400      	movs	r4, #0
 801073a:	2202      	movs	r2, #2
 801073c:	b929      	cbnz	r1, 801074a <_dtoa_r+0x482>
 801073e:	2c00      	cmp	r4, #0
 8010740:	f43f af57 	beq.w	80105f2 <_dtoa_r+0x32a>
 8010744:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010748:	e753      	b.n	80105f2 <_dtoa_r+0x32a>
 801074a:	07ce      	lsls	r6, r1, #31
 801074c:	d505      	bpl.n	801075a <_dtoa_r+0x492>
 801074e:	ed90 6b00 	vldr	d6, [r0]
 8010752:	3201      	adds	r2, #1
 8010754:	2401      	movs	r4, #1
 8010756:	ee27 7b06 	vmul.f64	d7, d7, d6
 801075a:	1049      	asrs	r1, r1, #1
 801075c:	3008      	adds	r0, #8
 801075e:	e7ed      	b.n	801073c <_dtoa_r+0x474>
 8010760:	2202      	movs	r2, #2
 8010762:	e746      	b.n	80105f2 <_dtoa_r+0x32a>
 8010764:	f8cd 8014 	str.w	r8, [sp, #20]
 8010768:	4654      	mov	r4, sl
 801076a:	e762      	b.n	8010632 <_dtoa_r+0x36a>
 801076c:	4a59      	ldr	r2, [pc, #356]	@ (80108d4 <_dtoa_r+0x60c>)
 801076e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010772:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010776:	9a08      	ldr	r2, [sp, #32]
 8010778:	ec41 0b17 	vmov	d7, r0, r1
 801077c:	443c      	add	r4, r7
 801077e:	b34a      	cbz	r2, 80107d4 <_dtoa_r+0x50c>
 8010780:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010784:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010788:	463e      	mov	r6, r7
 801078a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801078e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010792:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010796:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801079a:	ee14 2a90 	vmov	r2, s9
 801079e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80107a2:	3230      	adds	r2, #48	@ 0x30
 80107a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80107ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b0:	f806 2b01 	strb.w	r2, [r6], #1
 80107b4:	d438      	bmi.n	8010828 <_dtoa_r+0x560>
 80107b6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80107ba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80107be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c2:	d46e      	bmi.n	80108a2 <_dtoa_r+0x5da>
 80107c4:	42a6      	cmp	r6, r4
 80107c6:	f43f af5a 	beq.w	801067e <_dtoa_r+0x3b6>
 80107ca:	ee27 7b03 	vmul.f64	d7, d7, d3
 80107ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 80107d2:	e7e0      	b.n	8010796 <_dtoa_r+0x4ce>
 80107d4:	4621      	mov	r1, r4
 80107d6:	463e      	mov	r6, r7
 80107d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80107dc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80107e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80107e4:	ee14 2a90 	vmov	r2, s9
 80107e8:	3230      	adds	r2, #48	@ 0x30
 80107ea:	f806 2b01 	strb.w	r2, [r6], #1
 80107ee:	42a6      	cmp	r6, r4
 80107f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80107f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107f8:	d119      	bne.n	801082e <_dtoa_r+0x566>
 80107fa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80107fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010802:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080a:	dc4a      	bgt.n	80108a2 <_dtoa_r+0x5da>
 801080c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010810:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010818:	f57f af31 	bpl.w	801067e <_dtoa_r+0x3b6>
 801081c:	460e      	mov	r6, r1
 801081e:	3901      	subs	r1, #1
 8010820:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010824:	2b30      	cmp	r3, #48	@ 0x30
 8010826:	d0f9      	beq.n	801081c <_dtoa_r+0x554>
 8010828:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801082c:	e027      	b.n	801087e <_dtoa_r+0x5b6>
 801082e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010832:	e7d5      	b.n	80107e0 <_dtoa_r+0x518>
 8010834:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010838:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801083c:	463e      	mov	r6, r7
 801083e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010842:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010846:	ee15 3a10 	vmov	r3, s10
 801084a:	3330      	adds	r3, #48	@ 0x30
 801084c:	f806 3b01 	strb.w	r3, [r6], #1
 8010850:	1bf3      	subs	r3, r6, r7
 8010852:	459a      	cmp	sl, r3
 8010854:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010858:	eea3 7b46 	vfms.f64	d7, d3, d6
 801085c:	d132      	bne.n	80108c4 <_dtoa_r+0x5fc>
 801085e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010862:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086a:	dc18      	bgt.n	801089e <_dtoa_r+0x5d6>
 801086c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010874:	d103      	bne.n	801087e <_dtoa_r+0x5b6>
 8010876:	ee15 3a10 	vmov	r3, s10
 801087a:	07db      	lsls	r3, r3, #31
 801087c:	d40f      	bmi.n	801089e <_dtoa_r+0x5d6>
 801087e:	9901      	ldr	r1, [sp, #4]
 8010880:	4648      	mov	r0, r9
 8010882:	f000 fe55 	bl	8011530 <_Bfree>
 8010886:	2300      	movs	r3, #0
 8010888:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801088a:	7033      	strb	r3, [r6, #0]
 801088c:	f108 0301 	add.w	r3, r8, #1
 8010890:	6013      	str	r3, [r2, #0]
 8010892:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010894:	2b00      	cmp	r3, #0
 8010896:	f000 824b 	beq.w	8010d30 <_dtoa_r+0xa68>
 801089a:	601e      	str	r6, [r3, #0]
 801089c:	e248      	b.n	8010d30 <_dtoa_r+0xa68>
 801089e:	f8cd 8014 	str.w	r8, [sp, #20]
 80108a2:	4633      	mov	r3, r6
 80108a4:	461e      	mov	r6, r3
 80108a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108aa:	2a39      	cmp	r2, #57	@ 0x39
 80108ac:	d106      	bne.n	80108bc <_dtoa_r+0x5f4>
 80108ae:	429f      	cmp	r7, r3
 80108b0:	d1f8      	bne.n	80108a4 <_dtoa_r+0x5dc>
 80108b2:	9a05      	ldr	r2, [sp, #20]
 80108b4:	3201      	adds	r2, #1
 80108b6:	9205      	str	r2, [sp, #20]
 80108b8:	2230      	movs	r2, #48	@ 0x30
 80108ba:	703a      	strb	r2, [r7, #0]
 80108bc:	781a      	ldrb	r2, [r3, #0]
 80108be:	3201      	adds	r2, #1
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	e7b1      	b.n	8010828 <_dtoa_r+0x560>
 80108c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d0:	d1b5      	bne.n	801083e <_dtoa_r+0x576>
 80108d2:	e7d4      	b.n	801087e <_dtoa_r+0x5b6>
 80108d4:	08013598 	.word	0x08013598
 80108d8:	08013570 	.word	0x08013570
 80108dc:	9908      	ldr	r1, [sp, #32]
 80108de:	2900      	cmp	r1, #0
 80108e0:	f000 80e9 	beq.w	8010ab6 <_dtoa_r+0x7ee>
 80108e4:	9907      	ldr	r1, [sp, #28]
 80108e6:	2901      	cmp	r1, #1
 80108e8:	f300 80cb 	bgt.w	8010a82 <_dtoa_r+0x7ba>
 80108ec:	2d00      	cmp	r5, #0
 80108ee:	f000 80c4 	beq.w	8010a7a <_dtoa_r+0x7b2>
 80108f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80108f6:	9e04      	ldr	r6, [sp, #16]
 80108f8:	461c      	mov	r4, r3
 80108fa:	9305      	str	r3, [sp, #20]
 80108fc:	9b04      	ldr	r3, [sp, #16]
 80108fe:	4413      	add	r3, r2
 8010900:	9304      	str	r3, [sp, #16]
 8010902:	9b06      	ldr	r3, [sp, #24]
 8010904:	2101      	movs	r1, #1
 8010906:	4413      	add	r3, r2
 8010908:	4648      	mov	r0, r9
 801090a:	9306      	str	r3, [sp, #24]
 801090c:	f000 ff0e 	bl	801172c <__i2b>
 8010910:	9b05      	ldr	r3, [sp, #20]
 8010912:	4605      	mov	r5, r0
 8010914:	b166      	cbz	r6, 8010930 <_dtoa_r+0x668>
 8010916:	9a06      	ldr	r2, [sp, #24]
 8010918:	2a00      	cmp	r2, #0
 801091a:	dd09      	ble.n	8010930 <_dtoa_r+0x668>
 801091c:	42b2      	cmp	r2, r6
 801091e:	9904      	ldr	r1, [sp, #16]
 8010920:	bfa8      	it	ge
 8010922:	4632      	movge	r2, r6
 8010924:	1a89      	subs	r1, r1, r2
 8010926:	9104      	str	r1, [sp, #16]
 8010928:	9906      	ldr	r1, [sp, #24]
 801092a:	1ab6      	subs	r6, r6, r2
 801092c:	1a8a      	subs	r2, r1, r2
 801092e:	9206      	str	r2, [sp, #24]
 8010930:	b30b      	cbz	r3, 8010976 <_dtoa_r+0x6ae>
 8010932:	9a08      	ldr	r2, [sp, #32]
 8010934:	2a00      	cmp	r2, #0
 8010936:	f000 80c5 	beq.w	8010ac4 <_dtoa_r+0x7fc>
 801093a:	2c00      	cmp	r4, #0
 801093c:	f000 80bf 	beq.w	8010abe <_dtoa_r+0x7f6>
 8010940:	4629      	mov	r1, r5
 8010942:	4622      	mov	r2, r4
 8010944:	4648      	mov	r0, r9
 8010946:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010948:	f000 ffa8 	bl	801189c <__pow5mult>
 801094c:	9a01      	ldr	r2, [sp, #4]
 801094e:	4601      	mov	r1, r0
 8010950:	4605      	mov	r5, r0
 8010952:	4648      	mov	r0, r9
 8010954:	f000 ff00 	bl	8011758 <__multiply>
 8010958:	9901      	ldr	r1, [sp, #4]
 801095a:	9005      	str	r0, [sp, #20]
 801095c:	4648      	mov	r0, r9
 801095e:	f000 fde7 	bl	8011530 <_Bfree>
 8010962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010964:	1b1b      	subs	r3, r3, r4
 8010966:	f000 80b0 	beq.w	8010aca <_dtoa_r+0x802>
 801096a:	9905      	ldr	r1, [sp, #20]
 801096c:	461a      	mov	r2, r3
 801096e:	4648      	mov	r0, r9
 8010970:	f000 ff94 	bl	801189c <__pow5mult>
 8010974:	9001      	str	r0, [sp, #4]
 8010976:	2101      	movs	r1, #1
 8010978:	4648      	mov	r0, r9
 801097a:	f000 fed7 	bl	801172c <__i2b>
 801097e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010980:	4604      	mov	r4, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 81da 	beq.w	8010d3c <_dtoa_r+0xa74>
 8010988:	461a      	mov	r2, r3
 801098a:	4601      	mov	r1, r0
 801098c:	4648      	mov	r0, r9
 801098e:	f000 ff85 	bl	801189c <__pow5mult>
 8010992:	9b07      	ldr	r3, [sp, #28]
 8010994:	2b01      	cmp	r3, #1
 8010996:	4604      	mov	r4, r0
 8010998:	f300 80a0 	bgt.w	8010adc <_dtoa_r+0x814>
 801099c:	9b02      	ldr	r3, [sp, #8]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f040 8096 	bne.w	8010ad0 <_dtoa_r+0x808>
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80109aa:	2a00      	cmp	r2, #0
 80109ac:	f040 8092 	bne.w	8010ad4 <_dtoa_r+0x80c>
 80109b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80109b4:	0d12      	lsrs	r2, r2, #20
 80109b6:	0512      	lsls	r2, r2, #20
 80109b8:	2a00      	cmp	r2, #0
 80109ba:	f000 808d 	beq.w	8010ad8 <_dtoa_r+0x810>
 80109be:	9b04      	ldr	r3, [sp, #16]
 80109c0:	3301      	adds	r3, #1
 80109c2:	9304      	str	r3, [sp, #16]
 80109c4:	9b06      	ldr	r3, [sp, #24]
 80109c6:	3301      	adds	r3, #1
 80109c8:	9306      	str	r3, [sp, #24]
 80109ca:	2301      	movs	r3, #1
 80109cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f000 81b9 	beq.w	8010d48 <_dtoa_r+0xa80>
 80109d6:	6922      	ldr	r2, [r4, #16]
 80109d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80109dc:	6910      	ldr	r0, [r2, #16]
 80109de:	f000 fe59 	bl	8011694 <__hi0bits>
 80109e2:	f1c0 0020 	rsb	r0, r0, #32
 80109e6:	9b06      	ldr	r3, [sp, #24]
 80109e8:	4418      	add	r0, r3
 80109ea:	f010 001f 	ands.w	r0, r0, #31
 80109ee:	f000 8081 	beq.w	8010af4 <_dtoa_r+0x82c>
 80109f2:	f1c0 0220 	rsb	r2, r0, #32
 80109f6:	2a04      	cmp	r2, #4
 80109f8:	dd73      	ble.n	8010ae2 <_dtoa_r+0x81a>
 80109fa:	9b04      	ldr	r3, [sp, #16]
 80109fc:	f1c0 001c 	rsb	r0, r0, #28
 8010a00:	4403      	add	r3, r0
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	9b06      	ldr	r3, [sp, #24]
 8010a06:	4406      	add	r6, r0
 8010a08:	4403      	add	r3, r0
 8010a0a:	9306      	str	r3, [sp, #24]
 8010a0c:	9b04      	ldr	r3, [sp, #16]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	dd05      	ble.n	8010a1e <_dtoa_r+0x756>
 8010a12:	9901      	ldr	r1, [sp, #4]
 8010a14:	461a      	mov	r2, r3
 8010a16:	4648      	mov	r0, r9
 8010a18:	f000 ff9a 	bl	8011950 <__lshift>
 8010a1c:	9001      	str	r0, [sp, #4]
 8010a1e:	9b06      	ldr	r3, [sp, #24]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	dd05      	ble.n	8010a30 <_dtoa_r+0x768>
 8010a24:	4621      	mov	r1, r4
 8010a26:	461a      	mov	r2, r3
 8010a28:	4648      	mov	r0, r9
 8010a2a:	f000 ff91 	bl	8011950 <__lshift>
 8010a2e:	4604      	mov	r4, r0
 8010a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d060      	beq.n	8010af8 <_dtoa_r+0x830>
 8010a36:	9801      	ldr	r0, [sp, #4]
 8010a38:	4621      	mov	r1, r4
 8010a3a:	f000 fff5 	bl	8011a28 <__mcmp>
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	da5a      	bge.n	8010af8 <_dtoa_r+0x830>
 8010a42:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a46:	9305      	str	r3, [sp, #20]
 8010a48:	9901      	ldr	r1, [sp, #4]
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	220a      	movs	r2, #10
 8010a4e:	4648      	mov	r0, r9
 8010a50:	f000 fd90 	bl	8011574 <__multadd>
 8010a54:	9b08      	ldr	r3, [sp, #32]
 8010a56:	9001      	str	r0, [sp, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 8177 	beq.w	8010d4c <_dtoa_r+0xa84>
 8010a5e:	4629      	mov	r1, r5
 8010a60:	2300      	movs	r3, #0
 8010a62:	220a      	movs	r2, #10
 8010a64:	4648      	mov	r0, r9
 8010a66:	f000 fd85 	bl	8011574 <__multadd>
 8010a6a:	f1bb 0f00 	cmp.w	fp, #0
 8010a6e:	4605      	mov	r5, r0
 8010a70:	dc6e      	bgt.n	8010b50 <_dtoa_r+0x888>
 8010a72:	9b07      	ldr	r3, [sp, #28]
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	dc48      	bgt.n	8010b0a <_dtoa_r+0x842>
 8010a78:	e06a      	b.n	8010b50 <_dtoa_r+0x888>
 8010a7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a80:	e739      	b.n	80108f6 <_dtoa_r+0x62e>
 8010a82:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010a86:	42a3      	cmp	r3, r4
 8010a88:	db07      	blt.n	8010a9a <_dtoa_r+0x7d2>
 8010a8a:	f1ba 0f00 	cmp.w	sl, #0
 8010a8e:	eba3 0404 	sub.w	r4, r3, r4
 8010a92:	db0b      	blt.n	8010aac <_dtoa_r+0x7e4>
 8010a94:	9e04      	ldr	r6, [sp, #16]
 8010a96:	4652      	mov	r2, sl
 8010a98:	e72f      	b.n	80108fa <_dtoa_r+0x632>
 8010a9a:	1ae2      	subs	r2, r4, r3
 8010a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a9e:	9e04      	ldr	r6, [sp, #16]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010aa4:	4652      	mov	r2, sl
 8010aa6:	4623      	mov	r3, r4
 8010aa8:	2400      	movs	r4, #0
 8010aaa:	e726      	b.n	80108fa <_dtoa_r+0x632>
 8010aac:	9a04      	ldr	r2, [sp, #16]
 8010aae:	eba2 060a 	sub.w	r6, r2, sl
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	e721      	b.n	80108fa <_dtoa_r+0x632>
 8010ab6:	9e04      	ldr	r6, [sp, #16]
 8010ab8:	9d08      	ldr	r5, [sp, #32]
 8010aba:	461c      	mov	r4, r3
 8010abc:	e72a      	b.n	8010914 <_dtoa_r+0x64c>
 8010abe:	9a01      	ldr	r2, [sp, #4]
 8010ac0:	9205      	str	r2, [sp, #20]
 8010ac2:	e752      	b.n	801096a <_dtoa_r+0x6a2>
 8010ac4:	9901      	ldr	r1, [sp, #4]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	e751      	b.n	801096e <_dtoa_r+0x6a6>
 8010aca:	9b05      	ldr	r3, [sp, #20]
 8010acc:	9301      	str	r3, [sp, #4]
 8010ace:	e752      	b.n	8010976 <_dtoa_r+0x6ae>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	e77b      	b.n	80109cc <_dtoa_r+0x704>
 8010ad4:	9b02      	ldr	r3, [sp, #8]
 8010ad6:	e779      	b.n	80109cc <_dtoa_r+0x704>
 8010ad8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010ada:	e778      	b.n	80109ce <_dtoa_r+0x706>
 8010adc:	2300      	movs	r3, #0
 8010ade:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ae0:	e779      	b.n	80109d6 <_dtoa_r+0x70e>
 8010ae2:	d093      	beq.n	8010a0c <_dtoa_r+0x744>
 8010ae4:	9b04      	ldr	r3, [sp, #16]
 8010ae6:	321c      	adds	r2, #28
 8010ae8:	4413      	add	r3, r2
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	9b06      	ldr	r3, [sp, #24]
 8010aee:	4416      	add	r6, r2
 8010af0:	4413      	add	r3, r2
 8010af2:	e78a      	b.n	8010a0a <_dtoa_r+0x742>
 8010af4:	4602      	mov	r2, r0
 8010af6:	e7f5      	b.n	8010ae4 <_dtoa_r+0x81c>
 8010af8:	f1ba 0f00 	cmp.w	sl, #0
 8010afc:	f8cd 8014 	str.w	r8, [sp, #20]
 8010b00:	46d3      	mov	fp, sl
 8010b02:	dc21      	bgt.n	8010b48 <_dtoa_r+0x880>
 8010b04:	9b07      	ldr	r3, [sp, #28]
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	dd1e      	ble.n	8010b48 <_dtoa_r+0x880>
 8010b0a:	f1bb 0f00 	cmp.w	fp, #0
 8010b0e:	f47f addc 	bne.w	80106ca <_dtoa_r+0x402>
 8010b12:	4621      	mov	r1, r4
 8010b14:	465b      	mov	r3, fp
 8010b16:	2205      	movs	r2, #5
 8010b18:	4648      	mov	r0, r9
 8010b1a:	f000 fd2b 	bl	8011574 <__multadd>
 8010b1e:	4601      	mov	r1, r0
 8010b20:	4604      	mov	r4, r0
 8010b22:	9801      	ldr	r0, [sp, #4]
 8010b24:	f000 ff80 	bl	8011a28 <__mcmp>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	f77f adce 	ble.w	80106ca <_dtoa_r+0x402>
 8010b2e:	463e      	mov	r6, r7
 8010b30:	2331      	movs	r3, #49	@ 0x31
 8010b32:	f806 3b01 	strb.w	r3, [r6], #1
 8010b36:	9b05      	ldr	r3, [sp, #20]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	9305      	str	r3, [sp, #20]
 8010b3c:	e5c9      	b.n	80106d2 <_dtoa_r+0x40a>
 8010b3e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010b42:	4654      	mov	r4, sl
 8010b44:	4625      	mov	r5, r4
 8010b46:	e7f2      	b.n	8010b2e <_dtoa_r+0x866>
 8010b48:	9b08      	ldr	r3, [sp, #32]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f000 8102 	beq.w	8010d54 <_dtoa_r+0xa8c>
 8010b50:	2e00      	cmp	r6, #0
 8010b52:	dd05      	ble.n	8010b60 <_dtoa_r+0x898>
 8010b54:	4629      	mov	r1, r5
 8010b56:	4632      	mov	r2, r6
 8010b58:	4648      	mov	r0, r9
 8010b5a:	f000 fef9 	bl	8011950 <__lshift>
 8010b5e:	4605      	mov	r5, r0
 8010b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d058      	beq.n	8010c18 <_dtoa_r+0x950>
 8010b66:	6869      	ldr	r1, [r5, #4]
 8010b68:	4648      	mov	r0, r9
 8010b6a:	f000 fca1 	bl	80114b0 <_Balloc>
 8010b6e:	4606      	mov	r6, r0
 8010b70:	b928      	cbnz	r0, 8010b7e <_dtoa_r+0x8b6>
 8010b72:	4b82      	ldr	r3, [pc, #520]	@ (8010d7c <_dtoa_r+0xab4>)
 8010b74:	4602      	mov	r2, r0
 8010b76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b7a:	f7ff bbbe 	b.w	80102fa <_dtoa_r+0x32>
 8010b7e:	692a      	ldr	r2, [r5, #16]
 8010b80:	3202      	adds	r2, #2
 8010b82:	0092      	lsls	r2, r2, #2
 8010b84:	f105 010c 	add.w	r1, r5, #12
 8010b88:	300c      	adds	r0, #12
 8010b8a:	f7ff faf4 	bl	8010176 <memcpy>
 8010b8e:	2201      	movs	r2, #1
 8010b90:	4631      	mov	r1, r6
 8010b92:	4648      	mov	r0, r9
 8010b94:	f000 fedc 	bl	8011950 <__lshift>
 8010b98:	1c7b      	adds	r3, r7, #1
 8010b9a:	9304      	str	r3, [sp, #16]
 8010b9c:	eb07 030b 	add.w	r3, r7, fp
 8010ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ba2:	9b02      	ldr	r3, [sp, #8]
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	46a8      	mov	r8, r5
 8010baa:	9308      	str	r3, [sp, #32]
 8010bac:	4605      	mov	r5, r0
 8010bae:	9b04      	ldr	r3, [sp, #16]
 8010bb0:	9801      	ldr	r0, [sp, #4]
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	f103 3bff 	add.w	fp, r3, #4294967295
 8010bb8:	f7ff fafc 	bl	80101b4 <quorem>
 8010bbc:	4641      	mov	r1, r8
 8010bbe:	9002      	str	r0, [sp, #8]
 8010bc0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bc4:	9801      	ldr	r0, [sp, #4]
 8010bc6:	f000 ff2f 	bl	8011a28 <__mcmp>
 8010bca:	462a      	mov	r2, r5
 8010bcc:	9006      	str	r0, [sp, #24]
 8010bce:	4621      	mov	r1, r4
 8010bd0:	4648      	mov	r0, r9
 8010bd2:	f000 ff45 	bl	8011a60 <__mdiff>
 8010bd6:	68c2      	ldr	r2, [r0, #12]
 8010bd8:	4606      	mov	r6, r0
 8010bda:	b9fa      	cbnz	r2, 8010c1c <_dtoa_r+0x954>
 8010bdc:	4601      	mov	r1, r0
 8010bde:	9801      	ldr	r0, [sp, #4]
 8010be0:	f000 ff22 	bl	8011a28 <__mcmp>
 8010be4:	4602      	mov	r2, r0
 8010be6:	4631      	mov	r1, r6
 8010be8:	4648      	mov	r0, r9
 8010bea:	920a      	str	r2, [sp, #40]	@ 0x28
 8010bec:	f000 fca0 	bl	8011530 <_Bfree>
 8010bf0:	9b07      	ldr	r3, [sp, #28]
 8010bf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bf4:	9e04      	ldr	r6, [sp, #16]
 8010bf6:	ea42 0103 	orr.w	r1, r2, r3
 8010bfa:	9b08      	ldr	r3, [sp, #32]
 8010bfc:	4319      	orrs	r1, r3
 8010bfe:	d10f      	bne.n	8010c20 <_dtoa_r+0x958>
 8010c00:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c04:	d028      	beq.n	8010c58 <_dtoa_r+0x990>
 8010c06:	9b06      	ldr	r3, [sp, #24]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	dd02      	ble.n	8010c12 <_dtoa_r+0x94a>
 8010c0c:	9b02      	ldr	r3, [sp, #8]
 8010c0e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010c12:	f88b a000 	strb.w	sl, [fp]
 8010c16:	e55e      	b.n	80106d6 <_dtoa_r+0x40e>
 8010c18:	4628      	mov	r0, r5
 8010c1a:	e7bd      	b.n	8010b98 <_dtoa_r+0x8d0>
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	e7e2      	b.n	8010be6 <_dtoa_r+0x91e>
 8010c20:	9b06      	ldr	r3, [sp, #24]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	db04      	blt.n	8010c30 <_dtoa_r+0x968>
 8010c26:	9907      	ldr	r1, [sp, #28]
 8010c28:	430b      	orrs	r3, r1
 8010c2a:	9908      	ldr	r1, [sp, #32]
 8010c2c:	430b      	orrs	r3, r1
 8010c2e:	d120      	bne.n	8010c72 <_dtoa_r+0x9aa>
 8010c30:	2a00      	cmp	r2, #0
 8010c32:	ddee      	ble.n	8010c12 <_dtoa_r+0x94a>
 8010c34:	9901      	ldr	r1, [sp, #4]
 8010c36:	2201      	movs	r2, #1
 8010c38:	4648      	mov	r0, r9
 8010c3a:	f000 fe89 	bl	8011950 <__lshift>
 8010c3e:	4621      	mov	r1, r4
 8010c40:	9001      	str	r0, [sp, #4]
 8010c42:	f000 fef1 	bl	8011a28 <__mcmp>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	dc03      	bgt.n	8010c52 <_dtoa_r+0x98a>
 8010c4a:	d1e2      	bne.n	8010c12 <_dtoa_r+0x94a>
 8010c4c:	f01a 0f01 	tst.w	sl, #1
 8010c50:	d0df      	beq.n	8010c12 <_dtoa_r+0x94a>
 8010c52:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c56:	d1d9      	bne.n	8010c0c <_dtoa_r+0x944>
 8010c58:	2339      	movs	r3, #57	@ 0x39
 8010c5a:	f88b 3000 	strb.w	r3, [fp]
 8010c5e:	4633      	mov	r3, r6
 8010c60:	461e      	mov	r6, r3
 8010c62:	3b01      	subs	r3, #1
 8010c64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c68:	2a39      	cmp	r2, #57	@ 0x39
 8010c6a:	d052      	beq.n	8010d12 <_dtoa_r+0xa4a>
 8010c6c:	3201      	adds	r2, #1
 8010c6e:	701a      	strb	r2, [r3, #0]
 8010c70:	e531      	b.n	80106d6 <_dtoa_r+0x40e>
 8010c72:	2a00      	cmp	r2, #0
 8010c74:	dd07      	ble.n	8010c86 <_dtoa_r+0x9be>
 8010c76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c7a:	d0ed      	beq.n	8010c58 <_dtoa_r+0x990>
 8010c7c:	f10a 0301 	add.w	r3, sl, #1
 8010c80:	f88b 3000 	strb.w	r3, [fp]
 8010c84:	e527      	b.n	80106d6 <_dtoa_r+0x40e>
 8010c86:	9b04      	ldr	r3, [sp, #16]
 8010c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c8a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d029      	beq.n	8010ce6 <_dtoa_r+0xa1e>
 8010c92:	9901      	ldr	r1, [sp, #4]
 8010c94:	2300      	movs	r3, #0
 8010c96:	220a      	movs	r2, #10
 8010c98:	4648      	mov	r0, r9
 8010c9a:	f000 fc6b 	bl	8011574 <__multadd>
 8010c9e:	45a8      	cmp	r8, r5
 8010ca0:	9001      	str	r0, [sp, #4]
 8010ca2:	f04f 0300 	mov.w	r3, #0
 8010ca6:	f04f 020a 	mov.w	r2, #10
 8010caa:	4641      	mov	r1, r8
 8010cac:	4648      	mov	r0, r9
 8010cae:	d107      	bne.n	8010cc0 <_dtoa_r+0x9f8>
 8010cb0:	f000 fc60 	bl	8011574 <__multadd>
 8010cb4:	4680      	mov	r8, r0
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	9b04      	ldr	r3, [sp, #16]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	9304      	str	r3, [sp, #16]
 8010cbe:	e776      	b.n	8010bae <_dtoa_r+0x8e6>
 8010cc0:	f000 fc58 	bl	8011574 <__multadd>
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	4680      	mov	r8, r0
 8010cc8:	2300      	movs	r3, #0
 8010cca:	220a      	movs	r2, #10
 8010ccc:	4648      	mov	r0, r9
 8010cce:	f000 fc51 	bl	8011574 <__multadd>
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	e7f0      	b.n	8010cb8 <_dtoa_r+0x9f0>
 8010cd6:	f1bb 0f00 	cmp.w	fp, #0
 8010cda:	bfcc      	ite	gt
 8010cdc:	465e      	movgt	r6, fp
 8010cde:	2601      	movle	r6, #1
 8010ce0:	443e      	add	r6, r7
 8010ce2:	f04f 0800 	mov.w	r8, #0
 8010ce6:	9901      	ldr	r1, [sp, #4]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	4648      	mov	r0, r9
 8010cec:	f000 fe30 	bl	8011950 <__lshift>
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	9001      	str	r0, [sp, #4]
 8010cf4:	f000 fe98 	bl	8011a28 <__mcmp>
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	dcb0      	bgt.n	8010c5e <_dtoa_r+0x996>
 8010cfc:	d102      	bne.n	8010d04 <_dtoa_r+0xa3c>
 8010cfe:	f01a 0f01 	tst.w	sl, #1
 8010d02:	d1ac      	bne.n	8010c5e <_dtoa_r+0x996>
 8010d04:	4633      	mov	r3, r6
 8010d06:	461e      	mov	r6, r3
 8010d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d0c:	2a30      	cmp	r2, #48	@ 0x30
 8010d0e:	d0fa      	beq.n	8010d06 <_dtoa_r+0xa3e>
 8010d10:	e4e1      	b.n	80106d6 <_dtoa_r+0x40e>
 8010d12:	429f      	cmp	r7, r3
 8010d14:	d1a4      	bne.n	8010c60 <_dtoa_r+0x998>
 8010d16:	9b05      	ldr	r3, [sp, #20]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	9305      	str	r3, [sp, #20]
 8010d1c:	2331      	movs	r3, #49	@ 0x31
 8010d1e:	703b      	strb	r3, [r7, #0]
 8010d20:	e4d9      	b.n	80106d6 <_dtoa_r+0x40e>
 8010d22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d24:	4f16      	ldr	r7, [pc, #88]	@ (8010d80 <_dtoa_r+0xab8>)
 8010d26:	b11b      	cbz	r3, 8010d30 <_dtoa_r+0xa68>
 8010d28:	f107 0308 	add.w	r3, r7, #8
 8010d2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010d2e:	6013      	str	r3, [r2, #0]
 8010d30:	4638      	mov	r0, r7
 8010d32:	b011      	add	sp, #68	@ 0x44
 8010d34:	ecbd 8b02 	vpop	{d8}
 8010d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3c:	9b07      	ldr	r3, [sp, #28]
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	f77f ae2c 	ble.w	801099c <_dtoa_r+0x6d4>
 8010d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d48:	2001      	movs	r0, #1
 8010d4a:	e64c      	b.n	80109e6 <_dtoa_r+0x71e>
 8010d4c:	f1bb 0f00 	cmp.w	fp, #0
 8010d50:	f77f aed8 	ble.w	8010b04 <_dtoa_r+0x83c>
 8010d54:	463e      	mov	r6, r7
 8010d56:	9801      	ldr	r0, [sp, #4]
 8010d58:	4621      	mov	r1, r4
 8010d5a:	f7ff fa2b 	bl	80101b4 <quorem>
 8010d5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010d62:	f806 ab01 	strb.w	sl, [r6], #1
 8010d66:	1bf2      	subs	r2, r6, r7
 8010d68:	4593      	cmp	fp, r2
 8010d6a:	ddb4      	ble.n	8010cd6 <_dtoa_r+0xa0e>
 8010d6c:	9901      	ldr	r1, [sp, #4]
 8010d6e:	2300      	movs	r3, #0
 8010d70:	220a      	movs	r2, #10
 8010d72:	4648      	mov	r0, r9
 8010d74:	f000 fbfe 	bl	8011574 <__multadd>
 8010d78:	9001      	str	r0, [sp, #4]
 8010d7a:	e7ec      	b.n	8010d56 <_dtoa_r+0xa8e>
 8010d7c:	080132dd 	.word	0x080132dd
 8010d80:	08013261 	.word	0x08013261

08010d84 <_free_r>:
 8010d84:	b538      	push	{r3, r4, r5, lr}
 8010d86:	4605      	mov	r5, r0
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	d041      	beq.n	8010e10 <_free_r+0x8c>
 8010d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d90:	1f0c      	subs	r4, r1, #4
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	bfb8      	it	lt
 8010d96:	18e4      	addlt	r4, r4, r3
 8010d98:	f7fd fab8 	bl	800e30c <__malloc_lock>
 8010d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8010e14 <_free_r+0x90>)
 8010d9e:	6813      	ldr	r3, [r2, #0]
 8010da0:	b933      	cbnz	r3, 8010db0 <_free_r+0x2c>
 8010da2:	6063      	str	r3, [r4, #4]
 8010da4:	6014      	str	r4, [r2, #0]
 8010da6:	4628      	mov	r0, r5
 8010da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dac:	f7fd bab4 	b.w	800e318 <__malloc_unlock>
 8010db0:	42a3      	cmp	r3, r4
 8010db2:	d908      	bls.n	8010dc6 <_free_r+0x42>
 8010db4:	6820      	ldr	r0, [r4, #0]
 8010db6:	1821      	adds	r1, r4, r0
 8010db8:	428b      	cmp	r3, r1
 8010dba:	bf01      	itttt	eq
 8010dbc:	6819      	ldreq	r1, [r3, #0]
 8010dbe:	685b      	ldreq	r3, [r3, #4]
 8010dc0:	1809      	addeq	r1, r1, r0
 8010dc2:	6021      	streq	r1, [r4, #0]
 8010dc4:	e7ed      	b.n	8010da2 <_free_r+0x1e>
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	b10b      	cbz	r3, 8010dd0 <_free_r+0x4c>
 8010dcc:	42a3      	cmp	r3, r4
 8010dce:	d9fa      	bls.n	8010dc6 <_free_r+0x42>
 8010dd0:	6811      	ldr	r1, [r2, #0]
 8010dd2:	1850      	adds	r0, r2, r1
 8010dd4:	42a0      	cmp	r0, r4
 8010dd6:	d10b      	bne.n	8010df0 <_free_r+0x6c>
 8010dd8:	6820      	ldr	r0, [r4, #0]
 8010dda:	4401      	add	r1, r0
 8010ddc:	1850      	adds	r0, r2, r1
 8010dde:	4283      	cmp	r3, r0
 8010de0:	6011      	str	r1, [r2, #0]
 8010de2:	d1e0      	bne.n	8010da6 <_free_r+0x22>
 8010de4:	6818      	ldr	r0, [r3, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	6053      	str	r3, [r2, #4]
 8010dea:	4408      	add	r0, r1
 8010dec:	6010      	str	r0, [r2, #0]
 8010dee:	e7da      	b.n	8010da6 <_free_r+0x22>
 8010df0:	d902      	bls.n	8010df8 <_free_r+0x74>
 8010df2:	230c      	movs	r3, #12
 8010df4:	602b      	str	r3, [r5, #0]
 8010df6:	e7d6      	b.n	8010da6 <_free_r+0x22>
 8010df8:	6820      	ldr	r0, [r4, #0]
 8010dfa:	1821      	adds	r1, r4, r0
 8010dfc:	428b      	cmp	r3, r1
 8010dfe:	bf04      	itt	eq
 8010e00:	6819      	ldreq	r1, [r3, #0]
 8010e02:	685b      	ldreq	r3, [r3, #4]
 8010e04:	6063      	str	r3, [r4, #4]
 8010e06:	bf04      	itt	eq
 8010e08:	1809      	addeq	r1, r1, r0
 8010e0a:	6021      	streq	r1, [r4, #0]
 8010e0c:	6054      	str	r4, [r2, #4]
 8010e0e:	e7ca      	b.n	8010da6 <_free_r+0x22>
 8010e10:	bd38      	pop	{r3, r4, r5, pc}
 8010e12:	bf00      	nop
 8010e14:	24004dc8 	.word	0x24004dc8

08010e18 <rshift>:
 8010e18:	6903      	ldr	r3, [r0, #16]
 8010e1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e26:	f100 0414 	add.w	r4, r0, #20
 8010e2a:	dd45      	ble.n	8010eb8 <rshift+0xa0>
 8010e2c:	f011 011f 	ands.w	r1, r1, #31
 8010e30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e38:	d10c      	bne.n	8010e54 <rshift+0x3c>
 8010e3a:	f100 0710 	add.w	r7, r0, #16
 8010e3e:	4629      	mov	r1, r5
 8010e40:	42b1      	cmp	r1, r6
 8010e42:	d334      	bcc.n	8010eae <rshift+0x96>
 8010e44:	1a9b      	subs	r3, r3, r2
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	1eea      	subs	r2, r5, #3
 8010e4a:	4296      	cmp	r6, r2
 8010e4c:	bf38      	it	cc
 8010e4e:	2300      	movcc	r3, #0
 8010e50:	4423      	add	r3, r4
 8010e52:	e015      	b.n	8010e80 <rshift+0x68>
 8010e54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e58:	f1c1 0820 	rsb	r8, r1, #32
 8010e5c:	40cf      	lsrs	r7, r1
 8010e5e:	f105 0e04 	add.w	lr, r5, #4
 8010e62:	46a1      	mov	r9, r4
 8010e64:	4576      	cmp	r6, lr
 8010e66:	46f4      	mov	ip, lr
 8010e68:	d815      	bhi.n	8010e96 <rshift+0x7e>
 8010e6a:	1a9a      	subs	r2, r3, r2
 8010e6c:	0092      	lsls	r2, r2, #2
 8010e6e:	3a04      	subs	r2, #4
 8010e70:	3501      	adds	r5, #1
 8010e72:	42ae      	cmp	r6, r5
 8010e74:	bf38      	it	cc
 8010e76:	2200      	movcc	r2, #0
 8010e78:	18a3      	adds	r3, r4, r2
 8010e7a:	50a7      	str	r7, [r4, r2]
 8010e7c:	b107      	cbz	r7, 8010e80 <rshift+0x68>
 8010e7e:	3304      	adds	r3, #4
 8010e80:	1b1a      	subs	r2, r3, r4
 8010e82:	42a3      	cmp	r3, r4
 8010e84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e88:	bf08      	it	eq
 8010e8a:	2300      	moveq	r3, #0
 8010e8c:	6102      	str	r2, [r0, #16]
 8010e8e:	bf08      	it	eq
 8010e90:	6143      	streq	r3, [r0, #20]
 8010e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e96:	f8dc c000 	ldr.w	ip, [ip]
 8010e9a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e9e:	ea4c 0707 	orr.w	r7, ip, r7
 8010ea2:	f849 7b04 	str.w	r7, [r9], #4
 8010ea6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010eaa:	40cf      	lsrs	r7, r1
 8010eac:	e7da      	b.n	8010e64 <rshift+0x4c>
 8010eae:	f851 cb04 	ldr.w	ip, [r1], #4
 8010eb2:	f847 cf04 	str.w	ip, [r7, #4]!
 8010eb6:	e7c3      	b.n	8010e40 <rshift+0x28>
 8010eb8:	4623      	mov	r3, r4
 8010eba:	e7e1      	b.n	8010e80 <rshift+0x68>

08010ebc <__hexdig_fun>:
 8010ebc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ec0:	2b09      	cmp	r3, #9
 8010ec2:	d802      	bhi.n	8010eca <__hexdig_fun+0xe>
 8010ec4:	3820      	subs	r0, #32
 8010ec6:	b2c0      	uxtb	r0, r0
 8010ec8:	4770      	bx	lr
 8010eca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ece:	2b05      	cmp	r3, #5
 8010ed0:	d801      	bhi.n	8010ed6 <__hexdig_fun+0x1a>
 8010ed2:	3847      	subs	r0, #71	@ 0x47
 8010ed4:	e7f7      	b.n	8010ec6 <__hexdig_fun+0xa>
 8010ed6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010eda:	2b05      	cmp	r3, #5
 8010edc:	d801      	bhi.n	8010ee2 <__hexdig_fun+0x26>
 8010ede:	3827      	subs	r0, #39	@ 0x27
 8010ee0:	e7f1      	b.n	8010ec6 <__hexdig_fun+0xa>
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	4770      	bx	lr
	...

08010ee8 <__gethex>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	b085      	sub	sp, #20
 8010eee:	468a      	mov	sl, r1
 8010ef0:	9302      	str	r3, [sp, #8]
 8010ef2:	680b      	ldr	r3, [r1, #0]
 8010ef4:	9001      	str	r0, [sp, #4]
 8010ef6:	4690      	mov	r8, r2
 8010ef8:	1c9c      	adds	r4, r3, #2
 8010efa:	46a1      	mov	r9, r4
 8010efc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f00:	2830      	cmp	r0, #48	@ 0x30
 8010f02:	d0fa      	beq.n	8010efa <__gethex+0x12>
 8010f04:	eba9 0303 	sub.w	r3, r9, r3
 8010f08:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f0c:	f7ff ffd6 	bl	8010ebc <__hexdig_fun>
 8010f10:	4605      	mov	r5, r0
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d168      	bne.n	8010fe8 <__gethex+0x100>
 8010f16:	49a0      	ldr	r1, [pc, #640]	@ (8011198 <__gethex+0x2b0>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	4648      	mov	r0, r9
 8010f1c:	f7ff f892 	bl	8010044 <strncmp>
 8010f20:	4607      	mov	r7, r0
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d167      	bne.n	8010ff6 <__gethex+0x10e>
 8010f26:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f2a:	4626      	mov	r6, r4
 8010f2c:	f7ff ffc6 	bl	8010ebc <__hexdig_fun>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d062      	beq.n	8010ffa <__gethex+0x112>
 8010f34:	4623      	mov	r3, r4
 8010f36:	7818      	ldrb	r0, [r3, #0]
 8010f38:	2830      	cmp	r0, #48	@ 0x30
 8010f3a:	4699      	mov	r9, r3
 8010f3c:	f103 0301 	add.w	r3, r3, #1
 8010f40:	d0f9      	beq.n	8010f36 <__gethex+0x4e>
 8010f42:	f7ff ffbb 	bl	8010ebc <__hexdig_fun>
 8010f46:	fab0 f580 	clz	r5, r0
 8010f4a:	096d      	lsrs	r5, r5, #5
 8010f4c:	f04f 0b01 	mov.w	fp, #1
 8010f50:	464a      	mov	r2, r9
 8010f52:	4616      	mov	r6, r2
 8010f54:	3201      	adds	r2, #1
 8010f56:	7830      	ldrb	r0, [r6, #0]
 8010f58:	f7ff ffb0 	bl	8010ebc <__hexdig_fun>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	d1f8      	bne.n	8010f52 <__gethex+0x6a>
 8010f60:	498d      	ldr	r1, [pc, #564]	@ (8011198 <__gethex+0x2b0>)
 8010f62:	2201      	movs	r2, #1
 8010f64:	4630      	mov	r0, r6
 8010f66:	f7ff f86d 	bl	8010044 <strncmp>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d13f      	bne.n	8010fee <__gethex+0x106>
 8010f6e:	b944      	cbnz	r4, 8010f82 <__gethex+0x9a>
 8010f70:	1c74      	adds	r4, r6, #1
 8010f72:	4622      	mov	r2, r4
 8010f74:	4616      	mov	r6, r2
 8010f76:	3201      	adds	r2, #1
 8010f78:	7830      	ldrb	r0, [r6, #0]
 8010f7a:	f7ff ff9f 	bl	8010ebc <__hexdig_fun>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d1f8      	bne.n	8010f74 <__gethex+0x8c>
 8010f82:	1ba4      	subs	r4, r4, r6
 8010f84:	00a7      	lsls	r7, r4, #2
 8010f86:	7833      	ldrb	r3, [r6, #0]
 8010f88:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f8c:	2b50      	cmp	r3, #80	@ 0x50
 8010f8e:	d13e      	bne.n	801100e <__gethex+0x126>
 8010f90:	7873      	ldrb	r3, [r6, #1]
 8010f92:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f94:	d033      	beq.n	8010ffe <__gethex+0x116>
 8010f96:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f98:	d034      	beq.n	8011004 <__gethex+0x11c>
 8010f9a:	1c71      	adds	r1, r6, #1
 8010f9c:	2400      	movs	r4, #0
 8010f9e:	7808      	ldrb	r0, [r1, #0]
 8010fa0:	f7ff ff8c 	bl	8010ebc <__hexdig_fun>
 8010fa4:	1e43      	subs	r3, r0, #1
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	2b18      	cmp	r3, #24
 8010faa:	d830      	bhi.n	801100e <__gethex+0x126>
 8010fac:	f1a0 0210 	sub.w	r2, r0, #16
 8010fb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fb4:	f7ff ff82 	bl	8010ebc <__hexdig_fun>
 8010fb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8010fbc:	fa5f fc8c 	uxtb.w	ip, ip
 8010fc0:	f1bc 0f18 	cmp.w	ip, #24
 8010fc4:	f04f 030a 	mov.w	r3, #10
 8010fc8:	d91e      	bls.n	8011008 <__gethex+0x120>
 8010fca:	b104      	cbz	r4, 8010fce <__gethex+0xe6>
 8010fcc:	4252      	negs	r2, r2
 8010fce:	4417      	add	r7, r2
 8010fd0:	f8ca 1000 	str.w	r1, [sl]
 8010fd4:	b1ed      	cbz	r5, 8011012 <__gethex+0x12a>
 8010fd6:	f1bb 0f00 	cmp.w	fp, #0
 8010fda:	bf0c      	ite	eq
 8010fdc:	2506      	moveq	r5, #6
 8010fde:	2500      	movne	r5, #0
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	b005      	add	sp, #20
 8010fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe8:	2500      	movs	r5, #0
 8010fea:	462c      	mov	r4, r5
 8010fec:	e7b0      	b.n	8010f50 <__gethex+0x68>
 8010fee:	2c00      	cmp	r4, #0
 8010ff0:	d1c7      	bne.n	8010f82 <__gethex+0x9a>
 8010ff2:	4627      	mov	r7, r4
 8010ff4:	e7c7      	b.n	8010f86 <__gethex+0x9e>
 8010ff6:	464e      	mov	r6, r9
 8010ff8:	462f      	mov	r7, r5
 8010ffa:	2501      	movs	r5, #1
 8010ffc:	e7c3      	b.n	8010f86 <__gethex+0x9e>
 8010ffe:	2400      	movs	r4, #0
 8011000:	1cb1      	adds	r1, r6, #2
 8011002:	e7cc      	b.n	8010f9e <__gethex+0xb6>
 8011004:	2401      	movs	r4, #1
 8011006:	e7fb      	b.n	8011000 <__gethex+0x118>
 8011008:	fb03 0002 	mla	r0, r3, r2, r0
 801100c:	e7ce      	b.n	8010fac <__gethex+0xc4>
 801100e:	4631      	mov	r1, r6
 8011010:	e7de      	b.n	8010fd0 <__gethex+0xe8>
 8011012:	eba6 0309 	sub.w	r3, r6, r9
 8011016:	3b01      	subs	r3, #1
 8011018:	4629      	mov	r1, r5
 801101a:	2b07      	cmp	r3, #7
 801101c:	dc0a      	bgt.n	8011034 <__gethex+0x14c>
 801101e:	9801      	ldr	r0, [sp, #4]
 8011020:	f000 fa46 	bl	80114b0 <_Balloc>
 8011024:	4604      	mov	r4, r0
 8011026:	b940      	cbnz	r0, 801103a <__gethex+0x152>
 8011028:	4b5c      	ldr	r3, [pc, #368]	@ (801119c <__gethex+0x2b4>)
 801102a:	4602      	mov	r2, r0
 801102c:	21e4      	movs	r1, #228	@ 0xe4
 801102e:	485c      	ldr	r0, [pc, #368]	@ (80111a0 <__gethex+0x2b8>)
 8011030:	f001 feec 	bl	8012e0c <__assert_func>
 8011034:	3101      	adds	r1, #1
 8011036:	105b      	asrs	r3, r3, #1
 8011038:	e7ef      	b.n	801101a <__gethex+0x132>
 801103a:	f100 0a14 	add.w	sl, r0, #20
 801103e:	2300      	movs	r3, #0
 8011040:	4655      	mov	r5, sl
 8011042:	469b      	mov	fp, r3
 8011044:	45b1      	cmp	r9, r6
 8011046:	d337      	bcc.n	80110b8 <__gethex+0x1d0>
 8011048:	f845 bb04 	str.w	fp, [r5], #4
 801104c:	eba5 050a 	sub.w	r5, r5, sl
 8011050:	10ad      	asrs	r5, r5, #2
 8011052:	6125      	str	r5, [r4, #16]
 8011054:	4658      	mov	r0, fp
 8011056:	f000 fb1d 	bl	8011694 <__hi0bits>
 801105a:	016d      	lsls	r5, r5, #5
 801105c:	f8d8 6000 	ldr.w	r6, [r8]
 8011060:	1a2d      	subs	r5, r5, r0
 8011062:	42b5      	cmp	r5, r6
 8011064:	dd54      	ble.n	8011110 <__gethex+0x228>
 8011066:	1bad      	subs	r5, r5, r6
 8011068:	4629      	mov	r1, r5
 801106a:	4620      	mov	r0, r4
 801106c:	f000 fea6 	bl	8011dbc <__any_on>
 8011070:	4681      	mov	r9, r0
 8011072:	b178      	cbz	r0, 8011094 <__gethex+0x1ac>
 8011074:	1e6b      	subs	r3, r5, #1
 8011076:	1159      	asrs	r1, r3, #5
 8011078:	f003 021f 	and.w	r2, r3, #31
 801107c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011080:	f04f 0901 	mov.w	r9, #1
 8011084:	fa09 f202 	lsl.w	r2, r9, r2
 8011088:	420a      	tst	r2, r1
 801108a:	d003      	beq.n	8011094 <__gethex+0x1ac>
 801108c:	454b      	cmp	r3, r9
 801108e:	dc36      	bgt.n	80110fe <__gethex+0x216>
 8011090:	f04f 0902 	mov.w	r9, #2
 8011094:	4629      	mov	r1, r5
 8011096:	4620      	mov	r0, r4
 8011098:	f7ff febe 	bl	8010e18 <rshift>
 801109c:	442f      	add	r7, r5
 801109e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110a2:	42bb      	cmp	r3, r7
 80110a4:	da42      	bge.n	801112c <__gethex+0x244>
 80110a6:	9801      	ldr	r0, [sp, #4]
 80110a8:	4621      	mov	r1, r4
 80110aa:	f000 fa41 	bl	8011530 <_Bfree>
 80110ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110b0:	2300      	movs	r3, #0
 80110b2:	6013      	str	r3, [r2, #0]
 80110b4:	25a3      	movs	r5, #163	@ 0xa3
 80110b6:	e793      	b.n	8010fe0 <__gethex+0xf8>
 80110b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80110bc:	2a2e      	cmp	r2, #46	@ 0x2e
 80110be:	d012      	beq.n	80110e6 <__gethex+0x1fe>
 80110c0:	2b20      	cmp	r3, #32
 80110c2:	d104      	bne.n	80110ce <__gethex+0x1e6>
 80110c4:	f845 bb04 	str.w	fp, [r5], #4
 80110c8:	f04f 0b00 	mov.w	fp, #0
 80110cc:	465b      	mov	r3, fp
 80110ce:	7830      	ldrb	r0, [r6, #0]
 80110d0:	9303      	str	r3, [sp, #12]
 80110d2:	f7ff fef3 	bl	8010ebc <__hexdig_fun>
 80110d6:	9b03      	ldr	r3, [sp, #12]
 80110d8:	f000 000f 	and.w	r0, r0, #15
 80110dc:	4098      	lsls	r0, r3
 80110de:	ea4b 0b00 	orr.w	fp, fp, r0
 80110e2:	3304      	adds	r3, #4
 80110e4:	e7ae      	b.n	8011044 <__gethex+0x15c>
 80110e6:	45b1      	cmp	r9, r6
 80110e8:	d8ea      	bhi.n	80110c0 <__gethex+0x1d8>
 80110ea:	492b      	ldr	r1, [pc, #172]	@ (8011198 <__gethex+0x2b0>)
 80110ec:	9303      	str	r3, [sp, #12]
 80110ee:	2201      	movs	r2, #1
 80110f0:	4630      	mov	r0, r6
 80110f2:	f7fe ffa7 	bl	8010044 <strncmp>
 80110f6:	9b03      	ldr	r3, [sp, #12]
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d1e1      	bne.n	80110c0 <__gethex+0x1d8>
 80110fc:	e7a2      	b.n	8011044 <__gethex+0x15c>
 80110fe:	1ea9      	subs	r1, r5, #2
 8011100:	4620      	mov	r0, r4
 8011102:	f000 fe5b 	bl	8011dbc <__any_on>
 8011106:	2800      	cmp	r0, #0
 8011108:	d0c2      	beq.n	8011090 <__gethex+0x1a8>
 801110a:	f04f 0903 	mov.w	r9, #3
 801110e:	e7c1      	b.n	8011094 <__gethex+0x1ac>
 8011110:	da09      	bge.n	8011126 <__gethex+0x23e>
 8011112:	1b75      	subs	r5, r6, r5
 8011114:	4621      	mov	r1, r4
 8011116:	9801      	ldr	r0, [sp, #4]
 8011118:	462a      	mov	r2, r5
 801111a:	f000 fc19 	bl	8011950 <__lshift>
 801111e:	1b7f      	subs	r7, r7, r5
 8011120:	4604      	mov	r4, r0
 8011122:	f100 0a14 	add.w	sl, r0, #20
 8011126:	f04f 0900 	mov.w	r9, #0
 801112a:	e7b8      	b.n	801109e <__gethex+0x1b6>
 801112c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011130:	42bd      	cmp	r5, r7
 8011132:	dd6f      	ble.n	8011214 <__gethex+0x32c>
 8011134:	1bed      	subs	r5, r5, r7
 8011136:	42ae      	cmp	r6, r5
 8011138:	dc34      	bgt.n	80111a4 <__gethex+0x2bc>
 801113a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801113e:	2b02      	cmp	r3, #2
 8011140:	d022      	beq.n	8011188 <__gethex+0x2a0>
 8011142:	2b03      	cmp	r3, #3
 8011144:	d024      	beq.n	8011190 <__gethex+0x2a8>
 8011146:	2b01      	cmp	r3, #1
 8011148:	d115      	bne.n	8011176 <__gethex+0x28e>
 801114a:	42ae      	cmp	r6, r5
 801114c:	d113      	bne.n	8011176 <__gethex+0x28e>
 801114e:	2e01      	cmp	r6, #1
 8011150:	d10b      	bne.n	801116a <__gethex+0x282>
 8011152:	9a02      	ldr	r2, [sp, #8]
 8011154:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011158:	6013      	str	r3, [r2, #0]
 801115a:	2301      	movs	r3, #1
 801115c:	6123      	str	r3, [r4, #16]
 801115e:	f8ca 3000 	str.w	r3, [sl]
 8011162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011164:	2562      	movs	r5, #98	@ 0x62
 8011166:	601c      	str	r4, [r3, #0]
 8011168:	e73a      	b.n	8010fe0 <__gethex+0xf8>
 801116a:	1e71      	subs	r1, r6, #1
 801116c:	4620      	mov	r0, r4
 801116e:	f000 fe25 	bl	8011dbc <__any_on>
 8011172:	2800      	cmp	r0, #0
 8011174:	d1ed      	bne.n	8011152 <__gethex+0x26a>
 8011176:	9801      	ldr	r0, [sp, #4]
 8011178:	4621      	mov	r1, r4
 801117a:	f000 f9d9 	bl	8011530 <_Bfree>
 801117e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011180:	2300      	movs	r3, #0
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	2550      	movs	r5, #80	@ 0x50
 8011186:	e72b      	b.n	8010fe0 <__gethex+0xf8>
 8011188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801118a:	2b00      	cmp	r3, #0
 801118c:	d1f3      	bne.n	8011176 <__gethex+0x28e>
 801118e:	e7e0      	b.n	8011152 <__gethex+0x26a>
 8011190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011192:	2b00      	cmp	r3, #0
 8011194:	d1dd      	bne.n	8011152 <__gethex+0x26a>
 8011196:	e7ee      	b.n	8011176 <__gethex+0x28e>
 8011198:	08013220 	.word	0x08013220
 801119c:	080132dd 	.word	0x080132dd
 80111a0:	080132ee 	.word	0x080132ee
 80111a4:	1e6f      	subs	r7, r5, #1
 80111a6:	f1b9 0f00 	cmp.w	r9, #0
 80111aa:	d130      	bne.n	801120e <__gethex+0x326>
 80111ac:	b127      	cbz	r7, 80111b8 <__gethex+0x2d0>
 80111ae:	4639      	mov	r1, r7
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fe03 	bl	8011dbc <__any_on>
 80111b6:	4681      	mov	r9, r0
 80111b8:	117a      	asrs	r2, r7, #5
 80111ba:	2301      	movs	r3, #1
 80111bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80111c0:	f007 071f 	and.w	r7, r7, #31
 80111c4:	40bb      	lsls	r3, r7
 80111c6:	4213      	tst	r3, r2
 80111c8:	4629      	mov	r1, r5
 80111ca:	4620      	mov	r0, r4
 80111cc:	bf18      	it	ne
 80111ce:	f049 0902 	orrne.w	r9, r9, #2
 80111d2:	f7ff fe21 	bl	8010e18 <rshift>
 80111d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111da:	1b76      	subs	r6, r6, r5
 80111dc:	2502      	movs	r5, #2
 80111de:	f1b9 0f00 	cmp.w	r9, #0
 80111e2:	d047      	beq.n	8011274 <__gethex+0x38c>
 80111e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111e8:	2b02      	cmp	r3, #2
 80111ea:	d015      	beq.n	8011218 <__gethex+0x330>
 80111ec:	2b03      	cmp	r3, #3
 80111ee:	d017      	beq.n	8011220 <__gethex+0x338>
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d109      	bne.n	8011208 <__gethex+0x320>
 80111f4:	f019 0f02 	tst.w	r9, #2
 80111f8:	d006      	beq.n	8011208 <__gethex+0x320>
 80111fa:	f8da 3000 	ldr.w	r3, [sl]
 80111fe:	ea49 0903 	orr.w	r9, r9, r3
 8011202:	f019 0f01 	tst.w	r9, #1
 8011206:	d10e      	bne.n	8011226 <__gethex+0x33e>
 8011208:	f045 0510 	orr.w	r5, r5, #16
 801120c:	e032      	b.n	8011274 <__gethex+0x38c>
 801120e:	f04f 0901 	mov.w	r9, #1
 8011212:	e7d1      	b.n	80111b8 <__gethex+0x2d0>
 8011214:	2501      	movs	r5, #1
 8011216:	e7e2      	b.n	80111de <__gethex+0x2f6>
 8011218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801121a:	f1c3 0301 	rsb	r3, r3, #1
 801121e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011222:	2b00      	cmp	r3, #0
 8011224:	d0f0      	beq.n	8011208 <__gethex+0x320>
 8011226:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801122a:	f104 0314 	add.w	r3, r4, #20
 801122e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011232:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011236:	f04f 0c00 	mov.w	ip, #0
 801123a:	4618      	mov	r0, r3
 801123c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011240:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011244:	d01b      	beq.n	801127e <__gethex+0x396>
 8011246:	3201      	adds	r2, #1
 8011248:	6002      	str	r2, [r0, #0]
 801124a:	2d02      	cmp	r5, #2
 801124c:	f104 0314 	add.w	r3, r4, #20
 8011250:	d13c      	bne.n	80112cc <__gethex+0x3e4>
 8011252:	f8d8 2000 	ldr.w	r2, [r8]
 8011256:	3a01      	subs	r2, #1
 8011258:	42b2      	cmp	r2, r6
 801125a:	d109      	bne.n	8011270 <__gethex+0x388>
 801125c:	1171      	asrs	r1, r6, #5
 801125e:	2201      	movs	r2, #1
 8011260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011264:	f006 061f 	and.w	r6, r6, #31
 8011268:	fa02 f606 	lsl.w	r6, r2, r6
 801126c:	421e      	tst	r6, r3
 801126e:	d13a      	bne.n	80112e6 <__gethex+0x3fe>
 8011270:	f045 0520 	orr.w	r5, r5, #32
 8011274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011276:	601c      	str	r4, [r3, #0]
 8011278:	9b02      	ldr	r3, [sp, #8]
 801127a:	601f      	str	r7, [r3, #0]
 801127c:	e6b0      	b.n	8010fe0 <__gethex+0xf8>
 801127e:	4299      	cmp	r1, r3
 8011280:	f843 cc04 	str.w	ip, [r3, #-4]
 8011284:	d8d9      	bhi.n	801123a <__gethex+0x352>
 8011286:	68a3      	ldr	r3, [r4, #8]
 8011288:	459b      	cmp	fp, r3
 801128a:	db17      	blt.n	80112bc <__gethex+0x3d4>
 801128c:	6861      	ldr	r1, [r4, #4]
 801128e:	9801      	ldr	r0, [sp, #4]
 8011290:	3101      	adds	r1, #1
 8011292:	f000 f90d 	bl	80114b0 <_Balloc>
 8011296:	4681      	mov	r9, r0
 8011298:	b918      	cbnz	r0, 80112a2 <__gethex+0x3ba>
 801129a:	4b1a      	ldr	r3, [pc, #104]	@ (8011304 <__gethex+0x41c>)
 801129c:	4602      	mov	r2, r0
 801129e:	2184      	movs	r1, #132	@ 0x84
 80112a0:	e6c5      	b.n	801102e <__gethex+0x146>
 80112a2:	6922      	ldr	r2, [r4, #16]
 80112a4:	3202      	adds	r2, #2
 80112a6:	f104 010c 	add.w	r1, r4, #12
 80112aa:	0092      	lsls	r2, r2, #2
 80112ac:	300c      	adds	r0, #12
 80112ae:	f7fe ff62 	bl	8010176 <memcpy>
 80112b2:	4621      	mov	r1, r4
 80112b4:	9801      	ldr	r0, [sp, #4]
 80112b6:	f000 f93b 	bl	8011530 <_Bfree>
 80112ba:	464c      	mov	r4, r9
 80112bc:	6923      	ldr	r3, [r4, #16]
 80112be:	1c5a      	adds	r2, r3, #1
 80112c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112c4:	6122      	str	r2, [r4, #16]
 80112c6:	2201      	movs	r2, #1
 80112c8:	615a      	str	r2, [r3, #20]
 80112ca:	e7be      	b.n	801124a <__gethex+0x362>
 80112cc:	6922      	ldr	r2, [r4, #16]
 80112ce:	455a      	cmp	r2, fp
 80112d0:	dd0b      	ble.n	80112ea <__gethex+0x402>
 80112d2:	2101      	movs	r1, #1
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7ff fd9f 	bl	8010e18 <rshift>
 80112da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112de:	3701      	adds	r7, #1
 80112e0:	42bb      	cmp	r3, r7
 80112e2:	f6ff aee0 	blt.w	80110a6 <__gethex+0x1be>
 80112e6:	2501      	movs	r5, #1
 80112e8:	e7c2      	b.n	8011270 <__gethex+0x388>
 80112ea:	f016 061f 	ands.w	r6, r6, #31
 80112ee:	d0fa      	beq.n	80112e6 <__gethex+0x3fe>
 80112f0:	4453      	add	r3, sl
 80112f2:	f1c6 0620 	rsb	r6, r6, #32
 80112f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112fa:	f000 f9cb 	bl	8011694 <__hi0bits>
 80112fe:	42b0      	cmp	r0, r6
 8011300:	dbe7      	blt.n	80112d2 <__gethex+0x3ea>
 8011302:	e7f0      	b.n	80112e6 <__gethex+0x3fe>
 8011304:	080132dd 	.word	0x080132dd

08011308 <L_shift>:
 8011308:	f1c2 0208 	rsb	r2, r2, #8
 801130c:	0092      	lsls	r2, r2, #2
 801130e:	b570      	push	{r4, r5, r6, lr}
 8011310:	f1c2 0620 	rsb	r6, r2, #32
 8011314:	6843      	ldr	r3, [r0, #4]
 8011316:	6804      	ldr	r4, [r0, #0]
 8011318:	fa03 f506 	lsl.w	r5, r3, r6
 801131c:	432c      	orrs	r4, r5
 801131e:	40d3      	lsrs	r3, r2
 8011320:	6004      	str	r4, [r0, #0]
 8011322:	f840 3f04 	str.w	r3, [r0, #4]!
 8011326:	4288      	cmp	r0, r1
 8011328:	d3f4      	bcc.n	8011314 <L_shift+0xc>
 801132a:	bd70      	pop	{r4, r5, r6, pc}

0801132c <__match>:
 801132c:	b530      	push	{r4, r5, lr}
 801132e:	6803      	ldr	r3, [r0, #0]
 8011330:	3301      	adds	r3, #1
 8011332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011336:	b914      	cbnz	r4, 801133e <__match+0x12>
 8011338:	6003      	str	r3, [r0, #0]
 801133a:	2001      	movs	r0, #1
 801133c:	bd30      	pop	{r4, r5, pc}
 801133e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011342:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011346:	2d19      	cmp	r5, #25
 8011348:	bf98      	it	ls
 801134a:	3220      	addls	r2, #32
 801134c:	42a2      	cmp	r2, r4
 801134e:	d0f0      	beq.n	8011332 <__match+0x6>
 8011350:	2000      	movs	r0, #0
 8011352:	e7f3      	b.n	801133c <__match+0x10>

08011354 <__hexnan>:
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	680b      	ldr	r3, [r1, #0]
 801135a:	6801      	ldr	r1, [r0, #0]
 801135c:	115e      	asrs	r6, r3, #5
 801135e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011362:	f013 031f 	ands.w	r3, r3, #31
 8011366:	b087      	sub	sp, #28
 8011368:	bf18      	it	ne
 801136a:	3604      	addne	r6, #4
 801136c:	2500      	movs	r5, #0
 801136e:	1f37      	subs	r7, r6, #4
 8011370:	4682      	mov	sl, r0
 8011372:	4690      	mov	r8, r2
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	f846 5c04 	str.w	r5, [r6, #-4]
 801137a:	46b9      	mov	r9, r7
 801137c:	463c      	mov	r4, r7
 801137e:	9502      	str	r5, [sp, #8]
 8011380:	46ab      	mov	fp, r5
 8011382:	784a      	ldrb	r2, [r1, #1]
 8011384:	1c4b      	adds	r3, r1, #1
 8011386:	9303      	str	r3, [sp, #12]
 8011388:	b342      	cbz	r2, 80113dc <__hexnan+0x88>
 801138a:	4610      	mov	r0, r2
 801138c:	9105      	str	r1, [sp, #20]
 801138e:	9204      	str	r2, [sp, #16]
 8011390:	f7ff fd94 	bl	8010ebc <__hexdig_fun>
 8011394:	2800      	cmp	r0, #0
 8011396:	d151      	bne.n	801143c <__hexnan+0xe8>
 8011398:	9a04      	ldr	r2, [sp, #16]
 801139a:	9905      	ldr	r1, [sp, #20]
 801139c:	2a20      	cmp	r2, #32
 801139e:	d818      	bhi.n	80113d2 <__hexnan+0x7e>
 80113a0:	9b02      	ldr	r3, [sp, #8]
 80113a2:	459b      	cmp	fp, r3
 80113a4:	dd13      	ble.n	80113ce <__hexnan+0x7a>
 80113a6:	454c      	cmp	r4, r9
 80113a8:	d206      	bcs.n	80113b8 <__hexnan+0x64>
 80113aa:	2d07      	cmp	r5, #7
 80113ac:	dc04      	bgt.n	80113b8 <__hexnan+0x64>
 80113ae:	462a      	mov	r2, r5
 80113b0:	4649      	mov	r1, r9
 80113b2:	4620      	mov	r0, r4
 80113b4:	f7ff ffa8 	bl	8011308 <L_shift>
 80113b8:	4544      	cmp	r4, r8
 80113ba:	d952      	bls.n	8011462 <__hexnan+0x10e>
 80113bc:	2300      	movs	r3, #0
 80113be:	f1a4 0904 	sub.w	r9, r4, #4
 80113c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80113c6:	f8cd b008 	str.w	fp, [sp, #8]
 80113ca:	464c      	mov	r4, r9
 80113cc:	461d      	mov	r5, r3
 80113ce:	9903      	ldr	r1, [sp, #12]
 80113d0:	e7d7      	b.n	8011382 <__hexnan+0x2e>
 80113d2:	2a29      	cmp	r2, #41	@ 0x29
 80113d4:	d157      	bne.n	8011486 <__hexnan+0x132>
 80113d6:	3102      	adds	r1, #2
 80113d8:	f8ca 1000 	str.w	r1, [sl]
 80113dc:	f1bb 0f00 	cmp.w	fp, #0
 80113e0:	d051      	beq.n	8011486 <__hexnan+0x132>
 80113e2:	454c      	cmp	r4, r9
 80113e4:	d206      	bcs.n	80113f4 <__hexnan+0xa0>
 80113e6:	2d07      	cmp	r5, #7
 80113e8:	dc04      	bgt.n	80113f4 <__hexnan+0xa0>
 80113ea:	462a      	mov	r2, r5
 80113ec:	4649      	mov	r1, r9
 80113ee:	4620      	mov	r0, r4
 80113f0:	f7ff ff8a 	bl	8011308 <L_shift>
 80113f4:	4544      	cmp	r4, r8
 80113f6:	d936      	bls.n	8011466 <__hexnan+0x112>
 80113f8:	f1a8 0204 	sub.w	r2, r8, #4
 80113fc:	4623      	mov	r3, r4
 80113fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8011402:	f842 1f04 	str.w	r1, [r2, #4]!
 8011406:	429f      	cmp	r7, r3
 8011408:	d2f9      	bcs.n	80113fe <__hexnan+0xaa>
 801140a:	1b3b      	subs	r3, r7, r4
 801140c:	f023 0303 	bic.w	r3, r3, #3
 8011410:	3304      	adds	r3, #4
 8011412:	3401      	adds	r4, #1
 8011414:	3e03      	subs	r6, #3
 8011416:	42b4      	cmp	r4, r6
 8011418:	bf88      	it	hi
 801141a:	2304      	movhi	r3, #4
 801141c:	4443      	add	r3, r8
 801141e:	2200      	movs	r2, #0
 8011420:	f843 2b04 	str.w	r2, [r3], #4
 8011424:	429f      	cmp	r7, r3
 8011426:	d2fb      	bcs.n	8011420 <__hexnan+0xcc>
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	b91b      	cbnz	r3, 8011434 <__hexnan+0xe0>
 801142c:	4547      	cmp	r7, r8
 801142e:	d128      	bne.n	8011482 <__hexnan+0x12e>
 8011430:	2301      	movs	r3, #1
 8011432:	603b      	str	r3, [r7, #0]
 8011434:	2005      	movs	r0, #5
 8011436:	b007      	add	sp, #28
 8011438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143c:	3501      	adds	r5, #1
 801143e:	2d08      	cmp	r5, #8
 8011440:	f10b 0b01 	add.w	fp, fp, #1
 8011444:	dd06      	ble.n	8011454 <__hexnan+0x100>
 8011446:	4544      	cmp	r4, r8
 8011448:	d9c1      	bls.n	80113ce <__hexnan+0x7a>
 801144a:	2300      	movs	r3, #0
 801144c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011450:	2501      	movs	r5, #1
 8011452:	3c04      	subs	r4, #4
 8011454:	6822      	ldr	r2, [r4, #0]
 8011456:	f000 000f 	and.w	r0, r0, #15
 801145a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801145e:	6020      	str	r0, [r4, #0]
 8011460:	e7b5      	b.n	80113ce <__hexnan+0x7a>
 8011462:	2508      	movs	r5, #8
 8011464:	e7b3      	b.n	80113ce <__hexnan+0x7a>
 8011466:	9b01      	ldr	r3, [sp, #4]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d0dd      	beq.n	8011428 <__hexnan+0xd4>
 801146c:	f1c3 0320 	rsb	r3, r3, #32
 8011470:	f04f 32ff 	mov.w	r2, #4294967295
 8011474:	40da      	lsrs	r2, r3
 8011476:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801147a:	4013      	ands	r3, r2
 801147c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011480:	e7d2      	b.n	8011428 <__hexnan+0xd4>
 8011482:	3f04      	subs	r7, #4
 8011484:	e7d0      	b.n	8011428 <__hexnan+0xd4>
 8011486:	2004      	movs	r0, #4
 8011488:	e7d5      	b.n	8011436 <__hexnan+0xe2>

0801148a <__ascii_mbtowc>:
 801148a:	b082      	sub	sp, #8
 801148c:	b901      	cbnz	r1, 8011490 <__ascii_mbtowc+0x6>
 801148e:	a901      	add	r1, sp, #4
 8011490:	b142      	cbz	r2, 80114a4 <__ascii_mbtowc+0x1a>
 8011492:	b14b      	cbz	r3, 80114a8 <__ascii_mbtowc+0x1e>
 8011494:	7813      	ldrb	r3, [r2, #0]
 8011496:	600b      	str	r3, [r1, #0]
 8011498:	7812      	ldrb	r2, [r2, #0]
 801149a:	1e10      	subs	r0, r2, #0
 801149c:	bf18      	it	ne
 801149e:	2001      	movne	r0, #1
 80114a0:	b002      	add	sp, #8
 80114a2:	4770      	bx	lr
 80114a4:	4610      	mov	r0, r2
 80114a6:	e7fb      	b.n	80114a0 <__ascii_mbtowc+0x16>
 80114a8:	f06f 0001 	mvn.w	r0, #1
 80114ac:	e7f8      	b.n	80114a0 <__ascii_mbtowc+0x16>
	...

080114b0 <_Balloc>:
 80114b0:	b570      	push	{r4, r5, r6, lr}
 80114b2:	69c6      	ldr	r6, [r0, #28]
 80114b4:	4604      	mov	r4, r0
 80114b6:	460d      	mov	r5, r1
 80114b8:	b976      	cbnz	r6, 80114d8 <_Balloc+0x28>
 80114ba:	2010      	movs	r0, #16
 80114bc:	f7fc fe74 	bl	800e1a8 <malloc>
 80114c0:	4602      	mov	r2, r0
 80114c2:	61e0      	str	r0, [r4, #28]
 80114c4:	b920      	cbnz	r0, 80114d0 <_Balloc+0x20>
 80114c6:	4b18      	ldr	r3, [pc, #96]	@ (8011528 <_Balloc+0x78>)
 80114c8:	4818      	ldr	r0, [pc, #96]	@ (801152c <_Balloc+0x7c>)
 80114ca:	216b      	movs	r1, #107	@ 0x6b
 80114cc:	f001 fc9e 	bl	8012e0c <__assert_func>
 80114d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114d4:	6006      	str	r6, [r0, #0]
 80114d6:	60c6      	str	r6, [r0, #12]
 80114d8:	69e6      	ldr	r6, [r4, #28]
 80114da:	68f3      	ldr	r3, [r6, #12]
 80114dc:	b183      	cbz	r3, 8011500 <_Balloc+0x50>
 80114de:	69e3      	ldr	r3, [r4, #28]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114e6:	b9b8      	cbnz	r0, 8011518 <_Balloc+0x68>
 80114e8:	2101      	movs	r1, #1
 80114ea:	fa01 f605 	lsl.w	r6, r1, r5
 80114ee:	1d72      	adds	r2, r6, #5
 80114f0:	0092      	lsls	r2, r2, #2
 80114f2:	4620      	mov	r0, r4
 80114f4:	f001 fca8 	bl	8012e48 <_calloc_r>
 80114f8:	b160      	cbz	r0, 8011514 <_Balloc+0x64>
 80114fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114fe:	e00e      	b.n	801151e <_Balloc+0x6e>
 8011500:	2221      	movs	r2, #33	@ 0x21
 8011502:	2104      	movs	r1, #4
 8011504:	4620      	mov	r0, r4
 8011506:	f001 fc9f 	bl	8012e48 <_calloc_r>
 801150a:	69e3      	ldr	r3, [r4, #28]
 801150c:	60f0      	str	r0, [r6, #12]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d1e4      	bne.n	80114de <_Balloc+0x2e>
 8011514:	2000      	movs	r0, #0
 8011516:	bd70      	pop	{r4, r5, r6, pc}
 8011518:	6802      	ldr	r2, [r0, #0]
 801151a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801151e:	2300      	movs	r3, #0
 8011520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011524:	e7f7      	b.n	8011516 <_Balloc+0x66>
 8011526:	bf00      	nop
 8011528:	0801326e 	.word	0x0801326e
 801152c:	0801334e 	.word	0x0801334e

08011530 <_Bfree>:
 8011530:	b570      	push	{r4, r5, r6, lr}
 8011532:	69c6      	ldr	r6, [r0, #28]
 8011534:	4605      	mov	r5, r0
 8011536:	460c      	mov	r4, r1
 8011538:	b976      	cbnz	r6, 8011558 <_Bfree+0x28>
 801153a:	2010      	movs	r0, #16
 801153c:	f7fc fe34 	bl	800e1a8 <malloc>
 8011540:	4602      	mov	r2, r0
 8011542:	61e8      	str	r0, [r5, #28]
 8011544:	b920      	cbnz	r0, 8011550 <_Bfree+0x20>
 8011546:	4b09      	ldr	r3, [pc, #36]	@ (801156c <_Bfree+0x3c>)
 8011548:	4809      	ldr	r0, [pc, #36]	@ (8011570 <_Bfree+0x40>)
 801154a:	218f      	movs	r1, #143	@ 0x8f
 801154c:	f001 fc5e 	bl	8012e0c <__assert_func>
 8011550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011554:	6006      	str	r6, [r0, #0]
 8011556:	60c6      	str	r6, [r0, #12]
 8011558:	b13c      	cbz	r4, 801156a <_Bfree+0x3a>
 801155a:	69eb      	ldr	r3, [r5, #28]
 801155c:	6862      	ldr	r2, [r4, #4]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011564:	6021      	str	r1, [r4, #0]
 8011566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801156a:	bd70      	pop	{r4, r5, r6, pc}
 801156c:	0801326e 	.word	0x0801326e
 8011570:	0801334e 	.word	0x0801334e

08011574 <__multadd>:
 8011574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011578:	690d      	ldr	r5, [r1, #16]
 801157a:	4607      	mov	r7, r0
 801157c:	460c      	mov	r4, r1
 801157e:	461e      	mov	r6, r3
 8011580:	f101 0c14 	add.w	ip, r1, #20
 8011584:	2000      	movs	r0, #0
 8011586:	f8dc 3000 	ldr.w	r3, [ip]
 801158a:	b299      	uxth	r1, r3
 801158c:	fb02 6101 	mla	r1, r2, r1, r6
 8011590:	0c1e      	lsrs	r6, r3, #16
 8011592:	0c0b      	lsrs	r3, r1, #16
 8011594:	fb02 3306 	mla	r3, r2, r6, r3
 8011598:	b289      	uxth	r1, r1
 801159a:	3001      	adds	r0, #1
 801159c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115a0:	4285      	cmp	r5, r0
 80115a2:	f84c 1b04 	str.w	r1, [ip], #4
 80115a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115aa:	dcec      	bgt.n	8011586 <__multadd+0x12>
 80115ac:	b30e      	cbz	r6, 80115f2 <__multadd+0x7e>
 80115ae:	68a3      	ldr	r3, [r4, #8]
 80115b0:	42ab      	cmp	r3, r5
 80115b2:	dc19      	bgt.n	80115e8 <__multadd+0x74>
 80115b4:	6861      	ldr	r1, [r4, #4]
 80115b6:	4638      	mov	r0, r7
 80115b8:	3101      	adds	r1, #1
 80115ba:	f7ff ff79 	bl	80114b0 <_Balloc>
 80115be:	4680      	mov	r8, r0
 80115c0:	b928      	cbnz	r0, 80115ce <__multadd+0x5a>
 80115c2:	4602      	mov	r2, r0
 80115c4:	4b0c      	ldr	r3, [pc, #48]	@ (80115f8 <__multadd+0x84>)
 80115c6:	480d      	ldr	r0, [pc, #52]	@ (80115fc <__multadd+0x88>)
 80115c8:	21ba      	movs	r1, #186	@ 0xba
 80115ca:	f001 fc1f 	bl	8012e0c <__assert_func>
 80115ce:	6922      	ldr	r2, [r4, #16]
 80115d0:	3202      	adds	r2, #2
 80115d2:	f104 010c 	add.w	r1, r4, #12
 80115d6:	0092      	lsls	r2, r2, #2
 80115d8:	300c      	adds	r0, #12
 80115da:	f7fe fdcc 	bl	8010176 <memcpy>
 80115de:	4621      	mov	r1, r4
 80115e0:	4638      	mov	r0, r7
 80115e2:	f7ff ffa5 	bl	8011530 <_Bfree>
 80115e6:	4644      	mov	r4, r8
 80115e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115ec:	3501      	adds	r5, #1
 80115ee:	615e      	str	r6, [r3, #20]
 80115f0:	6125      	str	r5, [r4, #16]
 80115f2:	4620      	mov	r0, r4
 80115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f8:	080132dd 	.word	0x080132dd
 80115fc:	0801334e 	.word	0x0801334e

08011600 <__s2b>:
 8011600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011604:	460c      	mov	r4, r1
 8011606:	4615      	mov	r5, r2
 8011608:	461f      	mov	r7, r3
 801160a:	2209      	movs	r2, #9
 801160c:	3308      	adds	r3, #8
 801160e:	4606      	mov	r6, r0
 8011610:	fb93 f3f2 	sdiv	r3, r3, r2
 8011614:	2100      	movs	r1, #0
 8011616:	2201      	movs	r2, #1
 8011618:	429a      	cmp	r2, r3
 801161a:	db09      	blt.n	8011630 <__s2b+0x30>
 801161c:	4630      	mov	r0, r6
 801161e:	f7ff ff47 	bl	80114b0 <_Balloc>
 8011622:	b940      	cbnz	r0, 8011636 <__s2b+0x36>
 8011624:	4602      	mov	r2, r0
 8011626:	4b19      	ldr	r3, [pc, #100]	@ (801168c <__s2b+0x8c>)
 8011628:	4819      	ldr	r0, [pc, #100]	@ (8011690 <__s2b+0x90>)
 801162a:	21d3      	movs	r1, #211	@ 0xd3
 801162c:	f001 fbee 	bl	8012e0c <__assert_func>
 8011630:	0052      	lsls	r2, r2, #1
 8011632:	3101      	adds	r1, #1
 8011634:	e7f0      	b.n	8011618 <__s2b+0x18>
 8011636:	9b08      	ldr	r3, [sp, #32]
 8011638:	6143      	str	r3, [r0, #20]
 801163a:	2d09      	cmp	r5, #9
 801163c:	f04f 0301 	mov.w	r3, #1
 8011640:	6103      	str	r3, [r0, #16]
 8011642:	dd16      	ble.n	8011672 <__s2b+0x72>
 8011644:	f104 0909 	add.w	r9, r4, #9
 8011648:	46c8      	mov	r8, r9
 801164a:	442c      	add	r4, r5
 801164c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011650:	4601      	mov	r1, r0
 8011652:	3b30      	subs	r3, #48	@ 0x30
 8011654:	220a      	movs	r2, #10
 8011656:	4630      	mov	r0, r6
 8011658:	f7ff ff8c 	bl	8011574 <__multadd>
 801165c:	45a0      	cmp	r8, r4
 801165e:	d1f5      	bne.n	801164c <__s2b+0x4c>
 8011660:	f1a5 0408 	sub.w	r4, r5, #8
 8011664:	444c      	add	r4, r9
 8011666:	1b2d      	subs	r5, r5, r4
 8011668:	1963      	adds	r3, r4, r5
 801166a:	42bb      	cmp	r3, r7
 801166c:	db04      	blt.n	8011678 <__s2b+0x78>
 801166e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011672:	340a      	adds	r4, #10
 8011674:	2509      	movs	r5, #9
 8011676:	e7f6      	b.n	8011666 <__s2b+0x66>
 8011678:	f814 3b01 	ldrb.w	r3, [r4], #1
 801167c:	4601      	mov	r1, r0
 801167e:	3b30      	subs	r3, #48	@ 0x30
 8011680:	220a      	movs	r2, #10
 8011682:	4630      	mov	r0, r6
 8011684:	f7ff ff76 	bl	8011574 <__multadd>
 8011688:	e7ee      	b.n	8011668 <__s2b+0x68>
 801168a:	bf00      	nop
 801168c:	080132dd 	.word	0x080132dd
 8011690:	0801334e 	.word	0x0801334e

08011694 <__hi0bits>:
 8011694:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011698:	4603      	mov	r3, r0
 801169a:	bf36      	itet	cc
 801169c:	0403      	lslcc	r3, r0, #16
 801169e:	2000      	movcs	r0, #0
 80116a0:	2010      	movcc	r0, #16
 80116a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116a6:	bf3c      	itt	cc
 80116a8:	021b      	lslcc	r3, r3, #8
 80116aa:	3008      	addcc	r0, #8
 80116ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116b0:	bf3c      	itt	cc
 80116b2:	011b      	lslcc	r3, r3, #4
 80116b4:	3004      	addcc	r0, #4
 80116b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116ba:	bf3c      	itt	cc
 80116bc:	009b      	lslcc	r3, r3, #2
 80116be:	3002      	addcc	r0, #2
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	db05      	blt.n	80116d0 <__hi0bits+0x3c>
 80116c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116c8:	f100 0001 	add.w	r0, r0, #1
 80116cc:	bf08      	it	eq
 80116ce:	2020      	moveq	r0, #32
 80116d0:	4770      	bx	lr

080116d2 <__lo0bits>:
 80116d2:	6803      	ldr	r3, [r0, #0]
 80116d4:	4602      	mov	r2, r0
 80116d6:	f013 0007 	ands.w	r0, r3, #7
 80116da:	d00b      	beq.n	80116f4 <__lo0bits+0x22>
 80116dc:	07d9      	lsls	r1, r3, #31
 80116de:	d421      	bmi.n	8011724 <__lo0bits+0x52>
 80116e0:	0798      	lsls	r0, r3, #30
 80116e2:	bf49      	itett	mi
 80116e4:	085b      	lsrmi	r3, r3, #1
 80116e6:	089b      	lsrpl	r3, r3, #2
 80116e8:	2001      	movmi	r0, #1
 80116ea:	6013      	strmi	r3, [r2, #0]
 80116ec:	bf5c      	itt	pl
 80116ee:	6013      	strpl	r3, [r2, #0]
 80116f0:	2002      	movpl	r0, #2
 80116f2:	4770      	bx	lr
 80116f4:	b299      	uxth	r1, r3
 80116f6:	b909      	cbnz	r1, 80116fc <__lo0bits+0x2a>
 80116f8:	0c1b      	lsrs	r3, r3, #16
 80116fa:	2010      	movs	r0, #16
 80116fc:	b2d9      	uxtb	r1, r3
 80116fe:	b909      	cbnz	r1, 8011704 <__lo0bits+0x32>
 8011700:	3008      	adds	r0, #8
 8011702:	0a1b      	lsrs	r3, r3, #8
 8011704:	0719      	lsls	r1, r3, #28
 8011706:	bf04      	itt	eq
 8011708:	091b      	lsreq	r3, r3, #4
 801170a:	3004      	addeq	r0, #4
 801170c:	0799      	lsls	r1, r3, #30
 801170e:	bf04      	itt	eq
 8011710:	089b      	lsreq	r3, r3, #2
 8011712:	3002      	addeq	r0, #2
 8011714:	07d9      	lsls	r1, r3, #31
 8011716:	d403      	bmi.n	8011720 <__lo0bits+0x4e>
 8011718:	085b      	lsrs	r3, r3, #1
 801171a:	f100 0001 	add.w	r0, r0, #1
 801171e:	d003      	beq.n	8011728 <__lo0bits+0x56>
 8011720:	6013      	str	r3, [r2, #0]
 8011722:	4770      	bx	lr
 8011724:	2000      	movs	r0, #0
 8011726:	4770      	bx	lr
 8011728:	2020      	movs	r0, #32
 801172a:	4770      	bx	lr

0801172c <__i2b>:
 801172c:	b510      	push	{r4, lr}
 801172e:	460c      	mov	r4, r1
 8011730:	2101      	movs	r1, #1
 8011732:	f7ff febd 	bl	80114b0 <_Balloc>
 8011736:	4602      	mov	r2, r0
 8011738:	b928      	cbnz	r0, 8011746 <__i2b+0x1a>
 801173a:	4b05      	ldr	r3, [pc, #20]	@ (8011750 <__i2b+0x24>)
 801173c:	4805      	ldr	r0, [pc, #20]	@ (8011754 <__i2b+0x28>)
 801173e:	f240 1145 	movw	r1, #325	@ 0x145
 8011742:	f001 fb63 	bl	8012e0c <__assert_func>
 8011746:	2301      	movs	r3, #1
 8011748:	6144      	str	r4, [r0, #20]
 801174a:	6103      	str	r3, [r0, #16]
 801174c:	bd10      	pop	{r4, pc}
 801174e:	bf00      	nop
 8011750:	080132dd 	.word	0x080132dd
 8011754:	0801334e 	.word	0x0801334e

08011758 <__multiply>:
 8011758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	4617      	mov	r7, r2
 801175e:	690a      	ldr	r2, [r1, #16]
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	429a      	cmp	r2, r3
 8011764:	bfa8      	it	ge
 8011766:	463b      	movge	r3, r7
 8011768:	4689      	mov	r9, r1
 801176a:	bfa4      	itt	ge
 801176c:	460f      	movge	r7, r1
 801176e:	4699      	movge	r9, r3
 8011770:	693d      	ldr	r5, [r7, #16]
 8011772:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	6879      	ldr	r1, [r7, #4]
 801177a:	eb05 060a 	add.w	r6, r5, sl
 801177e:	42b3      	cmp	r3, r6
 8011780:	b085      	sub	sp, #20
 8011782:	bfb8      	it	lt
 8011784:	3101      	addlt	r1, #1
 8011786:	f7ff fe93 	bl	80114b0 <_Balloc>
 801178a:	b930      	cbnz	r0, 801179a <__multiply+0x42>
 801178c:	4602      	mov	r2, r0
 801178e:	4b41      	ldr	r3, [pc, #260]	@ (8011894 <__multiply+0x13c>)
 8011790:	4841      	ldr	r0, [pc, #260]	@ (8011898 <__multiply+0x140>)
 8011792:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011796:	f001 fb39 	bl	8012e0c <__assert_func>
 801179a:	f100 0414 	add.w	r4, r0, #20
 801179e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80117a2:	4623      	mov	r3, r4
 80117a4:	2200      	movs	r2, #0
 80117a6:	4573      	cmp	r3, lr
 80117a8:	d320      	bcc.n	80117ec <__multiply+0x94>
 80117aa:	f107 0814 	add.w	r8, r7, #20
 80117ae:	f109 0114 	add.w	r1, r9, #20
 80117b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80117b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80117ba:	9302      	str	r3, [sp, #8]
 80117bc:	1beb      	subs	r3, r5, r7
 80117be:	3b15      	subs	r3, #21
 80117c0:	f023 0303 	bic.w	r3, r3, #3
 80117c4:	3304      	adds	r3, #4
 80117c6:	3715      	adds	r7, #21
 80117c8:	42bd      	cmp	r5, r7
 80117ca:	bf38      	it	cc
 80117cc:	2304      	movcc	r3, #4
 80117ce:	9301      	str	r3, [sp, #4]
 80117d0:	9b02      	ldr	r3, [sp, #8]
 80117d2:	9103      	str	r1, [sp, #12]
 80117d4:	428b      	cmp	r3, r1
 80117d6:	d80c      	bhi.n	80117f2 <__multiply+0x9a>
 80117d8:	2e00      	cmp	r6, #0
 80117da:	dd03      	ble.n	80117e4 <__multiply+0x8c>
 80117dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d055      	beq.n	8011890 <__multiply+0x138>
 80117e4:	6106      	str	r6, [r0, #16]
 80117e6:	b005      	add	sp, #20
 80117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ec:	f843 2b04 	str.w	r2, [r3], #4
 80117f0:	e7d9      	b.n	80117a6 <__multiply+0x4e>
 80117f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80117f6:	f1ba 0f00 	cmp.w	sl, #0
 80117fa:	d01f      	beq.n	801183c <__multiply+0xe4>
 80117fc:	46c4      	mov	ip, r8
 80117fe:	46a1      	mov	r9, r4
 8011800:	2700      	movs	r7, #0
 8011802:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011806:	f8d9 3000 	ldr.w	r3, [r9]
 801180a:	fa1f fb82 	uxth.w	fp, r2
 801180e:	b29b      	uxth	r3, r3
 8011810:	fb0a 330b 	mla	r3, sl, fp, r3
 8011814:	443b      	add	r3, r7
 8011816:	f8d9 7000 	ldr.w	r7, [r9]
 801181a:	0c12      	lsrs	r2, r2, #16
 801181c:	0c3f      	lsrs	r7, r7, #16
 801181e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011822:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011826:	b29b      	uxth	r3, r3
 8011828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801182c:	4565      	cmp	r5, ip
 801182e:	f849 3b04 	str.w	r3, [r9], #4
 8011832:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011836:	d8e4      	bhi.n	8011802 <__multiply+0xaa>
 8011838:	9b01      	ldr	r3, [sp, #4]
 801183a:	50e7      	str	r7, [r4, r3]
 801183c:	9b03      	ldr	r3, [sp, #12]
 801183e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011842:	3104      	adds	r1, #4
 8011844:	f1b9 0f00 	cmp.w	r9, #0
 8011848:	d020      	beq.n	801188c <__multiply+0x134>
 801184a:	6823      	ldr	r3, [r4, #0]
 801184c:	4647      	mov	r7, r8
 801184e:	46a4      	mov	ip, r4
 8011850:	f04f 0a00 	mov.w	sl, #0
 8011854:	f8b7 b000 	ldrh.w	fp, [r7]
 8011858:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801185c:	fb09 220b 	mla	r2, r9, fp, r2
 8011860:	4452      	add	r2, sl
 8011862:	b29b      	uxth	r3, r3
 8011864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011868:	f84c 3b04 	str.w	r3, [ip], #4
 801186c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011874:	f8bc 3000 	ldrh.w	r3, [ip]
 8011878:	fb09 330a 	mla	r3, r9, sl, r3
 801187c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011880:	42bd      	cmp	r5, r7
 8011882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011886:	d8e5      	bhi.n	8011854 <__multiply+0xfc>
 8011888:	9a01      	ldr	r2, [sp, #4]
 801188a:	50a3      	str	r3, [r4, r2]
 801188c:	3404      	adds	r4, #4
 801188e:	e79f      	b.n	80117d0 <__multiply+0x78>
 8011890:	3e01      	subs	r6, #1
 8011892:	e7a1      	b.n	80117d8 <__multiply+0x80>
 8011894:	080132dd 	.word	0x080132dd
 8011898:	0801334e 	.word	0x0801334e

0801189c <__pow5mult>:
 801189c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	4615      	mov	r5, r2
 80118a2:	f012 0203 	ands.w	r2, r2, #3
 80118a6:	4607      	mov	r7, r0
 80118a8:	460e      	mov	r6, r1
 80118aa:	d007      	beq.n	80118bc <__pow5mult+0x20>
 80118ac:	4c25      	ldr	r4, [pc, #148]	@ (8011944 <__pow5mult+0xa8>)
 80118ae:	3a01      	subs	r2, #1
 80118b0:	2300      	movs	r3, #0
 80118b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118b6:	f7ff fe5d 	bl	8011574 <__multadd>
 80118ba:	4606      	mov	r6, r0
 80118bc:	10ad      	asrs	r5, r5, #2
 80118be:	d03d      	beq.n	801193c <__pow5mult+0xa0>
 80118c0:	69fc      	ldr	r4, [r7, #28]
 80118c2:	b97c      	cbnz	r4, 80118e4 <__pow5mult+0x48>
 80118c4:	2010      	movs	r0, #16
 80118c6:	f7fc fc6f 	bl	800e1a8 <malloc>
 80118ca:	4602      	mov	r2, r0
 80118cc:	61f8      	str	r0, [r7, #28]
 80118ce:	b928      	cbnz	r0, 80118dc <__pow5mult+0x40>
 80118d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011948 <__pow5mult+0xac>)
 80118d2:	481e      	ldr	r0, [pc, #120]	@ (801194c <__pow5mult+0xb0>)
 80118d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118d8:	f001 fa98 	bl	8012e0c <__assert_func>
 80118dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118e0:	6004      	str	r4, [r0, #0]
 80118e2:	60c4      	str	r4, [r0, #12]
 80118e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80118e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118ec:	b94c      	cbnz	r4, 8011902 <__pow5mult+0x66>
 80118ee:	f240 2171 	movw	r1, #625	@ 0x271
 80118f2:	4638      	mov	r0, r7
 80118f4:	f7ff ff1a 	bl	801172c <__i2b>
 80118f8:	2300      	movs	r3, #0
 80118fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80118fe:	4604      	mov	r4, r0
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	f04f 0900 	mov.w	r9, #0
 8011906:	07eb      	lsls	r3, r5, #31
 8011908:	d50a      	bpl.n	8011920 <__pow5mult+0x84>
 801190a:	4631      	mov	r1, r6
 801190c:	4622      	mov	r2, r4
 801190e:	4638      	mov	r0, r7
 8011910:	f7ff ff22 	bl	8011758 <__multiply>
 8011914:	4631      	mov	r1, r6
 8011916:	4680      	mov	r8, r0
 8011918:	4638      	mov	r0, r7
 801191a:	f7ff fe09 	bl	8011530 <_Bfree>
 801191e:	4646      	mov	r6, r8
 8011920:	106d      	asrs	r5, r5, #1
 8011922:	d00b      	beq.n	801193c <__pow5mult+0xa0>
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	b938      	cbnz	r0, 8011938 <__pow5mult+0x9c>
 8011928:	4622      	mov	r2, r4
 801192a:	4621      	mov	r1, r4
 801192c:	4638      	mov	r0, r7
 801192e:	f7ff ff13 	bl	8011758 <__multiply>
 8011932:	6020      	str	r0, [r4, #0]
 8011934:	f8c0 9000 	str.w	r9, [r0]
 8011938:	4604      	mov	r4, r0
 801193a:	e7e4      	b.n	8011906 <__pow5mult+0x6a>
 801193c:	4630      	mov	r0, r6
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011942:	bf00      	nop
 8011944:	08013564 	.word	0x08013564
 8011948:	0801326e 	.word	0x0801326e
 801194c:	0801334e 	.word	0x0801334e

08011950 <__lshift>:
 8011950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011954:	460c      	mov	r4, r1
 8011956:	6849      	ldr	r1, [r1, #4]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801195e:	68a3      	ldr	r3, [r4, #8]
 8011960:	4607      	mov	r7, r0
 8011962:	4691      	mov	r9, r2
 8011964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011968:	f108 0601 	add.w	r6, r8, #1
 801196c:	42b3      	cmp	r3, r6
 801196e:	db0b      	blt.n	8011988 <__lshift+0x38>
 8011970:	4638      	mov	r0, r7
 8011972:	f7ff fd9d 	bl	80114b0 <_Balloc>
 8011976:	4605      	mov	r5, r0
 8011978:	b948      	cbnz	r0, 801198e <__lshift+0x3e>
 801197a:	4602      	mov	r2, r0
 801197c:	4b28      	ldr	r3, [pc, #160]	@ (8011a20 <__lshift+0xd0>)
 801197e:	4829      	ldr	r0, [pc, #164]	@ (8011a24 <__lshift+0xd4>)
 8011980:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011984:	f001 fa42 	bl	8012e0c <__assert_func>
 8011988:	3101      	adds	r1, #1
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	e7ee      	b.n	801196c <__lshift+0x1c>
 801198e:	2300      	movs	r3, #0
 8011990:	f100 0114 	add.w	r1, r0, #20
 8011994:	f100 0210 	add.w	r2, r0, #16
 8011998:	4618      	mov	r0, r3
 801199a:	4553      	cmp	r3, sl
 801199c:	db33      	blt.n	8011a06 <__lshift+0xb6>
 801199e:	6920      	ldr	r0, [r4, #16]
 80119a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119a4:	f104 0314 	add.w	r3, r4, #20
 80119a8:	f019 091f 	ands.w	r9, r9, #31
 80119ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119b4:	d02b      	beq.n	8011a0e <__lshift+0xbe>
 80119b6:	f1c9 0e20 	rsb	lr, r9, #32
 80119ba:	468a      	mov	sl, r1
 80119bc:	2200      	movs	r2, #0
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	fa00 f009 	lsl.w	r0, r0, r9
 80119c4:	4310      	orrs	r0, r2
 80119c6:	f84a 0b04 	str.w	r0, [sl], #4
 80119ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ce:	459c      	cmp	ip, r3
 80119d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119d4:	d8f3      	bhi.n	80119be <__lshift+0x6e>
 80119d6:	ebac 0304 	sub.w	r3, ip, r4
 80119da:	3b15      	subs	r3, #21
 80119dc:	f023 0303 	bic.w	r3, r3, #3
 80119e0:	3304      	adds	r3, #4
 80119e2:	f104 0015 	add.w	r0, r4, #21
 80119e6:	4560      	cmp	r0, ip
 80119e8:	bf88      	it	hi
 80119ea:	2304      	movhi	r3, #4
 80119ec:	50ca      	str	r2, [r1, r3]
 80119ee:	b10a      	cbz	r2, 80119f4 <__lshift+0xa4>
 80119f0:	f108 0602 	add.w	r6, r8, #2
 80119f4:	3e01      	subs	r6, #1
 80119f6:	4638      	mov	r0, r7
 80119f8:	612e      	str	r6, [r5, #16]
 80119fa:	4621      	mov	r1, r4
 80119fc:	f7ff fd98 	bl	8011530 <_Bfree>
 8011a00:	4628      	mov	r0, r5
 8011a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	e7c5      	b.n	801199a <__lshift+0x4a>
 8011a0e:	3904      	subs	r1, #4
 8011a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a18:	459c      	cmp	ip, r3
 8011a1a:	d8f9      	bhi.n	8011a10 <__lshift+0xc0>
 8011a1c:	e7ea      	b.n	80119f4 <__lshift+0xa4>
 8011a1e:	bf00      	nop
 8011a20:	080132dd 	.word	0x080132dd
 8011a24:	0801334e 	.word	0x0801334e

08011a28 <__mcmp>:
 8011a28:	690a      	ldr	r2, [r1, #16]
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	6900      	ldr	r0, [r0, #16]
 8011a2e:	1a80      	subs	r0, r0, r2
 8011a30:	b530      	push	{r4, r5, lr}
 8011a32:	d10e      	bne.n	8011a52 <__mcmp+0x2a>
 8011a34:	3314      	adds	r3, #20
 8011a36:	3114      	adds	r1, #20
 8011a38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a48:	4295      	cmp	r5, r2
 8011a4a:	d003      	beq.n	8011a54 <__mcmp+0x2c>
 8011a4c:	d205      	bcs.n	8011a5a <__mcmp+0x32>
 8011a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a52:	bd30      	pop	{r4, r5, pc}
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	d3f3      	bcc.n	8011a40 <__mcmp+0x18>
 8011a58:	e7fb      	b.n	8011a52 <__mcmp+0x2a>
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	e7f9      	b.n	8011a52 <__mcmp+0x2a>
	...

08011a60 <__mdiff>:
 8011a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	4689      	mov	r9, r1
 8011a66:	4606      	mov	r6, r0
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4648      	mov	r0, r9
 8011a6c:	4614      	mov	r4, r2
 8011a6e:	f7ff ffdb 	bl	8011a28 <__mcmp>
 8011a72:	1e05      	subs	r5, r0, #0
 8011a74:	d112      	bne.n	8011a9c <__mdiff+0x3c>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff fd19 	bl	80114b0 <_Balloc>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	b928      	cbnz	r0, 8011a8e <__mdiff+0x2e>
 8011a82:	4b3f      	ldr	r3, [pc, #252]	@ (8011b80 <__mdiff+0x120>)
 8011a84:	f240 2137 	movw	r1, #567	@ 0x237
 8011a88:	483e      	ldr	r0, [pc, #248]	@ (8011b84 <__mdiff+0x124>)
 8011a8a:	f001 f9bf 	bl	8012e0c <__assert_func>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a94:	4610      	mov	r0, r2
 8011a96:	b003      	add	sp, #12
 8011a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9c:	bfbc      	itt	lt
 8011a9e:	464b      	movlt	r3, r9
 8011aa0:	46a1      	movlt	r9, r4
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011aa8:	bfba      	itte	lt
 8011aaa:	461c      	movlt	r4, r3
 8011aac:	2501      	movlt	r5, #1
 8011aae:	2500      	movge	r5, #0
 8011ab0:	f7ff fcfe 	bl	80114b0 <_Balloc>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	b918      	cbnz	r0, 8011ac0 <__mdiff+0x60>
 8011ab8:	4b31      	ldr	r3, [pc, #196]	@ (8011b80 <__mdiff+0x120>)
 8011aba:	f240 2145 	movw	r1, #581	@ 0x245
 8011abe:	e7e3      	b.n	8011a88 <__mdiff+0x28>
 8011ac0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ac4:	6926      	ldr	r6, [r4, #16]
 8011ac6:	60c5      	str	r5, [r0, #12]
 8011ac8:	f109 0310 	add.w	r3, r9, #16
 8011acc:	f109 0514 	add.w	r5, r9, #20
 8011ad0:	f104 0e14 	add.w	lr, r4, #20
 8011ad4:	f100 0b14 	add.w	fp, r0, #20
 8011ad8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011adc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011ae0:	9301      	str	r3, [sp, #4]
 8011ae2:	46d9      	mov	r9, fp
 8011ae4:	f04f 0c00 	mov.w	ip, #0
 8011ae8:	9b01      	ldr	r3, [sp, #4]
 8011aea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011aee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	fa1f f38a 	uxth.w	r3, sl
 8011af8:	4619      	mov	r1, r3
 8011afa:	b283      	uxth	r3, r0
 8011afc:	1acb      	subs	r3, r1, r3
 8011afe:	0c00      	lsrs	r0, r0, #16
 8011b00:	4463      	add	r3, ip
 8011b02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b10:	4576      	cmp	r6, lr
 8011b12:	f849 3b04 	str.w	r3, [r9], #4
 8011b16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b1a:	d8e5      	bhi.n	8011ae8 <__mdiff+0x88>
 8011b1c:	1b33      	subs	r3, r6, r4
 8011b1e:	3b15      	subs	r3, #21
 8011b20:	f023 0303 	bic.w	r3, r3, #3
 8011b24:	3415      	adds	r4, #21
 8011b26:	3304      	adds	r3, #4
 8011b28:	42a6      	cmp	r6, r4
 8011b2a:	bf38      	it	cc
 8011b2c:	2304      	movcc	r3, #4
 8011b2e:	441d      	add	r5, r3
 8011b30:	445b      	add	r3, fp
 8011b32:	461e      	mov	r6, r3
 8011b34:	462c      	mov	r4, r5
 8011b36:	4544      	cmp	r4, r8
 8011b38:	d30e      	bcc.n	8011b58 <__mdiff+0xf8>
 8011b3a:	f108 0103 	add.w	r1, r8, #3
 8011b3e:	1b49      	subs	r1, r1, r5
 8011b40:	f021 0103 	bic.w	r1, r1, #3
 8011b44:	3d03      	subs	r5, #3
 8011b46:	45a8      	cmp	r8, r5
 8011b48:	bf38      	it	cc
 8011b4a:	2100      	movcc	r1, #0
 8011b4c:	440b      	add	r3, r1
 8011b4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b52:	b191      	cbz	r1, 8011b7a <__mdiff+0x11a>
 8011b54:	6117      	str	r7, [r2, #16]
 8011b56:	e79d      	b.n	8011a94 <__mdiff+0x34>
 8011b58:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b5c:	46e6      	mov	lr, ip
 8011b5e:	0c08      	lsrs	r0, r1, #16
 8011b60:	fa1c fc81 	uxtah	ip, ip, r1
 8011b64:	4471      	add	r1, lr
 8011b66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b6a:	b289      	uxth	r1, r1
 8011b6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b70:	f846 1b04 	str.w	r1, [r6], #4
 8011b74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b78:	e7dd      	b.n	8011b36 <__mdiff+0xd6>
 8011b7a:	3f01      	subs	r7, #1
 8011b7c:	e7e7      	b.n	8011b4e <__mdiff+0xee>
 8011b7e:	bf00      	nop
 8011b80:	080132dd 	.word	0x080132dd
 8011b84:	0801334e 	.word	0x0801334e

08011b88 <__ulp>:
 8011b88:	b082      	sub	sp, #8
 8011b8a:	ed8d 0b00 	vstr	d0, [sp]
 8011b8e:	9a01      	ldr	r2, [sp, #4]
 8011b90:	4b0f      	ldr	r3, [pc, #60]	@ (8011bd0 <__ulp+0x48>)
 8011b92:	4013      	ands	r3, r2
 8011b94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	dc08      	bgt.n	8011bae <__ulp+0x26>
 8011b9c:	425b      	negs	r3, r3
 8011b9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011ba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011ba6:	da04      	bge.n	8011bb2 <__ulp+0x2a>
 8011ba8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011bac:	4113      	asrs	r3, r2
 8011bae:	2200      	movs	r2, #0
 8011bb0:	e008      	b.n	8011bc4 <__ulp+0x3c>
 8011bb2:	f1a2 0314 	sub.w	r3, r2, #20
 8011bb6:	2b1e      	cmp	r3, #30
 8011bb8:	bfda      	itte	le
 8011bba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011bbe:	40da      	lsrle	r2, r3
 8011bc0:	2201      	movgt	r2, #1
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	ec41 0b10 	vmov	d0, r0, r1
 8011bcc:	b002      	add	sp, #8
 8011bce:	4770      	bx	lr
 8011bd0:	7ff00000 	.word	0x7ff00000

08011bd4 <__b2d>:
 8011bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd8:	6906      	ldr	r6, [r0, #16]
 8011bda:	f100 0814 	add.w	r8, r0, #20
 8011bde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011be2:	1f37      	subs	r7, r6, #4
 8011be4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011be8:	4610      	mov	r0, r2
 8011bea:	f7ff fd53 	bl	8011694 <__hi0bits>
 8011bee:	f1c0 0320 	rsb	r3, r0, #32
 8011bf2:	280a      	cmp	r0, #10
 8011bf4:	600b      	str	r3, [r1, #0]
 8011bf6:	491b      	ldr	r1, [pc, #108]	@ (8011c64 <__b2d+0x90>)
 8011bf8:	dc15      	bgt.n	8011c26 <__b2d+0x52>
 8011bfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c02:	45b8      	cmp	r8, r7
 8011c04:	ea43 0501 	orr.w	r5, r3, r1
 8011c08:	bf34      	ite	cc
 8011c0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c0e:	2300      	movcs	r3, #0
 8011c10:	3015      	adds	r0, #21
 8011c12:	fa02 f000 	lsl.w	r0, r2, r0
 8011c16:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c1a:	4303      	orrs	r3, r0
 8011c1c:	461c      	mov	r4, r3
 8011c1e:	ec45 4b10 	vmov	d0, r4, r5
 8011c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c26:	45b8      	cmp	r8, r7
 8011c28:	bf3a      	itte	cc
 8011c2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c32:	2300      	movcs	r3, #0
 8011c34:	380b      	subs	r0, #11
 8011c36:	d012      	beq.n	8011c5e <__b2d+0x8a>
 8011c38:	f1c0 0120 	rsb	r1, r0, #32
 8011c3c:	fa23 f401 	lsr.w	r4, r3, r1
 8011c40:	4082      	lsls	r2, r0
 8011c42:	4322      	orrs	r2, r4
 8011c44:	4547      	cmp	r7, r8
 8011c46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c4a:	bf8c      	ite	hi
 8011c4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c50:	2200      	movls	r2, #0
 8011c52:	4083      	lsls	r3, r0
 8011c54:	40ca      	lsrs	r2, r1
 8011c56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	e7de      	b.n	8011c1c <__b2d+0x48>
 8011c5e:	ea42 0501 	orr.w	r5, r2, r1
 8011c62:	e7db      	b.n	8011c1c <__b2d+0x48>
 8011c64:	3ff00000 	.word	0x3ff00000

08011c68 <__d2b>:
 8011c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	2101      	movs	r1, #1
 8011c70:	ec59 8b10 	vmov	r8, r9, d0
 8011c74:	4616      	mov	r6, r2
 8011c76:	f7ff fc1b 	bl	80114b0 <_Balloc>
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	b930      	cbnz	r0, 8011c8c <__d2b+0x24>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	4b23      	ldr	r3, [pc, #140]	@ (8011d10 <__d2b+0xa8>)
 8011c82:	4824      	ldr	r0, [pc, #144]	@ (8011d14 <__d2b+0xac>)
 8011c84:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c88:	f001 f8c0 	bl	8012e0c <__assert_func>
 8011c8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c94:	b10d      	cbz	r5, 8011c9a <__d2b+0x32>
 8011c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c9a:	9301      	str	r3, [sp, #4]
 8011c9c:	f1b8 0300 	subs.w	r3, r8, #0
 8011ca0:	d023      	beq.n	8011cea <__d2b+0x82>
 8011ca2:	4668      	mov	r0, sp
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	f7ff fd14 	bl	80116d2 <__lo0bits>
 8011caa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cae:	b1d0      	cbz	r0, 8011ce6 <__d2b+0x7e>
 8011cb0:	f1c0 0320 	rsb	r3, r0, #32
 8011cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb8:	430b      	orrs	r3, r1
 8011cba:	40c2      	lsrs	r2, r0
 8011cbc:	6163      	str	r3, [r4, #20]
 8011cbe:	9201      	str	r2, [sp, #4]
 8011cc0:	9b01      	ldr	r3, [sp, #4]
 8011cc2:	61a3      	str	r3, [r4, #24]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	bf0c      	ite	eq
 8011cc8:	2201      	moveq	r2, #1
 8011cca:	2202      	movne	r2, #2
 8011ccc:	6122      	str	r2, [r4, #16]
 8011cce:	b1a5      	cbz	r5, 8011cfa <__d2b+0x92>
 8011cd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cd4:	4405      	add	r5, r0
 8011cd6:	603d      	str	r5, [r7, #0]
 8011cd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cdc:	6030      	str	r0, [r6, #0]
 8011cde:	4620      	mov	r0, r4
 8011ce0:	b003      	add	sp, #12
 8011ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce6:	6161      	str	r1, [r4, #20]
 8011ce8:	e7ea      	b.n	8011cc0 <__d2b+0x58>
 8011cea:	a801      	add	r0, sp, #4
 8011cec:	f7ff fcf1 	bl	80116d2 <__lo0bits>
 8011cf0:	9b01      	ldr	r3, [sp, #4]
 8011cf2:	6163      	str	r3, [r4, #20]
 8011cf4:	3020      	adds	r0, #32
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	e7e8      	b.n	8011ccc <__d2b+0x64>
 8011cfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d02:	6038      	str	r0, [r7, #0]
 8011d04:	6918      	ldr	r0, [r3, #16]
 8011d06:	f7ff fcc5 	bl	8011694 <__hi0bits>
 8011d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d0e:	e7e5      	b.n	8011cdc <__d2b+0x74>
 8011d10:	080132dd 	.word	0x080132dd
 8011d14:	0801334e 	.word	0x0801334e

08011d18 <__ratio>:
 8011d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	4688      	mov	r8, r1
 8011d1e:	4669      	mov	r1, sp
 8011d20:	4681      	mov	r9, r0
 8011d22:	f7ff ff57 	bl	8011bd4 <__b2d>
 8011d26:	a901      	add	r1, sp, #4
 8011d28:	4640      	mov	r0, r8
 8011d2a:	ec55 4b10 	vmov	r4, r5, d0
 8011d2e:	f7ff ff51 	bl	8011bd4 <__b2d>
 8011d32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011d36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011d3a:	1ad2      	subs	r2, r2, r3
 8011d3c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011d40:	1a5b      	subs	r3, r3, r1
 8011d42:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011d46:	ec57 6b10 	vmov	r6, r7, d0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	bfd6      	itet	le
 8011d4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d52:	462a      	movgt	r2, r5
 8011d54:	463a      	movle	r2, r7
 8011d56:	46ab      	mov	fp, r5
 8011d58:	46a2      	mov	sl, r4
 8011d5a:	bfce      	itee	gt
 8011d5c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011d60:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011d64:	ee00 3a90 	vmovle	s1, r3
 8011d68:	ec4b ab17 	vmov	d7, sl, fp
 8011d6c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011d70:	b003      	add	sp, #12
 8011d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d76 <__copybits>:
 8011d76:	3901      	subs	r1, #1
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	1149      	asrs	r1, r1, #5
 8011d7c:	6914      	ldr	r4, [r2, #16]
 8011d7e:	3101      	adds	r1, #1
 8011d80:	f102 0314 	add.w	r3, r2, #20
 8011d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d8c:	1f05      	subs	r5, r0, #4
 8011d8e:	42a3      	cmp	r3, r4
 8011d90:	d30c      	bcc.n	8011dac <__copybits+0x36>
 8011d92:	1aa3      	subs	r3, r4, r2
 8011d94:	3b11      	subs	r3, #17
 8011d96:	f023 0303 	bic.w	r3, r3, #3
 8011d9a:	3211      	adds	r2, #17
 8011d9c:	42a2      	cmp	r2, r4
 8011d9e:	bf88      	it	hi
 8011da0:	2300      	movhi	r3, #0
 8011da2:	4418      	add	r0, r3
 8011da4:	2300      	movs	r3, #0
 8011da6:	4288      	cmp	r0, r1
 8011da8:	d305      	bcc.n	8011db6 <__copybits+0x40>
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	f853 6b04 	ldr.w	r6, [r3], #4
 8011db0:	f845 6f04 	str.w	r6, [r5, #4]!
 8011db4:	e7eb      	b.n	8011d8e <__copybits+0x18>
 8011db6:	f840 3b04 	str.w	r3, [r0], #4
 8011dba:	e7f4      	b.n	8011da6 <__copybits+0x30>

08011dbc <__any_on>:
 8011dbc:	f100 0214 	add.w	r2, r0, #20
 8011dc0:	6900      	ldr	r0, [r0, #16]
 8011dc2:	114b      	asrs	r3, r1, #5
 8011dc4:	4298      	cmp	r0, r3
 8011dc6:	b510      	push	{r4, lr}
 8011dc8:	db11      	blt.n	8011dee <__any_on+0x32>
 8011dca:	dd0a      	ble.n	8011de2 <__any_on+0x26>
 8011dcc:	f011 011f 	ands.w	r1, r1, #31
 8011dd0:	d007      	beq.n	8011de2 <__any_on+0x26>
 8011dd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dd6:	fa24 f001 	lsr.w	r0, r4, r1
 8011dda:	fa00 f101 	lsl.w	r1, r0, r1
 8011dde:	428c      	cmp	r4, r1
 8011de0:	d10b      	bne.n	8011dfa <__any_on+0x3e>
 8011de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d803      	bhi.n	8011df2 <__any_on+0x36>
 8011dea:	2000      	movs	r0, #0
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	4603      	mov	r3, r0
 8011df0:	e7f7      	b.n	8011de2 <__any_on+0x26>
 8011df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011df6:	2900      	cmp	r1, #0
 8011df8:	d0f5      	beq.n	8011de6 <__any_on+0x2a>
 8011dfa:	2001      	movs	r0, #1
 8011dfc:	e7f6      	b.n	8011dec <__any_on+0x30>

08011dfe <_malloc_usable_size_r>:
 8011dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e02:	1f18      	subs	r0, r3, #4
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	bfbc      	itt	lt
 8011e08:	580b      	ldrlt	r3, [r1, r0]
 8011e0a:	18c0      	addlt	r0, r0, r3
 8011e0c:	4770      	bx	lr
	...

08011e10 <_strtol_l.isra.0>:
 8011e10:	2b24      	cmp	r3, #36	@ 0x24
 8011e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e16:	4686      	mov	lr, r0
 8011e18:	4690      	mov	r8, r2
 8011e1a:	d801      	bhi.n	8011e20 <_strtol_l.isra.0+0x10>
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d106      	bne.n	8011e2e <_strtol_l.isra.0+0x1e>
 8011e20:	f7fe f97c 	bl	801011c <__errno>
 8011e24:	2316      	movs	r3, #22
 8011e26:	6003      	str	r3, [r0, #0]
 8011e28:	2000      	movs	r0, #0
 8011e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e2e:	4834      	ldr	r0, [pc, #208]	@ (8011f00 <_strtol_l.isra.0+0xf0>)
 8011e30:	460d      	mov	r5, r1
 8011e32:	462a      	mov	r2, r5
 8011e34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e38:	5d06      	ldrb	r6, [r0, r4]
 8011e3a:	f016 0608 	ands.w	r6, r6, #8
 8011e3e:	d1f8      	bne.n	8011e32 <_strtol_l.isra.0+0x22>
 8011e40:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e42:	d110      	bne.n	8011e66 <_strtol_l.isra.0+0x56>
 8011e44:	782c      	ldrb	r4, [r5, #0]
 8011e46:	2601      	movs	r6, #1
 8011e48:	1c95      	adds	r5, r2, #2
 8011e4a:	f033 0210 	bics.w	r2, r3, #16
 8011e4e:	d115      	bne.n	8011e7c <_strtol_l.isra.0+0x6c>
 8011e50:	2c30      	cmp	r4, #48	@ 0x30
 8011e52:	d10d      	bne.n	8011e70 <_strtol_l.isra.0+0x60>
 8011e54:	782a      	ldrb	r2, [r5, #0]
 8011e56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e5a:	2a58      	cmp	r2, #88	@ 0x58
 8011e5c:	d108      	bne.n	8011e70 <_strtol_l.isra.0+0x60>
 8011e5e:	786c      	ldrb	r4, [r5, #1]
 8011e60:	3502      	adds	r5, #2
 8011e62:	2310      	movs	r3, #16
 8011e64:	e00a      	b.n	8011e7c <_strtol_l.isra.0+0x6c>
 8011e66:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e68:	bf04      	itt	eq
 8011e6a:	782c      	ldrbeq	r4, [r5, #0]
 8011e6c:	1c95      	addeq	r5, r2, #2
 8011e6e:	e7ec      	b.n	8011e4a <_strtol_l.isra.0+0x3a>
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d1f6      	bne.n	8011e62 <_strtol_l.isra.0+0x52>
 8011e74:	2c30      	cmp	r4, #48	@ 0x30
 8011e76:	bf14      	ite	ne
 8011e78:	230a      	movne	r3, #10
 8011e7a:	2308      	moveq	r3, #8
 8011e7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e80:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e84:	2200      	movs	r2, #0
 8011e86:	fbbc f9f3 	udiv	r9, ip, r3
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e94:	2f09      	cmp	r7, #9
 8011e96:	d80f      	bhi.n	8011eb8 <_strtol_l.isra.0+0xa8>
 8011e98:	463c      	mov	r4, r7
 8011e9a:	42a3      	cmp	r3, r4
 8011e9c:	dd1b      	ble.n	8011ed6 <_strtol_l.isra.0+0xc6>
 8011e9e:	1c57      	adds	r7, r2, #1
 8011ea0:	d007      	beq.n	8011eb2 <_strtol_l.isra.0+0xa2>
 8011ea2:	4581      	cmp	r9, r0
 8011ea4:	d314      	bcc.n	8011ed0 <_strtol_l.isra.0+0xc0>
 8011ea6:	d101      	bne.n	8011eac <_strtol_l.isra.0+0x9c>
 8011ea8:	45a2      	cmp	sl, r4
 8011eaa:	db11      	blt.n	8011ed0 <_strtol_l.isra.0+0xc0>
 8011eac:	fb00 4003 	mla	r0, r0, r3, r4
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011eb6:	e7eb      	b.n	8011e90 <_strtol_l.isra.0+0x80>
 8011eb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011ebc:	2f19      	cmp	r7, #25
 8011ebe:	d801      	bhi.n	8011ec4 <_strtol_l.isra.0+0xb4>
 8011ec0:	3c37      	subs	r4, #55	@ 0x37
 8011ec2:	e7ea      	b.n	8011e9a <_strtol_l.isra.0+0x8a>
 8011ec4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011ec8:	2f19      	cmp	r7, #25
 8011eca:	d804      	bhi.n	8011ed6 <_strtol_l.isra.0+0xc6>
 8011ecc:	3c57      	subs	r4, #87	@ 0x57
 8011ece:	e7e4      	b.n	8011e9a <_strtol_l.isra.0+0x8a>
 8011ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed4:	e7ed      	b.n	8011eb2 <_strtol_l.isra.0+0xa2>
 8011ed6:	1c53      	adds	r3, r2, #1
 8011ed8:	d108      	bne.n	8011eec <_strtol_l.isra.0+0xdc>
 8011eda:	2322      	movs	r3, #34	@ 0x22
 8011edc:	f8ce 3000 	str.w	r3, [lr]
 8011ee0:	4660      	mov	r0, ip
 8011ee2:	f1b8 0f00 	cmp.w	r8, #0
 8011ee6:	d0a0      	beq.n	8011e2a <_strtol_l.isra.0+0x1a>
 8011ee8:	1e69      	subs	r1, r5, #1
 8011eea:	e006      	b.n	8011efa <_strtol_l.isra.0+0xea>
 8011eec:	b106      	cbz	r6, 8011ef0 <_strtol_l.isra.0+0xe0>
 8011eee:	4240      	negs	r0, r0
 8011ef0:	f1b8 0f00 	cmp.w	r8, #0
 8011ef4:	d099      	beq.n	8011e2a <_strtol_l.isra.0+0x1a>
 8011ef6:	2a00      	cmp	r2, #0
 8011ef8:	d1f6      	bne.n	8011ee8 <_strtol_l.isra.0+0xd8>
 8011efa:	f8c8 1000 	str.w	r1, [r8]
 8011efe:	e794      	b.n	8011e2a <_strtol_l.isra.0+0x1a>
 8011f00:	08013461 	.word	0x08013461

08011f04 <_strtol_r>:
 8011f04:	f7ff bf84 	b.w	8011e10 <_strtol_l.isra.0>

08011f08 <__ascii_wctomb>:
 8011f08:	4603      	mov	r3, r0
 8011f0a:	4608      	mov	r0, r1
 8011f0c:	b141      	cbz	r1, 8011f20 <__ascii_wctomb+0x18>
 8011f0e:	2aff      	cmp	r2, #255	@ 0xff
 8011f10:	d904      	bls.n	8011f1c <__ascii_wctomb+0x14>
 8011f12:	228a      	movs	r2, #138	@ 0x8a
 8011f14:	601a      	str	r2, [r3, #0]
 8011f16:	f04f 30ff 	mov.w	r0, #4294967295
 8011f1a:	4770      	bx	lr
 8011f1c:	700a      	strb	r2, [r1, #0]
 8011f1e:	2001      	movs	r0, #1
 8011f20:	4770      	bx	lr

08011f22 <__ssputs_r>:
 8011f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f26:	688e      	ldr	r6, [r1, #8]
 8011f28:	461f      	mov	r7, r3
 8011f2a:	42be      	cmp	r6, r7
 8011f2c:	680b      	ldr	r3, [r1, #0]
 8011f2e:	4682      	mov	sl, r0
 8011f30:	460c      	mov	r4, r1
 8011f32:	4690      	mov	r8, r2
 8011f34:	d82d      	bhi.n	8011f92 <__ssputs_r+0x70>
 8011f36:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f3a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f3e:	d026      	beq.n	8011f8e <__ssputs_r+0x6c>
 8011f40:	6965      	ldr	r5, [r4, #20]
 8011f42:	6909      	ldr	r1, [r1, #16]
 8011f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f48:	eba3 0901 	sub.w	r9, r3, r1
 8011f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f50:	1c7b      	adds	r3, r7, #1
 8011f52:	444b      	add	r3, r9
 8011f54:	106d      	asrs	r5, r5, #1
 8011f56:	429d      	cmp	r5, r3
 8011f58:	bf38      	it	cc
 8011f5a:	461d      	movcc	r5, r3
 8011f5c:	0553      	lsls	r3, r2, #21
 8011f5e:	d527      	bpl.n	8011fb0 <__ssputs_r+0x8e>
 8011f60:	4629      	mov	r1, r5
 8011f62:	f7fc f953 	bl	800e20c <_malloc_r>
 8011f66:	4606      	mov	r6, r0
 8011f68:	b360      	cbz	r0, 8011fc4 <__ssputs_r+0xa2>
 8011f6a:	6921      	ldr	r1, [r4, #16]
 8011f6c:	464a      	mov	r2, r9
 8011f6e:	f7fe f902 	bl	8010176 <memcpy>
 8011f72:	89a3      	ldrh	r3, [r4, #12]
 8011f74:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f7c:	81a3      	strh	r3, [r4, #12]
 8011f7e:	6126      	str	r6, [r4, #16]
 8011f80:	6165      	str	r5, [r4, #20]
 8011f82:	444e      	add	r6, r9
 8011f84:	eba5 0509 	sub.w	r5, r5, r9
 8011f88:	6026      	str	r6, [r4, #0]
 8011f8a:	60a5      	str	r5, [r4, #8]
 8011f8c:	463e      	mov	r6, r7
 8011f8e:	42be      	cmp	r6, r7
 8011f90:	d900      	bls.n	8011f94 <__ssputs_r+0x72>
 8011f92:	463e      	mov	r6, r7
 8011f94:	6820      	ldr	r0, [r4, #0]
 8011f96:	4632      	mov	r2, r6
 8011f98:	4641      	mov	r1, r8
 8011f9a:	f000 fefa 	bl	8012d92 <memmove>
 8011f9e:	68a3      	ldr	r3, [r4, #8]
 8011fa0:	1b9b      	subs	r3, r3, r6
 8011fa2:	60a3      	str	r3, [r4, #8]
 8011fa4:	6823      	ldr	r3, [r4, #0]
 8011fa6:	4433      	add	r3, r6
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	2000      	movs	r0, #0
 8011fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb0:	462a      	mov	r2, r5
 8011fb2:	f7fc f9bf 	bl	800e334 <_realloc_r>
 8011fb6:	4606      	mov	r6, r0
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d1e0      	bne.n	8011f7e <__ssputs_r+0x5c>
 8011fbc:	6921      	ldr	r1, [r4, #16]
 8011fbe:	4650      	mov	r0, sl
 8011fc0:	f7fe fee0 	bl	8010d84 <_free_r>
 8011fc4:	230c      	movs	r3, #12
 8011fc6:	f8ca 3000 	str.w	r3, [sl]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fd0:	81a3      	strh	r3, [r4, #12]
 8011fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd6:	e7e9      	b.n	8011fac <__ssputs_r+0x8a>

08011fd8 <_svfiprintf_r>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	4698      	mov	r8, r3
 8011fde:	898b      	ldrh	r3, [r1, #12]
 8011fe0:	061b      	lsls	r3, r3, #24
 8011fe2:	b09d      	sub	sp, #116	@ 0x74
 8011fe4:	4607      	mov	r7, r0
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	4614      	mov	r4, r2
 8011fea:	d510      	bpl.n	801200e <_svfiprintf_r+0x36>
 8011fec:	690b      	ldr	r3, [r1, #16]
 8011fee:	b973      	cbnz	r3, 801200e <_svfiprintf_r+0x36>
 8011ff0:	2140      	movs	r1, #64	@ 0x40
 8011ff2:	f7fc f90b 	bl	800e20c <_malloc_r>
 8011ff6:	6028      	str	r0, [r5, #0]
 8011ff8:	6128      	str	r0, [r5, #16]
 8011ffa:	b930      	cbnz	r0, 801200a <_svfiprintf_r+0x32>
 8011ffc:	230c      	movs	r3, #12
 8011ffe:	603b      	str	r3, [r7, #0]
 8012000:	f04f 30ff 	mov.w	r0, #4294967295
 8012004:	b01d      	add	sp, #116	@ 0x74
 8012006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200a:	2340      	movs	r3, #64	@ 0x40
 801200c:	616b      	str	r3, [r5, #20]
 801200e:	2300      	movs	r3, #0
 8012010:	9309      	str	r3, [sp, #36]	@ 0x24
 8012012:	2320      	movs	r3, #32
 8012014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012018:	f8cd 800c 	str.w	r8, [sp, #12]
 801201c:	2330      	movs	r3, #48	@ 0x30
 801201e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80121bc <_svfiprintf_r+0x1e4>
 8012022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012026:	f04f 0901 	mov.w	r9, #1
 801202a:	4623      	mov	r3, r4
 801202c:	469a      	mov	sl, r3
 801202e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012032:	b10a      	cbz	r2, 8012038 <_svfiprintf_r+0x60>
 8012034:	2a25      	cmp	r2, #37	@ 0x25
 8012036:	d1f9      	bne.n	801202c <_svfiprintf_r+0x54>
 8012038:	ebba 0b04 	subs.w	fp, sl, r4
 801203c:	d00b      	beq.n	8012056 <_svfiprintf_r+0x7e>
 801203e:	465b      	mov	r3, fp
 8012040:	4622      	mov	r2, r4
 8012042:	4629      	mov	r1, r5
 8012044:	4638      	mov	r0, r7
 8012046:	f7ff ff6c 	bl	8011f22 <__ssputs_r>
 801204a:	3001      	adds	r0, #1
 801204c:	f000 80a7 	beq.w	801219e <_svfiprintf_r+0x1c6>
 8012050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012052:	445a      	add	r2, fp
 8012054:	9209      	str	r2, [sp, #36]	@ 0x24
 8012056:	f89a 3000 	ldrb.w	r3, [sl]
 801205a:	2b00      	cmp	r3, #0
 801205c:	f000 809f 	beq.w	801219e <_svfiprintf_r+0x1c6>
 8012060:	2300      	movs	r3, #0
 8012062:	f04f 32ff 	mov.w	r2, #4294967295
 8012066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801206a:	f10a 0a01 	add.w	sl, sl, #1
 801206e:	9304      	str	r3, [sp, #16]
 8012070:	9307      	str	r3, [sp, #28]
 8012072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012076:	931a      	str	r3, [sp, #104]	@ 0x68
 8012078:	4654      	mov	r4, sl
 801207a:	2205      	movs	r2, #5
 801207c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012080:	484e      	ldr	r0, [pc, #312]	@ (80121bc <_svfiprintf_r+0x1e4>)
 8012082:	f7ee f92d 	bl	80002e0 <memchr>
 8012086:	9a04      	ldr	r2, [sp, #16]
 8012088:	b9d8      	cbnz	r0, 80120c2 <_svfiprintf_r+0xea>
 801208a:	06d0      	lsls	r0, r2, #27
 801208c:	bf44      	itt	mi
 801208e:	2320      	movmi	r3, #32
 8012090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012094:	0711      	lsls	r1, r2, #28
 8012096:	bf44      	itt	mi
 8012098:	232b      	movmi	r3, #43	@ 0x2b
 801209a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801209e:	f89a 3000 	ldrb.w	r3, [sl]
 80120a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80120a4:	d015      	beq.n	80120d2 <_svfiprintf_r+0xfa>
 80120a6:	9a07      	ldr	r2, [sp, #28]
 80120a8:	4654      	mov	r4, sl
 80120aa:	2000      	movs	r0, #0
 80120ac:	f04f 0c0a 	mov.w	ip, #10
 80120b0:	4621      	mov	r1, r4
 80120b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120b6:	3b30      	subs	r3, #48	@ 0x30
 80120b8:	2b09      	cmp	r3, #9
 80120ba:	d94b      	bls.n	8012154 <_svfiprintf_r+0x17c>
 80120bc:	b1b0      	cbz	r0, 80120ec <_svfiprintf_r+0x114>
 80120be:	9207      	str	r2, [sp, #28]
 80120c0:	e014      	b.n	80120ec <_svfiprintf_r+0x114>
 80120c2:	eba0 0308 	sub.w	r3, r0, r8
 80120c6:	fa09 f303 	lsl.w	r3, r9, r3
 80120ca:	4313      	orrs	r3, r2
 80120cc:	9304      	str	r3, [sp, #16]
 80120ce:	46a2      	mov	sl, r4
 80120d0:	e7d2      	b.n	8012078 <_svfiprintf_r+0xa0>
 80120d2:	9b03      	ldr	r3, [sp, #12]
 80120d4:	1d19      	adds	r1, r3, #4
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	9103      	str	r1, [sp, #12]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	bfbb      	ittet	lt
 80120de:	425b      	neglt	r3, r3
 80120e0:	f042 0202 	orrlt.w	r2, r2, #2
 80120e4:	9307      	strge	r3, [sp, #28]
 80120e6:	9307      	strlt	r3, [sp, #28]
 80120e8:	bfb8      	it	lt
 80120ea:	9204      	strlt	r2, [sp, #16]
 80120ec:	7823      	ldrb	r3, [r4, #0]
 80120ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80120f0:	d10a      	bne.n	8012108 <_svfiprintf_r+0x130>
 80120f2:	7863      	ldrb	r3, [r4, #1]
 80120f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80120f6:	d132      	bne.n	801215e <_svfiprintf_r+0x186>
 80120f8:	9b03      	ldr	r3, [sp, #12]
 80120fa:	1d1a      	adds	r2, r3, #4
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	9203      	str	r2, [sp, #12]
 8012100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012104:	3402      	adds	r4, #2
 8012106:	9305      	str	r3, [sp, #20]
 8012108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80121cc <_svfiprintf_r+0x1f4>
 801210c:	7821      	ldrb	r1, [r4, #0]
 801210e:	2203      	movs	r2, #3
 8012110:	4650      	mov	r0, sl
 8012112:	f7ee f8e5 	bl	80002e0 <memchr>
 8012116:	b138      	cbz	r0, 8012128 <_svfiprintf_r+0x150>
 8012118:	9b04      	ldr	r3, [sp, #16]
 801211a:	eba0 000a 	sub.w	r0, r0, sl
 801211e:	2240      	movs	r2, #64	@ 0x40
 8012120:	4082      	lsls	r2, r0
 8012122:	4313      	orrs	r3, r2
 8012124:	3401      	adds	r4, #1
 8012126:	9304      	str	r3, [sp, #16]
 8012128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801212c:	4824      	ldr	r0, [pc, #144]	@ (80121c0 <_svfiprintf_r+0x1e8>)
 801212e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012132:	2206      	movs	r2, #6
 8012134:	f7ee f8d4 	bl	80002e0 <memchr>
 8012138:	2800      	cmp	r0, #0
 801213a:	d036      	beq.n	80121aa <_svfiprintf_r+0x1d2>
 801213c:	4b21      	ldr	r3, [pc, #132]	@ (80121c4 <_svfiprintf_r+0x1ec>)
 801213e:	bb1b      	cbnz	r3, 8012188 <_svfiprintf_r+0x1b0>
 8012140:	9b03      	ldr	r3, [sp, #12]
 8012142:	3307      	adds	r3, #7
 8012144:	f023 0307 	bic.w	r3, r3, #7
 8012148:	3308      	adds	r3, #8
 801214a:	9303      	str	r3, [sp, #12]
 801214c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801214e:	4433      	add	r3, r6
 8012150:	9309      	str	r3, [sp, #36]	@ 0x24
 8012152:	e76a      	b.n	801202a <_svfiprintf_r+0x52>
 8012154:	fb0c 3202 	mla	r2, ip, r2, r3
 8012158:	460c      	mov	r4, r1
 801215a:	2001      	movs	r0, #1
 801215c:	e7a8      	b.n	80120b0 <_svfiprintf_r+0xd8>
 801215e:	2300      	movs	r3, #0
 8012160:	3401      	adds	r4, #1
 8012162:	9305      	str	r3, [sp, #20]
 8012164:	4619      	mov	r1, r3
 8012166:	f04f 0c0a 	mov.w	ip, #10
 801216a:	4620      	mov	r0, r4
 801216c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012170:	3a30      	subs	r2, #48	@ 0x30
 8012172:	2a09      	cmp	r2, #9
 8012174:	d903      	bls.n	801217e <_svfiprintf_r+0x1a6>
 8012176:	2b00      	cmp	r3, #0
 8012178:	d0c6      	beq.n	8012108 <_svfiprintf_r+0x130>
 801217a:	9105      	str	r1, [sp, #20]
 801217c:	e7c4      	b.n	8012108 <_svfiprintf_r+0x130>
 801217e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012182:	4604      	mov	r4, r0
 8012184:	2301      	movs	r3, #1
 8012186:	e7f0      	b.n	801216a <_svfiprintf_r+0x192>
 8012188:	ab03      	add	r3, sp, #12
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	462a      	mov	r2, r5
 801218e:	4b0e      	ldr	r3, [pc, #56]	@ (80121c8 <_svfiprintf_r+0x1f0>)
 8012190:	a904      	add	r1, sp, #16
 8012192:	4638      	mov	r0, r7
 8012194:	f7fc ff48 	bl	800f028 <_printf_float>
 8012198:	1c42      	adds	r2, r0, #1
 801219a:	4606      	mov	r6, r0
 801219c:	d1d6      	bne.n	801214c <_svfiprintf_r+0x174>
 801219e:	89ab      	ldrh	r3, [r5, #12]
 80121a0:	065b      	lsls	r3, r3, #25
 80121a2:	f53f af2d 	bmi.w	8012000 <_svfiprintf_r+0x28>
 80121a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121a8:	e72c      	b.n	8012004 <_svfiprintf_r+0x2c>
 80121aa:	ab03      	add	r3, sp, #12
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	462a      	mov	r2, r5
 80121b0:	4b05      	ldr	r3, [pc, #20]	@ (80121c8 <_svfiprintf_r+0x1f0>)
 80121b2:	a904      	add	r1, sp, #16
 80121b4:	4638      	mov	r0, r7
 80121b6:	f7fd f9bf 	bl	800f538 <_printf_i>
 80121ba:	e7ed      	b.n	8012198 <_svfiprintf_r+0x1c0>
 80121bc:	080133a7 	.word	0x080133a7
 80121c0:	080133b1 	.word	0x080133b1
 80121c4:	0800f029 	.word	0x0800f029
 80121c8:	08011f23 	.word	0x08011f23
 80121cc:	080133ad 	.word	0x080133ad

080121d0 <_sungetc_r>:
 80121d0:	b538      	push	{r3, r4, r5, lr}
 80121d2:	1c4b      	adds	r3, r1, #1
 80121d4:	4614      	mov	r4, r2
 80121d6:	d103      	bne.n	80121e0 <_sungetc_r+0x10>
 80121d8:	f04f 35ff 	mov.w	r5, #4294967295
 80121dc:	4628      	mov	r0, r5
 80121de:	bd38      	pop	{r3, r4, r5, pc}
 80121e0:	8993      	ldrh	r3, [r2, #12]
 80121e2:	f023 0320 	bic.w	r3, r3, #32
 80121e6:	8193      	strh	r3, [r2, #12]
 80121e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121ea:	6852      	ldr	r2, [r2, #4]
 80121ec:	b2cd      	uxtb	r5, r1
 80121ee:	b18b      	cbz	r3, 8012214 <_sungetc_r+0x44>
 80121f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80121f2:	4293      	cmp	r3, r2
 80121f4:	dd08      	ble.n	8012208 <_sungetc_r+0x38>
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	1e5a      	subs	r2, r3, #1
 80121fa:	6022      	str	r2, [r4, #0]
 80121fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012200:	6863      	ldr	r3, [r4, #4]
 8012202:	3301      	adds	r3, #1
 8012204:	6063      	str	r3, [r4, #4]
 8012206:	e7e9      	b.n	80121dc <_sungetc_r+0xc>
 8012208:	4621      	mov	r1, r4
 801220a:	f000 fd88 	bl	8012d1e <__submore>
 801220e:	2800      	cmp	r0, #0
 8012210:	d0f1      	beq.n	80121f6 <_sungetc_r+0x26>
 8012212:	e7e1      	b.n	80121d8 <_sungetc_r+0x8>
 8012214:	6921      	ldr	r1, [r4, #16]
 8012216:	6823      	ldr	r3, [r4, #0]
 8012218:	b151      	cbz	r1, 8012230 <_sungetc_r+0x60>
 801221a:	4299      	cmp	r1, r3
 801221c:	d208      	bcs.n	8012230 <_sungetc_r+0x60>
 801221e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012222:	42a9      	cmp	r1, r5
 8012224:	d104      	bne.n	8012230 <_sungetc_r+0x60>
 8012226:	3b01      	subs	r3, #1
 8012228:	3201      	adds	r2, #1
 801222a:	6023      	str	r3, [r4, #0]
 801222c:	6062      	str	r2, [r4, #4]
 801222e:	e7d5      	b.n	80121dc <_sungetc_r+0xc>
 8012230:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012238:	6363      	str	r3, [r4, #52]	@ 0x34
 801223a:	2303      	movs	r3, #3
 801223c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801223e:	4623      	mov	r3, r4
 8012240:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012244:	6023      	str	r3, [r4, #0]
 8012246:	2301      	movs	r3, #1
 8012248:	e7dc      	b.n	8012204 <_sungetc_r+0x34>

0801224a <__ssrefill_r>:
 801224a:	b510      	push	{r4, lr}
 801224c:	460c      	mov	r4, r1
 801224e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012250:	b169      	cbz	r1, 801226e <__ssrefill_r+0x24>
 8012252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012256:	4299      	cmp	r1, r3
 8012258:	d001      	beq.n	801225e <__ssrefill_r+0x14>
 801225a:	f7fe fd93 	bl	8010d84 <_free_r>
 801225e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012260:	6063      	str	r3, [r4, #4]
 8012262:	2000      	movs	r0, #0
 8012264:	6360      	str	r0, [r4, #52]	@ 0x34
 8012266:	b113      	cbz	r3, 801226e <__ssrefill_r+0x24>
 8012268:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801226a:	6023      	str	r3, [r4, #0]
 801226c:	bd10      	pop	{r4, pc}
 801226e:	6923      	ldr	r3, [r4, #16]
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	2300      	movs	r3, #0
 8012274:	6063      	str	r3, [r4, #4]
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	f043 0320 	orr.w	r3, r3, #32
 801227c:	81a3      	strh	r3, [r4, #12]
 801227e:	f04f 30ff 	mov.w	r0, #4294967295
 8012282:	e7f3      	b.n	801226c <__ssrefill_r+0x22>

08012284 <__ssvfiscanf_r>:
 8012284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012288:	460c      	mov	r4, r1
 801228a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801228e:	2100      	movs	r1, #0
 8012290:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012294:	49a6      	ldr	r1, [pc, #664]	@ (8012530 <__ssvfiscanf_r+0x2ac>)
 8012296:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012298:	f10d 0804 	add.w	r8, sp, #4
 801229c:	49a5      	ldr	r1, [pc, #660]	@ (8012534 <__ssvfiscanf_r+0x2b0>)
 801229e:	4fa6      	ldr	r7, [pc, #664]	@ (8012538 <__ssvfiscanf_r+0x2b4>)
 80122a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80122a4:	4606      	mov	r6, r0
 80122a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80122a8:	9300      	str	r3, [sp, #0]
 80122aa:	f892 9000 	ldrb.w	r9, [r2]
 80122ae:	f1b9 0f00 	cmp.w	r9, #0
 80122b2:	f000 8158 	beq.w	8012566 <__ssvfiscanf_r+0x2e2>
 80122b6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80122ba:	f013 0308 	ands.w	r3, r3, #8
 80122be:	f102 0501 	add.w	r5, r2, #1
 80122c2:	d019      	beq.n	80122f8 <__ssvfiscanf_r+0x74>
 80122c4:	6863      	ldr	r3, [r4, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	dd0f      	ble.n	80122ea <__ssvfiscanf_r+0x66>
 80122ca:	6823      	ldr	r3, [r4, #0]
 80122cc:	781a      	ldrb	r2, [r3, #0]
 80122ce:	5cba      	ldrb	r2, [r7, r2]
 80122d0:	0712      	lsls	r2, r2, #28
 80122d2:	d401      	bmi.n	80122d8 <__ssvfiscanf_r+0x54>
 80122d4:	462a      	mov	r2, r5
 80122d6:	e7e8      	b.n	80122aa <__ssvfiscanf_r+0x26>
 80122d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80122da:	3201      	adds	r2, #1
 80122dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80122de:	6862      	ldr	r2, [r4, #4]
 80122e0:	3301      	adds	r3, #1
 80122e2:	3a01      	subs	r2, #1
 80122e4:	6062      	str	r2, [r4, #4]
 80122e6:	6023      	str	r3, [r4, #0]
 80122e8:	e7ec      	b.n	80122c4 <__ssvfiscanf_r+0x40>
 80122ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122ec:	4621      	mov	r1, r4
 80122ee:	4630      	mov	r0, r6
 80122f0:	4798      	blx	r3
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d0e9      	beq.n	80122ca <__ssvfiscanf_r+0x46>
 80122f6:	e7ed      	b.n	80122d4 <__ssvfiscanf_r+0x50>
 80122f8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80122fc:	f040 8085 	bne.w	801240a <__ssvfiscanf_r+0x186>
 8012300:	9341      	str	r3, [sp, #260]	@ 0x104
 8012302:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012304:	7853      	ldrb	r3, [r2, #1]
 8012306:	2b2a      	cmp	r3, #42	@ 0x2a
 8012308:	bf02      	ittt	eq
 801230a:	2310      	moveq	r3, #16
 801230c:	1c95      	addeq	r5, r2, #2
 801230e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012310:	220a      	movs	r2, #10
 8012312:	46aa      	mov	sl, r5
 8012314:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012318:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801231c:	2b09      	cmp	r3, #9
 801231e:	d91e      	bls.n	801235e <__ssvfiscanf_r+0xda>
 8012320:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801253c <__ssvfiscanf_r+0x2b8>
 8012324:	2203      	movs	r2, #3
 8012326:	4658      	mov	r0, fp
 8012328:	f7ed ffda 	bl	80002e0 <memchr>
 801232c:	b138      	cbz	r0, 801233e <__ssvfiscanf_r+0xba>
 801232e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012330:	eba0 000b 	sub.w	r0, r0, fp
 8012334:	2301      	movs	r3, #1
 8012336:	4083      	lsls	r3, r0
 8012338:	4313      	orrs	r3, r2
 801233a:	9341      	str	r3, [sp, #260]	@ 0x104
 801233c:	4655      	mov	r5, sl
 801233e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012342:	2b78      	cmp	r3, #120	@ 0x78
 8012344:	d806      	bhi.n	8012354 <__ssvfiscanf_r+0xd0>
 8012346:	2b57      	cmp	r3, #87	@ 0x57
 8012348:	d810      	bhi.n	801236c <__ssvfiscanf_r+0xe8>
 801234a:	2b25      	cmp	r3, #37	@ 0x25
 801234c:	d05d      	beq.n	801240a <__ssvfiscanf_r+0x186>
 801234e:	d857      	bhi.n	8012400 <__ssvfiscanf_r+0x17c>
 8012350:	2b00      	cmp	r3, #0
 8012352:	d075      	beq.n	8012440 <__ssvfiscanf_r+0x1bc>
 8012354:	2303      	movs	r3, #3
 8012356:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012358:	230a      	movs	r3, #10
 801235a:	9342      	str	r3, [sp, #264]	@ 0x108
 801235c:	e088      	b.n	8012470 <__ssvfiscanf_r+0x1ec>
 801235e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012360:	fb02 1103 	mla	r1, r2, r3, r1
 8012364:	3930      	subs	r1, #48	@ 0x30
 8012366:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012368:	4655      	mov	r5, sl
 801236a:	e7d2      	b.n	8012312 <__ssvfiscanf_r+0x8e>
 801236c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012370:	2a20      	cmp	r2, #32
 8012372:	d8ef      	bhi.n	8012354 <__ssvfiscanf_r+0xd0>
 8012374:	a101      	add	r1, pc, #4	@ (adr r1, 801237c <__ssvfiscanf_r+0xf8>)
 8012376:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801237a:	bf00      	nop
 801237c:	0801244f 	.word	0x0801244f
 8012380:	08012355 	.word	0x08012355
 8012384:	08012355 	.word	0x08012355
 8012388:	080124a9 	.word	0x080124a9
 801238c:	08012355 	.word	0x08012355
 8012390:	08012355 	.word	0x08012355
 8012394:	08012355 	.word	0x08012355
 8012398:	08012355 	.word	0x08012355
 801239c:	08012355 	.word	0x08012355
 80123a0:	08012355 	.word	0x08012355
 80123a4:	08012355 	.word	0x08012355
 80123a8:	080124bf 	.word	0x080124bf
 80123ac:	080124a5 	.word	0x080124a5
 80123b0:	08012407 	.word	0x08012407
 80123b4:	08012407 	.word	0x08012407
 80123b8:	08012407 	.word	0x08012407
 80123bc:	08012355 	.word	0x08012355
 80123c0:	08012461 	.word	0x08012461
 80123c4:	08012355 	.word	0x08012355
 80123c8:	08012355 	.word	0x08012355
 80123cc:	08012355 	.word	0x08012355
 80123d0:	08012355 	.word	0x08012355
 80123d4:	080124cf 	.word	0x080124cf
 80123d8:	08012469 	.word	0x08012469
 80123dc:	08012447 	.word	0x08012447
 80123e0:	08012355 	.word	0x08012355
 80123e4:	08012355 	.word	0x08012355
 80123e8:	080124cb 	.word	0x080124cb
 80123ec:	08012355 	.word	0x08012355
 80123f0:	080124a5 	.word	0x080124a5
 80123f4:	08012355 	.word	0x08012355
 80123f8:	08012355 	.word	0x08012355
 80123fc:	0801244f 	.word	0x0801244f
 8012400:	3b45      	subs	r3, #69	@ 0x45
 8012402:	2b02      	cmp	r3, #2
 8012404:	d8a6      	bhi.n	8012354 <__ssvfiscanf_r+0xd0>
 8012406:	2305      	movs	r3, #5
 8012408:	e031      	b.n	801246e <__ssvfiscanf_r+0x1ea>
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	dd0d      	ble.n	801242c <__ssvfiscanf_r+0x1a8>
 8012410:	6823      	ldr	r3, [r4, #0]
 8012412:	781a      	ldrb	r2, [r3, #0]
 8012414:	454a      	cmp	r2, r9
 8012416:	f040 80a6 	bne.w	8012566 <__ssvfiscanf_r+0x2e2>
 801241a:	3301      	adds	r3, #1
 801241c:	6862      	ldr	r2, [r4, #4]
 801241e:	6023      	str	r3, [r4, #0]
 8012420:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012422:	3a01      	subs	r2, #1
 8012424:	3301      	adds	r3, #1
 8012426:	6062      	str	r2, [r4, #4]
 8012428:	9345      	str	r3, [sp, #276]	@ 0x114
 801242a:	e753      	b.n	80122d4 <__ssvfiscanf_r+0x50>
 801242c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801242e:	4621      	mov	r1, r4
 8012430:	4630      	mov	r0, r6
 8012432:	4798      	blx	r3
 8012434:	2800      	cmp	r0, #0
 8012436:	d0eb      	beq.n	8012410 <__ssvfiscanf_r+0x18c>
 8012438:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801243a:	2800      	cmp	r0, #0
 801243c:	f040 808b 	bne.w	8012556 <__ssvfiscanf_r+0x2d2>
 8012440:	f04f 30ff 	mov.w	r0, #4294967295
 8012444:	e08b      	b.n	801255e <__ssvfiscanf_r+0x2da>
 8012446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012448:	f042 0220 	orr.w	r2, r2, #32
 801244c:	9241      	str	r2, [sp, #260]	@ 0x104
 801244e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012454:	9241      	str	r2, [sp, #260]	@ 0x104
 8012456:	2210      	movs	r2, #16
 8012458:	2b6e      	cmp	r3, #110	@ 0x6e
 801245a:	9242      	str	r2, [sp, #264]	@ 0x108
 801245c:	d902      	bls.n	8012464 <__ssvfiscanf_r+0x1e0>
 801245e:	e005      	b.n	801246c <__ssvfiscanf_r+0x1e8>
 8012460:	2300      	movs	r3, #0
 8012462:	9342      	str	r3, [sp, #264]	@ 0x108
 8012464:	2303      	movs	r3, #3
 8012466:	e002      	b.n	801246e <__ssvfiscanf_r+0x1ea>
 8012468:	2308      	movs	r3, #8
 801246a:	9342      	str	r3, [sp, #264]	@ 0x108
 801246c:	2304      	movs	r3, #4
 801246e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	2b00      	cmp	r3, #0
 8012474:	dd39      	ble.n	80124ea <__ssvfiscanf_r+0x266>
 8012476:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012478:	0659      	lsls	r1, r3, #25
 801247a:	d404      	bmi.n	8012486 <__ssvfiscanf_r+0x202>
 801247c:	6823      	ldr	r3, [r4, #0]
 801247e:	781a      	ldrb	r2, [r3, #0]
 8012480:	5cba      	ldrb	r2, [r7, r2]
 8012482:	0712      	lsls	r2, r2, #28
 8012484:	d438      	bmi.n	80124f8 <__ssvfiscanf_r+0x274>
 8012486:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012488:	2b02      	cmp	r3, #2
 801248a:	dc47      	bgt.n	801251c <__ssvfiscanf_r+0x298>
 801248c:	466b      	mov	r3, sp
 801248e:	4622      	mov	r2, r4
 8012490:	a941      	add	r1, sp, #260	@ 0x104
 8012492:	4630      	mov	r0, r6
 8012494:	f000 f9ae 	bl	80127f4 <_scanf_chars>
 8012498:	2801      	cmp	r0, #1
 801249a:	d064      	beq.n	8012566 <__ssvfiscanf_r+0x2e2>
 801249c:	2802      	cmp	r0, #2
 801249e:	f47f af19 	bne.w	80122d4 <__ssvfiscanf_r+0x50>
 80124a2:	e7c9      	b.n	8012438 <__ssvfiscanf_r+0x1b4>
 80124a4:	220a      	movs	r2, #10
 80124a6:	e7d7      	b.n	8012458 <__ssvfiscanf_r+0x1d4>
 80124a8:	4629      	mov	r1, r5
 80124aa:	4640      	mov	r0, r8
 80124ac:	f000 fbfe 	bl	8012cac <__sccl>
 80124b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80124b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80124b8:	4605      	mov	r5, r0
 80124ba:	2301      	movs	r3, #1
 80124bc:	e7d7      	b.n	801246e <__ssvfiscanf_r+0x1ea>
 80124be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80124c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80124c6:	2300      	movs	r3, #0
 80124c8:	e7d1      	b.n	801246e <__ssvfiscanf_r+0x1ea>
 80124ca:	2302      	movs	r3, #2
 80124cc:	e7cf      	b.n	801246e <__ssvfiscanf_r+0x1ea>
 80124ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80124d0:	06c3      	lsls	r3, r0, #27
 80124d2:	f53f aeff 	bmi.w	80122d4 <__ssvfiscanf_r+0x50>
 80124d6:	9b00      	ldr	r3, [sp, #0]
 80124d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124da:	1d19      	adds	r1, r3, #4
 80124dc:	9100      	str	r1, [sp, #0]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	07c0      	lsls	r0, r0, #31
 80124e2:	bf4c      	ite	mi
 80124e4:	801a      	strhmi	r2, [r3, #0]
 80124e6:	601a      	strpl	r2, [r3, #0]
 80124e8:	e6f4      	b.n	80122d4 <__ssvfiscanf_r+0x50>
 80124ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124ec:	4621      	mov	r1, r4
 80124ee:	4630      	mov	r0, r6
 80124f0:	4798      	blx	r3
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d0bf      	beq.n	8012476 <__ssvfiscanf_r+0x1f2>
 80124f6:	e79f      	b.n	8012438 <__ssvfiscanf_r+0x1b4>
 80124f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124fa:	3201      	adds	r2, #1
 80124fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80124fe:	6862      	ldr	r2, [r4, #4]
 8012500:	3a01      	subs	r2, #1
 8012502:	2a00      	cmp	r2, #0
 8012504:	6062      	str	r2, [r4, #4]
 8012506:	dd02      	ble.n	801250e <__ssvfiscanf_r+0x28a>
 8012508:	3301      	adds	r3, #1
 801250a:	6023      	str	r3, [r4, #0]
 801250c:	e7b6      	b.n	801247c <__ssvfiscanf_r+0x1f8>
 801250e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012510:	4621      	mov	r1, r4
 8012512:	4630      	mov	r0, r6
 8012514:	4798      	blx	r3
 8012516:	2800      	cmp	r0, #0
 8012518:	d0b0      	beq.n	801247c <__ssvfiscanf_r+0x1f8>
 801251a:	e78d      	b.n	8012438 <__ssvfiscanf_r+0x1b4>
 801251c:	2b04      	cmp	r3, #4
 801251e:	dc0f      	bgt.n	8012540 <__ssvfiscanf_r+0x2bc>
 8012520:	466b      	mov	r3, sp
 8012522:	4622      	mov	r2, r4
 8012524:	a941      	add	r1, sp, #260	@ 0x104
 8012526:	4630      	mov	r0, r6
 8012528:	f000 f9be 	bl	80128a8 <_scanf_i>
 801252c:	e7b4      	b.n	8012498 <__ssvfiscanf_r+0x214>
 801252e:	bf00      	nop
 8012530:	080121d1 	.word	0x080121d1
 8012534:	0801224b 	.word	0x0801224b
 8012538:	08013461 	.word	0x08013461
 801253c:	080133ad 	.word	0x080133ad
 8012540:	4b0a      	ldr	r3, [pc, #40]	@ (801256c <__ssvfiscanf_r+0x2e8>)
 8012542:	2b00      	cmp	r3, #0
 8012544:	f43f aec6 	beq.w	80122d4 <__ssvfiscanf_r+0x50>
 8012548:	466b      	mov	r3, sp
 801254a:	4622      	mov	r2, r4
 801254c:	a941      	add	r1, sp, #260	@ 0x104
 801254e:	4630      	mov	r0, r6
 8012550:	f7fd f910 	bl	800f774 <_scanf_float>
 8012554:	e7a0      	b.n	8012498 <__ssvfiscanf_r+0x214>
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	065b      	lsls	r3, r3, #25
 801255a:	f53f af71 	bmi.w	8012440 <__ssvfiscanf_r+0x1bc>
 801255e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012566:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012568:	e7f9      	b.n	801255e <__ssvfiscanf_r+0x2da>
 801256a:	bf00      	nop
 801256c:	0800f775 	.word	0x0800f775

08012570 <__sfputc_r>:
 8012570:	6893      	ldr	r3, [r2, #8]
 8012572:	3b01      	subs	r3, #1
 8012574:	2b00      	cmp	r3, #0
 8012576:	b410      	push	{r4}
 8012578:	6093      	str	r3, [r2, #8]
 801257a:	da08      	bge.n	801258e <__sfputc_r+0x1e>
 801257c:	6994      	ldr	r4, [r2, #24]
 801257e:	42a3      	cmp	r3, r4
 8012580:	db01      	blt.n	8012586 <__sfputc_r+0x16>
 8012582:	290a      	cmp	r1, #10
 8012584:	d103      	bne.n	801258e <__sfputc_r+0x1e>
 8012586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801258a:	f7fd bcbe 	b.w	800ff0a <__swbuf_r>
 801258e:	6813      	ldr	r3, [r2, #0]
 8012590:	1c58      	adds	r0, r3, #1
 8012592:	6010      	str	r0, [r2, #0]
 8012594:	7019      	strb	r1, [r3, #0]
 8012596:	4608      	mov	r0, r1
 8012598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801259c:	4770      	bx	lr

0801259e <__sfputs_r>:
 801259e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125a0:	4606      	mov	r6, r0
 80125a2:	460f      	mov	r7, r1
 80125a4:	4614      	mov	r4, r2
 80125a6:	18d5      	adds	r5, r2, r3
 80125a8:	42ac      	cmp	r4, r5
 80125aa:	d101      	bne.n	80125b0 <__sfputs_r+0x12>
 80125ac:	2000      	movs	r0, #0
 80125ae:	e007      	b.n	80125c0 <__sfputs_r+0x22>
 80125b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125b4:	463a      	mov	r2, r7
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7ff ffda 	bl	8012570 <__sfputc_r>
 80125bc:	1c43      	adds	r3, r0, #1
 80125be:	d1f3      	bne.n	80125a8 <__sfputs_r+0xa>
 80125c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080125c4 <_vfiprintf_r>:
 80125c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c8:	460d      	mov	r5, r1
 80125ca:	b09d      	sub	sp, #116	@ 0x74
 80125cc:	4614      	mov	r4, r2
 80125ce:	4698      	mov	r8, r3
 80125d0:	4606      	mov	r6, r0
 80125d2:	b118      	cbz	r0, 80125dc <_vfiprintf_r+0x18>
 80125d4:	6a03      	ldr	r3, [r0, #32]
 80125d6:	b90b      	cbnz	r3, 80125dc <_vfiprintf_r+0x18>
 80125d8:	f7fd fb5e 	bl	800fc98 <__sinit>
 80125dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125de:	07d9      	lsls	r1, r3, #31
 80125e0:	d405      	bmi.n	80125ee <_vfiprintf_r+0x2a>
 80125e2:	89ab      	ldrh	r3, [r5, #12]
 80125e4:	059a      	lsls	r2, r3, #22
 80125e6:	d402      	bmi.n	80125ee <_vfiprintf_r+0x2a>
 80125e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125ea:	f7fd fdc2 	bl	8010172 <__retarget_lock_acquire_recursive>
 80125ee:	89ab      	ldrh	r3, [r5, #12]
 80125f0:	071b      	lsls	r3, r3, #28
 80125f2:	d501      	bpl.n	80125f8 <_vfiprintf_r+0x34>
 80125f4:	692b      	ldr	r3, [r5, #16]
 80125f6:	b99b      	cbnz	r3, 8012620 <_vfiprintf_r+0x5c>
 80125f8:	4629      	mov	r1, r5
 80125fa:	4630      	mov	r0, r6
 80125fc:	f7fd fcc4 	bl	800ff88 <__swsetup_r>
 8012600:	b170      	cbz	r0, 8012620 <_vfiprintf_r+0x5c>
 8012602:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012604:	07dc      	lsls	r4, r3, #31
 8012606:	d504      	bpl.n	8012612 <_vfiprintf_r+0x4e>
 8012608:	f04f 30ff 	mov.w	r0, #4294967295
 801260c:	b01d      	add	sp, #116	@ 0x74
 801260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012612:	89ab      	ldrh	r3, [r5, #12]
 8012614:	0598      	lsls	r0, r3, #22
 8012616:	d4f7      	bmi.n	8012608 <_vfiprintf_r+0x44>
 8012618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801261a:	f7fd fdab 	bl	8010174 <__retarget_lock_release_recursive>
 801261e:	e7f3      	b.n	8012608 <_vfiprintf_r+0x44>
 8012620:	2300      	movs	r3, #0
 8012622:	9309      	str	r3, [sp, #36]	@ 0x24
 8012624:	2320      	movs	r3, #32
 8012626:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801262a:	f8cd 800c 	str.w	r8, [sp, #12]
 801262e:	2330      	movs	r3, #48	@ 0x30
 8012630:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80127e0 <_vfiprintf_r+0x21c>
 8012634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012638:	f04f 0901 	mov.w	r9, #1
 801263c:	4623      	mov	r3, r4
 801263e:	469a      	mov	sl, r3
 8012640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012644:	b10a      	cbz	r2, 801264a <_vfiprintf_r+0x86>
 8012646:	2a25      	cmp	r2, #37	@ 0x25
 8012648:	d1f9      	bne.n	801263e <_vfiprintf_r+0x7a>
 801264a:	ebba 0b04 	subs.w	fp, sl, r4
 801264e:	d00b      	beq.n	8012668 <_vfiprintf_r+0xa4>
 8012650:	465b      	mov	r3, fp
 8012652:	4622      	mov	r2, r4
 8012654:	4629      	mov	r1, r5
 8012656:	4630      	mov	r0, r6
 8012658:	f7ff ffa1 	bl	801259e <__sfputs_r>
 801265c:	3001      	adds	r0, #1
 801265e:	f000 80a7 	beq.w	80127b0 <_vfiprintf_r+0x1ec>
 8012662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012664:	445a      	add	r2, fp
 8012666:	9209      	str	r2, [sp, #36]	@ 0x24
 8012668:	f89a 3000 	ldrb.w	r3, [sl]
 801266c:	2b00      	cmp	r3, #0
 801266e:	f000 809f 	beq.w	80127b0 <_vfiprintf_r+0x1ec>
 8012672:	2300      	movs	r3, #0
 8012674:	f04f 32ff 	mov.w	r2, #4294967295
 8012678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801267c:	f10a 0a01 	add.w	sl, sl, #1
 8012680:	9304      	str	r3, [sp, #16]
 8012682:	9307      	str	r3, [sp, #28]
 8012684:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012688:	931a      	str	r3, [sp, #104]	@ 0x68
 801268a:	4654      	mov	r4, sl
 801268c:	2205      	movs	r2, #5
 801268e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012692:	4853      	ldr	r0, [pc, #332]	@ (80127e0 <_vfiprintf_r+0x21c>)
 8012694:	f7ed fe24 	bl	80002e0 <memchr>
 8012698:	9a04      	ldr	r2, [sp, #16]
 801269a:	b9d8      	cbnz	r0, 80126d4 <_vfiprintf_r+0x110>
 801269c:	06d1      	lsls	r1, r2, #27
 801269e:	bf44      	itt	mi
 80126a0:	2320      	movmi	r3, #32
 80126a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126a6:	0713      	lsls	r3, r2, #28
 80126a8:	bf44      	itt	mi
 80126aa:	232b      	movmi	r3, #43	@ 0x2b
 80126ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126b0:	f89a 3000 	ldrb.w	r3, [sl]
 80126b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80126b6:	d015      	beq.n	80126e4 <_vfiprintf_r+0x120>
 80126b8:	9a07      	ldr	r2, [sp, #28]
 80126ba:	4654      	mov	r4, sl
 80126bc:	2000      	movs	r0, #0
 80126be:	f04f 0c0a 	mov.w	ip, #10
 80126c2:	4621      	mov	r1, r4
 80126c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126c8:	3b30      	subs	r3, #48	@ 0x30
 80126ca:	2b09      	cmp	r3, #9
 80126cc:	d94b      	bls.n	8012766 <_vfiprintf_r+0x1a2>
 80126ce:	b1b0      	cbz	r0, 80126fe <_vfiprintf_r+0x13a>
 80126d0:	9207      	str	r2, [sp, #28]
 80126d2:	e014      	b.n	80126fe <_vfiprintf_r+0x13a>
 80126d4:	eba0 0308 	sub.w	r3, r0, r8
 80126d8:	fa09 f303 	lsl.w	r3, r9, r3
 80126dc:	4313      	orrs	r3, r2
 80126de:	9304      	str	r3, [sp, #16]
 80126e0:	46a2      	mov	sl, r4
 80126e2:	e7d2      	b.n	801268a <_vfiprintf_r+0xc6>
 80126e4:	9b03      	ldr	r3, [sp, #12]
 80126e6:	1d19      	adds	r1, r3, #4
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	9103      	str	r1, [sp, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	bfbb      	ittet	lt
 80126f0:	425b      	neglt	r3, r3
 80126f2:	f042 0202 	orrlt.w	r2, r2, #2
 80126f6:	9307      	strge	r3, [sp, #28]
 80126f8:	9307      	strlt	r3, [sp, #28]
 80126fa:	bfb8      	it	lt
 80126fc:	9204      	strlt	r2, [sp, #16]
 80126fe:	7823      	ldrb	r3, [r4, #0]
 8012700:	2b2e      	cmp	r3, #46	@ 0x2e
 8012702:	d10a      	bne.n	801271a <_vfiprintf_r+0x156>
 8012704:	7863      	ldrb	r3, [r4, #1]
 8012706:	2b2a      	cmp	r3, #42	@ 0x2a
 8012708:	d132      	bne.n	8012770 <_vfiprintf_r+0x1ac>
 801270a:	9b03      	ldr	r3, [sp, #12]
 801270c:	1d1a      	adds	r2, r3, #4
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	9203      	str	r2, [sp, #12]
 8012712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012716:	3402      	adds	r4, #2
 8012718:	9305      	str	r3, [sp, #20]
 801271a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80127f0 <_vfiprintf_r+0x22c>
 801271e:	7821      	ldrb	r1, [r4, #0]
 8012720:	2203      	movs	r2, #3
 8012722:	4650      	mov	r0, sl
 8012724:	f7ed fddc 	bl	80002e0 <memchr>
 8012728:	b138      	cbz	r0, 801273a <_vfiprintf_r+0x176>
 801272a:	9b04      	ldr	r3, [sp, #16]
 801272c:	eba0 000a 	sub.w	r0, r0, sl
 8012730:	2240      	movs	r2, #64	@ 0x40
 8012732:	4082      	lsls	r2, r0
 8012734:	4313      	orrs	r3, r2
 8012736:	3401      	adds	r4, #1
 8012738:	9304      	str	r3, [sp, #16]
 801273a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801273e:	4829      	ldr	r0, [pc, #164]	@ (80127e4 <_vfiprintf_r+0x220>)
 8012740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012744:	2206      	movs	r2, #6
 8012746:	f7ed fdcb 	bl	80002e0 <memchr>
 801274a:	2800      	cmp	r0, #0
 801274c:	d03f      	beq.n	80127ce <_vfiprintf_r+0x20a>
 801274e:	4b26      	ldr	r3, [pc, #152]	@ (80127e8 <_vfiprintf_r+0x224>)
 8012750:	bb1b      	cbnz	r3, 801279a <_vfiprintf_r+0x1d6>
 8012752:	9b03      	ldr	r3, [sp, #12]
 8012754:	3307      	adds	r3, #7
 8012756:	f023 0307 	bic.w	r3, r3, #7
 801275a:	3308      	adds	r3, #8
 801275c:	9303      	str	r3, [sp, #12]
 801275e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012760:	443b      	add	r3, r7
 8012762:	9309      	str	r3, [sp, #36]	@ 0x24
 8012764:	e76a      	b.n	801263c <_vfiprintf_r+0x78>
 8012766:	fb0c 3202 	mla	r2, ip, r2, r3
 801276a:	460c      	mov	r4, r1
 801276c:	2001      	movs	r0, #1
 801276e:	e7a8      	b.n	80126c2 <_vfiprintf_r+0xfe>
 8012770:	2300      	movs	r3, #0
 8012772:	3401      	adds	r4, #1
 8012774:	9305      	str	r3, [sp, #20]
 8012776:	4619      	mov	r1, r3
 8012778:	f04f 0c0a 	mov.w	ip, #10
 801277c:	4620      	mov	r0, r4
 801277e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012782:	3a30      	subs	r2, #48	@ 0x30
 8012784:	2a09      	cmp	r2, #9
 8012786:	d903      	bls.n	8012790 <_vfiprintf_r+0x1cc>
 8012788:	2b00      	cmp	r3, #0
 801278a:	d0c6      	beq.n	801271a <_vfiprintf_r+0x156>
 801278c:	9105      	str	r1, [sp, #20]
 801278e:	e7c4      	b.n	801271a <_vfiprintf_r+0x156>
 8012790:	fb0c 2101 	mla	r1, ip, r1, r2
 8012794:	4604      	mov	r4, r0
 8012796:	2301      	movs	r3, #1
 8012798:	e7f0      	b.n	801277c <_vfiprintf_r+0x1b8>
 801279a:	ab03      	add	r3, sp, #12
 801279c:	9300      	str	r3, [sp, #0]
 801279e:	462a      	mov	r2, r5
 80127a0:	4b12      	ldr	r3, [pc, #72]	@ (80127ec <_vfiprintf_r+0x228>)
 80127a2:	a904      	add	r1, sp, #16
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7fc fc3f 	bl	800f028 <_printf_float>
 80127aa:	4607      	mov	r7, r0
 80127ac:	1c78      	adds	r0, r7, #1
 80127ae:	d1d6      	bne.n	801275e <_vfiprintf_r+0x19a>
 80127b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127b2:	07d9      	lsls	r1, r3, #31
 80127b4:	d405      	bmi.n	80127c2 <_vfiprintf_r+0x1fe>
 80127b6:	89ab      	ldrh	r3, [r5, #12]
 80127b8:	059a      	lsls	r2, r3, #22
 80127ba:	d402      	bmi.n	80127c2 <_vfiprintf_r+0x1fe>
 80127bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80127be:	f7fd fcd9 	bl	8010174 <__retarget_lock_release_recursive>
 80127c2:	89ab      	ldrh	r3, [r5, #12]
 80127c4:	065b      	lsls	r3, r3, #25
 80127c6:	f53f af1f 	bmi.w	8012608 <_vfiprintf_r+0x44>
 80127ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127cc:	e71e      	b.n	801260c <_vfiprintf_r+0x48>
 80127ce:	ab03      	add	r3, sp, #12
 80127d0:	9300      	str	r3, [sp, #0]
 80127d2:	462a      	mov	r2, r5
 80127d4:	4b05      	ldr	r3, [pc, #20]	@ (80127ec <_vfiprintf_r+0x228>)
 80127d6:	a904      	add	r1, sp, #16
 80127d8:	4630      	mov	r0, r6
 80127da:	f7fc fead 	bl	800f538 <_printf_i>
 80127de:	e7e4      	b.n	80127aa <_vfiprintf_r+0x1e6>
 80127e0:	080133a7 	.word	0x080133a7
 80127e4:	080133b1 	.word	0x080133b1
 80127e8:	0800f029 	.word	0x0800f029
 80127ec:	0801259f 	.word	0x0801259f
 80127f0:	080133ad 	.word	0x080133ad

080127f4 <_scanf_chars>:
 80127f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127f8:	4615      	mov	r5, r2
 80127fa:	688a      	ldr	r2, [r1, #8]
 80127fc:	4680      	mov	r8, r0
 80127fe:	460c      	mov	r4, r1
 8012800:	b932      	cbnz	r2, 8012810 <_scanf_chars+0x1c>
 8012802:	698a      	ldr	r2, [r1, #24]
 8012804:	2a00      	cmp	r2, #0
 8012806:	bf14      	ite	ne
 8012808:	f04f 32ff 	movne.w	r2, #4294967295
 801280c:	2201      	moveq	r2, #1
 801280e:	608a      	str	r2, [r1, #8]
 8012810:	6822      	ldr	r2, [r4, #0]
 8012812:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80128a4 <_scanf_chars+0xb0>
 8012816:	06d1      	lsls	r1, r2, #27
 8012818:	bf5f      	itttt	pl
 801281a:	681a      	ldrpl	r2, [r3, #0]
 801281c:	1d11      	addpl	r1, r2, #4
 801281e:	6019      	strpl	r1, [r3, #0]
 8012820:	6816      	ldrpl	r6, [r2, #0]
 8012822:	2700      	movs	r7, #0
 8012824:	69a0      	ldr	r0, [r4, #24]
 8012826:	b188      	cbz	r0, 801284c <_scanf_chars+0x58>
 8012828:	2801      	cmp	r0, #1
 801282a:	d107      	bne.n	801283c <_scanf_chars+0x48>
 801282c:	682b      	ldr	r3, [r5, #0]
 801282e:	781a      	ldrb	r2, [r3, #0]
 8012830:	6963      	ldr	r3, [r4, #20]
 8012832:	5c9b      	ldrb	r3, [r3, r2]
 8012834:	b953      	cbnz	r3, 801284c <_scanf_chars+0x58>
 8012836:	2f00      	cmp	r7, #0
 8012838:	d031      	beq.n	801289e <_scanf_chars+0xaa>
 801283a:	e022      	b.n	8012882 <_scanf_chars+0x8e>
 801283c:	2802      	cmp	r0, #2
 801283e:	d120      	bne.n	8012882 <_scanf_chars+0x8e>
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012848:	071b      	lsls	r3, r3, #28
 801284a:	d41a      	bmi.n	8012882 <_scanf_chars+0x8e>
 801284c:	6823      	ldr	r3, [r4, #0]
 801284e:	06da      	lsls	r2, r3, #27
 8012850:	bf5e      	ittt	pl
 8012852:	682b      	ldrpl	r3, [r5, #0]
 8012854:	781b      	ldrbpl	r3, [r3, #0]
 8012856:	f806 3b01 	strbpl.w	r3, [r6], #1
 801285a:	682a      	ldr	r2, [r5, #0]
 801285c:	686b      	ldr	r3, [r5, #4]
 801285e:	3201      	adds	r2, #1
 8012860:	602a      	str	r2, [r5, #0]
 8012862:	68a2      	ldr	r2, [r4, #8]
 8012864:	3b01      	subs	r3, #1
 8012866:	3a01      	subs	r2, #1
 8012868:	606b      	str	r3, [r5, #4]
 801286a:	3701      	adds	r7, #1
 801286c:	60a2      	str	r2, [r4, #8]
 801286e:	b142      	cbz	r2, 8012882 <_scanf_chars+0x8e>
 8012870:	2b00      	cmp	r3, #0
 8012872:	dcd7      	bgt.n	8012824 <_scanf_chars+0x30>
 8012874:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012878:	4629      	mov	r1, r5
 801287a:	4640      	mov	r0, r8
 801287c:	4798      	blx	r3
 801287e:	2800      	cmp	r0, #0
 8012880:	d0d0      	beq.n	8012824 <_scanf_chars+0x30>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	f013 0310 	ands.w	r3, r3, #16
 8012888:	d105      	bne.n	8012896 <_scanf_chars+0xa2>
 801288a:	68e2      	ldr	r2, [r4, #12]
 801288c:	3201      	adds	r2, #1
 801288e:	60e2      	str	r2, [r4, #12]
 8012890:	69a2      	ldr	r2, [r4, #24]
 8012892:	b102      	cbz	r2, 8012896 <_scanf_chars+0xa2>
 8012894:	7033      	strb	r3, [r6, #0]
 8012896:	6923      	ldr	r3, [r4, #16]
 8012898:	443b      	add	r3, r7
 801289a:	6123      	str	r3, [r4, #16]
 801289c:	2000      	movs	r0, #0
 801289e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128a2:	bf00      	nop
 80128a4:	08013461 	.word	0x08013461

080128a8 <_scanf_i>:
 80128a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ac:	4698      	mov	r8, r3
 80128ae:	4b74      	ldr	r3, [pc, #464]	@ (8012a80 <_scanf_i+0x1d8>)
 80128b0:	460c      	mov	r4, r1
 80128b2:	4682      	mov	sl, r0
 80128b4:	4616      	mov	r6, r2
 80128b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128ba:	b087      	sub	sp, #28
 80128bc:	ab03      	add	r3, sp, #12
 80128be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80128c2:	4b70      	ldr	r3, [pc, #448]	@ (8012a84 <_scanf_i+0x1dc>)
 80128c4:	69a1      	ldr	r1, [r4, #24]
 80128c6:	4a70      	ldr	r2, [pc, #448]	@ (8012a88 <_scanf_i+0x1e0>)
 80128c8:	2903      	cmp	r1, #3
 80128ca:	bf08      	it	eq
 80128cc:	461a      	moveq	r2, r3
 80128ce:	68a3      	ldr	r3, [r4, #8]
 80128d0:	9201      	str	r2, [sp, #4]
 80128d2:	1e5a      	subs	r2, r3, #1
 80128d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80128d8:	bf88      	it	hi
 80128da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80128de:	4627      	mov	r7, r4
 80128e0:	bf82      	ittt	hi
 80128e2:	eb03 0905 	addhi.w	r9, r3, r5
 80128e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80128ea:	60a3      	strhi	r3, [r4, #8]
 80128ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80128f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80128f4:	bf98      	it	ls
 80128f6:	f04f 0900 	movls.w	r9, #0
 80128fa:	6023      	str	r3, [r4, #0]
 80128fc:	463d      	mov	r5, r7
 80128fe:	f04f 0b00 	mov.w	fp, #0
 8012902:	6831      	ldr	r1, [r6, #0]
 8012904:	ab03      	add	r3, sp, #12
 8012906:	7809      	ldrb	r1, [r1, #0]
 8012908:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801290c:	2202      	movs	r2, #2
 801290e:	f7ed fce7 	bl	80002e0 <memchr>
 8012912:	b328      	cbz	r0, 8012960 <_scanf_i+0xb8>
 8012914:	f1bb 0f01 	cmp.w	fp, #1
 8012918:	d159      	bne.n	80129ce <_scanf_i+0x126>
 801291a:	6862      	ldr	r2, [r4, #4]
 801291c:	b92a      	cbnz	r2, 801292a <_scanf_i+0x82>
 801291e:	6822      	ldr	r2, [r4, #0]
 8012920:	2108      	movs	r1, #8
 8012922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012926:	6061      	str	r1, [r4, #4]
 8012928:	6022      	str	r2, [r4, #0]
 801292a:	6822      	ldr	r2, [r4, #0]
 801292c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012930:	6022      	str	r2, [r4, #0]
 8012932:	68a2      	ldr	r2, [r4, #8]
 8012934:	1e51      	subs	r1, r2, #1
 8012936:	60a1      	str	r1, [r4, #8]
 8012938:	b192      	cbz	r2, 8012960 <_scanf_i+0xb8>
 801293a:	6832      	ldr	r2, [r6, #0]
 801293c:	1c51      	adds	r1, r2, #1
 801293e:	6031      	str	r1, [r6, #0]
 8012940:	7812      	ldrb	r2, [r2, #0]
 8012942:	f805 2b01 	strb.w	r2, [r5], #1
 8012946:	6872      	ldr	r2, [r6, #4]
 8012948:	3a01      	subs	r2, #1
 801294a:	2a00      	cmp	r2, #0
 801294c:	6072      	str	r2, [r6, #4]
 801294e:	dc07      	bgt.n	8012960 <_scanf_i+0xb8>
 8012950:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012954:	4631      	mov	r1, r6
 8012956:	4650      	mov	r0, sl
 8012958:	4790      	blx	r2
 801295a:	2800      	cmp	r0, #0
 801295c:	f040 8085 	bne.w	8012a6a <_scanf_i+0x1c2>
 8012960:	f10b 0b01 	add.w	fp, fp, #1
 8012964:	f1bb 0f03 	cmp.w	fp, #3
 8012968:	d1cb      	bne.n	8012902 <_scanf_i+0x5a>
 801296a:	6863      	ldr	r3, [r4, #4]
 801296c:	b90b      	cbnz	r3, 8012972 <_scanf_i+0xca>
 801296e:	230a      	movs	r3, #10
 8012970:	6063      	str	r3, [r4, #4]
 8012972:	6863      	ldr	r3, [r4, #4]
 8012974:	4945      	ldr	r1, [pc, #276]	@ (8012a8c <_scanf_i+0x1e4>)
 8012976:	6960      	ldr	r0, [r4, #20]
 8012978:	1ac9      	subs	r1, r1, r3
 801297a:	f000 f997 	bl	8012cac <__sccl>
 801297e:	f04f 0b00 	mov.w	fp, #0
 8012982:	68a3      	ldr	r3, [r4, #8]
 8012984:	6822      	ldr	r2, [r4, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d03d      	beq.n	8012a06 <_scanf_i+0x15e>
 801298a:	6831      	ldr	r1, [r6, #0]
 801298c:	6960      	ldr	r0, [r4, #20]
 801298e:	f891 c000 	ldrb.w	ip, [r1]
 8012992:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012996:	2800      	cmp	r0, #0
 8012998:	d035      	beq.n	8012a06 <_scanf_i+0x15e>
 801299a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801299e:	d124      	bne.n	80129ea <_scanf_i+0x142>
 80129a0:	0510      	lsls	r0, r2, #20
 80129a2:	d522      	bpl.n	80129ea <_scanf_i+0x142>
 80129a4:	f10b 0b01 	add.w	fp, fp, #1
 80129a8:	f1b9 0f00 	cmp.w	r9, #0
 80129ac:	d003      	beq.n	80129b6 <_scanf_i+0x10e>
 80129ae:	3301      	adds	r3, #1
 80129b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80129b4:	60a3      	str	r3, [r4, #8]
 80129b6:	6873      	ldr	r3, [r6, #4]
 80129b8:	3b01      	subs	r3, #1
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	6073      	str	r3, [r6, #4]
 80129be:	dd1b      	ble.n	80129f8 <_scanf_i+0x150>
 80129c0:	6833      	ldr	r3, [r6, #0]
 80129c2:	3301      	adds	r3, #1
 80129c4:	6033      	str	r3, [r6, #0]
 80129c6:	68a3      	ldr	r3, [r4, #8]
 80129c8:	3b01      	subs	r3, #1
 80129ca:	60a3      	str	r3, [r4, #8]
 80129cc:	e7d9      	b.n	8012982 <_scanf_i+0xda>
 80129ce:	f1bb 0f02 	cmp.w	fp, #2
 80129d2:	d1ae      	bne.n	8012932 <_scanf_i+0x8a>
 80129d4:	6822      	ldr	r2, [r4, #0]
 80129d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80129da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80129de:	d1c4      	bne.n	801296a <_scanf_i+0xc2>
 80129e0:	2110      	movs	r1, #16
 80129e2:	6061      	str	r1, [r4, #4]
 80129e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80129e8:	e7a2      	b.n	8012930 <_scanf_i+0x88>
 80129ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80129ee:	6022      	str	r2, [r4, #0]
 80129f0:	780b      	ldrb	r3, [r1, #0]
 80129f2:	f805 3b01 	strb.w	r3, [r5], #1
 80129f6:	e7de      	b.n	80129b6 <_scanf_i+0x10e>
 80129f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80129fc:	4631      	mov	r1, r6
 80129fe:	4650      	mov	r0, sl
 8012a00:	4798      	blx	r3
 8012a02:	2800      	cmp	r0, #0
 8012a04:	d0df      	beq.n	80129c6 <_scanf_i+0x11e>
 8012a06:	6823      	ldr	r3, [r4, #0]
 8012a08:	05d9      	lsls	r1, r3, #23
 8012a0a:	d50d      	bpl.n	8012a28 <_scanf_i+0x180>
 8012a0c:	42bd      	cmp	r5, r7
 8012a0e:	d909      	bls.n	8012a24 <_scanf_i+0x17c>
 8012a10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a18:	4632      	mov	r2, r6
 8012a1a:	4650      	mov	r0, sl
 8012a1c:	4798      	blx	r3
 8012a1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012a22:	464d      	mov	r5, r9
 8012a24:	42bd      	cmp	r5, r7
 8012a26:	d028      	beq.n	8012a7a <_scanf_i+0x1d2>
 8012a28:	6822      	ldr	r2, [r4, #0]
 8012a2a:	f012 0210 	ands.w	r2, r2, #16
 8012a2e:	d113      	bne.n	8012a58 <_scanf_i+0x1b0>
 8012a30:	702a      	strb	r2, [r5, #0]
 8012a32:	6863      	ldr	r3, [r4, #4]
 8012a34:	9e01      	ldr	r6, [sp, #4]
 8012a36:	4639      	mov	r1, r7
 8012a38:	4650      	mov	r0, sl
 8012a3a:	47b0      	blx	r6
 8012a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8012a40:	6821      	ldr	r1, [r4, #0]
 8012a42:	1d1a      	adds	r2, r3, #4
 8012a44:	f8c8 2000 	str.w	r2, [r8]
 8012a48:	f011 0f20 	tst.w	r1, #32
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	d00f      	beq.n	8012a70 <_scanf_i+0x1c8>
 8012a50:	6018      	str	r0, [r3, #0]
 8012a52:	68e3      	ldr	r3, [r4, #12]
 8012a54:	3301      	adds	r3, #1
 8012a56:	60e3      	str	r3, [r4, #12]
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	1bed      	subs	r5, r5, r7
 8012a5c:	445d      	add	r5, fp
 8012a5e:	442b      	add	r3, r5
 8012a60:	6123      	str	r3, [r4, #16]
 8012a62:	2000      	movs	r0, #0
 8012a64:	b007      	add	sp, #28
 8012a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a6a:	f04f 0b00 	mov.w	fp, #0
 8012a6e:	e7ca      	b.n	8012a06 <_scanf_i+0x15e>
 8012a70:	07ca      	lsls	r2, r1, #31
 8012a72:	bf4c      	ite	mi
 8012a74:	8018      	strhmi	r0, [r3, #0]
 8012a76:	6018      	strpl	r0, [r3, #0]
 8012a78:	e7eb      	b.n	8012a52 <_scanf_i+0x1aa>
 8012a7a:	2001      	movs	r0, #1
 8012a7c:	e7f2      	b.n	8012a64 <_scanf_i+0x1bc>
 8012a7e:	bf00      	nop
 8012a80:	0801314c 	.word	0x0801314c
 8012a84:	08011f05 	.word	0x08011f05
 8012a88:	08012f4d 	.word	0x08012f4d
 8012a8c:	080133c8 	.word	0x080133c8

08012a90 <__sflush_r>:
 8012a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a98:	0716      	lsls	r6, r2, #28
 8012a9a:	4605      	mov	r5, r0
 8012a9c:	460c      	mov	r4, r1
 8012a9e:	d454      	bmi.n	8012b4a <__sflush_r+0xba>
 8012aa0:	684b      	ldr	r3, [r1, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	dc02      	bgt.n	8012aac <__sflush_r+0x1c>
 8012aa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	dd48      	ble.n	8012b3e <__sflush_r+0xae>
 8012aac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012aae:	2e00      	cmp	r6, #0
 8012ab0:	d045      	beq.n	8012b3e <__sflush_r+0xae>
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012ab8:	682f      	ldr	r7, [r5, #0]
 8012aba:	6a21      	ldr	r1, [r4, #32]
 8012abc:	602b      	str	r3, [r5, #0]
 8012abe:	d030      	beq.n	8012b22 <__sflush_r+0x92>
 8012ac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012ac2:	89a3      	ldrh	r3, [r4, #12]
 8012ac4:	0759      	lsls	r1, r3, #29
 8012ac6:	d505      	bpl.n	8012ad4 <__sflush_r+0x44>
 8012ac8:	6863      	ldr	r3, [r4, #4]
 8012aca:	1ad2      	subs	r2, r2, r3
 8012acc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ace:	b10b      	cbz	r3, 8012ad4 <__sflush_r+0x44>
 8012ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ad2:	1ad2      	subs	r2, r2, r3
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ad8:	6a21      	ldr	r1, [r4, #32]
 8012ada:	4628      	mov	r0, r5
 8012adc:	47b0      	blx	r6
 8012ade:	1c43      	adds	r3, r0, #1
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	d106      	bne.n	8012af2 <__sflush_r+0x62>
 8012ae4:	6829      	ldr	r1, [r5, #0]
 8012ae6:	291d      	cmp	r1, #29
 8012ae8:	d82b      	bhi.n	8012b42 <__sflush_r+0xb2>
 8012aea:	4a2a      	ldr	r2, [pc, #168]	@ (8012b94 <__sflush_r+0x104>)
 8012aec:	40ca      	lsrs	r2, r1
 8012aee:	07d6      	lsls	r6, r2, #31
 8012af0:	d527      	bpl.n	8012b42 <__sflush_r+0xb2>
 8012af2:	2200      	movs	r2, #0
 8012af4:	6062      	str	r2, [r4, #4]
 8012af6:	04d9      	lsls	r1, r3, #19
 8012af8:	6922      	ldr	r2, [r4, #16]
 8012afa:	6022      	str	r2, [r4, #0]
 8012afc:	d504      	bpl.n	8012b08 <__sflush_r+0x78>
 8012afe:	1c42      	adds	r2, r0, #1
 8012b00:	d101      	bne.n	8012b06 <__sflush_r+0x76>
 8012b02:	682b      	ldr	r3, [r5, #0]
 8012b04:	b903      	cbnz	r3, 8012b08 <__sflush_r+0x78>
 8012b06:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b0a:	602f      	str	r7, [r5, #0]
 8012b0c:	b1b9      	cbz	r1, 8012b3e <__sflush_r+0xae>
 8012b0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b12:	4299      	cmp	r1, r3
 8012b14:	d002      	beq.n	8012b1c <__sflush_r+0x8c>
 8012b16:	4628      	mov	r0, r5
 8012b18:	f7fe f934 	bl	8010d84 <_free_r>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b20:	e00d      	b.n	8012b3e <__sflush_r+0xae>
 8012b22:	2301      	movs	r3, #1
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b0      	blx	r6
 8012b28:	4602      	mov	r2, r0
 8012b2a:	1c50      	adds	r0, r2, #1
 8012b2c:	d1c9      	bne.n	8012ac2 <__sflush_r+0x32>
 8012b2e:	682b      	ldr	r3, [r5, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d0c6      	beq.n	8012ac2 <__sflush_r+0x32>
 8012b34:	2b1d      	cmp	r3, #29
 8012b36:	d001      	beq.n	8012b3c <__sflush_r+0xac>
 8012b38:	2b16      	cmp	r3, #22
 8012b3a:	d11e      	bne.n	8012b7a <__sflush_r+0xea>
 8012b3c:	602f      	str	r7, [r5, #0]
 8012b3e:	2000      	movs	r0, #0
 8012b40:	e022      	b.n	8012b88 <__sflush_r+0xf8>
 8012b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b46:	b21b      	sxth	r3, r3
 8012b48:	e01b      	b.n	8012b82 <__sflush_r+0xf2>
 8012b4a:	690f      	ldr	r7, [r1, #16]
 8012b4c:	2f00      	cmp	r7, #0
 8012b4e:	d0f6      	beq.n	8012b3e <__sflush_r+0xae>
 8012b50:	0793      	lsls	r3, r2, #30
 8012b52:	680e      	ldr	r6, [r1, #0]
 8012b54:	bf08      	it	eq
 8012b56:	694b      	ldreq	r3, [r1, #20]
 8012b58:	600f      	str	r7, [r1, #0]
 8012b5a:	bf18      	it	ne
 8012b5c:	2300      	movne	r3, #0
 8012b5e:	eba6 0807 	sub.w	r8, r6, r7
 8012b62:	608b      	str	r3, [r1, #8]
 8012b64:	f1b8 0f00 	cmp.w	r8, #0
 8012b68:	dde9      	ble.n	8012b3e <__sflush_r+0xae>
 8012b6a:	6a21      	ldr	r1, [r4, #32]
 8012b6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012b6e:	4643      	mov	r3, r8
 8012b70:	463a      	mov	r2, r7
 8012b72:	4628      	mov	r0, r5
 8012b74:	47b0      	blx	r6
 8012b76:	2800      	cmp	r0, #0
 8012b78:	dc08      	bgt.n	8012b8c <__sflush_r+0xfc>
 8012b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b82:	81a3      	strh	r3, [r4, #12]
 8012b84:	f04f 30ff 	mov.w	r0, #4294967295
 8012b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b8c:	4407      	add	r7, r0
 8012b8e:	eba8 0800 	sub.w	r8, r8, r0
 8012b92:	e7e7      	b.n	8012b64 <__sflush_r+0xd4>
 8012b94:	20400001 	.word	0x20400001

08012b98 <_fflush_r>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	690b      	ldr	r3, [r1, #16]
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	b913      	cbnz	r3, 8012ba8 <_fflush_r+0x10>
 8012ba2:	2500      	movs	r5, #0
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	bd38      	pop	{r3, r4, r5, pc}
 8012ba8:	b118      	cbz	r0, 8012bb2 <_fflush_r+0x1a>
 8012baa:	6a03      	ldr	r3, [r0, #32]
 8012bac:	b90b      	cbnz	r3, 8012bb2 <_fflush_r+0x1a>
 8012bae:	f7fd f873 	bl	800fc98 <__sinit>
 8012bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d0f3      	beq.n	8012ba2 <_fflush_r+0xa>
 8012bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012bbc:	07d0      	lsls	r0, r2, #31
 8012bbe:	d404      	bmi.n	8012bca <_fflush_r+0x32>
 8012bc0:	0599      	lsls	r1, r3, #22
 8012bc2:	d402      	bmi.n	8012bca <_fflush_r+0x32>
 8012bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012bc6:	f7fd fad4 	bl	8010172 <__retarget_lock_acquire_recursive>
 8012bca:	4628      	mov	r0, r5
 8012bcc:	4621      	mov	r1, r4
 8012bce:	f7ff ff5f 	bl	8012a90 <__sflush_r>
 8012bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012bd4:	07da      	lsls	r2, r3, #31
 8012bd6:	4605      	mov	r5, r0
 8012bd8:	d4e4      	bmi.n	8012ba4 <_fflush_r+0xc>
 8012bda:	89a3      	ldrh	r3, [r4, #12]
 8012bdc:	059b      	lsls	r3, r3, #22
 8012bde:	d4e1      	bmi.n	8012ba4 <_fflush_r+0xc>
 8012be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012be2:	f7fd fac7 	bl	8010174 <__retarget_lock_release_recursive>
 8012be6:	e7dd      	b.n	8012ba4 <_fflush_r+0xc>

08012be8 <__swhatbuf_r>:
 8012be8:	b570      	push	{r4, r5, r6, lr}
 8012bea:	460c      	mov	r4, r1
 8012bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf0:	2900      	cmp	r1, #0
 8012bf2:	b096      	sub	sp, #88	@ 0x58
 8012bf4:	4615      	mov	r5, r2
 8012bf6:	461e      	mov	r6, r3
 8012bf8:	da0d      	bge.n	8012c16 <__swhatbuf_r+0x2e>
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c00:	f04f 0100 	mov.w	r1, #0
 8012c04:	bf14      	ite	ne
 8012c06:	2340      	movne	r3, #64	@ 0x40
 8012c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	6031      	str	r1, [r6, #0]
 8012c10:	602b      	str	r3, [r5, #0]
 8012c12:	b016      	add	sp, #88	@ 0x58
 8012c14:	bd70      	pop	{r4, r5, r6, pc}
 8012c16:	466a      	mov	r2, sp
 8012c18:	f000 f8d6 	bl	8012dc8 <_fstat_r>
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	dbec      	blt.n	8012bfa <__swhatbuf_r+0x12>
 8012c20:	9901      	ldr	r1, [sp, #4]
 8012c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c2a:	4259      	negs	r1, r3
 8012c2c:	4159      	adcs	r1, r3
 8012c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c32:	e7eb      	b.n	8012c0c <__swhatbuf_r+0x24>

08012c34 <__smakebuf_r>:
 8012c34:	898b      	ldrh	r3, [r1, #12]
 8012c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c38:	079d      	lsls	r5, r3, #30
 8012c3a:	4606      	mov	r6, r0
 8012c3c:	460c      	mov	r4, r1
 8012c3e:	d507      	bpl.n	8012c50 <__smakebuf_r+0x1c>
 8012c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	6123      	str	r3, [r4, #16]
 8012c48:	2301      	movs	r3, #1
 8012c4a:	6163      	str	r3, [r4, #20]
 8012c4c:	b003      	add	sp, #12
 8012c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c50:	ab01      	add	r3, sp, #4
 8012c52:	466a      	mov	r2, sp
 8012c54:	f7ff ffc8 	bl	8012be8 <__swhatbuf_r>
 8012c58:	9f00      	ldr	r7, [sp, #0]
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f7fb fad4 	bl	800e20c <_malloc_r>
 8012c64:	b948      	cbnz	r0, 8012c7a <__smakebuf_r+0x46>
 8012c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c6a:	059a      	lsls	r2, r3, #22
 8012c6c:	d4ee      	bmi.n	8012c4c <__smakebuf_r+0x18>
 8012c6e:	f023 0303 	bic.w	r3, r3, #3
 8012c72:	f043 0302 	orr.w	r3, r3, #2
 8012c76:	81a3      	strh	r3, [r4, #12]
 8012c78:	e7e2      	b.n	8012c40 <__smakebuf_r+0xc>
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	6020      	str	r0, [r4, #0]
 8012c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c82:	81a3      	strh	r3, [r4, #12]
 8012c84:	9b01      	ldr	r3, [sp, #4]
 8012c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c8a:	b15b      	cbz	r3, 8012ca4 <__smakebuf_r+0x70>
 8012c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c90:	4630      	mov	r0, r6
 8012c92:	f000 f8ab 	bl	8012dec <_isatty_r>
 8012c96:	b128      	cbz	r0, 8012ca4 <__smakebuf_r+0x70>
 8012c98:	89a3      	ldrh	r3, [r4, #12]
 8012c9a:	f023 0303 	bic.w	r3, r3, #3
 8012c9e:	f043 0301 	orr.w	r3, r3, #1
 8012ca2:	81a3      	strh	r3, [r4, #12]
 8012ca4:	89a3      	ldrh	r3, [r4, #12]
 8012ca6:	431d      	orrs	r5, r3
 8012ca8:	81a5      	strh	r5, [r4, #12]
 8012caa:	e7cf      	b.n	8012c4c <__smakebuf_r+0x18>

08012cac <__sccl>:
 8012cac:	b570      	push	{r4, r5, r6, lr}
 8012cae:	780b      	ldrb	r3, [r1, #0]
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	2b5e      	cmp	r3, #94	@ 0x5e
 8012cb4:	bf0b      	itete	eq
 8012cb6:	784b      	ldrbeq	r3, [r1, #1]
 8012cb8:	1c4a      	addne	r2, r1, #1
 8012cba:	1c8a      	addeq	r2, r1, #2
 8012cbc:	2100      	movne	r1, #0
 8012cbe:	bf08      	it	eq
 8012cc0:	2101      	moveq	r1, #1
 8012cc2:	3801      	subs	r0, #1
 8012cc4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012cc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012ccc:	42a8      	cmp	r0, r5
 8012cce:	d1fb      	bne.n	8012cc8 <__sccl+0x1c>
 8012cd0:	b90b      	cbnz	r3, 8012cd6 <__sccl+0x2a>
 8012cd2:	1e50      	subs	r0, r2, #1
 8012cd4:	bd70      	pop	{r4, r5, r6, pc}
 8012cd6:	f081 0101 	eor.w	r1, r1, #1
 8012cda:	54e1      	strb	r1, [r4, r3]
 8012cdc:	4610      	mov	r0, r2
 8012cde:	4602      	mov	r2, r0
 8012ce0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012ce4:	2d2d      	cmp	r5, #45	@ 0x2d
 8012ce6:	d005      	beq.n	8012cf4 <__sccl+0x48>
 8012ce8:	2d5d      	cmp	r5, #93	@ 0x5d
 8012cea:	d016      	beq.n	8012d1a <__sccl+0x6e>
 8012cec:	2d00      	cmp	r5, #0
 8012cee:	d0f1      	beq.n	8012cd4 <__sccl+0x28>
 8012cf0:	462b      	mov	r3, r5
 8012cf2:	e7f2      	b.n	8012cda <__sccl+0x2e>
 8012cf4:	7846      	ldrb	r6, [r0, #1]
 8012cf6:	2e5d      	cmp	r6, #93	@ 0x5d
 8012cf8:	d0fa      	beq.n	8012cf0 <__sccl+0x44>
 8012cfa:	42b3      	cmp	r3, r6
 8012cfc:	dcf8      	bgt.n	8012cf0 <__sccl+0x44>
 8012cfe:	3002      	adds	r0, #2
 8012d00:	461a      	mov	r2, r3
 8012d02:	3201      	adds	r2, #1
 8012d04:	4296      	cmp	r6, r2
 8012d06:	54a1      	strb	r1, [r4, r2]
 8012d08:	dcfb      	bgt.n	8012d02 <__sccl+0x56>
 8012d0a:	1af2      	subs	r2, r6, r3
 8012d0c:	3a01      	subs	r2, #1
 8012d0e:	1c5d      	adds	r5, r3, #1
 8012d10:	42b3      	cmp	r3, r6
 8012d12:	bfa8      	it	ge
 8012d14:	2200      	movge	r2, #0
 8012d16:	18ab      	adds	r3, r5, r2
 8012d18:	e7e1      	b.n	8012cde <__sccl+0x32>
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	e7da      	b.n	8012cd4 <__sccl+0x28>

08012d1e <__submore>:
 8012d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d22:	460c      	mov	r4, r1
 8012d24:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d2a:	4299      	cmp	r1, r3
 8012d2c:	d11d      	bne.n	8012d6a <__submore+0x4c>
 8012d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012d32:	f7fb fa6b 	bl	800e20c <_malloc_r>
 8012d36:	b918      	cbnz	r0, 8012d40 <__submore+0x22>
 8012d38:	f04f 30ff 	mov.w	r0, #4294967295
 8012d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012d46:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012d4a:	6360      	str	r0, [r4, #52]	@ 0x34
 8012d4c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012d50:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012d54:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012d58:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012d5c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012d60:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012d64:	6020      	str	r0, [r4, #0]
 8012d66:	2000      	movs	r0, #0
 8012d68:	e7e8      	b.n	8012d3c <__submore+0x1e>
 8012d6a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012d6c:	0077      	lsls	r7, r6, #1
 8012d6e:	463a      	mov	r2, r7
 8012d70:	f7fb fae0 	bl	800e334 <_realloc_r>
 8012d74:	4605      	mov	r5, r0
 8012d76:	2800      	cmp	r0, #0
 8012d78:	d0de      	beq.n	8012d38 <__submore+0x1a>
 8012d7a:	eb00 0806 	add.w	r8, r0, r6
 8012d7e:	4601      	mov	r1, r0
 8012d80:	4632      	mov	r2, r6
 8012d82:	4640      	mov	r0, r8
 8012d84:	f7fd f9f7 	bl	8010176 <memcpy>
 8012d88:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012d8c:	f8c4 8000 	str.w	r8, [r4]
 8012d90:	e7e9      	b.n	8012d66 <__submore+0x48>

08012d92 <memmove>:
 8012d92:	4288      	cmp	r0, r1
 8012d94:	b510      	push	{r4, lr}
 8012d96:	eb01 0402 	add.w	r4, r1, r2
 8012d9a:	d902      	bls.n	8012da2 <memmove+0x10>
 8012d9c:	4284      	cmp	r4, r0
 8012d9e:	4623      	mov	r3, r4
 8012da0:	d807      	bhi.n	8012db2 <memmove+0x20>
 8012da2:	1e43      	subs	r3, r0, #1
 8012da4:	42a1      	cmp	r1, r4
 8012da6:	d008      	beq.n	8012dba <memmove+0x28>
 8012da8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012db0:	e7f8      	b.n	8012da4 <memmove+0x12>
 8012db2:	4402      	add	r2, r0
 8012db4:	4601      	mov	r1, r0
 8012db6:	428a      	cmp	r2, r1
 8012db8:	d100      	bne.n	8012dbc <memmove+0x2a>
 8012dba:	bd10      	pop	{r4, pc}
 8012dbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012dc4:	e7f7      	b.n	8012db6 <memmove+0x24>
	...

08012dc8 <_fstat_r>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	4d07      	ldr	r5, [pc, #28]	@ (8012de8 <_fstat_r+0x20>)
 8012dcc:	2300      	movs	r3, #0
 8012dce:	4604      	mov	r4, r0
 8012dd0:	4608      	mov	r0, r1
 8012dd2:	4611      	mov	r1, r2
 8012dd4:	602b      	str	r3, [r5, #0]
 8012dd6:	f7ef fc65 	bl	80026a4 <_fstat>
 8012dda:	1c43      	adds	r3, r0, #1
 8012ddc:	d102      	bne.n	8012de4 <_fstat_r+0x1c>
 8012dde:	682b      	ldr	r3, [r5, #0]
 8012de0:	b103      	cbz	r3, 8012de4 <_fstat_r+0x1c>
 8012de2:	6023      	str	r3, [r4, #0]
 8012de4:	bd38      	pop	{r3, r4, r5, pc}
 8012de6:	bf00      	nop
 8012de8:	24004f08 	.word	0x24004f08

08012dec <_isatty_r>:
 8012dec:	b538      	push	{r3, r4, r5, lr}
 8012dee:	4d06      	ldr	r5, [pc, #24]	@ (8012e08 <_isatty_r+0x1c>)
 8012df0:	2300      	movs	r3, #0
 8012df2:	4604      	mov	r4, r0
 8012df4:	4608      	mov	r0, r1
 8012df6:	602b      	str	r3, [r5, #0]
 8012df8:	f7ef fc64 	bl	80026c4 <_isatty>
 8012dfc:	1c43      	adds	r3, r0, #1
 8012dfe:	d102      	bne.n	8012e06 <_isatty_r+0x1a>
 8012e00:	682b      	ldr	r3, [r5, #0]
 8012e02:	b103      	cbz	r3, 8012e06 <_isatty_r+0x1a>
 8012e04:	6023      	str	r3, [r4, #0]
 8012e06:	bd38      	pop	{r3, r4, r5, pc}
 8012e08:	24004f08 	.word	0x24004f08

08012e0c <__assert_func>:
 8012e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e0e:	4614      	mov	r4, r2
 8012e10:	461a      	mov	r2, r3
 8012e12:	4b09      	ldr	r3, [pc, #36]	@ (8012e38 <__assert_func+0x2c>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4605      	mov	r5, r0
 8012e18:	68d8      	ldr	r0, [r3, #12]
 8012e1a:	b14c      	cbz	r4, 8012e30 <__assert_func+0x24>
 8012e1c:	4b07      	ldr	r3, [pc, #28]	@ (8012e3c <__assert_func+0x30>)
 8012e1e:	9100      	str	r1, [sp, #0]
 8012e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e24:	4906      	ldr	r1, [pc, #24]	@ (8012e40 <__assert_func+0x34>)
 8012e26:	462b      	mov	r3, r5
 8012e28:	f000 f892 	bl	8012f50 <fiprintf>
 8012e2c:	f000 f8a2 	bl	8012f74 <abort>
 8012e30:	4b04      	ldr	r3, [pc, #16]	@ (8012e44 <__assert_func+0x38>)
 8012e32:	461c      	mov	r4, r3
 8012e34:	e7f3      	b.n	8012e1e <__assert_func+0x12>
 8012e36:	bf00      	nop
 8012e38:	24000198 	.word	0x24000198
 8012e3c:	080133d3 	.word	0x080133d3
 8012e40:	080133e0 	.word	0x080133e0
 8012e44:	0801340e 	.word	0x0801340e

08012e48 <_calloc_r>:
 8012e48:	b570      	push	{r4, r5, r6, lr}
 8012e4a:	fba1 5402 	umull	r5, r4, r1, r2
 8012e4e:	b934      	cbnz	r4, 8012e5e <_calloc_r+0x16>
 8012e50:	4629      	mov	r1, r5
 8012e52:	f7fb f9db 	bl	800e20c <_malloc_r>
 8012e56:	4606      	mov	r6, r0
 8012e58:	b928      	cbnz	r0, 8012e66 <_calloc_r+0x1e>
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	bd70      	pop	{r4, r5, r6, pc}
 8012e5e:	220c      	movs	r2, #12
 8012e60:	6002      	str	r2, [r0, #0]
 8012e62:	2600      	movs	r6, #0
 8012e64:	e7f9      	b.n	8012e5a <_calloc_r+0x12>
 8012e66:	462a      	mov	r2, r5
 8012e68:	4621      	mov	r1, r4
 8012e6a:	f7fd f8e3 	bl	8010034 <memset>
 8012e6e:	e7f4      	b.n	8012e5a <_calloc_r+0x12>

08012e70 <_strtoul_l.isra.0>:
 8012e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e74:	4e34      	ldr	r6, [pc, #208]	@ (8012f48 <_strtoul_l.isra.0+0xd8>)
 8012e76:	4686      	mov	lr, r0
 8012e78:	460d      	mov	r5, r1
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e80:	5d37      	ldrb	r7, [r6, r4]
 8012e82:	f017 0708 	ands.w	r7, r7, #8
 8012e86:	d1f8      	bne.n	8012e7a <_strtoul_l.isra.0+0xa>
 8012e88:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e8a:	d110      	bne.n	8012eae <_strtoul_l.isra.0+0x3e>
 8012e8c:	782c      	ldrb	r4, [r5, #0]
 8012e8e:	2701      	movs	r7, #1
 8012e90:	1c85      	adds	r5, r0, #2
 8012e92:	f033 0010 	bics.w	r0, r3, #16
 8012e96:	d115      	bne.n	8012ec4 <_strtoul_l.isra.0+0x54>
 8012e98:	2c30      	cmp	r4, #48	@ 0x30
 8012e9a:	d10d      	bne.n	8012eb8 <_strtoul_l.isra.0+0x48>
 8012e9c:	7828      	ldrb	r0, [r5, #0]
 8012e9e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012ea2:	2858      	cmp	r0, #88	@ 0x58
 8012ea4:	d108      	bne.n	8012eb8 <_strtoul_l.isra.0+0x48>
 8012ea6:	786c      	ldrb	r4, [r5, #1]
 8012ea8:	3502      	adds	r5, #2
 8012eaa:	2310      	movs	r3, #16
 8012eac:	e00a      	b.n	8012ec4 <_strtoul_l.isra.0+0x54>
 8012eae:	2c2b      	cmp	r4, #43	@ 0x2b
 8012eb0:	bf04      	itt	eq
 8012eb2:	782c      	ldrbeq	r4, [r5, #0]
 8012eb4:	1c85      	addeq	r5, r0, #2
 8012eb6:	e7ec      	b.n	8012e92 <_strtoul_l.isra.0+0x22>
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d1f6      	bne.n	8012eaa <_strtoul_l.isra.0+0x3a>
 8012ebc:	2c30      	cmp	r4, #48	@ 0x30
 8012ebe:	bf14      	ite	ne
 8012ec0:	230a      	movne	r3, #10
 8012ec2:	2308      	moveq	r3, #8
 8012ec4:	f04f 38ff 	mov.w	r8, #4294967295
 8012ec8:	2600      	movs	r6, #0
 8012eca:	fbb8 f8f3 	udiv	r8, r8, r3
 8012ece:	fb03 f908 	mul.w	r9, r3, r8
 8012ed2:	ea6f 0909 	mvn.w	r9, r9
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012edc:	f1bc 0f09 	cmp.w	ip, #9
 8012ee0:	d810      	bhi.n	8012f04 <_strtoul_l.isra.0+0x94>
 8012ee2:	4664      	mov	r4, ip
 8012ee4:	42a3      	cmp	r3, r4
 8012ee6:	dd1e      	ble.n	8012f26 <_strtoul_l.isra.0+0xb6>
 8012ee8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012eec:	d007      	beq.n	8012efe <_strtoul_l.isra.0+0x8e>
 8012eee:	4580      	cmp	r8, r0
 8012ef0:	d316      	bcc.n	8012f20 <_strtoul_l.isra.0+0xb0>
 8012ef2:	d101      	bne.n	8012ef8 <_strtoul_l.isra.0+0x88>
 8012ef4:	45a1      	cmp	r9, r4
 8012ef6:	db13      	blt.n	8012f20 <_strtoul_l.isra.0+0xb0>
 8012ef8:	fb00 4003 	mla	r0, r0, r3, r4
 8012efc:	2601      	movs	r6, #1
 8012efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f02:	e7e9      	b.n	8012ed8 <_strtoul_l.isra.0+0x68>
 8012f04:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012f08:	f1bc 0f19 	cmp.w	ip, #25
 8012f0c:	d801      	bhi.n	8012f12 <_strtoul_l.isra.0+0xa2>
 8012f0e:	3c37      	subs	r4, #55	@ 0x37
 8012f10:	e7e8      	b.n	8012ee4 <_strtoul_l.isra.0+0x74>
 8012f12:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012f16:	f1bc 0f19 	cmp.w	ip, #25
 8012f1a:	d804      	bhi.n	8012f26 <_strtoul_l.isra.0+0xb6>
 8012f1c:	3c57      	subs	r4, #87	@ 0x57
 8012f1e:	e7e1      	b.n	8012ee4 <_strtoul_l.isra.0+0x74>
 8012f20:	f04f 36ff 	mov.w	r6, #4294967295
 8012f24:	e7eb      	b.n	8012efe <_strtoul_l.isra.0+0x8e>
 8012f26:	1c73      	adds	r3, r6, #1
 8012f28:	d106      	bne.n	8012f38 <_strtoul_l.isra.0+0xc8>
 8012f2a:	2322      	movs	r3, #34	@ 0x22
 8012f2c:	f8ce 3000 	str.w	r3, [lr]
 8012f30:	4630      	mov	r0, r6
 8012f32:	b932      	cbnz	r2, 8012f42 <_strtoul_l.isra.0+0xd2>
 8012f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f38:	b107      	cbz	r7, 8012f3c <_strtoul_l.isra.0+0xcc>
 8012f3a:	4240      	negs	r0, r0
 8012f3c:	2a00      	cmp	r2, #0
 8012f3e:	d0f9      	beq.n	8012f34 <_strtoul_l.isra.0+0xc4>
 8012f40:	b106      	cbz	r6, 8012f44 <_strtoul_l.isra.0+0xd4>
 8012f42:	1e69      	subs	r1, r5, #1
 8012f44:	6011      	str	r1, [r2, #0]
 8012f46:	e7f5      	b.n	8012f34 <_strtoul_l.isra.0+0xc4>
 8012f48:	08013461 	.word	0x08013461

08012f4c <_strtoul_r>:
 8012f4c:	f7ff bf90 	b.w	8012e70 <_strtoul_l.isra.0>

08012f50 <fiprintf>:
 8012f50:	b40e      	push	{r1, r2, r3}
 8012f52:	b503      	push	{r0, r1, lr}
 8012f54:	4601      	mov	r1, r0
 8012f56:	ab03      	add	r3, sp, #12
 8012f58:	4805      	ldr	r0, [pc, #20]	@ (8012f70 <fiprintf+0x20>)
 8012f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f5e:	6800      	ldr	r0, [r0, #0]
 8012f60:	9301      	str	r3, [sp, #4]
 8012f62:	f7ff fb2f 	bl	80125c4 <_vfiprintf_r>
 8012f66:	b002      	add	sp, #8
 8012f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f6c:	b003      	add	sp, #12
 8012f6e:	4770      	bx	lr
 8012f70:	24000198 	.word	0x24000198

08012f74 <abort>:
 8012f74:	b508      	push	{r3, lr}
 8012f76:	2006      	movs	r0, #6
 8012f78:	f000 f82c 	bl	8012fd4 <raise>
 8012f7c:	2001      	movs	r0, #1
 8012f7e:	f7ef fb41 	bl	8002604 <_exit>

08012f82 <_raise_r>:
 8012f82:	291f      	cmp	r1, #31
 8012f84:	b538      	push	{r3, r4, r5, lr}
 8012f86:	4605      	mov	r5, r0
 8012f88:	460c      	mov	r4, r1
 8012f8a:	d904      	bls.n	8012f96 <_raise_r+0x14>
 8012f8c:	2316      	movs	r3, #22
 8012f8e:	6003      	str	r3, [r0, #0]
 8012f90:	f04f 30ff 	mov.w	r0, #4294967295
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f98:	b112      	cbz	r2, 8012fa0 <_raise_r+0x1e>
 8012f9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f9e:	b94b      	cbnz	r3, 8012fb4 <_raise_r+0x32>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	f000 f831 	bl	8013008 <_getpid_r>
 8012fa6:	4622      	mov	r2, r4
 8012fa8:	4601      	mov	r1, r0
 8012faa:	4628      	mov	r0, r5
 8012fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fb0:	f000 b818 	b.w	8012fe4 <_kill_r>
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d00a      	beq.n	8012fce <_raise_r+0x4c>
 8012fb8:	1c59      	adds	r1, r3, #1
 8012fba:	d103      	bne.n	8012fc4 <_raise_r+0x42>
 8012fbc:	2316      	movs	r3, #22
 8012fbe:	6003      	str	r3, [r0, #0]
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	e7e7      	b.n	8012f94 <_raise_r+0x12>
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fca:	4620      	mov	r0, r4
 8012fcc:	4798      	blx	r3
 8012fce:	2000      	movs	r0, #0
 8012fd0:	e7e0      	b.n	8012f94 <_raise_r+0x12>
	...

08012fd4 <raise>:
 8012fd4:	4b02      	ldr	r3, [pc, #8]	@ (8012fe0 <raise+0xc>)
 8012fd6:	4601      	mov	r1, r0
 8012fd8:	6818      	ldr	r0, [r3, #0]
 8012fda:	f7ff bfd2 	b.w	8012f82 <_raise_r>
 8012fde:	bf00      	nop
 8012fe0:	24000198 	.word	0x24000198

08012fe4 <_kill_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	4d07      	ldr	r5, [pc, #28]	@ (8013004 <_kill_r+0x20>)
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4604      	mov	r4, r0
 8012fec:	4608      	mov	r0, r1
 8012fee:	4611      	mov	r1, r2
 8012ff0:	602b      	str	r3, [r5, #0]
 8012ff2:	f7ef faf7 	bl	80025e4 <_kill>
 8012ff6:	1c43      	adds	r3, r0, #1
 8012ff8:	d102      	bne.n	8013000 <_kill_r+0x1c>
 8012ffa:	682b      	ldr	r3, [r5, #0]
 8012ffc:	b103      	cbz	r3, 8013000 <_kill_r+0x1c>
 8012ffe:	6023      	str	r3, [r4, #0]
 8013000:	bd38      	pop	{r3, r4, r5, pc}
 8013002:	bf00      	nop
 8013004:	24004f08 	.word	0x24004f08

08013008 <_getpid_r>:
 8013008:	f7ef bae4 	b.w	80025d4 <_getpid>

0801300c <_init>:
 801300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300e:	bf00      	nop
 8013010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013012:	bc08      	pop	{r3}
 8013014:	469e      	mov	lr, r3
 8013016:	4770      	bx	lr

08013018 <_fini>:
 8013018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801301a:	bf00      	nop
 801301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801301e:	bc08      	pop	{r3}
 8013020:	469e      	mov	lr, r3
 8013022:	4770      	bx	lr
